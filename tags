!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABANDON_HASH	src/wallet/wallet.h	/^    static const uint256 ABANDON_HASH;$/;"	m	class:CMerkleTx
ABSENT	src/test/coins_tests.cpp	/^const static CAmount ABSENT = -2;$/;"	v	file:
ABSENT_FLAGS	src/test/coins_tests.cpp	/^const static auto ABSENT_FLAGS = {NO_ENTRY};$/;"	v	file:
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL	doc/man/Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL	src/Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL	src/secp256k1/Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL	src/univalue/Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_AMFLAGS	src/secp256k1/Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_AMFLAGS	src/univalue/Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	doc/man/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	src/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	src/secp256k1/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	src/univalue/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACQUIRED_AFTER	src/threadsafety.h	/^#define ACQUIRED_AFTER(/;"	d
ACQUIRED_BEFORE	src/threadsafety.h	/^#define ACQUIRED_BEFORE(/;"	d
ACTIVE	src/versionbits.h	/^    ACTIVE,$/;"	m	class:ThresholdState
ADDR	src/protocol.cpp	/^const char *ADDR="addr";$/;"	m	namespace:NetMsgType	file:
ADDRESS	test/functional/interface_zmq.py	/^ADDRESS = "tcp:\/\/127.0.0.1:28332"$/;"	v
ADDRESS_BCRT1_UNSPENDABLE	src/test/util.cpp	/^const std::string ADDRESS_BCRT1_UNSPENDABLE = "bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj";$/;"	v
ADDRESS_BCRT1_UNSPENDABLE	test/functional/feature_notifications.py	/^from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE$/;"	i
ADDRESS_BCRT1_UNSPENDABLE	test/functional/interface_zmq.py	/^from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE$/;"	i
ADDRESS_BCRT1_UNSPENDABLE	test/functional/rpc_invalidateblock.py	/^from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE$/;"	i
ADDRESS_BCRT1_UNSPENDABLE	test/functional/test_framework/address.py	/^ADDRESS_BCRT1_UNSPENDABLE = 'bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj'$/;"	v
ADDRESS_COLUMN_WIDTH	src/qt/rpcconsole.h	/^        ADDRESS_COLUMN_WIDTH = 200,$/;"	e	enum:RPCConsole::ColumnWidths
ADDRESS_REGEXP	contrib/devtools/update-translations.py	/^ADDRESS_REGEXP = re.compile('([13]|bc1)[a-zA-Z0-9]{30,}')$/;"	v
ADDRESS_WATCHONLY	test/functional/wallet_balance.py	/^from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE as ADDRESS_WATCHONLY$/;"	i
ADDRMAN_BUCKET_SIZE	src/addrman.h	/^#define ADDRMAN_BUCKET_SIZE /;"	d
ADDRMAN_BUCKET_SIZE_LOG2	src/addrman.h	/^#define ADDRMAN_BUCKET_SIZE_LOG2 /;"	d
ADDRMAN_GETADDR_MAX	src/addrman.h	/^#define ADDRMAN_GETADDR_MAX /;"	d
ADDRMAN_GETADDR_MAX_PCT	src/addrman.h	/^#define ADDRMAN_GETADDR_MAX_PCT /;"	d
ADDRMAN_HORIZON_DAYS	src/addrman.h	/^#define ADDRMAN_HORIZON_DAYS /;"	d
ADDRMAN_MAX_FAILURES	src/addrman.h	/^#define ADDRMAN_MAX_FAILURES /;"	d
ADDRMAN_MIN_FAIL_DAYS	src/addrman.h	/^#define ADDRMAN_MIN_FAIL_DAYS /;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	src/addrman.h	/^#define ADDRMAN_NEW_BUCKETS_PER_ADDRESS /;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	src/addrman.h	/^#define ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP /;"	d
ADDRMAN_NEW_BUCKET_COUNT	src/addrman.h	/^#define ADDRMAN_NEW_BUCKET_COUNT /;"	d
ADDRMAN_NEW_BUCKET_COUNT_LOG2	src/addrman.h	/^#define ADDRMAN_NEW_BUCKET_COUNT_LOG2 /;"	d
ADDRMAN_REPLACEMENT_HOURS	src/addrman.h	/^#define ADDRMAN_REPLACEMENT_HOURS /;"	d
ADDRMAN_RETRIES	src/addrman.h	/^#define ADDRMAN_RETRIES /;"	d
ADDRMAN_SET_TRIED_COLLISION_SIZE	src/addrman.h	/^#define ADDRMAN_SET_TRIED_COLLISION_SIZE /;"	d
ADDRMAN_TEST_WINDOW	src/addrman.h	/^static const int64_t ADDRMAN_TEST_WINDOW = 40*60; \/\/ 40 minutes$/;"	v
ADDRMAN_TRIED_BUCKETS_PER_GROUP	src/addrman.h	/^#define ADDRMAN_TRIED_BUCKETS_PER_GROUP /;"	d
ADDRMAN_TRIED_BUCKET_COUNT	src/addrman.h	/^#define ADDRMAN_TRIED_BUCKET_COUNT /;"	d
ADDRMAN_TRIED_BUCKET_COUNT_LOG2	src/addrman.h	/^#define ADDRMAN_TRIED_BUCKET_COUNT_LOG2 /;"	d
ADD_SERIALIZE_METHODS	src/addrdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBanEntry
ADD_SERIALIZE_METHODS	src/addrman.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddrInfo
ADD_SERIALIZE_METHODS	src/blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactions
ADD_SERIALIZE_METHODS	src/blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactionsRequest
ADD_SERIALIZE_METHODS	src/blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeaderAndShortTxIDs
ADD_SERIALIZE_METHODS	src/blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:PrefilledTransaction
ADD_SERIALIZE_METHODS	src/blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:TransactionCompressor
ADD_SERIALIZE_METHODS	src/bloom.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBloomFilter
ADD_SERIALIZE_METHODS	src/chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockFileInfo
ADD_SERIALIZE_METHODS	src/chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CDiskBlockIndex
ADD_SERIALIZE_METHODS	src/compressor.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOutCompressor
ADD_SERIALIZE_METHODS	src/flatfile.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:FlatFilePos
ADD_SERIALIZE_METHODS	src/index/blockfilterindex.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:__anon120::DBHashKey	file:
ADD_SERIALIZE_METHODS	src/index/blockfilterindex.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:__anon120::DBVal	file:
ADD_SERIALIZE_METHODS	src/index/txindex.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskTxPos	file:
ADD_SERIALIZE_METHODS	src/merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleBlock
ADD_SERIALIZE_METHODS	src/merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CPartialMerkleTree
ADD_SERIALIZE_METHODS	src/netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CNetAddr
ADD_SERIALIZE_METHODS	src/netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CService
ADD_SERIALIZE_METHODS	src/netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CSubNet
ADD_SERIALIZE_METHODS	src/policy/feerate.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CFeeRate
ADD_SERIALIZE_METHODS	src/primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlock
ADD_SERIALIZE_METHODS	src/primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeader
ADD_SERIALIZE_METHODS	src/primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CBlockLocator
ADD_SERIALIZE_METHODS	src/primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:COutPoint
ADD_SERIALIZE_METHODS	src/primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxIn
ADD_SERIALIZE_METHODS	src/primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOut
ADD_SERIALIZE_METHODS	src/protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddress
ADD_SERIALIZE_METHODS	src/protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CInv
ADD_SERIALIZE_METHODS	src/protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMessageHeader
ADD_SERIALIZE_METHODS	src/qt/recentrequeststablemodel.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:RecentRequestEntry
ADD_SERIALIZE_METHODS	src/qt/walletmodel.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:SendCoinsRecipient
ADD_SERIALIZE_METHODS	src/rest.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CCoin	file:
ADD_SERIALIZE_METHODS	src/script/script.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CScript
ADD_SERIALIZE_METHODS	src/script/sign.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:KeyOriginInfo
ADD_SERIALIZE_METHODS	src/serialize.h	/^#define ADD_SERIALIZE_METHODS /;"	d
ADD_SERIALIZE_METHODS	src/test/blockencodings_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:TestHeaderAndShortIDs	file:
ADD_SERIALIZE_METHODS	src/test/dbwrapper_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:StringContentsSerializer	file:
ADD_SERIALIZE_METHODS	src/test/serialize_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CSerializeMethodsTestSingle	file:
ADD_SERIALIZE_METHODS	src/undo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockUndo
ADD_SERIALIZE_METHODS	src/wallet/crypter.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMasterKey
ADD_SERIALIZE_METHODS	src/wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyPool
ADD_SERIALIZE_METHODS	src/wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleTx
ADD_SERIALIZE_METHODS	src/wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CWalletKey
ADD_SERIALIZE_METHODS	src/wallet/walletdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CHDChain
ADD_SERIALIZE_METHODS	src/wallet/walletdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyMetadata
ADD_SIGNALS_DECL_WRAPPER	src/ui_interface.h	/^#define ADD_SIGNALS_DECL_WRAPPER(/;"	d
ADD_SIGNALS_IMPL_WRAPPER	src/ui_interface.cpp	/^#define ADD_SIGNALS_IMPL_WRAPPER(/;"	d	file:
AES128_ctx	src/crypto/ctaes/ctaes.h	/^} AES128_ctx;$/;"	t	typeref:struct:__anon46
AES128_decrypt	src/crypto/ctaes/ctaes.c	/^void AES128_decrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES128_encrypt	src/crypto/ctaes/ctaes.c	/^void AES128_encrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES128_init	src/crypto/ctaes/ctaes.c	/^void AES128_init(AES128_ctx* ctx, const unsigned char* key16) {$/;"	f
AES192_ctx	src/crypto/ctaes/ctaes.h	/^} AES192_ctx;$/;"	t	typeref:struct:__anon47
AES192_decrypt	src/crypto/ctaes/ctaes.c	/^void AES192_decrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES192_encrypt	src/crypto/ctaes/ctaes.c	/^void AES192_encrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES192_init	src/crypto/ctaes/ctaes.c	/^void AES192_init(AES192_ctx* ctx, const unsigned char* key24) {$/;"	f
AES256CBCDecrypt	src/crypto/aes.cpp	/^AES256CBCDecrypt::AES256CBCDecrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES256CBCDecrypt
AES256CBCDecrypt	src/crypto/aes.h	/^class AES256CBCDecrypt$/;"	c
AES256CBCEncrypt	src/crypto/aes.cpp	/^AES256CBCEncrypt::AES256CBCEncrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES256CBCEncrypt
AES256CBCEncrypt	src/crypto/aes.h	/^class AES256CBCEncrypt$/;"	c
AES256Decrypt	src/crypto/aes.cpp	/^AES256Decrypt::AES256Decrypt(const unsigned char key[32])$/;"	f	class:AES256Decrypt
AES256Decrypt	src/crypto/aes.h	/^class AES256Decrypt$/;"	c
AES256Encrypt	src/crypto/aes.cpp	/^AES256Encrypt::AES256Encrypt(const unsigned char key[32])$/;"	f	class:AES256Encrypt
AES256Encrypt	src/crypto/aes.h	/^class AES256Encrypt$/;"	c
AES256_KEYSIZE	src/crypto/aes.h	/^static const int AES256_KEYSIZE = 32;$/;"	v
AES256_ctx	src/crypto/ctaes/ctaes.h	/^} AES256_ctx;$/;"	t	typeref:struct:__anon48
AES256_decrypt	src/crypto/ctaes/ctaes.c	/^void AES256_decrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES256_encrypt	src/crypto/ctaes/ctaes.c	/^void AES256_encrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES256_init	src/crypto/ctaes/ctaes.c	/^void AES256_init(AES256_ctx* ctx, const unsigned char* key32) {$/;"	f
AES_BLOCKSIZE	src/crypto/aes.h	/^static const int AES_BLOCKSIZE = 16;$/;"	v
AES_decrypt	src/crypto/ctaes/ctaes.c	/^static void AES_decrypt(const AES_state* rounds, int nrounds, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f	file:
AES_encrypt	src/crypto/ctaes/ctaes.c	/^static void AES_encrypt(const AES_state* rounds, int nrounds, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f	file:
AES_setup	src/crypto/ctaes/ctaes.c	/^static void AES_setup(AES_state* rounds, const uint8_t* key, int nkeywords, int nrounds)$/;"	f	file:
AES_state	src/crypto/ctaes/ctaes.h	/^} AES_state;$/;"	t	typeref:struct:__anon45
ALLOWED_LIBRARIES	contrib/devtools/symbol-check.py	/^ALLOWED_LIBRARIES = {$/;"	v
ALL_SCRIPTS	test/functional/test_runner.py	/^ALL_SCRIPTS = EXTENDED_SCRIPTS + BASE_SCRIPTS$/;"	v
ALL_TYPES	src/qt/transactionfilterproxy.h	/^    static const quint32 ALL_TYPES = 0xFFFFFFFF;$/;"	m	class:TransactionFilterProxy
ALREADY_IN_CHAIN	src/util/error.h	/^    ALREADY_IN_CHAIN,$/;"	m	class:TransactionError
ALWAYS_ACTIVE	src/consensus/params.h	/^    static constexpr int64_t ALWAYS_ACTIVE = -1;$/;"	m	struct:Consensus::BIP9Deployment
AMOUNT	src/rpc/util.h	/^        AMOUNT,        \/\/!< Special type representing a floating point amount (can be either NUM or STR)$/;"	m	class:RPCArg::Type
AMOUNTTYPE_ENUM_ELEMENTS	src/wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
AMOUNT_MINIMUM_COLUMN_WIDTH	src/qt/receivecoinsdialog.h	/^        AMOUNT_MINIMUM_COLUMN_WIDTH = 180,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
AMOUNT_MINIMUM_COLUMN_WIDTH	src/qt/transactionview.h	/^        AMOUNT_MINIMUM_COLUMN_WIDTH = 120,$/;"	e	enum:TransactionView::ColumnWidths
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	doc/man/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	src/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	src/secp256k1/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	src/univalue/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	src/Makefile	/^AM_CPPFLAGS = $(DEBUG_CPPFLAGS) $(HARDENED_CPPFLAGS)$/;"	m
AM_CXXFLAGS	src/Makefile	/^AM_CXXFLAGS = $(DEBUG_CXXFLAGS) $(HARDENED_CXXFLAGS) $(WARN_CXXFLAGS) $(NOWARN_CXXFLAGS) $(ERROR_CXXFLAGS) $(GPROF_CXXFLAGS) $(SANITIZER_CXXFLAGS)$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	doc/man/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	src/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	src/secp256k1/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	src/univalue/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_LDFLAGS	src/Makefile	/^AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS) \\$/;"	m
AM_LIBTOOLFLAGS	src/Makefile	/^AM_LIBTOOLFLAGS = --preserve-dup-deps$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	src/Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	src/secp256k1/Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_RECURSIVE_TARGETS	src/univalue/Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_V_AR	src/Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	src/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CC	src/secp256k1/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCAS	src/secp256k1/Makefile	/^AM_V_CCAS = $(am__v_CCAS_$(V))$/;"	m
AM_V_CCLD	src/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CCLD	src/secp256k1/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	src/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXX	src/univalue/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	src/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_CXXLD	src/univalue/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	doc/man/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	src/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	src/secp256k1/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	src/univalue/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_OBJCXX	src/Makefile	/^AM_V_OBJCXX = $(am__v_OBJCXX_$(V))$/;"	m
AM_V_OBJCXXLD	src/Makefile	/^AM_V_OBJCXXLD = $(am__v_OBJCXXLD_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	doc/man/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	src/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	src/secp256k1/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	src/univalue/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	doc/man/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	src/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	src/secp256k1/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	src/univalue/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	src/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	src/secp256k1/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	src/univalue/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
ANY_COPYRIGHT_COMPILED	contrib/devtools/copyright_header.py	/^ANY_COPYRIGHT_COMPILED = re.compile(ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE)$/;"	v
ANY_COPYRIGHT_STYLE	contrib/devtools/copyright_header.py	/^ANY_COPYRIGHT_STYLE = '(%s|%s)' % (COPYRIGHT_WITH_C, COPYRIGHT_WITHOUT_C)$/;"	v
ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE	contrib/devtools/copyright_header.py	/^ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE = ("%s %s" % (ANY_COPYRIGHT_STYLE,$/;"	v
ANY_YEAR_STYLE	contrib/devtools/copyright_header.py	/^ANY_YEAR_STYLE = '(%s|%s)' % (YEAR_RANGE, YEAR_LIST)$/;"	v
AR	Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	doc/man/Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	src/Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	src/leveldb/Makefile	/^AR=xcrun ar$/;"	m
AR	src/secp256k1/Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	src/univalue/Makefile	/^AR = ar$/;"	m
ARCH_CPU_ARM64_FAMILY	src/leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_ARM64_FAMILY /;"	d
ARCH_CPU_ARM64_FAMILY	src/leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_ARM64_FAMILY$/;"	d
ARCH_CPU_ARM_FAMILY	src/leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_ARM_FAMILY /;"	d
ARCH_CPU_ARM_FAMILY	src/leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_ARM_FAMILY$/;"	d
ARCH_CPU_MIPS_FAMILY	src/leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_MIPS_FAMILY /;"	d
ARCH_CPU_PPC_FAMILY	src/leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_PPC_FAMILY /;"	d
ARCH_CPU_PPC_FAMILY	src/leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_PPC_FAMILY$/;"	d
ARCH_CPU_X86_FAMILY	src/leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_X86_FAMILY /;"	d
ARCH_CPU_X86_FAMILY	src/leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_X86_FAMILY$/;"	d
ARCH_MIN_GLIBC_VER	contrib/devtools/symbol-check.py	/^ARCH_MIN_GLIBC_VER = {$/;"	v
ARENA_ALIGN	src/support/lockedpool.h	/^    static const size_t ARENA_ALIGN = 16;$/;"	m	class:LockedPool
ARENA_SIZE	src/support/lockedpool.h	/^    static const size_t ARENA_SIZE = 256*1024;$/;"	m	class:LockedPool
ARFLAGS	Makefile	/^ARFLAGS = cr$/;"	m
ARFLAGS	doc/man/Makefile	/^ARFLAGS = cr$/;"	m
ARFLAGS	src/Makefile	/^ARFLAGS = cr$/;"	m
ARG_CHECK	src/secp256k1/src/secp256k1.c	/^#define ARG_CHECK(/;"	d	file:
ARR	src/rpc/util.cpp	/^        ARR,$/;"	m	class:Sections::OuterType	file:
ARR	src/rpc/util.h	/^        ARR,$/;"	m	class:RPCArg::Type
ARRAYLEN	src/util/strencodings.h	/^#define ARRAYLEN(/;"	d
ARRAY_SIZE	src/univalue/test/unitester.cpp	/^#define ARRAY_SIZE(/;"	d	file:
ASIZE	src/bench/lockedpool.cpp	/^#define ASIZE /;"	d	file:
ASSERT_EQ	src/leveldb/util/testharness.h	/^#define ASSERT_EQ(/;"	d
ASSERT_EXCLUSIVE_LOCK	src/sync.h	/^void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}$/;"	f
ASSERT_EXCLUSIVE_LOCK	src/threadsafety.h	/^#define ASSERT_EXCLUSIVE_LOCK(/;"	d
ASSERT_GE	src/leveldb/util/testharness.h	/^#define ASSERT_GE(/;"	d
ASSERT_GT	src/leveldb/util/testharness.h	/^#define ASSERT_GT(/;"	d
ASSERT_LE	src/leveldb/util/testharness.h	/^#define ASSERT_LE(/;"	d
ASSERT_LT	src/leveldb/util/testharness.h	/^#define ASSERT_LT(/;"	d
ASSERT_NE	src/leveldb/util/testharness.h	/^#define ASSERT_NE(/;"	d
ASSERT_OK	src/leveldb/util/testharness.h	/^#define ASSERT_OK(/;"	d
ASSERT_TRUE	src/leveldb/util/testharness.h	/^#define ASSERT_TRUE(/;"	d
ASYMP_UTF8	src/qt/coincontroldialog.h	/^#define ASYMP_UTF8 /;"	d
AT	depends/Makefile	/^AT:=$(AT_$(V))$/;"	m
ATTR_PR	contrib/devtools/github-merge.py	/^    ATTR_PR = '\\033[1;36m'$/;"	v
ATTR_PR	contrib/devtools/github-merge.py	/^ATTR_PR = ''$/;"	v
ATTR_RESET	contrib/devtools/github-merge.py	/^    ATTR_RESET = '\\033[0m'$/;"	v
ATTR_RESET	contrib/devtools/github-merge.py	/^ATTR_RESET = ''$/;"	v
ATYPEUNSUPPORTED	src/netbase.cpp	/^    ATYPEUNSUPPORTED = 0x08, \/\/!< Address type not supported$/;"	e	enum:uint8_t	file:
AT_	depends/Makefile	/^AT_:=@$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoconf$/;"	m
AUTOCONF	doc/man/Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoconf$/;"	m
AUTOCONF	src/Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoconf$/;"	m
AUTOCONF	src/secp256k1/Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing autoconf$/;"	m
AUTOCONF	src/univalue/Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	doc/man/Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	src/Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	src/secp256k1/Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	src/univalue/Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing automake-1.16$/;"	m
AUTOMAKE	doc/man/Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing automake-1.16$/;"	m
AUTOMAKE	src/Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing automake-1.16$/;"	m
AUTOMAKE	src/secp256k1/Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing automake-1.16$/;"	m
AUTOMAKE	src/univalue/Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing automake-1.16$/;"	m
AVAILABLE_CREDIT	src/wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
AVG_ADDRESS_BROADCAST_INTERVAL	src/net_processing.cpp	/^static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;$/;"	v	file:
AVG_FEEFILTER_BROADCAST_INTERVAL	src/net_processing.cpp	/^static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;$/;"	v	file:
AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL	src/net_processing.cpp	/^static constexpr unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 60 * 60;$/;"	v	file:
AVX2_CXXFLAGS	Makefile	/^AVX2_CXXFLAGS = -mavx -mavx2$/;"	m
AVX2_CXXFLAGS	doc/man/Makefile	/^AVX2_CXXFLAGS = -mavx -mavx2$/;"	m
AVX2_CXXFLAGS	src/Makefile	/^AVX2_CXXFLAGS = -mavx -mavx2$/;"	m
AVXEnabled	src/crypto/sha256.cpp	/^bool AVXEnabled()$/;"	f	namespace:__anon40
AWK	Makefile	/^AWK = awk$/;"	m
AWK	doc/man/Makefile	/^AWK = awk$/;"	m
AWK	src/Makefile	/^AWK = awk$/;"	m
AWK	src/secp256k1/Makefile	/^AWK = awk$/;"	m
AWK	src/univalue/Makefile	/^AWK = awk$/;"	m
Abandon	src/leveldb/table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
AbandonConflictTest	test/functional/wallet_abandonconflict.py	/^class AbandonConflictTest(BitcoinTestFramework):$/;"	c
AbandonTransaction	src/wallet/wallet.cpp	/^bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const uint256& hashTx)$/;"	f	class:CWallet
Abandoned	src/qt/transactionrecord.h	/^        Abandoned,          \/**< Abandoned from the wallet **\/$/;"	e	enum:TransactionStatus::Status
AbortNode	src/validation.cpp	/^static bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage="")$/;"	f	file:
AbortNode	src/validation.cpp	/^static bool AbortNode(const std::string& strMessage, const std::string& userMessage="")$/;"	f	file:
AbortRescan	src/wallet/wallet.h	/^    void AbortRescan() { fAbortRescan = true; }$/;"	f	class:final
AbortShutdown	src/shutdown.cpp	/^void AbortShutdown()$/;"	f
AbsPathForConfigVal	src/util/system.cpp	/^fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)$/;"	f
AbstractThresholdConditionChecker	src/versionbits.h	/^class AbstractThresholdConditionChecker {$/;"	c
AbsurdFee	src/qt/walletmodel.h	/^        AbsurdFee,$/;"	e	enum:WalletModel::StatusCode
AcceleratedCRC32C	src/leveldb/port/port_posix_sse.cc	/^uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::port
AcceptBlock	src/validation.cpp	/^bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)$/;"	f	class:CChainState
AcceptBlockHeader	src/validation.cpp	/^bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)$/;"	f	class:CChainState
AcceptBlockTest	test/functional/p2p_unrequested_blocks.py	/^class AcceptBlockTest(BitcoinTestFramework):$/;"	c
AcceptConnection	src/net.cpp	/^void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {$/;"	f	class:CConnman
AcceptToMemoryPool	src/validation.cpp	/^bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,$/;"	f
AcceptToMemoryPool	src/wallet/wallet.cpp	/^bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state)$/;"	f	class:CWalletTx
AccessByTxid	src/coins.cpp	/^const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)$/;"	f
AccessCoin	src/coins.cpp	/^const Coin& CCoinsViewCache::AccessCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
Acquire	src/leveldb/util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon8::Limiter
Acquire	src/sync.h	/^    void Acquire()$/;"	f	class:CSemaphoreGrant
AcquireLoad	src/leveldb/db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Acquire_Load	src/leveldb/port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Acquire_Load	src/leveldb/port/port_win.cc	/^void* AtomicPointer::Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Action	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	g	struct:ChainMergeTestingSetup	file:
Action	src/test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	g	struct:ArgsMergeTestingSetup	file:
ActivateBestChain	src/validation.cpp	/^bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {$/;"	f
ActivateBestChain	src/validation.cpp	/^bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {$/;"	f	class:CChainState
ActivateBestChainStep	src/validation.cpp	/^bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)$/;"	f	class:CChainState
Add	src/addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	src/addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	src/checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueue
Add	src/checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueueControl
Add	src/crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y) { return _mm256_add_epi32(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	src/crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y, __m256i z) { return Add(Add(x, y), z); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	src/crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w) { return Add(Add(x, y), Add(z, w)); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	src/crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w, __m256i v) { return Add(Add(x, y, z), Add(w, v)); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	src/crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y) { return _mm_add_epi32(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	src/crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y, __m128i z) { return Add(Add(x, y), z); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	src/crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y, __m128i z, __m128i w) { return Add(Add(x, y), Add(z, w)); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	src/crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y, __m128i z, __m128i w, __m128i v) { return Add(Add(x, y, z), Add(w, v)); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	src/leveldb/db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	src/leveldb/db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	src/leveldb/db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	src/leveldb/table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	src/leveldb/table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	src/leveldb/table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	src/leveldb/table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	src/leveldb/util/bloom_test.cc	/^  void Add(const Slice& s) {$/;"	f	class:leveldb::BloomTest
Add	src/leveldb/util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
Add	src/test/script_tests.cpp	/^    TestBuilder& Add(const CScript& _script)$/;"	f	class:__anon58::TestBuilder
AddAddressKnown	src/net.h	/^    void AddAddressKnown(const CAddress& _addr)$/;"	f	class:CNode
AddAndGetDestinationForScript	src/outputtype.cpp	/^CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType type)$/;"	f
AddArg	src/util/system.cpp	/^void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)$/;"	f	class:ArgsManager
AddArgs	src/util/system.cpp	/^    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)$/;"	f	class:ArgsManagerHelper
AddBlock	src/chain.h	/^     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {$/;"	f	class:CBlockFileInfo
AddBytes	src/leveldb/db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon19::Stats
AddCScript	src/keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	src/wallet/wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddChecksum	src/script/descriptor.cpp	/^std::string AddChecksum(const std::string& str) { return str + "#" + DescriptorChecksum(MakeSpan(str)); }$/;"	f	namespace:__anon75
AddCoin	src/coins.cpp	/^void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {$/;"	f	class:CCoinsViewCache
AddCoins	src/coins.cpp	/^void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check) {$/;"	f
AddCryptedKey	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CCryptoKeyStore
AddCryptedKey	src/wallet/wallet.cpp	/^bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,$/;"	f	class:CWallet
AddDestData	src/wallet/wallet.cpp	/^bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)$/;"	f	class:CWallet
AddFile	src/leveldb/db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddHiddenArgs	src/util/system.cpp	/^void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)$/;"	f	class:ArgsManager
AddInput	src/psbt.cpp	/^bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)$/;"	f	class:PartiallySignedTransaction
AddInputDeletions	src/leveldb/db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddInventoryKnown	src/net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddIterators	src/leveldb/db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	src/keystore.h	/^    bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }$/;"	f	class:CBasicKeyStore
AddKey	src/leveldb/table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddKey	src/wallet/test/wallet_tests.cpp	/^static void AddKey(CWallet& wallet, const CKey& key)$/;"	f	file:
AddKeyOrigin	src/wallet/wallet.cpp	/^bool CWallet::AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info)$/;"	f	class:CWallet
AddKeyPubKey	src/keystore.cpp	/^bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CBasicKeyStore
AddKeyPubKey	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CCryptoKeyStore
AddKeyPubKey	src/wallet/wallet.cpp	/^bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)$/;"	f	class:CWallet
AddKeyPubKeyWithDB	src/wallet/wallet.cpp	/^bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)$/;"	f	class:CWallet
AddKeypoolPubkey	src/wallet/wallet.cpp	/^void CWallet::AddKeypoolPubkey(const CPubKey& pubkey, const bool internal)$/;"	f	class:CWallet
AddKeypoolPubkeyWithDB	src/wallet/wallet.cpp	/^void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)$/;"	f	class:CWallet
AddLiveFiles	src/leveldb/db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddLocal	src/net.cpp	/^bool AddLocal(const CNetAddr &addr, int nScore)$/;"	f
AddLocal	src/net.cpp	/^bool AddLocal(const CService& addr, int nScore)$/;"	f
AddMessage	src/leveldb/db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon19::Stats
AddNewAddresses	src/net.cpp	/^void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty)$/;"	f	class:CConnman
AddNode	src/net.cpp	/^bool CConnman::AddNode(const std::string& strNode)$/;"	f	class:CConnman
AddNode	src/test/denialofservice_tests.cpp	/^    void AddNode(CNode& node)$/;"	f	struct:CConnmanTest
AddOneShot	src/net.cpp	/^void CConnman::AddOneShot(const std::string& strDest)$/;"	f	class:CConnman
AddOutput	src/psbt.cpp	/^bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput& psbtout)$/;"	f	class:PartiallySignedTransaction
AddRandomOutboundPeer	src/test/denialofservice_tests.cpp	/^static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic, CConnmanTest* connman)$/;"	f	file:
AddRecord	src/leveldb/db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AddRef	src/net.h	/^    CNode* AddRef()$/;"	f	class:CNode
AddRoundKey	src/crypto/ctaes/ctaes.c	/^static void AddRoundKey(AES_state* s, const AES_state* round) {$/;"	f	file:
AddTimeData	src/timedata.cpp	/^void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)$/;"	f
AddToBlock	src/miner.cpp	/^void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)$/;"	f	class:BlockAssembler
AddToBlockIndex	src/validation.cpp	/^CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)$/;"	f	class:CChainState
AddToProcessQueue	src/scheduler.cpp	/^void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void ()> func) {$/;"	f	class:SingleThreadedSchedulerClient
AddToSpends	src/wallet/wallet.cpp	/^void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)$/;"	f	class:CWallet
AddToSpends	src/wallet/wallet.cpp	/^void CWallet::AddToSpends(const uint256& wtxid)$/;"	f	class:CWallet
AddToWallet	src/wallet/wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	src/wallet/wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const uint256& block_hash, int posInBlock, bool fUpdate)$/;"	f	class:CWallet
AddTransactionsUpdated	src/txmempool.cpp	/^void CTxMemPool::AddTransactionsUpdated(unsigned int n)$/;"	f	class:CTxMemPool
AddTx	src/wallet/test/wallet_tests.cpp	/^    CWalletTx& AddTx(CRecipient recipient)$/;"	f	class:ListCoinsTestingSetup
AddTx	src/wallet/test/wallet_tests.cpp	/^static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)$/;"	f	file:
AddWallet	src/wallet/wallet.cpp	/^bool AddWallet(const std::shared_ptr<CWallet>& wallet)$/;"	f
AddWalletOptions	src/dummywallet.cpp	/^void DummyWalletInit::AddWalletOptions() const$/;"	f	class:DummyWalletInit
AddWalletOptions	src/wallet/init.cpp	/^void WalletInit::AddWalletOptions() const$/;"	f	class:WalletInit
AddWatchOnly	src/keystore.cpp	/^bool CBasicKeyStore::AddWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
AddWatchOnly	src/wallet/wallet.cpp	/^bool CWallet::AddWatchOnly(const CScript& dest)$/;"	f	class:CWallet
AddWatchOnly	src/wallet/wallet.cpp	/^bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)$/;"	f	class:CWallet
Add_	src/addrman.cpp	/^bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)$/;"	f	class:CAddrMan
AddedNodeInfo	src/net.h	/^struct AddedNodeInfo$/;"	s
AddrToPubKey	src/rpc/util.cpp	/^CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)$/;"	f
Address	src/qt/addresstablemodel.h	/^        Address = 1  \/**< Bitcoin address *\/$/;"	e	enum:AddressTableModel::ColumnIndex
Address	src/qt/bantablemodel.h	/^        Address = 0,$/;"	e	enum:BanTableModel::ColumnIndex
Address	src/qt/peertablemodel.h	/^        Address = 1,$/;"	e	enum:PeerTableModel::ColumnIndex
AddressBookDataToJSON	src/wallet/rpcwallet.cpp	/^static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)$/;"	f	file:
AddressBookPage	src/qt/addressbookpage.cpp	/^AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode, Tabs _tab, QWidget *parent) :$/;"	f	class:AddressBookPage
AddressBookPage	src/qt/addressbookpage.h	/^class AddressBookPage : public QDialog$/;"	c
AddressBookSortFilterProxyModel	src/qt/addressbookpage.cpp	/^    AddressBookSortFilterProxyModel(const QString& type, QObject* parent)$/;"	f	class:final
AddressBookTests	src/qt/test/addressbooktests.h	/^class AddressBookTests : public QObject$/;"	c
AddressDescriptor	src/script/descriptor.cpp	/^    AddressDescriptor(CTxDestination destination) : DescriptorImpl({}, {}, "addr"), m_destination(std::move(destination)) {}$/;"	f	class:__anon75::final
AddressRole	src/qt/transactiontablemodel.h	/^        AddressRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AddressTableEntry	src/qt/addresstablemodel.cpp	/^    AddressTableEntry() {}$/;"	f	struct:AddressTableEntry
AddressTableEntry	src/qt/addresstablemodel.cpp	/^    AddressTableEntry(Type _type, const QString &_label, const QString &_address):$/;"	f	struct:AddressTableEntry
AddressTableEntry	src/qt/addresstablemodel.cpp	/^struct AddressTableEntry$/;"	s	file:
AddressTableEntryLessThan	src/qt/addresstablemodel.cpp	/^struct AddressTableEntryLessThan$/;"	s	file:
AddressTableModel	src/qt/addresstablemodel.cpp	/^AddressTableModel::AddressTableModel(WalletModel *parent) :$/;"	f	class:AddressTableModel
AddressTableModel	src/qt/addresstablemodel.h	/^class AddressTableModel : public QAbstractTableModel$/;"	c
AddressTablePriv	src/qt/addresstablemodel.cpp	/^    explicit AddressTablePriv(AddressTableModel *_parent):$/;"	f	class:AddressTablePriv
AddressTablePriv	src/qt/addresstablemodel.cpp	/^class AddressTablePriv$/;"	c	file:
AddressType	test/functional/feature_proxy.py	/^from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType$/;"	i
AddressType	test/functional/test_framework/socks5.py	/^class AddressType:$/;"	c
AddressTypeTest	test/functional/wallet_address_types.py	/^class AddressTypeTest(BitcoinTestFramework):$/;"	c
AddrmanToStream	src/test/net_tests.cpp	/^static CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)$/;"	f	file:
AdvertiseLocal	src/net.cpp	/^void AdvertiseLocal(CNode *pnode)$/;"	f
AfterFile	src/leveldb/db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
AlertNotify	src/validation.cpp	/^static void AlertNotify(const std::string& strMessage)$/;"	f	file:
Alias	contrib/macdeploy/custom_dsstore.py	/^from mac_alias import Alias$/;"	i
All	src/qt/transactionview.h	/^        All,$/;"	e	enum:TransactionView::DateEnum
AllBlockFilterTypes	src/blockfilter.cpp	/^const std::vector<BlockFilterType>& AllBlockFilterTypes()$/;"	f
AllEntriesFor	src/leveldb/db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	src/flatfile.cpp	/^size_t FlatFileSeq::Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space)$/;"	f	class:FlatFileSeq
Allocate	src/leveldb/util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	src/leveldb/util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	src/leveldb/util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFileRange	src/util/system.cpp	/^void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {$/;"	f
AllocateLocked	src/support/lockedpool.cpp	/^void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)$/;"	f	class:PosixLockedPageAllocator
AllocateLocked	src/support/lockedpool.cpp	/^void *Win32LockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)$/;"	f	class:Win32LockedPageAllocator
AllocateNewBlock	src/leveldb/util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Allocation	src/secp256k1/src/asm/field_10x26_arm.s	/^	Allocation:$/;"	l
Amount	src/qt/recentrequeststablemodel.h	/^        Amount = 3,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
Amount	src/qt/transactiontablemodel.h	/^        Amount = 5$/;"	e	enum:TransactionTableModel::ColumnIndex
AmountErrMsg	src/util/error.cpp	/^std::string AmountErrMsg(const char* const optname, const std::string& strValue)$/;"	f
AmountExceedsBalance	src/qt/walletmodel.h	/^        AmountExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AmountFromValue	src/bitcoin-tx.cpp	/^static CAmount AmountFromValue(const UniValue& value)$/;"	f	file:
AmountFromValue	src/rpc/util.cpp	/^CAmount AmountFromValue(const UniValue& value)$/;"	f
AmountHighWarn	src/util/error.cpp	/^std::string AmountHighWarn(const std::string& optname)$/;"	f
AmountRole	src/qt/transactiontablemodel.h	/^        AmountRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AmountSpinBox	src/qt/bitcoinamountfield.cpp	/^    explicit AmountSpinBox(QWidget *parent):$/;"	f	class:AmountSpinBox
AmountSpinBox	src/qt/bitcoinamountfield.cpp	/^class AmountSpinBox: public QAbstractSpinBox$/;"	c	file:
AmountType	src/wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	g	class:CWalletTx
AmountWithFeeExceedsBalance	src/qt/walletmodel.h	/^        AmountWithFeeExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AnalyzePSBT	src/node/psbt.cpp	/^PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)$/;"	f
And	src/crypto/sha256_avx2.cpp	/^__m256i inline And(__m256i x, __m256i y) { return _mm256_and_si256(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
And	src/crypto/sha256_sse41.cpp	/^__m128i inline And(__m128i x, __m128i y) { return _mm_and_si128(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
AnnotatedMixin	src/sync.h	/^class LOCKABLE AnnotatedMixin : public PARENT$/;"	c
AppInit	src/bitcoind.cpp	/^static bool AppInit(int argc, char* argv[])$/;"	f	file:
AppInitBasicSetup	src/init.cpp	/^bool AppInitBasicSetup()$/;"	f
AppInitLockDataDirectory	src/init.cpp	/^bool AppInitLockDataDirectory()$/;"	f
AppInitMain	src/init.cpp	/^bool AppInitMain(InitInterfaces& interfaces)$/;"	f
AppInitParameterInteraction	src/init.cpp	/^bool AppInitParameterInteraction()$/;"	f
AppInitRPC	src/bitcoin-cli.cpp	/^static int AppInitRPC(int argc, char* argv[])$/;"	f	file:
AppInitRawTx	src/bitcoin-tx.cpp	/^static int AppInitRawTx(int argc, char* argv[])$/;"	f	file:
AppInitSanityChecks	src/init.cpp	/^bool AppInitSanityChecks()$/;"	f
AppInitServers	src/init.cpp	/^static bool AppInitServers()$/;"	f	file:
AppTests	src/qt/test/apptests.h	/^    explicit AppTests(BitcoinApplication& app) : m_app(app) {}$/;"	f	class:AppTests
AppTests	src/qt/test/apptests.h	/^class AppTests : public QObject$/;"	c
Append	src/leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Append(const Slice& data) {$/;"	f	class:leveldb::TestWritableFile
Append	src/leveldb/db/leveldbutil.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon31::StdoutPrinter
Append	src/leveldb/db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	src/leveldb/db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	src/leveldb/helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon35::FileState
Append	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon35::WritableFileImpl
Append	src/leveldb/table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	src/leveldb/util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Append	src/leveldb/util/env_win.cc	/^Status Win32WritableFile::Append(const Slice& data)$/;"	f	class:leveldb::Win32::Win32WritableFile
AppendEscapedStringTo	src/leveldb/util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	src/leveldb/db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	src/leveldb/util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendVersion	src/leveldb/db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWarning	src/validation.cpp	/^static void AppendWarning(std::string& res, const std::string& warn)$/;"	f	file:
AppendWithSpace	src/leveldb/db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon19
Apply	src/leveldb/db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApplyDelta	src/txmempool.cpp	/^void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const$/;"	f	class:CTxMemPool
ApplyStats	src/rpc/blockchain.cpp	/^static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)$/;"	f	file:
ApplyTxInUndo	src/validation.cpp	/^int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)$/;"	f
ApproximateBestSubset	src/wallet/coinselection.cpp	/^static void ApproximateBestSubset(const std::vector<OutputGroup>& groups, const CAmount& nTotalLower, const CAmount& nTargetValue,$/;"	f	file:
ApproximateMemoryUsage	src/leveldb/db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	src/leveldb/db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	src/leveldb/table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	src/leveldb/table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
Arbitrary	src/test/gen/crypto_gen.h	/^struct Arbitrary<CKey> {$/;"	s	namespace:rc
Arbitrary	src/test/gen/crypto_gen.h	/^struct Arbitrary<CPrivKey> {$/;"	s	namespace:rc
Arbitrary	src/test/gen/crypto_gen.h	/^struct Arbitrary<CPubKey> {$/;"	s	namespace:rc
Arbitrary	src/test/gen/crypto_gen.h	/^struct Arbitrary<uint256> {$/;"	s	namespace:rc
ArchiveFile	src/leveldb/db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon30::Repairer	file:
AreInputsStandard	src/policy/policy.cpp	/^bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)$/;"	f
AreThreadsServicingQueue	src/scheduler.cpp	/^bool CScheduler::AreThreadsServicingQueue() const {$/;"	f	class:CScheduler
Arena	src/leveldb/util/arena.cc	/^Arena::Arena() : memory_usage_(0) {$/;"	f	class:leveldb::Arena
Arena	src/leveldb/util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
Arena	src/support/lockedpool.cpp	/^Arena::Arena(void *base_in, size_t size_in, size_t alignment_in):$/;"	f	class:Arena
Arena	src/support/lockedpool.h	/^class Arena$/;"	c
ArenaTest	src/leveldb/util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb	file:
Arg	src/util/system.h	/^        Arg(const std::string& help_param, const std::string& help_text, bool debug_only) : m_help_param(help_param), m_help_text(help_text), m_debug_only(debug_only) {};$/;"	f	struct:ArgsManager::Arg
Arg	src/util/system.h	/^    struct Arg$/;"	s	class:ArgsManager
ArgsManager	src/util/system.cpp	/^ArgsManager::ArgsManager() :$/;"	f	class:ArgsManager
ArgsManager	src/util/system.h	/^class ArgsManager$/;"	c
ArgsManagerHelper	src/util/system.cpp	/^class ArgsManagerHelper {$/;"	c	file:
ArgsMergeTestingSetup	src/test/util_tests.cpp	/^struct ArgsMergeTestingSetup : public BasicTestingSetup {$/;"	s	file:
ArgumentParser	share/rpcauth/rpcauth.py	/^from argparse import ArgumentParser$/;"	i
ArithToUint256	src/arith_uint256.cpp	/^uint256 ArithToUint256(const arith_uint256 &a)$/;"	f
ArrayToString	src/test/arith_uint256_tests.cpp	/^static std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f	file:
ArrayToString	src/test/uint256_tests.cpp	/^static std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f	file:
AsWit	src/test/script_tests.cpp	/^    TestBuilder& AsWit()$/;"	f	class:__anon58::TestBuilder
AskPassphraseDialog	src/qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :$/;"	f	class:AskPassphraseDialog
AskPassphraseDialog	src/qt/askpassphrasedialog.h	/^class AskPassphraseDialog : public QDialog$/;"	c
AssembleBlock	src/bench/block_assemble.cpp	/^static void AssembleBlock(benchmark::State& state)$/;"	f	file:
AssemblerForTest	src/test/miner_tests.cpp	/^static BlockAssembler AssemblerForTest(const CChainParams& params) {$/;"	f	file:
AssertFailException	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^      public AssertFailException(String message) {$/;"	m	class:NativeSecp256k1Util.AssertFailException
AssertFailException	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static class AssertFailException extends Exception {$/;"	c	class:NativeSecp256k1Util
AssertHeld	src/leveldb/port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AssertHeld	src/leveldb/port/port_win.cc	/^void Mutex::AssertHeld() {$/;"	f	class:leveldb::port::Mutex
AssertLockHeld	src/sync.h	/^#define AssertLockHeld(/;"	d
AssertLockHeldInternal	src/sync.cpp	/^void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)$/;"	f
AssertLockNotHeld	src/sync.h	/^#define AssertLockNotHeld(/;"	d
AssertLockNotHeldInternal	src/sync.cpp	/^void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)$/;"	f
AssertLockNotHeldInternal	src/sync.h	/^void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}$/;"	f
AssumeValidTest	test/functional/feature_assumevalid.py	/^class AssumeValidTest(BitcoinTestFramework):$/;"	c
AssumedBlockchainSize	src/chainparams.h	/^    uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }$/;"	f	class:CChainParams
AssumedChainStateSize	src/chainparams.h	/^    uint64_t AssumedChainStateSize() const { return m_assumed_chain_state_size; }$/;"	f	class:CChainParams
AtomicCounter	src/leveldb/db/db_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon23::AtomicCounter
AtomicCounter	src/leveldb/db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon23	file:
AtomicPointer	src/leveldb/port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/leveldb/port/atomic_pointer.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/leveldb/port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	src/leveldb/port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/leveldb/port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	src/leveldb/port/port_win.cc	/^AtomicPointer::AtomicPointer(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/leveldb/port/port_win.h	/^  AtomicPointer() : rep_(NULL) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/leveldb/port/port_win.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
Attempt	src/addrman.h	/^    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
AttemptToEvictConnection	src/net.cpp	/^bool CConnman::AttemptToEvictConnection()$/;"	f	class:CConnman
Attempt_	src/addrman.cpp	/^void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)$/;"	f	class:CAddrMan
AuthServiceProxy	test/functional/test_framework/authproxy.py	/^class AuthServiceProxy():$/;"	c
AuthServiceProxy	test/functional/test_framework/util.py	/^from .authproxy import AuthServiceProxy, JSONRPCException$/;"	i
AuthServiceProxyWrapper	test/functional/test_framework/coverage.py	/^class AuthServiceProxyWrapper():$/;"	c
AutoCompactTest	src/leveldb/db/autocompact_test.cc	/^  AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
AutoCompactTest	src/leveldb/db/autocompact_test.cc	/^class AutoCompactTest {$/;"	c	namespace:leveldb	file:
AvailableCoins	src/wallet/wallet.cpp	/^void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const$/;"	f	class:CWallet
AvailableDataFormatsString	src/rest.cpp	/^static std::string AvailableDataFormatsString()$/;"	f	file:
Average	src/leveldb/util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
B	src/test/util_tests.cpp	/^#define B /;"	d	file:
B	src/test/util_tests.cpp	/^#undef B$/;"	d	file:
BANSUBNET_COLUMN_WIDTH	src/qt/rpcconsole.h	/^        BANSUBNET_COLUMN_WIDTH = 200,$/;"	e	enum:RPCConsole::ColumnWidths
BANTIME_COLUMN_WIDTH	src/qt/rpcconsole.h	/^        BANTIME_COLUMN_WIDTH = 250$/;"	e	enum:RPCConsole::ColumnWidths
BASE	src/script/interpreter.h	/^    BASE = 0,$/;"	m	class:SigVersion
BASEDIR	depends/Makefile	/^BASEDIR = $(CURDIR)$/;"	m
BASE_CACHE	depends/Makefile	/^BASE_CACHE ?= $(BASEDIR)\/built$/;"	m
BASE_RELATIVE_LOCKTIME	test/functional/feature_csv_activation.py	/^BASE_RELATIVE_LOCKTIME = 10$/;"	v
BASE_SCRIPTS	test/functional/test_runner.py	/^BASE_SCRIPTS = [$/;"	v
BASH	contrib/devtools/github-merge.py	/^BASH = os.getenv('BASH','bash')$/;"	v
BASIC	src/blockfilter.h	/^    BASIC = 0,$/;"	m	class:BlockFilterType
BASIC_FILTER_M	src/blockfilter.h	/^constexpr uint32_t BASIC_FILTER_M = 784931;$/;"	v
BASIC_FILTER_P	src/blockfilter.h	/^constexpr uint8_t BASIC_FILTER_P = 19;$/;"	v
BATCHES	src/bench/checkqueue.cpp	/^static const size_t BATCHES = 101;$/;"	v	file:
BATCH_SIZE	src/bench/checkqueue.cpp	/^static const size_t BATCH_SIZE = 30;$/;"	v	file:
BCLog	src/logging.h	/^namespace BCLog {$/;"	n
BDB_CFLAGS	Makefile	/^BDB_CFLAGS = $/;"	m
BDB_CFLAGS	doc/man/Makefile	/^BDB_CFLAGS = $/;"	m
BDB_CFLAGS	src/Makefile	/^BDB_CFLAGS = $/;"	m
BDB_CPPFLAGS	Makefile	/^BDB_CPPFLAGS = $/;"	m
BDB_CPPFLAGS	doc/man/Makefile	/^BDB_CPPFLAGS = $/;"	m
BDB_CPPFLAGS	src/Makefile	/^BDB_CPPFLAGS = $/;"	m
BDB_LIBS	Makefile	/^BDB_LIBS = $/;"	m
BDB_LIBS	doc/man/Makefile	/^BDB_LIBS = $/;"	m
BDB_LIBS	src/Makefile	/^BDB_LIBS = $/;"	m
BE32	src/secp256k1/src/hash_impl.h	/^#define BE32(/;"	d
BE32	src/secp256k1/src/hash_impl.h	/^#undef BE32$/;"	d
BECH32	src/outputtype.h	/^    BECH32,$/;"	m	class:OutputType
BEGIN_FOLD	.travis/test_03_before_install.sh	/^BEGIN_FOLD () {$/;"	f
BENCHMARK	src/bench/bench.h	/^#define BENCHMARK(/;"	d
BENCHMARKS	src/Makefile	/^BENCHMARKS = $/;"	m
BENCHMARKS	src/leveldb/Makefile	/^BENCHMARKS = \\$/;"	m
BF_EXPLICIT	src/net.cpp	/^    BF_EXPLICIT     = (1U << 0),$/;"	e	enum:BindFlags	file:
BF_NONE	src/net.cpp	/^    BF_NONE         = 0,$/;"	e	enum:BindFlags	file:
BF_REPORT_ERROR	src/net.cpp	/^    BF_REPORT_ERROR = (1U << 1),$/;"	e	enum:BindFlags	file:
BF_WHITELIST	src/net.cpp	/^    BF_WHITELIST    = (1U << 2),$/;"	e	enum:BindFlags	file:
BGItem	src/leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon8::PosixEnv	file:
BGQueue	src/leveldb/util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon8::PosixEnv	file:
BGThread	src/leveldb/util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon8::PosixEnv
BGThreadWrapper	src/leveldb/util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon8::PosixEnv	file:
BGWork	src/leveldb/db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BIN	test/functional/interface_rest.py	/^    BIN = 2$/;"	v	class:ReqType
BINARY	src/rest.cpp	/^    BINARY,$/;"	m	class:RetFormat	file:
BINARY_OP	src/leveldb/util/testharness.h	/^#define BINARY_OP(/;"	d
BINARY_OP	src/leveldb/util/testharness.h	/^#undef BINARY_OP$/;"	d
BIND	src/netbase.cpp	/^    BIND = 0x02,$/;"	e	enum:uint8_t	file:
BIN_CHECKS	Makefile	/^BIN_CHECKS = $(top_srcdir)\/contrib\/devtools\/symbol-check.py \\$/;"	m
BIP0031_VERSION	src/version.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BIP125_SEQUENCE_NUMBER	test/functional/test_framework/messages.py	/^BIP125_SEQUENCE_NUMBER = 0xfffffffd  # Sequence number that is BIP 125 opt-in and BIP 68-opt-out$/;"	v
BIP125_SEQUENCE_NUMBER	test/functional/wallet_bumpfee.py	/^from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction$/;"	i
BIP16Exception	src/consensus/params.h	/^    uint256 BIP16Exception;$/;"	m	struct:Consensus::Params
BIP22ValidationResult	src/rpc/mining.cpp	/^static UniValue BIP22ValidationResult(const CValidationState& state)$/;"	f	file:
BIP32Hash	src/hash.cpp	/^void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])$/;"	f
BIP32PubkeyProvider	src/script/descriptor.cpp	/^    BIP32PubkeyProvider(const CExtPubKey& extkey, KeyPath path, DeriveType derive) : m_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}$/;"	f	class:__anon75::final
BIP32_EXTKEY_SIZE	src/pubkey.h	/^const unsigned int BIP32_EXTKEY_SIZE = 74;$/;"	v
BIP32_HARDENED_KEY_LIMIT	src/wallet/wallet.cpp	/^const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;$/;"	v
BIP34Hash	src/consensus/params.h	/^    uint256 BIP34Hash;$/;"	m	struct:Consensus::Params
BIP34Height	src/consensus/params.h	/^    int BIP34Height;$/;"	m	struct:Consensus::Params
BIP65Height	src/consensus/params.h	/^    int BIP65Height;$/;"	m	struct:Consensus::Params
BIP65Test	test/functional/feature_cltv.py	/^class BIP65Test(BitcoinTestFramework):$/;"	c
BIP66Height	src/consensus/params.h	/^    int BIP66Height;$/;"	m	struct:Consensus::Params
BIP66Test	test/functional/feature_dersig.py	/^class BIP66Test(BitcoinTestFramework):$/;"	c
BIP68Test	test/functional/feature_bip68_sequence.py	/^class BIP68Test(BitcoinTestFramework):$/;"	c
BIP68_112_113Test	test/functional/feature_csv_activation.py	/^class BIP68_112_113Test(BitcoinTestFramework):$/;"	c
BIP70_MAX_PAYMENTREQUEST_SIZE	src/qt/paymentserver.h	/^static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;$/;"	v
BIP70_MESSAGE_PAYMENTACK	src/qt/paymentserver.cpp	/^const char* BIP70_MESSAGE_PAYMENTACK = "PaymentACK";$/;"	v
BIP70_MESSAGE_PAYMENTREQUEST	src/qt/paymentserver.cpp	/^const char* BIP70_MESSAGE_PAYMENTREQUEST = "PaymentRequest";$/;"	v
BIP71_MIMETYPE_PAYMENT	src/qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENT = "application\/bitcoin-payment";$/;"	v
BIP71_MIMETYPE_PAYMENTACK	src/qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENTACK = "application\/bitcoin-paymentack";$/;"	v
BIP71_MIMETYPE_PAYMENTREQUEST	src/qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENTREQUEST = "application\/bitcoin-paymentrequest";$/;"	v
BIP9Deployment	src/consensus/params.h	/^struct BIP9Deployment {$/;"	s	namespace:Consensus
BIP9SoftForkDescPushBack	src/rpc/blockchain.cpp	/^static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)$/;"	f	file:
BIP9Stats	src/versionbits.h	/^struct BIP9Stats {$/;"	s
BITCOINCONSENSUS_API_VER	src/script/bitcoinconsensus.h	/^#define BITCOINCONSENSUS_API_VER /;"	d
BITCOIND_BIN	Makefile	/^BITCOIND_BIN = $(top_builddir)\/src\/$(BITCOIN_DAEMON_NAME)$(EXEEXT)$/;"	m
BITCOIND_PROC_WAIT_TIMEOUT	test/functional/test_framework/test_node.py	/^BITCOIND_PROC_WAIT_TIMEOUT = 60$/;"	v
BITCOIN_ADDRDB_H	src/addrdb.h	/^#define BITCOIN_ADDRDB_H$/;"	d
BITCOIN_ADDRMAN_H	src/addrman.h	/^#define BITCOIN_ADDRMAN_H$/;"	d
BITCOIN_AMOUNT_H	src/amount.h	/^#define BITCOIN_AMOUNT_H$/;"	d
BITCOIN_ARITH_UINT256_H	src/arith_uint256.h	/^#define BITCOIN_ARITH_UINT256_H$/;"	d
BITCOIN_ATTRIBUTES_H	src/attributes.h	/^#define BITCOIN_ATTRIBUTES_H$/;"	d
BITCOIN_BANMAN_H	src/banman.h	/^#define BITCOIN_BANMAN_H$/;"	d
BITCOIN_BASE58_H	src/base58.h	/^#define BITCOIN_BASE58_H$/;"	d
BITCOIN_BECH32_H	src/bech32.h	/^#define BITCOIN_BECH32_H$/;"	d
BITCOIN_BENCH_BENCH_H	src/bench/bench.h	/^#define BITCOIN_BENCH_BENCH_H$/;"	d
BITCOIN_BITCOIN_CONFIG_H	build_msvc/bitcoin_config.h	/^#define BITCOIN_BITCOIN_CONFIG_H$/;"	d
BITCOIN_BLOCKENCODINGS_H	src/blockencodings.h	/^#define BITCOIN_BLOCKENCODINGS_H$/;"	d
BITCOIN_BLOCKFILTER_H	src/blockfilter.h	/^#define BITCOIN_BLOCKFILTER_H$/;"	d
BITCOIN_BLOOM_H	src/bloom.h	/^#define BITCOIN_BLOOM_H$/;"	d
BITCOIN_CHAINPARAMSBASE_H	src/chainparamsbase.h	/^#define BITCOIN_CHAINPARAMSBASE_H$/;"	d
BITCOIN_CHAINPARAMSSEEDS_H	src/chainparamsseeds.h	/^#define BITCOIN_CHAINPARAMSSEEDS_H$/;"	d
BITCOIN_CHAINPARAMS_H	src/chainparams.h	/^#define BITCOIN_CHAINPARAMS_H$/;"	d
BITCOIN_CHAIN_H	src/chain.h	/^#define BITCOIN_CHAIN_H$/;"	d
BITCOIN_CHECKQUEUE_H	src/checkqueue.h	/^#define BITCOIN_CHECKQUEUE_H$/;"	d
BITCOIN_CLIENTVERSION_H	src/clientversion.h	/^#define BITCOIN_CLIENTVERSION_H$/;"	d
BITCOIN_CLI_BIN	Makefile	/^BITCOIN_CLI_BIN = $(top_builddir)\/src\/$(BITCOIN_CLI_NAME)$(EXEEXT)$/;"	m
BITCOIN_CLI_NAME	Makefile	/^BITCOIN_CLI_NAME = bitcoin-cli$/;"	m
BITCOIN_CLI_NAME	doc/man/Makefile	/^BITCOIN_CLI_NAME = bitcoin-cli$/;"	m
BITCOIN_CLI_NAME	src/Makefile	/^BITCOIN_CLI_NAME = bitcoin-cli$/;"	m
BITCOIN_COINS_H	src/coins.h	/^#define BITCOIN_COINS_H$/;"	d
BITCOIN_COMPAT_ASSUMPTIONS_H	src/compat/assumptions.h	/^#define BITCOIN_COMPAT_ASSUMPTIONS_H$/;"	d
BITCOIN_COMPAT_BYTESWAP_H	src/compat/byteswap.h	/^#define BITCOIN_COMPAT_BYTESWAP_H$/;"	d
BITCOIN_COMPAT_ENDIAN_H	src/compat/endian.h	/^#define BITCOIN_COMPAT_ENDIAN_H$/;"	d
BITCOIN_COMPAT_H	src/compat.h	/^#define BITCOIN_COMPAT_H$/;"	d
BITCOIN_COMPAT_SANITY_H	src/compat/sanity.h	/^#define BITCOIN_COMPAT_SANITY_H$/;"	d
BITCOIN_COMPRESSOR_H	src/compressor.h	/^#define BITCOIN_COMPRESSOR_H$/;"	d
BITCOIN_CONFIG_H	src/config/bitcoin-config.h	/^#define BITCOIN_CONFIG_H$/;"	d
BITCOIN_CONF_FILENAME	src/util/system.cpp	/^const char * const BITCOIN_CONF_FILENAME = "bitcoin.conf";$/;"	v
BITCOIN_CONSENSUS_CONSENSUS_H	src/consensus/consensus.h	/^#define BITCOIN_CONSENSUS_CONSENSUS_H$/;"	d
BITCOIN_CONSENSUS_MERKLE_H	src/consensus/merkle.h	/^#define BITCOIN_CONSENSUS_MERKLE_H$/;"	d
BITCOIN_CONSENSUS_PARAMS_H	src/consensus/params.h	/^#define BITCOIN_CONSENSUS_PARAMS_H$/;"	d
BITCOIN_CONSENSUS_TX_CHECK_H	src/consensus/tx_check.h	/^#define BITCOIN_CONSENSUS_TX_CHECK_H$/;"	d
BITCOIN_CONSENSUS_TX_VERIFY_H	src/consensus/tx_verify.h	/^#define BITCOIN_CONSENSUS_TX_VERIFY_H$/;"	d
BITCOIN_CONSENSUS_VALIDATION_H	src/consensus/validation.h	/^#define BITCOIN_CONSENSUS_VALIDATION_H$/;"	d
BITCOIN_CORE_H	src/Makefile	/^BITCOIN_CORE_H = \\$/;"	m
BITCOIN_CORE_IO_H	src/core_io.h	/^#define BITCOIN_CORE_IO_H$/;"	d
BITCOIN_CORE_MEMUSAGE_H	src/core_memusage.h	/^#define BITCOIN_CORE_MEMUSAGE_H$/;"	d
BITCOIN_CRYPTO_AES_H	src/crypto/aes.h	/^#define BITCOIN_CRYPTO_AES_H$/;"	d
BITCOIN_CRYPTO_CHACHA20_H	src/crypto/chacha20.h	/^#define BITCOIN_CRYPTO_CHACHA20_H$/;"	d
BITCOIN_CRYPTO_COMMON_H	src/crypto/common.h	/^#define BITCOIN_CRYPTO_COMMON_H$/;"	d
BITCOIN_CRYPTO_HKDF_SHA256_32_H	src/crypto/hkdf_sha256_32.h	/^#define BITCOIN_CRYPTO_HKDF_SHA256_32_H$/;"	d
BITCOIN_CRYPTO_HMAC_SHA256_H	src/crypto/hmac_sha256.h	/^#define BITCOIN_CRYPTO_HMAC_SHA256_H$/;"	d
BITCOIN_CRYPTO_HMAC_SHA512_H	src/crypto/hmac_sha512.h	/^#define BITCOIN_CRYPTO_HMAC_SHA512_H$/;"	d
BITCOIN_CRYPTO_POLY1305_H	src/crypto/poly1305.h	/^#define BITCOIN_CRYPTO_POLY1305_H$/;"	d
BITCOIN_CRYPTO_RIPEMD160_H	src/crypto/ripemd160.h	/^#define BITCOIN_CRYPTO_RIPEMD160_H$/;"	d
BITCOIN_CRYPTO_SHA1_H	src/crypto/sha1.h	/^#define BITCOIN_CRYPTO_SHA1_H$/;"	d
BITCOIN_CRYPTO_SHA256_H	src/crypto/sha256.h	/^#define BITCOIN_CRYPTO_SHA256_H$/;"	d
BITCOIN_CRYPTO_SHA512_H	src/crypto/sha512.h	/^#define BITCOIN_CRYPTO_SHA512_H$/;"	d
BITCOIN_CRYPTO_SIPHASH_H	src/crypto/siphash.h	/^#define BITCOIN_CRYPTO_SIPHASH_H$/;"	d
BITCOIN_CUCKOOCACHE_H	src/cuckoocache.h	/^#define BITCOIN_CUCKOOCACHE_H$/;"	d
BITCOIN_DAEMON_NAME	Makefile	/^BITCOIN_DAEMON_NAME = bitcoind$/;"	m
BITCOIN_DAEMON_NAME	doc/man/Makefile	/^BITCOIN_DAEMON_NAME = bitcoind$/;"	m
BITCOIN_DAEMON_NAME	src/Makefile	/^BITCOIN_DAEMON_NAME = bitcoind$/;"	m
BITCOIN_DBWRAPPER_H	src/dbwrapper.h	/^#define BITCOIN_DBWRAPPER_H$/;"	d
BITCOIN_FLATFILE_H	src/flatfile.h	/^#define BITCOIN_FLATFILE_H$/;"	d
BITCOIN_FS_H	src/fs.h	/^#define BITCOIN_FS_H$/;"	d
BITCOIN_GUI_NAME	Makefile	/^BITCOIN_GUI_NAME = bitcoin-qt$/;"	m
BITCOIN_GUI_NAME	doc/man/Makefile	/^BITCOIN_GUI_NAME = bitcoin-qt$/;"	m
BITCOIN_GUI_NAME	src/Makefile	/^BITCOIN_GUI_NAME = bitcoin-qt$/;"	m
BITCOIN_HASH_H	src/hash.h	/^#define BITCOIN_HASH_H$/;"	d
BITCOIN_HTTPRPC_H	src/httprpc.h	/^#define BITCOIN_HTTPRPC_H$/;"	d
BITCOIN_HTTPSERVER_H	src/httpserver.h	/^#define BITCOIN_HTTPSERVER_H$/;"	d
BITCOIN_INCLUDES	src/Makefile	/^BITCOIN_INCLUDES = -I$(builddir) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) \\$/;"	m
BITCOIN_INDEX_BASE_H	src/index/base.h	/^#define BITCOIN_INDEX_BASE_H$/;"	d
BITCOIN_INDEX_BLOCKFILTERINDEX_H	src/index/blockfilterindex.h	/^#define BITCOIN_INDEX_BLOCKFILTERINDEX_H$/;"	d
BITCOIN_INDEX_TXINDEX_H	src/index/txindex.h	/^#define BITCOIN_INDEX_TXINDEX_H$/;"	d
BITCOIN_INDIRECTMAP_H	src/indirectmap.h	/^#define BITCOIN_INDIRECTMAP_H$/;"	d
BITCOIN_INIT_H	src/init.h	/^#define BITCOIN_INIT_H$/;"	d
BITCOIN_INTERFACES_CHAIN_H	src/interfaces/chain.h	/^#define BITCOIN_INTERFACES_CHAIN_H$/;"	d
BITCOIN_INTERFACES_HANDLER_H	src/interfaces/handler.h	/^#define BITCOIN_INTERFACES_HANDLER_H$/;"	d
BITCOIN_INTERFACES_NODE_H	src/interfaces/node.h	/^#define BITCOIN_INTERFACES_NODE_H$/;"	d
BITCOIN_INTERFACES_WALLET_H	src/interfaces/wallet.h	/^#define BITCOIN_INTERFACES_WALLET_H$/;"	d
BITCOIN_IPC_CONNECT_TIMEOUT	src/qt/paymentserver.cpp	/^const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; \/\/ milliseconds$/;"	v
BITCOIN_KEYSTORE_H	src/keystore.h	/^#define BITCOIN_KEYSTORE_H$/;"	d
BITCOIN_KEY_H	src/key.h	/^#define BITCOIN_KEY_H$/;"	d
BITCOIN_KEY_IO_H	src/key_io.h	/^#define BITCOIN_KEY_IO_H$/;"	d
BITCOIN_LIBSECP256K1_CONFIG_H	build_msvc/libsecp256k1_config.h	/^#define BITCOIN_LIBSECP256K1_CONFIG_H$/;"	d
BITCOIN_LIMITEDMAP_H	src/limitedmap.h	/^#define BITCOIN_LIMITEDMAP_H$/;"	d
BITCOIN_LOGGING_H	src/logging.h	/^#define BITCOIN_LOGGING_H$/;"	d
BITCOIN_MEMUSAGE_H	src/memusage.h	/^#define BITCOIN_MEMUSAGE_H$/;"	d
BITCOIN_MERKLEBLOCK_H	src/merkleblock.h	/^#define BITCOIN_MERKLEBLOCK_H$/;"	d
BITCOIN_MINER_H	src/miner.h	/^#define BITCOIN_MINER_H$/;"	d
BITCOIN_NETADDRESS_H	src/netaddress.h	/^#define BITCOIN_NETADDRESS_H$/;"	d
BITCOIN_NETBASE_H	src/netbase.h	/^#define BITCOIN_NETBASE_H$/;"	d
BITCOIN_NETMESSAGEMAKER_H	src/netmessagemaker.h	/^#define BITCOIN_NETMESSAGEMAKER_H$/;"	d
BITCOIN_NET_H	src/net.h	/^#define BITCOIN_NET_H$/;"	d
BITCOIN_NET_PROCESSING_H	src/net_processing.h	/^#define BITCOIN_NET_PROCESSING_H$/;"	d
BITCOIN_NODE_COIN_H	src/node/coin.h	/^#define BITCOIN_NODE_COIN_H$/;"	d
BITCOIN_NODE_PSBT_H	src/node/psbt.h	/^#define BITCOIN_NODE_PSBT_H$/;"	d
BITCOIN_NODE_TRANSACTION_H	src/node/transaction.h	/^#define BITCOIN_NODE_TRANSACTION_H$/;"	d
BITCOIN_NOUI_H	src/noui.h	/^#define BITCOIN_NOUI_H$/;"	d
BITCOIN_OPTIONAL_H	src/optional.h	/^#define BITCOIN_OPTIONAL_H$/;"	d
BITCOIN_OUTPUTTYPE_H	src/outputtype.h	/^#define BITCOIN_OUTPUTTYPE_H$/;"	d
BITCOIN_PID_FILENAME	src/init.cpp	/^static const char* BITCOIN_PID_FILENAME = "bitcoind.pid";$/;"	v	file:
BITCOIN_POLICY_FEERATE_H	src/policy/feerate.h	/^#define BITCOIN_POLICY_FEERATE_H$/;"	d
BITCOIN_POLICY_FEES_H	src/policy/fees.h	/^#define BITCOIN_POLICY_FEES_H$/;"	d
BITCOIN_POLICY_POLICY_H	src/policy/policy.h	/^#define BITCOIN_POLICY_POLICY_H$/;"	d
BITCOIN_POLICY_RBF_H	src/policy/rbf.h	/^#define BITCOIN_POLICY_RBF_H$/;"	d
BITCOIN_POLICY_SETTINGS_H	src/policy/settings.h	/^#define BITCOIN_POLICY_SETTINGS_H$/;"	d
BITCOIN_POW_H	src/pow.h	/^#define BITCOIN_POW_H$/;"	d
BITCOIN_PREVECTOR_H	src/prevector.h	/^#define BITCOIN_PREVECTOR_H$/;"	d
BITCOIN_PRIMITIVES_BLOCK_H	src/primitives/block.h	/^#define BITCOIN_PRIMITIVES_BLOCK_H$/;"	d
BITCOIN_PRIMITIVES_TRANSACTION_H	src/primitives/transaction.h	/^#define BITCOIN_PRIMITIVES_TRANSACTION_H$/;"	d
BITCOIN_PROTOCOL_H	src/protocol.h	/^#define BITCOIN_PROTOCOL_H$/;"	d
BITCOIN_PSBT_H	src/psbt.h	/^#define BITCOIN_PSBT_H$/;"	d
BITCOIN_PUBKEY_H	src/pubkey.h	/^#define BITCOIN_PUBKEY_H$/;"	d
BITCOIN_QT_ADDRESSBOOKPAGE_H	src/qt/addressbookpage.h	/^#define BITCOIN_QT_ADDRESSBOOKPAGE_H$/;"	d
BITCOIN_QT_ADDRESSTABLEMODEL_H	src/qt/addresstablemodel.h	/^#define BITCOIN_QT_ADDRESSTABLEMODEL_H$/;"	d
BITCOIN_QT_ASKPASSPHRASEDIALOG_H	src/qt/askpassphrasedialog.h	/^#define BITCOIN_QT_ASKPASSPHRASEDIALOG_H$/;"	d
BITCOIN_QT_BANTABLEMODEL_H	src/qt/bantablemodel.h	/^#define BITCOIN_QT_BANTABLEMODEL_H$/;"	d
BITCOIN_QT_BIN	Makefile	/^BITCOIN_QT_BIN = $(top_builddir)\/src\/qt\/$(BITCOIN_GUI_NAME)$(EXEEXT)$/;"	m
BITCOIN_QT_BITCOINADDRESSVALIDATOR_H	src/qt/bitcoinaddressvalidator.h	/^#define BITCOIN_QT_BITCOINADDRESSVALIDATOR_H$/;"	d
BITCOIN_QT_BITCOINAMOUNTFIELD_H	src/qt/bitcoinamountfield.h	/^#define BITCOIN_QT_BITCOINAMOUNTFIELD_H$/;"	d
BITCOIN_QT_BITCOINGUI_H	src/qt/bitcoingui.h	/^#define BITCOIN_QT_BITCOINGUI_H$/;"	d
BITCOIN_QT_BITCOINUNITS_H	src/qt/bitcoinunits.h	/^#define BITCOIN_QT_BITCOINUNITS_H$/;"	d
BITCOIN_QT_BITCOIN_H	src/qt/bitcoin.h	/^#define BITCOIN_QT_BITCOIN_H$/;"	d
BITCOIN_QT_CLIENTMODEL_H	src/qt/clientmodel.h	/^#define BITCOIN_QT_CLIENTMODEL_H$/;"	d
BITCOIN_QT_COINCONTROLDIALOG_H	src/qt/coincontroldialog.h	/^#define BITCOIN_QT_COINCONTROLDIALOG_H$/;"	d
BITCOIN_QT_COINCONTROLTREEWIDGET_H	src/qt/coincontroltreewidget.h	/^#define BITCOIN_QT_COINCONTROLTREEWIDGET_H$/;"	d
BITCOIN_QT_CSVMODELWRITER_H	src/qt/csvmodelwriter.h	/^#define BITCOIN_QT_CSVMODELWRITER_H$/;"	d
BITCOIN_QT_EDITADDRESSDIALOG_H	src/qt/editaddressdialog.h	/^#define BITCOIN_QT_EDITADDRESSDIALOG_H$/;"	d
BITCOIN_QT_GUICONSTANTS_H	src/qt/guiconstants.h	/^#define BITCOIN_QT_GUICONSTANTS_H$/;"	d
BITCOIN_QT_GUIUTIL_H	src/qt/guiutil.h	/^#define BITCOIN_QT_GUIUTIL_H$/;"	d
BITCOIN_QT_INTRO_H	src/qt/intro.h	/^#define BITCOIN_QT_INTRO_H$/;"	d
BITCOIN_QT_MACDOCKICONHANDLER_H	src/qt/macdockiconhandler.h	/^#define BITCOIN_QT_MACDOCKICONHANDLER_H$/;"	d
BITCOIN_QT_MACNOTIFICATIONHANDLER_H	src/qt/macnotificationhandler.h	/^#define BITCOIN_QT_MACNOTIFICATIONHANDLER_H$/;"	d
BITCOIN_QT_MACOS_APPNAP_H	src/qt/macos_appnap.h	/^#define BITCOIN_QT_MACOS_APPNAP_H$/;"	d
BITCOIN_QT_MODALOVERLAY_H	src/qt/modaloverlay.h	/^#define BITCOIN_QT_MODALOVERLAY_H$/;"	d
BITCOIN_QT_NETWORKSTYLE_H	src/qt/networkstyle.h	/^#define BITCOIN_QT_NETWORKSTYLE_H$/;"	d
BITCOIN_QT_NOTIFICATOR_H	src/qt/notificator.h	/^#define BITCOIN_QT_NOTIFICATOR_H$/;"	d
BITCOIN_QT_OPENURIDIALOG_H	src/qt/openuridialog.h	/^#define BITCOIN_QT_OPENURIDIALOG_H$/;"	d
BITCOIN_QT_OPTIONSDIALOG_H	src/qt/optionsdialog.h	/^#define BITCOIN_QT_OPTIONSDIALOG_H$/;"	d
BITCOIN_QT_OPTIONSMODEL_H	src/qt/optionsmodel.h	/^#define BITCOIN_QT_OPTIONSMODEL_H$/;"	d
BITCOIN_QT_OVERVIEWPAGE_H	src/qt/overviewpage.h	/^#define BITCOIN_QT_OVERVIEWPAGE_H$/;"	d
BITCOIN_QT_PAYMENTREQUESTPLUS_H	src/qt/paymentrequestplus.h	/^#define BITCOIN_QT_PAYMENTREQUESTPLUS_H$/;"	d
BITCOIN_QT_PAYMENTSERVER_H	src/qt/paymentserver.h	/^#define BITCOIN_QT_PAYMENTSERVER_H$/;"	d
BITCOIN_QT_PEERTABLEMODEL_H	src/qt/peertablemodel.h	/^#define BITCOIN_QT_PEERTABLEMODEL_H$/;"	d
BITCOIN_QT_PLATFORMSTYLE_H	src/qt/platformstyle.h	/^#define BITCOIN_QT_PLATFORMSTYLE_H$/;"	d
BITCOIN_QT_QRIMAGEWIDGET_H	src/qt/qrimagewidget.h	/^#define BITCOIN_QT_QRIMAGEWIDGET_H$/;"	d
BITCOIN_QT_QVALIDATEDLINEEDIT_H	src/qt/qvalidatedlineedit.h	/^#define BITCOIN_QT_QVALIDATEDLINEEDIT_H$/;"	d
BITCOIN_QT_QVALUECOMBOBOX_H	src/qt/qvaluecombobox.h	/^#define BITCOIN_QT_QVALUECOMBOBOX_H$/;"	d
BITCOIN_QT_RECEIVECOINSDIALOG_H	src/qt/receivecoinsdialog.h	/^#define BITCOIN_QT_RECEIVECOINSDIALOG_H$/;"	d
BITCOIN_QT_RECEIVEREQUESTDIALOG_H	src/qt/receiverequestdialog.h	/^#define BITCOIN_QT_RECEIVEREQUESTDIALOG_H$/;"	d
BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H	src/qt/recentrequeststablemodel.h	/^#define BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H$/;"	d
BITCOIN_QT_RPCCONSOLE_H	src/qt/rpcconsole.h	/^#define BITCOIN_QT_RPCCONSOLE_H$/;"	d
BITCOIN_QT_SENDCOINSDIALOG_H	src/qt/sendcoinsdialog.h	/^#define BITCOIN_QT_SENDCOINSDIALOG_H$/;"	d
BITCOIN_QT_SENDCOINSENTRY_H	src/qt/sendcoinsentry.h	/^#define BITCOIN_QT_SENDCOINSENTRY_H$/;"	d
BITCOIN_QT_SIGNVERIFYMESSAGEDIALOG_H	src/qt/signverifymessagedialog.h	/^#define BITCOIN_QT_SIGNVERIFYMESSAGEDIALOG_H$/;"	d
BITCOIN_QT_SPLASHSCREEN_H	src/qt/splashscreen.h	/^#define BITCOIN_QT_SPLASHSCREEN_H$/;"	d
BITCOIN_QT_TEST_ADDRESSBOOKTESTS_H	src/qt/test/addressbooktests.h	/^#define BITCOIN_QT_TEST_ADDRESSBOOKTESTS_H$/;"	d
BITCOIN_QT_TEST_APPTESTS_H	src/qt/test/apptests.h	/^#define BITCOIN_QT_TEST_APPTESTS_H$/;"	d
BITCOIN_QT_TEST_COMPATTESTS_H	src/qt/test/compattests.h	/^#define BITCOIN_QT_TEST_COMPATTESTS_H$/;"	d
BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H	src/qt/test/paymentrequestdata.h	/^#define BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H$/;"	d
BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H	src/qt/test/paymentservertests.h	/^#define BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H$/;"	d
BITCOIN_QT_TEST_RPCNESTEDTESTS_H	src/qt/test/rpcnestedtests.h	/^#define BITCOIN_QT_TEST_RPCNESTEDTESTS_H$/;"	d
BITCOIN_QT_TEST_URITESTS_H	src/qt/test/uritests.h	/^#define BITCOIN_QT_TEST_URITESTS_H$/;"	d
BITCOIN_QT_TEST_UTIL_H	src/qt/test/util.h	/^#define BITCOIN_QT_TEST_UTIL_H$/;"	d
BITCOIN_QT_TEST_WALLETTESTS_H	src/qt/test/wallettests.h	/^#define BITCOIN_QT_TEST_WALLETTESTS_H$/;"	d
BITCOIN_QT_TRAFFICGRAPHWIDGET_H	src/qt/trafficgraphwidget.h	/^#define BITCOIN_QT_TRAFFICGRAPHWIDGET_H$/;"	d
BITCOIN_QT_TRANSACTIONDESCDIALOG_H	src/qt/transactiondescdialog.h	/^#define BITCOIN_QT_TRANSACTIONDESCDIALOG_H$/;"	d
BITCOIN_QT_TRANSACTIONDESC_H	src/qt/transactiondesc.h	/^#define BITCOIN_QT_TRANSACTIONDESC_H$/;"	d
BITCOIN_QT_TRANSACTIONFILTERPROXY_H	src/qt/transactionfilterproxy.h	/^#define BITCOIN_QT_TRANSACTIONFILTERPROXY_H$/;"	d
BITCOIN_QT_TRANSACTIONRECORD_H	src/qt/transactionrecord.h	/^#define BITCOIN_QT_TRANSACTIONRECORD_H$/;"	d
BITCOIN_QT_TRANSACTIONTABLEMODEL_H	src/qt/transactiontablemodel.h	/^#define BITCOIN_QT_TRANSACTIONTABLEMODEL_H$/;"	d
BITCOIN_QT_TRANSACTIONVIEW_H	src/qt/transactionview.h	/^#define BITCOIN_QT_TRANSACTIONVIEW_H$/;"	d
BITCOIN_QT_UTILITYDIALOG_H	src/qt/utilitydialog.h	/^#define BITCOIN_QT_UTILITYDIALOG_H$/;"	d
BITCOIN_QT_WALLETCONTROLLER_H	src/qt/walletcontroller.h	/^#define BITCOIN_QT_WALLETCONTROLLER_H$/;"	d
BITCOIN_QT_WALLETFRAME_H	src/qt/walletframe.h	/^#define BITCOIN_QT_WALLETFRAME_H$/;"	d
BITCOIN_QT_WALLETMODELTRANSACTION_H	src/qt/walletmodeltransaction.h	/^#define BITCOIN_QT_WALLETMODELTRANSACTION_H$/;"	d
BITCOIN_QT_WALLETMODEL_H	src/qt/walletmodel.h	/^#define BITCOIN_QT_WALLETMODEL_H$/;"	d
BITCOIN_QT_WALLETVIEW_H	src/qt/walletview.h	/^#define BITCOIN_QT_WALLETVIEW_H$/;"	d
BITCOIN_QT_WINSHUTDOWNMONITOR_H	src/qt/winshutdownmonitor.h	/^#define BITCOIN_QT_WINSHUTDOWNMONITOR_H$/;"	d
BITCOIN_RANDOM_H	src/random.h	/^#define BITCOIN_RANDOM_H$/;"	d
BITCOIN_REVERSELOCK_H	src/reverselock.h	/^#define BITCOIN_REVERSELOCK_H$/;"	d
BITCOIN_REVERSE_ITERATOR_H	src/reverse_iterator.h	/^#define BITCOIN_REVERSE_ITERATOR_H$/;"	d
BITCOIN_RPC_BLOCKCHAIN_H	src/rpc/blockchain.h	/^#define BITCOIN_RPC_BLOCKCHAIN_H$/;"	d
BITCOIN_RPC_CLIENT_H	src/rpc/client.h	/^#define BITCOIN_RPC_CLIENT_H$/;"	d
BITCOIN_RPC_PROTOCOL_H	src/rpc/protocol.h	/^#define BITCOIN_RPC_PROTOCOL_H$/;"	d
BITCOIN_RPC_RAWTRANSACTION_UTIL_H	src/rpc/rawtransaction_util.h	/^#define BITCOIN_RPC_RAWTRANSACTION_UTIL_H$/;"	d
BITCOIN_RPC_REGISTER_H	src/rpc/register.h	/^#define BITCOIN_RPC_REGISTER_H$/;"	d
BITCOIN_RPC_SERVER_H	src/rpc/server.h	/^#define BITCOIN_RPC_SERVER_H$/;"	d
BITCOIN_RPC_UTIL_H	src/rpc/util.h	/^#define BITCOIN_RPC_UTIL_H$/;"	d
BITCOIN_SCHEDULER_H	src/scheduler.h	/^#define BITCOIN_SCHEDULER_H$/;"	d
BITCOIN_SCRIPT_BITCOINCONSENSUS_H	src/script/bitcoinconsensus.h	/^#define BITCOIN_SCRIPT_BITCOINCONSENSUS_H$/;"	d
BITCOIN_SCRIPT_DESCRIPTOR_H	src/script/descriptor.h	/^#define BITCOIN_SCRIPT_DESCRIPTOR_H$/;"	d
BITCOIN_SCRIPT_INTERPRETER_H	src/script/interpreter.h	/^#define BITCOIN_SCRIPT_INTERPRETER_H$/;"	d
BITCOIN_SCRIPT_ISMINE_H	src/script/ismine.h	/^#define BITCOIN_SCRIPT_ISMINE_H$/;"	d
BITCOIN_SCRIPT_SCRIPT_ERROR_H	src/script/script_error.h	/^#define BITCOIN_SCRIPT_SCRIPT_ERROR_H$/;"	d
BITCOIN_SCRIPT_SCRIPT_H	src/script/script.h	/^#define BITCOIN_SCRIPT_SCRIPT_H$/;"	d
BITCOIN_SCRIPT_SIGCACHE_H	src/script/sigcache.h	/^#define BITCOIN_SCRIPT_SIGCACHE_H$/;"	d
BITCOIN_SCRIPT_SIGN_H	src/script/sign.h	/^#define BITCOIN_SCRIPT_SIGN_H$/;"	d
BITCOIN_SCRIPT_STANDARD_H	src/script/standard.h	/^#define BITCOIN_SCRIPT_STANDARD_H$/;"	d
BITCOIN_SERIALIZE_H	src/serialize.h	/^#define BITCOIN_SERIALIZE_H$/;"	d
BITCOIN_SHUTDOWN_H	src/shutdown.h	/^#define BITCOIN_SHUTDOWN_H$/;"	d
BITCOIN_SPAN_H	src/span.h	/^#define BITCOIN_SPAN_H$/;"	d
BITCOIN_STREAMS_H	src/streams.h	/^#define BITCOIN_STREAMS_H$/;"	d
BITCOIN_SUPPORT_ALLOCATORS_SECURE_H	src/support/allocators/secure.h	/^#define BITCOIN_SUPPORT_ALLOCATORS_SECURE_H$/;"	d
BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H	src/support/allocators/zeroafterfree.h	/^#define BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H$/;"	d
BITCOIN_SUPPORT_CLEANSE_H	src/support/cleanse.h	/^#define BITCOIN_SUPPORT_CLEANSE_H$/;"	d
BITCOIN_SUPPORT_EVENTS_H	src/support/events.h	/^#define BITCOIN_SUPPORT_EVENTS_H$/;"	d
BITCOIN_SUPPORT_LOCKEDPOOL_H	src/support/lockedpool.h	/^#define BITCOIN_SUPPORT_LOCKEDPOOL_H$/;"	d
BITCOIN_SYNC_H	src/sync.h	/^#define BITCOIN_SYNC_H$/;"	d
BITCOIN_TESTS	src/Makefile	/^BITCOIN_TESTS = test\/arith_uint256_tests.cpp \\$/;"	m
BITCOIN_TEST_FUZZ_FUZZ_H	src/test/fuzz/fuzz.h	/^#define BITCOIN_TEST_FUZZ_FUZZ_H$/;"	d
BITCOIN_TEST_GEN_CRYPTO_GEN_H	src/test/gen/crypto_gen.h	/^#define BITCOIN_TEST_GEN_CRYPTO_GEN_H$/;"	d
BITCOIN_TEST_SCRIPTNUM10_H	src/test/scriptnum10.h	/^#define BITCOIN_TEST_SCRIPTNUM10_H$/;"	d
BITCOIN_TEST_SETUP_COMMON_H	src/test/setup_common.h	/^#define BITCOIN_TEST_SETUP_COMMON_H$/;"	d
BITCOIN_TEST_SUITE	src/Makefile	/^BITCOIN_TEST_SUITE = test\/main.cpp \\$/;"	m
BITCOIN_TEST_UTIL_H	src/test/util.h	/^#define BITCOIN_TEST_UTIL_H$/;"	d
BITCOIN_THREADINTERRUPT_H	src/threadinterrupt.h	/^#define BITCOIN_THREADINTERRUPT_H$/;"	d
BITCOIN_THREADSAFETY_H	src/threadsafety.h	/^#define BITCOIN_THREADSAFETY_H$/;"	d
BITCOIN_TIMEDATA_H	src/timedata.h	/^#define BITCOIN_TIMEDATA_H$/;"	d
BITCOIN_TIMEDATA_MAX_SAMPLES	src/timedata.cpp	/^#define BITCOIN_TIMEDATA_MAX_SAMPLES /;"	d	file:
BITCOIN_TORCONTROL_H	src/torcontrol.h	/^#define BITCOIN_TORCONTROL_H$/;"	d
BITCOIN_TXDB_H	src/txdb.h	/^#define BITCOIN_TXDB_H$/;"	d
BITCOIN_TXMEMPOOL_H	src/txmempool.h	/^#define BITCOIN_TXMEMPOOL_H$/;"	d
BITCOIN_TX_BIN	Makefile	/^BITCOIN_TX_BIN = $(top_builddir)\/src\/$(BITCOIN_TX_NAME)$(EXEEXT)$/;"	m
BITCOIN_TX_NAME	Makefile	/^BITCOIN_TX_NAME = bitcoin-tx$/;"	m
BITCOIN_TX_NAME	doc/man/Makefile	/^BITCOIN_TX_NAME = bitcoin-tx$/;"	m
BITCOIN_TX_NAME	src/Makefile	/^BITCOIN_TX_NAME = bitcoin-tx$/;"	m
BITCOIN_UINT256_H	src/uint256.h	/^#define BITCOIN_UINT256_H$/;"	d
BITCOIN_UI_INTERFACE_H	src/ui_interface.h	/^#define BITCOIN_UI_INTERFACE_H$/;"	d
BITCOIN_UNDO_H	src/undo.h	/^#define BITCOIN_UNDO_H$/;"	d
BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H	src/univalue/lib/univalue_escapes.h	/^#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H$/;"	d
BITCOIN_UTIL_BIP32_H	src/util/bip32.h	/^#define BITCOIN_UTIL_BIP32_H$/;"	d
BITCOIN_UTIL_BYTEVECTORHASH_H	src/util/bytevectorhash.h	/^#define BITCOIN_UTIL_BYTEVECTORHASH_H$/;"	d
BITCOIN_UTIL_ERROR_H	src/util/error.h	/^#define BITCOIN_UTIL_ERROR_H$/;"	d
BITCOIN_UTIL_FEES_H	src/util/fees.h	/^#define BITCOIN_UTIL_FEES_H$/;"	d
BITCOIN_UTIL_MEMORY_H	src/util/memory.h	/^#define BITCOIN_UTIL_MEMORY_H$/;"	d
BITCOIN_UTIL_MONEYSTR_H	src/util/moneystr.h	/^#define BITCOIN_UTIL_MONEYSTR_H$/;"	d
BITCOIN_UTIL_RBF_H	src/util/rbf.h	/^#define BITCOIN_UTIL_RBF_H$/;"	d
BITCOIN_UTIL_STRENCODINGS_H	src/util/strencodings.h	/^#define BITCOIN_UTIL_STRENCODINGS_H$/;"	d
BITCOIN_UTIL_SYSTEM_H	src/util/system.h	/^#define BITCOIN_UTIL_SYSTEM_H$/;"	d
BITCOIN_UTIL_THREADNAMES_H	src/util/threadnames.h	/^#define BITCOIN_UTIL_THREADNAMES_H$/;"	d
BITCOIN_UTIL_TIME_H	src/util/time.h	/^#define BITCOIN_UTIL_TIME_H$/;"	d
BITCOIN_UTIL_URL_H	src/util/url.h	/^#define BITCOIN_UTIL_URL_H$/;"	d
BITCOIN_UTIL_VALIDATION_H	src/util/validation.h	/^#define BITCOIN_UTIL_VALIDATION_H$/;"	d
BITCOIN_VALIDATIONINTERFACE_H	src/validationinterface.h	/^#define BITCOIN_VALIDATIONINTERFACE_H$/;"	d
BITCOIN_VALIDATION_H	src/validation.h	/^#define BITCOIN_VALIDATION_H$/;"	d
BITCOIN_VERSIONBITSINFO_H	src/versionbitsinfo.h	/^#define BITCOIN_VERSIONBITSINFO_H$/;"	d
BITCOIN_VERSIONBITS_H	src/versionbits.h	/^#define BITCOIN_VERSIONBITS_H$/;"	d
BITCOIN_VERSION_H	src/version.h	/^#define BITCOIN_VERSION_H$/;"	d
BITCOIN_WALLETINITINTERFACE_H	src/walletinitinterface.h	/^#define BITCOIN_WALLETINITINTERFACE_H$/;"	d
BITCOIN_WALLET_BIN	Makefile	/^BITCOIN_WALLET_BIN = $(top_builddir)\/src\/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)$/;"	m
BITCOIN_WALLET_COINCONTROL_H	src/wallet/coincontrol.h	/^#define BITCOIN_WALLET_COINCONTROL_H$/;"	d
BITCOIN_WALLET_COINSELECTION_H	src/wallet/coinselection.h	/^#define BITCOIN_WALLET_COINSELECTION_H$/;"	d
BITCOIN_WALLET_CRYPTER_H	src/wallet/crypter.h	/^#define BITCOIN_WALLET_CRYPTER_H$/;"	d
BITCOIN_WALLET_DB_H	src/wallet/db.h	/^#define BITCOIN_WALLET_DB_H$/;"	d
BITCOIN_WALLET_FEEBUMPER_H	src/wallet/feebumper.h	/^#define BITCOIN_WALLET_FEEBUMPER_H$/;"	d
BITCOIN_WALLET_FEES_H	src/wallet/fees.h	/^#define BITCOIN_WALLET_FEES_H$/;"	d
BITCOIN_WALLET_LOAD_H	src/wallet/load.h	/^#define BITCOIN_WALLET_LOAD_H$/;"	d
BITCOIN_WALLET_PSBTWALLET_H	src/wallet/psbtwallet.h	/^#define BITCOIN_WALLET_PSBTWALLET_H$/;"	d
BITCOIN_WALLET_RPCWALLET_H	src/wallet/rpcwallet.h	/^#define BITCOIN_WALLET_RPCWALLET_H$/;"	d
BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H	src/wallet/test/init_test_fixture.h	/^#define BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H$/;"	d
BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H	src/wallet/test/wallet_test_fixture.h	/^#define BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H$/;"	d
BITCOIN_WALLET_TOOL_NAME	Makefile	/^BITCOIN_WALLET_TOOL_NAME = bitcoin-wallet$/;"	m
BITCOIN_WALLET_TOOL_NAME	doc/man/Makefile	/^BITCOIN_WALLET_TOOL_NAME = bitcoin-wallet$/;"	m
BITCOIN_WALLET_TOOL_NAME	src/Makefile	/^BITCOIN_WALLET_TOOL_NAME = bitcoin-wallet$/;"	m
BITCOIN_WALLET_WALLETDB_H	src/wallet/walletdb.h	/^#define BITCOIN_WALLET_WALLETDB_H$/;"	d
BITCOIN_WALLET_WALLETTOOL_H	src/wallet/wallettool.h	/^#define BITCOIN_WALLET_WALLETTOOL_H$/;"	d
BITCOIN_WALLET_WALLETUTIL_H	src/wallet/walletutil.h	/^#define BITCOIN_WALLET_WALLETUTIL_H$/;"	d
BITCOIN_WALLET_WALLET_H	src/wallet/wallet.h	/^#define BITCOIN_WALLET_WALLET_H$/;"	d
BITCOIN_WARNINGS_H	src/warnings.h	/^#define BITCOIN_WARNINGS_H$/;"	d
BITCOIN_WIN_INSTALLER	Makefile	/^BITCOIN_WIN_INSTALLER = $(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)$/;"	m
BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H	src/zmq/zmqabstractnotifier.h	/^#define BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H$/;"	d
BITCOIN_ZMQ_ZMQCONFIG_H	src/zmq/zmqconfig.h	/^#define BITCOIN_ZMQ_ZMQCONFIG_H$/;"	d
BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H	src/zmq/zmqnotificationinterface.h	/^#define BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H$/;"	d
BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H	src/zmq/zmqpublishnotifier.h	/^#define BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H$/;"	d
BITCOIN_ZMQ_ZMQRPC_H	src/zmq/zmqrpc.h	/^#define BITCOIN_ZMQ_ZMQRPC_H$/;"	d
BITER	src/bench/lockedpool.cpp	/^#define BITER /;"	d	file:
BITS_PER_SAMPLE	src/qt/notificator.cpp	/^const int BITS_PER_SAMPLE = 8;$/;"	v
BIT_RANGE	src/crypto/ctaes/ctaes.c	/^#define BIT_RANGE(/;"	d	file:
BIT_RANGE_LEFT	src/crypto/ctaes/ctaes.c	/^#define BIT_RANGE_LEFT(/;"	d	file:
BIT_RANGE_RIGHT	src/crypto/ctaes/ctaes.c	/^#define BIT_RANGE_RIGHT(/;"	d	file:
BLOCK	src/protocol.cpp	/^const char *BLOCK="block";$/;"	m	namespace:NetMsgType	file:
BLOCK	src/txmempool.h	/^    BLOCK,       \/\/!< Removed for block$/;"	m	class:MemPoolRemovalReason
BLOCKFILE_CHUNK_SIZE	src/validation.h	/^static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; \/\/ 16 MiB$/;"	v
BLOCKTXN	src/protocol.cpp	/^const char *BLOCKTXN="blocktxn";$/;"	m	namespace:NetMsgType	file:
BLOCK_CHECKPOINT	src/consensus/validation.h	/^    BLOCK_CHECKPOINT,        \/\/!< the block failed to meet one of our checkpoints$/;"	m	class:ValidationInvalidReason
BLOCK_CREATION	src/util/system.h	/^    BLOCK_CREATION,$/;"	m	class:OptionsCategory
BLOCK_DOWNLOAD_TIMEOUT_BASE	src/validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;$/;"	v
BLOCK_DOWNLOAD_TIMEOUT_PER_PEER	src/validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;$/;"	v
BLOCK_DOWNLOAD_WINDOW	src/validation.h	/^static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;$/;"	v
BLOCK_FAILED_CHILD	src/chain.h	/^    BLOCK_FAILED_CHILD       =   64, \/\/!< descends from failed block$/;"	e	enum:uint32_t
BLOCK_FAILED_MASK	src/chain.h	/^    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,$/;"	e	enum:uint32_t
BLOCK_FAILED_VALID	src/chain.h	/^    BLOCK_FAILED_VALID       =   32, \/\/!< stage after last reached validness failed$/;"	e	enum:uint32_t
BLOCK_HAVE_DATA	src/chain.h	/^    BLOCK_HAVE_DATA          =    8, \/\/!< full block available in blk*.dat$/;"	e	enum:uint32_t
BLOCK_HAVE_MASK	src/chain.h	/^    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,$/;"	e	enum:uint32_t
BLOCK_HAVE_UNDO	src/chain.h	/^    BLOCK_HAVE_UNDO          =   16, \/\/!< undo data available in rev*.dat$/;"	e	enum:uint32_t
BLOCK_HEADER_SIZE	test/functional/interface_rest.py	/^from test_framework.messages import BLOCK_HEADER_SIZE$/;"	i
BLOCK_HEADER_SIZE	test/functional/test_framework/messages.py	/^BLOCK_HEADER_SIZE = len(CBlockHeader().serialize())$/;"	v
BLOCK_INVALID_HEADER	src/consensus/validation.h	/^    BLOCK_INVALID_HEADER,    \/\/!< invalid proof of work or time too old$/;"	m	class:ValidationInvalidReason
BLOCK_INVALID_PREV	src/consensus/validation.h	/^    BLOCK_INVALID_PREV,      \/\/!< A block this one builds on is invalid$/;"	m	class:ValidationInvalidReason
BLOCK_MISSING_PREV	src/consensus/validation.h	/^    BLOCK_MISSING_PREV,      \/\/!< We don't have the previous block the checked one is built on$/;"	m	class:ValidationInvalidReason
BLOCK_MUTATED	src/consensus/validation.h	/^    BLOCK_MUTATED,           \/\/!< the block's data didn't match the data committed to by the PoW$/;"	m	class:ValidationInvalidReason
BLOCK_OPT_WITNESS	src/chain.h	/^    BLOCK_OPT_WITNESS       =   128, \/\/!< block data in blk*.data was received with a witness-enforcing client$/;"	e	enum:uint32_t
BLOCK_STALLING_TIMEOUT	src/validation.h	/^static const unsigned int BLOCK_STALLING_TIMEOUT = 2;$/;"	v
BLOCK_TEST	src/leveldb/table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType	file:
BLOCK_TIME_FUTURE	src/consensus/validation.h	/^    BLOCK_TIME_FUTURE,          \/\/!< block timestamp was > 2 hours in the future (or our clock is bad)$/;"	m	class:ValidationInvalidReason
BLOCK_VALID_CHAIN	src/chain.h	/^    BLOCK_VALID_CHAIN        =    4,$/;"	e	enum:uint32_t
BLOCK_VALID_HEADER	src/chain.h	/^    BLOCK_VALID_HEADER       =    1,$/;"	e	enum:uint32_t
BLOCK_VALID_MASK	src/chain.h	/^    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |$/;"	e	enum:uint32_t
BLOCK_VALID_SCRIPTS	src/chain.h	/^    BLOCK_VALID_SCRIPTS      =    5,$/;"	e	enum:uint32_t
BLOCK_VALID_TRANSACTIONS	src/chain.h	/^    BLOCK_VALID_TRANSACTIONS =    3,$/;"	e	enum:uint32_t
BLOCK_VALID_TREE	src/chain.h	/^    BLOCK_VALID_TREE         =    2,$/;"	e	enum:uint32_t
BLOCK_VALID_UNKNOWN	src/chain.h	/^    BLOCK_VALID_UNKNOWN      =    0,$/;"	e	enum:uint32_t
BLOOM_UPDATE_ALL	src/bloom.h	/^    BLOOM_UPDATE_ALL = 1,$/;"	e	enum:bloomflags
BLOOM_UPDATE_MASK	src/bloom.h	/^    BLOOM_UPDATE_MASK = 3,$/;"	e	enum:bloomflags
BLOOM_UPDATE_NONE	src/bloom.h	/^    BLOOM_UPDATE_NONE = 0,$/;"	e	enum:bloomflags
BLOOM_UPDATE_P2PUBKEY_ONLY	src/bloom.h	/^    BLOOM_UPDATE_P2PUBKEY_ONLY = 2,$/;"	e	enum:bloomflags
BM_LogAndApply	src/leveldb/db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BOLD	test/functional/test_runner.py	/^    BOLD = ('\\033[0m', '\\033[1m')$/;"	v
BOOL	src/rpc/util.h	/^        BOOL,$/;"	m	class:RPCArg::Type
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_create)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_delete)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_evictionworks)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_find)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_getaddr)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_new_collisions)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_noevict)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_ports)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_select)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_simple)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_tried_collisions)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(arena_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(lockedpool_tests_live)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(BinaryOperatorTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetFeeTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(MoneyRangeTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(ToStringTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( bitwiseOperators )$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( divide )$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( getmaxcoverage ) \/\/ some more tests just to get 100% coverage$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( multiply )$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( plusMinus )$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( shifts ) { \/\/ "<<"  ">>"  "<<="  ">>="$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( unaryOperators ) \/\/ !    ~    -$/;"	f
BOOST_AUTO_TEST_CASE	src/test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE(bignum_SetCompact)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/base32_tests.cpp	/^BOOST_AUTO_TEST_CASE(base32_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_DecodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_EncodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/base64_tests.cpp	/^BOOST_AUTO_TEST_CASE(base64_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bech32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bech32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test1) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test2) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test3) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_high_target)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_low_target)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_mid_target)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_very_high_target)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_very_low_target)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationMaxTest) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationOverflowTest) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(TransactionsRequestSerializationTest) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(blockfilter_basic_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(blockfilter_type_names)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(blockfilters_json_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(gcsfilter_default_constructor)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(gcsfilter_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_key)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_match)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_1)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(rolling_bloom)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/bswap_tests.cpp	/^BOOST_AUTO_TEST_CASE(bswap_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Max)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_One)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Zero)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_access)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_add)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_serialization)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_spend)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_write)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/compress_tests.cpp	/^BOOST_AUTO_TEST_CASE(compress_amounts)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(aes_cbc_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(aes_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(chacha20_testvector)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(countbits_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(poly1305_testvector)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(ripemd160_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha1_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha256d64)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	src/test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_erase_ok)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_erase_parallel_ok)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_generations)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_hit_rate_ok)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_cuckoocache_no_fakes)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper_batch)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper_iterator)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(existing_data_reindex)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(iterator_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(iterator_string_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banning)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banscore)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_bantime)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_mapOrphans)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(stale_tip_peer_management)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/descriptor_tests.cpp	/^BOOST_AUTO_TEST_CASE(descriptor_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_allocate)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_filename)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_flush)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_open)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/fs_tests.cpp	/^BOOST_AUTO_TEST_CASE(fsbridge_fstream)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolarg)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolargno)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubledash)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(intarg)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(stringarg)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/hash_tests.cpp	/^BOOST_AUTO_TEST_CASE(murmurhash3)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/hash_tests.cpp	/^BOOST_AUTO_TEST_CASE(siphash)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/key_io_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_io_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/key_io_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_io_valid_gen)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/key_io_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_io_valid_parse)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_key_negation)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_signature_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_test1)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/limitedmap_tests.cpp	/^BOOST_AUTO_TEST_CASE(limitedmap_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolAncestryTests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolIndexingTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolRemoveTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/merkle_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/merkleblock_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_found)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/merkleblock_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_not_found)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/miner_tests.cpp	/^BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_Sign)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_verify)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LimitedAndReachable_CNetAddr)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LimitedAndReachable_Network)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LimitedAndReachable_NetworkCaseUnroutableAndInternal)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrdb_read)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(cnode_listen_port)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(cnode_simple_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_getgroup)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_networks)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_parsenetwork)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_properties)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_splithost)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(onioncat_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(subnet_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_malleability)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_test1)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/policyestimator_tests.cpp	/^BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/prevector_tests.cpp	/^BOOST_AUTO_TEST_CASE(PrevectorTestInt)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/raii_event_tests.cpp	/^BOOST_AUTO_TEST_CASE(raii_event_creation)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/raii_event_tests.cpp	/^BOOST_AUTO_TEST_CASE(raii_event_order)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(fastrandom_randbits)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(fastrandom_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(osrandom_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(shuffle_stat_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(stdrandom_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/reverselock_tests.cpp	/^BOOST_AUTO_TEST_CASE(reverselock_basics)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/reverselock_tests.cpp	/^BOOST_AUTO_TEST_CASE(reverselock_errors)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(json_parse_errors)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_ban)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_convert_values_generatetoaddress)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_getblockstats_calculate_percentiles_by_weight)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawparams)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawsign)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_togglenetwork)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/sanity_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_sanity)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/scheduler_tests.cpp	/^BOOST_AUTO_TEST_CASE(manythreads)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/scheduler_tests.cpp	/^BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(AreInputsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(is)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(norecurse)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(set)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(sign)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(switchover)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_IsMine)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_Solver_success)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_amount_required_err)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_returns_true)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_index_err)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_serialization)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_size)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_FindAndDelete)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_GetScriptAsm)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_HasValidOps)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_IsPushOnly_on_invalid_scripts)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_PushData)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_build)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_can_append_self)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_cltv_truncated)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_combineSigs)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_json_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_push)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(creation)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(operators)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(class_methods)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(compactsize)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(insert_delete)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(noncanonical)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(sizes)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(varints)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(varints_bitpatterns)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_from_data)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetSigOpCount)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetTxSigOpCost)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(findearliestatleast_edge_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(findearliestatleast_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(getlocator_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(skiplist_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitstream_reader_writer)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_serializedata_xor)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_vector_reader)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_vector_writer)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/sync_tests.cpp	/^BOOST_AUTO_TEST_CASE(potential_deadlock_detected)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/timedata_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_MedianFilter)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/torcontrol_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseTorReplyMapping)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/torcontrol_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_SplitTorReplyLine)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_transaction_tests)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_Get)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_big_witness_transaction)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_witness)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_valid)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	src/test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	src/test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( conversion )$/;"	f
BOOST_AUTO_TEST_CASE	src/test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	src/test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( operator_with_self )$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(gettime)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(strprintf_numbers)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_Capitalize)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_DirIsWritable)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatParagraph)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatSubVersion)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_IsDigit)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_LockDirectory)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseDouble)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseInt32)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseInt64)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseUInt32)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseUInt64)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ToLower)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ToUpper)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatISO8601DateTime)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatMoney)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetArg)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetBoolArg)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetChainName)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_HexStr)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHex)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHexNumber)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseHex)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseMoney)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseParameters)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ReadConfigStream)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_TimingResistantEqual)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_criticalsection)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/util_threadnames_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_threadnames_test_rename_threaded)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/validation_block_tests.cpp	/^BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/validation_tests.cpp	/^BOOST_AUTO_TEST_CASE(block_subsidy_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/validation_tests.cpp	/^BOOST_AUTO_TEST_CASE(subsidy_limit_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/validation_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_combiner_all)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/versionbits_tests.cpp	/^BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)$/;"	f
BOOST_AUTO_TEST_CASE	src/test/versionbits_tests.cpp	/^BOOST_AUTO_TEST_CASE(versionbits_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/univalue/test/object.cpp	/^#define BOOST_AUTO_TEST_CASE(/;"	d	file:
BOOST_AUTO_TEST_CASE	src/univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_array)$/;"	f
BOOST_AUTO_TEST_CASE	src/univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_constructor)$/;"	f
BOOST_AUTO_TEST_CASE	src/univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_object)$/;"	f
BOOST_AUTO_TEST_CASE	src/univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_readwrite)$/;"	f
BOOST_AUTO_TEST_CASE	src/univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_set)$/;"	f
BOOST_AUTO_TEST_CASE	src/univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_typecheck)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(ApproximateBestSubset)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(SelectCoins_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(bnb_search_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(knapsack_solver_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_directory)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_file)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_multiple)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_does_not_exist)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_directory)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_relative)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing2)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/psbt_wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(parse_hd_keypath)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/psbt_wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(psbt_updater_test)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/wallet_crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(decrypt) {$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/wallet_crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(encrypt) {$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/wallet_crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(passphrase) {$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(ComputeTimeSmart)$/;"	f
BOOST_AUTO_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(LoadReceiveRequests)$/;"	f
BOOST_AUTO_TEST_SUITE_END	src/univalue/test/object.cpp	/^#define BOOST_AUTO_TEST_SUITE_END(/;"	d	file:
BOOST_CHECK	src/univalue/test/object.cpp	/^#define BOOST_CHECK(/;"	d	file:
BOOST_CHECK_EQUAL	src/univalue/test/object.cpp	/^#define BOOST_CHECK_EQUAL(/;"	d	file:
BOOST_CHECK_NO_THROW	src/univalue/test/object.cpp	/^#define BOOST_CHECK_NO_THROW(/;"	d	file:
BOOST_CHECK_THROW	src/univalue/test/object.cpp	/^#define BOOST_CHECK_THROW(/;"	d	file:
BOOST_CHRONO_LIB	Makefile	/^BOOST_CHRONO_LIB = -lboost_chrono-mt$/;"	m
BOOST_CHRONO_LIB	doc/man/Makefile	/^BOOST_CHRONO_LIB = -lboost_chrono-mt$/;"	m
BOOST_CHRONO_LIB	src/Makefile	/^BOOST_CHRONO_LIB = -lboost_chrono-mt$/;"	m
BOOST_CPPFLAGS	Makefile	/^BOOST_CPPFLAGS = -DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC -pthread -I\/usr\/local\/include$/;"	m
BOOST_CPPFLAGS	doc/man/Makefile	/^BOOST_CPPFLAGS = -DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC -pthread -I\/usr\/local\/include$/;"	m
BOOST_CPPFLAGS	src/Makefile	/^BOOST_CPPFLAGS = -DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC -pthread -I\/usr\/local\/include$/;"	m
BOOST_FILESYSTEM_LIB	Makefile	/^BOOST_FILESYSTEM_LIB = -lboost_filesystem$/;"	m
BOOST_FILESYSTEM_LIB	doc/man/Makefile	/^BOOST_FILESYSTEM_LIB = -lboost_filesystem$/;"	m
BOOST_FILESYSTEM_LIB	src/Makefile	/^BOOST_FILESYSTEM_LIB = -lboost_filesystem$/;"	m
BOOST_FILESYSTEM_NO_DEPRECATED	src/fs.h	/^#define BOOST_FILESYSTEM_NO_DEPRECATED$/;"	d
BOOST_FIXTURE_TEST_CASE	src/test/blockfilter_index_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(blockfilter_index_init_destroy, BasicTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/test/blockfilter_index_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/test/txindex_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/test/txvalidation_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/test/txvalidationcache_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/test/txvalidationcache_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/test/util_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/test/util_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(dummy_input_size_test, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	src/wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_SUITE	src/univalue/test/object.cpp	/^#define BOOST_FIXTURE_TEST_SUITE(/;"	d	file:
BOOST_LDFLAGS	Makefile	/^BOOST_LDFLAGS = -L\/usr\/local\/lib$/;"	m
BOOST_LDFLAGS	doc/man/Makefile	/^BOOST_LDFLAGS = -L\/usr\/local\/lib$/;"	m
BOOST_LDFLAGS	src/Makefile	/^BOOST_LDFLAGS = -L\/usr\/local\/lib$/;"	m
BOOST_LIBS	Makefile	/^BOOST_LIBS = -L\/usr\/local\/lib -lboost_system -lboost_filesystem -lboost_thread-mt -lboost_chrono-mt$/;"	m
BOOST_LIBS	doc/man/Makefile	/^BOOST_LIBS = -L\/usr\/local\/lib -lboost_system -lboost_filesystem -lboost_thread-mt -lboost_chrono-mt$/;"	m
BOOST_LIBS	src/Makefile	/^BOOST_LIBS = -L\/usr\/local\/lib -lboost_system -lboost_filesystem -lboost_thread-mt -lboost_chrono-mt$/;"	m
BOOST_SYSTEM_LIB	Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_SYSTEM_LIB	doc/man/Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_SYSTEM_LIB	src/Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_TEST_MODULE	src/test/main.cpp	/^#define BOOST_TEST_MODULE /;"	d	file:
BOOST_THREAD_LIB	Makefile	/^BOOST_THREAD_LIB = -lboost_thread-mt$/;"	m
BOOST_THREAD_LIB	doc/man/Makefile	/^BOOST_THREAD_LIB = -lboost_thread-mt$/;"	m
BOOST_THREAD_LIB	src/Makefile	/^BOOST_THREAD_LIB = -lboost_thread-mt$/;"	m
BOOST_UNIT_TEST_FRAMEWORK_LIB	Makefile	/^BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework-mt$/;"	m
BOOST_UNIT_TEST_FRAMEWORK_LIB	doc/man/Makefile	/^BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework-mt$/;"	m
BOOST_UNIT_TEST_FRAMEWORK_LIB	src/Makefile	/^BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework-mt$/;"	m
BREW	Makefile	/^BREW = brew$/;"	m
BREW	doc/man/Makefile	/^BREW = brew$/;"	m
BREW	src/Makefile	/^BREW = brew$/;"	m
BREW	src/secp256k1/Makefile	/^BREW = \/usr\/local\/bin\/brew$/;"	m
BTC	src/qt/bitcoinunits.h	/^        BTC,$/;"	e	enum:BitcoinUnits::Unit
BTN_ABORT	src/ui_interface.h	/^        BTN_ABORT   = 0x00040000U, \/\/ QMessageBox::Abort$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_APPLY	src/ui_interface.h	/^        BTN_APPLY   = 0x02000000U, \/\/ QMessageBox::Apply$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CANCEL	src/ui_interface.h	/^        BTN_CANCEL  = 0x00400000U, \/\/ QMessageBox::Cancel$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CLOSE	src/ui_interface.h	/^        BTN_CLOSE   = 0x00200000U, \/\/ QMessageBox::Close$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_DISCARD	src/ui_interface.h	/^        BTN_DISCARD = 0x00800000U, \/\/ QMessageBox::Discard$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_HELP	src/ui_interface.h	/^        BTN_HELP    = 0x01000000U, \/\/ QMessageBox::Help$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_IGNORE	src/ui_interface.h	/^        BTN_IGNORE  = 0x00100000U, \/\/ QMessageBox::Ignore$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_MASK	src/ui_interface.h	/^        BTN_MASK = (BTN_OK | BTN_YES | BTN_NO | BTN_ABORT | BTN_RETRY | BTN_IGNORE |$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_NO	src/ui_interface.h	/^        BTN_NO      = 0x00010000U, \/\/ QMessageBox::No$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_OK	src/ui_interface.h	/^        BTN_OK      = 0x00000400U, \/\/ QMessageBox::Ok$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RESET	src/ui_interface.h	/^        BTN_RESET   = 0x04000000U, \/\/ QMessageBox::Reset$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RETRY	src/ui_interface.h	/^        BTN_RETRY   = 0x00080000U, \/\/ QMessageBox::Retry$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_YES	src/ui_interface.h	/^        BTN_YES     = 0x00004000U, \/\/ QMessageBox::Yes$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BUFFER_SIZE	src/bench/crypto_hash.cpp	/^static const uint64_t BUFFER_SIZE = 1000*1000;$/;"	v	file:
BUFFER_SIZE_LARGE	src/bench/chacha20.cpp	/^static const uint64_t BUFFER_SIZE_LARGE = 1024*1024;$/;"	v	file:
BUFFER_SIZE_LARGE	src/bench/poly1305.cpp	/^static constexpr uint64_t BUFFER_SIZE_LARGE = 1024*1024;$/;"	v	file:
BUFFER_SIZE_SMALL	src/bench/chacha20.cpp	/^static const uint64_t BUFFER_SIZE_SMALL = 256;$/;"	v	file:
BUFFER_SIZE_SMALL	src/bench/poly1305.cpp	/^static constexpr uint64_t BUFFER_SIZE_SMALL = 256;$/;"	v	file:
BUFFER_SIZE_TINY	src/bench/chacha20.cpp	/^static const uint64_t BUFFER_SIZE_TINY  = 64;$/;"	v	file:
BUFFER_SIZE_TINY	src/bench/poly1305.cpp	/^static constexpr uint64_t BUFFER_SIZE_TINY  = 64;$/;"	v	file:
BUILD	depends/Makefile	/^BUILD = $(shell .\/config.guess)$/;"	m
BUILD_DESC	src/clientversion.cpp	/^#define BUILD_DESC /;"	d	file:
BUILD_DESC_FROM_COMMIT	src/clientversion.cpp	/^#define BUILD_DESC_FROM_COMMIT(/;"	d	file:
BUILD_DESC_FROM_UNKNOWN	src/clientversion.cpp	/^#define BUILD_DESC_FROM_UNKNOWN(/;"	d	file:
BUILD_DESC_WITH_SUFFIX	src/clientversion.cpp	/^#define BUILD_DESC_WITH_SUFFIX(/;"	d	file:
BUILD_EXEEXT	src/secp256k1/Makefile	/^BUILD_EXEEXT = $/;"	m
BUILD_EXEEXT	src/univalue/Makefile	/^BUILD_EXEEXT = $/;"	m
BUILD_ID_SALT	depends/Makefile	/^BUILD_ID_SALT ?= salt$/;"	m
BUILD_OBJEXT	src/secp256k1/Makefile	/^BUILD_OBJEXT = $/;"	m
BUILD_SUFFIX	src/obj/build.h	/^#define BUILD_SUFFIX /;"	d
BYTES	test/functional/interface_rest.py	/^    BYTES = 2$/;"	v	class:RetType
BYTES_PER_PIXEL	src/qt/notificator.cpp	/^const int BYTES_PER_PIXEL = 4;$/;"	v
BackgroundCall	src/leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	src/leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
Backup	src/wallet/db.cpp	/^bool BerkeleyDatabase::Backup(const std::string& strDest)$/;"	f	class:BerkeleyDatabase
BackupSettings	src/qt/optionsmodel.cpp	/^static void BackupSettings(const fs::path& filename, const QSettings& src)$/;"	f	file:
BackupWallet	src/wallet/wallet.cpp	/^bool CWallet::BackupWallet(const std::string& strDest)$/;"	f	class:CWallet
BadBlock	src/test/validation_block_tests.cpp	/^const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)$/;"	f
BadInputOutpointIndex	test/functional/data/invalid_txs.py	/^class BadInputOutpointIndex(BadTxTemplate):$/;"	c
BadTxTemplate	test/functional/data/invalid_txs.py	/^class BadTxTemplate:$/;"	c
Balance	src/wallet/wallet.h	/^    struct Balance {$/;"	s	class:final
Ban	src/banman.cpp	/^void BanMan::Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)$/;"	f	class:BanMan
Ban	src/banman.cpp	/^void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)$/;"	f	class:BanMan
BanMan	src/banman.cpp	/^BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time)$/;"	f	class:BanMan
BanMan	src/banman.h	/^class BanMan$/;"	c
BanReason	src/addrdb.h	/^typedef enum BanReason$/;"	g
BanReason	src/addrdb.h	/^} BanReason;$/;"	t	typeref:enum:BanReason
BanReasonManuallyAdded	src/addrdb.h	/^    BanReasonManuallyAdded    = 2$/;"	e	enum:BanReason
BanReasonNodeMisbehaving	src/addrdb.h	/^    BanReasonNodeMisbehaving  = 1,$/;"	e	enum:BanReason
BanReasonUnknown	src/addrdb.h	/^    BanReasonUnknown          = 0,$/;"	e	enum:BanReason
BanTableModel	src/qt/bantablemodel.cpp	/^BanTableModel::BanTableModel(interfaces::Node& node, ClientModel *parent) :$/;"	f	class:BanTableModel
BanTableModel	src/qt/bantablemodel.h	/^class BanTableModel : public QAbstractTableModel$/;"	c
BanTablePriv	src/qt/bantablemodel.cpp	/^class BanTablePriv$/;"	c	file:
BannedListChanged	src/qt/clientmodel.cpp	/^static void BannedListChanged(ClientModel *clientmodel)$/;"	f	file:
BannedListChanged	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::BannedListChangedSig> BannedListChanged;$/;"	m	struct:UISignals	file:
BannedListChanged	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);$/;"	v
BannedListChanged	src/ui_interface.cpp	/^void CClientUIInterface::BannedListChanged() { return g_ui_signals.BannedListChanged(); }$/;"	f	class:CClientUIInterface
BannedNodeLessThan	src/qt/bantablemodel.h	/^    BannedNodeLessThan(int nColumn, Qt::SortOrder fOrder) :$/;"	f	class:BannedNodeLessThan
BannedNodeLessThan	src/qt/bantablemodel.h	/^class BannedNodeLessThan$/;"	c
BannedSetIsDirty	src/banman.cpp	/^bool BanMan::BannedSetIsDirty()$/;"	f	class:BanMan
Bantime	src/qt/bantablemodel.h	/^        Bantime = 1$/;"	e	enum:BanTableModel::ColumnIndex
Base58CheckEncode	src/bench/base58.cpp	/^static void Base58CheckEncode(benchmark::State& state)$/;"	f	file:
Base58Decode	src/bench/base58.cpp	/^static void Base58Decode(benchmark::State& state)$/;"	f	file:
Base58Encode	src/bench/base58.cpp	/^static void Base58Encode(benchmark::State& state)$/;"	f	file:
Base58Prefix	src/chainparams.h	/^    const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }$/;"	f	class:CChainParams
Base58Type	src/chainparams.h	/^    enum Base58Type {$/;"	g	class:CChainParams
BaseIndex	src/index/base.h	/^class BaseIndex : public CValidationInterface$/;"	c
BaseNode	test/functional/example_test.py	/^class BaseNode(P2PInterface):$/;"	c
BaseNode	test/functional/feature_assumevalid.py	/^class BaseNode(P2PInterface):$/;"	c
BaseNode	test/functional/p2p_sendheaders.py	/^class BaseNode(P2PInterface):$/;"	c
BaseParams	src/chainparamsbase.cpp	/^const CBaseChainParams& BaseParams()$/;"	f
BaseRequestHandler	src/bitcoin-cli.cpp	/^class BaseRequestHandler$/;"	c	file:
BaseSignatureChecker	src/script/interpreter.h	/^class BaseSignatureChecker$/;"	c
BaseSignatureCreator	src/script/sign.h	/^class BaseSignatureCreator {$/;"	c
BasicFilterElements	src/blockfilter.cpp	/^static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,$/;"	f	file:
BasicTestingSetup	src/test/setup_common.cpp	/^BasicTestingSetup::BasicTestingSetup(const std::string& chainName)$/;"	f	class:BasicTestingSetup
BasicTestingSetup	src/test/setup_common.h	/^struct BasicTestingSetup {$/;"	s
BatchWrite	src/coins.cpp	/^bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }$/;"	f	class:CCoinsView
BatchWrite	src/coins.cpp	/^bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }$/;"	f	class:CCoinsViewBacked
BatchWrite	src/coins.cpp	/^bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
BatchWrite	src/txdb.cpp	/^bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {$/;"	f	class:CCoinsViewDB
Bech32Decode	src/bench/bech32.cpp	/^static void Bech32Decode(benchmark::State& state)$/;"	f	file:
Bech32Encode	src/bench/bech32.cpp	/^static void Bech32Encode(benchmark::State& state)$/;"	f	file:
Bech32HRP	src/chainparams.h	/^    const std::string& Bech32HRP() const { return bech32_hrp; }$/;"	f	class:CChainParams
BeforeFile	src/leveldb/db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
Bench	src/bench/bench.h	/^    struct Bench {$/;"	s	class:benchmark::BenchRunner
BenchFunction	src/bench/bench.h	/^typedef std::function<void(State&)> BenchFunction;$/;"	t	namespace:benchmark
BenchLockedPool	src/bench/lockedpool.cpp	/^static void BenchLockedPool(benchmark::State& state)$/;"	f	file:
BenchRunner	src/bench/bench.cpp	/^benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func, uint64_t num_iters_for_one_second)$/;"	f	class:benchmark::BenchRunner
BenchRunner	src/bench/bench.h	/^class BenchRunner$/;"	c	namespace:benchmark
Benchmark	src/leveldb/db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	src/leveldb/db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	src/leveldb/doc/bench/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
BenchmarkMap	src/bench/bench.h	/^    typedef std::map<std::string, Bench> BenchmarkMap;$/;"	t	class:benchmark::BenchRunner
BerkeleyBatch	src/wallet/db.cpp	/^BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr)$/;"	f	class:BerkeleyBatch
BerkeleyBatch	src/wallet/db.h	/^class BerkeleyBatch$/;"	c
BerkeleyDatabase	src/wallet/db.h	/^    BerkeleyDatabase() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)$/;"	f	class:BerkeleyDatabase
BerkeleyDatabase	src/wallet/db.h	/^    BerkeleyDatabase(std::shared_ptr<BerkeleyEnvironment> env, std::string filename) :$/;"	f	class:BerkeleyDatabase
BerkeleyDatabase	src/wallet/db.h	/^class BerkeleyDatabase$/;"	c
BerkeleyEnvironment	src/wallet/db.cpp	/^BerkeleyEnvironment::BerkeleyEnvironment()$/;"	f	class:BerkeleyEnvironment
BerkeleyEnvironment	src/wallet/db.cpp	/^BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir_path.string())$/;"	f	class:BerkeleyEnvironment
BerkeleyEnvironment	src/wallet/db.h	/^class BerkeleyEnvironment$/;"	c
Between	src/leveldb/db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	src/leveldb/table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigEndian	src/serialize.h	/^    explicit BigEndian(I& val) : m_val(val)$/;"	f	class:BigEndian
BigEndian	src/serialize.h	/^class BigEndian$/;"	c
BigString	src/leveldb/db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Bind	src/net.cpp	/^bool CConnman::Bind(const CService &addr, unsigned int flags) {$/;"	f	class:CConnman
BindFlags	src/net.cpp	/^enum BindFlags {$/;"	g	file:
BindListenPort	src/net.cpp	/^bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)$/;"	f	class:CConnman
BindWallet	src/wallet/wallet.h	/^    void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
BitStreamReader	src/streams.h	/^    explicit BitStreamReader(IStream& istream) : m_istream(istream) {}$/;"	f	class:BitStreamReader
BitStreamReader	src/streams.h	/^class BitStreamReader$/;"	c
BitStreamWriter	src/streams.h	/^    explicit BitStreamWriter(OStream& ostream) : m_ostream(ostream) {}$/;"	f	class:BitStreamWriter
BitStreamWriter	src/streams.h	/^class BitStreamWriter$/;"	c
BitcoinAddressCheckValidator	src/qt/bitcoinaddressvalidator.cpp	/^BitcoinAddressCheckValidator::BitcoinAddressCheckValidator(QObject *parent) :$/;"	f	class:BitcoinAddressCheckValidator
BitcoinAddressCheckValidator	src/qt/bitcoinaddressvalidator.h	/^class BitcoinAddressCheckValidator : public QValidator$/;"	c
BitcoinAddressEntryValidator	src/qt/bitcoinaddressvalidator.cpp	/^BitcoinAddressEntryValidator::BitcoinAddressEntryValidator(QObject *parent) :$/;"	f	class:BitcoinAddressEntryValidator
BitcoinAddressEntryValidator	src/qt/bitcoinaddressvalidator.h	/^class BitcoinAddressEntryValidator : public QValidator$/;"	c
BitcoinAmountField	src/qt/bitcoinamountfield.cpp	/^BitcoinAmountField::BitcoinAmountField(QWidget *parent) :$/;"	f	class:BitcoinAmountField
BitcoinAmountField	src/qt/bitcoinamountfield.h	/^class BitcoinAmountField: public QWidget$/;"	c
BitcoinApplication	src/qt/bitcoin.cpp	/^BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char **argv):$/;"	f	class:BitcoinApplication
BitcoinApplication	src/qt/bitcoin.h	/^class BitcoinApplication: public QApplication$/;"	c
BitcoinCore	src/qt/bitcoin.cpp	/^BitcoinCore::BitcoinCore(interfaces::Node& node) :$/;"	f	class:BitcoinCore
BitcoinCore	src/qt/bitcoin.h	/^class BitcoinCore: public QObject$/;"	c
BitcoinGUI	src/qt/bitcoingui.cpp	/^BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :$/;"	f	class:BitcoinGUI
BitcoinGUI	src/qt/bitcoingui.h	/^class BitcoinGUI : public QMainWindow$/;"	c
BitcoinRPC	contrib/linearize/linearize-hashes.py	/^class BitcoinRPC:$/;"	c
BitcoinTestFramework	test/functional/create_cache.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/example_test.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_assumevalid.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_bip68_sequence.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_block.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_blocksdir.py	/^from test_framework.test_framework import BitcoinTestFramework, initialize_datadir$/;"	i
BitcoinTestFramework	test/functional/feature_cltv.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_config_args.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_csv_activation.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_dbcrash.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_dersig.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_fee_estimation.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_filelock.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_help.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_includeconf.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_logging.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_maxuploadtarget.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_minchainwork.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_notifications.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_nulldummy.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_proxy.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_pruning.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_rbf.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_reindex.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_segwit.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_shutdown.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_uacomment.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/feature_versionbits_warning.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/interface_bitcoin_cli.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/interface_http.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/interface_rest.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/interface_rpc.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/interface_zmq.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mempool_accept.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mempool_limit.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mempool_packages.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mempool_persist.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mempool_reorg.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mempool_resurrect.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mempool_spend_coinbase.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mining_basic.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mining_getblocktemplate_longpoll.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/mining_prioritisetransaction.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_blocksonly.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_compactblocks.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_disconnect_ban.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_feefilter.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_fingerprint.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_invalid_block.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_invalid_locator.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_invalid_messages.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_invalid_tx.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_leak.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_leak_tx.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_mempool.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_node_network_limited.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_segwit.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_sendheaders.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_timeouts.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/p2p_unrequested_blocks.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_bind.py	/^from test_framework.test_framework import BitcoinTestFramework, SkipTest$/;"	i
BitcoinTestFramework	test/functional/rpc_blockchain.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_createmultisig.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_decodescript.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_deprecated.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_deriveaddresses.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_fundrawtransaction.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_getblockfilter.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_getblockstats.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_getchaintips.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_help.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_invalidateblock.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_misc.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_named_arguments.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_net.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_preciousblock.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_psbt.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_rawtransaction.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_scantxoutset.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_signmessage.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_signrawtransaction.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_txoutproof.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_uptime.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/rpc_users.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/test_framework/test_framework.py	/^class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):$/;"	c
BitcoinTestFramework	test/functional/tool_wallet.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_abandonconflict.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_address_types.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_backup.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_balance.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_basic.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_bumpfee.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_coinbase_category.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_create_tx.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_createwallet.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_disable.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_dump.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_encryption.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_fallbackfee.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_groups.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_hd.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_import_rescan.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_import_with_label.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_importmulti.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_importprunedfunds.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_keypool.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_keypool_topup.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_labels.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_listreceivedby.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_listsinceblock.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_listtransactions.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_multiwallet.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_resendwallettransactions.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_txn_clone.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_txn_doublespend.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestFramework	test/functional/wallet_zapwallettxes.py	/^from test_framework.test_framework import BitcoinTestFramework$/;"	i
BitcoinTestMetaClass	test/functional/test_framework/test_framework.py	/^class BitcoinTestMetaClass(type):$/;"	c
BitcoinUnit	src/qt/bitcoinunits.h	/^typedef BitcoinUnits::Unit BitcoinUnit;$/;"	t
BitcoinUnits	src/qt/bitcoinunits.cpp	/^BitcoinUnits::BitcoinUnits(QObject *parent):$/;"	f	class:BitcoinUnits
BitcoinUnits	src/qt/bitcoinunits.h	/^class BitcoinUnits: public QAbstractListModel$/;"	c
Block	src/leveldb/table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	src/leveldb/table/block.h	/^class Block {$/;"	c	namespace:leveldb
Block	src/test/validation_block_tests.cpp	/^std::shared_ptr<CBlock> Block(const uint256& prev_hash)$/;"	f
BlockAssembler	src/miner.cpp	/^BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions()) {}$/;"	f	class:BlockAssembler
BlockAssembler	src/miner.cpp	/^BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)$/;"	f	class:BlockAssembler
BlockAssembler	src/miner.h	/^class BlockAssembler$/;"	c
BlockBuildMerkleTree	src/test/merkle_tests.cpp	/^static uint256 BlockBuildMerkleTree(const CBlock& block, bool* fMutated, std::vector<uint256>& vMerkleTree)$/;"	f	file:
BlockBuilder	src/leveldb/table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	src/leveldb/table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockChecked	src/net_processing.cpp	/^void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {$/;"	f	class:PeerLogicValidation
BlockChecked	src/validationinterface.cpp	/^    boost::signals2::scoped_connection BlockChecked;$/;"	m	struct:ValidationInterfaceConnections	file:
BlockChecked	src/validationinterface.cpp	/^    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;$/;"	m	struct:MainSignalsInstance	file:
BlockChecked	src/validationinterface.cpp	/^void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {$/;"	f	class:CMainSignals
BlockChecked	src/validationinterface.h	/^    virtual void BlockChecked(const CBlock&, const CValidationState&) {}$/;"	f	class:CValidationInterface
BlockConnected	src/index/base.cpp	/^void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,$/;"	f	class:BaseIndex
BlockConnected	src/interfaces/chain.h	/^        virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted) {}$/;"	f	class:interfaces::Chain::Notifications
BlockConnected	src/net_processing.cpp	/^void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {$/;"	f	class:PeerLogicValidation
BlockConnected	src/validation.cpp	/^    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {$/;"	f	class:ConnectTrace
BlockConnected	src/validationinterface.cpp	/^    boost::signals2::scoped_connection BlockConnected;$/;"	m	struct:ValidationInterfaceConnections	file:
BlockConnected	src/validationinterface.cpp	/^    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;$/;"	m	struct:MainSignalsInstance	file:
BlockConnected	src/validationinterface.cpp	/^void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {$/;"	f	class:CMainSignals
BlockConnected	src/validationinterface.h	/^    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}$/;"	f	class:CValidationInterface
BlockConnected	src/wallet/wallet.cpp	/^void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) {$/;"	f	class:CWallet
BlockConnected	src/zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)$/;"	f	class:CZMQNotificationInterface
BlockConstructor	src/leveldb/table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	src/leveldb/table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
BlockContents	src/leveldb/table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockDataCopier	contrib/linearize/linearize-data.py	/^class BlockDataCopier:$/;"	c
BlockDisconnected	src/interfaces/chain.h	/^        virtual void BlockDisconnected(const CBlock& block) {}$/;"	f	class:interfaces::Chain::Notifications
BlockDisconnected	src/validationinterface.cpp	/^    boost::signals2::scoped_connection BlockDisconnected;$/;"	m	struct:ValidationInterfaceConnections	file:
BlockDisconnected	src/validationinterface.cpp	/^    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;$/;"	m	struct:MainSignalsInstance	file:
BlockDisconnected	src/validationinterface.cpp	/^void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {$/;"	f	class:CMainSignals
BlockDisconnected	src/validationinterface.h	/^    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}$/;"	f	class:CValidationInterface
BlockDisconnected	src/wallet/wallet.cpp	/^void CWallet::BlockDisconnected(const CBlock& block) {$/;"	f	class:CWallet
BlockDisconnected	src/zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)$/;"	f	class:CZMQNotificationInterface
BlockExtent	contrib/linearize/linearize-data.py	/^BlockExtent = namedtuple('BlockExtent', ['fn', 'offset', 'inhdr', 'blkhdr', 'size'])$/;"	v
BlockFileSeq	src/validation.cpp	/^static FlatFileSeq BlockFileSeq()$/;"	f	file:
BlockFilter	src/blockfilter.cpp	/^BlockFilter::BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo)$/;"	f	class:BlockFilter
BlockFilter	src/blockfilter.cpp	/^BlockFilter::BlockFilter(BlockFilterType filter_type, const uint256& block_hash,$/;"	f	class:BlockFilter
BlockFilter	src/blockfilter.h	/^class BlockFilter$/;"	c
BlockFilterIndex	src/index/blockfilterindex.cpp	/^BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,$/;"	f	class:BlockFilterIndex
BlockFilterType	src/blockfilter.h	/^enum class BlockFilterType : uint8_t$/;"	c
BlockFilterTypeByName	src/blockfilter.cpp	/^bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type) {$/;"	f
BlockFilterTypeName	src/blockfilter.cpp	/^const std::string& BlockFilterTypeName(BlockFilterType filter_type)$/;"	f
BlockFunction	src/leveldb/table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon17	file:
BlockGetMerkleBranch	src/test/merkle_tests.cpp	/^static std::vector<uint256> BlockGetMerkleBranch(const CBlock& block, const std::vector<uint256>& vMerkleTree, int nIndex)$/;"	f	file:
BlockHandle	src/leveldb/table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	src/leveldb/table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockHasher	src/validation.h	/^struct BlockHasher$/;"	s
BlockMap	src/validation.h	/^typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;$/;"	t
BlockMerkleBranch	src/test/merkle_tests.cpp	/^static std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)$/;"	f	file:
BlockMerkleRoot	src/consensus/merkle.cpp	/^uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BlockNotifyCallback	src/init.cpp	/^static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockNotifyGenesisWait	src/init.cpp	/^static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockReader	src/leveldb/table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BlockSource	src/qt/clientmodel.h	/^enum class BlockSource {$/;"	c
BlockSpan	src/policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::BlockSpan() const$/;"	f	class:CBlockPolicyEstimator
BlockTipChanged	src/qt/clientmodel.cpp	/^static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int height, int64_t blockTime, double verificationProgress, bool fHeader)$/;"	f	file:
BlockTransactions	src/blockencodings.h	/^    BlockTransactions() {}$/;"	f	class:BlockTransactions
BlockTransactions	src/blockencodings.h	/^    explicit BlockTransactions(const BlockTransactionsRequest& req) :$/;"	f	class:BlockTransactions
BlockTransactions	src/blockencodings.h	/^class BlockTransactions {$/;"	c
BlockTransactions	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
BlockTransactions	test/functional/test_framework/messages.py	/^class BlockTransactions:$/;"	c
BlockTransactionsRequest	src/blockencodings.h	/^class BlockTransactionsRequest {$/;"	c
BlockTransactionsRequest	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
BlockTransactionsRequest	test/functional/test_framework/messages.py	/^class BlockTransactionsRequest:$/;"	c
BlockTxCount	src/blockencodings.h	/^    size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }$/;"	f	class:CBlockHeaderAndShortTxIDs
BlockUntilSyncedToCurrentChain	src/index/base.cpp	/^bool BaseIndex::BlockUntilSyncedToCurrentChain()$/;"	f	class:BaseIndex
BlockUntilSyncedToCurrentChain	src/wallet/wallet.cpp	/^void CWallet::BlockUntilSyncedToCurrentChain() {$/;"	f	class:CWallet
BlockWitnessMerkleRoot	src/consensus/merkle.cpp	/^uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BlockchainTest	test/functional/rpc_blockchain.py	/^class BlockchainTest(BitcoinTestFramework):$/;"	c
BlocksdirTest	test/functional/feature_blocksdir.py	/^class BlocksdirTest(BitcoinTestFramework):$/;"	c
BloomFilterPolicy	src/leveldb/util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
BloomFilterPolicy	src/leveldb/util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon3	file:
BloomHash	src/leveldb/util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon3
BloomTest	src/leveldb/util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) { }$/;"	f	class:leveldb::BloomTest
BloomTest	src/leveldb/util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb	file:
BnBExhaustion	src/bench/coin_selection.cpp	/^static void BnBExhaustion(benchmark::State& state)$/;"	f	file:
BroadcastTransaction	src/node/transaction.cpp	/^TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)$/;"	f
BrokenCTransaction	test/functional/p2p_segwit.py	/^        class BrokenCTransaction(CTransaction):$/;"	c	function:SegWitTest.test_witness_input_length
Build	src/leveldb/db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
Build	src/leveldb/db/fault_injection_test.cc	/^  void Build(int start_idx, int num_vals) {$/;"	f	class:leveldb::FaultInjectionTest
Build	src/leveldb/util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildBatchGroup	src/leveldb/db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildBlockTestCase	src/test/blockencodings_tests.cpp	/^static CBlock BuildBlockTestCase() {$/;"	f	file:
BuildChain	src/test/blockfilter_index_tests.cpp	/^static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,$/;"	f	file:
BuildChain	src/test/validation_block_tests.cpp	/^void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)$/;"	f
BuildCreditingTransaction	src/bench/verify_script.cpp	/^static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)$/;"	f	file:
BuildCreditingTransaction	src/test/script_tests.cpp	/^CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0)$/;"	f
BuildHashedSet	src/blockfilter.cpp	/^std::vector<uint64_t> GCSFilter::BuildHashedSet(const ElementSet& elements) const$/;"	f	class:GCSFilter
BuildParams	src/blockfilter.cpp	/^bool BlockFilter::BuildParams(GCSFilter::Params& params) const$/;"	f	class:BlockFilter
BuildSkip	src/chain.cpp	/^void CBlockIndex::BuildSkip()$/;"	f	class:CBlockIndex
BuildSpendingTransaction	build_msvc/testconsensus/testconsensus.cpp	/^CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, int nValue = 0)$/;"	f
BuildSpendingTransaction	src/bench/verify_script.cpp	/^static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)$/;"	f	file:
BuildSpendingTransaction	src/test/script_tests.cpp	/^CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CTransaction& txCredit)$/;"	f
BuildTable	src/leveldb/db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
BuildTxs	src/test/sigopcount_tests.cpp	/^static void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& witness)$/;"	f	file:
Builder	src/leveldb/db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	src/leveldb/db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BumpFee	src/qt/test/wallettests.cpp	/^void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, std::string expectError, bool cancel)$/;"	f	namespace:__anon63
BumpFeeTest	test/functional/wallet_bumpfee.py	/^class BumpFeeTest(BitcoinTestFramework):$/;"	c
BuriedForkDescPushBack	src/rpc/blockchain.cpp	/^static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height)$/;"	f	file:
BySmallestKey	src/leveldb/db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
ByteSize	src/leveldb/db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ByteVectorHash	src/util/bytevectorhash.cpp	/^ByteVectorHash::ByteVectorHash()$/;"	f	class:ByteVectorHash
BytesIO	test/functional/feature_cltv.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/feature_csv_activation.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/feature_segwit.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/interface_rest.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/interface_zmq.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/mempool_accept.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/rpc_decodescript.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/rpc_rawtransaction.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/test_framework/blocktools.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/test_framework/messages.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/test_framework/mininode.py	/^from io import BytesIO$/;"	i
BytesIO	test/functional/wallet_listtransactions.py	/^from io import BytesIO$/;"	i
BytesToKeySHA512AES	src/wallet/crypter.cpp	/^int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const$/;"	f	class:CCrypter
BytewiseComparator	src/leveldb/util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	src/leveldb/util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
BytewiseComparatorImpl	src/leveldb/util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon7	file:
CACHED_INVALID	src/consensus/validation.h	/^    CACHED_INVALID,          \/\/!< this object was cached as being invalid, but we don't know why$/;"	m	class:ValidationInvalidReason
CADDR_TIME_VERSION	src/version.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CAddrDB	src/addrdb.cpp	/^CAddrDB::CAddrDB()$/;"	f	class:CAddrDB
CAddrDB	src/addrdb.h	/^class CAddrDB$/;"	c
CAddrInfo	src/addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	src/addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	src/addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	src/addrman.h	/^    CAddrMan()$/;"	f	class:CAddrMan
CAddrMan	src/addrman.h	/^class CAddrMan$/;"	c
CAddrManCorrupted	src/test/net_tests.cpp	/^class CAddrManCorrupted : public CAddrManSerializationMock$/;"	c	file:
CAddrManSerializationMock	src/test/net_tests.cpp	/^class CAddrManSerializationMock : public CAddrMan$/;"	c	file:
CAddrManTest	src/test/addrman_tests.cpp	/^    explicit CAddrManTest(bool makeDeterministic = true)$/;"	f	class:CAddrManTest
CAddrManTest	src/test/addrman_tests.cpp	/^class CAddrManTest : public CAddrMan$/;"	c	file:
CAddrManUncorrupted	src/test/net_tests.cpp	/^class CAddrManUncorrupted : public CAddrManSerializationMock$/;"	c	file:
CAddress	src/protocol.cpp	/^CAddress::CAddress() : CService()$/;"	f	class:CAddress
CAddress	src/protocol.cpp	/^CAddress::CAddress(CService ipIn, ServiceFlags nServicesIn) : CService(ipIn)$/;"	f	class:CAddress
CAddress	src/protocol.h	/^class CAddress : public CService$/;"	c
CAddress	test/functional/rpc_net.py	/^from test_framework.messages import CAddress, msg_addr, NODE_NETWORK, NODE_WITNESS$/;"	i
CAddress	test/functional/test_framework/messages.py	/^class CAddress:$/;"	c
CAddressBookData	src/wallet/wallet.h	/^    CAddressBookData() : purpose("unknown") {}$/;"	f	class:CAddressBookData
CAddressBookData	src/wallet/wallet.h	/^class CAddressBookData$/;"	c
CAmount	src/amount.h	/^typedef int64_t CAmount;$/;"	t
CAutoFile	src/streams.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	src/streams.h	/^class CAutoFile$/;"	c
CBCDecrypt	src/crypto/aes.cpp	/^static int CBCDecrypt(const T& dec, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)$/;"	f	file:
CBCEncrypt	src/crypto/aes.cpp	/^static int CBCEncrypt(const T& enc, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)$/;"	f	file:
CBanDB	src/addrdb.cpp	/^CBanDB::CBanDB(fs::path ban_list_path) : m_ban_list_path(std::move(ban_list_path))$/;"	f	class:CBanDB
CBanDB	src/addrdb.h	/^class CBanDB$/;"	c
CBanEntry	src/addrdb.h	/^    CBanEntry()$/;"	f	class:CBanEntry
CBanEntry	src/addrdb.h	/^    explicit CBanEntry(int64_t nCreateTimeIn)$/;"	f	class:CBanEntry
CBanEntry	src/addrdb.h	/^    explicit CBanEntry(int64_t n_create_time_in, BanReason ban_reason_in) : CBanEntry(n_create_time_in)$/;"	f	class:CBanEntry
CBanEntry	src/addrdb.h	/^class CBanEntry$/;"	c
CBaseChainParams	src/chainparamsbase.h	/^    CBaseChainParams(const std::string& data_dir, int rpc_port) : nRPCPort(rpc_port), strDataDir(data_dir) {}$/;"	f	class:CBaseChainParams
CBaseChainParams	src/chainparamsbase.h	/^class CBaseChainParams$/;"	c
CBasicKeyStore	src/keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBitcoinLevelDBLogger	src/dbwrapper.cpp	/^class CBitcoinLevelDBLogger : public leveldb::Logger {$/;"	c	file:
CBlock	src/primitives/block.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	src/primitives/block.h	/^    CBlock(const CBlockHeader &header)$/;"	f	class:CBlock
CBlock	src/primitives/block.h	/^class CBlock : public CBlockHeader$/;"	c
CBlock	test/functional/feature_pruning.py	/^from test_framework.messages import CBlock, ToHex$/;"	i
CBlock	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
CBlock	test/functional/test_framework/messages.py	/^class CBlock(CBlockHeader):$/;"	c
CBlockFileInfo	src/chain.h	/^     CBlockFileInfo() {$/;"	f	class:CBlockFileInfo
CBlockFileInfo	src/chain.h	/^class CBlockFileInfo$/;"	c
CBlockHeader	src/primitives/block.h	/^    CBlockHeader()$/;"	f	class:CBlockHeader
CBlockHeader	src/primitives/block.h	/^class CBlockHeader$/;"	c
CBlockHeader	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
CBlockHeader	test/functional/p2p_unrequested_blocks.py	/^from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv$/;"	i
CBlockHeader	test/functional/test_framework/messages.py	/^class CBlockHeader:$/;"	c
CBlockHeaderAndShortTxIDs	src/blockencodings.cpp	/^CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	src/blockencodings.h	/^    CBlockHeaderAndShortTxIDs() {}$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	src/blockencodings.h	/^class CBlockHeaderAndShortTxIDs {$/;"	c
CBlockIndex	src/chain.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	src/chain.h	/^    explicit CBlockIndex(const CBlockHeader& block)$/;"	f	class:CBlockIndex
CBlockIndex	src/chain.h	/^class CBlockIndex$/;"	c
CBlockIndexWorkComparator	src/validation.cpp	/^    struct CBlockIndexWorkComparator$/;"	s	namespace:__anon49	file:
CBlockLocator	src/primitives/block.h	/^    CBlockLocator() {}$/;"	f	struct:CBlockLocator
CBlockLocator	src/primitives/block.h	/^    explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}$/;"	f	struct:CBlockLocator
CBlockLocator	src/primitives/block.h	/^struct CBlockLocator$/;"	s
CBlockLocator	test/functional/test_framework/messages.py	/^class CBlockLocator:$/;"	c
CBlockPolicyEstimator	src/policy/fees.cpp	/^CBlockPolicyEstimator::CBlockPolicyEstimator()$/;"	f	class:CBlockPolicyEstimator
CBlockPolicyEstimator	src/policy/fees.h	/^class CBlockPolicyEstimator$/;"	c	class:FeeEstimateHorizon
CBlockReject	src/net_processing.cpp	/^struct CBlockReject {$/;"	s	namespace:__anon89	file:
CBlockTemplate	src/miner.h	/^struct CBlockTemplate$/;"	s
CBlockTreeDB	src/txdb.cpp	/^CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.IsArgSet("-blocksdir") ? GetDataDir() \/ "blocks" \/ "index" : GetBlocksDir() \/ "index", nCacheSize, fMemory, fWipe) {$/;"	f	class:CBlockTreeDB
CBlockTreeDB	src/txdb.h	/^class CBlockTreeDB : public CDBWrapper$/;"	c
CBlockUndo	src/undo.h	/^class CBlockUndo$/;"	c
CBloomFilter	src/bloom.cpp	/^CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweakIn, unsigned char nFlagsIn) :$/;"	f	class:CBloomFilter
CBloomFilter	src/bloom.h	/^    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}$/;"	f	class:CBloomFilter
CBloomFilter	src/bloom.h	/^class CBloomFilter$/;"	c
CBrokenBlock	test/functional/feature_block.py	/^class CBrokenBlock(CBlock):$/;"	c
CBufferedFile	src/streams.h	/^    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :$/;"	f	class:CBufferedFile
CBufferedFile	src/streams.h	/^class CBufferedFile$/;"	c
CC	Makefile	/^CC = \/usr\/local\/bin\/ccache gcc$/;"	m
CC	doc/man/Makefile	/^CC = \/usr\/local\/bin\/ccache gcc$/;"	m
CC	src/Makefile	/^CC = \/usr\/local\/bin\/ccache gcc$/;"	m
CC	src/secp256k1/Makefile	/^CC = gcc$/;"	m
CC	src/univalue/Makefile	/^CC = gcc$/;"	m
CCACHE	Makefile	/^CCACHE = \/usr\/local\/bin\/ccache$/;"	m
CCACHE	doc/man/Makefile	/^CCACHE = \/usr\/local\/bin\/ccache$/;"	m
CCACHE	src/Makefile	/^CCACHE = \/usr\/local\/bin\/ccache$/;"	m
CCAS	src/secp256k1/Makefile	/^CCAS = gcc$/;"	m
CCASCOMPILE	src/secp256k1/Makefile	/^CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)$/;"	m
CCASDEPMODE	src/secp256k1/Makefile	/^CCASDEPMODE = depmode=gcc3$/;"	m
CCASFLAGS	src/secp256k1/Makefile	/^CCASFLAGS = -g -O2$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	doc/man/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	src/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	src/secp256k1/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	src/univalue/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	src/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	src/secp256k1/Makefile	/^CCLD = $(CC)$/;"	m
CC_FOR_BUILD	src/secp256k1/Makefile	/^CC_FOR_BUILD = gcc$/;"	m
CChain	src/chain.h	/^class CChain {$/;"	c
CChainParams	src/chainparams.h	/^    CChainParams() {}$/;"	f	class:CChainParams
CChainParams	src/chainparams.h	/^class CChainParams$/;"	c
CChainState	src/validation.cpp	/^class CChainState {$/;"	c	file:
CCheckQueue	src/checkqueue.h	/^    explicit CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), nBatchSize(nBatchSizeIn) {}$/;"	f	class:CCheckQueue
CCheckQueue	src/checkqueue.h	/^class CCheckQueue$/;"	c
CCheckQueueControl	src/checkqueue.h	/^    explicit CCheckQueueControl(CCheckQueue<T> * const pqueueIn) : pqueue(pqueueIn), fDone(false)$/;"	f	class:CCheckQueueControl
CCheckQueueControl	src/checkqueue.h	/^class CCheckQueueControl$/;"	c
CCheckQueueSpeedPrevectorJob	src/bench/checkqueue.cpp	/^static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)$/;"	f	file:
CCheckpointData	src/chainparams.h	/^struct CCheckpointData {$/;"	s
CClientUIInterface	src/ui_interface.h	/^class CClientUIInterface$/;"	c
CCoin	src/rest.cpp	/^    CCoin() : nHeight(0) {}$/;"	f	struct:CCoin
CCoin	src/rest.cpp	/^    explicit CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}$/;"	f	struct:CCoin
CCoin	src/rest.cpp	/^struct CCoin {$/;"	s	file:
CCoinControl	src/wallet/coincontrol.h	/^    CCoinControl()$/;"	f	class:CCoinControl
CCoinControl	src/wallet/coincontrol.h	/^class CCoinControl$/;"	c
CCoinControlWidgetItem	src/qt/coincontroldialog.h	/^    explicit CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	src/qt/coincontroldialog.h	/^    explicit CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	src/qt/coincontroldialog.h	/^    explicit CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	src/qt/coincontroldialog.h	/^class CCoinControlWidgetItem : public QTreeWidgetItem$/;"	c
CCoins	src/txdb.cpp	/^    CCoins() : fCoinBase(false), vout(0), nHeight(0) { }$/;"	f	class:__anon122::CCoins
CCoins	src/txdb.cpp	/^class CCoins$/;"	c	namespace:__anon122	file:
CCoinsCacheEntry	src/coins.h	/^    CCoinsCacheEntry() : flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	src/coins.h	/^    explicit CCoinsCacheEntry(Coin&& coin_) : coin(std::move(coin_)), flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	src/coins.h	/^struct CCoinsCacheEntry$/;"	s
CCoinsCaching	src/bench/ccoins_caching.cpp	/^static void CCoinsCaching(benchmark::State& state)$/;"	f	file:
CCoinsMap	src/coins.h	/^typedef std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher> CCoinsMap;$/;"	t
CCoinsStats	src/rpc/blockchain.cpp	/^    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nBogoSize(0), nDiskSize(0), nTotalAmount(0) {}$/;"	f	struct:CCoinsStats
CCoinsStats	src/rpc/blockchain.cpp	/^struct CCoinsStats$/;"	s	file:
CCoinsView	src/coins.h	/^class CCoinsView$/;"	c
CCoinsViewBacked	src/coins.cpp	/^CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }$/;"	f	class:CCoinsViewBacked
CCoinsViewBacked	src/coins.h	/^class CCoinsViewBacked : public CCoinsView$/;"	c
CCoinsViewCache	src/coins.cpp	/^CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}$/;"	f	class:CCoinsViewCache
CCoinsViewCache	src/coins.h	/^class CCoinsViewCache : public CCoinsViewBacked$/;"	c
CCoinsViewCacheTest	src/test/coins_tests.cpp	/^    explicit CCoinsViewCacheTest(CCoinsView* _base) : CCoinsViewCache(_base) {}$/;"	f	class:__anon60::CCoinsViewCacheTest
CCoinsViewCacheTest	src/test/coins_tests.cpp	/^class CCoinsViewCacheTest : public CCoinsViewCache$/;"	c	namespace:__anon60	file:
CCoinsViewCursor	src/coins.h	/^    CCoinsViewCursor(const uint256 &hashBlockIn): hashBlock(hashBlockIn) {}$/;"	f	class:CCoinsViewCursor
CCoinsViewCursor	src/coins.h	/^class CCoinsViewCursor$/;"	c
CCoinsViewDB	src/txdb.cpp	/^CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() \/ "chainstate", nCacheSize, fMemory, fWipe, true)$/;"	f	class:CCoinsViewDB
CCoinsViewDBCursor	src/txdb.h	/^    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):$/;"	f	class:CCoinsViewDBCursor
CCoinsViewDBCursor	src/txdb.h	/^class CCoinsViewDBCursor: public CCoinsViewCursor$/;"	c
CCoinsViewErrorCatcher	src/init.cpp	/^    explicit CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}$/;"	f	class:final
CCoinsViewMemPool	src/txmempool.cpp	/^CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }$/;"	f	class:CCoinsViewMemPool
CCoinsViewMemPool	src/txmempool.h	/^class CCoinsViewMemPool : public CCoinsViewBacked$/;"	c
CCoinsViewTest	src/test/coins_tests.cpp	/^class CCoinsViewTest : public CCoinsView$/;"	c	namespace:__anon60	file:
CCombinedBan	src/qt/bantablemodel.h	/^struct CCombinedBan {$/;"	s
CCompactSize	src/serialize.h	/^    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }$/;"	f	class:CCompactSize
CCompactSize	src/serialize.h	/^class CCompactSize$/;"	c
CConnectionFailed	src/bitcoin-cli.cpp	/^    explicit inline CConnectionFailed(const std::string& msg) :$/;"	f	class:CConnectionFailed
CConnectionFailed	src/bitcoin-cli.cpp	/^class CConnectionFailed : public std::runtime_error$/;"	c	file:
CConnman	src/net.cpp	/^CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSeed1(nSeed1In)$/;"	f	class:CConnman
CConnman	src/net.h	/^class CConnman$/;"	c
CConnmanTest	src/test/denialofservice_tests.cpp	/^struct CConnmanTest : public CConnman {$/;"	s	file:
CCriticalSection	src/sync.h	/^typedef AnnotatedMixin<std::recursive_mutex> CCriticalSection;$/;"	t
CCrypter	src/wallet/crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	src/wallet/crypter.h	/^class CCrypter$/;"	c
CCryptoKeyStore	src/wallet/crypter.h	/^    CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)$/;"	f	class:CCryptoKeyStore
CCryptoKeyStore	src/wallet/crypter.h	/^class CCryptoKeyStore : public CBasicKeyStore$/;"	c
CDBBatch	src/dbwrapper.h	/^    explicit CDBBatch(const CDBWrapper &_parent) : parent(_parent), ssKey(SER_DISK, CLIENT_VERSION), ssValue(SER_DISK, CLIENT_VERSION), size_estimate(0) { };$/;"	f	class:CDBBatch
CDBBatch	src/dbwrapper.h	/^class CDBBatch$/;"	c
CDBIterator	src/dbwrapper.h	/^    CDBIterator(const CDBWrapper &_parent, leveldb::Iterator *_piter) :$/;"	f	class:CDBIterator
CDBIterator	src/dbwrapper.h	/^class CDBIterator$/;"	c
CDBWrapper	src/dbwrapper.cpp	/^CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)$/;"	f	class:CDBWrapper
CDBWrapper	src/dbwrapper.h	/^class CDBWrapper$/;"	c
CDataStream	src/streams.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	src/streams.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	src/streams.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	src/streams.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	src/streams.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	src/streams.h	/^    CDataStream(int nTypeIn, int nVersionIn, Args&&... args)$/;"	f	class:CDataStream
CDataStream	src/streams.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	src/streams.h	/^class CDataStream$/;"	c
CDiskBlockIndex	src/chain.h	/^    CDiskBlockIndex() {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	src/chain.h	/^    explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	src/chain.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskTxPos	src/index/txindex.cpp	/^    CDiskTxPos() {$/;"	f	struct:CDiskTxPos
CDiskTxPos	src/index/txindex.cpp	/^    CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {$/;"	f	struct:CDiskTxPos
CDiskTxPos	src/index/txindex.cpp	/^struct CDiskTxPos : public FlatFilePos$/;"	s	file:
CExtKey	src/key.h	/^struct CExtKey {$/;"	s
CExtPubKey	src/pubkey.h	/^struct CExtPubKey {$/;"	s
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	doc/man/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	src/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	src/secp256k1/Makefile	/^CFLAGS = -g -O2 -W -std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wno-unused-function -Wno-long-long -Wno-overlength-strings -fvisibility=hidden -O3$/;"	m
CFLAGS	src/univalue/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS_FOR_BUILD	src/secp256k1/Makefile	/^CFLAGS_FOR_BUILD = -g -O2 $(am__append_9)$/;"	m
CFeeRate	src/policy/feerate.cpp	/^CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)$/;"	f	class:CFeeRate
CFeeRate	src/policy/feerate.h	/^    CFeeRate() : nSatoshisPerK(0) { }$/;"	f	class:CFeeRate
CFeeRate	src/policy/feerate.h	/^    CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {$/;"	f	class:CFeeRate
CFeeRate	src/policy/feerate.h	/^class CFeeRate$/;"	c
CHACHA20	src/bench/chacha20.cpp	/^static void CHACHA20(benchmark::State& state, size_t buffersize)$/;"	f	file:
CHACHA20_1MB	src/bench/chacha20.cpp	/^static void CHACHA20_1MB(benchmark::State& state)$/;"	f	file:
CHACHA20_256BYTES	src/bench/chacha20.cpp	/^static void CHACHA20_256BYTES(benchmark::State& state)$/;"	f	file:
CHACHA20_64BYTES	src/bench/chacha20.cpp	/^static void CHACHA20_64BYTES(benchmark::State& state)$/;"	f	file:
CHAINPARAMS	src/util/system.h	/^    CHAINPARAMS,$/;"	m	class:OptionsCategory
CHAIN_SYNC_TIMEOUT	src/net_processing.cpp	/^static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; \/\/ 20 minutes$/;"	v	file:
CHANGE_AUTO	src/outputtype.h	/^    CHANGE_AUTO,$/;"	m	class:OutputType
CHANNELS	src/qt/notificator.cpp	/^const int CHANNELS = 4;$/;"	v
CHARSET	contrib/testgen/gen_key_io_test_vectors.py	/^from segwit_addr import bech32_encode, decode, convertbits, CHARSET$/;"	i
CHARSET	src/bech32.cpp	/^const char* CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";$/;"	m	namespace:__anon116	file:
CHARSET	test/functional/test_framework/segwit_addr.py	/^CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l"$/;"	v
CHARSET_REV	src/bech32.cpp	/^const int8_t CHARSET_REV[128] = {$/;"	m	namespace:__anon116	file:
CHARS_ALPHA_NUM	src/util/strencodings.cpp	/^static const std::string CHARS_ALPHA_NUM = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";$/;"	v	file:
CHDChain	src/wallet/walletdb.h	/^    CHDChain() { SetNull(); }$/;"	f	class:CHDChain
CHDChain	src/wallet/walletdb.h	/^class CHDChain$/;"	c
CHECK	src/secp256k1/src/util.h	/^#define CHECK(/;"	d
CHECKASSIGNMENTOPERATOR	src/test/arith_uint256_tests.cpp	/^#define CHECKASSIGNMENTOPERATOR(/;"	d	file:
CHECKBITWISEOPERATOR	src/test/arith_uint256_tests.cpp	/^#define CHECKBITWISEOPERATOR(/;"	d	file:
CHECKERS	src/test/versionbits_tests.cpp	/^#define CHECKERS /;"	d	file:
CHECKS	contrib/devtools/security-check.py	/^CHECKS = {$/;"	v
CHECKSUM_CHARSET	test/functional/test_framework/descriptors.py	/^CHECKSUM_CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l"$/;"	v
CHECKSUM_OFFSET	src/protocol.h	/^    static constexpr size_t CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE;$/;"	m	class:CMessageHeader
CHECKSUM_SIZE	src/protocol.h	/^    static constexpr size_t CHECKSUM_SIZE = 4;$/;"	m	class:CMessageHeader
CHKDF_HMAC_SHA256_L32	src/crypto/hkdf_sha256_32.cpp	/^CHKDF_HMAC_SHA256_L32::CHKDF_HMAC_SHA256_L32(const unsigned char* ikm, size_t ikmlen, const std::string& salt)$/;"	f	class:CHKDF_HMAC_SHA256_L32
CHKDF_HMAC_SHA256_L32	src/crypto/hkdf_sha256_32.h	/^class CHKDF_HMAC_SHA256_L32$/;"	c
CHMAC_SHA256	src/crypto/hmac_sha256.cpp	/^CHMAC_SHA256::CHMAC_SHA256(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA256
CHMAC_SHA256	src/crypto/hmac_sha256.h	/^class CHMAC_SHA256$/;"	c
CHMAC_SHA512	src/crypto/hmac_sha512.cpp	/^CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA512
CHMAC_SHA512	src/crypto/hmac_sha512.h	/^class CHMAC_SHA512$/;"	c
CHash160	src/hash.h	/^class CHash160 {$/;"	c
CHash256	src/hash.h	/^class CHash256 {$/;"	c
CHashVerifier	src/hash.h	/^    explicit CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}$/;"	f	class:CHashVerifier
CHashVerifier	src/hash.h	/^class CHashVerifier : public CHashWriter$/;"	c
CHashWriter	src/hash.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CHashWriter
CHashWriter	src/hash.h	/^class CHashWriter$/;"	c
CIRCLE	test/functional/test_runner.py	/^    CIRCLE = "o "$/;"	v
CIRCLE	test/functional/test_runner.py	/^    CIRCLE = "○ "$/;"	v
CImportingNow	src/init.cpp	/^    CImportingNow() {$/;"	f	struct:CImportingNow
CImportingNow	src/init.cpp	/^struct CImportingNow$/;"	s	file:
CInputCoin	src/wallet/coinselection.h	/^    CInputCoin(const CTransactionRef& tx, unsigned int i)$/;"	f	class:CInputCoin
CInputCoin	src/wallet/coinselection.h	/^    CInputCoin(const CTransactionRef& tx, unsigned int i, int input_bytes) : CInputCoin(tx, i)$/;"	f	class:CInputCoin
CInputCoin	src/wallet/coinselection.h	/^class CInputCoin {$/;"	c
CInv	src/protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	src/protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn) : type(typeIn), hash(hashIn) {}$/;"	f	class:CInv
CInv	src/protocol.h	/^class CInv$/;"	c
CInv	test/functional/example_test.py	/^from test_framework.messages import CInv$/;"	i
CInv	test/functional/feature_maxuploadtarget.py	/^from test_framework.messages import CInv, msg_getdata$/;"	i
CInv	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
CInv	test/functional/p2p_fingerprint.py	/^from test_framework.messages import CInv$/;"	i
CInv	test/functional/p2p_leak_tx.py	/^from test_framework.messages import msg_getdata, CInv$/;"	i
CInv	test/functional/p2p_node_network_limited.py	/^from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS$/;"	i
CInv	test/functional/p2p_sendheaders.py	/^from test_framework.messages import CInv$/;"	i
CInv	test/functional/p2p_unrequested_blocks.py	/^from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv$/;"	i
CInv	test/functional/test_framework/messages.py	/^class CInv:$/;"	c
CKey	src/key.h	/^    CKey() : fValid(false), fCompressed(false)$/;"	f	class:CKey
CKey	src/key.h	/^class CKey$/;"	c
CKeyID	src/pubkey.h	/^    CKeyID() : uint160() {}$/;"	f	class:CKeyID
CKeyID	src/pubkey.h	/^    explicit CKeyID(const uint160& in) : uint160(in) {}$/;"	f	class:CKeyID
CKeyID	src/pubkey.h	/^class CKeyID : public uint160$/;"	c
CKeyMetadata	src/wallet/walletdb.h	/^    CKeyMetadata()$/;"	f	class:CKeyMetadata
CKeyMetadata	src/wallet/walletdb.h	/^    explicit CKeyMetadata(int64_t nCreateTime_)$/;"	f	class:CKeyMetadata
CKeyMetadata	src/wallet/walletdb.h	/^class CKeyMetadata$/;"	c
CKeyPool	src/wallet/wallet.cpp	/^CKeyPool::CKeyPool()$/;"	f	class:CKeyPool
CKeyPool	src/wallet/wallet.cpp	/^CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)$/;"	f	class:CKeyPool
CKeyPool	src/wallet/wallet.h	/^class CKeyPool$/;"	c
CKeyStore	src/keystore.h	/^class CKeyStore : public SigningProvider$/;"	c
CKeyingMaterial	src/wallet/crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLASSPATH_ENV	src/secp256k1/Makefile	/^CLASSPATH_ENV = CLASSPATH=$(JAVA_GUAVA)$/;"	m
CLEANFILES	Makefile	/^CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)$/;"	m
CLEANFILES	src/Makefile	/^CLEANFILES = $(EXTRA_LIBRARIES) *.gcda *.gcno compat\/*.gcda \\$/;"	m
CLEANFILES	src/secp256k1/Makefile	/^CLEANFILES = $(gen_context_BIN) src\/ecmult_static_context.h $(JAVAROOT)\/$(JAVAORG)\/*.class .stamp-java$/;"	m
CLEAN_BITCOIN_TEST	src/Makefile	/^CLEAN_BITCOIN_TEST = test\/*.gcda test\/*.gcno $(GENERATED_TEST_FILES) $(BITCOIN_TESTS:=.log)$/;"	m
CLEAN_FLAGS	src/test/coins_tests.cpp	/^const static auto CLEAN_FLAGS = {char(0), FRESH};$/;"	v	file:
CLIENT_VERSION	src/clientversion.h	/^static const int CLIENT_VERSION =$/;"	v
CLIENT_VERSION_BUILD	Makefile	/^CLIENT_VERSION_BUILD = 0$/;"	m
CLIENT_VERSION_BUILD	build_msvc/bitcoin_config.h	/^#define CLIENT_VERSION_BUILD /;"	d
CLIENT_VERSION_BUILD	doc/man/Makefile	/^CLIENT_VERSION_BUILD = 0$/;"	m
CLIENT_VERSION_BUILD	src/Makefile	/^CLIENT_VERSION_BUILD = 0$/;"	m
CLIENT_VERSION_BUILD	src/config/bitcoin-config.h	/^#define CLIENT_VERSION_BUILD /;"	d
CLIENT_VERSION_IS_RELEASE	Makefile	/^CLIENT_VERSION_IS_RELEASE = false$/;"	m
CLIENT_VERSION_IS_RELEASE	build_msvc/bitcoin_config.h	/^#define CLIENT_VERSION_IS_RELEASE /;"	d
CLIENT_VERSION_IS_RELEASE	doc/man/Makefile	/^CLIENT_VERSION_IS_RELEASE = false$/;"	m
CLIENT_VERSION_IS_RELEASE	src/Makefile	/^CLIENT_VERSION_IS_RELEASE = false$/;"	m
CLIENT_VERSION_IS_RELEASE	src/config/bitcoin-config.h	/^#define CLIENT_VERSION_IS_RELEASE /;"	d
CLIENT_VERSION_MAJOR	Makefile	/^CLIENT_VERSION_MAJOR = 0$/;"	m
CLIENT_VERSION_MAJOR	build_msvc/bitcoin_config.h	/^#define CLIENT_VERSION_MAJOR /;"	d
CLIENT_VERSION_MAJOR	doc/man/Makefile	/^CLIENT_VERSION_MAJOR = 0$/;"	m
CLIENT_VERSION_MAJOR	src/Makefile	/^CLIENT_VERSION_MAJOR = 0$/;"	m
CLIENT_VERSION_MAJOR	src/config/bitcoin-config.h	/^#define CLIENT_VERSION_MAJOR /;"	d
CLIENT_VERSION_MINOR	Makefile	/^CLIENT_VERSION_MINOR = 18$/;"	m
CLIENT_VERSION_MINOR	build_msvc/bitcoin_config.h	/^#define CLIENT_VERSION_MINOR /;"	d
CLIENT_VERSION_MINOR	doc/man/Makefile	/^CLIENT_VERSION_MINOR = 18$/;"	m
CLIENT_VERSION_MINOR	src/Makefile	/^CLIENT_VERSION_MINOR = 18$/;"	m
CLIENT_VERSION_MINOR	src/config/bitcoin-config.h	/^#define CLIENT_VERSION_MINOR /;"	d
CLIENT_VERSION_REVISION	Makefile	/^CLIENT_VERSION_REVISION = 99$/;"	m
CLIENT_VERSION_REVISION	build_msvc/bitcoin_config.h	/^#define CLIENT_VERSION_REVISION /;"	d
CLIENT_VERSION_REVISION	doc/man/Makefile	/^CLIENT_VERSION_REVISION = 99$/;"	m
CLIENT_VERSION_REVISION	src/Makefile	/^CLIENT_VERSION_REVISION = 99$/;"	m
CLIENT_VERSION_REVISION	src/config/bitcoin-config.h	/^#define CLIENT_VERSION_REVISION /;"	d
CLIENT_VERSION_SUFFIX	src/clientversion.cpp	/^#define CLIENT_VERSION_SUFFIX /;"	d	file:
CLTV_HEIGHT	test/functional/feature_cltv.py	/^CLTV_HEIGHT = 1351$/;"	v
CLazyNode	test/functional/p2p_leak.py	/^class CLazyNode(P2PInterface):$/;"	c
CLockLocation	src/sync.cpp	/^    CLockLocation($/;"	f	struct:CLockLocation
CLockLocation	src/sync.cpp	/^struct CLockLocation {$/;"	s	file:
CLogCategoryActive	src/logging.h	/^struct CLogCategoryActive$/;"	s
CLogCategoryDesc	src/logging.cpp	/^struct CLogCategoryDesc$/;"	s	file:
CMDUNSUPPORTED	src/netbase.cpp	/^    CMDUNSUPPORTED = 0x07,   \/\/!< Command not supported$/;"	e	enum:uint8_t	file:
CMD_ERROR	src/qt/rpcconsole.h	/^        CMD_ERROR$/;"	e	enum:RPCConsole::MessageClass
CMD_GREP_ARGS	test/lint/check-doc.py	/^CMD_GREP_ARGS = r"git grep --perl-regexp '{}' -- {} ':(exclude){}'".format(REGEX_ARG, CMD_ROOT_DIR, FOLDER_TEST)$/;"	v
CMD_GREP_DOCS	test/lint/check-doc.py	/^CMD_GREP_DOCS = r"git grep --perl-regexp '{}' {}".format(REGEX_DOC, CMD_ROOT_DIR)$/;"	v
CMD_GREP_WALLET_ARGS	test/lint/check-doc.py	/^CMD_GREP_WALLET_ARGS = r"git grep --function-context 'void WalletInit::AddWalletOptions' -- {} | grep AddArg".format(CMD_ROOT_DIR)$/;"	v
CMD_GREP_WALLET_HIDDEN_ARGS	test/lint/check-doc.py	/^CMD_GREP_WALLET_HIDDEN_ARGS = r"git grep --function-context 'void DummyWalletInit::AddWalletOptions' -- {}".format(CMD_ROOT_DIR)$/;"	v
CMD_REPLY	src/qt/rpcconsole.h	/^        CMD_REPLY,$/;"	e	enum:RPCConsole::MessageClass
CMD_REQUEST	src/qt/rpcconsole.h	/^        CMD_REQUEST,$/;"	e	enum:RPCConsole::MessageClass
CMD_ROOT_DIR	test/lint/check-doc.py	/^CMD_ROOT_DIR = '$(git rev-parse --show-toplevel)\/{}'.format(FOLDER_GREP)$/;"	v
CMPCTBLOCK	src/protocol.cpp	/^const char *CMPCTBLOCK="cmpctblock";$/;"	m	namespace:NetMsgType	file:
CMainCleanup	src/validation.cpp	/^    CMainCleanup() {}$/;"	f	class:CMainCleanup
CMainCleanup	src/validation.cpp	/^class CMainCleanup$/;"	c	file:
CMainParams	src/chainparams.cpp	/^    CMainParams() {$/;"	f	class:CMainParams
CMainParams	src/chainparams.cpp	/^class CMainParams : public CChainParams {$/;"	c	file:
CMainSignals	src/validationinterface.h	/^class CMainSignals {$/;"	c
CMasterKey	src/wallet/crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	src/wallet/crypter.h	/^class CMasterKey$/;"	c
CMedianFilter	src/timedata.h	/^    CMedianFilter(unsigned int _size, T initial_value) : nSize(_size)$/;"	f	class:CMedianFilter
CMedianFilter	src/timedata.h	/^class CMedianFilter$/;"	c
CMerkleBlock	src/merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)$/;"	f	class:CMerkleBlock
CMerkleBlock	src/merkleblock.h	/^    CMerkleBlock() {}$/;"	f	class:CMerkleBlock
CMerkleBlock	src/merkleblock.h	/^    CMerkleBlock(const CBlock& block, CBloomFilter& filter) : CMerkleBlock(block, &filter, nullptr) { }$/;"	f	class:CMerkleBlock
CMerkleBlock	src/merkleblock.h	/^    CMerkleBlock(const CBlock& block, const std::set<uint256>& txids) : CMerkleBlock(block, nullptr, &txids) { }$/;"	f	class:CMerkleBlock
CMerkleBlock	src/merkleblock.h	/^class CMerkleBlock$/;"	c
CMerkleBlock	test/functional/rpc_txoutproof.py	/^from test_framework.messages import CMerkleBlock, FromHex, ToHex$/;"	i
CMerkleBlock	test/functional/test_framework/messages.py	/^class CMerkleBlock:$/;"	c
CMerkleTx	src/wallet/wallet.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	src/wallet/wallet.h	/^    explicit CMerkleTx(CTransactionRef arg)$/;"	f	class:CMerkleTx
CMerkleTx	src/wallet/wallet.h	/^class CMerkleTx$/;"	c
CMessageHeader	src/protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)$/;"	f	class:CMessageHeader
CMessageHeader	src/protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	src/protocol.h	/^class CMessageHeader$/;"	c
CMutableTransaction	src/primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	src/primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction(const CTransaction& tx) : vin(tx.vin), vout(tx.vout), nVersion(tx.nVersion), nLockTime(tx.nLockTime) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	src/primitives/transaction.h	/^    CMutableTransaction(deserialize_type, Stream& s) {$/;"	f	struct:CMutableTransaction
CMutableTransaction	src/primitives/transaction.h	/^struct CMutableTransaction$/;"	s
CNetAddr	src/netaddress.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	src/netaddress.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope)$/;"	f	class:CNetAddr
CNetAddr	src/netaddress.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	src/netaddress.h	/^class CNetAddr$/;"	c
CNetCleanup	src/net.cpp	/^    CNetCleanup() {}$/;"	f	class:CNetCleanup
CNetCleanup	src/net.cpp	/^class CNetCleanup$/;"	c	file:
CNetMessage	src/net.h	/^    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {$/;"	f	class:CNetMessage
CNetMessage	src/net.h	/^class CNetMessage {$/;"	c
CNetMsgMaker	src/netmessagemaker.h	/^    explicit CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}$/;"	f	class:CNetMsgMaker
CNetMsgMaker	src/netmessagemaker.h	/^class CNetMsgMaker$/;"	c
CNetProcessingCleanup	src/net_processing.cpp	/^    CNetProcessingCleanup() {}$/;"	f	class:CNetProcessingCleanup
CNetProcessingCleanup	src/net_processing.cpp	/^class CNetProcessingCleanup$/;"	c	file:
CNoDestination	src/script/standard.h	/^class CNoDestination {$/;"	c
CNode	src/net.cpp	/^CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, bool fInboundIn)$/;"	f	class:CNode
CNode	src/net.h	/^class CNode$/;"	c
CNodeCombinedStats	src/qt/peertablemodel.h	/^struct CNodeCombinedStats {$/;"	s
CNodeNoVerackIdle	test/functional/p2p_leak.py	/^class CNodeNoVerackIdle(CLazyNode):$/;"	c
CNodeNoVersionBan	test/functional/p2p_leak.py	/^class CNodeNoVersionBan(CLazyNode):$/;"	c
CNodeNoVersionIdle	test/functional/p2p_leak.py	/^class CNodeNoVersionIdle(CLazyNode):$/;"	c
CNodeState	src/net_processing.cpp	/^    CNodeState(CAddress addrIn, std::string addrNameIn, bool is_inbound, bool is_manual) :$/;"	f	struct:__anon89::CNodeState
CNodeState	src/net_processing.cpp	/^struct CNodeState {$/;"	s	namespace:__anon89	file:
CNodeStateStats	src/net_processing.h	/^struct CNodeStateStats {$/;"	s
CNodeStats	src/net.h	/^class CNodeStats$/;"	c
COIN	src/amount.h	/^static const CAmount COIN = 100000000;$/;"	v
COIN	test/functional/feature_bip68_sequence.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex$/;"	i
COIN	test/functional/feature_dbcrash.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex$/;"	i
COIN	test/functional/feature_fee_estimation.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN$/;"	i
COIN	test/functional/feature_rbf.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut$/;"	i
COIN	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
COIN	test/functional/mempool_packages.py	/^from test_framework.messages import COIN$/;"	i
COIN	test/functional/mining_prioritisetransaction.py	/^from test_framework.messages import COIN, MAX_BLOCK_BASE_SIZE$/;"	i
COIN	test/functional/p2p_invalid_block.py	/^from test_framework.messages import COIN$/;"	i
COIN	test/functional/test_framework/messages.py	/^COIN = 100000000  # 1 btc in satoshis$/;"	v
COIN	test/functional/wallet_listtransactions.py	/^from test_framework.messages import COIN, CTransaction$/;"	i
COIN	test/functional/wallet_txn_clone.py	/^from test_framework.messages import CTransaction, COIN$/;"	i
COINBASE_FLAGS	src/validation.cpp	/^CScript COINBASE_FLAGS;$/;"	v
COINBASE_MATURITY	src/consensus/consensus.h	/^static const int COINBASE_MATURITY = 100;$/;"	v
COLOR_BAREADDRESS	src/qt/guiconstants.h	/^#define COLOR_BAREADDRESS /;"	d
COLOR_BLACK	src/qt/guiconstants.h	/^#define COLOR_BLACK /;"	d
COLOR_NEGATIVE	src/qt/guiconstants.h	/^#define COLOR_NEGATIVE /;"	d
COLOR_TX_STATUS_DANGER	src/qt/guiconstants.h	/^#define COLOR_TX_STATUS_DANGER /;"	d
COLOR_TX_STATUS_OPENUNTILDATE	src/qt/guiconstants.h	/^#define COLOR_TX_STATUS_OPENUNTILDATE /;"	d
COLOR_UNCONFIRMED	src/qt/guiconstants.h	/^#define COLOR_UNCONFIRMED /;"	d
COLUMN_ADDRESS	src/qt/coincontroldialog.h	/^        COLUMN_ADDRESS,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_AMOUNT	src/qt/coincontroldialog.h	/^        COLUMN_AMOUNT,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_CHECKBOX	src/qt/coincontroldialog.h	/^        COLUMN_CHECKBOX = 0,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_CONFIRMATIONS	src/qt/coincontroldialog.h	/^        COLUMN_CONFIRMATIONS,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_DATE	src/qt/coincontroldialog.h	/^        COLUMN_DATE,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_LABEL	src/qt/coincontroldialog.h	/^        COLUMN_LABEL,$/;"	e	enum:CoinControlDialog::__anon71
COMMANDS	src/util/system.h	/^    COMMANDS,$/;"	m	class:OptionsCategory
COMMAND_SIZE	src/protocol.h	/^    static constexpr size_t COMMAND_SIZE = 12;$/;"	m	class:CMessageHeader
COMMIT_FORMAT	contrib/devtools/github-merge.py	/^    COMMIT_FORMAT = '%C(bold blue)%h%Creset %s %C(cyan)(%an)%Creset%C(green)%d%Creset'$/;"	v
COMMIT_FORMAT	contrib/devtools/github-merge.py	/^COMMIT_FORMAT = '%h %s (%an)%d'$/;"	v
COMMON_LIB	src/secp256k1/Makefile	/^COMMON_LIB = $/;"	m
COMPACTSIZE	src/serialize.h	/^#define COMPACTSIZE(/;"	d
COMPACT_SIGNATURE_SIZE	src/pubkey.h	/^    static constexpr unsigned int COMPACT_SIGNATURE_SIZE      = 65;$/;"	m	class:CPubKey
COMPAT_LDFLAGS	Makefile	/^COMPAT_LDFLAGS = $/;"	m
COMPAT_LDFLAGS	doc/man/Makefile	/^COMPAT_LDFLAGS = $/;"	m
COMPAT_LDFLAGS	src/Makefile	/^COMPAT_LDFLAGS = $/;"	m
COMPILE	src/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	src/secp256k1/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPRESSED_PRIVATE_KEY_SIZE	src/key.h	/^    static const unsigned int COMPRESSED_PRIVATE_KEY_SIZE = 214;$/;"	m	class:CKey
COMPRESSED_PUBLIC_KEY_SIZE	src/pubkey.h	/^    static constexpr unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;$/;"	m	class:CPubKey
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES = libbitcoinconsensus.pc share\/setup.nsi \\$/;"	m
CONFIG_CLEAN_FILES	doc/man/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	src/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	src/secp256k1/Makefile	/^CONFIG_CLEAN_FILES = libsecp256k1.pc$/;"	m
CONFIG_CLEAN_FILES	src/univalue/Makefile	/^CONFIG_CLEAN_FILES = pc\/libunivalue.pc pc\/libunivalue-uninstalled.pc$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES = contrib\/filter-lcov.py \\$/;"	m
CONFIG_CLEAN_VPATH_FILES	doc/man/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	src/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	src/secp256k1/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	src/univalue/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config\/bitcoin-config.h$/;"	m
CONFIG_HEADER	doc/man/Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config\/bitcoin-config.h$/;"	m
CONFIG_HEADER	src/Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config\/bitcoin-config.h$/;"	m
CONFIG_HEADER	src/secp256k1/Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/libsecp256k1-config.h$/;"	m
CONFIG_HEADER	src/univalue/Makefile	/^CONFIG_HEADER = univalue-config.h$/;"	m
CONFLICT	src/txmempool.h	/^    CONFLICT,    \/\/!< Removed for conflict with in-block transaction$/;"	m	class:MemPoolRemovalReason
CONNECT	src/netbase.cpp	/^    CONNECT = 0x01,$/;"	e	enum:uint8_t	file:
CONNECT	test/functional/test_framework/socks5.py	/^    CONNECT = 0x01$/;"	v	class:Command
CONNECTION	src/util/system.h	/^    CONNECTION,$/;"	m	class:OptionsCategory
CONNECTIONS_ALL	src/net.h	/^        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_ALL	src/qt/clientmodel.h	/^    CONNECTIONS_ALL  = (CONNECTIONS_IN | CONNECTIONS_OUT),$/;"	e	enum:NumConnections
CONNECTIONS_IN	src/net.h	/^        CONNECTIONS_IN = (1U << 0),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_IN	src/qt/clientmodel.h	/^    CONNECTIONS_IN   = (1U << 0),$/;"	e	enum:NumConnections
CONNECTIONS_NONE	src/net.h	/^        CONNECTIONS_NONE = 0,$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_NONE	src/qt/clientmodel.h	/^    CONNECTIONS_NONE = 0,$/;"	e	enum:NumConnections
CONNECTIONS_OUT	src/net.h	/^        CONNECTIONS_OUT = (1U << 1),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_OUT	src/qt/clientmodel.h	/^    CONNECTIONS_OUT  = (1U << 1),$/;"	e	enum:NumConnections
CONNREFUSED	src/netbase.cpp	/^    CONNREFUSED = 0x05,      \/\/!< Connection refused$/;"	e	enum:uint8_t	file:
CONSENSUS	src/consensus/validation.h	/^    CONSENSUS,               \/\/!< invalid by consensus rules (excluding any below reasons)$/;"	m	class:ValidationInvalidReason
CONSERVATIVE	src/policy/fees.h	/^    CONSERVATIVE, \/\/!< Force estimateSmartFee to use conservative estimates$/;"	m	class:FeeEstimateHorizon::FeeEstimateMode
CONSERVATIVE	src/policy/fees.h	/^    CONSERVATIVE,$/;"	m	class:FeeEstimateHorizon::FeeReason
CONSOLE_HISTORY	src/qt/rpcconsole.cpp	/^const int CONSOLE_HISTORY = 50;$/;"	v
CONTINUE_EXECUTION	src/bitcoin-cli.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
CONTINUE_EXECUTION	src/bitcoin-tx.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
COOKIEAUTH_FILE	src/rpc/protocol.cpp	/^static const std::string COOKIEAUTH_FILE = ".cookie";$/;"	v	file:
COOKIEAUTH_USER	src/rpc/protocol.cpp	/^static const std::string COOKIEAUTH_USER = "__cookie__";$/;"	v	file:
COPYRIGHT	contrib/devtools/copyright_header.py	/^COPYRIGHT = 'Copyright \\(c\\)'$/;"	v
COPYRIGHT_HOLDERS	Makefile	/^COPYRIGHT_HOLDERS = The %s developers$/;"	m
COPYRIGHT_HOLDERS	build_msvc/bitcoin_config.h	/^#define COPYRIGHT_HOLDERS /;"	d
COPYRIGHT_HOLDERS	doc/man/Makefile	/^COPYRIGHT_HOLDERS = The %s developers$/;"	m
COPYRIGHT_HOLDERS	src/Makefile	/^COPYRIGHT_HOLDERS = The %s developers$/;"	m
COPYRIGHT_HOLDERS	src/config/bitcoin-config.h	/^#define COPYRIGHT_HOLDERS /;"	d
COPYRIGHT_HOLDERS_FINAL	Makefile	/^COPYRIGHT_HOLDERS_FINAL = The Bitcoin Core developers$/;"	m
COPYRIGHT_HOLDERS_FINAL	build_msvc/bitcoin_config.h	/^#define COPYRIGHT_HOLDERS_FINAL /;"	d
COPYRIGHT_HOLDERS_FINAL	doc/man/Makefile	/^COPYRIGHT_HOLDERS_FINAL = The Bitcoin Core developers$/;"	m
COPYRIGHT_HOLDERS_FINAL	src/Makefile	/^COPYRIGHT_HOLDERS_FINAL = The Bitcoin Core developers$/;"	m
COPYRIGHT_HOLDERS_FINAL	src/config/bitcoin-config.h	/^#define COPYRIGHT_HOLDERS_FINAL /;"	d
COPYRIGHT_HOLDERS_SUBSTITUTION	Makefile	/^COPYRIGHT_HOLDERS_SUBSTITUTION = Bitcoin Core$/;"	m
COPYRIGHT_HOLDERS_SUBSTITUTION	build_msvc/bitcoin_config.h	/^#define COPYRIGHT_HOLDERS_SUBSTITUTION /;"	d
COPYRIGHT_HOLDERS_SUBSTITUTION	doc/man/Makefile	/^COPYRIGHT_HOLDERS_SUBSTITUTION = Bitcoin Core$/;"	m
COPYRIGHT_HOLDERS_SUBSTITUTION	src/Makefile	/^COPYRIGHT_HOLDERS_SUBSTITUTION = Bitcoin Core$/;"	m
COPYRIGHT_HOLDERS_SUBSTITUTION	src/config/bitcoin-config.h	/^#define COPYRIGHT_HOLDERS_SUBSTITUTION /;"	d
COPYRIGHT_STR	src/clientversion.h	/^#define COPYRIGHT_STR /;"	d
COPYRIGHT_WITHOUT_C	contrib/devtools/copyright_header.py	/^COPYRIGHT_WITHOUT_C = 'Copyright'$/;"	v
COPYRIGHT_WITH_C	contrib/devtools/copyright_header.py	/^COPYRIGHT_WITH_C = 'Copyright \\(c\\)'$/;"	v
COPYRIGHT_YEAR	Makefile	/^COPYRIGHT_YEAR = 2019$/;"	m
COPYRIGHT_YEAR	build_msvc/bitcoin_config.h	/^#define COPYRIGHT_YEAR /;"	d
COPYRIGHT_YEAR	doc/man/Makefile	/^COPYRIGHT_YEAR = 2019$/;"	m
COPYRIGHT_YEAR	src/Makefile	/^COPYRIGHT_YEAR = 2019$/;"	m
COPYRIGHT_YEAR	src/config/bitcoin-config.h	/^#define COPYRIGHT_YEAR /;"	d
CORRUPT	src/wallet/walletdb.h	/^    CORRUPT,$/;"	m	class:DBErrors
COVERAGE_INFO	Makefile	/^COVERAGE_INFO = baseline.info \\$/;"	m
COrphanTx	src/net_processing.cpp	/^struct COrphanTx {$/;"	s	file:
COrphanTx	src/test/denialofservice_tests.cpp	/^struct COrphanTx {$/;"	s	file:
COutPoint	src/primitives/transaction.h	/^    COutPoint(): n(NULL_INDEX) { }$/;"	f	class:COutPoint
COutPoint	src/primitives/transaction.h	/^    COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }$/;"	f	class:COutPoint
COutPoint	src/primitives/transaction.h	/^class COutPoint$/;"	c
COutPoint	test/functional/data/invalid_txs.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint$/;"	i
COutPoint	test/functional/feature_bip68_sequence.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex$/;"	i
COutPoint	test/functional/feature_dbcrash.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex$/;"	i
COutPoint	test/functional/feature_fee_estimation.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN$/;"	i
COutPoint	test/functional/feature_rbf.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut$/;"	i
COutPoint	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
COutPoint	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
COutPoint	test/functional/test_framework/messages.py	/^class COutPoint:$/;"	c
COutput	src/wallet/wallet.h	/^    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn, bool use_max_sig_in = false)$/;"	f	class:COutput
COutput	src/wallet/wallet.h	/^class COutput$/;"	c
COutputEntry	src/wallet/wallet.h	/^struct COutputEntry$/;"	s
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPP	doc/man/Makefile	/^CPP = gcc -E$/;"	m
CPP	src/Makefile	/^CPP = gcc -E$/;"	m
CPP	src/secp256k1/Makefile	/^CPP = gcc -E$/;"	m
CPP	src/univalue/Makefile	/^CPP = gcc -E$/;"	m
CPPFILT	Makefile	/^CPPFILT = \/usr\/bin\/c++filt$/;"	m
CPPFILT	doc/man/Makefile	/^CPPFILT = \/usr\/bin\/c++filt$/;"	m
CPPFILT	src/Makefile	/^CPPFILT = \/usr\/bin\/c++filt$/;"	m
CPPFILT_CMD	contrib/devtools/symbol-check.py	/^CPPFILT_CMD = os.getenv('CPPFILT', '\/usr\/bin\/c++filt')$/;"	v
CPPFLAGS	Makefile	/^CPPFLAGS = -Qunused-arguments  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -I\/usr\/local\/opt\/berkeley-db@4\/include -DMAC_OSX$/;"	m
CPPFLAGS	doc/man/Makefile	/^CPPFLAGS = -Qunused-arguments  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -I\/usr\/local\/opt\/berkeley-db@4\/include -DMAC_OSX$/;"	m
CPPFLAGS	src/Makefile	/^CPPFLAGS = -Qunused-arguments  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -I\/usr\/local\/opt\/berkeley-db@4\/include -DMAC_OSX$/;"	m
CPPFLAGS	src/secp256k1/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	src/univalue/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS_FOR_BUILD	src/secp256k1/Makefile	/^CPPFLAGS_FOR_BUILD =  $(am__append_8)$/;"	m
CPPFilt	contrib/devtools/symbol-check.py	/^class CPPFilt(object):$/;"	c
CPP_FOR_BUILD	src/secp256k1/Makefile	/^CPP_FOR_BUILD = gcc -E$/;"	m
CPUID_F1_ECX_RDRAND	src/random.cpp	/^static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;$/;"	v	file:
CPUID_F7_EBX_RDSEED	src/random.cpp	/^static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;$/;"	v	file:
CPartialMerkleTree	src/merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	src/merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	src/merkleblock.h	/^class CPartialMerkleTree$/;"	c
CPartialMerkleTree	test/functional/test_framework/messages.py	/^class CPartialMerkleTree:$/;"	c
CPartialMerkleTreeTester	src/test/pmt_tests.cpp	/^class CPartialMerkleTreeTester : public CPartialMerkleTree$/;"	c	file:
CPrivKey	src/key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	src/pubkey.h	/^    CPubKey()$/;"	f	class:CPubKey
CPubKey	src/pubkey.h	/^    CPubKey(const T pbegin, const T pend)$/;"	f	class:CPubKey
CPubKey	src/pubkey.h	/^    explicit CPubKey(const std::vector<unsigned char>& _vch)$/;"	f	class:CPubKey
CPubKey	src/pubkey.h	/^class CPubKey$/;"	c
CRC	src/leveldb/util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c	file:
CREDIT	src/wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
CRIPEMD160	src/crypto/ripemd160.cpp	/^CRIPEMD160::CRIPEMD160() : bytes(0)$/;"	f	class:CRIPEMD160
CRIPEMD160	src/crypto/ripemd160.h	/^class CRIPEMD160$/;"	c
CROSS	test/functional/test_runner.py	/^    CROSS = "x "$/;"	v
CROSS	test/functional/test_runner.py	/^    CROSS = "✖ "$/;"	v
CRPCCommand	src/rpc/server.h	/^    CRPCCommand(const char* category, const char* name, rpcfn_type fn, std::initializer_list<const char*> args)$/;"	f	class:CRPCCommand
CRPCCommand	src/rpc/server.h	/^    CRPCCommand(std::string category, std::string name, Actor actor, std::vector<std::string> args, intptr_t unique_id)$/;"	f	class:CRPCCommand
CRPCCommand	src/rpc/server.h	/^class CRPCCommand$/;"	c
CRPCConvertParam	src/rpc/client.cpp	/^class CRPCConvertParam$/;"	c	file:
CRPCConvertTable	src/rpc/client.cpp	/^CRPCConvertTable::CRPCConvertTable()$/;"	f	class:CRPCConvertTable
CRPCConvertTable	src/rpc/client.cpp	/^class CRPCConvertTable$/;"	c	file:
CRPCSignals	src/rpc/server.cpp	/^static struct CRPCSignals$/;"	s	file:
CRPCTable	src/rpc/server.cpp	/^CRPCTable::CRPCTable()$/;"	f	class:CRPCTable
CRPCTable	src/rpc/server.h	/^class CRPCTable$/;"	c
CRYPTO_CFLAGS	Makefile	/^CRYPTO_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
CRYPTO_CFLAGS	doc/man/Makefile	/^CRYPTO_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
CRYPTO_CFLAGS	src/Makefile	/^CRYPTO_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
CRYPTO_CFLAGS	src/secp256k1/Makefile	/^CRYPTO_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
CRYPTO_LIBS	Makefile	/^CRYPTO_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lcrypto$/;"	m
CRYPTO_LIBS	doc/man/Makefile	/^CRYPTO_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lcrypto$/;"	m
CRYPTO_LIBS	src/Makefile	/^CRYPTO_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lcrypto$/;"	m
CRYPTO_LIBS	src/secp256k1/Makefile	/^CRYPTO_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lcrypto$/;"	m
CRecipient	src/wallet/wallet.h	/^struct CRecipient$/;"	s
CRegTestParams	src/chainparams.cpp	/^    explicit CRegTestParams(const ArgsManager& args) {$/;"	f	class:CRegTestParams
CRegTestParams	src/chainparams.cpp	/^class CRegTestParams : public CChainParams {$/;"	c	file:
CReserveKey	src/wallet/wallet.h	/^    explicit CReserveKey(CWallet* pwalletIn)$/;"	f	class:CReserveKey
CReserveKey	src/wallet/wallet.h	/^class CReserveKey$/;"	c
CRollingBloomFilter	src/bloom.cpp	/^CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const double fpRate)$/;"	f	class:CRollingBloomFilter
CRollingBloomFilter	src/bloom.h	/^class CRollingBloomFilter$/;"	c
CSCOPE	Makefile	/^CSCOPE = cscope$/;"	m
CSCOPE	src/secp256k1/Makefile	/^CSCOPE = cscope$/;"	m
CSCOPE	src/univalue/Makefile	/^CSCOPE = cscope$/;"	m
CSHA1	src/crypto/sha1.cpp	/^CSHA1::CSHA1() : bytes(0)$/;"	f	class:CSHA1
CSHA1	src/crypto/sha1.h	/^class CSHA1$/;"	c
CSHA256	src/crypto/sha256.cpp	/^CSHA256::CSHA256() : bytes(0)$/;"	f	class:CSHA256
CSHA256	src/crypto/sha256.h	/^class CSHA256$/;"	c
CSHA512	src/crypto/sha512.cpp	/^CSHA512::CSHA512() : bytes(0)$/;"	f	class:CSHA512
CSHA512	src/crypto/sha512.h	/^class CSHA512$/;"	c
CSVHeight	src/consensus/params.h	/^    int CSVHeight;$/;"	m	struct:Consensus::Params
CSVModelWriter	src/qt/csvmodelwriter.cpp	/^CSVModelWriter::CSVModelWriter(const QString &_filename, QObject *parent) :$/;"	f	class:CSVModelWriter
CSVModelWriter	src/qt/csvmodelwriter.h	/^class CSVModelWriter : public QObject$/;"	c
CScheduler	src/scheduler.cpp	/^CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)$/;"	f	class:CScheduler
CScheduler	src/scheduler.h	/^class CScheduler$/;"	c
CScript	src/script/script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	src/script/script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	src/script/script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	src/script/script.h	/^    CScript(int64_t b)        { operator<<(b); }$/;"	f	class:CScript
CScript	src/script/script.h	/^    CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	src/script/script.h	/^    explicit CScript(const CScriptNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	src/script/script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	src/script/script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	src/script/script.h	/^class CScript : public CScriptBase$/;"	c
CScript	test/functional/feature_assumevalid.py	/^from test_framework.script import (CScript, OP_TRUE)$/;"	i
CScript	test/functional/feature_bip68_sequence.py	/^from test_framework.script import CScript$/;"	i
CScript	test/functional/feature_cltv.py	/^from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum$/;"	i
CScript	test/functional/feature_dersig.py	/^from test_framework.script import CScript$/;"	i
CScript	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
CScript	test/functional/feature_nulldummy.py	/^from test_framework.script import CScript$/;"	i
CScript	test/functional/feature_pruning.py	/^from test_framework.script import CScript, OP_RETURN, OP_NOP$/;"	i
CScript	test/functional/feature_rbf.py	/^from test_framework.script import CScript, OP_DROP$/;"	i
CScript	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
CScript	test/functional/p2p_compactblocks.py	/^from test_framework.script import CScript, OP_TRUE, OP_DROP$/;"	i
CScript	test/functional/rpc_signrawtransaction.py	/^from test_framework.script import CScript, OP_0$/;"	i
CScript	test/functional/test_framework/address.py	/^from .script import hash256, hash160, sha256, CScript, OP_0$/;"	i
CScript	test/functional/test_framework/script.py	/^class CScript(bytes):$/;"	c
CScriptBase	src/script/script.h	/^typedef prevector<28, unsigned char> CScriptBase;$/;"	t
CScriptCheck	src/validation.h	/^    CScriptCheck(): ptxTo(nullptr), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}$/;"	f	class:CScriptCheck
CScriptCheck	src/validation.h	/^    CScriptCheck(const CTxOut& outIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :$/;"	f	class:CScriptCheck
CScriptCheck	src/validation.h	/^class CScriptCheck$/;"	c
CScriptCompressor	src/compressor.h	/^    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }$/;"	f	class:CScriptCompressor
CScriptCompressor	src/compressor.h	/^class CScriptCompressor$/;"	c
CScriptID	src/script/standard.cpp	/^CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}$/;"	f	class:CScriptID
CScriptID	src/script/standard.h	/^    CScriptID() : uint160() {}$/;"	f	class:CScriptID
CScriptID	src/script/standard.h	/^    CScriptID(const uint160& in) : uint160(in) {}$/;"	f	class:CScriptID
CScriptID	src/script/standard.h	/^class CScriptID : public uint160$/;"	c
CScriptInvalidError	test/functional/test_framework/script.py	/^class CScriptInvalidError(Exception):$/;"	c
CScriptNum	src/script/script.h	/^    explicit CScriptNum(const int64_t& n)$/;"	f	class:CScriptNum
CScriptNum	src/script/script.h	/^    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum
CScriptNum	src/script/script.h	/^class CScriptNum$/;"	c
CScriptNum	test/functional/feature_cltv.py	/^from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum$/;"	i
CScriptNum	test/functional/mining_basic.py	/^from test_framework.script import CScriptNum$/;"	i
CScriptNum	test/functional/test_framework/script.py	/^class CScriptNum:$/;"	c
CScriptNum10	src/test/scriptnum10.h	/^    explicit CScriptNum10(const int64_t& n)$/;"	f	class:CScriptNum10
CScriptNum10	src/test/scriptnum10.h	/^    explicit CScriptNum10(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum10
CScriptNum10	src/test/scriptnum10.h	/^class CScriptNum10$/;"	c
CScriptOp	test/functional/test_framework/script.py	/^class CScriptOp(int):$/;"	c
CScriptTruncatedPushDataError	test/functional/test_framework/script.py	/^class CScriptTruncatedPushDataError(CScriptInvalidError):$/;"	c
CScriptVisitor	src/script/standard.cpp	/^    explicit CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:__anon86::CScriptVisitor
CScriptVisitor	src/script/standard.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	namespace:__anon86	file:
CScriptWitness	src/script/script.h	/^    CScriptWitness() { }$/;"	f	struct:CScriptWitness
CScriptWitness	src/script/script.h	/^struct CScriptWitness$/;"	s
CScriptWitness	test/functional/test_framework/messages.py	/^class CScriptWitness:$/;"	c
CSemaphore	src/sync.h	/^    explicit CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	src/sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	src/sync.h	/^    CSemaphoreGrant() : sem(nullptr), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	src/sync.h	/^    explicit CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	src/sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionSerialize	src/serialize.h	/^struct CSerActionSerialize$/;"	s
CSerActionUnserialize	src/serialize.h	/^struct CSerActionUnserialize$/;"	s
CSerializeMethodsTestMany	src/test/serialize_tests.cpp	/^class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle$/;"	c	file:
CSerializeMethodsTestSingle	src/test/serialize_tests.cpp	/^    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, const CTransactionRef& txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), txval(txvalin)$/;"	f	class:CSerializeMethodsTestSingle
CSerializeMethodsTestSingle	src/test/serialize_tests.cpp	/^class CSerializeMethodsTestSingle$/;"	c	file:
CSerializedNetMsg	src/net.h	/^struct CSerializedNetMsg$/;"	s
CService	src/netaddress.cpp	/^CService::CService() : port(0)$/;"	f	class:CService
CService	src/netaddress.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	src/netaddress.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	src/netaddress.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	src/netaddress.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	src/netaddress.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr, addr.sin6_scope_id), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	src/netaddress.h	/^class CService : public CNetAddr$/;"	c
CSignatureCache	src/script/sigcache.cpp	/^    CSignatureCache()$/;"	f	class:__anon84::CSignatureCache
CSignatureCache	src/script/sigcache.cpp	/^class CSignatureCache$/;"	c	namespace:__anon84	file:
CSipHasher	src/crypto/siphash.cpp	/^CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)$/;"	f	class:CSipHasher
CSipHasher	src/crypto/siphash.h	/^class CSipHasher$/;"	c
CSizeComputer	src/serialize.h	/^    explicit CSizeComputer(int nVersionIn) : nSize(0), nVersion(nVersionIn) {}$/;"	f	class:CSizeComputer
CSizeComputer	src/serialize.h	/^class CSizeComputer$/;"	c
CSubNet	src/netaddress.cpp	/^CSubNet::CSubNet():$/;"	f	class:CSubNet
CSubNet	src/netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr):$/;"	f	class:CSubNet
CSubNet	src/netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask)$/;"	f	class:CSubNet
CSubNet	src/netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, int32_t mask)$/;"	f	class:CSubNet
CSubNet	src/netaddress.h	/^class CSubNet$/;"	c
CTAES_DIST	src/Makefile	/^CTAES_DIST = crypto\/ctaes\/bench.c crypto\/ctaes\/ctaes.c \\$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTAGS	src/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	src/secp256k1/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	src/univalue/Makefile	/^CTAGS = ctags$/;"	m
CT_DELETED	src/ui_interface.h	/^    CT_DELETED$/;"	e	enum:ChangeType
CT_NEW	src/ui_interface.h	/^    CT_NEW,$/;"	e	enum:ChangeType
CT_UPDATED	src/ui_interface.h	/^    CT_UPDATED,$/;"	e	enum:ChangeType
CTestNetParams	src/chainparams.cpp	/^    CTestNetParams() {$/;"	f	class:CTestNetParams
CTestNetParams	src/chainparams.cpp	/^class CTestNetParams : public CChainParams {$/;"	c	file:
CThreadInterrupt	src/threadinterrupt.cpp	/^CThreadInterrupt::CThreadInterrupt() : flag(false) {}$/;"	f	class:CThreadInterrupt
CThreadInterrupt	src/threadinterrupt.h	/^class CThreadInterrupt$/;"	c
CTransaction	src/primitives/transaction.cpp	/^CTransaction::CTransaction() : vin(), vout(), nVersion(CTransaction::CURRENT_VERSION), nLockTime(0), hash{}, m_witness_hash{} {}$/;"	f	class:CTransaction
CTransaction	src/primitives/transaction.cpp	/^CTransaction::CTransaction(CMutableTransaction&& tx) : vin(std::move(tx.vin)), vout(std::move(tx.vout)), nVersion(tx.nVersion), nLockTime(tx.nLockTime), hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}$/;"	f	class:CTransaction
CTransaction	src/primitives/transaction.cpp	/^CTransaction::CTransaction(const CMutableTransaction& tx) : vin(tx.vin), vout(tx.vout), nVersion(tx.nVersion), nLockTime(tx.nLockTime), hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}$/;"	f	class:CTransaction
CTransaction	src/primitives/transaction.h	/^    CTransaction(deserialize_type, Stream& s) : CTransaction(CMutableTransaction(deserialize, s)) {}$/;"	f	class:CTransaction
CTransaction	src/primitives/transaction.h	/^class CTransaction$/;"	c
CTransaction	test/functional/data/invalid_txs.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint$/;"	i
CTransaction	test/functional/feature_bip68_sequence.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex$/;"	i
CTransaction	test/functional/feature_cltv.py	/^from test_framework.messages import CTransaction, msg_block, ToHex$/;"	i
CTransaction	test/functional/feature_csv_activation.py	/^from test_framework.messages import ToHex, CTransaction$/;"	i
CTransaction	test/functional/feature_dbcrash.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex$/;"	i
CTransaction	test/functional/feature_fee_estimation.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN$/;"	i
CTransaction	test/functional/feature_nulldummy.py	/^from test_framework.messages import CTransaction$/;"	i
CTransaction	test/functional/feature_rbf.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut$/;"	i
CTransaction	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
CTransaction	test/functional/interface_zmq.py	/^from test_framework.messages import CTransaction$/;"	i
CTransaction	test/functional/p2p_blocksonly.py	/^from test_framework.messages import msg_tx, CTransaction, FromHex$/;"	i
CTransaction	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
CTransaction	test/functional/rpc_decodescript.py	/^from test_framework.messages import CTransaction, sha256$/;"	i
CTransaction	test/functional/rpc_rawtransaction.py	/^from test_framework.messages import CTransaction, ToHex$/;"	i
CTransaction	test/functional/test_framework/messages.py	/^class CTransaction:$/;"	c
CTransaction	test/functional/test_framework/script.py	/^from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string$/;"	i
CTransaction	test/functional/wallet_bumpfee.py	/^from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction$/;"	i
CTransaction	test/functional/wallet_groups.py	/^from test_framework.messages import CTransaction, FromHex, ToHex$/;"	i
CTransaction	test/functional/wallet_listtransactions.py	/^from test_framework.messages import COIN, CTransaction$/;"	i
CTransaction	test/functional/wallet_txn_clone.py	/^from test_framework.messages import CTransaction, COIN$/;"	i
CTransactionRef	src/primitives/transaction.h	/^typedef std::shared_ptr<const CTransaction> CTransactionRef;$/;"	t
CTransactionSignatureSerializer	src/script/interpreter.cpp	/^    CTransactionSignatureSerializer(const T& txToIn, const CScript& scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :$/;"	f	class:__anon77::CTransactionSignatureSerializer
CTransactionSignatureSerializer	src/script/interpreter.cpp	/^class CTransactionSignatureSerializer$/;"	c	namespace:__anon77	file:
CTxDestination	src/script/standard.h	/^typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;$/;"	t
CTxIn	src/primitives/transaction.cpp	/^CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	src/primitives/transaction.cpp	/^CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	src/primitives/transaction.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	src/primitives/transaction.h	/^class CTxIn$/;"	c
CTxIn	test/functional/data/invalid_txs.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint$/;"	i
CTxIn	test/functional/feature_bip68_sequence.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex$/;"	i
CTxIn	test/functional/feature_dbcrash.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex$/;"	i
CTxIn	test/functional/feature_fee_estimation.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN$/;"	i
CTxIn	test/functional/feature_rbf.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut$/;"	i
CTxIn	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
CTxIn	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
CTxIn	test/functional/test_framework/messages.py	/^class CTxIn:$/;"	c
CTxInWitness	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
CTxInWitness	test/functional/test_framework/messages.py	/^class CTxInWitness:$/;"	c
CTxMemPool	src/txmempool.cpp	/^CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :$/;"	f	class:CTxMemPool
CTxMemPool	src/txmempool.h	/^class CTxMemPool$/;"	c
CTxMemPoolEntry	src/txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	src/txmempool.h	/^class CTxMemPoolEntry$/;"	c
CTxMemPoolModifiedEntry	src/miner.h	/^    explicit CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)$/;"	f	struct:CTxMemPoolModifiedEntry
CTxMemPoolModifiedEntry	src/miner.h	/^struct CTxMemPoolModifiedEntry {$/;"	s
CTxOut	src/primitives/transaction.cpp	/^CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	src/primitives/transaction.h	/^    CTxOut()$/;"	f	class:CTxOut
CTxOut	src/primitives/transaction.h	/^class CTxOut$/;"	c
CTxOut	test/functional/data/invalid_txs.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint$/;"	i
CTxOut	test/functional/feature_bip68_sequence.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex$/;"	i
CTxOut	test/functional/feature_dbcrash.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex$/;"	i
CTxOut	test/functional/feature_fee_estimation.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN$/;"	i
CTxOut	test/functional/feature_rbf.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut$/;"	i
CTxOut	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
CTxOut	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
CTxOut	test/functional/test_framework/messages.py	/^class CTxOut:$/;"	c
CTxOut	test/functional/test_framework/script.py	/^from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string$/;"	i
CTxOutCompressor	src/compressor.h	/^    explicit CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }$/;"	f	class:CTxOutCompressor
CTxOutCompressor	src/compressor.h	/^class CTxOutCompressor$/;"	c
CTxUndo	src/undo.h	/^class CTxUndo$/;"	c
CTxWitness	test/functional/test_framework/messages.py	/^class CTxWitness:$/;"	c
CURRENCY_UNIT	src/policy/feerate.cpp	/^const std::string CURRENCY_UNIT = "BTC";$/;"	v
CURRENT_VERSION	src/addrdb.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CBanEntry
CURRENT_VERSION	src/primitives/transaction.h	/^    static const int32_t CURRENT_VERSION=2;$/;"	m	class:CTransaction
CURRENT_VERSION	src/qt/recentrequeststablemodel.h	/^    static const int CURRENT_VERSION = 1;$/;"	m	class:RecentRequestEntry
CURRENT_VERSION	src/qt/walletmodel.h	/^    static const int CURRENT_VERSION = 1;$/;"	m	class:SendCoinsRecipient
CURRENT_VERSION	src/wallet/walletdb.h	/^    static const int CURRENT_VERSION        = VERSION_HD_CHAIN_SPLIT;$/;"	m	class:CHDChain
CURRENT_VERSION	src/wallet/walletdb.h	/^    static const int CURRENT_VERSION=VERSION_WITH_KEY_ORIGIN;$/;"	m	class:CKeyMetadata
CURVE_B	src/secp256k1/src/group_impl.h	/^const int CURVE_B = 2;$/;"	v
CURVE_B	src/secp256k1/src/group_impl.h	/^const int CURVE_B = 4;$/;"	v
CURVE_B	src/secp256k1/src/group_impl.h	/^const int CURVE_B = 7;$/;"	v
CUpdatedBlock	src/rpc/blockchain.cpp	/^struct CUpdatedBlock$/;"	s	file:
CValidationInterface	src/validationinterface.h	/^class CValidationInterface {$/;"	c
CValidationState	src/consensus/validation.h	/^    CValidationState() : mode(MODE_VALID), m_reason(ValidationInvalidReason::NONE), chRejectCode(0) {}$/;"	f	class:CValidationState
CValidationState	src/consensus/validation.h	/^class CValidationState {$/;"	c
CVarInt	src/serialize.h	/^    explicit CVarInt(I& nIn) : n(nIn) { }$/;"	f	class:CVarInt
CVarInt	src/serialize.h	/^class CVarInt$/;"	c
CVectorWriter	src/streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn) : nType(nTypeIn), nVersion(nVersionIn), vchData(vchDataIn), nPos(nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	src/streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn, Args&&... args) : CVectorWriter(nTypeIn, nVersionIn, vchDataIn, nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	src/streams.h	/^class CVectorWriter$/;"	c
CVerifyDB	src/validation.cpp	/^CVerifyDB::CVerifyDB()$/;"	f	class:CVerifyDB
CVerifyDB	src/validation.h	/^class CVerifyDB {$/;"	c
CWallet	src/wallet/wallet.h	/^    CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)$/;"	f	class:final
CWalletKey	src/wallet/wallet.cpp	/^CWalletKey::CWalletKey(int64_t nExpires)$/;"	f	class:CWalletKey
CWalletKey	src/wallet/wallet.h	/^class CWalletKey$/;"	c
CWalletScanState	src/wallet/walletdb.cpp	/^    CWalletScanState() {$/;"	f	class:CWalletScanState
CWalletScanState	src/wallet/walletdb.cpp	/^class CWalletScanState {$/;"	c	file:
CWalletTx	src/wallet/wallet.h	/^    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))$/;"	f	class:CWalletTx
CWalletTx	src/wallet/wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CXX	Makefile	/^CXX = \/usr\/local\/bin\/ccache g++ -std=c++11$/;"	m
CXX	doc/man/Makefile	/^CXX = \/usr\/local\/bin\/ccache g++ -std=c++11$/;"	m
CXX	src/Makefile	/^CXX = \/usr\/local\/bin\/ccache g++ -std=c++11$/;"	m
CXX	src/univalue/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	src/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	src/univalue/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -std=c++11 -E$/;"	m
CXXCPP	doc/man/Makefile	/^CXXCPP = g++ -std=c++11 -E$/;"	m
CXXCPP	src/Makefile	/^CXXCPP = g++ -std=c++11 -E$/;"	m
CXXCPP	src/univalue/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	doc/man/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	src/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	src/univalue/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	doc/man/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	src/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	src/univalue/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	src/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	src/univalue/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	src/Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CXXLINK	src/univalue/Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	doc/man/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	src/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	src/secp256k1/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	src/univalue/Makefile	/^CYGPATH_W = echo$/;"	m
CZMQAbstractNotifier	src/zmq/zmqabstractnotifier.h	/^    CZMQAbstractNotifier() : psocket(nullptr), outbound_message_high_water_mark(DEFAULT_ZMQ_SNDHWM) { }$/;"	f	class:CZMQAbstractNotifier
CZMQAbstractNotifier	src/zmq/zmqabstractnotifier.h	/^class CZMQAbstractNotifier$/;"	c
CZMQAbstractPublishNotifier	src/zmq/zmqpublishnotifier.h	/^class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier$/;"	c
CZMQNotificationInterface	src/zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(nullptr)$/;"	f	class:CZMQNotificationInterface
CZMQNotifierFactory	src/zmq/zmqabstractnotifier.h	/^typedef CZMQAbstractNotifier* (*CZMQNotifierFactory)();$/;"	t
CZMQPublishHashBlockNotifier	src/zmq/zmqpublishnotifier.h	/^class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishHashTransactionNotifier	src/zmq/zmqpublishnotifier.h	/^class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishRawBlockNotifier	src/zmq/zmqpublishnotifier.h	/^class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishRawTransactionNotifier	src/zmq/zmqpublishnotifier.h	/^class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier$/;"	c
CachableAmount	src/script/ismine.h	/^struct CachableAmount$/;"	s
Cache	src/leveldb/include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	src/leveldb/include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheTest	src/leveldb/util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	src/leveldb/util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
CachingTransactionSignatureChecker	src/script/sigcache.h	/^    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}$/;"	f	class:CachingTransactionSignatureChecker
CachingTransactionSignatureChecker	src/script/sigcache.h	/^class CachingTransactionSignatureChecker : public TransactionSignatureChecker$/;"	c
CalcHash	src/merkleblock.cpp	/^uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {$/;"	f	class:CPartialMerkleTree
CalcTreeWidth	src/merkleblock.h	/^    unsigned int CalcTreeWidth(int height) const {$/;"	f	class:CPartialMerkleTree
CalculateCurrentUsage	src/validation.cpp	/^uint64_t CalculateCurrentUsage()$/;"	f
CalculateDescendantMaximum	src/txmempool.cpp	/^uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const {$/;"	f	class:CTxMemPool
CalculateDescendants	src/txmempool.cpp	/^void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const$/;"	f	class:CTxMemPool
CalculateKeyedNetGroup	src/net.cpp	/^uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const$/;"	f	class:CConnman
CalculateMaximumSignedInputSize	src/wallet/wallet.cpp	/^int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)$/;"	f
CalculateMaximumSignedTxSize	src/wallet/wallet.cpp	/^int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)$/;"	f
CalculateMaximumSignedTxSize	src/wallet/wallet.cpp	/^int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig)$/;"	f
CalculateMemPoolAncestors	src/txmempool.cpp	/^bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents \/* = true *\/) const$/;"	f	class:CTxMemPool
CalculateNestedKeyhashInputSize	src/wallet/test/wallet_tests.cpp	/^static size_t CalculateNestedKeyhashInputSize(bool use_max_sig)$/;"	f	file:
CalculateNextWorkRequired	src/pow.cpp	/^unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)$/;"	f
CalculatePercentilesByWeight	src/rpc/blockchain.cpp	/^void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight)$/;"	f
CalculateSequenceLocks	src/consensus/tx_verify.cpp	/^std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
CalculateTruncatedMedian	src/rpc/blockchain.cpp	/^static T CalculateTruncatedMedian(std::vector<T>& scores)$/;"	f	file:
Call	test/functional/wallet_import_rescan.py	/^Call = enum.Enum("Call", "single multiaddress multiscript")$/;"	v
CallFunctionInValidationInterfaceQueue	src/validationinterface.cpp	/^void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {$/;"	f
CallRPC	src/bitcoin-cli.cpp	/^static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)$/;"	f	file:
CallRPC	src/test/rpc_tests.cpp	/^UniValue CallRPC(std::string args)$/;"	f
CallbacksPending	src/scheduler.cpp	/^size_t SingleThreadedSchedulerClient::CallbacksPending() {$/;"	f	class:SingleThreadedSchedulerClient
CallbacksPending	src/validationinterface.cpp	/^size_t CMainSignals::CallbacksPending() {$/;"	f	class:CMainSignals
CalledProcessError	test/functional/test_framework/util.py	/^from subprocess import CalledProcessError$/;"	i
CanAccelerateCRC32C	src/leveldb/util/crc32c.cc	/^static bool CanAccelerateCRC32C() {$/;"	f	namespace:leveldb::crc32c
CanAppend	src/leveldb/db/recovery_test.cc	/^  bool CanAppend() {$/;"	f	class:leveldb::RecoveryTest
CanGenerateKeys	src/wallet/wallet.cpp	/^bool CWallet::CanGenerateKeys()$/;"	f	class:CWallet
CanGetAddresses	src/wallet/wallet.cpp	/^bool CWallet::CanGetAddresses(bool internal)$/;"	f	class:CWallet
Capitalize	src/util/strencodings.cpp	/^std::string Capitalize(std::string str)$/;"	f
CaseInsensitiveEqual	src/test/bech32_tests.cpp	/^static bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)$/;"	f	file:
CastToBool	src/script/interpreter.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
Cat	src/bech32.cpp	/^data Cat(data x, const data& y)$/;"	f	namespace:__anon116
Ch	src/crypto/sha256.cpp	/^uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon40::sha256
Ch	src/crypto/sha256_avx2.cpp	/^__m256i inline Ch(__m256i x, __m256i y, __m256i z) { return Xor(z, And(x, Xor(y, z))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Ch	src/crypto/sha256_sse41.cpp	/^__m128i inline Ch(__m128i x, __m128i y, __m128i z) { return Xor(z, And(x, Xor(y, z))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Ch	src/crypto/sha512.cpp	/^uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon39::sha512
Ch	src/secp256k1/src/hash_impl.h	/^#define Ch(/;"	d
Ch	src/secp256k1/src/hash_impl.h	/^#undef Ch$/;"	d
ChaCha20	src/crypto/chacha20.cpp	/^ChaCha20::ChaCha20()$/;"	f	class:ChaCha20
ChaCha20	src/crypto/chacha20.cpp	/^ChaCha20::ChaCha20(const unsigned char* k, size_t keylen)$/;"	f	class:ChaCha20
ChaCha20	src/crypto/chacha20.h	/^class ChaCha20$/;"	c
Chain	src/interfaces/chain.h	/^class Chain$/;"	c	namespace:interfaces
ChainActive	src/validation.cpp	/^CChain& ChainActive() { return g_chainstate.m_chain; }$/;"	f
ChainClient	src/interfaces/chain.h	/^class ChainClient$/;"	c	namespace:interfaces
ChainCode	src/hash.h	/^typedef uint256 ChainCode;$/;"	t
ChainCode	src/pubkey.h	/^typedef uint256 ChainCode;$/;"	t
ChainImpl	src/interfaces/chain.cpp	/^class ChainImpl : public Chain$/;"	c	namespace:interfaces::__anon129	file:
ChainMergeTestingSetup	src/test/util_tests.cpp	/^struct ChainMergeTestingSetup : public BasicTestingSetup {$/;"	s	file:
ChainStateFlushed	src/index/base.cpp	/^void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)$/;"	f	class:BaseIndex
ChainStateFlushed	src/interfaces/chain.h	/^        virtual void ChainStateFlushed(const CBlockLocator& locator) {}$/;"	f	class:interfaces::Chain::Notifications
ChainStateFlushed	src/validationinterface.cpp	/^    boost::signals2::scoped_connection ChainStateFlushed;$/;"	m	struct:ValidationInterfaceConnections	file:
ChainStateFlushed	src/validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;$/;"	m	struct:MainSignalsInstance	file:
ChainStateFlushed	src/validationinterface.cpp	/^void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {$/;"	f	class:CMainSignals
ChainStateFlushed	src/validationinterface.h	/^    virtual void ChainStateFlushed(const CBlockLocator &locator) {}$/;"	f	class:CValidationInterface
ChainStateFlushed	src/wallet/wallet.cpp	/^void CWallet::ChainStateFlushed(const CBlockLocator& loc)$/;"	f	class:CWallet
ChainSyncTimeoutState	src/net_processing.cpp	/^    struct ChainSyncTimeoutState {$/;"	s	struct:__anon89::CNodeState	file:
ChainTxData	src/chainparams.h	/^struct ChainTxData {$/;"	s
ChainstateWriteCrashTest	test/functional/feature_dbcrash.py	/^class ChainstateWriteCrashTest(BitcoinTestFramework):$/;"	c
Change	src/leveldb/db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	src/leveldb/db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	src/leveldb/table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
ChangePass	src/qt/askpassphrasedialog.h	/^        ChangePass, \/**< Ask old passphrase + new passphrase twice *\/$/;"	e	enum:AskPassphraseDialog::Mode
ChangeType	src/ui_interface.h	/^enum ChangeType$/;"	g
ChangeWalletPassphrase	src/wallet/wallet.cpp	/^bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)$/;"	f	class:CWallet
CharCast	src/serialize.h	/^inline char* CharCast(char* c) { return c; }$/;"	f
CharCast	src/serialize.h	/^inline char* CharCast(unsigned char* c) { return (char*)c; }$/;"	f
CharCast	src/serialize.h	/^inline const char* CharCast(const char* c) { return c; }$/;"	f
CharCast	src/serialize.h	/^inline const char* CharCast(const unsigned char* c) { return (const char*)c; }$/;"	f
CharType	src/test/util.h	/^bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)$/;"	v
CharType	src/test/util.h	/^void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {$/;"	v
Check	src/addrman.h	/^    void Check()$/;"	f	class:CAddrMan
Check	src/key.cpp	/^bool CKey::Check(const unsigned char *vch) {$/;"	f	class:CKey
Check	src/leveldb/db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
Check	src/test/descriptor_tests.cpp	/^void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)$/;"	f	namespace:__anon56
CheckAccessCoin	src/test/coins_tests.cpp	/^static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)$/;"	f	file:
CheckAdd	src/test/scriptnum_tests.cpp	/^static void CheckAdd(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckAddCoin	src/test/coins_tests.cpp	/^static void CheckAddCoin(Args&&... args)$/;"	f	file:
CheckAddCoinBase	src/test/coins_tests.cpp	/^static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)$/;"	f	file:
CheckBlock	src/validation.cpp	/^bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
CheckBlockHeader	src/validation.cpp	/^static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)$/;"	f	file:
CheckBlockIndex	src/validation.cpp	/^void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)$/;"	f	class:CChainState
CheckCompare	src/test/scriptnum_tests.cpp	/^static void CheckCompare(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckCondition	src/leveldb/db/c_test.c	/^#define CheckCondition(/;"	d	file:
CheckCreateInt	src/test/scriptnum_tests.cpp	/^static void CheckCreateInt(const int64_t& num)$/;"	f	file:
CheckCreateVch	src/test/scriptnum_tests.cpp	/^static void CheckCreateVch(const int64_t& num)$/;"	f	file:
CheckDel	src/leveldb/db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckDiskSpace	src/util/system.cpp	/^bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes)$/;"	f
CheckEqual	src/leveldb/db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckFilterLookups	src/test/blockfilter_index_tests.cpp	/^static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,$/;"	f	file:
CheckFinalTx	src/validation.cpp	/^bool CheckFinalTx(const CTransaction &tx, int flags)$/;"	f
CheckForStaleTipAndEvictPeers	src/net_processing.cpp	/^void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)$/;"	f	class:PeerLogicValidation
CheckGet	src/leveldb/db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckIncomingNonce	src/net.cpp	/^bool CConnman::CheckIncomingNonce(uint64_t nonce)$/;"	f	class:CConnman
CheckInitialOffsetRecord	src/leveldb/db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckInputsAndUpdateCoins	src/txmempool.cpp	/^static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& mempoolDuplicate, const int64_t spendheight)$/;"	f	file:
CheckIter	src/leveldb/db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckLockTime	src/script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLockTime) const$/;"	f	class:GenericTransactionSignatureChecker
CheckLockTime	src/script/interpreter.h	/^    virtual bool CheckLockTime(const CScriptNum& nLockTime) const$/;"	f	class:BaseSignatureChecker
CheckLowS	src/pubkey.cpp	/^\/* static *\/ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
CheckMinimalPush	src/script/interpreter.cpp	/^bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {$/;"	f	file:
CheckNegate	src/test/scriptnum_tests.cpp	/^static void CheckNegate(const int64_t& num)$/;"	f	file:
CheckNoError	src/leveldb/db/c_test.c	/^#define CheckNoError(/;"	d	file:
CheckOffsetPastEndReturnsNoRecords	src/leveldb/db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckParseTorReplyMapping	src/test/torcontrol_tests.cpp	/^static void CheckParseTorReplyMapping(std::string input, std::map<std::string,std::string> expected)$/;"	f	file:
CheckProofOfWork	src/pow.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)$/;"	f
CheckPubKeyEncoding	src/script/interpreter.cpp	/^bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, const SigVersion &sigversion, ScriptError* serror) {$/;"	f	file:
CheckPut	src/leveldb/db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
CheckSequence	src/script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSequence) const$/;"	f	class:GenericTransactionSignatureChecker
CheckSequence	src/script/interpreter.h	/^    virtual bool CheckSequence(const CScriptNum& nSequence) const$/;"	f	class:BaseSignatureChecker
CheckSequenceLocks	src/validation.cpp	/^bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp, bool useExistingLockPoints)$/;"	f
CheckSig	src/script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:GenericTransactionSignatureChecker
CheckSig	src/script/interpreter.h	/^    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:BaseSignatureChecker
CheckSig	src/script/sign.cpp	/^bool SignatureExtractorChecker::CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:SignatureExtractorChecker
CheckSignatureEncoding	src/script/interpreter.cpp	/^bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror) {$/;"	f
CheckSpendCoins	src/test/coins_tests.cpp	/^static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)$/;"	f	file:
CheckSplitTorReplyLine	src/test/torcontrol_tests.cpp	/^static void CheckSplitTorReplyLine(std::string input, std::string command, std::string args)$/;"	f	file:
CheckSubtract	src/test/scriptnum_tests.cpp	/^static void CheckSubtract(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckTransaction	src/consensus/tx_check.cpp	/^bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)$/;"	f
CheckTxInputs	src/consensus/tx_verify.cpp	/^bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee)$/;"	f	class:Consensus
CheckTxScriptsSanity	src/core_read.cpp	/^static bool CheckTxScriptsSanity(const CMutableTransaction& tx)$/;"	f	file:
CheckUniqueFileid	src/wallet/db.cpp	/^void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filename, Db& db, WalletDatabaseFileId& fileid)$/;"	f	namespace:__anon117
CheckUnparsable	src/test/descriptor_tests.cpp	/^void CheckUnparsable(const std::string& prv, const std::string& pub)$/;"	f	namespace:__anon56
CheckVarIntMode	src/serialize.h	/^    constexpr CheckVarIntMode()$/;"	f	struct:CheckVarIntMode
CheckVarIntMode	src/serialize.h	/^struct CheckVarIntMode {$/;"	s
CheckWarmup	src/rest.cpp	/^static bool CheckWarmup(HTTPRequest* req)$/;"	f	file:
CheckWithFlag	src/test/transaction_tests.cpp	/^static void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& input, int flags, bool success)$/;"	f	file:
CheckWriteCoins	src/test/coins_tests.cpp	/^void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)$/;"	f
Check_	src/addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
CheckpointLSN	src/wallet/db.cpp	/^void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)$/;"	f	class:BerkeleyEnvironment
Checkpoints	src/chainparams.h	/^    const CCheckpointData& Checkpoints() const { return checkpointData; }$/;"	f	class:CChainParams
ChunkToSizeMap	src/support/lockedpool.h	/^    typedef std::unordered_map<char*, SizeToChunkSortedMap::const_iterator> ChunkToSizeMap;$/;"	t	class:Arena
Class	src/qt/notificator.h	/^    enum Class$/;"	g	class:Notificator
CleanKey	src/wallet/crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Cleanup	src/leveldb/include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupBlockRevFiles	src/init.cpp	/^static void CleanupBlockRevFiles()$/;"	f	file:
CleanupCompaction	src/leveldb/db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	src/leveldb/include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	src/leveldb/db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon18
Clear	src/addrman.h	/^    void Clear()$/;"	f	class:CAddrMan
Clear	src/coins.h	/^    void Clear() {$/;"	f	class:Coin
Clear	src/dbwrapper.h	/^    void Clear()$/;"	f	class:CDBBatch
Clear	src/leveldb/db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	src/leveldb/db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	src/leveldb/db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	src/leveldb/util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
Clear	src/torcontrol.cpp	/^    void Clear()$/;"	f	class:TorControlReply
Clear	src/versionbits.cpp	/^void VersionBitsCache::Clear()$/;"	f	class:VersionBitsCache
ClearArgs	src/util/system.h	/^    void ClearArgs() {$/;"	f	class:ArgsManager
ClearBanned	src/banman.cpp	/^void BanMan::ClearBanned()$/;"	f	class:BanMan
ClearCurrent	src/policy/fees.cpp	/^void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)$/;"	f	class:TxConfirmStats
ClearDatadirCache	src/util/system.cpp	/^void ClearDatadirCache()$/;"	f
ClearNew	src/addrman.cpp	/^void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)$/;"	f	class:CAddrMan
ClearNodes	src/test/denialofservice_tests.cpp	/^    void ClearNodes()$/;"	f	struct:CConnmanTest
ClearPrioritisation	src/txmempool.cpp	/^void CTxMemPool::ClearPrioritisation(const uint256 hash)$/;"	f	class:CTxMemPool
ClearSavedValue	src/leveldb/db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon29::DBIter	file:
ClickableLabel	src/qt/guiutil.h	/^    class ClickableLabel : public QLabel$/;"	c	namespace:GUIUtil
ClickableProgressBar	src/qt/guiutil.h	/^    class ClickableProgressBar : public QProgressBar$/;"	c	namespace:GUIUtil
ClientAllowed	src/httpserver.cpp	/^static bool ClientAllowed(const CNetAddr& netaddr)$/;"	f	file:
ClientModel	src/qt/clientmodel.cpp	/^ClientModel::ClientModel(interfaces::Node& node, OptionsModel *_optionsModel, QObject *parent) :$/;"	f	class:ClientModel
ClientModel	src/qt/clientmodel.h	/^class ClientModel : public QObject$/;"	c
ClipToRange	src/leveldb/db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	src/leveldb/db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	src/leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Close() {$/;"	f	class:leveldb::TestWritableFile
Close	src/leveldb/db/leveldbutil.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon31::StdoutPrinter
Close	src/leveldb/db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	src/leveldb/db/recovery_test.cc	/^  void Close() {$/;"	f	class:leveldb::RecoveryTest
Close	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon35::WritableFileImpl
Close	src/leveldb/table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	src/leveldb/util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Close	src/leveldb/util/env_win.cc	/^Status Win32WritableFile::Close()$/;"	f	class:leveldb::Win32::Win32WritableFile
Close	src/wallet/db.cpp	/^void BerkeleyBatch::Close()$/;"	f	class:BerkeleyBatch
Close	src/wallet/db.cpp	/^void BerkeleyEnvironment::Close()$/;"	f	class:BerkeleyEnvironment
CloseDB	src/leveldb/db/fault_injection_test.cc	/^  void CloseDB() {$/;"	f	class:leveldb::FaultInjectionTest
CloseDb	src/wallet/db.cpp	/^void BerkeleyEnvironment::CloseDb(const std::string& strFile)$/;"	f	class:BerkeleyEnvironment
CloseSocket	src/netbase.cpp	/^bool CloseSocket(SOCKET& hSocket)$/;"	f
CloseSocketDisconnect	src/net.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CmpCompare	src/leveldb/db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	src/leveldb/db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	src/leveldb/db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	src/leveldb/include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	src/leveldb/util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb	file:
Coin	src/coins.h	/^    Coin() : fCoinBase(false), nHeight(0) { }$/;"	f	class:Coin
Coin	src/coins.h	/^    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}$/;"	f	class:Coin
Coin	src/coins.h	/^    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}$/;"	f	class:Coin
Coin	src/coins.h	/^class Coin$/;"	c
CoinControlDialog	src/qt/coincontroldialog.cpp	/^CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:CoinControlDialog
CoinControlDialog	src/qt/coincontroldialog.h	/^class CoinControlDialog : public QDialog$/;"	c
CoinControlFeatures	src/qt/optionsmodel.h	/^        CoinControlFeatures,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
CoinControlTreeWidget	src/qt/coincontroltreewidget.cpp	/^CoinControlTreeWidget::CoinControlTreeWidget(QWidget *parent) :$/;"	f	class:CoinControlTreeWidget
CoinControlTreeWidget	src/qt/coincontroltreewidget.h	/^class CoinControlTreeWidget : public QTreeWidget$/;"	c
CoinEligibilityFilter	src/wallet/coinselection.h	/^    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_ancestors) {}$/;"	f	struct:CoinEligibilityFilter
CoinEligibilityFilter	src/wallet/coinselection.h	/^    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors, uint64_t max_descendants) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_descendants) {}$/;"	f	struct:CoinEligibilityFilter
CoinEligibilityFilter	src/wallet/coinselection.h	/^struct CoinEligibilityFilter$/;"	s
CoinEntry	src/txdb.cpp	/^    explicit CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}$/;"	f	struct:__anon121::CoinEntry
CoinEntry	src/txdb.cpp	/^struct CoinEntry {$/;"	s	namespace:__anon121	file:
CoinSelection	src/bench/coin_selection.cpp	/^static void CoinSelection(benchmark::State& state)$/;"	f	file:
CoinSelectionParams	src/wallet/wallet.h	/^    CoinSelectionParams() {}$/;"	f	struct:CoinSelectionParams
CoinSelectionParams	src/wallet/wallet.h	/^    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}$/;"	f	struct:CoinSelectionParams
CoinSelectionParams	src/wallet/wallet.h	/^struct CoinSelectionParams$/;"	s
CoinSet	src/bench/coin_selection.cpp	/^typedef std::set<CInputCoin> CoinSet;$/;"	t	file:
CoinSet	src/wallet/test/coinselector_tests.cpp	/^typedef std::set<CInputCoin> CoinSet;$/;"	t	file:
CoinbaseCategoryTest	test/functional/wallet_coinbase_category.py	/^class CoinbaseCategoryTest(BitcoinTestFramework):$/;"	c
CoinsViewScanReserver	src/rpc/blockchain.cpp	/^    explicit CoinsViewScanReserver() : m_could_reserve(false) {}$/;"	f	class:CoinsViewScanReserver
CoinsViewScanReserver	src/rpc/blockchain.cpp	/^class CoinsViewScanReserver$/;"	c	file:
ColorizeIcon	src/qt/platformstyle.cpp	/^QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)$/;"	f	namespace:__anon67
ColorizeIcon	src/qt/platformstyle.cpp	/^QIcon ColorizeIcon(const QString& filename, const QColor& colorbase)$/;"	f	namespace:__anon67
ColorizeImage	src/qt/platformstyle.cpp	/^QImage ColorizeImage(const QString& filename, const QColor& colorbase)$/;"	f	namespace:__anon67
Column	src/qt/csvmodelwriter.h	/^    struct Column$/;"	s	class:CSVModelWriter
ColumnIndex	src/qt/addresstablemodel.h	/^    enum ColumnIndex {$/;"	g	class:AddressTableModel
ColumnIndex	src/qt/bantablemodel.h	/^    enum ColumnIndex {$/;"	g	class:BanTableModel
ColumnIndex	src/qt/peertablemodel.h	/^    enum ColumnIndex {$/;"	g	class:PeerTableModel
ColumnIndex	src/qt/recentrequeststablemodel.h	/^    enum ColumnIndex {$/;"	g	class:RecentRequestsTableModel
ColumnIndex	src/qt/transactiontablemodel.h	/^    enum ColumnIndex {$/;"	g	class:TransactionTableModel
ColumnWidths	src/qt/receivecoinsdialog.h	/^    enum ColumnWidths {$/;"	g	class:ReceiveCoinsDialog
ColumnWidths	src/qt/rpcconsole.h	/^    enum ColumnWidths$/;"	g	class:RPCConsole
ColumnWidths	src/qt/transactionview.h	/^    enum ColumnWidths {$/;"	g	class:TransactionView
CombinePSBTs	src/psbt.cpp	/^TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs)$/;"	f
CombineSignatures	src/test/script_tests.cpp	/^SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction& tx, const SignatureData& scriptSig1, const SignatureData& scriptSig2)$/;"	f
CombineSignatures	src/test/transaction_tests.cpp	/^SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)$/;"	f
CombinerAll	src/net.h	/^struct CombinerAll$/;"	s
ComboDescriptor	src/script/descriptor.cpp	/^    ComboDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "combo") {}$/;"	f	class:__anon75::final
Command	src/torcontrol.cpp	/^bool TorControlConnection::Command(const std::string &cmd, const ReplyHandlerCB& reply_handler)$/;"	f	class:TorControlConnection
Command	test/functional/test_framework/socks5.py	/^class Command:$/;"	c
CommandLineRPC	src/bitcoin-cli.cpp	/^static int CommandLineRPC(int argc, char *argv[])$/;"	f	file:
CommandLineRawTx	src/bitcoin-tx.cpp	/^static int CommandLineRawTx(int argc, char* argv[])$/;"	f	file:
Commit	src/index/base.cpp	/^bool BaseIndex::Commit()$/;"	f	class:BaseIndex
CommitInternal	src/index/base.cpp	/^bool BaseIndex::CommitInternal(CDBBatch& batch)$/;"	f	class:BaseIndex
CommitInternal	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::CommitInternal(CDBBatch& batch)$/;"	f	class:BlockFilterIndex
CommitTransaction	src/wallet/feebumper.cpp	/^Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransaction&& mtx, std::vector<std::string>& errors, uint256& bumped_txid)$/;"	f	namespace:feebumper
CommitTransaction	src/wallet/wallet.cpp	/^bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state)$/;"	f	class:CWallet
Compact	src/leveldb/db/db_bench.cc	/^  void Compact(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Compact	src/leveldb/db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Compact	src/streams.h	/^    inline void Compact()$/;"	f	class:CDataStream
CompactBlocksTest	test/functional/p2p_compactblocks.py	/^class CompactBlocksTest(BitcoinTestFramework):$/;"	c
CompactMemTable	src/leveldb/db/db_impl.cc	/^void DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactMemTable	src/leveldb/db/recovery_test.cc	/^  void CompactMemTable() {$/;"	f	class:leveldb::RecoveryTest
CompactRange	src/dbwrapper.h	/^    void CompactRange(const K& key_begin, const K& key_end) const$/;"	f	class:CDBWrapper
CompactRange	src/leveldb/db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	src/leveldb/db/db_test.cc	/^  virtual void CompactRange(const Slice* start, const Slice* end) {$/;"	f	class:leveldb::ModelDB
CompactRange	src/leveldb/db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	src/leveldb/db/version_set.cc	/^Compaction::Compaction(const Options* options, int level)$/;"	f	class:leveldb::Compaction
Compaction	src/leveldb/db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	src/leveldb/db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	src/leveldb/db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	src/leveldb/db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	src/leveldb/db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	src/leveldb/db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	src/leveldb/include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	src/leveldb/db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	src/leveldb/db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	src/leveldb/db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	src/leveldb/table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	src/leveldb/table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon15::ReverseKeyComparator
Compare	src/leveldb/util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
Compare	src/uint256.h	/^    inline int Compare(const base_blob& other) const { return memcmp(data, other.data, sizeof(data)); }$/;"	f	class:base_blob
CompareBlocksByHeight	src/rpc/blockchain.cpp	/^struct CompareBlocksByHeight$/;"	s	file:
CompareCTxMemPoolIter	src/miner.h	/^struct CompareCTxMemPoolIter {$/;"	s
CompareDepthAndScore	src/txmempool.cpp	/^bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)$/;"	f	class:CTxMemPool
CompareInvMempoolOrder	src/net_processing.cpp	/^    explicit CompareInvMempoolOrder(CTxMemPool *_mempool)$/;"	f	class:__anon90::CompareInvMempoolOrder
CompareInvMempoolOrder	src/net_processing.cpp	/^class CompareInvMempoolOrder$/;"	c	namespace:__anon90	file:
CompareIteratorByHash	src/txmempool.h	/^    struct CompareIteratorByHash {$/;"	s	class:CTxMemPool
CompareIterators	src/leveldb/db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompareNetGroupKeyed	src/net.cpp	/^static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {$/;"	f	file:
CompareNodeBlockTime	src/net.cpp	/^static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareNodeTXTime	src/net.cpp	/^static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareTo	src/arith_uint256.cpp	/^int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const$/;"	f	class:base_uint
CompareTxIterByAncestorCount	src/miner.h	/^struct CompareTxIterByAncestorCount {$/;"	s
CompareTxMemPoolEntryByAncestorFee	src/txmempool.h	/^class CompareTxMemPoolEntryByAncestorFee$/;"	c
CompareTxMemPoolEntryByDescendantScore	src/txmempool.h	/^class CompareTxMemPoolEntryByDescendantScore$/;"	c
CompareTxMemPoolEntryByEntryTime	src/txmempool.h	/^class CompareTxMemPoolEntryByEntryTime$/;"	c
CompareTxMemPoolEntryByScore	src/txmempool.h	/^class CompareTxMemPoolEntryByScore$/;"	c
CompatTests	src/qt/test/compattests.h	/^class CompatTests : public QObject$/;"	c
CompressAmount	src/compressor.cpp	/^uint64_t CompressAmount(uint64_t n)$/;"	f
CompressScript	src/compressor.cpp	/^bool CompressScript(const CScript& script, std::vector<unsigned char> &out)$/;"	f
CompressibleString	src/leveldb/util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	src/leveldb/include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ComputeBlockVersion	src/validation.cpp	/^int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
ComputeEntry	src/script/sigcache.cpp	/^    ComputeEntry(uint256& entry, const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubkey)$/;"	f	class:__anon84::CSignatureCache
ComputeFilter	src/test/blockfilter_index_tests.cpp	/^static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,$/;"	f	file:
ComputeHash	src/primitives/transaction.cpp	/^uint256 CTransaction::ComputeHash() const$/;"	f	class:CTransaction
ComputeHeader	src/blockfilter.cpp	/^uint256 BlockFilter::ComputeHeader(const uint256& prev_header) const$/;"	f	class:BlockFilter
ComputeMerkleBranch	src/test/merkle_tests.cpp	/^static std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {$/;"	f	file:
ComputeMerkleRoot	src/consensus/merkle.cpp	/^uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {$/;"	f
ComputeMerkleRootFromBranch	src/test/merkle_tests.cpp	/^static uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {$/;"	f	file:
ComputeNextBlockAndDepth	src/rpc/blockchain.cpp	/^static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* blockindex, const CBlockIndex*& next)$/;"	f	file:
ComputeResponse	src/torcontrol.cpp	/^static std::vector<uint8_t> ComputeResponse(const std::string &key, const std::vector<uint8_t> &cookie,  const std::vector<uint8_t> &clientNonce, const std::vector<uint8_t> &serverNonce)$/;"	f	file:
ComputeTimeSmart	src/wallet/wallet.cpp	/^unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const$/;"	f	class:CWallet
ComputeWitnessHash	src/primitives/transaction.cpp	/^uint256 CTransaction::ComputeWitnessHash() const$/;"	f	class:CTransaction
ConcurrentReader	src/leveldb/db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	src/leveldb/db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	src/leveldb/db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
CondVar	src/leveldb/port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	src/leveldb/port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	src/leveldb/port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	src/leveldb/port/port_win.cc	/^CondVar::CondVar(Mutex* mu) :$/;"	f	class:leveldb::port::CondVar
CondVar	src/leveldb/port/port_win.h	/^class CondVar {$/;"	c	namespace:leveldb::port
ConfArgsTest	test/functional/feature_config_args.py	/^class ConfArgsTest(BitcoinTestFramework):$/;"	c
ConfirmMessage	src/qt/test/util.cpp	/^void ConfirmMessage(QString* text, int msec)$/;"	f
ConfirmSend	src/qt/test/wallettests.cpp	/^void ConfirmSend(QString* text = nullptr, bool cancel = false)$/;"	f	namespace:__anon63
Confirmed	src/qt/transactionrecord.h	/^        Confirmed,          \/**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **\/$/;"	e	enum:TransactionStatus::Status
ConfirmedRole	src/qt/transactiontablemodel.h	/^        ConfirmedRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Confirming	src/qt/transactionrecord.h	/^        Confirming,         \/**< Confirmed, but waiting for the recommended number of confirmations **\/$/;"	e	enum:TransactionStatus::Status
Conflicted	src/qt/transactionrecord.h	/^        Conflicted,         \/**< Conflicts with other transaction or mempool **\/$/;"	e	enum:TransactionStatus::Status
Connect	src/torcontrol.cpp	/^bool TorControlConnection::Connect(const std::string &target, const ConnectionCB& _connected, const ConnectionCB&  _disconnected)$/;"	f	class:TorControlConnection
ConnectBlock	src/validation.cpp	/^bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,$/;"	f	class:CChainState
ConnectNode	src/net.cpp	/^CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection)$/;"	f	class:CConnman
ConnectSocketDirectly	src/netbase.cpp	/^bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout, bool manual_connection)$/;"	f
ConnectThroughProxy	src/netbase.cpp	/^bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectTip	src/validation.cpp	/^bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)$/;"	f	class:CChainState
ConnectTrace	src/validation.cpp	/^    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {$/;"	f	class:ConnectTrace
ConnectTrace	src/validation.cpp	/^class ConnectTrace {$/;"	c	file:
ConnectWallet	src/qt/splashscreen.cpp	/^void SplashScreen::ConnectWallet(std::unique_ptr<interfaces::Wallet> wallet)$/;"	f	class:SplashScreen
Connected	src/addrman.h	/^    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	src/addrman.cpp	/^void CAddrMan::Connected_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
ConnectionCB	src/torcontrol.cpp	/^    typedef std::function<void(TorControlConnection&)> ConnectionCB;$/;"	t	class:TorControlConnection	file:
Consensus	src/consensus/params.h	/^namespace Consensus {$/;"	n
Consensus	src/consensus/tx_verify.h	/^namespace Consensus {$/;"	n
Consensus	src/miner.h	/^namespace Consensus { struct Params; };$/;"	n
ConsiderEviction	src/net_processing.cpp	/^void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)$/;"	f	class:PeerLogicValidation
ConsolePrinter	src/bench/bench.h	/^class ConsolePrinter : public Printer$/;"	c	namespace:benchmark
Const	src/script/descriptor.cpp	/^bool Const(const std::string& str, Span<const char>& sp)$/;"	f	namespace:__anon75
ConstPubkeyProvider	src/script/descriptor.cpp	/^    ConstPubkeyProvider(const CPubKey& pubkey) : m_pubkey(pubkey) {}$/;"	f	class:__anon75::final
Construct	src/wallet/init.cpp	/^void WalletInit::Construct(InitInterfaces& interfaces) const$/;"	f	class:WalletInit
ConstructGCSFilter	src/bench/gcs_filter.cpp	/^static void ConstructGCSFilter(benchmark::State& state)$/;"	f	file:
ConstructTransaction	src/rpc/rawtransaction_util.cpp	/^CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf)$/;"	f
Constructor	src/leveldb/table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	src/leveldb/table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeDecimalNumber	src/leveldb/util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	src/chain.h	/^    bool Contains(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Contains	src/leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	src/leveldb/db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	src/leveldb/db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ContextualCheckBlock	src/validation.cpp	/^static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f	file:
ControlMutex	src/checkqueue.h	/^    boost::mutex ControlMutex;$/;"	m	class:CCheckQueue
ConvertBits	src/util/strencodings.h	/^bool ConvertBits(const O& outfn, I it, I end) {$/;"	f
ConvertLogFilesToTables	src/leveldb/db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon30::Repairer	file:
ConvertLogToTable	src/leveldb/db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon30::Repairer	file:
CopyFrom	src/qt/walletmodel.cpp	/^void WalletModel::UnlockContext::CopyFrom(UnlockContext&& rhs)$/;"	f	class:WalletModel::UnlockContext
CopyHeightIndexToHashIndex	src/index/blockfilterindex.cpp	/^static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,$/;"	f	file:
CopySettings	src/qt/optionsmodel.cpp	/^static void CopySettings(QSettings& dst, const QSettings& src)$/;"	f	file:
CopyState	src/leveldb/util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	src/leveldb/db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
CopyrightHolders	src/util/system.cpp	/^std::string CopyrightHolders(const std::string& strPrefix)$/;"	f
Correct_Queue	src/test/checkqueue_tests.cpp	/^typedef CCheckQueue<FakeCheckCheckCompletion> Correct_Queue;$/;"	t	file:
Correct_Queue_range	src/test/checkqueue_tests.cpp	/^static void Correct_Queue_range(std::vector<size_t> range)$/;"	f	file:
Corrupt	src/leveldb/db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corruption	src/leveldb/db/dumpfile.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon27::CorruptionReporter
Corruption	src/leveldb/db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	src/leveldb/include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	src/leveldb/table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionReporter	src/leveldb/db/dumpfile.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon27	file:
CorruptionTest	src/leveldb/db/corruption_test.cc	/^  CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	src/leveldb/db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb	file:
Count	src/leveldb/db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountBits	src/crypto/common.h	/^uint64_t static inline CountBits(uint64_t x)$/;"	f
CountFiles	src/leveldb/db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
CountWitnessSigOps	src/script/interpreter.cpp	/^size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)$/;"	f
Crc32c	src/leveldb/db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Create	src/addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)$/;"	f	class:CAddrMan
Create	src/test/addrman_tests.cpp	/^    CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr)$/;"	f	class:CAddrManTest
Create	src/wallet/db.h	/^    static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)$/;"	f	class:BerkeleyDatabase
Create	src/zmq/zmqabstractnotifier.h	/^    static CZMQAbstractNotifier* Create()$/;"	f	class:CZMQAbstractNotifier
Create	src/zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface* CZMQNotificationInterface::Create()$/;"	f	class:CZMQNotificationInterface
CreateAndProcessBlock	src/test/setup_common.cpp	/^TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)$/;"	f	class:TestChain100Setup
CreateBaseChainParams	src/chainparamsbase.cpp	/^std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)$/;"	f
CreateBlock	src/test/blockfilter_index_tests.cpp	/^static CBlock CreateBlock(const CBlockIndex* prev,$/;"	f	file:
CreateBlockIndexWithNbits	src/test/blockchain_tests.cpp	/^static CBlockIndex* CreateBlockIndexWithNbits(uint32_t nbits)$/;"	f	file:
CreateCache	test/functional/create_cache.py	/^class CreateCache(BitcoinTestFramework):$/;"	c
CreateChainParams	src/chainparams.cpp	/^std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)$/;"	f
CreateChecksum	src/bech32.cpp	/^data CreateChecksum(const std::string& hrp, const data& values)$/;"	f	namespace:__anon116
CreateCreditAndSpend	src/test/transaction_tests.cpp	/^static void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)$/;"	f	file:
CreateDir	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
CreateDir	src/leveldb/include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	src/leveldb/util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon8::PosixEnv
CreateDir	src/leveldb/util/env_win.cc	/^Status Win32Env::CreateDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
CreateDirInner	src/leveldb/util/env_win.cc	/^static Status CreateDirInner( const std::string& dirname )$/;"	f	namespace:leveldb::Win32
CreateDummy	src/wallet/db.h	/^    static std::unique_ptr<BerkeleyDatabase> CreateDummy()$/;"	f	class:BerkeleyDatabase
CreateFilter	src/leveldb/db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	src/leveldb/db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	src/leveldb/table/filter_block_test.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::TestHashFilter
CreateFilter	src/leveldb/util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
CreateGenesisBlock	src/chainparams.cpp	/^static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateGenesisBlock	src/chainparams.cpp	/^static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateInstance	src/support/lockedpool.cpp	/^void LockedPoolManager::CreateInstance()$/;"	f	class:LockedPoolManager
CreateInternal	src/test/netbase_tests.cpp	/^static CNetAddr CreateInternal(const char* host)$/;"	f	file:
CreateMock	src/wallet/db.h	/^    static std::unique_ptr<BerkeleyDatabase> CreateMock()$/;"	f	class:BerkeleyDatabase
CreateMultisigRedeemscript	src/rpc/util.cpp	/^CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys)$/;"	f
CreateNewBlock	src/miner.cpp	/^std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)$/;"	f	class:BlockAssembler
CreateObfuscateKey	src/dbwrapper.cpp	/^std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const$/;"	f	class:CDBWrapper
CreatePidFile	src/init.cpp	/^NODISCARD static bool CreatePidFile()$/;"	f	file:
CreateProcess	build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	src/secp256k1/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	src/secp256k1/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	src/univalue/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	src/univalue/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateRateBumpTransaction	src/wallet/feebumper.cpp	/^Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<std::string>& errors,$/;"	f	namespace:feebumper
CreateSig	src/script/sign.cpp	/^bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:MutableTransactionSignatureCreator
CreateSig	src/script/sign.cpp	/^static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CPubKey& pubkey, const CScript& scriptcode, SigVersion sigversion)$/;"	f	file:
CreateSocket	src/netbase.cpp	/^SOCKET CreateSocket(const CService &addrConnect)$/;"	f
CreateTotalBumpTransaction	src/wallet/feebumper.cpp	/^Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,$/;"	f	namespace:feebumper
CreateTransaction	src/wallet/wallet.cpp	/^bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,$/;"	f	class:CWallet
CreateTxWalletTest	test/functional/wallet_create_tx.py	/^class CreateTxWalletTest(BitcoinTestFramework):$/;"	c
CreateWallet	src/wallet/wallettool.cpp	/^static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)$/;"	f	namespace:WalletTool
CreateWalletFromFile	src/wallet/wallet.cpp	/^std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)$/;"	f	class:CWallet
CreateWalletTest	test/functional/wallet_createwallet.py	/^class CreateWalletTest(BitcoinTestFramework):$/;"	c
Critical	src/qt/notificator.h	/^        Critical        \/**< An error occurred *\/$/;"	e	enum:Notificator::Class
Crypt	src/crypto/chacha20.cpp	/^void ChaCha20::Crypt(const unsigned char* m, unsigned char* c, size_t bytes)$/;"	f	class:ChaCha20
CuckooCache	src/cuckoocache.h	/^namespace CuckooCache$/;"	n
CurrentDir	src/leveldb/util/env_win.cc	/^static const std::string CurrentDir = GetCurrentDir();$/;"	m	namespace:leveldb::Win32	file:
CurrentDirW	src/leveldb/util/env_win.cc	/^static const std::wstring CurrentDirW = GetCurrentDirW();$/;"	m	namespace:leveldb::Win32	file:
CurrentFileName	src/leveldb/db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	src/leveldb/db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	src/leveldb/table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
Cursor	src/coins.cpp	/^CCoinsViewCursor *CCoinsView::Cursor() const { return nullptr; }$/;"	f	class:CCoinsView
Cursor	src/coins.cpp	/^CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }$/;"	f	class:CCoinsViewBacked
Cursor	src/txdb.cpp	/^CCoinsViewCursor *CCoinsViewDB::Cursor() const$/;"	f	class:CCoinsViewDB
DATA	Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATA	src/secp256k1/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATA	src/univalue/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATABASE_FLUSH_INTERVAL	src/validation.h	/^static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;$/;"	v
DATABASE_WRITE_INTERVAL	src/validation.h	/^static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;$/;"	v
DATA_END	src/wallet/db.cpp	/^static const char *DATA_END = "DATA=END";$/;"	v	file:
DATE_COLUMN_WIDTH	src/qt/receivecoinsdialog.h	/^        DATE_COLUMN_WIDTH = 130,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
DATE_COLUMN_WIDTH	src/qt/transactionview.h	/^        DATE_COLUMN_WIDTH = 120,$/;"	e	enum:TransactionView::ColumnWidths
DB	src/index/base.cpp	/^BaseIndex::DB::DB(const fs::path& path, size_t n_cache_size, bool f_memory, bool f_wipe, bool f_obfuscate) :$/;"	f	class:BaseIndex::DB
DB	src/index/base.h	/^    class DB : public CDBWrapper$/;"	c	class:BaseIndex
DB	src/index/txindex.cpp	/^TxIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :$/;"	f	class:TxIndex::DB
DB	src/index/txindex.cpp	/^class TxIndex::DB : public BaseIndex::DB$/;"	c	class:TxIndex	file:
DB	src/leveldb/include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	src/leveldb/include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	src/leveldb/table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	src/leveldb/table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
DBErrors	src/wallet/walletdb.h	/^enum class DBErrors$/;"	c
DBHashKey	src/index/blockfilterindex.cpp	/^    DBHashKey(const uint256& hash_in) : hash(hash_in) {}$/;"	f	struct:__anon120::DBHashKey
DBHashKey	src/index/blockfilterindex.cpp	/^struct DBHashKey {$/;"	s	namespace:__anon120	file:
DBHeightKey	src/index/blockfilterindex.cpp	/^    DBHeightKey() : height(0) {}$/;"	f	struct:__anon120::DBHeightKey
DBHeightKey	src/index/blockfilterindex.cpp	/^    DBHeightKey(int height_in) : height(height_in) {}$/;"	f	struct:__anon120::DBHeightKey
DBHeightKey	src/index/blockfilterindex.cpp	/^struct DBHeightKey {$/;"	s	namespace:__anon120	file:
DBImpl	src/leveldb/db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	src/leveldb/db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	src/leveldb/db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon29::DBIter
DBIter	src/leveldb/db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon29	file:
DBState	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBState	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBSynchronize	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static void DBSynchronize(kyotocabinet::TreeDB* db_)$/;"	f	file:
DBTest	src/leveldb/db/db_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	src/leveldb/db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DBVal	src/index/blockfilterindex.cpp	/^struct DBVal {$/;"	s	namespace:__anon120	file:
DBWRAPPER_PREALLOC_KEY_SIZE	src/dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;$/;"	v
DBWRAPPER_PREALLOC_VALUE_SIZE	src/dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;$/;"	v
DB_BEST_BLOCK	src/index/base.cpp	/^constexpr char DB_BEST_BLOCK = 'B';$/;"	v
DB_BEST_BLOCK	src/index/txindex.cpp	/^constexpr char DB_BEST_BLOCK = 'B';$/;"	v
DB_BEST_BLOCK	src/txdb.cpp	/^static const char DB_BEST_BLOCK = 'B';$/;"	v	file:
DB_BLOCK_FILES	src/txdb.cpp	/^static const char DB_BLOCK_FILES = 'f';$/;"	v	file:
DB_BLOCK_HASH	src/index/blockfilterindex.cpp	/^constexpr char DB_BLOCK_HASH = 's';$/;"	v
DB_BLOCK_HEIGHT	src/index/blockfilterindex.cpp	/^constexpr char DB_BLOCK_HEIGHT = 't';$/;"	v
DB_BLOCK_INDEX	src/txdb.cpp	/^static const char DB_BLOCK_INDEX = 'b';$/;"	v	file:
DB_COIN	src/txdb.cpp	/^static const char DB_COIN = 'C';$/;"	v	file:
DB_COINS	src/txdb.cpp	/^static const char DB_COINS = 'c';$/;"	v	file:
DB_FILTER_POS	src/index/blockfilterindex.cpp	/^constexpr char DB_FILTER_POS = 'P';$/;"	v
DB_FLAG	src/txdb.cpp	/^static const char DB_FLAG = 'F';$/;"	v	file:
DB_HEAD_BLOCKS	src/txdb.cpp	/^static const char DB_HEAD_BLOCKS = 'H';$/;"	v	file:
DB_LAST_BLOCK	src/txdb.cpp	/^static const char DB_LAST_BLOCK = 'l';$/;"	v	file:
DB_REINDEX_FLAG	src/txdb.cpp	/^static const char DB_REINDEX_FLAG = 'R';$/;"	v	file:
DB_TEST	src/leveldb/table/table_test.cc	/^  DB_TEST$/;"	e	enum:leveldb::TestType	file:
DB_TXINDEX	src/index/txindex.cpp	/^constexpr char DB_TXINDEX = 't';$/;"	v
DB_TXINDEX_BLOCK	src/index/txindex.cpp	/^constexpr char DB_TXINDEX_BLOCK = 'T';$/;"	v
DEBIT	src/wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
DEBUG_CPPFLAGS	Makefile	/^DEBUG_CPPFLAGS = $/;"	m
DEBUG_CPPFLAGS	doc/man/Makefile	/^DEBUG_CPPFLAGS = $/;"	m
DEBUG_CPPFLAGS	src/Makefile	/^DEBUG_CPPFLAGS = $/;"	m
DEBUG_CXXFLAGS	Makefile	/^DEBUG_CXXFLAGS = $/;"	m
DEBUG_CXXFLAGS	doc/man/Makefile	/^DEBUG_CXXFLAGS = $/;"	m
DEBUG_CXXFLAGS	src/Makefile	/^DEBUG_CXXFLAGS = $/;"	m
DEBUG_TEST	src/util/system.h	/^    DEBUG_TEST,$/;"	m	class:OptionsCategory
DECORATION_SIZE	src/qt/overviewpage.cpp	/^#define DECORATION_SIZE /;"	d	file:
DEFAULT	src/serialize.h	/^enum class VarIntMode { DEFAULT, NONNEGATIVE_SIGNED };$/;"	m	class:VarIntMode
DEFAULT	src/test/descriptor_tests.cpp	/^constexpr int DEFAULT = 0;$/;"	m	namespace:__anon56	file:
DEFAULT_ACCEPT_DATACARRIER	src/script/standard.h	/^static const bool DEFAULT_ACCEPT_DATACARRIER = true;$/;"	v
DEFAULT_ANCESTOR_LIMIT	src/validation.h	/^static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;$/;"	v
DEFAULT_ANCESTOR_SIZE_LIMIT	src/validation.h	/^static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;$/;"	v
DEFAULT_AVOIDPARTIALSPENDS	src/wallet/wallet.h	/^static const bool DEFAULT_AVOIDPARTIALSPENDS = false;$/;"	v
DEFAULT_BANSCORE_THRESHOLD	src/validation.h	/^static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;$/;"	v
DEFAULT_BENCH_EVALUATIONS	src/bench/bench_bitcoin.cpp	/^static const int64_t DEFAULT_BENCH_EVALUATIONS = 5;$/;"	v	file:
DEFAULT_BENCH_FILTER	src/bench/bench_bitcoin.cpp	/^static const char* DEFAULT_BENCH_FILTER = ".*";$/;"	v	file:
DEFAULT_BENCH_PRINTER	src/bench/bench_bitcoin.cpp	/^static const char* DEFAULT_BENCH_PRINTER = "console";$/;"	v	file:
DEFAULT_BENCH_SCALING	src/bench/bench_bitcoin.cpp	/^static const char* DEFAULT_BENCH_SCALING = "1.0";$/;"	v	file:
DEFAULT_BLOCKFILTERINDEX	src/validation.h	/^static const char* const DEFAULT_BLOCKFILTERINDEX = "0";$/;"	v
DEFAULT_BLOCKSONLY	src/net.h	/^static const bool DEFAULT_BLOCKSONLY = false;$/;"	v
DEFAULT_BLOCK_MAX_WEIGHT	src/policy/policy.h	/^static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;$/;"	v
DEFAULT_BLOCK_MIN_TX_FEE	src/policy/policy.h	/^static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;$/;"	v
DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN	src/net_processing.h	/^static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;$/;"	v
DEFAULT_BYTES_PER_SIGOP	src/policy/policy.h	/^static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;$/;"	v
DEFAULT_CHECKBLOCKS	src/validation.h	/^static const signed int DEFAULT_CHECKBLOCKS = 6;$/;"	v
DEFAULT_CHECKLEVEL	src/validation.h	/^static const unsigned int DEFAULT_CHECKLEVEL = 3;$/;"	v
DEFAULT_CHECKPOINTS_ENABLED	src/validation.h	/^static const bool DEFAULT_CHECKPOINTS_ENABLED = true;$/;"	v
DEFAULT_CHOOSE_DATADIR	src/qt/intro.h	/^static const bool DEFAULT_CHOOSE_DATADIR = false;$/;"	v
DEFAULT_CONNECT_TIMEOUT	src/netbase.h	/^static const int DEFAULT_CONNECT_TIMEOUT = 5000;$/;"	v
DEFAULT_DEBUGLOGFILE	src/logging.cpp	/^const char * const DEFAULT_DEBUGLOGFILE = "debug.log";$/;"	v
DEFAULT_DESCENDANT_LIMIT	src/validation.h	/^static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;$/;"	v
DEFAULT_DESCENDANT_SIZE_LIMIT	src/validation.h	/^static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;$/;"	v
DEFAULT_DISABLE_WALLET	src/wallet/wallet.h	/^static const bool DEFAULT_DISABLE_WALLET = false;$/;"	v
DEFAULT_DISCARD_FEE	src/wallet/wallet.h	/^static const CAmount DEFAULT_DISCARD_FEE = 10000;$/;"	v
DEFAULT_ENABLE_REPLACEMENT	src/validation.h	/^static const bool DEFAULT_ENABLE_REPLACEMENT = true;$/;"	v
DEFAULT_FALLBACK_FEE	src/wallet/wallet.h	/^static const CAmount DEFAULT_FALLBACK_FEE = 20000;$/;"	v
DEFAULT_FEEFILTER	src/validation.h	/^static const bool DEFAULT_FEEFILTER = true;$/;"	v
DEFAULT_FLUSHWALLET	src/wallet/walletdb.h	/^static const bool DEFAULT_FLUSHWALLET = true;$/;"	v
DEFAULT_FORCEDNSSEED	src/net.h	/^static const bool DEFAULT_FORCEDNSSEED = false;$/;"	v
DEFAULT_GUI_PROXY_HOST	src/qt/optionsmodel.cpp	/^const char *DEFAULT_GUI_PROXY_HOST = "127.0.0.1";$/;"	v
DEFAULT_GUI_PROXY_PORT	src/qt/optionsmodel.h	/^static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;$/;"	v
DEFAULT_HTTP_CLIENT_TIMEOUT	src/bitcoin-cli.cpp	/^static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;$/;"	v	file:
DEFAULT_HTTP_SERVER_TIMEOUT	src/httpserver.h	/^static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;$/;"	v
DEFAULT_HTTP_THREADS	src/httpserver.h	/^static const int DEFAULT_HTTP_THREADS=4;$/;"	v
DEFAULT_HTTP_WORKQUEUE	src/httpserver.h	/^static const int DEFAULT_HTTP_WORKQUEUE=16;$/;"	v
DEFAULT_INCLUDES	src/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src\/config$/;"	m
DEFAULT_INCLUDES	src/secp256k1/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src$/;"	m
DEFAULT_INCLUDES	src/univalue/Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFAULT_INCREMENTAL_RELAY_FEE	src/policy/policy.h	/^static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;$/;"	v
DEFAULT_KEYPOOL_SIZE	src/wallet/wallet.h	/^static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;$/;"	v
DEFAULT_LISTEN	src/net.h	/^static const bool DEFAULT_LISTEN = true;$/;"	v
DEFAULT_LISTEN_ONION	src/torcontrol.h	/^static const bool DEFAULT_LISTEN_ONION = true;$/;"	v
DEFAULT_LOGIPS	src/logging.h	/^static const bool DEFAULT_LOGIPS        = false;$/;"	v
DEFAULT_LOGTHREADNAMES	src/logging.h	/^static const bool DEFAULT_LOGTHREADNAMES = false;$/;"	v
DEFAULT_LOGTIMEMICROS	src/logging.h	/^static const bool DEFAULT_LOGTIMEMICROS = false;$/;"	v
DEFAULT_LOGTIMESTAMPS	src/logging.h	/^static const bool DEFAULT_LOGTIMESTAMPS = true;$/;"	v
DEFAULT_MAXRECEIVEBUFFER	src/net.h	/^static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;$/;"	v
DEFAULT_MAXSENDBUFFER	src/net.h	/^static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;$/;"	v
DEFAULT_MAX_MEMPOOL_SIZE	src/policy/policy.h	/^static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;$/;"	v
DEFAULT_MAX_ORPHAN_TRANSACTIONS	src/net_processing.h	/^static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;$/;"	v
DEFAULT_MAX_PEER_CONNECTIONS	src/net.h	/^static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;$/;"	v
DEFAULT_MAX_SIG_CACHE_SIZE	src/script/sigcache.h	/^static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 32;$/;"	v
DEFAULT_MAX_TIME_ADJUSTMENT	src/timedata.h	/^static const int64_t DEFAULT_MAX_TIME_ADJUSTMENT = 70 * 60;$/;"	v
DEFAULT_MAX_TIP_AGE	src/validation.h	/^static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;$/;"	v
DEFAULT_MAX_UPLOAD_TARGET	src/net.h	/^static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;$/;"	v
DEFAULT_MEMPOOL_EXPIRY	src/validation.h	/^static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;$/;"	v
DEFAULT_MIN_RELAY_TX_FEE	src/validation.h	/^static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;$/;"	v
DEFAULT_MISBEHAVING_BANTIME	src/banman.h	/^static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; \/\/ Default 24-hour ban$/;"	v
DEFAULT_NAMED	src/bitcoin-cli.cpp	/^static const bool DEFAULT_NAMED=false;$/;"	v	file:
DEFAULT_NAME_LOOKUP	src/netbase.h	/^static const int DEFAULT_NAME_LOOKUP = true;$/;"	v
DEFAULT_PAY_TX_FEE	src/wallet/wallet.h	/^constexpr CAmount DEFAULT_PAY_TX_FEE = 0;$/;"	v
DEFAULT_PEERBLOOMFILTERS	src/validation.h	/^static const bool DEFAULT_PEERBLOOMFILTERS = true;$/;"	v
DEFAULT_PEER_CONNECT_TIMEOUT	src/net.h	/^static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;$/;"	v
DEFAULT_PERMIT_BAREMULTISIG	src/policy/policy.h	/^static const bool DEFAULT_PERMIT_BAREMULTISIG = true;$/;"	v
DEFAULT_PERSIST_MEMPOOL	src/validation.h	/^static const bool DEFAULT_PERSIST_MEMPOOL = true;$/;"	v
DEFAULT_PLOT_HEIGHT	src/bench/bench_bitcoin.cpp	/^static const int64_t DEFAULT_PLOT_HEIGHT = 768;$/;"	v	file:
DEFAULT_PLOT_PLOTLYURL	src/bench/bench_bitcoin.cpp	/^static const char* DEFAULT_PLOT_PLOTLYURL = "https:\/\/cdn.plot.ly\/plotly-latest.min.js";$/;"	v	file:
DEFAULT_PLOT_WIDTH	src/bench/bench_bitcoin.cpp	/^static const int64_t DEFAULT_PLOT_WIDTH = 1024;$/;"	v	file:
DEFAULT_PRINTPRIORITY	src/miner.h	/^static const bool DEFAULT_PRINTPRIORITY = false;$/;"	v
DEFAULT_PROXYRANDOMIZE	src/init.cpp	/^static const bool DEFAULT_PROXYRANDOMIZE = true;$/;"	v	file:
DEFAULT_REST_ENABLE	src/init.cpp	/^static const bool DEFAULT_REST_ENABLE = false;$/;"	v	file:
DEFAULT_RPCCONNECT	src/bitcoin-cli.cpp	/^static const char DEFAULT_RPCCONNECT[] = "127.0.0.1";$/;"	v	file:
DEFAULT_RPC_SERIALIZE_VERSION	src/rpc/server.h	/^static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;$/;"	v
DEFAULT_SCRIPTCHECK_THREADS	src/validation.h	/^static const int DEFAULT_SCRIPTCHECK_THREADS = 0;$/;"	v
DEFAULT_SELFSIGNED_ROOTCERTS	src/qt/paymentrequestplus.h	/^static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;$/;"	v
DEFAULT_SPEND_ZEROCONF_CHANGE	src/wallet/wallet.h	/^static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;$/;"	v
DEFAULT_SPLASHSCREEN	src/qt/guiconstants.h	/^static const bool DEFAULT_SPLASHSCREEN = true;$/;"	v
DEFAULT_STOPAFTERBLOCKIMPORT	src/init.cpp	/^static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;$/;"	v	file:
DEFAULT_STOPATHEIGHT	src/validation.h	/^static const int DEFAULT_STOPATHEIGHT = 0;$/;"	v
DEFAULT_TOR_CONTROL	src/torcontrol.cpp	/^const std::string DEFAULT_TOR_CONTROL = "127.0.0.1:9051";$/;"	v
DEFAULT_TRANSACTION_MINFEE	src/wallet/wallet.h	/^static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;$/;"	v
DEFAULT_TXINDEX	src/validation.h	/^static const bool DEFAULT_TXINDEX = false;$/;"	v
DEFAULT_TX_CONFIRM_TARGET	src/wallet/wallet.h	/^static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;$/;"	v
DEFAULT_UIPLATFORM	src/qt/bitcoingui.cpp	/^const std::string BitcoinGUI::DEFAULT_UIPLATFORM =$/;"	m	class:BitcoinGUI	file:
DEFAULT_UIPLATFORM	src/qt/bitcoingui.h	/^    static const std::string DEFAULT_UIPLATFORM;$/;"	m	class:BitcoinGUI
DEFAULT_UPNP	src/net.h	/^static const bool DEFAULT_UPNP = USE_UPNP;$/;"	v
DEFAULT_UPNP	src/net.h	/^static const bool DEFAULT_UPNP = false;$/;"	v
DEFAULT_WALLETBROADCAST	src/wallet/wallet.h	/^static const bool DEFAULT_WALLETBROADCAST = true;$/;"	v
DEFAULT_WALLET_DBLOGSIZE	src/wallet/db.h	/^static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;$/;"	v
DEFAULT_WALLET_PRIVDB	src/wallet/db.h	/^static const bool DEFAULT_WALLET_PRIVDB = true;$/;"	v
DEFAULT_WALLET_RBF	src/wallet/wallet.h	/^static const bool DEFAULT_WALLET_RBF = false;$/;"	v
DEFAULT_WALLET_REJECT_LONG_CHAINS	src/wallet/wallet.h	/^static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;$/;"	v
DEFAULT_WHITELISTFORCERELAY	src/validation.h	/^static const bool DEFAULT_WHITELISTFORCERELAY = false;$/;"	v
DEFAULT_WHITELISTRELAY	src/validation.h	/^static const bool DEFAULT_WHITELISTRELAY = true;$/;"	v
DEFAULT_ZMQ_SNDHWM	src/zmq/zmqabstractnotifier.cpp	/^const int CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM;$/;"	m	class:CZMQAbstractNotifier	file:
DEFINED	src/versionbits.h	/^    DEFINED,$/;"	m	class:ThresholdState
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	doc/man/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	src/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	src/secp256k1/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	src/univalue/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	doc/man/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	src/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	src/secp256k1/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	src/univalue/Makefile	/^DEPDIR = .deps$/;"	m
DEPLOYMENT_TESTDUMMY	src/consensus/params.h	/^    DEPLOYMENT_TESTDUMMY,$/;"	e	enum:Consensus::DeploymentPos
DERSIG_HEIGHT	test/functional/feature_dersig.py	/^DERSIG_HEIGHT = 1251$/;"	v
DESIRED_SAMPLES	src/qt/trafficgraphwidget.cpp	/^#define DESIRED_SAMPLES /;"	d	file:
DEVICESDK	src/leveldb/Makefile	/^DEVICESDK=$(shell xcrun -sdk iphoneos --show-sdk-path)$/;"	m
DEVICE_ALLOBJS	src/leveldb/Makefile	/^DEVICE_ALLOBJS := $(DEVICE_LIBOBJECTS) $(DEVICE_MEMENVOBJECTS)$/;"	m
DEVICE_CFLAGS	src/leveldb/Makefile	/^DEVICE_CFLAGS = -isysroot "$(DEVICESDK)" -arch armv6 -arch armv7 -arch armv7s -arch arm64$/;"	m
DEVICE_LIBOBJECTS	src/leveldb/Makefile	/^DEVICE_LIBOBJECTS := $(addprefix $(DEVICE_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
DEVICE_MEMENVOBJECTS	src/leveldb/Makefile	/^DEVICE_MEMENVOBJECTS := $(addprefix $(DEVICE_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
DEVICE_OUTDIR	src/leveldb/Makefile	/^DEVICE_OUTDIR=out-ios-arm$/;"	m
DIRECT_FETCH_RESPONSE_TIME	test/functional/p2p_sendheaders.py	/^DIRECT_FETCH_RESPONSE_TIME = 0.05$/;"	v
DIRTY	src/coins.h	/^        DIRTY = (1 << 0), \/\/ This cache entry is potentially different from the version in the parent view.$/;"	e	enum:CCoinsCacheEntry::Flags
DIRTY	src/test/coins_tests.cpp	/^const static char DIRTY = CCoinsCacheEntry::DIRTY;$/;"	v	file:
DISABLE_REG	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
DISABLE_TEST	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
DISALLOW_COPY_AND_ASSIGN	src/leveldb/util/env_win.cc	/^#define DISALLOW_COPY_AND_ASSIGN(/;"	d	file:
DISCONNECT_FAILED	src/validation.cpp	/^    DISCONNECT_FAILED   \/\/ Something else went wrong.$/;"	e	enum:DisconnectResult	file:
DISCONNECT_OK	src/validation.cpp	/^    DISCONNECT_OK,      \/\/ All good.$/;"	e	enum:DisconnectResult	file:
DISCONNECT_UNCLEAN	src/validation.cpp	/^    DISCONNECT_UNCLEAN, \/\/ Rolled back, but UTXO set was inconsistent with block.$/;"	e	enum:DisconnectResult	file:
DISK	src/qt/clientmodel.h	/^    DISK,$/;"	m	class:BlockSource
DISTCHECK_CONFIGURE_FLAGS	Makefile	/^DISTCHECK_CONFIGURE_FLAGS = --enable-man$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	doc/man/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	src/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	src/secp256k1/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	src/univalue/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_ARCHIVES	src/secp256k1/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_ARCHIVES	src/univalue/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_COMMON	doc/man/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__DIST_COMMON)$/;"	m
DIST_COMMON	src/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__include_HEADERS_DIST) \\$/;"	m
DIST_COMMON	src/secp256k1/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_COMMON	src/univalue/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_CONTRIB	Makefile	/^DIST_CONTRIB = $(top_srcdir)\/contrib\/bitcoin-cli.bash-completion \\$/;"	m
DIST_DOCS	Makefile	/^DIST_DOCS = $(wildcard doc\/*.md) $(wildcard doc\/release-notes\/*.md)$/;"	m
DIST_SHARE	Makefile	/^DIST_SHARE = \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	doc/man/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	src/Makefile	/^DIST_SOURCES = $(crypto_libbitcoin_crypto_avx2_a_SOURCES) \\$/;"	m
DIST_SOURCES	src/secp256k1/Makefile	/^DIST_SOURCES = $(libsecp256k1_la_SOURCES) \\$/;"	m
DIST_SOURCES	src/univalue/Makefile	/^DIST_SOURCES = $(libunivalue_la_SOURCES) $(test_no_nul_SOURCES) \\$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = src doc\/man$/;"	m
DIST_SUBDIRS	src/Makefile	/^DIST_SUBDIRS = secp256k1 univalue$/;"	m
DIST_TARGETS	Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DIST_TARGETS	src/secp256k1/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DIST_TARGETS	src/univalue/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	doc/man/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	src/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	src/secp256k1/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	src/univalue/Makefile	/^DLLTOOL = false$/;"	m
DNSSeeds	src/chainparams.h	/^    const std::vector<std::string>& DNSSeeds() const { return vSeeds; }$/;"	f	class:CChainParams
DOCKER_EXEC	.travis/test_04_install.sh	/^DOCKER_EXEC () {$/;"	f
DOMAINNAME	src/netbase.cpp	/^    DOMAINNAME = 0x03,$/;"	e	enum:uint8_t	file:
DOMAINNAME	test/functional/test_framework/socks5.py	/^    DOMAINNAME = 0x03$/;"	v	class:AddressType
DOMINANT_STYLE_COMPILED	contrib/devtools/copyright_header.py	/^DOMINANT_STYLE_COMPILED = {}$/;"	v
DONE	src/leveldb/db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState	file:
DOUBLE_ESTIMATE	src/policy/fees.h	/^    DOUBLE_ESTIMATE,$/;"	m	class:FeeEstimateHorizon::FeeReason
DOUBLE_SUCCESS_PCT	src/policy/fees.h	/^    static constexpr double DOUBLE_SUCCESS_PCT = .95;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
DOWNLOAD_CONNECT_TIMEOUT	depends/Makefile	/^DOWNLOAD_CONNECT_TIMEOUT:=30$/;"	m
DOWNLOAD_RETRIES	depends/Makefile	/^DOWNLOAD_RETRIES:=3$/;"	m
DOXYGEN	Makefile	/^DOXYGEN = $/;"	m
DOXYGEN	doc/man/Makefile	/^DOXYGEN = $/;"	m
DOXYGEN	src/Makefile	/^DOXYGEN = $/;"	m
DO_STRINGIZE	src/clientversion.h	/^#define DO_STRINGIZE(/;"	d
DSStore	contrib/macdeploy/custom_dsstore.py	/^from ds_store import DSStore$/;"	i
DSYMUTIL	Makefile	/^DSYMUTIL = dsymutil$/;"	m
DSYMUTIL	doc/man/Makefile	/^DSYMUTIL = dsymutil$/;"	m
DSYMUTIL	src/Makefile	/^DSYMUTIL = dsymutil$/;"	m
DSYMUTIL	src/secp256k1/Makefile	/^DSYMUTIL = dsymutil$/;"	m
DSYMUTIL	src/univalue/Makefile	/^DSYMUTIL = dsymutil$/;"	m
DUMMY_CHECKER	src/script/sign.cpp	/^const DummySignatureChecker DUMMY_CHECKER;$/;"	m	namespace:__anon83	file:
DUMMY_MAXIMUM_SIGNATURE_CREATOR	src/script/sign.cpp	/^const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32);$/;"	v
DUMMY_NESTED_P2WPKH_INPUT_SIZE	src/wallet/wallet.h	/^static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;$/;"	v
DUMMY_SIGNATURE_CREATOR	src/script/sign.cpp	/^const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32);$/;"	v
DUMMY_SIGNING_PROVIDER	src/script/sign.cpp	/^const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();$/;"	v
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	doc/man/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	src/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	src/secp256k1/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	src/univalue/Makefile	/^DUMPBIN = $/;"	m
DUMP_BANS_INTERVAL	src/init.cpp	/^static constexpr int DUMP_BANS_INTERVAL = 60 * 15;$/;"	v	file:
DUMP_PEERS_INTERVAL	src/net.cpp	/^static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;$/;"	v	file:
DUPLICATE_ADDRESS	src/qt/addresstablemodel.h	/^        DUPLICATE_ADDRESS,      \/**< Address already in address book *\/$/;"	e	enum:AddressTableModel::EditStatus
DUST_RELAY_TX_FEE	src/policy/policy.h	/^static const unsigned int DUST_RELAY_TX_FEE = 3000;$/;"	v
Damage	src/test/pmt_tests.cpp	/^    void Damage() {$/;"	f	class:CPartialMerkleTreeTester
DamagePush	src/test/script_tests.cpp	/^    TestBuilder& DamagePush(unsigned int pos)$/;"	f	class:__anon58::TestBuilder
Data	test/functional/wallet_import_rescan.py	/^Data = enum.Enum("Data", "address pub priv")$/;"	v
DataDir	src/chainparamsbase.h	/^    const std::string& DataDir() const { return strDataDir; }$/;"	f	class:CBaseChainParams
DataFromTransaction	src/script/sign.cpp	/^SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout)$/;"	f
DatabaseCache	src/qt/optionsmodel.h	/^        DatabaseCache,          \/\/ int$/;"	e	enum:OptionsModel::OptionID
Date	src/qt/recentrequeststablemodel.h	/^        Date = 0,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
Date	src/qt/transactiontablemodel.h	/^        Date = 2,$/;"	e	enum:TransactionTableModel::ColumnIndex
DateEnum	src/qt/transactionview.h	/^    enum DateEnum$/;"	g	class:TransactionView
DateRole	src/qt/transactiontablemodel.h	/^        DateRole,$/;"	e	enum:TransactionTableModel::RoleIndex
DebugMessageHandler	src/qt/bitcoin.cpp	/^void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, const QString &msg)$/;"	f
DebugString	src/leveldb/db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	src/leveldb/db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	src/leveldb/db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	src/leveldb/db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
Decimal	test/functional/feature_csv_activation.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/feature_fee_estimation.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/feature_rbf.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/feature_segwit.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/interface_rest.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/mempool_limit.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/mempool_packages.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/mempool_persist.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/mining_basic.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/mining_getblocktemplate_longpoll.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/p2p_feefilter.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/rpc_blockchain.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/rpc_fundrawtransaction.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/rpc_net.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/rpc_psbt.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/rpc_rawtransaction.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/rpc_scantxoutset.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/rpc_signrawtransaction.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/test_framework/util.py	/^from decimal import Decimal, ROUND_DOWN$/;"	i
Decimal	test/functional/wallet_abandonconflict.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_address_types.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_backup.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_balance.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_basic.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_bumpfee.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_importprunedfunds.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_listreceivedby.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_listtransactions.py	/^from decimal import Decimal$/;"	i
Decimal	test/functional/wallet_txn_doublespend.py	/^from decimal import Decimal$/;"	i
Decode	src/bech32.cpp	/^std::pair<std::string, data> Decode(const std::string& str) {$/;"	f	namespace:bech32
Decode	src/key.cpp	/^void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtKey
Decode	src/pubkey.cpp	/^void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtPubKey
DecodeBase32	src/util/strencodings.cpp	/^std::string DecodeBase32(const std::string& str, bool* pf_invalid)$/;"	f
DecodeBase32	src/util/strencodings.cpp	/^std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)$/;"	f
DecodeBase58	src/base58.cpp	/^bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)$/;"	f
DecodeBase58	src/base58.cpp	/^bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	src/base58.cpp	/^bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	src/base58.cpp	/^bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	src/util/strencodings.cpp	/^std::string DecodeBase64(const std::string& str, bool* pf_invalid)$/;"	f
DecodeBase64	src/util/strencodings.cpp	/^std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)$/;"	f
DecodeBase64PSBT	src/psbt.cpp	/^bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)$/;"	f
DecodeDestination	src/key_io.cpp	/^CTxDestination DecodeDestination(const std::string& str)$/;"	f
DecodeDestination	src/key_io.cpp	/^CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)$/;"	f	namespace:__anon54
DecodeDumpString	src/wallet/rpcdump.cpp	/^static std::string DecodeDumpString(const std::string &str) {$/;"	f	file:
DecodeDumpTime	src/wallet/rpcdump.cpp	/^int64_t static DecodeDumpTime(const std::string &str) {$/;"	f	file:
DecodeEntry	src/leveldb/table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeExtKey	src/key_io.cpp	/^CExtKey DecodeExtKey(const std::string& str)$/;"	f
DecodeExtPubKey	src/key_io.cpp	/^CExtPubKey DecodeExtPubKey(const std::string& str)$/;"	f
DecodeFixed32	src/leveldb/util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	src/leveldb/util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	src/leveldb/db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	src/leveldb/db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	src/leveldb/table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	src/leveldb/table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeHexBlk	src/core_read.cpp	/^bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)$/;"	f
DecodeHexBlockHeader	src/core_read.cpp	/^bool DecodeHexBlockHeader(CBlockHeader& header, const std::string& hex_header)$/;"	f
DecodeHexTx	src/core_read.cpp	/^bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness, bool try_witness)$/;"	f
DecodeKey	src/leveldb/util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeOP_N	src/script/script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
DecodeRawPSBT	src/psbt.cpp	/^bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data, std::string& error)$/;"	f
DecodeScriptTest	test/functional/rpc_decodescript.py	/^class DecodeScriptTest(BitcoinTestFramework):$/;"	c
DecodeSecret	src/key_io.cpp	/^CKey DecodeSecret(const std::string& str)$/;"	f
DecodeValue	src/leveldb/util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Decompress	src/pubkey.cpp	/^bool CPubKey::Decompress() {$/;"	f	class:CPubKey
DecompressAmount	src/compressor.cpp	/^uint64_t DecompressAmount(uint64_t x)$/;"	f
DecompressScript	src/compressor.cpp	/^bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &in)$/;"	f
Decrypt	src/crypto/aes.cpp	/^int AES256CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES256CBCDecrypt
Decrypt	src/crypto/aes.cpp	/^void AES256Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const$/;"	f	class:AES256Decrypt
Decrypt	src/qt/askpassphrasedialog.h	/^        Decrypt     \/**< Ask passphrase and decrypt wallet *\/$/;"	e	enum:AskPassphraseDialog::Mode
Decrypt	src/wallet/crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const$/;"	f	class:CCrypter
DecryptKey	src/wallet/crypter.cpp	/^static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)$/;"	f	file:
DecryptSecret	src/wallet/crypter.cpp	/^static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)$/;"	f	file:
Default	src/leveldb/util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	src/leveldb/util/env_win.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
DefaultConsistencyChecks	src/chainparams.h	/^    bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }$/;"	f	class:CChainParams
DefaultOptions	src/miner.cpp	/^static BlockAssembler::Options DefaultOptions()$/;"	f	file:
DefaultRequestHandler	src/bitcoin-cli.cpp	/^class DefaultRequestHandler: public BaseRequestHandler {$/;"	c	file:
DefaultShrinkDebugFile	src/logging.cpp	/^bool BCLog::Logger::DefaultShrinkDebugFile() const$/;"	f	class:BCLog::Logger
DelAddressBook	src/wallet/wallet.cpp	/^bool CWallet::DelAddressBook(const CTxDestination& address)$/;"	f	class:CWallet
DelayMilliseconds	src/leveldb/db/db_test.cc	/^void DelayMilliseconds(int millis) {$/;"	f	namespace:leveldb::__anon23
Delete	src/addrman.cpp	/^void CAddrMan::Delete(int nId)$/;"	f	class:CAddrMan
Delete	src/leveldb/db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	src/leveldb/db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	src/leveldb/db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	src/leveldb/db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	src/leveldb/db/dumpfile.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon27::WriteBatchItemPrinter
Delete	src/leveldb/db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	src/leveldb/db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon22::MemTableInserter
Delete	src/leveldb/db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
Delete	src/test/addrman_tests.cpp	/^    void Delete(int nId)$/;"	f	class:CAddrManTest
DeleteAllData	src/leveldb/db/fault_injection_test.cc	/^  void DeleteAllData() {$/;"	f	class:leveldb::FaultInjectionTest
DeleteAnSSTFile	src/leveldb/db/db_test.cc	/^  bool DeleteAnSSTFile() {$/;"	f	class:leveldb::DBTest
DeleteAuthCookie	src/rpc/protocol.cpp	/^void DeleteAuthCookie()$/;"	f
DeleteBlock	src/leveldb/table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	src/leveldb/table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
DeleteDir	src/leveldb/include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	src/leveldb/util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon8::PosixEnv
DeleteDir	src/leveldb/util/env_win.cc	/^Status Win32Env::DeleteDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteEntry	src/leveldb/db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	src/leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteFile	src/leveldb/db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
DeleteFile	src/leveldb/include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	src/leveldb/util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixEnv
DeleteFile	src/leveldb/util/env_win.cc	/^#undef DeleteFile$/;"	d	file:
DeleteFile	src/leveldb/util/env_win.cc	/^Status Win32Env::DeleteFile( const std::string& fname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteFileInternal	src/leveldb/helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
DeleteFilesCreatedAfterLastDirSync	src/leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFilesCreatedAfterLastDirSync() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteLock	src/sync.cpp	/^void DeleteLock(void* cs)$/;"	f
DeleteLock	src/sync.h	/^void static inline DeleteLock(void* cs) {}$/;"	f
DeleteLogFiles	src/leveldb/db/recovery_test.cc	/^  size_t DeleteLogFiles() {$/;"	f	class:leveldb::RecoveryTest
DeleteNode	src/net.cpp	/^void CConnman::DeleteNode(CNode* pnode)$/;"	f	class:CConnman
DeleteObsoleteFiles	src/leveldb/db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	src/leveldb/db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeleteSeq	src/leveldb/db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	src/leveldb/db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	src/leveldb/util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DeploymentPos	src/consensus/params.h	/^enum DeploymentPos$/;"	g	namespace:Consensus
DeprecatedRpcTest	test/functional/rpc_deprecated.py	/^class DeprecatedRpcTest(BitcoinTestFramework):$/;"	c
DepthAndScoreComparator	src/txmempool.cpp	/^class DepthAndScoreComparator$/;"	c	namespace:__anon74	file:
DereferencingComparator	src/indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	s
Derive	src/key.cpp	/^bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {$/;"	f	class:CExtKey
Derive	src/key.cpp	/^bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CKey
Derive	src/pubkey.cpp	/^bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {$/;"	f	class:CExtPubKey
Derive	src/pubkey.cpp	/^bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CPubKey
DeriveNewChildKey	src/wallet/wallet.cpp	/^void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)$/;"	f	class:CWallet
DeriveNewSeed	src/wallet/wallet.cpp	/^CPubKey CWallet::DeriveNewSeed(const CKey& key)$/;"	f	class:CWallet
DeriveType	src/script/descriptor.cpp	/^enum class DeriveType {$/;"	c	namespace:__anon75	file:
DeriveaddressesTest	test/functional/rpc_deriveaddresses.py	/^class DeriveaddressesTest(BitcoinTestFramework):$/;"	c
DescribeAddress	src/rpc/util.cpp	/^UniValue DescribeAddress(const CTxDestination& dest)$/;"	f
DescribeAddressVisitor	src/rpc/util.cpp	/^    explicit DescribeAddressVisitor() {}$/;"	f	class:DescribeAddressVisitor
DescribeAddressVisitor	src/rpc/util.cpp	/^class DescribeAddressVisitor : public boost::static_visitor<UniValue>$/;"	c	file:
DescribeWalletAddress	src/wallet/rpcwallet.cpp	/^static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)$/;"	f	file:
DescribeWalletAddressVisitor	src/wallet/rpcwallet.cpp	/^    explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}$/;"	f	class:DescribeWalletAddressVisitor
DescribeWalletAddressVisitor	src/wallet/rpcwallet.cpp	/^class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>$/;"	c	file:
Descriptor	src/script/descriptor.h	/^struct Descriptor {$/;"	s
DescriptorChecksum	src/script/descriptor.cpp	/^std::string DescriptorChecksum(const Span<const char>& span)$/;"	f	namespace:__anon75
DescriptorFileName	src/leveldb/db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DescriptorImpl	src/script/descriptor.cpp	/^    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_script_arg(std::move(script)), m_name(name) {}$/;"	f	class:__anon75::DescriptorImpl
DescriptorImpl	src/script/descriptor.cpp	/^class DescriptorImpl : public Descriptor$/;"	c	namespace:__anon75	file:
DeserializeAndCheckBlockTest	src/bench/checkblock.cpp	/^static void DeserializeAndCheckBlockTest(benchmark::State& state)$/;"	f	file:
DeserializeBlockTest	src/bench/checkblock.cpp	/^static void DeserializeBlockTest(benchmark::State& state)$/;"	f	file:
DeserializeDB	src/addrdb.cpp	/^bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)$/;"	f	namespace:__anon115
DeserializeFileDB	src/addrdb.cpp	/^bool DeserializeFileDB(const fs::path& path, Data& data)$/;"	f	namespace:__anon115
DeserializeHDKeypaths	src/script/sign.h	/^void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)$/;"	f
DestinationEncoder	src/key_io.cpp	/^    explicit DestinationEncoder(const CChainParams& params) : m_params(params) {}$/;"	f	class:__anon54::DestinationEncoder
DestinationEncoder	src/key_io.cpp	/^class DestinationEncoder : public boost::static_visitor<std::string>$/;"	c	namespace:__anon54	file:
DestroyAllBlockFilterIndexes	src/index/blockfilterindex.cpp	/^void DestroyAllBlockFilterIndexes()$/;"	f
DestroyAndReopen	src/leveldb/db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyBlockFilterIndex	src/index/blockfilterindex.cpp	/^bool DestroyBlockFilterIndex(BlockFilterType filter_type)$/;"	f
DestroyDB	src/leveldb/db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
DifficultyAdjustmentInterval	src/consensus/params.h	/^    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan \/ nPowTargetSpacing; }$/;"	f	struct:Consensus::Params
DirIsWritable	src/util/system.cpp	/^bool DirIsWritable(const fs::path& directory)$/;"	f
DirWasSynced	src/leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::DirWasSynced() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Direction	src/leveldb/db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon29::DBIter	file:
Direction	src/leveldb/table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon11::MergingIterator	file:
Directory	src/wallet/db.h	/^    fs::path Directory() const { return strPath; }$/;"	f	class:BerkeleyEnvironment
DisableCategory	src/logging.cpp	/^bool BCLog::Logger::DisableCategory(const std::string& str)$/;"	f	class:BCLog::Logger
DisableCategory	src/logging.cpp	/^void BCLog::Logger::DisableCategory(BCLog::LogFlags flag)$/;"	f	class:BCLog::Logger
DisableWalletTest	test/functional/wallet_disable.py	/^class DisableWalletTest (BitcoinTestFramework):$/;"	c
Discard	src/wallet/coinselection.cpp	/^std::vector<CInputCoin>::iterator OutputGroup::Discard(const CInputCoin& output) {$/;"	f	class:OutputGroup
Disconnect	src/torcontrol.cpp	/^void TorControlConnection::Disconnect()$/;"	f	class:TorControlConnection
DisconnectBanTest	test/functional/p2p_disconnect_ban.py	/^class DisconnectBanTest(BitcoinTestFramework):$/;"	c
DisconnectBlock	src/validation.cpp	/^DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)$/;"	f	class:CChainState
DisconnectNode	src/net.cpp	/^bool CConnman::DisconnectNode(NodeId id)$/;"	f	class:CConnman
DisconnectNode	src/net.cpp	/^bool CConnman::DisconnectNode(const CNetAddr& addr)$/;"	f	class:CConnman
DisconnectNode	src/net.cpp	/^bool CConnman::DisconnectNode(const CSubNet& subnet)$/;"	f	class:CConnman
DisconnectNode	src/net.cpp	/^bool CConnman::DisconnectNode(const std::string& strNode)$/;"	f	class:CConnman
DisconnectNodes	src/net.cpp	/^void CConnman::DisconnectNodes()$/;"	f	class:CConnman
DisconnectResult	src/validation.cpp	/^enum DisconnectResult$/;"	g	file:
DisconnectTip	src/validation.cpp	/^bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)$/;"	f	class:CChainState
Disconnected	src/netbase.cpp	/^    Disconnected,$/;"	m	class:IntrRecvError	file:
DisconnectedBlockTransactions	src/txmempool.h	/^struct DisconnectedBlockTransactions {$/;"	s
Discover	src/net.cpp	/^void Discover()$/;"	f
DisplayUnit	src/qt/optionsmodel.h	/^        DisplayUnit,            \/\/ BitcoinUnits::Unit$/;"	e	enum:OptionsModel::OptionID
DoCompactionWork	src/leveldb/db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	src/leveldb/db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoPush	src/test/script_tests.cpp	/^    void DoPush()$/;"	f	class:__anon58::TestBuilder	file:
DoPush	src/test/script_tests.cpp	/^    void DoPush(const std::vector<unsigned char>& data)$/;"	f	class:__anon58::TestBuilder	file:
DoReads	src/leveldb/db/autocompact_test.cc	/^void AutoCompactTest::DoReads(int n) {$/;"	f	class:leveldb::AutoCompactTest
DoTest	src/leveldb/db/fault_injection_test.cc	/^  void DoTest() {$/;"	f	class:leveldb::FaultInjectionTest
DoTest	src/test/script_tests.cpp	/^void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError, CAmount nValue = 0)$/;"	f
DoWarning	src/validation.cpp	/^static void DoWarning(const std::string& strWarning)$/;"	f	file:
DoWrite	src/leveldb/db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	src/leveldb/util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
DoubleEquals	src/test/blockchain_tests.cpp	/^static bool DoubleEquals(double a, double b, double epsilon)$/;"	f	file:
Downcase	src/util/strencodings.cpp	/^void Downcase(std::string& str)$/;"	f
DropUnsyncedData	src/leveldb/db/fault_injection_test.cc	/^Status FileState::DropUnsyncedData() const {$/;"	f	class:leveldb::FileState
DropUnsyncedFileData	src/leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DropUnsyncedFileData() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DroppedBytes	src/leveldb/db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DummyAddress	src/qt/guiutil.cpp	/^static std::string DummyAddress(const CChainParams &params)$/;"	f	namespace:GUIUtil
DummySignInput	src/wallet/wallet.cpp	/^bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig) const$/;"	f	class:CWallet
DummySignTx	src/wallet/wallet.cpp	/^bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig) const$/;"	f	class:CWallet
DummySignTx	src/wallet/wallet.h	/^    bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const$/;"	f	class:final
DummySignatureChecker	src/script/sign.cpp	/^    DummySignatureChecker() {}$/;"	f	class:__anon83::final
DummySignatureCreator	src/script/sign.cpp	/^    DummySignatureCreator(char r_len, char s_len) : m_r_len(r_len), m_s_len(s_len) {}$/;"	f	class:__anon83::final
DummyWalletInit	src/dummywallet.cpp	/^class DummyWalletInit : public WalletInitInterface {$/;"	c	file:
DumpAddresses	src/net.cpp	/^void CConnman::DumpAddresses()$/;"	f	class:CConnman
DumpBanlist	src/banman.cpp	/^void BanMan::DumpBanlist()$/;"	f	class:BanMan
DumpDescriptor	src/leveldb/db/dumpfile.cc	/^Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
DumpFile	src/leveldb/db/dumpfile.cc	/^Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb
DumpFileCounts	src/leveldb/db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	src/leveldb/util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpLog	src/leveldb/db/dumpfile.cc	/^Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
DumpMempool	src/validation.cpp	/^bool DumpMempool(const CTxMemPool& pool)$/;"	f
DumpSSTableList	src/leveldb/db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpTable	src/leveldb/db/dumpfile.cc	/^Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
DuplicateAddress	src/qt/walletmodel.h	/^        DuplicateAddress,$/;"	e	enum:WalletModel::StatusCode
DuplicateInput	test/functional/data/invalid_txs.py	/^class DuplicateInput(BadTxTemplate):$/;"	c
DuplicateInputs	src/bench/duplicate_inputs.cpp	/^static void DuplicateInputs(benchmark::State& state)$/;"	f	file:
DynamicMemoryUsage	src/coins.cpp	/^size_t CCoinsViewCache::DynamicMemoryUsage() const {$/;"	f	class:CCoinsViewCache
DynamicMemoryUsage	src/coins.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	class:Coin
DynamicMemoryUsage	src/dbwrapper.cpp	/^size_t CDBWrapper::DynamicMemoryUsage() const {$/;"	f	class:CDBWrapper
DynamicMemoryUsage	src/txmempool.cpp	/^size_t CTxMemPool::DynamicMemoryUsage() const {$/;"	f	class:CTxMemPool
DynamicMemoryUsage	src/txmempool.h	/^    size_t DynamicMemoryUsage() const { return nUsageSize; }$/;"	f	class:CTxMemPoolEntry
DynamicMemoryUsage	src/txmempool.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	struct:DisconnectedBlockTransactions
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const double& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const float& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const int16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const int32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const int64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const int8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const prevector<N, X, S, D>& v)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const std::shared_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const std::unique_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const std::unordered_set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const std::vector<X>& v)$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const uint16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const uint32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const uint64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^static inline size_t DynamicUsage(const uint8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	src/memusage.h	/^template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }$/;"	f	namespace:memusage
E	src/test/util_tests.cpp	/^#define E /;"	d	file:
E	src/test/util_tests.cpp	/^#undef E$/;"	d	file:
ECCVerifyHandle	src/pubkey.cpp	/^ECCVerifyHandle::ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
ECCVerifyHandle	src/pubkey.h	/^class ECCVerifyHandle$/;"	c
ECC_InitSanityCheck	src/key.cpp	/^bool ECC_InitSanityCheck() {$/;"	f
ECC_Start	src/key.cpp	/^void ECC_Start() {$/;"	f
ECC_Stop	src/key.cpp	/^void ECC_Stop() {$/;"	f
ECCryptoClosure	src/script/bitcoinconsensus.cpp	/^struct ECCryptoClosure$/;"	s	namespace:__anon81	file:
ECHO_C	Makefile	/^ECHO_C = \\c$/;"	m
ECHO_C	doc/man/Makefile	/^ECHO_C = \\c$/;"	m
ECHO_C	src/Makefile	/^ECHO_C = \\c$/;"	m
ECHO_C	src/secp256k1/Makefile	/^ECHO_C = \\c$/;"	m
ECHO_C	src/univalue/Makefile	/^ECHO_C = \\c$/;"	m
ECHO_N	Makefile	/^ECHO_N = $/;"	m
ECHO_N	doc/man/Makefile	/^ECHO_N = $/;"	m
ECHO_N	src/Makefile	/^ECHO_N = $/;"	m
ECHO_N	src/secp256k1/Makefile	/^ECHO_N = $/;"	m
ECHO_N	src/univalue/Makefile	/^ECHO_N = $/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECHO_T	doc/man/Makefile	/^ECHO_T = $/;"	m
ECHO_T	src/Makefile	/^ECHO_T = $/;"	m
ECHO_T	src/secp256k1/Makefile	/^ECHO_T = $/;"	m
ECHO_T	src/univalue/Makefile	/^ECHO_T = $/;"	m
ECKey	test/functional/feature_assumevalid.py	/^from test_framework.key import ECKey$/;"	i
ECKey	test/functional/feature_block.py	/^from test_framework.key import ECKey$/;"	i
ECKey	test/functional/p2p_segwit.py	/^from test_framework.key import ECKey$/;"	i
ECKey	test/functional/test_framework/key.py	/^class ECKey():$/;"	c
ECMULT_CONST_TABLE_GET_GE	src/secp256k1/src/ecmult_const_impl.h	/^#define ECMULT_CONST_TABLE_GET_GE(/;"	d
ECMULT_TABLE_GET_GE	src/secp256k1/src/ecmult_impl.h	/^#define ECMULT_TABLE_GET_GE(/;"	d
ECMULT_TABLE_GET_GE_STORAGE	src/secp256k1/src/ecmult_impl.h	/^#define ECMULT_TABLE_GET_GE_STORAGE(/;"	d
ECMULT_TABLE_SIZE	src/secp256k1/src/ecmult_impl.h	/^#define ECMULT_TABLE_SIZE(/;"	d
ECONOMICAL	src/policy/fees.h	/^    ECONOMICAL,   \/\/!< Force estimateSmartFee to use non-conservative estimates$/;"	m	class:FeeEstimateHorizon::FeeEstimateMode
ECPubKey	test/functional/test_framework/key.py	/^class ECPubKey():$/;"	c
EGREP	Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	doc/man/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	src/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	src/secp256k1/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	src/univalue/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EMPTY	share/qt/extract_strings_qt.py	/^EMPTY=['""']$/;"	v
ENABLE_AVX2	src/config/bitcoin-config.h	/^#define ENABLE_AVX2 /;"	d
ENABLE_MODULE_RECOVERY	src/secp256k1/src/libsecp256k1-config.h	/^#define ENABLE_MODULE_RECOVERY /;"	d
ENABLE_REG	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
ENABLE_SSE41	src/config/bitcoin-config.h	/^#define ENABLE_SSE41 /;"	d
ENABLE_TEST	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
ENABLE_VIRTUAL_TERMINAL_PROCESSING	test/functional/test_runner.py	/^        ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4$/;"	v
ENABLE_WALLET	build_msvc/bitcoin_config.h	/^#define ENABLE_WALLET /;"	d
ENABLE_ZMQ	build_msvc/bitcoin_config.h	/^#define ENABLE_ZMQ /;"	d
ENABLE_ZMQ	src/config/bitcoin-config.h	/^#define ENABLE_ZMQ /;"	d
END_FOLD	.travis/test_03_before_install.sh	/^END_FOLD () {$/;"	f
ENTER_CRITICAL_SECTION	src/sync.h	/^#define ENTER_CRITICAL_SECTION(/;"	d
ERROR_CXXFLAGS	Makefile	/^ERROR_CXXFLAGS = $/;"	m
ERROR_CXXFLAGS	doc/man/Makefile	/^ERROR_CXXFLAGS = $/;"	m
ERROR_CXXFLAGS	src/Makefile	/^ERROR_CXXFLAGS = $/;"	m
ESCAPE_MAP	test/lint/lint-format-strings.py	/^ESCAPE_MAP = {$/;"	v
ET	contrib/devtools/update-translations.py	/^import xml.etree.ElementTree as ET$/;"	i
ET	test/functional/rpc_misc.py	/^import xml.etree.ElementTree as ET$/;"	i
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETAGS	src/Makefile	/^ETAGS = etags$/;"	m
ETAGS	src/secp256k1/Makefile	/^ETAGS = etags$/;"	m
ETAGS	src/univalue/Makefile	/^ETAGS = etags$/;"	m
EVENT_CFLAGS	Makefile	/^EVENT_CFLAGS = -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_CFLAGS	doc/man/Makefile	/^EVENT_CFLAGS = -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_CFLAGS	src/Makefile	/^EVENT_CFLAGS = -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_LIBS	Makefile	/^EVENT_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent$/;"	m
EVENT_LIBS	doc/man/Makefile	/^EVENT_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent$/;"	m
EVENT_LIBS	src/Makefile	/^EVENT_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent$/;"	m
EVENT_LOG_ERR	src/bitcoin-cli.cpp	/^# define EVENT_LOG_ERR /;"	d	file:
EVENT_LOG_WARN	src/httpserver.cpp	/^# define EVENT_LOG_WARN /;"	d	file:
EVENT_PTHREADS_CFLAGS	Makefile	/^EVENT_PTHREADS_CFLAGS = -D_THREAD_SAFE -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_PTHREADS_CFLAGS	doc/man/Makefile	/^EVENT_PTHREADS_CFLAGS = -D_THREAD_SAFE -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_PTHREADS_CFLAGS	src/Makefile	/^EVENT_PTHREADS_CFLAGS = -D_THREAD_SAFE -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_PTHREADS_LIBS	Makefile	/^EVENT_PTHREADS_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent_pthreads -levent$/;"	m
EVENT_PTHREADS_LIBS	doc/man/Makefile	/^EVENT_PTHREADS_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent_pthreads -levent$/;"	m
EVENT_PTHREADS_LIBS	src/Makefile	/^EVENT_PTHREADS_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent_pthreads -levent$/;"	m
EXCLUDE	contrib/devtools/copyright_header.py	/^EXCLUDE = [$/;"	v
EXCLUDE_COMPILED	contrib/devtools/copyright_header.py	/^EXCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in EXCLUDE]))$/;"	v
EXCLUDE_DIRS	contrib/devtools/copyright_header.py	/^EXCLUDE_DIRS = [$/;"	v
EXCLUSIVE_LOCKS_REQUIRED	src/bench/mempool_eviction.cpp	/^static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/bench/rpc_mempool.cpp	/^static void AddTx(const CTransactionRef& tx, const CAmount& fee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/index/base.cpp	/^static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/interfaces/wallet.cpp	/^    int depth) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)$/;"	f	namespace:interfaces::__anon130
EXCLUSIVE_LOCKS_REQUIRED	src/leveldb/port/thread_annotations.h	/^#define EXCLUSIVE_LOCKS_REQUIRED(/;"	d
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode, bool enable_bip61) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^int64_t GetTxRequestTime(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static bool TipMayBeStale(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static uint32_t GetFetchFlags(CNode* pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^static void UpdatePreferredDownload(CNode* node, CNodeState* state) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^void EraseTxRequest(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^void RequestTx(CNodeState* state, const uint256& txid, int64_t nNow) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^void UpdateTxRequestTime(const uint256& txid, int64_t request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	src/net_processing.cpp	/^void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/rpc/blockchain.cpp	/^static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPoolEntry& e) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/test/mempool_tests.cpp	/^static void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/test/miner_tests.cpp	/^static CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/test/miner_tests.cpp	/^static bool TestSequenceLocks(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/test/miner_tests.cpp	/^static void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/test/txvalidationcache_tests.cpp	/^static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/threadsafety.h	/^#define EXCLUSIVE_LOCKS_REQUIRED(/;"	d
EXCLUSIVE_LOCKS_REQUIRED	src/util/system.cpp	/^    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)$/;"	f	class:ArgsManagerHelper
EXCLUSIVE_LOCKS_REQUIRED	src/util/system.cpp	/^    static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)$/;"	f	class:ArgsManagerHelper
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/validation.h	/^inline CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	src/wallet/wallet.h	/^    bool CanSupportFeature(enum WalletFeature wf) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }$/;"	f	class:final
EXCLUSIVE_LOCKS_REQUIRED	src/wallet/wallet.h	/^    bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }$/;"	f	class:final
EXCLUSIVE_LOCKS_REQUIRED	src/wallet/wallet.h	/^    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)$/;"	f	class:final
EXCLUSIVE_LOCK_FUNCTION	src/leveldb/port/thread_annotations.h	/^#define EXCLUSIVE_LOCK_FUNCTION(/;"	d
EXCLUSIVE_LOCK_FUNCTION	src/leveldb/util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) EXCLUSIVE_LOCK_FUNCTION(mu)$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_LOCK_FUNCTION	src/sync.h	/^    UniqueLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : Base(mutexIn, std::defer_lock)$/;"	f	class:UniqueLock
EXCLUSIVE_LOCK_FUNCTION	src/sync.h	/^    UniqueLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)$/;"	f	class:UniqueLock
EXCLUSIVE_LOCK_FUNCTION	src/sync.h	/^    void lock() EXCLUSIVE_LOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
EXCLUSIVE_LOCK_FUNCTION	src/threadsafety.h	/^    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)$/;"	f	struct:LockAnnotation
EXCLUSIVE_LOCK_FUNCTION	src/threadsafety.h	/^#define EXCLUSIVE_LOCK_FUNCTION(/;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	src/leveldb/port/thread_annotations.h	/^#define EXCLUSIVE_TRYLOCK_FUNCTION(/;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	src/sync.h	/^    bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)$/;"	f	class:AnnotatedMixin
EXCLUSIVE_TRYLOCK_FUNCTION	src/threadsafety.h	/^#define EXCLUSIVE_TRYLOCK_FUNCTION(/;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXEEXT	doc/man/Makefile	/^EXEEXT = $/;"	m
EXEEXT	src/Makefile	/^EXEEXT = $/;"	m
EXEEXT	src/secp256k1/Makefile	/^EXEEXT = $/;"	m
EXEEXT	src/univalue/Makefile	/^EXEEXT = $/;"	m
EXHAUSTIVE_TEST_LAMBDA	src/secp256k1/src/tests_exhaustive.c	/^#define EXHAUSTIVE_TEST_LAMBDA /;"	d	file:
EXHAUSTIVE_TEST_ORDER	src/secp256k1/src/tests_exhaustive.c	/^#define EXHAUSTIVE_TEST_ORDER /;"	d	file:
EXISTING	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXISTING	src/leveldb/doc/bench/db_bench_tree_db.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXPECT	src/secp256k1/src/util.h	/^#define EXPECT(/;"	d
EXPECTED_HOLDER_NAMES	contrib/devtools/copyright_header.py	/^EXPECTED_HOLDER_NAMES = [$/;"	v
EXPIRY	src/txmempool.h	/^    EXPIRY,      \/\/!< Expired from mempool$/;"	m	class:MemPoolRemovalReason
EXPORT_SYMBOL	src/script/bitcoinconsensus.h	/^        #define EXPORT_SYMBOL /;"	d
EXPORT_SYMBOL	src/script/bitcoinconsensus.h	/^        #define EXPORT_SYMBOL$/;"	d
EXPORT_SYMBOL	src/script/bitcoinconsensus.h	/^    #define EXPORT_SYMBOL /;"	d
EXPORT_SYMBOL	src/script/bitcoinconsensus.h	/^  #define EXPORT_SYMBOL /;"	d
EXPORT_SYMBOL	src/script/bitcoinconsensus.h	/^  #define EXPORT_SYMBOL$/;"	d
EXPORT_SYMBOL	src/script/bitcoinconsensus.h	/^#undef EXPORT_SYMBOL$/;"	d
EXP_ARR_VALUE	src/univalue/lib/univalue_read.cpp	/^    EXP_ARR_VALUE = (1U << 2),$/;"	e	enum:expect_bits	file:
EXP_COLON	src/univalue/lib/univalue_read.cpp	/^    EXP_COLON = (1U << 1),$/;"	e	enum:expect_bits	file:
EXP_NOT_VALUE	src/univalue/lib/univalue_read.cpp	/^    EXP_NOT_VALUE = (1U << 4),$/;"	e	enum:expect_bits	file:
EXP_OBJ_NAME	src/univalue/lib/univalue_read.cpp	/^    EXP_OBJ_NAME = (1U << 0),$/;"	e	enum:expect_bits	file:
EXP_VALUE	src/univalue/lib/univalue_read.cpp	/^    EXP_VALUE = (1U << 3),$/;"	e	enum:expect_bits	file:
EXTENDED_FUNCTIONAL_TESTS	Makefile	/^EXTENDED_FUNCTIONAL_TESTS = $/;"	m
EXTENDED_FUNCTIONAL_TESTS	doc/man/Makefile	/^EXTENDED_FUNCTIONAL_TESTS = $/;"	m
EXTENDED_FUNCTIONAL_TESTS	src/Makefile	/^EXTENDED_FUNCTIONAL_TESTS = $/;"	m
EXTENDED_SCRIPTS	test/functional/test_runner.py	/^EXTENDED_SCRIPTS = [$/;"	v
EXTRA_DIST	Makefile	/^EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(DIST_DOCS) \\$/;"	m
EXTRA_DIST	src/Makefile	/^EXTRA_DIST = $(CTAES_DIST)$/;"	m
EXTRA_DIST	src/secp256k1/Makefile	/^EXTRA_DIST = autogen.sh src\/gen_context.c src\/basic-config.h $(JAVA_FILES)$/;"	m
EXTRA_DIST	src/univalue/Makefile	/^EXTRA_DIST = $(TEST_FILES) $(GEN_SRCS)$/;"	m
EXTRA_LIBRARIES	src/Makefile	/^EXTRA_LIBRARIES = $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UTIL) \\$/;"	m
EXTRA_PEER_CHECK_INTERVAL	src/net_processing.cpp	/^static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;$/;"	v	file:
EXT_PUBLIC_KEY	src/chainparams.h	/^        EXT_PUBLIC_KEY,$/;"	e	enum:CChainParams::Base58Type
EXT_SECRET_KEY	src/chainparams.h	/^        EXT_SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
EditAddressAndSubmit	src/qt/test/addressbooktests.cpp	/^void EditAddressAndSubmit($/;"	f	namespace:__anon62
EditAddressDialog	src/qt/editaddressdialog.cpp	/^EditAddressDialog::EditAddressDialog(Mode _mode, QWidget *parent) :$/;"	f	class:EditAddressDialog
EditAddressDialog	src/qt/editaddressdialog.h	/^class EditAddressDialog : public QDialog$/;"	c
EditPush	src/test/script_tests.cpp	/^    TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)$/;"	f	class:__anon58::TestBuilder
EditReceivingAddress	src/qt/editaddressdialog.h	/^        EditReceivingAddress,$/;"	e	enum:EditAddressDialog::Mode
EditSendingAddress	src/qt/editaddressdialog.h	/^        EditSendingAddress$/;"	e	enum:EditAddressDialog::Mode
EditStatus	src/qt/addresstablemodel.h	/^    enum EditStatus {$/;"	g	class:AddressTableModel
Element	src/blockfilter.h	/^    typedef std::vector<unsigned char> Element;$/;"	t	class:GCSFilter
ElementSet	src/blockfilter.h	/^    typedef std::unordered_set<Element, ByteVectorHash> ElementSet;$/;"	t	class:GCSFilter
EligibleForSpending	src/wallet/coinselection.cpp	/^bool OutputGroup::EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const$/;"	f	class:OutputGroup
EllipticCurve	test/functional/test_framework/key.py	/^class EllipticCurve:$/;"	c
EmitPhysicalRecord	src/leveldb/db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	src/leveldb/table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon12::EmptyIterator
EmptyIterator	src/leveldb/table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon12	file:
EmptyQueue	src/scheduler.cpp	/^void SingleThreadedSchedulerClient::EmptyQueue() {$/;"	f	class:SingleThreadedSchedulerClient
EnableCategory	src/logging.cpp	/^bool BCLog::Logger::EnableCategory(const std::string& str)$/;"	f	class:BCLog::Logger
EnableCategory	src/logging.cpp	/^void BCLog::Logger::EnableCategory(BCLog::LogFlags flag)$/;"	f	class:BCLog::Logger
EnableOrDisableLogCategories	src/rpc/misc.cpp	/^static void EnableOrDisableLogCategories(UniValue cats, bool enable) {$/;"	f	file:
Enabled	src/logging.h	/^        bool Enabled() const { return m_print_to_console || m_print_to_file; }$/;"	f	class:BCLog::Logger
Encode	src/bech32.cpp	/^std::string Encode(const std::string& hrp, const data& values) {$/;"	f	namespace:bech32
Encode	src/key.cpp	/^void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtKey
Encode	src/leveldb/db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
Encode	src/pubkey.cpp	/^void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtPubKey
EncodeBase32	src/util/strencodings.cpp	/^std::string EncodeBase32(const std::string& str)$/;"	f
EncodeBase32	src/util/strencodings.cpp	/^std::string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	src/base58.cpp	/^std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	src/base58.cpp	/^std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	src/base58.cpp	/^std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	src/util/strencodings.cpp	/^std::string EncodeBase64(const std::string& str)$/;"	f
EncodeBase64	src/util/strencodings.cpp	/^std::string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeDecimal	test/functional/test_framework/authproxy.py	/^def EncodeDecimal(o):$/;"	f
EncodeDestination	src/key_io.cpp	/^std::string EncodeDestination(const CTxDestination& dest)$/;"	f
EncodeDumpString	src/wallet/rpcdump.cpp	/^std::string static EncodeDumpString(const std::string &str) {$/;"	f	file:
EncodeExtKey	src/key_io.cpp	/^std::string EncodeExtKey(const CExtKey& key)$/;"	f
EncodeExtPubKey	src/key_io.cpp	/^std::string EncodeExtPubKey(const CExtPubKey& key)$/;"	f
EncodeFixed32	src/leveldb/util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	src/leveldb/util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeHexTx	src/core_write.cpp	/^std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags)$/;"	f
EncodeKey	src/leveldb/db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	src/leveldb/util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeOP_N	src/script/script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
EncodeSecret	src/key_io.cpp	/^std::string EncodeSecret(const CKey& key)$/;"	f
EncodeTo	src/leveldb/db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	src/leveldb/table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	src/leveldb/table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	src/leveldb/util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	src/leveldb/util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	src/leveldb/util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Encrypt	src/crypto/aes.cpp	/^int AES256CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES256CBCEncrypt
Encrypt	src/crypto/aes.cpp	/^void AES256Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const$/;"	f	class:AES256Encrypt
Encrypt	src/qt/askpassphrasedialog.h	/^        Encrypt,    \/**< Ask passphrase twice and encrypt *\/$/;"	e	enum:AskPassphraseDialog::Mode
Encrypt	src/wallet/crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const$/;"	f	class:CCrypter
EncryptKeys	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
EncryptSecret	src/wallet/crypter.cpp	/^static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f	file:
EncryptWallet	src/wallet/wallet.cpp	/^bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
EncryptionStatus	src/qt/walletmodel.h	/^    enum EncryptionStatus$/;"	g	class:WalletModel
Enqueue	src/httpserver.cpp	/^    bool Enqueue(WorkItem* item)$/;"	f	class:WorkQueue
EnsureWalletIsAvailable	src/wallet/rpcwallet.cpp	/^bool EnsureWalletIsAvailable(const CWallet* pwallet, bool avoidException)$/;"	f
EnsureWalletIsUnlocked	src/wallet/rpcwallet.cpp	/^void EnsureWalletIsUnlocked(const CWallet* pwallet)$/;"	f
Enter	src/sync.h	/^    void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:UniqueLock
EnterCritical	src/sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	src/sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
EntryDescriptionString	src/rpc/blockchain.cpp	/^static std::string EntryDescriptionString()$/;"	f	file:
Enum	test/functional/interface_rest.py	/^from enum import Enum$/;"	i
Enum	test/functional/test_framework/test_framework.py	/^from enum import Enum$/;"	i
Enum	test/functional/test_framework/test_node.py	/^from enum import Enum$/;"	i
Env	src/leveldb/include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	src/leveldb/include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvPosixTest	src/leveldb/util/env_posix_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	src/leveldb/util/env_posix_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvPosixTestHelper	src/leveldb/util/env_posix_test_helper.h	/^class EnvPosixTestHelper {$/;"	c	namespace:leveldb
EnvTest	src/leveldb/util/env_test.cc	/^  EnvTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvTest
EnvTest	src/leveldb/util/env_test.cc	/^class EnvTest {$/;"	c	namespace:leveldb	file:
EnvWrapper	src/leveldb/include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	src/leveldb/include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	src/leveldb/db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
EqualDescriptor	src/test/descriptor_tests.cpp	/^bool EqualDescriptor(std::string a, std::string b)$/;"	f	namespace:__anon56
EqualTo	src/arith_uint256.cpp	/^bool base_uint<BITS>::EqualTo(uint64_t b) const$/;"	f	class:base_uint
Erase	src/dbwrapper.h	/^    bool Erase(const K& key, bool fSync = false)$/;"	f	class:CDBWrapper
Erase	src/dbwrapper.h	/^    void Erase(const K& key)$/;"	f	class:CDBBatch
Erase	src/leveldb/util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Erase	src/leveldb/util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::LRUCache
Erase	src/leveldb/util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
Erase	src/wallet/db.h	/^    bool Erase(const K& key)$/;"	f	class:BerkeleyBatch
EraseBlockData	src/validation.cpp	/^void CChainState::EraseBlockData(CBlockIndex* index)$/;"	f	class:CChainState
EraseDestData	src/wallet/wallet.cpp	/^bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)$/;"	f	class:CWallet
EraseDestData	src/wallet/walletdb.cpp	/^bool WalletBatch::EraseDestData(const std::string &address, const std::string &key)$/;"	f	class:WalletBatch
EraseIC	src/wallet/walletdb.h	/^    bool EraseIC(const K& key)$/;"	f	class:WalletBatch
EraseLastKElements	src/net.cpp	/^static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)$/;"	f	file:
EraseName	src/wallet/walletdb.cpp	/^bool WalletBatch::EraseName(const std::string& strAddress)$/;"	f	class:WalletBatch
EraseOrphansFor	src/net_processing.cpp	/^void EraseOrphansFor(NodeId peer)$/;"	f
ErasePool	src/wallet/walletdb.cpp	/^bool WalletBatch::ErasePool(int64_t nPool)$/;"	f	class:WalletBatch
ErasePurpose	src/wallet/walletdb.cpp	/^bool WalletBatch::ErasePurpose(const std::string& strAddress)$/;"	f	class:WalletBatch
EraseTx	src/wallet/walletdb.cpp	/^bool WalletBatch::EraseTx(uint256 hash)$/;"	f	class:WalletBatch
EraseWatchOnly	src/wallet/walletdb.cpp	/^bool WalletBatch::EraseWatchOnly(const CScript &dest)$/;"	f	class:WalletBatch
Error	src/consensus/validation.h	/^    bool Error(const std::string& strRejectReasonIn) {$/;"	f	class:CValidationState
ErrorCheck	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ErrorCheck(int status) {$/;"	f	file:
ErrorEnv	src/leveldb/util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	src/leveldb/util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
ErrorMatch	test/functional/feature_filelock.py	/^from test_framework.test_node import ErrorMatch$/;"	i
ErrorMatch	test/functional/feature_logging.py	/^from test_framework.test_node import ErrorMatch$/;"	i
ErrorMatch	test/functional/feature_uacomment.py	/^from test_framework.test_node import ErrorMatch$/;"	i
ErrorMatch	test/functional/test_framework/test_node.py	/^class ErrorMatch(Enum):$/;"	c
ErrorMatch	test/functional/wallet_multiwallet.py	/^from test_framework.test_node import ErrorMatch$/;"	i
EscapeString	src/leveldb/util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
EstimateFeeTest	test/functional/feature_fee_estimation.py	/^class EstimateFeeTest(BitcoinTestFramework):$/;"	c
EstimateMedianVal	src/policy/fees.cpp	/^double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,$/;"	f	class:TxConfirmStats
EstimateSize	src/coins.cpp	/^size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }$/;"	f	class:CCoinsViewBacked
EstimateSize	src/coins.h	/^    virtual size_t EstimateSize() const { return 0; }$/;"	f	class:CCoinsView
EstimateSize	src/dbwrapper.h	/^    size_t EstimateSize(const K& key_begin, const K& key_end) const$/;"	f	class:CDBWrapper
EstimateSize	src/txdb.cpp	/^size_t CCoinsViewDB::EstimateSize() const$/;"	f	class:CCoinsViewDB
EstimationResult	src/policy/fees.h	/^struct EstimationResult$/;"	s	class:FeeEstimateHorizon
EstimatorBucket	src/policy/fees.h	/^struct EstimatorBucket$/;"	s	class:FeeEstimateHorizon
EvalScript	src/script/interpreter.cpp	/^bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)$/;"	f
EvaluateSequenceLocks	src/consensus/tx_verify.cpp	/^bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)$/;"	f
EventBase	src/httpserver.cpp	/^struct event_base* EventBase()$/;"	f
Evict	src/leveldb/db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
EvictExtraOutboundPeers	src/net_processing.cpp	/^void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)$/;"	f	class:PeerLogicValidation
ExampleTest	test/functional/example_test.py	/^class ExampleTest(BitcoinTestFramework):$/;"	c
ExecErrorCheck	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ExecErrorCheck(int status, char *err_msg) {$/;"	f	file:
ExecuteCommand	src/rpc/server.cpp	/^static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)$/;"	f	file:
ExecuteWalletToolFunc	src/wallet/wallettool.cpp	/^bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)$/;"	f	namespace:WalletTool
Exists	src/dbwrapper.h	/^    bool Exists(const K& key) const$/;"	f	class:CDBWrapper
Exists	src/wallet/db.h	/^    bool Exists(const K& key)$/;"	f	class:BerkeleyBatch
Exists	src/wallet/walletutil.cpp	/^bool WalletLocation::Exists() const$/;"	f	class:WalletLocation
ExitCommand	src/test/util_tests.cpp	/^static constexpr char ExitCommand = 'X';$/;"	v	file:
Expand32	src/crypto/hkdf_sha256_32.cpp	/^void CHKDF_HMAC_SHA256_L32::Expand32(const std::string& info, unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHKDF_HMAC_SHA256_L32
ExpandHRP	src/bech32.cpp	/^data ExpandHRP(const std::string& hrp)$/;"	f	namespace:__anon116
ExpandHelper	src/script/descriptor.cpp	/^    bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const$/;"	f	class:__anon75::DescriptorImpl
ExpandedCompactionByteSizeLimit	src/leveldb/db/version_set.cc	/^static int64_t ExpandedCompactionByteSizeLimit(const Options* options) {$/;"	f	namespace:leveldb
ExpectedVerifResult	src/leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	g	class:leveldb::FaultInjectionTest	file:
Expire	src/txmempool.cpp	/^int CTxMemPool::Expire(int64_t time) {$/;"	f	class:CTxMemPool
Expr	src/script/descriptor.cpp	/^Span<const char> Expr(Span<const char>& sp)$/;"	f	namespace:__anon75
Extend	src/leveldb/util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtractAndValidateValue	src/bitcoin-tx.cpp	/^static CAmount ExtractAndValidateValue(const std::string& strValue)$/;"	f	file:
ExtractDestination	src/script/standard.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinations	src/script/standard.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
ExtractMatches	src/merkleblock.cpp	/^uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
ExtractMetaData	src/leveldb/db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon30::Repairer	file:
ExtractPubKey	src/keystore.cpp	/^static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)$/;"	f	file:
ExtractUserKey	src/leveldb/db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	src/leveldb/db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FAIL	src/test/coins_tests.cpp	/^const static CAmount FAIL = -3;$/;"	v	file:
FAILED	src/versionbits.h	/^    FAILED,$/;"	m	class:ThresholdState
FAILED	test/functional/test_framework/test_framework.py	/^    FAILED = 2$/;"	v	class:TestStatus
FAILURE	src/wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	e	enum:final::ScanResult::__anon118
FALLBACK	src/policy/fees.h	/^    FALLBACK,$/;"	m	class:FeeEstimateHorizon::FeeReason
FALLBACK_DOWNLOAD_PATH	depends/Makefile	/^FALLBACK_DOWNLOAD_PATH ?= https:\/\/bitcoincore.org\/depends-sources$/;"	m
FALLTHROUGH_INTENDED	src/leveldb/util/hash.cc	/^#define FALLTHROUGH_INTENDED /;"	d	file:
FALSE_POSITIVES	test/lint/lint-format-strings.py	/^FALSE_POSITIVES = [$/;"	v
FAST	src/random.cpp	/^    FAST, \/\/!< Automatically called by GetRandBytes$/;"	m	class:RNGLevel	file:
FD_SETSIZE	src/compat.h	/^#define FD_SETSIZE /;"	d
FD_SETSIZE	src/compat.h	/^#undef FD_SETSIZE /;"	d
FEATURE_BASE	src/wallet/wallet.h	/^    FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getwalletinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	src/wallet/wallet.h	/^    FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_HD	src/wallet/wallet.h	/^    FEATURE_HD = 130000, \/\/ Hierarchical key derivation after BIP32 (HD Wallet)$/;"	e	enum:WalletFeature
FEATURE_HD_SPLIT	src/wallet/wallet.h	/^    FEATURE_HD_SPLIT = 139900, \/\/ Wallet with HD chain split (change outputs will use m\/0'\/1'\/k)$/;"	e	enum:WalletFeature
FEATURE_LATEST	src/wallet/wallet.h	/^    FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL$/;"	e	enum:WalletFeature
FEATURE_NO_DEFAULT_KEY	src/wallet/wallet.h	/^    FEATURE_NO_DEFAULT_KEY = 159900, \/\/ Wallet without a default key written$/;"	e	enum:WalletFeature
FEATURE_PRE_SPLIT_KEYPOOL	src/wallet/wallet.h	/^    FEATURE_PRE_SPLIT_KEYPOOL = 169900, \/\/ Upgraded to HD SPLIT and can have a pre-split keypool$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	src/wallet/wallet.h	/^    FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FEEFILTER	src/protocol.cpp	/^const char *FEEFILTER="feefilter";$/;"	m	namespace:NetMsgType	file:
FEEFILTER_VERSION	src/version.h	/^static const int FEEFILTER_VERSION = 70013;$/;"	v
FEELER_INTERVAL	src/net.h	/^static const int FEELER_INTERVAL = 120;$/;"	v
FEELER_SLEEP_WINDOW	src/net.cpp	/^#define FEELER_SLEEP_WINDOW /;"	d	file:
FEE_ESTIMATES_FILENAME	src/init.cpp	/^static const char* FEE_ESTIMATES_FILENAME="fee_estimates.dat";$/;"	v	file:
FEE_FILTER_SPACING	src/policy/fees.h	/^    static constexpr double FEE_FILTER_SPACING = 1.1;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
FEE_SPACING	src/policy/fees.h	/^    static constexpr double FEE_SPACING = 1.05;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
FGREP	Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	doc/man/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	src/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	src/secp256k1/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	src/univalue/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FIGURE_SP_CP	src/qt/bitcoinunits.h	/^#define FIGURE_SP_CP /;"	d
FIGURE_SP_HTML	src/qt/bitcoinunits.h	/^#define FIGURE_SP_HTML /;"	d
FIGURE_SP_UTF8	src/qt/bitcoinunits.h	/^#define FIGURE_SP_UTF8 /;"	d
FILTERADD	src/protocol.cpp	/^const char *FILTERADD="filteradd";$/;"	m	namespace:NetMsgType	file:
FILTERCLEAR	src/protocol.cpp	/^const char *FILTERCLEAR="filterclear";$/;"	m	namespace:NetMsgType	file:
FILTERLOAD	src/protocol.cpp	/^const char *FILTERLOAD="filterload";$/;"	m	namespace:NetMsgType	file:
FILTER_TYPES	test/functional/rpc_getblockfilter.py	/^FILTER_TYPES = ["basic"]$/;"	v
FINALIZER	src/psbt.h	/^    FINALIZER,$/;"	m	class:PSBTRole
FIX_RE	contrib/devtools/update-translations.py	/^FIX_RE = re.compile(b'[\\x00-\\x09\\x0b\\x0c\\x0e-\\x1f]')$/;"	v
FLAGS	src/test/coins_tests.cpp	/^const static auto FLAGS = {char(0), FRESH, DIRTY, char(DIRTY | FRESH)};$/;"	v	file:
FLAGS_WAL_enabled	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v	file:
FLAGS_benchmarks	src/leveldb/db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_block_size	src/leveldb/db/db_bench.cc	/^static int FLAGS_block_size = 0;$/;"	v	file:
FLAGS_bloom_bits	src/leveldb/db/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v	file:
FLAGS_cache_size	src/leveldb/db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_cache_size	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v	file:
FLAGS_compression	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v	file:
FLAGS_compression_ratio	src/leveldb/db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	src/leveldb/db/db_bench.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_histogram	src/leveldb/db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_max_file_size	src/leveldb/db/db_bench.cc	/^static int FLAGS_max_file_size = 0;$/;"	v	file:
FLAGS_num	src/leveldb/db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num_pages	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v	file:
FLAGS_open_files	src/leveldb/db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_page_size	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_page_size	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_reads	src/leveldb/db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reuse_logs	src/leveldb/db/db_bench.cc	/^static bool FLAGS_reuse_logs = false;$/;"	v	file:
FLAGS_threads	src/leveldb/db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_transaction	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v	file:
FLAGS_use_existing_db	src/leveldb/db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_value_size	src/leveldb/db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	src/leveldb/db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FLTR_FILE_CHUNK_SIZE	src/index/blockfilterindex.cpp	/^constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; \/\/ 1 MiB$/;"	v
FOLDER_GREP	test/lint/check-doc.py	/^FOLDER_GREP = 'src'$/;"	v
FOLDER_TEST	test/lint/check-doc.py	/^FOLDER_TEST = 'src\/test\/'$/;"	v
FREEDESKTOP_NOTIFICATION_ICON_SIZE	src/qt/notificator.cpp	/^const int FREEDESKTOP_NOTIFICATION_ICON_SIZE = 128;$/;"	v
FRESH	src/coins.h	/^        FRESH = (1 << 1), \/\/ The parent view does not have this entry (or it is pruned).$/;"	e	enum:CCoinsCacheEntry::Flags
FRESH	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	src/leveldb/doc/bench/db_bench_tree_db.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	src/test/coins_tests.cpp	/^const static char FRESH = CCoinsCacheEntry::FRESH;$/;"	v	file:
FULL_ESTIMATE	src/policy/fees.h	/^    FULL_ESTIMATE,$/;"	m	class:FeeEstimateHorizon::FeeReason
FULL_REGEX	test/functional/test_framework/test_node.py	/^    FULL_REGEX = 2$/;"	v	class:ErrorMatch
FULL_TEXT	test/functional/test_framework/test_node.py	/^    FULL_TEXT = 1$/;"	v	class:ErrorMatch
FUZZ_SUITE	src/Makefile	/^FUZZ_SUITE = \\$/;"	m
FUZZ_SUITE_LD_COMMON	src/Makefile	/^FUZZ_SUITE_LD_COMMON = \\$/;"	m
FUZZ_TARGETS	src/Makefile	/^FUZZ_TARGETS = \\$/;"	m
FailedToStartError	test/functional/test_framework/test_node.py	/^class FailedToStartError(Exception):$/;"	c
FailingCheck	src/test/checkqueue_tests.cpp	/^    FailingCheck() : fails(true){};$/;"	f	struct:FailingCheck
FailingCheck	src/test/checkqueue_tests.cpp	/^    FailingCheck(bool _fails) : fails(_fails){};$/;"	f	struct:FailingCheck
FailingCheck	src/test/checkqueue_tests.cpp	/^struct FailingCheck {$/;"	s	file:
Failing_Queue	src/test/checkqueue_tests.cpp	/^typedef CCheckQueue<FailingCheck> Failing_Queue;$/;"	t	file:
FakeCheck	src/test/checkqueue_tests.cpp	/^struct FakeCheck {$/;"	s	file:
FakeCheckCheckCompletion	src/test/checkqueue_tests.cpp	/^struct FakeCheckCheckCompletion {$/;"	s	file:
FalsePositiveRate	src/leveldb/util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
FastMod	src/bloom.cpp	/^static inline uint32_t FastMod(uint32_t x, size_t n) {$/;"	f	file:
FastRandomContext	src/random.h	/^class FastRandomContext {$/;"	c
FastRandom_1bit	src/bench/crypto_hash.cpp	/^static void FastRandom_1bit(benchmark::State& state)$/;"	f	file:
FastRandom_32bit	src/bench/crypto_hash.cpp	/^static void FastRandom_32bit(benchmark::State& state)$/;"	f	file:
FatalError	src/index/base.cpp	/^static void FatalError(const char* fmt, const Args&... args)$/;"	f	file:
FaultInjectionTest	src/leveldb/db/fault_injection_test.cc	/^  FaultInjectionTest()$/;"	f	class:leveldb::FaultInjectionTest
FaultInjectionTest	src/leveldb/db/fault_injection_test.cc	/^class FaultInjectionTest {$/;"	c	namespace:leveldb	file:
FaultInjectionTestEnv	src/leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv() : EnvWrapper(Env::Default()), filesystem_active_(true) {}$/;"	f	class:leveldb::FaultInjectionTestEnv
FaultInjectionTestEnv	src/leveldb/db/fault_injection_test.cc	/^class FaultInjectionTestEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
Fee	src/test/setup_common.h	/^    TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
FeeCalculation	src/policy/fees.h	/^struct FeeCalculation$/;"	s	class:FeeEstimateHorizon
FeeEstimateHorizon	src/policy/fees.h	/^enum class FeeEstimateHorizon {$/;"	c
FeeEstimateMode	src/policy/fees.h	/^enum class FeeEstimateMode {$/;"	c	class:FeeEstimateHorizon
FeeFilterRounder	src/policy/fees.cpp	/^FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)$/;"	f	class:FeeFilterRounder
FeeFilterRounder	src/policy/fees.h	/^class FeeFilterRounder$/;"	c	class:FeeEstimateHorizon
FeeFilterTest	test/functional/p2p_feefilter.py	/^class FeeFilterTest(BitcoinTestFramework):$/;"	c
FeeModeFromString	src/util/fees.cpp	/^bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {$/;"	f
FeeReason	src/policy/fees.h	/^enum class FeeReason {$/;"	c	class:FeeEstimateHorizon
FetchCoin	src/coins.cpp	/^CCoinsMap::iterator CCoinsViewCache::FetchCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
FileCommit	src/util/system.cpp	/^bool FileCommit(FILE *file)$/;"	f
FileExists	src/leveldb/helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
FileExists	src/leveldb/include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	src/leveldb/util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixEnv
FileExists	src/leveldb/util/env_win.cc	/^bool Win32Env::FileExists(const std::string& fname)$/;"	f	class:leveldb::Win32::Win32Env
FileLock	src/fs.cpp	/^FileLock::FileLock(const fs::path& file)$/;"	f	class:fsbridge::FileLock
FileLock	src/fs.h	/^    class FileLock$/;"	c	namespace:fsbridge
FileLock	src/leveldb/include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	src/leveldb/include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMetaData	src/leveldb/db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	src/leveldb/db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileName	src/flatfile.cpp	/^fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const$/;"	f	class:FlatFileSeq
FileNameTest	src/leveldb/db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb	file:
FileSet	src/leveldb/db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	src/leveldb/db/recovery_test.cc	/^  uint64_t FileSize(const std::string& fname) {$/;"	f	class:leveldb::RecoveryTest
FileSize	src/leveldb/table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	src/leveldb/db/fault_injection_test.cc	/^  FileState() : pos_(-1), pos_at_last_sync_(-1), pos_at_last_flush_(-1) {}$/;"	f	struct:leveldb::__anon20::FileState
FileState	src/leveldb/db/fault_injection_test.cc	/^  FileState(const std::string& filename)$/;"	f	struct:leveldb::__anon20::FileState
FileState	src/leveldb/db/fault_injection_test.cc	/^struct FileState {$/;"	s	namespace:leveldb::__anon20	file:
FileState	src/leveldb/helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon35::FileState
FileState	src/leveldb/helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon35	file:
FileSystem	src/leveldb/helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon35::InMemoryEnv	file:
FileType	src/leveldb/db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FileWriteStr	src/logging.cpp	/^static int FileWriteStr(const std::string &str, FILE *fp)$/;"	f	file:
FilelockTest	test/functional/feature_filelock.py	/^class FilelockTest(BitcoinTestFramework):$/;"	c
FilesPerLevel	src/leveldb/db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
Fill	src/streams.h	/^    bool Fill() {$/;"	f	class:CBufferedFile
FillBitBuffer	src/random.h	/^    void FillBitBuffer()$/;"	f	class:FastRandomContext
FillBlock	src/blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {$/;"	f	class:PartiallyDownloadedBlock
FillByteBuffer	src/random.h	/^    void FillByteBuffer()$/;"	f	class:FastRandomContext
FillLevels	src/leveldb/db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FillPSBT	src/wallet/psbtwallet.cpp	/^TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)$/;"	f
FillShortTxIDSelector	src/blockencodings.cpp	/^void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {$/;"	f	class:CBlockHeaderAndShortTxIDs
FillSignatureData	src/psbt.cpp	/^void PSBTInput::FillSignatureData(SignatureData& sigdata) const$/;"	f	class:PSBTInput
FillSignatureData	src/psbt.cpp	/^void PSBTOutput::FillSignatureData(SignatureData& sigdata) const$/;"	f	class:PSBTOutput
FilterBlockBuilder	src/leveldb/table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	src/leveldb/table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	src/leveldb/table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	src/leveldb/table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	src/leveldb/table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb	file:
FilterCreate	src/leveldb/db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	src/leveldb/db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	src/leveldb/db/c_test.c	/^unsigned char FilterKeyMatch($/;"	f
FilterName	src/leveldb/db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	src/leveldb/include/leveldb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	src/leveldb/util/bloom_test.cc	/^  size_t FilterSize() const {$/;"	f	class:leveldb::BloomTest
Finalize	src/crypto/hmac_sha256.cpp	/^void CHMAC_SHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA256
Finalize	src/crypto/hmac_sha512.cpp	/^void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA512
Finalize	src/crypto/ripemd160.cpp	/^void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CRIPEMD160
Finalize	src/crypto/sha1.cpp	/^void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA1
Finalize	src/crypto/sha256.cpp	/^void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA256
Finalize	src/crypto/sha512.cpp	/^void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA512
Finalize	src/crypto/siphash.cpp	/^uint64_t CSipHasher::Finalize() const$/;"	f	class:CSipHasher
Finalize	src/hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash160
Finalize	src/hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash256
Finalize	src/leveldb/db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
FinalizeAndExtractPSBT	src/psbt.cpp	/^bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransaction& result)$/;"	f
FinalizeBlock	src/test/validation_block_tests.cpp	/^std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)$/;"	f
FinalizeNode	src/net_processing.cpp	/^void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {$/;"	f	class:PeerLogicValidation
FinalizePSBT	src/psbt.cpp	/^bool FinalizePSBT(PartiallySignedTransaction& psbtx)$/;"	f
Find	src/addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)$/;"	f	class:CAddrMan
Find	src/leveldb/db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
Find	src/test/addrman_tests.cpp	/^    CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)$/;"	f	class:CAddrManTest
FindAndDelete	src/script/interpreter.cpp	/^int FindAndDelete(CScript& script, const CScript& b)$/;"	f
FindAndDelete	test/functional/test_framework/script.py	/^def FindAndDelete(script, sig):$/;"	f
FindBlockPos	src/validation.cpp	/^static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)$/;"	f	file:
FindByte	src/streams.h	/^    void FindByte(char ch) {$/;"	f	class:CBufferedFile
FindCoins	src/node/coin.cpp	/^void FindCoins(std::map<COutPoint, Coin>& coins)$/;"	f
FindEarliestAtLeast	src/chain.cpp	/^CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime, int height) const$/;"	f	class:CChain
FindFile	src/leveldb/db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	src/leveldb/db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) { }$/;"	f	class:leveldb::FindFileTest
FindFileTest	src/leveldb/db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb	file:
FindFiles	src/leveldb/db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon30::Repairer	file:
FindFilesToPrune	src/validation.cpp	/^static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)$/;"	f	file:
FindFilesToPruneManual	src/validation.cpp	/^static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)$/;"	f	file:
FindFork	src/chain.cpp	/^const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {$/;"	f	class:CChain
FindForkInGlobalIndex	src/validation.cpp	/^CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)$/;"	f
FindGreaterOrEqual	src/leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	src/leveldb/table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon11::MergingIterator
FindLast	src/leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	src/leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindMostWorkChain	src/validation.cpp	/^CBlockIndex* CChainState::FindMostWorkChain() {$/;"	f	class:CChainState
FindNextUserEntry	src/leveldb/db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon29::DBIter
FindNode	src/net.cpp	/^CNode* CConnman::FindNode(const CNetAddr& ip)$/;"	f	class:CConnman
FindNode	src/net.cpp	/^CNode* CConnman::FindNode(const CService& addr)$/;"	f	class:CConnman
FindNode	src/net.cpp	/^CNode* CConnman::FindNode(const CSubNet& subNet)$/;"	f	class:CConnman
FindNode	src/net.cpp	/^CNode* CConnman::FindNode(const std::string& addrName)$/;"	f	class:CConnman
FindNonChangeParentOutput	src/wallet/wallet.cpp	/^const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int output) const$/;"	f	class:CWallet
FindPointer	src/leveldb/util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::HandleTable	file:
FindPrevUserEntry	src/leveldb/db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon29::DBIter
FindRandomFrom	src/test/coins_tests.cpp	/^UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {$/;"	f
FindScriptPubKey	src/rpc/blockchain.cpp	/^bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>& should_abort, int64_t& count, CCoinsViewCursor* cursor, const std::set<CScript>& needles, std::map<COutPoint, Coin>& out_results) {$/;"	f
FindShortSuccessor	src/leveldb/db/c.cc	/^  virtual void FindShortSuccessor(std::string* key) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	src/leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	src/leveldb/table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon15::ReverseKeyComparator
FindShortSuccessor	src/leveldb/util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
FindShortestSeparator	src/leveldb/db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	src/leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	src/leveldb/table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon15::ReverseKeyComparator
FindShortestSeparator	src/leveldb/util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
FindSmallest	src/leveldb/table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon11::MergingIterator
FindTable	src/leveldb/db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
FindTx	src/index/txindex.cpp	/^bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const$/;"	f	class:TxIndex
FindTx	src/qt/test/wallettests.cpp	/^QModelIndex FindTx(const QAbstractItemModel& model, const uint256& txid)$/;"	f	namespace:__anon63
FindUndoPos	src/validation.cpp	/^static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize)$/;"	f	file:
FindWalletTx	src/wallet/walletdb.cpp	/^DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)$/;"	f	class:WalletBatch
Finish	src/leveldb/table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	src/leveldb/table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	src/leveldb/table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	src/leveldb/table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	src/leveldb/db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishErase	src/leveldb/util/cache.cc	/^bool LRUCache::FinishErase(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
FinishImpl	src/leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	src/leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	src/leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	src/leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	src/leveldb/db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon19::Stats
FinishedSingleOp	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FinishedSingleOp	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FirstLogFile	src/leveldb/db/recovery_test.cc	/^  uint64_t FirstLogFile() {$/;"	f	class:leveldb::RecoveryTest
FixChecksum	src/leveldb/db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
FixedSeeds	src/chainparams.h	/^    const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }$/;"	f	class:CChainParams
Flags	src/coins.h	/^    enum Flags {$/;"	g	struct:CCoinsCacheEntry
FlatFilePos	src/flatfile.h	/^    FlatFilePos() : nFile(-1), nPos(0) {}$/;"	f	struct:FlatFilePos
FlatFilePos	src/flatfile.h	/^    FlatFilePos(int nFileIn, unsigned int nPosIn) :$/;"	f	struct:FlatFilePos
FlatFilePos	src/flatfile.h	/^struct FlatFilePos$/;"	s
FlatFileSeq	src/flatfile.cpp	/^FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :$/;"	f	class:FlatFileSeq
FlatFileSeq	src/flatfile.h	/^class FlatFileSeq$/;"	c
Flush	src/coins.cpp	/^bool CCoinsViewCache::Flush() {$/;"	f	class:CCoinsViewCache
Flush	src/dbwrapper.h	/^    bool Flush()$/;"	f	class:CDBWrapper
Flush	src/flatfile.cpp	/^bool FlatFileSeq::Flush(const FlatFilePos& pos, bool finalize)$/;"	f	class:FlatFileSeq
Flush	src/leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Flush() {$/;"	f	class:leveldb::TestWritableFile
Flush	src/leveldb/db/leveldbutil.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon31::StdoutPrinter
Flush	src/leveldb/db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon35::WritableFileImpl
Flush	src/leveldb/table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	src/leveldb/table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	src/leveldb/util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Flush	src/leveldb/util/env_win.cc	/^Status Win32WritableFile::Flush()$/;"	f	class:leveldb::Win32::Win32WritableFile
Flush	src/streams.h	/^    void Flush() {$/;"	f	class:BitStreamWriter
Flush	src/wallet/db.cpp	/^void BerkeleyBatch::Flush()$/;"	f	class:BerkeleyBatch
Flush	src/wallet/db.cpp	/^void BerkeleyDatabase::Flush(bool shutdown)$/;"	f	class:BerkeleyDatabase
Flush	src/wallet/db.cpp	/^void BerkeleyEnvironment::Flush(bool fShutdown)$/;"	f	class:BerkeleyEnvironment
Flush	src/wallet/wallet.cpp	/^void CWallet::Flush(bool shutdown)$/;"	f	class:CWallet
FlushBackgroundCallbacks	src/validationinterface.cpp	/^void CMainSignals::FlushBackgroundCallbacks() {$/;"	f	class:CMainSignals
FlushBlockFile	src/validation.cpp	/^void static FlushBlockFile(bool fFinalize = false)$/;"	f	file:
FlushStateMode	src/validation.cpp	/^enum class FlushStateMode {$/;"	c	file:
FlushStateToDisk	src/validation.cpp	/^bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {$/;"	f	file:
FlushStateToDisk	src/validation.cpp	/^void FlushStateToDisk() {$/;"	f
FlushUnconfirmed	src/policy/fees.cpp	/^void CBlockPolicyEstimator::FlushUnconfirmed() {$/;"	f	class:CBlockPolicyEstimator
FlushWallets	src/wallet/load.cpp	/^void FlushWallets()$/;"	f
Footer	src/leveldb/table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	src/leveldb/table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachBlockFilterIndex	src/index/blockfilterindex.cpp	/^void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn)$/;"	f
ForEachMergeSetup	src/test/util_tests.cpp	/^    void ForEachMergeSetup(Fn&& fn)$/;"	f	struct:ArgsMergeTestingSetup
ForEachMergeSetup	src/test/util_tests.cpp	/^    void ForEachMergeSetup(Fn&& fn)$/;"	f	struct:ChainMergeTestingSetup
ForEachNode	src/net.h	/^    void ForEachNode(Callable&& func) const$/;"	f	class:CConnman
ForEachNode	src/net.h	/^    void ForEachNode(Callable&& func)$/;"	f	class:CConnman
ForEachNodeThen	src/net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const$/;"	f	class:CConnman
ForEachNodeThen	src/net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post)$/;"	f	class:CConnman
ForEachOverlapping	src/leveldb/db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key,$/;"	f	class:leveldb::Version
ForEditing	src/qt/addressbookpage.h	/^        ForEditing  \/**< Open address book for editing *\/$/;"	e	enum:AddressBookPage::Mode
ForNode	src/net.cpp	/^bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)$/;"	f	class:CConnman
ForRead	src/serialize.h	/^    constexpr bool ForRead() const { return false; }$/;"	f	struct:CSerActionSerialize
ForRead	src/serialize.h	/^    constexpr bool ForRead() const { return true; }$/;"	f	struct:CSerActionUnserialize
ForSelection	src/qt/addressbookpage.h	/^        ForSelection, \/**< Open address book to pick address *\/$/;"	e	enum:AddressBookPage::Mode
ForceError	src/leveldb/db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
ForceSetArg	src/util/system.cpp	/^void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)$/;"	f	class:ArgsManager
FormatArg	src/tinyformat.h	/^        FormatArg()$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	src/tinyformat.h	/^        explicit FormatArg(const T& value)$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	src/tinyformat.h	/^class FormatArg$/;"	c	namespace:tinyformat::detail
FormatException	src/util/system.cpp	/^static std::string FormatException(const std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	src/clientversion.cpp	/^std::string FormatFullVersion()$/;"	f
FormatHDKeypath	src/util/bip32.cpp	/^std::string FormatHDKeypath(const std::vector<uint32_t>& path)$/;"	f
FormatISO8601Date	src/util/time.cpp	/^std::string FormatISO8601Date(int64_t nTime) {$/;"	f
FormatISO8601DateTime	src/util/time.cpp	/^std::string FormatISO8601DateTime(int64_t nTime) {$/;"	f
FormatList	src/tinyformat.h	/^        FormatList(detail::FormatArg* formatters, int N)$/;"	f	class:tinyformat::FormatList
FormatList	src/tinyformat.h	/^class FormatList$/;"	c	namespace:tinyformat
FormatListN	src/tinyformat.h	/^        explicit FormatListN(const Args&... args)$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	src/tinyformat.h	/^    public: FormatListN() : FormatList(0, 0) {}$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	src/tinyformat.h	/^class FormatListN : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListN	src/tinyformat.h	/^template<> class FormatListN<0> : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListRef	src/tinyformat.h	/^typedef const FormatList& FormatListRef;$/;"	t	namespace:tinyformat
FormatMoney	src/util/moneystr.cpp	/^std::string FormatMoney(const CAmount& n)$/;"	f
FormatOutputType	src/outputtype.cpp	/^const std::string& FormatOutputType(OutputType type)$/;"	f
FormatParagraph	src/util/strencodings.cpp	/^std::string FormatParagraph(const std::string& in, size_t width, size_t indent)$/;"	f
FormatScript	src/core_write.cpp	/^std::string FormatScript(const CScript& script)$/;"	f
FormatScriptError	src/test/script_tests.cpp	/^static const char *FormatScriptError(ScriptError_t err)$/;"	f	file:
FormatScriptFlags	src/test/transaction_tests.cpp	/^std::string FormatScriptFlags(unsigned int flags)$/;"	f
FormatStateMessage	src/util/validation.cpp	/^std::string FormatStateMessage(const CValidationState &state)$/;"	f
FormatSubVersion	src/clientversion.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatTest	src/leveldb/db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb	file:
FormatTxStatus	src/qt/transactiondesc.cpp	/^QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const interfaces::WalletTxStatus& status, bool inMempool, int numBlocks)$/;"	f	class:TransactionDesc
FormatVersion	src/clientversion.cpp	/^static std::string FormatVersion(int nVersion)$/;"	f	file:
FormattedAmountRole	src/qt/transactiontablemodel.h	/^        FormattedAmountRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Free	src/leveldb/db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
FreeLocked	src/support/lockedpool.cpp	/^void PosixLockedPageAllocator::FreeLocked(void* addr, size_t len)$/;"	f	class:PosixLockedPageAllocator
FreeLocked	src/support/lockedpool.cpp	/^void Win32LockedPageAllocator::FreeLocked(void* addr, size_t len)$/;"	f	class:Win32LockedPageAllocator
Freedesktop	src/qt/notificator.h	/^        Freedesktop,                \/**< Use DBus org.freedesktop.Notifications *\/$/;"	e	enum:Notificator::Mode
FreedesktopImage	src/qt/notificator.cpp	/^    FreedesktopImage() {}$/;"	f	class:FreedesktopImage
FreedesktopImage	src/qt/notificator.cpp	/^FreedesktopImage::FreedesktopImage(const QImage &img):$/;"	f	class:FreedesktopImage
FreedesktopImage	src/qt/notificator.cpp	/^Q_DECLARE_METATYPE(FreedesktopImage);$/;"	v
FreedesktopImage	src/qt/notificator.cpp	/^class FreedesktopImage$/;"	c	file:
FreespaceChecker	src/qt/intro.cpp	/^FreespaceChecker::FreespaceChecker(Intro *_intro)$/;"	f	class:FreespaceChecker
FreespaceChecker	src/qt/intro.cpp	/^class FreespaceChecker : public QObject$/;"	c	file:
FromHex	test/functional/feature_bip68_sequence.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex$/;"	i
FromHex	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
FromHex	test/functional/p2p_blocksonly.py	/^from test_framework.messages import msg_tx, CTransaction, FromHex$/;"	i
FromHex	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
FromHex	test/functional/rpc_txoutproof.py	/^from test_framework.messages import CMerkleBlock, FromHex, ToHex$/;"	i
FromHex	test/functional/test_framework/messages.py	/^def FromHex(obj, hex_string):$/;"	f
FromHex	test/functional/wallet_groups.py	/^from test_framework.messages import CTransaction, FromHex, ToHex$/;"	i
FromSignatureData	src/psbt.cpp	/^void PSBTInput::FromSignatureData(const SignatureData& sigdata)$/;"	f	class:PSBTInput
FromSignatureData	src/psbt.cpp	/^void PSBTOutput::FromSignatureData(const SignatureData& sigdata)$/;"	f	class:PSBTOutput
FromTx	src/test/setup_common.cpp	/^CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx) {$/;"	f	class:TestMemPoolEntryHelper
FromTx	src/test/setup_common.cpp	/^CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransactionRef& tx)$/;"	f	class:TestMemPoolEntryHelper
FrozenCleanupCheck	src/test/checkqueue_tests.cpp	/^    FrozenCleanupCheck() {}$/;"	f	struct:FrozenCleanupCheck
FrozenCleanupCheck	src/test/checkqueue_tests.cpp	/^struct FrozenCleanupCheck {$/;"	s	file:
FrozenCleanup_Queue	src/test/checkqueue_tests.cpp	/^typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;$/;"	t	file:
FullBlockTest	test/functional/feature_block.py	/^class FullBlockTest(BitcoinTestFramework):$/;"	c
Func	src/script/descriptor.cpp	/^bool Func(const std::string& str, Span<const char>& sp)$/;"	f	namespace:__anon75
Function	src/scheduler.h	/^    typedef std::function<void()> Function;$/;"	t	class:CScheduler
FundTransaction	src/wallet/rpcwallet.cpp	/^void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options)$/;"	f
FundTransaction	src/wallet/wallet.cpp	/^bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)$/;"	f	class:CWallet
GCOV	Makefile	/^GCOV = \/usr\/bin\/gcov$/;"	m
GCOV	doc/man/Makefile	/^GCOV = \/usr\/bin\/gcov$/;"	m
GCOV	src/Makefile	/^GCOV = \/usr\/bin\/gcov$/;"	m
GCSFilter	src/blockfilter.cpp	/^GCSFilter::GCSFilter(const Params& params)$/;"	f	class:GCSFilter
GCSFilter	src/blockfilter.cpp	/^GCSFilter::GCSFilter(const Params& params, const ElementSet& elements)$/;"	f	class:GCSFilter
GCSFilter	src/blockfilter.cpp	/^GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)$/;"	f	class:GCSFilter
GCSFilter	src/blockfilter.h	/^class GCSFilter$/;"	c
GCS_SER_TYPE	src/blockfilter.cpp	/^static constexpr int GCS_SER_TYPE = SER_NETWORK;$/;"	v	file:
GCS_SER_VERSION	src/blockfilter.cpp	/^static constexpr int GCS_SER_VERSION = 0;$/;"	v	file:
GENBIN	src/univalue/Makefile	/^GENBIN = gen\/gen$(BUILD_EXEEXT)$/;"	m
GENERATED_TEST_FILES	src/Makefile	/^GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)$/;"	m
GENERATOR	test/functional/test_framework/descriptors.py	/^GENERATOR = [0xf5dee51989, 0xa9fdca3312, 0x1bab10e32d, 0x3706b1677a, 0x644d626ffd]$/;"	v
GENFAILURE	src/netbase.cpp	/^    GENFAILURE = 0x01,       \/\/!< General failure$/;"	e	enum:uint8_t	file:
GENHTML	Makefile	/^GENHTML = $/;"	m
GENHTML	doc/man/Makefile	/^GENHTML = $/;"	m
GENHTML	src/Makefile	/^GENHTML = $/;"	m
GENISOIMAGE	Makefile	/^GENISOIMAGE = $/;"	m
GENISOIMAGE	doc/man/Makefile	/^GENISOIMAGE = $/;"	m
GENISOIMAGE	src/Makefile	/^GENISOIMAGE = $/;"	m
GEN_SRCS	src/univalue/Makefile	/^GEN_SRCS = gen\/gen.cpp$/;"	m
GET	src/httpserver.h	/^        GET,$/;"	e	enum:HTTPRequest::RequestMethod
GETADDR	src/protocol.cpp	/^const char *GETADDR="getaddr";$/;"	m	namespace:NetMsgType	file:
GETBLOCKS	src/protocol.cpp	/^const char *GETBLOCKS="getblocks";$/;"	m	namespace:NetMsgType	file:
GETBLOCKTXN	src/protocol.cpp	/^const char *GETBLOCKTXN="getblocktxn";$/;"	m	namespace:NetMsgType	file:
GETDATA	src/protocol.cpp	/^const char *GETDATA="getdata";$/;"	m	namespace:NetMsgType	file:
GETDATA_TX_INTERVAL	src/net_processing.cpp	/^static constexpr int64_t GETDATA_TX_INTERVAL = 60 * 1000000;$/;"	v	file:
GETHEADERS	src/protocol.cpp	/^const char *GETHEADERS="getheaders";$/;"	m	namespace:NetMsgType	file:
GETHEADERS_VERSION	src/version.h	/^static const int GETHEADERS_VERSION = 31800;$/;"	v
GIT	Makefile	/^GIT = \/usr\/bin\/git$/;"	m
GIT	contrib/devtools/github-merge.py	/^GIT = os.getenv('GIT','git')$/;"	v
GIT	contrib/verify-commits/verify-commits.py	/^GIT = os.getenv('GIT', 'git')$/;"	v
GIT	doc/man/Makefile	/^GIT = \/usr\/bin\/git$/;"	m
GIT	src/Makefile	/^GIT = \/usr\/bin\/git$/;"	m
GIT_COMMIT_DATE	src/clientversion.cpp	/^#define GIT_COMMIT_DATE /;"	d	file:
GIT_COMMIT_ID	src/clientversion.cpp	/^#define GIT_COMMIT_ID /;"	d	file:
GIT_LS_CMD	contrib/devtools/copyright_header.py	/^GIT_LS_CMD = 'git ls-files --full-name'.split(' ')$/;"	v
GIT_TOPLEVEL_CMD	contrib/devtools/copyright_header.py	/^GIT_TOPLEVEL_CMD = 'git rev-parse --show-toplevel'.split(' ')$/;"	v
GPROF_CXXFLAGS	Makefile	/^GPROF_CXXFLAGS = $/;"	m
GPROF_CXXFLAGS	doc/man/Makefile	/^GPROF_CXXFLAGS = $/;"	m
GPROF_CXXFLAGS	src/Makefile	/^GPROF_CXXFLAGS = $/;"	m
GPROF_LDFLAGS	Makefile	/^GPROF_LDFLAGS = $/;"	m
GPROF_LDFLAGS	doc/man/Makefile	/^GPROF_LDFLAGS = $/;"	m
GPROF_LDFLAGS	src/Makefile	/^GPROF_LDFLAGS = $/;"	m
GREEN	test/functional/test_runner.py	/^    GREEN = ('\\033[0m', '\\033[0;32m')$/;"	v
GREP	Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	doc/man/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	src/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	src/secp256k1/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	src/univalue/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREY	test/functional/test_runner.py	/^    GREY = ('\\033[0m', '\\033[1;30m')$/;"	v
GSSAPI	src/netbase.cpp	/^    GSSAPI = 0x01,        \/\/!< GSSAPI$/;"	e	enum:uint8_t	file:
GUARDED_BY	src/net.h	/^    CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};$/;"	f	class:CNode
GUARDED_BY	src/net.h	/^    bool fRelayTxes GUARDED_BY(cs_filter){false};$/;"	f	class:CNode
GUARDED_BY	src/net.h	/^    bool fSendMempool GUARDED_BY(cs_inventory){false};$/;"	f	class:CNode
GUARDED_BY	src/net.h	/^    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing){0};$/;"	f	class:CNode
GUARDED_BY	src/net.h	/^    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing){0};$/;"	f	class:CNode
GUARDED_BY	src/net.h	/^    std::string cleanSubVer GUARDED_BY(cs_SubVer){};$/;"	f	class:CNode
GUARDED_BY	src/net.h	/^    uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};$/;"	f	class:CNode
GUARDED_BY	src/net.h	/^    uint64_t nSendBytes GUARDED_BY(cs_vSend){0};$/;"	f	class:CNode
GUARDED_BY	src/threadsafety.h	/^#define GUARDED_BY(/;"	d
GUARDED_BY	src/txmempool.h	/^    bool m_is_loaded GUARDED_BY(cs){false};$/;"	f	class:CTxMemPool
GUARDED_BY	src/wallet/wallet.h	/^    int nWalletVersion GUARDED_BY(cs_wallet){FEATURE_BASE};$/;"	f	class:final
GUARDED_VAR	src/threadsafety.h	/^#define GUARDED_VAR /;"	d
GUARDED_VAR	src/threadsafety.h	/^#define GUARDED_VAR$/;"	d
GUI	src/util/system.h	/^    GUI,$/;"	m	class:OptionsCategory
GUIUtil	src/qt/bitcoingui.h	/^namespace GUIUtil {$/;"	n
GUIUtil	src/qt/guiutil.cpp	/^namespace GUIUtil {$/;"	n	file:
GUIUtil	src/qt/guiutil.h	/^namespace GUIUtil$/;"	n
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
GZIP_ENV	src/secp256k1/Makefile	/^GZIP_ENV = --best$/;"	m
GZIP_ENV	src/univalue/Makefile	/^GZIP_ENV = --best$/;"	m
G_TRANSLATION_FUN	src/bitcoin-cli.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	src/bitcoin-tx.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	src/bitcoin-wallet.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	src/bitcoind.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	src/qt/main.cpp	/^extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = [](const char* psz) {$/;"	v
G_TRANSLATION_FUN	src/test/setup_common.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
Generate	src/leveldb/db/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon19::RandomGenerator
Generate	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon32::RandomGenerator
Generate	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon33::RandomGenerator
GenerateAuthCookie	src/rpc/protocol.cpp	/^bool GenerateAuthCookie(std::string *cookie_out)$/;"	f
GenerateCoinbaseCommitment	src/validation.cpp	/^std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
GenerateFilter	src/leveldb/table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
GenerateNewKey	src/wallet/wallet.cpp	/^CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)$/;"	f	class:CWallet
GenerateNewSeed	src/wallet/wallet.cpp	/^CPubKey CWallet::GenerateNewSeed()$/;"	f	class:CWallet
GenerateSelectSet	src/net.cpp	/^bool CConnman::GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)$/;"	f	class:CConnman
Generated	src/qt/transactionrecord.h	/^        Generated,$/;"	e	enum:TransactionRecord::Type
GenericTransactionSignatureChecker	src/script/interpreter.h	/^    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}$/;"	f	class:GenericTransactionSignatureChecker
GenericTransactionSignatureChecker	src/script/interpreter.h	/^    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}$/;"	f	class:GenericTransactionSignatureChecker
GenericTransactionSignatureChecker	src/script/interpreter.h	/^class GenericTransactionSignatureChecker : public BaseSignatureChecker$/;"	c
Genesis	src/chain.h	/^    CBlockIndex *Genesis() const {$/;"	f	class:CChain
GenesisBlock	src/chainparams.h	/^    const CBlock& GenesisBlock() const { return genesis; }$/;"	f	class:CChainParams
Get	src/leveldb/db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	src/leveldb/db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	src/leveldb/db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	src/leveldb/db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	src/leveldb/db/recovery_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::RecoveryTest
Get	src/leveldb/db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
Get	src/leveldb/db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	src/leveldb/db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
Get	src/script/sigcache.cpp	/^    Get(const uint256& entry, const bool erase)$/;"	f	class:__anon84::CSignatureCache
Get	src/streams.h	/^    FILE* Get() const           { return file; }$/;"	f	class:CAutoFile
GetActiveNotifiers	src/zmq/zmqnotificationinterface.cpp	/^std::list<const CZMQAbstractNotifier*> CZMQNotificationInterface::GetActiveNotifiers() const$/;"	f	class:CZMQNotificationInterface
GetAddedNodeInfo	src/net.cpp	/^std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()$/;"	f	class:CConnman
GetAddr	src/addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddrLocal	src/net.cpp	/^CService CNode::GetAddrLocal() const {$/;"	f	class:CNode
GetAddrName	src/net.cpp	/^std::string CNode::GetAddrName() const {$/;"	f	class:CNode
GetAddr_	src/addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)$/;"	f	class:CAddrMan
GetAddress	src/zmq/zmqabstractnotifier.h	/^    std::string GetAddress() const { return address; }$/;"	f	class:CZMQAbstractNotifier
GetAddressBalances	src/wallet/wallet.cpp	/^std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain::Lock& locked_chain)$/;"	f	class:CWallet
GetAddressCount	src/net.cpp	/^size_t CConnman::GetAddressCount() const$/;"	f	class:CConnman
GetAddressGroupings	src/wallet/wallet.cpp	/^std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()$/;"	f	class:CWallet
GetAddresses	src/net.cpp	/^std::vector<CAddress> CConnman::GetAddresses()$/;"	f	class:CConnman
GetAdjustedTime	src/timedata.cpp	/^int64_t GetAdjustedTime()$/;"	f
GetAffectedKeys	src/wallet/wallet.cpp	/^std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)$/;"	f
GetAllDestinationsForKey	src/outputtype.cpp	/^std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)$/;"	f
GetAllOutputTypes	src/rpc/rawtransaction.cpp	/^static std::string GetAllOutputTypes()$/;"	f	file:
GetAllReserveKeys	src/wallet/wallet.h	/^    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }$/;"	f	class:final
GetAllowed	src/leveldb/util/env_posix.cc	/^  intptr_t GetAllowed() const {$/;"	f	class:leveldb::__anon8::Limiter	file:
GetAmounts	src/wallet/wallet.cpp	/^void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,$/;"	f	class:CWalletTx
GetAncestor	src/chain.cpp	/^CBlockIndex* CBlockIndex::GetAncestor(int height)$/;"	f	class:CBlockIndex
GetAncestor	src/chain.cpp	/^const CBlockIndex* CBlockIndex::GetAncestor(int height) const$/;"	f	class:CBlockIndex
GetAndClear	src/streams.h	/^    void GetAndClear(CSerializeData &d) {$/;"	f	class:CDataStream
GetApproximateSizes	src/leveldb/db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	src/leveldb/db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetArg	src/util/system.cpp	/^    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)$/;"	f	class:ArgsManagerHelper
GetArg	src/util/system.cpp	/^int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const$/;"	f	class:ArgsManager
GetArg	src/util/system.cpp	/^std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const$/;"	f	class:ArgsManager
GetArgHelper	src/util/system.cpp	/^    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)$/;"	f	class:ArgsManagerHelper
GetArgs	src/util/system.cpp	/^std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const$/;"	f	class:ArgsManager
GetAuthCookie	src/rpc/protocol.cpp	/^bool GetAuthCookie(std::string *cookie_out)$/;"	f
GetAuthCookieFile	src/rpc/protocol.cpp	/^static fs::path GetAuthCookieFile(bool temp=false)$/;"	f	file:
GetAutostartDir	src/qt/guiutil.cpp	/^fs::path static GetAutostartDir()$/;"	f	namespace:GUIUtil
GetAutostartFilePath	src/qt/guiutil.cpp	/^fs::path static GetAutostartFilePath()$/;"	f	namespace:GUIUtil
GetAvailableBalance	src/wallet/wallet.cpp	/^CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const$/;"	f	class:CWallet
GetAvailableCredit	src/wallet/wallet.cpp	/^CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache, const isminefilter& filter) const$/;"	f	class:CWalletTx
GetBalance	src/wallet/wallet.cpp	/^CWallet::Balance CWallet::GetBalance(const int min_depth) const$/;"	f	class:CWallet
GetBanned	src/banman.cpp	/^void BanMan::GetBanned(banmap_t& banmap)$/;"	f	class:BanMan
GetBestBlock	src/coins.cpp	/^uint256 CCoinsView::GetBestBlock() const { return uint256(); }$/;"	f	class:CCoinsView
GetBestBlock	src/coins.cpp	/^uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }$/;"	f	class:CCoinsViewBacked
GetBestBlock	src/coins.cpp	/^uint256 CCoinsViewCache::GetBestBlock() const {$/;"	f	class:CCoinsViewCache
GetBestBlock	src/coins.h	/^    const uint256 &GetBestBlock() const { return hashBlock; }$/;"	f	class:CCoinsViewCursor
GetBestBlock	src/txdb.cpp	/^uint256 CCoinsViewDB::GetBestBlock() const {$/;"	f	class:CCoinsViewDB
GetBestHeight	src/net.cpp	/^int CConnman::GetBestHeight() const$/;"	f	class:CConnman
GetBindAddress	src/net.cpp	/^static CAddress GetBindAddress(SOCKET sock)$/;"	f	file:
GetBlockChecked	src/rpc/blockchain.cpp	/^static CBlock GetBlockChecked(const CBlockIndex* pblockindex)$/;"	f	file:
GetBlockFileInfo	src/validation.cpp	/^CBlockFileInfo* GetBlockFileInfo(size_t n)$/;"	f
GetBlockFilterIndex	src/index/blockfilterindex.cpp	/^BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type)$/;"	f
GetBlockFilterTest	test/functional/rpc_getblockfilter.py	/^class GetBlockFilterTest(BitcoinTestFramework):$/;"	c
GetBlockHash	src/blockfilter.h	/^    const uint256& GetBlockHash() const { return m_block_hash; }$/;"	f	class:BlockFilter
GetBlockHash	src/chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	src/chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHeader	src/chain.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockHeader	src/primitives/block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlock
GetBlockPos	src/chain.h	/^    FlatFilePos GetBlockPos() const {$/;"	f	class:CBlockIndex
GetBlockPosFilename	src/validation.cpp	/^fs::path GetBlockPosFilename(const FlatFilePos &pos)$/;"	f
GetBlockProof	src/chain.cpp	/^arith_uint256 GetBlockProof(const CBlockIndex& block)$/;"	f
GetBlockProofEquivalentTime	src/chain.cpp	/^int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)$/;"	f
GetBlockSubsidy	src/validation.cpp	/^CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)$/;"	f
GetBlockTemplateLPTest	test/functional/mining_getblocktemplate_longpoll.py	/^class GetBlockTemplateLPTest(BitcoinTestFramework):$/;"	c
GetBlockTime	src/chain.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockTime	src/primitives/block.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockHeader
GetBlockTimeMax	src/chain.h	/^    int64_t GetBlockTimeMax() const$/;"	f	class:CBlockIndex
GetBlockWeight	src/consensus/validation.h	/^static inline int64_t GetBlockWeight(const CBlock& block)$/;"	f
GetBlocksConnected	src/validation.cpp	/^    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {$/;"	f	class:ConnectTrace
GetBlocksDir	src/util/system.cpp	/^const fs::path &GetBlocksDir()$/;"	f
GetBlocksToMaturity	src/wallet/wallet.cpp	/^int CMerkleTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CMerkleTx
GetBoolArg	src/util/system.cpp	/^bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const$/;"	f	class:ArgsManager
GetBroadcastTransactions	src/wallet/wallet.h	/^    bool GetBroadcastTransactions() const { return fBroadcastTransactions; }$/;"	f	class:final
GetBucketPosition	src/addrman.cpp	/^int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const$/;"	f	class:CAddrInfo
GetByte	src/netaddress.cpp	/^unsigned int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetCPUID	src/random.cpp	/^static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)$/;"	f	file:
GetCScript	src/keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetCScript	src/script/sign.cpp	/^bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }$/;"	f	class:FlatSigningProvider
GetCScript	src/script/sign.cpp	/^bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const$/;"	f	class:HidingSigningProvider
GetCScript	src/script/sign.cpp	/^static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)$/;"	f	file:
GetCScript	src/script/sign.h	/^    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }$/;"	f	class:SigningProvider
GetCScripts	src/keystore.cpp	/^std::set<CScriptID> CBasicKeyStore::GetCScripts() const$/;"	f	class:CBasicKeyStore
GetCachableAmount	src/wallet/wallet.cpp	/^CAmount CWalletTx::GetCachableAmount(AmountType type, const isminefilter& filter, bool recalculate) const$/;"	f	class:CWalletTx
GetCacheSize	src/coins.cpp	/^unsigned int CCoinsViewCache::GetCacheSize() const {$/;"	f	class:CCoinsViewCache
GetCategoryMask	src/logging.h	/^        uint32_t GetCategoryMask() const { return m_categories.load(); }$/;"	f	class:BCLog::Logger
GetChainName	src/util/system.cpp	/^std::string ArgsManager::GetChainName() const$/;"	f	class:ArgsManager
GetChainTipsTest	test/functional/rpc_getchaintips.py	/^class GetChainTipsTest (BitcoinTestFramework):$/;"	c
GetChance	src/addrman.cpp	/^double CAddrInfo::GetChance(int64_t nNow) const$/;"	f	class:CAddrInfo
GetChange	src/wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	src/wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetChange	src/wallet/wallet.cpp	/^CAmount CWalletTx::GetChange() const$/;"	f	class:CWalletTx
GetCheapHash	src/hash.h	/^    inline uint64_t GetCheapHash() {$/;"	f	class:CHashWriter
GetChildren	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon35::InMemoryEnv
GetChildren	src/leveldb/include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	src/leveldb/util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon8::PosixEnv
GetChildren	src/leveldb/util/env_win.cc	/^Status Win32Env::GetChildren(const std::string& dir, std::vector<std::string>* result)$/;"	f	class:leveldb::Win32::Win32Env
GetCoin	src/coins.cpp	/^bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }$/;"	f	class:CCoinsView
GetCoin	src/coins.cpp	/^bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }$/;"	f	class:CCoinsViewBacked
GetCoin	src/coins.cpp	/^bool CCoinsViewCache::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewCache
GetCoin	src/txdb.cpp	/^bool CCoinsViewDB::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewDB
GetCoin	src/txmempool.cpp	/^bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewMemPool
GetCoinsMapEntry	src/test/coins_tests.cpp	/^void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)$/;"	f
GetCommand	src/protocol.cpp	/^std::string CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	src/protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetComment	src/test/script_tests.cpp	/^    std::string GetComment() const$/;"	f	class:__anon58::TestBuilder
GetCompact	src/arith_uint256.cpp	/^uint32_t arith_uint256::GetCompact(bool fNegative) const$/;"	f	class:arith_uint256
GetConfigArgs	src/test/util_tests.cpp	/^    std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }$/;"	f	struct:TestArgsManager
GetConfigFile	src/util/system.cpp	/^fs::path GetConfigFile(const std::string& confPath)$/;"	f
GetConfigOptions	src/util/system.cpp	/^static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)$/;"	f	file:
GetConflictTx	src/txmempool.cpp	/^const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const$/;"	f	class:CTxMemPool
GetConflicts	src/wallet/wallet.cpp	/^std::set<uint256> CWallet::GetConflicts(const uint256& txid) const$/;"	f	class:CWallet
GetConflicts	src/wallet/wallet.cpp	/^std::set<uint256> CWalletTx::GetConflicts() const$/;"	f	class:CWalletTx
GetConsensus	src/chainparams.h	/^    const Consensus::Params& GetConsensus() const { return consensus; }$/;"	f	class:CChainParams
GetCountWithAncestors	src/txmempool.h	/^    uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetCountWithDescendants	src/txmempool.h	/^    uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetCredit	src/wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	src/wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	src/wallet/wallet.cpp	/^CAmount CWalletTx::GetCredit(interfaces::Chain::Lock& locked_chain, const isminefilter& filter) const$/;"	f	class:CWalletTx
GetCurrentDir	src/leveldb/util/env_win.cc	/^std::string GetCurrentDir()$/;"	f	namespace:leveldb::Win32
GetCurrentDirW	src/leveldb/util/env_win.cc	/^std::wstring GetCurrentDirW()$/;"	f	namespace:leveldb::Win32
GetCursor	src/wallet/db.h	/^    Dbc* GetCursor()$/;"	f	class:BerkeleyBatch
GetDB	src/index/txindex.cpp	/^BaseIndex::DB& TxIndex::GetDB() const { return *m_db; }$/;"	f	class:TxIndex
GetDBHandle	src/wallet/wallet.h	/^    WalletDatabase& GetDBHandle()$/;"	f	class:final
GetDataDir	src/util/system.cpp	/^const fs::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDataMsg	src/protocol.h	/^enum GetDataMsg$/;"	g
GetDebit	src/wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	src/wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	src/wallet/wallet.cpp	/^CAmount CWalletTx::GetDebit(const isminefilter& filter) const$/;"	f	class:CWalletTx
GetDebugMessage	src/consensus/validation.h	/^    std::string GetDebugMessage() const { return strDebugMessage; }$/;"	f	class:CValidationState
GetDefaultAddressType	src/qt/addresstablemodel.cpp	/^OutputType AddressTableModel::GetDefaultAddressType() const { return walletModel->wallet().getDefaultAddressType(); };$/;"	f	class:AddressTableModel
GetDefaultDataDir	src/util/system.cpp	/^fs::path GetDefaultDataDir()$/;"	f
GetDefaultPort	src/chainparams.h	/^    int GetDefaultPort() const { return nDefaultPort; }$/;"	f	class:CChainParams
GetDefaultProxyAddress	src/qt/optionsmodel.cpp	/^static const QString GetDefaultProxyAddress()$/;"	f	file:
GetDepthInMainChain	src/wallet/wallet.cpp	/^int CMerkleTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CMerkleTx
GetDesirableServiceFlags	src/protocol.cpp	/^ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {$/;"	f
GetDestData	src/wallet/wallet.cpp	/^bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const$/;"	f	class:CWallet
GetDestValues	src/wallet/wallet.cpp	/^std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const$/;"	f	class:CWallet
GetDestinationForKey	src/outputtype.cpp	/^CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)$/;"	f
GetDeterministicRandomizer	src/net.cpp	/^CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const$/;"	f	class:CConnman
GetDevURandom	src/random.cpp	/^static void GetDevURandom(unsigned char *ent32)$/;"	f	file:
GetDifficulty	src/rpc/blockchain.cpp	/^double GetDifficulty(const CBlockIndex* blockindex)$/;"	f
GetDirName	src/leveldb/db/fault_injection_test.cc	/^static std::string GetDirName(const std::string filename) {$/;"	f	namespace:leveldb::__anon20
GetDiscardRate	src/wallet/fees.cpp	/^CFeeRate GetDiscardRate(const CWallet& wallet)$/;"	f
GetDisplayName	src/wallet/wallet.h	/^    const std::string GetDisplayName() const {$/;"	f	class:final
GetDustThreshold	src/policy/policy.cpp	/^CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)$/;"	f
GetEncoded	src/blockfilter.h	/^    const std::vector<unsigned char>& GetEncoded() const { return m_encoded; }$/;"	f	class:GCSFilter
GetEncodedFilter	src/blockfilter.h	/^    const std::vector<unsigned char>& GetEncodedFilter() const$/;"	f	class:BlockFilter
GetErrorReason	src/fs.cpp	/^static std::string GetErrorReason() {$/;"	f	namespace:fsbridge
GetExtKey	src/script/descriptor.cpp	/^    bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const$/;"	f	class:__anon75::final	file:
GetExtNetwork	src/netaddress.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetExtraOutboundCount	src/net.cpp	/^int CConnman::GetExtraOutboundCount()$/;"	f	class:CConnman
GetFee	src/policy/feerate.cpp	/^CAmount CFeeRate::GetFee(size_t nBytes_) const$/;"	f	class:CFeeRate
GetFee	src/txmempool.h	/^    const CAmount& GetFee() const { return nFee; }$/;"	f	class:CTxMemPoolEntry
GetFeePerK	src/policy/feerate.h	/^    CAmount GetFeePerK() const { return GetFee(1000); }$/;"	f	class:CFeeRate
GetFileIterator	src/leveldb/db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
GetFileSize	src/leveldb/include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	src/leveldb/util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon8::PosixEnv
GetFileSize	src/leveldb/util/env_win.cc	/^Status Win32Env::GetFileSize( const std::string& fname, uint64_t* file_size )$/;"	f	class:leveldb::Win32::Win32Env
GetFiles	src/leveldb/db/recovery_test.cc	/^  std::vector<uint64_t> GetFiles(FileType t) {$/;"	f	class:leveldb::RecoveryTest
GetFilter	src/blockfilter.h	/^    const GCSFilter& GetFilter() const { return m_filter; }$/;"	f	class:BlockFilter
GetFilterType	src/blockfilter.h	/^    BlockFilterType GetFilterType() const { return m_filter_type; }$/;"	f	class:BlockFilter
GetFilterType	src/index/blockfilterindex.h	/^    BlockFilterType GetFilterType() const { return m_filter_type; }$/;"	f	class:final
GetGroup	src/netaddress.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHDChain	src/wallet/wallet.h	/^    const CHDChain& GetHDChain() const { return hdChain; }$/;"	f	class:final
GetHash	src/blockfilter.cpp	/^uint256 BlockFilter::GetHash() const$/;"	f	class:BlockFilter
GetHash	src/hash.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHash	src/netaddress.cpp	/^uint64_t CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHash	src/primitives/block.cpp	/^uint256 CBlockHeader::GetHash() const$/;"	f	class:CBlockHeader
GetHash	src/primitives/transaction.cpp	/^uint256 CMutableTransaction::GetHash() const$/;"	f	class:CMutableTransaction
GetHash	src/primitives/transaction.h	/^    const uint256& GetHash() const { return hash; }$/;"	f	class:CTransaction
GetHash	src/pubkey.h	/^    uint256 GetHash() const$/;"	f	class:CPubKey
GetHash	src/wallet/wallet.h	/^    const uint256& GetHash() const { return tx->GetHash(); }$/;"	f	class:CMerkleTx
GetHeadBlocks	src/coins.cpp	/^std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }$/;"	f	class:CCoinsView
GetHeadBlocks	src/coins.cpp	/^std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }$/;"	f	class:CCoinsViewBacked
GetHeadBlocks	src/txdb.cpp	/^std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {$/;"	f	class:CCoinsViewDB
GetHeader	src/httpserver.cpp	/^std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const$/;"	f	class:HTTPRequest
GetHeapProfile	src/leveldb/port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeapProfile	src/leveldb/port/port_win.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeight	src/txmempool.h	/^    unsigned int GetHeight() const { return entryHeight; }$/;"	f	class:CTxMemPoolEntry
GetHelpMessage	src/util/system.cpp	/^std::string ArgsManager::GetHelpMessage() const$/;"	f	class:ArgsManager
GetHex	src/arith_uint256.cpp	/^std::string base_uint<BITS>::GetHex() const$/;"	f	class:base_uint
GetHex	src/uint256.cpp	/^std::string base_blob<BITS>::GetHex() const$/;"	f	class:base_blob
GetID	src/pubkey.h	/^    CKeyID GetID() const$/;"	f	class:CPubKey
GetId	src/net.h	/^    NodeId GetId() const {$/;"	f	class:CNode
GetImmatureCredit	src/wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache) const$/;"	f	class:CWalletTx
GetImmatureWatchOnlyCredit	src/wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache) const$/;"	f	class:CWalletTx
GetImportTimestamp	src/wallet/rpcdump.cpp	/^static int64_t GetImportTimestamp(const UniValue& data, int64_t now)$/;"	f	file:
GetIn6Addr	src/netaddress.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	src/netaddress.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetInfo	src/txmempool.cpp	/^static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator it) {$/;"	f	file:
GetInputCoin	src/wallet/wallet.h	/^    inline CInputCoin GetInputCoin() const$/;"	f	class:COutput
GetInputUTXO	src/psbt.cpp	/^bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const$/;"	f	class:PartiallySignedTransaction
GetInternalKey	src/leveldb/db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetIter	src/txmempool.cpp	/^boost::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const$/;"	f	class:CTxMemPool
GetIterSet	src/txmempool.cpp	/^CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const$/;"	f	class:CTxMemPool
GetJSON	src/test/script_tests.cpp	/^    UniValue GetJSON()$/;"	f	class:__anon58::TestBuilder
GetKey	src/dbwrapper.h	/^    template<typename K> bool GetKey(K& key) {$/;"	f	class:CDBIterator
GetKey	src/keystore.cpp	/^bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetKey	src/netaddress.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKey	src/script/sign.cpp	/^bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }$/;"	f	class:FlatSigningProvider
GetKey	src/script/sign.cpp	/^bool HidingSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const$/;"	f	class:HidingSigningProvider
GetKey	src/script/sign.h	/^    virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }$/;"	f	class:SigningProvider
GetKey	src/txdb.cpp	/^bool CCoinsViewDBCursor::GetKey(COutPoint &key) const$/;"	f	class:CCoinsViewDBCursor
GetKey	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const$/;"	f	class:CCryptoKeyStore
GetKeyBirthTimes	src/wallet/wallet.cpp	/^void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CKeyID, int64_t>& mapKeyBirth) const {$/;"	f	class:CWallet
GetKeyForDestination	src/keystore.cpp	/^CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)$/;"	f
GetKeyFromPool	src/wallet/wallet.cpp	/^bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)$/;"	f	class:CWallet
GetKeyOrigin	src/script/sign.cpp	/^bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const$/;"	f	class:FlatSigningProvider
GetKeyOrigin	src/script/sign.cpp	/^bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const$/;"	f	class:HidingSigningProvider
GetKeyOrigin	src/script/sign.h	/^    virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }$/;"	f	class:SigningProvider
GetKeyOrigin	src/wallet/wallet.cpp	/^bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const$/;"	f	class:CWallet
GetKeys	src/keystore.cpp	/^std::set<CKeyID> CBasicKeyStore::GetKeys() const$/;"	f	class:CBasicKeyStore
GetKeys	src/wallet/crypter.cpp	/^std::set<CKeyID> CCryptoKeyStore::GetKeys() const$/;"	f	class:CCryptoKeyStore
GetLabelAddresses	src/wallet/wallet.cpp	/^std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) const$/;"	f	class:CWallet
GetLabelName	src/wallet/wallet.cpp	/^const std::string& CWallet::GetLabelName(const CScript& scriptPubKey) const$/;"	f	class:CWallet
GetLangTerritory	src/qt/bitcoin.cpp	/^static QString GetLangTerritory()$/;"	f	file:
GetLastErrSz	src/leveldb/util/env_win.cc	/^std::string GetLastErrSz()$/;"	f	namespace:leveldb::Win32
GetLastErrSzW	src/leveldb/util/env_win.cc	/^std::wstring GetLastErrSzW()$/;"	f	namespace:leveldb::Win32
GetLegacySigOpCount	src/consensus/tx_verify.cpp	/^unsigned int GetLegacySigOpCount(const CTransaction& tx)$/;"	f
GetLen	src/pubkey.h	/^    unsigned int static GetLen(unsigned char chHeader)$/;"	f	class:CPubKey
GetLengthPrefixedSlice	src/leveldb/db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	src/leveldb/util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	src/leveldb/util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	src/leveldb/db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetLimit	src/support/lockedpool.cpp	/^size_t PosixLockedPageAllocator::GetLimit()$/;"	f	class:PosixLockedPageAllocator
GetLimit	src/support/lockedpool.cpp	/^size_t Win32LockedPageAllocator::GetLimit()$/;"	f	class:Win32LockedPageAllocator
GetListenPort	src/net.cpp	/^unsigned short GetListenPort()$/;"	f
GetLocal	src/net.cpp	/^bool GetLocal(CService& addr, const CNetAddr *paddrPeer)$/;"	f
GetLocalAddress	src/net.cpp	/^CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)$/;"	f
GetLocalNonce	src/net.h	/^    uint64_t GetLocalNonce() const {$/;"	f	class:CNode
GetLocalServices	src/net.cpp	/^ServiceFlags CConnman::GetLocalServices() const$/;"	f	class:CConnman
GetLocalServices	src/net.h	/^    ServiceFlags GetLocalServices() const$/;"	f	class:CNode
GetLocation	src/wallet/wallet.h	/^    const WalletLocation& GetLocation() const { return m_location; }$/;"	f	class:final
GetLocator	src/chain.cpp	/^CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {$/;"	f	class:CChain
GetLockData	src/sync.cpp	/^LockData& GetLockData() {$/;"	f
GetLockPoints	src/txmempool.h	/^    const LockPoints& GetLockPoints() const { return lockPoints; }$/;"	f	class:CTxMemPoolEntry
GetLocktimeForNewTransaction	src/wallet/wallet.cpp	/^static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)$/;"	f	file:
GetLogCategory	src/logging.cpp	/^bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)$/;"	f
GetLow64	src/arith_uint256.h	/^    uint64_t GetLow64() const$/;"	f	class:base_uint
GetMainSignals	src/validationinterface.cpp	/^CMainSignals& GetMainSignals()$/;"	f
GetMaxConfirms	src/policy/fees.cpp	/^    unsigned int GetMaxConfirms() const { return scale * confAvg.size(); }$/;"	f	class:TxConfirmStats
GetMaxHeight	src/leveldb/db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetMaxOutboundTarget	src/net.cpp	/^uint64_t CConnman::GetMaxOutboundTarget()$/;"	f	class:CConnman
GetMaxOutboundTimeLeftInCycle	src/net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeLeftInCycle()$/;"	f	class:CConnman
GetMaxOutboundTimeframe	src/net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeframe()$/;"	f	class:CConnman
GetMedianTimePast	src/chain.h	/^    int64_t GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMemPoolChildren	src/txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const$/;"	f	class:CTxMemPool
GetMemPoolParents	src/txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const$/;"	f	class:CTxMemPool
GetMessageHash	src/net.cpp	/^const uint256& CNetMessage::GetMessageHash() const$/;"	f	class:CNetMessage
GetMinFee	src/txmempool.cpp	/^CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {$/;"	f	class:CTxMemPool
GetMinimumFee	src/wallet/fees.cpp	/^CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc)$/;"	f
GetMinimumFeeRate	src/wallet/fees.cpp	/^CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc)$/;"	f
GetMockTime	src/util/time.cpp	/^int64_t GetMockTime()$/;"	f
GetModFeeAndSize	src/txmempool.h	/^    void GetModFeeAndSize(const CTxMemPoolEntry &a, double &mod_fee, double &size) const$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
GetModFeeAndSize	src/txmempool.h	/^    void GetModFeeAndSize(const T &a, double &mod_fee, double &size) const$/;"	f	class:CompareTxMemPoolEntryByAncestorFee
GetModFeesWithAncestors	src/miner.h	/^    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }$/;"	f	struct:CTxMemPoolModifiedEntry
GetModFeesWithAncestors	src/txmempool.h	/^    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetModFeesWithDescendants	src/txmempool.h	/^    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetModifiedFee	src/miner.h	/^    int64_t GetModifiedFee() const { return iter->GetModifiedFee(); }$/;"	f	struct:CTxMemPoolModifiedEntry
GetModifiedFee	src/txmempool.h	/^    int64_t GetModifiedFee() const { return nFee + feeDelta; }$/;"	f	class:CTxMemPoolEntry
GetMyStartingHeight	src/net.h	/^    int GetMyStartingHeight() const {$/;"	f	class:CNode
GetN	src/blockfilter.h	/^    uint32_t GetN() const { return m_N; }$/;"	f	class:GCSFilter
GetName	src/leveldb/db/leveldbutil.cc	/^  virtual std::string GetName() const { return "[stdout]"; }$/;"	f	class:leveldb::__anon31::StdoutPrinter
GetName	src/leveldb/helpers/memenv/memenv.cc	/^  virtual std::string GetName() const { return "[memenv]"; }$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
GetName	src/leveldb/helpers/memenv/memenv.cc	/^  virtual std::string GetName() const { return "[memenv]"; }$/;"	f	class:leveldb::__anon35::SequentialFileImpl
GetName	src/leveldb/helpers/memenv/memenv.cc	/^  virtual std::string GetName() const { return "[memenv]"; }$/;"	f	class:leveldb::__anon35::WritableFileImpl
GetName	src/leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
GetName	src/leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
GetName	src/leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixSequentialFile
GetName	src/leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixWritableFile
GetName	src/leveldb/util/env_win.cc	/^    virtual std::string GetName() const { return _filename; }$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
GetName	src/leveldb/util/env_win.cc	/^    virtual std::string GetName() const { return _filename; }$/;"	f	class:leveldb::Win32::Win32SequentialFile
GetName	src/leveldb/util/env_win.cc	/^    virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::Win32::Win32WritableFile
GetName	src/wallet/wallet.h	/^    const std::string& GetName() const { return m_location.GetName(); }$/;"	f	class:final
GetName	src/wallet/walletutil.h	/^    const std::string& GetName() const { return m_name; }$/;"	f	class:final
GetNameProxy	src/netbase.cpp	/^bool GetNameProxy(proxyType &nameProxyOut) {$/;"	f
GetNetwork	src/netaddress.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNetworkActive	src/net.h	/^    bool GetNetworkActive() const { return fNetworkActive; };$/;"	f	class:CConnman
GetNetworkHashPS	src/rpc/mining.cpp	/^static UniValue GetNetworkHashPS(int lookup, int height) {$/;"	f	file:
GetNetworkName	src/netbase.cpp	/^std::string GetNetworkName(enum Network net) {$/;"	f
GetNetworksInfo	src/rpc/net.cpp	/^static UniValue GetNetworksInfo()$/;"	f	file:
GetNewBucket	src/addrman.cpp	/^int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	src/addrman.h	/^    int GetNewBucket(const uint256 &nKey) const$/;"	f	class:CAddrInfo
GetNewNodeId	src/net.cpp	/^NodeId CConnman::GetNewNodeId()$/;"	f	class:CConnman
GetNextWorkRequired	src/pow.cpp	/^unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)$/;"	f
GetNodeCount	src/net.cpp	/^size_t CConnman::GetNodeCount(NumConnections flags)$/;"	f	class:CConnman
GetNodeStateStats	src/net_processing.cpp	/^bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {$/;"	f
GetNodeStats	src/net.cpp	/^void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)$/;"	f	class:CConnman
GetNumCores	src/util/system.cpp	/^int GetNumCores()$/;"	f
GetNumTransactions	src/merkleblock.h	/^    unsigned int GetNumTransactions() const { return nTransactions; };$/;"	f	class:CPartialMerkleTree
GetOSRand	src/random.cpp	/^void GetOSRand(unsigned char *ent32)$/;"	f
GetObfuscateKey	src/dbwrapper.cpp	/^const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)$/;"	f	namespace:dbwrapper_private
GetOldestKeyPoolTime	src/wallet/wallet.cpp	/^int64_t CWallet::GetOldestKeyPoolTime()$/;"	f	class:CWallet
GetOldestKeyTimeInPool	src/wallet/wallet.cpp	/^static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {$/;"	f	file:
GetOneColumn	src/crypto/ctaes/ctaes.c	/^static void GetOneColumn(AES_state* s, const AES_state* a, int c) {$/;"	f	file:
GetOp	src/script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	src/script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOpName	src/script/script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOpenSSLMutex	src/random.cpp	/^    Mutex& GetOpenSSLMutex(int i) { return m_mutex_openssl[i]; }$/;"	f	class:__anon61::RNGState
GetOptions	src/dbwrapper.cpp	/^static leveldb::Options GetOptions(size_t nCacheSize)$/;"	f	file:
GetOutboundMessageHighWaterMark	src/zmq/zmqabstractnotifier.h	/^    int GetOutboundMessageHighWaterMark() const { return outbound_message_high_water_mark; }$/;"	f	class:CZMQAbstractNotifier
GetOutboundTargetBytesLeft	src/net.cpp	/^uint64_t CConnman::GetOutboundTargetBytesLeft()$/;"	f	class:CConnman
GetOutputsHash	src/script/interpreter.cpp	/^uint256 GetOutputsHash(const T& txTo)$/;"	f	namespace:__anon77
GetOverlappingInputs	src/leveldb/db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetOverrideArgs	src/test/util_tests.cpp	/^    std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }$/;"	f	struct:TestArgsManager
GetP2SHSigOpCount	src/consensus/tx_verify.cpp	/^unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)$/;"	f
GetPageSize	src/leveldb/util/env_win.cc	/^size_t GetPageSize()$/;"	f	namespace:leveldb::Win32
GetParams	src/blockfilter.h	/^    const Params& GetParams() const { return m_params; }$/;"	f	class:GCSFilter
GetPath	src/wallet/walletutil.h	/^    const fs::path& GetPath() const { return m_path; }$/;"	f	class:final
GetPeer	src/httpserver.cpp	/^CService HTTPRequest::GetPeer() const$/;"	f	class:HTTPRequest
GetPidFile	src/init.cpp	/^static fs::path GetPidFile()$/;"	f	file:
GetPort	src/netaddress.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetPos	src/streams.h	/^    uint64_t GetPos() const {$/;"	f	class:CBufferedFile
GetPrevoutHash	src/script/interpreter.cpp	/^uint256 GetPrevoutHash(const T& txTo)$/;"	f	namespace:__anon77
GetPrivKey	src/key.cpp	/^CPrivKey CKey::GetPrivKey() const {$/;"	f	class:CKey
GetPrivateKeyFile	src/torcontrol.cpp	/^fs::path TorController::GetPrivateKeyFile()$/;"	f	class:TorController
GetProperty	src/leveldb/db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	src/leveldb/db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetProxy	src/netbase.cpp	/^bool GetProxy(enum Network net, proxyType &proxyInfoOut) {$/;"	f
GetProxySetting	src/qt/optionsmodel.cpp	/^static ProxySetting GetProxySetting(QSettings &settings, const QString &name)$/;"	f	file:
GetPubKey	src/key.cpp	/^CPubKey CKey::GetPubKey() const {$/;"	f	class:CKey
GetPubKey	src/keystore.cpp	/^bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CBasicKeyStore
GetPubKey	src/script/sign.cpp	/^bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }$/;"	f	class:FlatSigningProvider
GetPubKey	src/script/sign.cpp	/^bool HidingSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const$/;"	f	class:HidingSigningProvider
GetPubKey	src/script/sign.cpp	/^static bool GetPubKey(const SigningProvider& provider, const SignatureData& sigdata, const CKeyID& address, CPubKey& pubkey)$/;"	f	file:
GetPubKey	src/script/sign.h	/^    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }$/;"	f	class:SigningProvider
GetPubKey	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:CCryptoKeyStore
GetRange	src/leveldb/db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	src/leveldb/db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetReachabilityFrom	src/netaddress.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetReason	src/consensus/validation.h	/^    ValidationInvalidReason GetReason() const { return m_reason; }$/;"	f	class:CValidationState
GetReason	src/fs.h	/^        std::string GetReason() { return reason; }$/;"	f	class:fsbridge::FileLock
GetReceiveFloodSize	src/net.cpp	/^unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }$/;"	f	class:CConnman
GetRecvVersion	src/net.h	/^    int GetRecvVersion() const$/;"	f	class:CNode
GetRefCount	src/net.h	/^    int GetRefCount() const$/;"	f	class:CNode
GetRejectCode	src/consensus/validation.h	/^    unsigned int GetRejectCode() const { return chRejectCode; }$/;"	f	class:CValidationState
GetRejectReason	src/consensus/validation.h	/^    std::string GetRejectReason() const { return strRejectReason; }$/;"	f	class:CValidationState
GetRequestMethod	src/httpserver.cpp	/^HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const$/;"	f	class:HTTPRequest
GetRequiredFee	src/wallet/fees.cpp	/^CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)$/;"	f
GetRequiredFeeRate	src/wallet/fees.cpp	/^CFeeRate GetRequiredFeeRate(const CWallet& wallet)$/;"	f
GetReservedKey	src/wallet/wallet.cpp	/^bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)$/;"	f	class:CReserveKey
GetRestartPoint	src/leveldb/table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetScriptError	src/validation.h	/^    ScriptError GetScriptError() const { return error; }$/;"	f	class:CScriptCheck
GetScriptForDestination	src/script/standard.cpp	/^CScript GetScriptForDestination(const CTxDestination& dest)$/;"	f
GetScriptForMultisig	src/script/standard.cpp	/^CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)$/;"	f
GetScriptForRawPubKey	src/script/standard.cpp	/^CScript GetScriptForRawPubKey(const CPubKey& pubKey)$/;"	f
GetScriptForWitness	src/script/standard.cpp	/^CScript GetScriptForWitness(const CScript& redeemscript)$/;"	f
GetScriptOp	src/script/script.cpp	/^bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator end, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet)$/;"	f
GetSendVersion	src/net.cpp	/^int CNode::GetSendVersion() const$/;"	f	class:CNode
GetSequenceHash	src/script/interpreter.cpp	/^uint256 GetSequenceHash(const T& txTo)$/;"	f	namespace:__anon77
GetSerializeSize	src/serialize.h	/^size_t GetSerializeSize(const T& t, int nVersion = 0)$/;"	f
GetSerializeSizeMany	src/serialize.h	/^size_t GetSerializeSizeMany(int nVersion, const T&... t)$/;"	f
GetSharedTx	src/txmempool.h	/^    CTransactionRef GetSharedTx() const { return this->tx; }$/;"	f	class:CTxMemPoolEntry
GetShortID	src/blockencodings.cpp	/^uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {$/;"	f	class:CBlockHeaderAndShortTxIDs
GetShortID	src/test/blockencodings_tests.cpp	/^    uint64_t GetShortID(const uint256& txhash) const {$/;"	f	class:TestHeaderAndShortIDs
GetSigOpCost	src/txmempool.h	/^    int64_t GetSigOpCost() const { return sigOpCost; }$/;"	f	class:CTxMemPoolEntry
GetSigOpCostWithAncestors	src/txmempool.h	/^    int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSigOpCount	src/script/script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	src/script/script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSigOpCount	test/functional/test_framework/script.py	/^    def GetSigOpCount(self, fAccurate):$/;"	m	class:CScript
GetSizeOfCompactSize	src/serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64_t nSize)$/;"	f
GetSizeOfVarInt	src/serialize.h	/^inline unsigned int GetSizeOfVarInt(I n)$/;"	f
GetSizeWithAncestors	src/miner.h	/^    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }$/;"	f	struct:CTxMemPoolModifiedEntry
GetSizeWithAncestors	src/txmempool.h	/^    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSizeWithDescendants	src/txmempool.h	/^    uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetSkipHeight	src/chain.cpp	/^int static inline GetSkipHeight(int height) {$/;"	f	file:
GetSnapshot	src/leveldb/db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	src/leveldb/db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetSockAddr	src/netaddress.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetSortedDepthAndScore	src/txmempool.cpp	/^std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const$/;"	f	class:CTxMemPool
GetSpecialFolderPath	src/util/system.cpp	/^fs::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetSpecialScriptSize	src/compressor.cpp	/^unsigned int GetSpecialScriptSize(unsigned int nSize)$/;"	f
GetSpendHeight	src/validation.cpp	/^int GetSpendHeight(const CCoinsViewCache& inputs)$/;"	f
GetSpendSize	src/wallet/wallet.h	/^    int GetSpendSize(unsigned int out, bool use_max_sig = false) const$/;"	f	class:CWalletTx
GetSpendsCoinbase	src/txmempool.h	/^    bool GetSpendsCoinbase() const { return spendsCoinbase; }$/;"	f	class:CTxMemPoolEntry
GetStartOnSystemStartup	src/qt/guiutil.cpp	/^bool GetStartOnSystemStartup() { return false; }$/;"	f	namespace:GUIUtil
GetStartOnSystemStartup	src/qt/guiutil.cpp	/^bool GetStartOnSystemStartup()$/;"	f	namespace:GUIUtil
GetStartupTime	src/util/system.cpp	/^int64_t GetStartupTime()$/;"	f
GetStateFor	src/test/versionbits_tests.cpp	/^    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }$/;"	f	class:TestConditionChecker
GetStateFor	src/versionbits.cpp	/^ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStateSinceHeightFor	src/test/versionbits_tests.cpp	/^    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }$/;"	f	class:TestConditionChecker
GetStateSinceHeightFor	src/versionbits.cpp	/^int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStateStatisticsFor	src/versionbits.cpp	/^BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const$/;"	f	class:AbstractThresholdConditionChecker
GetStats	src/leveldb/db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetSystemTimeInSeconds	src/util/time.cpp	/^int64_t GetSystemTimeInSeconds()$/;"	f
GetTempDir	src/leveldb/db/c_test.c	/^static const char* GetTempDir(void) {$/;"	f	file:
GetTestDirectory	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
GetTestDirectory	src/leveldb/include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	src/leveldb/util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon8::PosixEnv
GetTestDirectory	src/leveldb/util/env_win.cc	/^Status Win32Env::GetTestDirectory( std::string* path )$/;"	f	class:leveldb::Win32::Win32Env
GetTickCount64	src/leveldb/util/env_win.cc	/^#define GetTickCount64 /;"	d	file:
GetTime	src/txmempool.h	/^    int64_t GetTime() const { return nTime; }$/;"	f	class:CTxMemPoolEntry
GetTime	src/util/time.cpp	/^int64_t GetTime()$/;"	f
GetTimeMicros	src/util/time.cpp	/^int64_t GetTimeMicros()$/;"	f
GetTimeMillis	src/util/time.cpp	/^int64_t GetTimeMillis()$/;"	f
GetTimeOffset	src/timedata.cpp	/^int64_t GetTimeOffset()$/;"	f
GetTotalBytesRecv	src/net.cpp	/^uint64_t CConnman::GetTotalBytesRecv()$/;"	f	class:CConnman
GetTotalBytesSent	src/net.cpp	/^uint64_t CConnman::GetTotalBytesSent()$/;"	f	class:CConnman
GetTotalSize	src/primitives/transaction.cpp	/^unsigned int CTransaction::GetTotalSize() const$/;"	f	class:CTransaction
GetTotalTxSize	src/txmempool.h	/^    uint64_t GetTotalTxSize() const$/;"	f	class:CTxMemPool
GetTransaction	src/validation.cpp	/^bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, const CBlockIndex* const block_index)$/;"	f
GetTransactionAncestry	src/txmempool.cpp	/^void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const {$/;"	f	class:CTxMemPool
GetTransactionInputWeight	src/consensus/validation.h	/^static inline int64_t GetTransactionInputWeight(const CTxIn& txin)$/;"	f
GetTransactionSigOpCost	src/consensus/tx_verify.cpp	/^int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)$/;"	f
GetTransactionWeight	src/consensus/validation.h	/^static inline int64_t GetTransactionWeight(const CTransaction& tx)$/;"	f
GetTransactionsUpdated	src/txmempool.cpp	/^unsigned int CTxMemPool::GetTransactionsUpdated() const$/;"	f	class:CTxMemPool
GetTriedBucket	src/addrman.cpp	/^int CAddrInfo::GetTriedBucket(const uint256& nKey) const$/;"	f	class:CAddrInfo
GetTryNewOutboundPeer	src/net.cpp	/^bool CConnman::GetTryNewOutboundPeer()$/;"	f	class:CConnman
GetTx	src/miner.h	/^    const CTransaction& GetTx() const { return iter->GetTx(); }$/;"	f	struct:CTxMemPoolModifiedEntry
GetTx	src/txmempool.h	/^    const CTransaction& GetTx() const { return *this->tx; }$/;"	f	class:CTxMemPoolEntry
GetTxSize	src/miner.h	/^    size_t GetTxSize() const { return iter->GetTxSize(); }$/;"	f	struct:CTxMemPoolModifiedEntry
GetTxSize	src/txmempool.cpp	/^size_t CTxMemPoolEntry::GetTxSize() const$/;"	f	class:CTxMemPoolEntry
GetTxTime	src/wallet/wallet.cpp	/^int64_t CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxWeight	src/txmempool.h	/^    size_t GetTxWeight() const { return nTxWeight; }$/;"	f	class:CTxMemPoolEntry
GetTxnOutputType	src/script/standard.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	src/hash.h	/^    int GetType() const { return nType; }$/;"	f	class:CHashWriter
GetType	src/script/bitcoinconsensus.cpp	/^    int GetType() const { return m_type; }$/;"	f	class:__anon81::TxInputStream
GetType	src/streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CAutoFile
GetType	src/streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CDataStream
GetType	src/streams.h	/^    int GetType() const { return m_type; }$/;"	f	class:VectorReader
GetType	src/streams.h	/^    int GetType() const { return nType; }$/;"	f	class:CBufferedFile
GetType	src/streams.h	/^    int GetType() const { return nType; }$/;"	f	class:OverrideStream
GetType	src/streams.h	/^    int GetType() const$/;"	f	class:CVectorWriter
GetType	src/zmq/zmqabstractnotifier.h	/^    std::string GetType() const { return type; }$/;"	f	class:CZMQAbstractNotifier
GetURI	src/httpserver.cpp	/^std::string HTTPRequest::GetURI() const$/;"	f	class:HTTPRequest
GetUTXOStats	src/rpc/blockchain.cpp	/^static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)$/;"	f	file:
GetUint64	src/uint256.h	/^    uint64_t GetUint64(int pos) const$/;"	f	class:base_blob
GetUndoChecked	src/rpc/blockchain.cpp	/^static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)$/;"	f	file:
GetUndoPos	src/chain.h	/^    FlatFilePos GetUndoPos() const {$/;"	f	class:CBlockIndex
GetUnrecognizedSections	src/util/system.cpp	/^const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const$/;"	f	class:ArgsManager
GetUnsuitableSectionOnlyArgs	src/util/system.cpp	/^const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const$/;"	f	class:ArgsManager
GetUseAddrmanOutgoing	src/net.h	/^    bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };$/;"	f	class:CConnman
GetValue	src/dbwrapper.h	/^    template<typename V> bool GetValue(V& value) {$/;"	f	class:CDBIterator
GetValue	src/txdb.cpp	/^bool CCoinsViewDBCursor::GetValue(Coin &coin) const$/;"	f	class:CCoinsViewDBCursor
GetValueIn	src/coins.cpp	/^CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
GetValueOut	src/primitives/transaction.cpp	/^CAmount CTransaction::GetValueOut() const$/;"	f	class:CTransaction
GetValueSize	src/dbwrapper.h	/^    unsigned int GetValueSize() {$/;"	f	class:CDBIterator
GetValueSize	src/txdb.cpp	/^unsigned int CCoinsViewDBCursor::GetValueSize() const$/;"	f	class:CCoinsViewDBCursor
GetValues	src/test/util_tests.cpp	/^    std::vector<std::string> GetValues(const ActionList& actions,$/;"	f	struct:ArgsMergeTestingSetup
GetVarint32	src/leveldb/util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	src/leveldb/util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	src/leveldb/util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	src/leveldb/util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	src/leveldb/util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GetVersion	src/hash.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CHashWriter
GetVersion	src/script/bitcoinconsensus.cpp	/^    int GetVersion() const { return m_version; }$/;"	f	class:__anon81::TxInputStream
GetVersion	src/serialize.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CSizeComputer
GetVersion	src/streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	src/streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CDataStream
GetVersion	src/streams.h	/^    int GetVersion() const { return m_version; }$/;"	f	class:VectorReader
GetVersion	src/streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CBufferedFile
GetVersion	src/streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:OverrideStream
GetVersion	src/streams.h	/^    int GetVersion() const$/;"	f	class:CVectorWriter
GetVersion	src/wallet/wallet.h	/^    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }$/;"	f	class:final
GetVirtualTransactionInputSize	src/policy/policy.cpp	/^int64_t GetVirtualTransactionInputSize(const CTxIn& txin, int64_t nSigOpCost, unsigned int bytes_per_sigop)$/;"	f
GetVirtualTransactionInputSize	src/policy/policy.h	/^static inline int64_t GetVirtualTransactionInputSize(const CTxIn& tx)$/;"	f
GetVirtualTransactionSize	src/policy/policy.cpp	/^int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost, unsigned int bytes_per_sigop)$/;"	f
GetVirtualTransactionSize	src/policy/policy.cpp	/^int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop)$/;"	f
GetVirtualTransactionSize	src/policy/policy.h	/^static inline int64_t GetVirtualTransactionSize(const CTransaction& tx)$/;"	f
GetVirtualTransactionSize	src/policy/settings.h	/^static inline int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t sigop_cost)$/;"	f
GetVirtualTransactionSize	src/policy/settings.h	/^static inline int64_t GetVirtualTransactionSize(int64_t weight, int64_t sigop_cost)$/;"	f
GetWallet	src/wallet/wallet.cpp	/^std::shared_ptr<CWallet> GetWallet(const std::string& name)$/;"	f
GetWalletDir	src/dummywallet.cpp	/^fs::path GetWalletDir()$/;"	f
GetWalletDir	src/wallet/walletutil.cpp	/^fs::path GetWalletDir()$/;"	f
GetWalletEnv	src/wallet/db.cpp	/^std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)$/;"	f
GetWalletForJSONRPCRequest	src/wallet/rpcwallet.cpp	/^std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)$/;"	f
GetWalletNameFromJSONRPCRequest	src/wallet/rpcwallet.cpp	/^bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name)$/;"	f
GetWalletTx	src/wallet/wallet.cpp	/^const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const$/;"	f	class:CWallet
GetWallets	src/dummywallet.cpp	/^std::vector<std::shared_ptr<CWallet>> GetWallets()$/;"	f
GetWallets	src/wallet/wallet.cpp	/^std::vector<std::shared_ptr<CWallet>> GetWallets()$/;"	f
GetWarnings	src/warnings.cpp	/^std::string GetWarnings(const std::string& strFor)$/;"	f
GetWitnessCommitmentIndex	src/validation.cpp	/^static int GetWitnessCommitmentIndex(const CBlock& block)$/;"	f	file:
GetWitnessHash	src/primitives/transaction.h	/^    const uint256& GetWitnessHash() const { return m_witness_hash; };$/;"	f	class:CTransaction
GetblockstatsTest	test/functional/rpc_getblockstats.py	/^class GetblockstatsTest(BitcoinTestFramework):$/;"	c
GetfLargeWorkForkFound	src/warnings.cpp	/^bool GetfLargeWorkForkFound()$/;"	f
GetinfoRequestHandler	src/bitcoin-cli.cpp	/^class GetinfoRequestHandler: public BaseRequestHandler$/;"	c	file:
GetnScore	src/net.cpp	/^static int GetnScore(const CService& addr)$/;"	f	file:
GolombRiceDecode	src/blockfilter.cpp	/^static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t P)$/;"	f	file:
GolombRiceEncode	src/blockfilter.cpp	/^static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)$/;"	f	file:
Good	src/addrman.h	/^    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
GoodBlock	src/test/validation_block_tests.cpp	/^const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)$/;"	f
Good_	src/addrman.cpp	/^void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime)$/;"	f	class:CAddrMan
GroupCoins	src/wallet/test/coinselector_tests.cpp	/^inline std::vector<OutputGroup>& GroupCoins(const std::vector<CInputCoin>& coins)$/;"	f
GroupCoins	src/wallet/test/coinselector_tests.cpp	/^inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)$/;"	f
GroupOutputs	src/wallet/wallet.cpp	/^std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const {$/;"	f	class:CWallet
GuessType	src/leveldb/db/dumpfile.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon27
GuessVerificationProgress	src/validation.cpp	/^double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {$/;"	f
GuiMain	src/qt/bitcoin.cpp	/^int GuiMain(int argc, char* argv[])$/;"	f
HAIR_SP_CP	src/qt/bitcoinunits.h	/^#define HAIR_SP_CP /;"	d
HAIR_SP_HTML	src/qt/bitcoinunits.h	/^#define HAIR_SP_HTML /;"	d
HAIR_SP_UTF8	src/qt/bitcoinunits.h	/^#define HAIR_SP_UTF8 /;"	d
HALF_ESTIMATE	src/policy/fees.h	/^    HALF_ESTIMATE,$/;"	m	class:FeeEstimateHorizon::FeeReason
HALF_SUCCESS_PCT	src/policy/fees.h	/^    static constexpr double HALF_SUCCESS_PCT = .6;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
HARDENED	src/script/descriptor.cpp	/^    HARDENED,$/;"	m	class:__anon75::DeriveType	file:
HARDENED	src/test/descriptor_tests.cpp	/^constexpr int HARDENED = 2; \/\/ Derivation needs access to private keys$/;"	m	namespace:__anon56	file:
HARDENED_CPPFLAGS	Makefile	/^HARDENED_CPPFLAGS =  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2$/;"	m
HARDENED_CPPFLAGS	doc/man/Makefile	/^HARDENED_CPPFLAGS =  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2$/;"	m
HARDENED_CPPFLAGS	src/Makefile	/^HARDENED_CPPFLAGS =  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2$/;"	m
HARDENED_CXXFLAGS	Makefile	/^HARDENED_CXXFLAGS =  -Wstack-protector -fstack-protector-all$/;"	m
HARDENED_CXXFLAGS	doc/man/Makefile	/^HARDENED_CXXFLAGS =  -Wstack-protector -fstack-protector-all$/;"	m
HARDENED_CXXFLAGS	src/Makefile	/^HARDENED_CXXFLAGS =  -Wstack-protector -fstack-protector-all$/;"	m
HARDENED_LDFLAGS	Makefile	/^HARDENED_LDFLAGS = $/;"	m
HARDENED_LDFLAGS	doc/man/Makefile	/^HARDENED_LDFLAGS = $/;"	m
HARDENED_LDFLAGS	src/Makefile	/^HARDENED_LDFLAGS = $/;"	m
HASH	src/leveldb/util/hash_test.cc	/^class HASH { };$/;"	c	namespace:leveldb	file:
HASH_LENGTH	depends/Makefile	/^HASH_LENGTH:=11$/;"	m
HAVE_BOOST	build_msvc/bitcoin_config.h	/^#define HAVE_BOOST /;"	d
HAVE_BOOST	src/config/bitcoin-config.h	/^#define HAVE_BOOST /;"	d
HAVE_BOOST_CHRONO	build_msvc/bitcoin_config.h	/^#define HAVE_BOOST_CHRONO /;"	d
HAVE_BOOST_CHRONO	src/config/bitcoin-config.h	/^#define HAVE_BOOST_CHRONO /;"	d
HAVE_BOOST_FILESYSTEM	build_msvc/bitcoin_config.h	/^#define HAVE_BOOST_FILESYSTEM /;"	d
HAVE_BOOST_FILESYSTEM	src/config/bitcoin-config.h	/^#define HAVE_BOOST_FILESYSTEM /;"	d
HAVE_BOOST_PROGRAM_OPTIONS	build_msvc/bitcoin_config.h	/^#define HAVE_BOOST_PROGRAM_OPTIONS /;"	d
HAVE_BOOST_SYSTEM	build_msvc/bitcoin_config.h	/^#define HAVE_BOOST_SYSTEM /;"	d
HAVE_BOOST_SYSTEM	src/config/bitcoin-config.h	/^#define HAVE_BOOST_SYSTEM /;"	d
HAVE_BOOST_THREAD	build_msvc/bitcoin_config.h	/^#define HAVE_BOOST_THREAD /;"	d
HAVE_BOOST_THREAD	src/config/bitcoin-config.h	/^#define HAVE_BOOST_THREAD /;"	d
HAVE_BOOST_UNIT_TEST_FRAMEWORK	build_msvc/bitcoin_config.h	/^#define HAVE_BOOST_UNIT_TEST_FRAMEWORK /;"	d
HAVE_BOOST_UNIT_TEST_FRAMEWORK	src/config/bitcoin-config.h	/^#define HAVE_BOOST_UNIT_TEST_FRAMEWORK /;"	d
HAVE_BUILTIN_EXPECT	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_BUILTIN_EXPECT /;"	d
HAVE_CONSENSUS_LIB	build_msvc/bitcoin_config.h	/^#define HAVE_CONSENSUS_LIB /;"	d
HAVE_CONSENSUS_LIB	src/config/bitcoin-config.h	/^#define HAVE_CONSENSUS_LIB /;"	d
HAVE_CXX11	Makefile	/^HAVE_CXX11 = 1$/;"	m
HAVE_CXX11	build_msvc/bitcoin_config.h	/^#define HAVE_CXX11 /;"	d
HAVE_CXX11	doc/man/Makefile	/^HAVE_CXX11 = 1$/;"	m
HAVE_CXX11	src/Makefile	/^HAVE_CXX11 = 1$/;"	m
HAVE_CXX11	src/config/bitcoin-config.h	/^#define HAVE_CXX11 /;"	d
HAVE_DECL_BE16TOH	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_BE16TOH /;"	d
HAVE_DECL_BE16TOH	src/compat/endian.h	/^#define HAVE_DECL_BE16TOH /;"	d
HAVE_DECL_BE16TOH	src/config/bitcoin-config.h	/^#define HAVE_DECL_BE16TOH /;"	d
HAVE_DECL_BE32TOH	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_BE32TOH /;"	d
HAVE_DECL_BE32TOH	src/compat/endian.h	/^#define HAVE_DECL_BE32TOH /;"	d
HAVE_DECL_BE32TOH	src/config/bitcoin-config.h	/^#define HAVE_DECL_BE32TOH /;"	d
HAVE_DECL_BE64TOH	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_BE64TOH /;"	d
HAVE_DECL_BE64TOH	src/compat/endian.h	/^#define HAVE_DECL_BE64TOH /;"	d
HAVE_DECL_BE64TOH	src/config/bitcoin-config.h	/^#define HAVE_DECL_BE64TOH /;"	d
HAVE_DECL_BSWAP_16	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_BSWAP_16 /;"	d
HAVE_DECL_BSWAP_16	src/config/bitcoin-config.h	/^#define HAVE_DECL_BSWAP_16 /;"	d
HAVE_DECL_BSWAP_32	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_BSWAP_32 /;"	d
HAVE_DECL_BSWAP_32	src/config/bitcoin-config.h	/^#define HAVE_DECL_BSWAP_32 /;"	d
HAVE_DECL_BSWAP_64	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_BSWAP_64 /;"	d
HAVE_DECL_BSWAP_64	src/config/bitcoin-config.h	/^#define HAVE_DECL_BSWAP_64 /;"	d
HAVE_DECL_DAEMON	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_DAEMON /;"	d
HAVE_DECL_DAEMON	src/config/bitcoin-config.h	/^#define HAVE_DECL_DAEMON /;"	d
HAVE_DECL_EVP_MD_CTX_NEW	src/config/bitcoin-config.h	/^#define HAVE_DECL_EVP_MD_CTX_NEW /;"	d
HAVE_DECL_HTOBE16	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_HTOBE16 /;"	d
HAVE_DECL_HTOBE16	src/compat/endian.h	/^#define HAVE_DECL_HTOBE16 /;"	d
HAVE_DECL_HTOBE16	src/config/bitcoin-config.h	/^#define HAVE_DECL_HTOBE16 /;"	d
HAVE_DECL_HTOBE32	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_HTOBE32 /;"	d
HAVE_DECL_HTOBE32	src/compat/endian.h	/^#define HAVE_DECL_HTOBE32 /;"	d
HAVE_DECL_HTOBE32	src/config/bitcoin-config.h	/^#define HAVE_DECL_HTOBE32 /;"	d
HAVE_DECL_HTOBE64	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_HTOBE64 /;"	d
HAVE_DECL_HTOBE64	src/compat/endian.h	/^#define HAVE_DECL_HTOBE64 /;"	d
HAVE_DECL_HTOBE64	src/config/bitcoin-config.h	/^#define HAVE_DECL_HTOBE64 /;"	d
HAVE_DECL_HTOLE16	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_HTOLE16 /;"	d
HAVE_DECL_HTOLE16	src/compat/endian.h	/^#define HAVE_DECL_HTOLE16 /;"	d
HAVE_DECL_HTOLE16	src/config/bitcoin-config.h	/^#define HAVE_DECL_HTOLE16 /;"	d
HAVE_DECL_HTOLE32	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_HTOLE32 /;"	d
HAVE_DECL_HTOLE32	src/compat/endian.h	/^#define HAVE_DECL_HTOLE32 /;"	d
HAVE_DECL_HTOLE32	src/config/bitcoin-config.h	/^#define HAVE_DECL_HTOLE32 /;"	d
HAVE_DECL_HTOLE64	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_HTOLE64 /;"	d
HAVE_DECL_HTOLE64	src/compat/endian.h	/^#define HAVE_DECL_HTOLE64 /;"	d
HAVE_DECL_HTOLE64	src/config/bitcoin-config.h	/^#define HAVE_DECL_HTOLE64 /;"	d
HAVE_DECL_LE16TOH	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_LE16TOH /;"	d
HAVE_DECL_LE16TOH	src/compat/endian.h	/^#define HAVE_DECL_LE16TOH /;"	d
HAVE_DECL_LE16TOH	src/config/bitcoin-config.h	/^#define HAVE_DECL_LE16TOH /;"	d
HAVE_DECL_LE32TOH	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_LE32TOH /;"	d
HAVE_DECL_LE32TOH	src/compat/endian.h	/^#define HAVE_DECL_LE32TOH /;"	d
HAVE_DECL_LE32TOH	src/config/bitcoin-config.h	/^#define HAVE_DECL_LE32TOH /;"	d
HAVE_DECL_LE64TOH	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_LE64TOH /;"	d
HAVE_DECL_LE64TOH	src/compat/endian.h	/^#define HAVE_DECL_LE64TOH /;"	d
HAVE_DECL_LE64TOH	src/config/bitcoin-config.h	/^#define HAVE_DECL_LE64TOH /;"	d
HAVE_DECL_STRERROR_R	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_STRERROR_R /;"	d
HAVE_DECL_STRERROR_R	src/config/bitcoin-config.h	/^#define HAVE_DECL_STRERROR_R /;"	d
HAVE_DECL_STRNLEN	build_msvc/bitcoin_config.h	/^#define HAVE_DECL_STRNLEN /;"	d
HAVE_DECL_STRNLEN	src/config/bitcoin-config.h	/^#define HAVE_DECL_STRNLEN /;"	d
HAVE_DECL___BUILTIN_CLZ	src/config/bitcoin-config.h	/^#define HAVE_DECL___BUILTIN_CLZ /;"	d
HAVE_DECL___BUILTIN_CLZL	src/config/bitcoin-config.h	/^#define HAVE_DECL___BUILTIN_CLZL /;"	d
HAVE_DECL___BUILTIN_CLZLL	src/config/bitcoin-config.h	/^#define HAVE_DECL___BUILTIN_CLZLL /;"	d
HAVE_DLFCN_H	src/config/bitcoin-config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_DLFCN_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_DLFCN_H	src/univalue/univalue-config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_FUNC_ATTRIBUTE_DLLEXPORT	build_msvc/bitcoin_config.h	/^#define HAVE_FUNC_ATTRIBUTE_DLLEXPORT /;"	d
HAVE_FUNC_ATTRIBUTE_DLLIMPORT	build_msvc/bitcoin_config.h	/^#define HAVE_FUNC_ATTRIBUTE_DLLIMPORT /;"	d
HAVE_FUNC_ATTRIBUTE_VISIBILITY	build_msvc/bitcoin_config.h	/^#define HAVE_FUNC_ATTRIBUTE_VISIBILITY /;"	d
HAVE_GETENTROPY_RAND	src/config/bitcoin-config.h	/^#define HAVE_GETENTROPY_RAND /;"	d
HAVE_INTTYPES_H	build_msvc/bitcoin_config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	src/config/bitcoin-config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	src/univalue/univalue-config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_LIBADVAPI32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBADVAPI32 /;"	d
HAVE_LIBCOMCTL32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBCOMCTL32 /;"	d
HAVE_LIBCOMDLG32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBCOMDLG32 /;"	d
HAVE_LIBCRYPT32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBCRYPT32 /;"	d
HAVE_LIBCRYPTO	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_LIBCRYPTO /;"	d
HAVE_LIBGDI32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBGDI32 /;"	d
HAVE_LIBIMM32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBIMM32 /;"	d
HAVE_LIBIPHLPAPI	build_msvc/bitcoin_config.h	/^#define HAVE_LIBIPHLPAPI /;"	d
HAVE_LIBKERNEL32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBKERNEL32 /;"	d
HAVE_LIBMINGWTHRD	build_msvc/bitcoin_config.h	/^#define HAVE_LIBMINGWTHRD /;"	d
HAVE_LIBMSWSOCK	build_msvc/bitcoin_config.h	/^#define HAVE_LIBMSWSOCK /;"	d
HAVE_LIBOLE32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBOLE32 /;"	d
HAVE_LIBOLEAUT32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBOLEAUT32 /;"	d
HAVE_LIBRPCRT4	build_msvc/bitcoin_config.h	/^#define HAVE_LIBRPCRT4 /;"	d
HAVE_LIBSHELL32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBSHELL32 /;"	d
HAVE_LIBSHLWAPI	build_msvc/bitcoin_config.h	/^#define HAVE_LIBSHLWAPI /;"	d
HAVE_LIBSSP	build_msvc/bitcoin_config.h	/^#define HAVE_LIBSSP /;"	d
HAVE_LIBUSER32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBUSER32 /;"	d
HAVE_LIBUUID	build_msvc/bitcoin_config.h	/^#define HAVE_LIBUUID /;"	d
HAVE_LIBWINMM	build_msvc/bitcoin_config.h	/^#define HAVE_LIBWINMM /;"	d
HAVE_LIBWINSPOOL	build_msvc/bitcoin_config.h	/^#define HAVE_LIBWINSPOOL /;"	d
HAVE_LIBWS2_32	build_msvc/bitcoin_config.h	/^#define HAVE_LIBWS2_32 /;"	d
HAVE_LIBZ_	build_msvc/bitcoin_config.h	/^#define HAVE_LIBZ_ /;"	d
HAVE_MEMORY_H	build_msvc/bitcoin_config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	src/config/bitcoin-config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	src/univalue/univalue-config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MINIUPNPC_MINIUPNPC_H	build_msvc/bitcoin_config.h	/^#define HAVE_MINIUPNPC_MINIUPNPC_H /;"	d
HAVE_MINIUPNPC_MINIWGET_H	build_msvc/bitcoin_config.h	/^#define HAVE_MINIUPNPC_MINIWGET_H /;"	d
HAVE_MINIUPNPC_UPNPCOMMANDS_H	build_msvc/bitcoin_config.h	/^#define HAVE_MINIUPNPC_UPNPCOMMANDS_H /;"	d
HAVE_MINIUPNPC_UPNPERRORS_H	build_msvc/bitcoin_config.h	/^#define HAVE_MINIUPNPC_UPNPERRORS_H /;"	d
HAVE_PTHREAD	src/config/bitcoin-config.h	/^#define HAVE_PTHREAD /;"	d
HAVE_PTHREAD_PRIO_INHERIT	src/config/bitcoin-config.h	/^#define HAVE_PTHREAD_PRIO_INHERIT /;"	d
HAVE_STDINT_H	build_msvc/bitcoin_config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	src/config/bitcoin-config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	src/univalue/univalue-config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDIO_H	build_msvc/bitcoin_config.h	/^#define HAVE_STDIO_H /;"	d
HAVE_STDIO_H	src/config/bitcoin-config.h	/^#define HAVE_STDIO_H /;"	d
HAVE_STDLIB_H	build_msvc/bitcoin_config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	src/config/bitcoin-config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	src/univalue/univalue-config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRERROR_R	src/config/bitcoin-config.h	/^#define HAVE_STRERROR_R /;"	d
HAVE_STRINGS_H	build_msvc/bitcoin_config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	src/config/bitcoin-config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	src/univalue/univalue-config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRING_H	build_msvc/bitcoin_config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	src/config/bitcoin-config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	src/univalue/univalue-config.h	/^#define HAVE_STRING_H /;"	d
HAVE_SYS_SELECT_H	src/config/bitcoin-config.h	/^#define HAVE_SYS_SELECT_H /;"	d
HAVE_SYS_STAT_H	build_msvc/bitcoin_config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	src/config/bitcoin-config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	src/univalue/univalue-config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TYPES_H	build_msvc/bitcoin_config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	src/config/bitcoin-config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	src/univalue/univalue-config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_THREAD_LOCAL	src/config/bitcoin-config.h	/^#define HAVE_THREAD_LOCAL /;"	d
HAVE_UNISTD_H	src/config/bitcoin-config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	src/univalue/univalue-config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_VISIBILITY_ATTRIBUTE	build_msvc/bitcoin_config.h	/^#define HAVE_VISIBILITY_ATTRIBUTE /;"	d
HAVE_VISIBILITY_ATTRIBUTE	src/config/bitcoin-config.h	/^#define HAVE_VISIBILITY_ATTRIBUTE /;"	d
HAVE_WORKING_BOOST_SLEEP_FOR	build_msvc/bitcoin_config.h	/^#define HAVE_WORKING_BOOST_SLEEP_FOR /;"	d
HAVE_WORKING_BOOST_SLEEP_FOR	src/config/bitcoin-config.h	/^#define HAVE_WORKING_BOOST_SLEEP_FOR /;"	d
HAVE___INT128	src/secp256k1/src/libsecp256k1-config.h	/^#define HAVE___INT128 /;"	d
HEAD	src/httpserver.h	/^        HEAD,$/;"	e	enum:HTTPRequest::RequestMethod
HEADERS	src/Makefile	/^HEADERS = $(include_HEADERS)$/;"	m
HEADERS	src/protocol.cpp	/^const char *HEADERS="headers";$/;"	m	namespace:NetMsgType	file:
HEADERS	src/secp256k1/Makefile	/^HEADERS = $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HEADERS	src/univalue/Makefile	/^HEADERS = $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HEADERS_DOWNLOAD_TIMEOUT_BASE	src/net_processing.cpp	/^static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; \/\/ 15 minutes$/;"	v	file:
HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER	src/net_processing.cpp	/^static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; \/\/ 1ms\/header$/;"	v	file:
HEADER_END	src/wallet/db.cpp	/^static const char *HEADER_END = "HEADER=END";$/;"	v	file:
HEADER_HEIGHT_DELTA_SYNC	src/qt/modaloverlay.h	/^static constexpr int HEADER_HEIGHT_DELTA_SYNC = 24;$/;"	v
HEADER_MODULE_PATHS	contrib/devtools/circular-dependencies.py	/^HEADER_MODULE_PATHS = [$/;"	v
HEADER_SIZE	src/protocol.h	/^    static constexpr size_t HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE;$/;"	m	class:CMessageHeader
HEX	src/rest.cpp	/^    HEX,$/;"	m	class:RetFormat	file:
HEX	test/functional/interface_rest.py	/^    HEX = 3$/;"	v	class:ReqType
HEXDUMP	Makefile	/^HEXDUMP = \/usr\/bin\/hexdump$/;"	m
HEXDUMP	doc/man/Makefile	/^HEXDUMP = \/usr\/bin\/hexdump$/;"	m
HEXDUMP	src/Makefile	/^HEXDUMP = \/usr\/bin\/hexdump$/;"	m
HISTORICAL_BLOCK_AGE	src/net_processing.cpp	/^static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;$/;"	v	file:
HOLDER	contrib/devtools/copyright_header.py	/^HOLDER = 'The Bitcoin Core developers'$/;"	v
HOST	depends/Makefile	/^HOST ?= $(BUILD)$/;"	m
HOSTUNREACHABLE	src/netbase.cpp	/^    HOSTUNREACHABLE = 0x04,  \/\/!< Network unreachable$/;"	e	enum:uint8_t	file:
HOST_ID_SALT	depends/Makefile	/^HOST_ID_SALT ?= salt$/;"	m
HTML_HACK_SP	src/qt/bitcoinunits.h	/^#define HTML_HACK_SP /;"	d
HTTPBasicsTest	test/functional/interface_http.py	/^class HTTPBasicsTest (BitcoinTestFramework):$/;"	c
HTTPBasicsTest	test/functional/rpc_users.py	/^class HTTPBasicsTest(BitcoinTestFramework):$/;"	c
HTTPBindAddresses	src/httpserver.cpp	/^static bool HTTPBindAddresses(struct evhttp* http)$/;"	f	file:
HTTPClosure	src/httpserver.h	/^class HTTPClosure$/;"	c
HTTPConnection	contrib/linearize/linearize-hashes.py	/^from http.client import HTTPConnection$/;"	i
HTTPError	contrib/devtools/github-merge.py	/^from urllib.error import HTTPError$/;"	i
HTTPEvent	src/httpserver.cpp	/^HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):$/;"	f	class:HTTPEvent
HTTPEvent	src/httpserver.h	/^class HTTPEvent$/;"	c
HTTPPathHandler	src/httpserver.cpp	/^    HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):$/;"	f	struct:HTTPPathHandler
HTTPPathHandler	src/httpserver.cpp	/^struct HTTPPathHandler$/;"	s	file:
HTTPRPCTimer	src/httprpc.cpp	/^    HTTPRPCTimer(struct event_base* eventBase, std::function<void()>& func, int64_t millis) :$/;"	f	class:HTTPRPCTimer
HTTPRPCTimer	src/httprpc.cpp	/^class HTTPRPCTimer : public RPCTimerBase$/;"	c	file:
HTTPRPCTimerInterface	src/httprpc.cpp	/^    explicit HTTPRPCTimerInterface(struct event_base* _base) : base(_base)$/;"	f	class:HTTPRPCTimerInterface
HTTPRPCTimerInterface	src/httprpc.cpp	/^class HTTPRPCTimerInterface : public RPCTimerInterface$/;"	c	file:
HTTPReply	src/bitcoin-cli.cpp	/^    HTTPReply(): status(0), error(-1) {}$/;"	f	struct:HTTPReply
HTTPReply	src/bitcoin-cli.cpp	/^struct HTTPReply$/;"	s	file:
HTTPReq_JSONRPC	src/httprpc.cpp	/^static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)$/;"	f	file:
HTTPRequest	src/httpserver.cpp	/^HTTPRequest::HTTPRequest(struct evhttp_request* _req) : req(_req),$/;"	f	class:HTTPRequest
HTTPRequest	src/httpserver.h	/^class HTTPRequest$/;"	c
HTTPRequestHandler	src/httpserver.h	/^typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;$/;"	t
HTTPStatus	test/functional/test_framework/authproxy.py	/^from http import HTTPStatus$/;"	i
HTTPStatusCode	src/rpc/protocol.h	/^enum HTTPStatusCode$/;"	g
HTTPWorkItem	src/httpserver.cpp	/^    HTTPWorkItem(std::unique_ptr<HTTPRequest> _req, const std::string &_path, const HTTPRequestHandler& _func):$/;"	f	class:final
HTTPWorkQueueRun	src/httpserver.cpp	/^static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)$/;"	f	file:
HTTP_BAD_METHOD	src/rpc/protocol.h	/^    HTTP_BAD_METHOD            = 405,$/;"	e	enum:HTTPStatusCode
HTTP_BAD_REQUEST	src/rpc/protocol.h	/^    HTTP_BAD_REQUEST           = 400,$/;"	e	enum:HTTPStatusCode
HTTP_FORBIDDEN	src/rpc/protocol.h	/^    HTTP_FORBIDDEN             = 403,$/;"	e	enum:HTTPStatusCode
HTTP_INTERNAL_SERVER_ERROR	src/rpc/protocol.h	/^    HTTP_INTERNAL_SERVER_ERROR = 500,$/;"	e	enum:HTTPStatusCode
HTTP_NOT_FOUND	src/rpc/protocol.h	/^    HTTP_NOT_FOUND             = 404,$/;"	e	enum:HTTPStatusCode
HTTP_OK	src/rpc/protocol.h	/^    HTTP_OK                    = 200,$/;"	e	enum:HTTPStatusCode
HTTP_SERVICE_UNAVAILABLE	src/rpc/protocol.h	/^    HTTP_SERVICE_UNAVAILABLE   = 503,$/;"	e	enum:HTTPStatusCode
HTTP_TIMEOUT	test/functional/test_framework/authproxy.py	/^HTTP_TIMEOUT = 30$/;"	v
HTTP_UNAUTHORIZED	src/rpc/protocol.h	/^    HTTP_UNAUTHORIZED          = 401,$/;"	e	enum:HTTPStatusCode
HalfL	src/test/arith_uint256_tests.cpp	/^const arith_uint256 HalfL = (OneL << 255);$/;"	v
Handle	src/leveldb/include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleCallback	src/qt/test/apptests.h	/^    struct HandleCallback$/;"	s	class:AppTests
HandleDumpCommand	src/leveldb/db/leveldbutil.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon31
HandleError	src/dbwrapper.cpp	/^void HandleError(const leveldb::Status& status)$/;"	f	namespace:dbwrapper_private
HandleSIGHUP	src/init.cpp	/^static void HandleSIGHUP(int)$/;"	f	file:
HandleSIGTERM	src/init.cpp	/^static void HandleSIGTERM(int)$/;"	f	file:
HandleTable	src/leveldb/util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon4::HandleTable
HandleTable	src/leveldb/util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon4	file:
Handler	src/interfaces/handler.h	/^class Handler$/;"	c	namespace:interfaces
Handler	src/leveldb/include/leveldb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
HandlerImpl	src/interfaces/handler.cpp	/^    explicit HandlerImpl(boost::signals2::connection connection) : m_connection(std::move(connection)) {}$/;"	f	class:interfaces::__anon131::HandlerImpl
HandlerImpl	src/interfaces/handler.cpp	/^class HandlerImpl : public Handler$/;"	c	namespace:interfaces::__anon131	file:
Harness	src/leveldb/table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	src/leveldb/table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
HasAcceleratedCRC32C	src/leveldb/port/port_posix.cc	/^bool HasAcceleratedCRC32C() {$/;"	f	namespace:leveldb::port
HasAcceleratedCRC32C	src/leveldb/port/port_win.cc	/^bool HasAcceleratedCRC32C() {$/;"	f	namespace:leveldb::port
HasAllDesirableServiceFlags	src/protocol.h	/^static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {$/;"	f
HasNoInputsOf	src/txmempool.cpp	/^bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const$/;"	f	class:CTxMemPool
HasReason	src/test/miner_tests.cpp	/^    explicit HasReason(const std::string& reason) : m_reason(reason) {}$/;"	f	class:HasReason
HasReason	src/test/miner_tests.cpp	/^class HasReason {$/;"	c	file:
HasSelected	src/wallet/coincontrol.h	/^    bool HasSelected() const$/;"	f	class:CCoinControl
HasValidOps	src/script/script.cpp	/^bool CScript::HasValidOps() const$/;"	f	class:CScript
HasWalletSpend	src/wallet/wallet.cpp	/^bool CWallet::HasWalletSpend(const uint256& txid) const$/;"	f	class:CWallet
HasWallets	src/wallet/wallet.cpp	/^bool HasWallets()$/;"	f
HasWitness	src/primitives/transaction.h	/^    bool HasWitness() const$/;"	f	class:CTransaction
HasWitness	src/primitives/transaction.h	/^    bool HasWitness() const$/;"	f	struct:CMutableTransaction
Hash	src/bloom.cpp	/^inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const$/;"	f	class:CBloomFilter
Hash	src/hash.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	src/hash.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash	src/leveldb/util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
Hash160	src/hash.h	/^inline uint160 Hash160(const T1 pbegin, const T1 pend)$/;"	f
Hash160	src/hash.h	/^inline uint160 Hash160(const prevector<N, unsigned char>& vch)$/;"	f
Hash160	src/hash.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HashNumbers	src/leveldb/db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HashSlice	src/leveldb/util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache	file:
HashToRange	src/blockfilter.cpp	/^uint64_t GCSFilter::HashToRange(const Element& element) const$/;"	f	class:GCSFilter
HaveCScript	src/keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveCoin	src/coins.cpp	/^bool CCoinsView::HaveCoin(const COutPoint &outpoint) const$/;"	f	class:CCoinsView
HaveCoin	src/coins.cpp	/^bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->HaveCoin(outpoint); }$/;"	f	class:CCoinsViewBacked
HaveCoin	src/coins.cpp	/^bool CCoinsViewCache::HaveCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
HaveCoin	src/txdb.cpp	/^bool CCoinsViewDB::HaveCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewDB
HaveCoinInCache	src/coins.cpp	/^bool CCoinsViewCache::HaveCoinInCache(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
HaveInputs	src/coins.cpp	/^bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
HaveKey	src/keystore.cpp	/^bool CBasicKeyStore::HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveKey	src/keystore.cpp	/^bool HaveKey(const CKeyStore& store, const CKey& key)$/;"	f
HaveKey	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::HaveKey(const CKeyID &address) const$/;"	f	class:CCryptoKeyStore
HaveKeys	src/script/ismine.cpp	/^bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f	namespace:__anon85
HaveNameProxy	src/netbase.cpp	/^bool HaveNameProxy() {$/;"	f
HaveTxsDownloaded	src/chain.h	/^    bool HaveTxsDownloaded() const { return nChainTx != 0; }$/;"	f	class:CBlockIndex
HaveWatchOnly	src/keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly() const$/;"	f	class:CBasicKeyStore
HaveWatchOnly	src/keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const$/;"	f	class:CBasicKeyStore
HeaderAndShortIDs	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
HeaderAndShortIDs	test/functional/test_framework/messages.py	/^class HeaderAndShortIDs:$/;"	c
HeapProfile	src/leveldb/db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Height	src/chain.h	/^    int Height() const {$/;"	f	class:CChain
Height	src/test/setup_common.h	/^    TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
HelpExampleCli	src/rpc/util.cpp	/^std::string HelpExampleCli(const std::string& methodname, const std::string& args)$/;"	f
HelpExampleRpc	src/rpc/util.cpp	/^std::string HelpExampleRpc(const std::string& methodname, const std::string& args)$/;"	f
HelpMessageDialog	src/qt/utilitydialog.cpp	/^HelpMessageDialog::HelpMessageDialog(interfaces::Node& node, QWidget *parent, bool about) :$/;"	f	class:HelpMessageDialog
HelpMessageDialog	src/qt/utilitydialog.h	/^class HelpMessageDialog : public QDialog$/;"	c
HelpMessageGroup	src/util/system.cpp	/^std::string HelpMessageGroup(const std::string &message) {$/;"	f
HelpMessageOpt	src/util/system.cpp	/^std::string HelpMessageOpt(const std::string &option, const std::string &message) {$/;"	f
HelpRequested	src/util/system.cpp	/^bool HelpRequested(const ArgsManager& args)$/;"	f
HelpRequiringPassphrase	src/wallet/rpcwallet.cpp	/^std::string HelpRequiringPassphrase(const CWallet* pwallet)$/;"	f
HelpRpcTest	test/functional/rpc_help.py	/^class HelpRpcTest(BitcoinTestFramework):$/;"	c
HelpTest	test/functional/feature_help.py	/^class HelpTest(BitcoinTestFramework):$/;"	c
HexDigit	src/util/strencodings.cpp	/^signed char HexDigit(char c)$/;"	f
HexStr	src/util/strencodings.h	/^inline std::string HexStr(const T& vch)$/;"	f
HexStr	src/util/strencodings.h	/^std::string HexStr(const T itbegin, const T itend)$/;"	f
HexToPubKey	src/rpc/util.cpp	/^CPubKey HexToPubKey(const std::string& hex_in)$/;"	f
Hidden	src/qt/addresstablemodel.cpp	/^        Hidden \/* QSortFilterProxyModel will filter these out *\/$/;"	e	enum:AddressTableEntry::Type	file:
HideTrayIcon	src/qt/optionsmodel.h	/^        HideTrayIcon,           \/\/ bool$/;"	e	enum:OptionsModel::OptionID
HidingSigningProvider	src/script/sign.h	/^    HidingSigningProvider(const SigningProvider* provider, bool hide_secret, bool hide_origin) : m_hide_secret(hide_secret), m_hide_origin(hide_origin), m_provider(provider) {}$/;"	f	class:HidingSigningProvider
HidingSigningProvider	src/script/sign.h	/^class HidingSigningProvider : public SigningProvider$/;"	c
HighestTargetTracked	src/policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const$/;"	f	class:CBlockPolicyEstimator
Histogram	src/leveldb/util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	src/leveldb/util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
HistoricalBlockSpan	src/policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const$/;"	f	class:CBlockPolicyEstimator
HtmlEscape	src/qt/guiutil.cpp	/^QString HtmlEscape(const QString& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
HtmlEscape	src/qt/guiutil.cpp	/^QString HtmlEscape(const std::string& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
I64FORMAT	src/secp256k1/src/util.h	/^# define I64FORMAT /;"	d
I64uFORMAT	src/secp256k1/src/util.h	/^# define I64uFORMAT /;"	d
ICON_ERROR	src/ui_interface.h	/^        ICON_ERROR          = (1U << 1),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_INFORMATION	src/ui_interface.h	/^        ICON_INFORMATION    = 0,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_MAPPING	src/qt/rpcconsole.cpp	/^} ICON_MAPPING[] = {$/;"	v	typeref:struct:__anon68
ICON_MASK	src/ui_interface.h	/^        ICON_MASK = (ICON_INFORMATION | ICON_WARNING | ICON_ERROR),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_WARNING	src/ui_interface.h	/^        ICON_WARNING        = (1U << 0),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ID_BLOCKCHAININFO	src/bitcoin-cli.cpp	/^    const int ID_BLOCKCHAININFO = 1;$/;"	m	class:GetinfoRequestHandler	file:
ID_NETWORKINFO	src/bitcoin-cli.cpp	/^    const int ID_NETWORKINFO = 0;$/;"	m	class:GetinfoRequestHandler	file:
ID_WALLETINFO	src/bitcoin-cli.cpp	/^    const int ID_WALLETINFO = 2;$/;"	m	class:GetinfoRequestHandler	file:
IF_NEEDED	src/validation.cpp	/^    IF_NEEDED,$/;"	m	class:FlushStateMode	file:
IGNORE_DUMMY_ARGS	test/lint/check-rpc-mappings.py	/^IGNORE_DUMMY_ARGS = {'dummy', 'arg0', 'arg1', 'arg2', 'arg3', 'arg4', 'arg5', 'arg6', 'arg7', 'arg8', 'arg9'}$/;"	v
IGNORE_EXPORTS	contrib/devtools/symbol-check.py	/^IGNORE_EXPORTS = {$/;"	v
IKey	src/leveldb/db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
IMAGEMAGICK_CONVERT	Makefile	/^IMAGEMAGICK_CONVERT = $/;"	m
IMAGEMAGICK_CONVERT	doc/man/Makefile	/^IMAGEMAGICK_CONVERT = $/;"	m
IMAGEMAGICK_CONVERT	src/Makefile	/^IMAGEMAGICK_CONVERT = $/;"	m
IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE	contrib/devtools/security-check.py	/^IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040$/;"	v
IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA	contrib/devtools/security-check.py	/^IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020$/;"	v
IMAGE_DLL_CHARACTERISTICS_NX_COMPAT	contrib/devtools/security-check.py	/^IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100$/;"	v
IMMATURE_CREDIT	src/wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
IMPORT_NODES	test/functional/wallet_import_rescan.py	/^IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]$/;"	v
IMPORT_VARIANTS	test/functional/wallet_import_rescan.py	/^IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan, (False, True))]$/;"	v
INBOUND_PEER_TX_DELAY	src/net_processing.cpp	/^static constexpr int64_t INBOUND_PEER_TX_DELAY = 2 * 1000000;$/;"	v	file:
INCLUDE	contrib/devtools/copyright_header.py	/^INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']$/;"	v
INCLUDE_COMPILED	contrib/devtools/copyright_header.py	/^INCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in INCLUDE]))$/;"	v
INF_FEERATE	src/policy/fees.cpp	/^static constexpr double INF_FEERATE = 1e99;$/;"	v	file:
INIT0	src/crypto/sha256_shani.cpp	/^const __m128i INIT0 = _mm_set_epi64x(0x6a09e667bb67ae85ull, 0x510e527f9b05688cull);$/;"	m	namespace:__anon43	file:
INIT1	src/crypto/sha256_shani.cpp	/^const __m128i INIT1 = _mm_set_epi64x(0x3c6ef372a54ff53aull, 0x1f83d9ab5be0cd19ull);$/;"	m	namespace:__anon43	file:
INITIAL_TRAFFIC_GRAPH_MINS	src/qt/rpcconsole.cpp	/^const int INITIAL_TRAFFIC_GRAPH_MINS = 30;$/;"	v
INIT_PROTO_VERSION	src/version.h	/^static const int INIT_PROTO_VERSION = 209;$/;"	v
INPUT_CHARSET	test/functional/test_framework/descriptors.py	/^INPUT_CHARSET = "0123456789()[],'\/*abcdefgh@:$%{}IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~ijklmnopqrstuvwxyzABCDEFGH`#\\"\\\\ "$/;"	v
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	doc/man/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	src/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	src/secp256k1/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	src/univalue/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALLNAMETOOL	Makefile	/^INSTALLNAMETOOL = $/;"	m
INSTALLNAMETOOL	doc/man/Makefile	/^INSTALLNAMETOOL = $/;"	m
INSTALLNAMETOOL	src/Makefile	/^INSTALLNAMETOOL = $/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	doc/man/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	src/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	src/secp256k1/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	src/univalue/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	doc/man/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	src/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	src/secp256k1/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	src/univalue/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	doc/man/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	src/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	src/secp256k1/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	src/univalue/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	doc/man/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	src/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	src/secp256k1/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	src/univalue/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	doc/man/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	src/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	src/secp256k1/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	src/univalue/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INV	src/protocol.cpp	/^const char *INV="inv";$/;"	m	namespace:NetMsgType	file:
INVALID	src/blockfilter.h	/^    INVALID = 255,$/;"	m	class:BlockFilterType
INVALID	src/script/ismine.cpp	/^    INVALID = 3,    \/\/!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)$/;"	m	class:__anon85::IsMineResult	file:
INVALID_ADDRESS	src/qt/addresstablemodel.h	/^        INVALID_ADDRESS,        \/**< Unparseable address *\/$/;"	e	enum:AddressTableModel::EditStatus
INVALID_ADDRESS_OR_KEY	src/wallet/feebumper.h	/^    INVALID_ADDRESS_OR_KEY,$/;"	m	class:feebumper::Result
INVALID_CB_NO_BAN_VERSION	src/version.h	/^static const int INVALID_CB_NO_BAN_VERSION = 70015;$/;"	v
INVALID_PARAMETER	src/wallet/feebumper.h	/^    INVALID_PARAMETER,$/;"	m	class:feebumper::Result
INVALID_PSBT	src/util/error.h	/^    INVALID_PSBT,$/;"	m	class:TransactionError
INVALID_REQUEST	src/wallet/feebumper.h	/^    INVALID_REQUEST,$/;"	m	class:feebumper::Result
INVALID_SOCKET	src/compat.h	/^#define INVALID_SOCKET /;"	d
INVENTORY_BROADCAST_INTERVAL	src/net_processing.cpp	/^static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;$/;"	v	file:
INVENTORY_BROADCAST_MAX	src/net_processing.cpp	/^static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;$/;"	v	file:
IOError	src/leveldb/include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	src/leveldb/util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon8
IPV4	src/netbase.cpp	/^    IPV4 = 0x01,$/;"	e	enum:uint8_t	file:
IPV4	test/functional/test_framework/socks5.py	/^    IPV4 = 0x01$/;"	v	class:AddressType
IPV6	src/netbase.cpp	/^    IPV6 = 0x04,$/;"	e	enum:uint8_t	file:
IPV6	test/functional/test_framework/socks5.py	/^    IPV6 = 0x04$/;"	v	class:AddressType
ISMINE_ALL	src/script/ismine.h	/^    ISMINE_ALL        = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE,$/;"	e	enum:isminetype
ISMINE_ENUM_ELEMENTS	src/script/ismine.h	/^    ISMINE_ENUM_ELEMENTS,$/;"	e	enum:isminetype
ISMINE_NO	src/script/ismine.h	/^    ISMINE_NO         = 0,$/;"	e	enum:isminetype
ISMINE_SPENDABLE	src/script/ismine.h	/^    ISMINE_SPENDABLE  = 1 << 1,$/;"	e	enum:isminetype
ISMINE_WATCH_ONLY	src/script/ismine.h	/^    ISMINE_WATCH_ONLY = 1 << 0,$/;"	e	enum:isminetype
IS_TRIVIALLY_CONSTRUCTIBLE	src/bench/prevector.cpp	/^#define IS_TRIVIALLY_CONSTRUCTIBLE /;"	d	file:
Image	contrib/devtools/optimize-pngs.py	/^from PIL import Image  # pip3 install Pillow$/;"	i
Immature	src/qt/transactionrecord.h	/^        Immature,           \/**< Mined but waiting for maturity *\/$/;"	e	enum:TransactionStatus::Status
ImplicitlyLearnRelatedKeyScripts	src/keystore.cpp	/^void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)$/;"	f	class:CBasicKeyStore
ImportData	src/wallet/rpcdump.cpp	/^struct ImportData$/;"	s	file:
ImportMultiTest	test/functional/wallet_importmulti.py	/^class ImportMultiTest(BitcoinTestFramework):$/;"	c
ImportNode	test/functional/wallet_import_rescan.py	/^ImportNode = collections.namedtuple("ImportNode", "prune rescan")$/;"	v
ImportPrunedFundsTest	test/functional/wallet_importprunedfunds.py	/^class ImportPrunedFundsTest(BitcoinTestFramework):$/;"	c
ImportRescanTest	test/functional/wallet_import_rescan.py	/^class ImportRescanTest(BitcoinTestFramework):$/;"	c
ImportWithLabel	test/functional/wallet_import_with_label.py	/^class ImportWithLabel(BitcoinTestFramework):$/;"	c
InMemoryEnv	src/leveldb/helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon35::InMemoryEnv
InMemoryEnv	src/leveldb/helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon35	file:
InMempool	src/wallet/wallet.cpp	/^bool CWalletTx::InMempool() const$/;"	f	class:CWalletTx
InactivityCheck	src/net.cpp	/^void CConnman::InactivityCheck(CNode *pnode)$/;"	f	class:CConnman
Inc	src/crypto/sha256_avx2.cpp	/^__m256i inline Inc(__m256i& x, __m256i y) { x = Add(x, y); return x; }$/;"	f	namespace:sha256d64_avx2::__anon37
Inc	src/crypto/sha256_avx2.cpp	/^__m256i inline Inc(__m256i& x, __m256i y, __m256i z) { x = Add(x, y, z); return x; }$/;"	f	namespace:sha256d64_avx2::__anon37
Inc	src/crypto/sha256_avx2.cpp	/^__m256i inline Inc(__m256i& x, __m256i y, __m256i z, __m256i w) { x = Add(x, y, z, w); return x; }$/;"	f	namespace:sha256d64_avx2::__anon37
Inc	src/crypto/sha256_sse41.cpp	/^__m128i inline Inc(__m128i& x, __m128i y) { x = Add(x, y); return x; }$/;"	f	namespace:sha256d64_sse41::__anon41
Inc	src/crypto/sha256_sse41.cpp	/^__m128i inline Inc(__m128i& x, __m128i y, __m128i z) { x = Add(x, y, z); return x; }$/;"	f	namespace:sha256d64_sse41::__anon41
Inc	src/crypto/sha256_sse41.cpp	/^__m128i inline Inc(__m128i& x, __m128i y, __m128i z, __m128i w) { x = Add(x, y, z, w); return x; }$/;"	f	namespace:sha256d64_sse41::__anon41
IncOrderPosNext	src/wallet/wallet.cpp	/^int64_t CWallet::IncOrderPosNext(WalletBatch* batch)$/;"	f	class:CWallet
IncludeConfTest	test/functional/feature_includeconf.py	/^class IncludeConfTest(BitcoinTestFramework):$/;"	c
Increment	src/leveldb/db/db_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon23::AtomicCounter
Increment	src/leveldb/table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementBy	src/leveldb/db/db_test.cc	/^  void IncrementBy(int count) {$/;"	f	class:leveldb::__anon23::AtomicCounter
IncrementByte	src/leveldb/db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
IncrementExtraNonce	src/miner.cpp	/^void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)$/;"	f
IncrementUpdateCounter	src/wallet/db.cpp	/^void BerkeleyDatabase::IncrementUpdateCounter()$/;"	f	class:BerkeleyDatabase
IncrementalDynamicUsage	src/memusage.h	/^static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	src/memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	src/memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
InferDescriptor	src/script/descriptor.cpp	/^std::unique_ptr<Descriptor> InferDescriptor(const CScript& script, const SigningProvider& provider)$/;"	f
InferPubkey	src/script/descriptor.cpp	/^std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)$/;"	f	namespace:__anon75
InferScript	src/script/descriptor.cpp	/^std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptContext ctx, const SigningProvider& provider)$/;"	f	namespace:__anon75
InfoLogFileName	src/leveldb/db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Information	src/qt/notificator.h	/^        Information,    \/**< Informational message *\/$/;"	e	enum:Notificator::Class
Init	src/index/base.cpp	/^bool BaseIndex::Init()$/;"	f	class:BaseIndex
Init	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::Init()$/;"	f	class:BlockFilterIndex
Init	src/index/txindex.cpp	/^bool TxIndex::Init()$/;"	f	class:TxIndex
Init	src/leveldb/table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
Init	src/net.h	/^    void Init(const Options& connOptions) {$/;"	f	class:CConnman
Init	src/protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	src/qt/optionsmodel.cpp	/^void OptionsModel::Init(bool resetSettings)$/;"	f	class:OptionsModel
Init	src/streams.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
Init	src/wallet/wallet.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	src/wallet/wallet.h	/^    void Init(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
InitBinds	src/net.cpp	/^bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds) {$/;"	f	class:CConnman
InitBlockFilterIndex	src/index/blockfilterindex.cpp	/^bool InitBlockFilterIndex(BlockFilterType filter_type,$/;"	f
InitData	src/blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {$/;"	f	class:PartiallyDownloadedBlock
InitDataBlock	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
InitDefaultEnv	src/leveldb/util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
InitDefaultEnv	src/leveldb/util/env_win.cc	/^static void InitDefaultEnv() { default_env = new Win32::Win32Env(); }$/;"	f	namespace:leveldb
InitError	src/ui_interface.cpp	/^bool InitError(const std::string& str)$/;"	f
InitHTTPAllowList	src/httpserver.cpp	/^static bool InitHTTPAllowList()$/;"	f	file:
InitHTTPServer	src/httpserver.cpp	/^bool InitHTTPServer()$/;"	f
InitHardwareRand	src/random.cpp	/^static void InitHardwareRand() {}$/;"	f	file:
InitHardwareRand	src/random.cpp	/^static void InitHardwareRand()$/;"	f	file:
InitInterfaces	src/init.h	/^struct InitInterfaces$/;"	s
InitLogging	src/init.cpp	/^void InitLogging()$/;"	f
InitMessage	src/qt/splashscreen.cpp	/^static void InitMessage(SplashScreen *splash, const std::string &message)$/;"	f	file:
InitMessage	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;$/;"	m	struct:UISignals	file:
InitMessage	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(InitMessage);$/;"	v
InitMessage	src/ui_interface.cpp	/^void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }$/;"	f	class:CClientUIInterface
InitModule	src/leveldb/util/comparator.cc	/^static void InitModule() {$/;"	f	namespace:leveldb
InitOnce	src/leveldb/port/port_posix.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	src/leveldb/port/port_win.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	src/leveldb/port/port_win.h	/^    void InitOnce(void (*initializer)()) {$/;"	f	class:leveldb::port::OnceType
InitParameterInteraction	src/init.cpp	/^void InitParameterInteraction()$/;"	f
InitRPCAuthentication	src/httprpc.cpp	/^static bool InitRPCAuthentication()$/;"	f	file:
InitSanityCheck	src/init.cpp	/^static bool InitSanityCheck()$/;"	f	file:
InitScriptExecutionCache	src/validation.cpp	/^void InitScriptExecutionCache() {$/;"	f
InitSignatureCache	src/script/sigcache.cpp	/^void InitSignatureCache()$/;"	f
InitTypeCrc	src/leveldb/db/log_writer.cc	/^static void InitTypeCrc(uint32_t* type_crc) {$/;"	f	namespace:leveldb::log
InitWalletDirTestingSetup	src/wallet/test/init_test_fixture.cpp	/^InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainName): BasicTestingSetup(chainName)$/;"	f	class:InitWalletDirTestingSetup
InitWalletDirTestingSetup	src/wallet/test/init_test_fixture.h	/^struct InitWalletDirTestingSetup: public BasicTestingSetup {$/;"	s
InitWarning	src/ui_interface.cpp	/^void InitWarning(const std::string& str)$/;"	f
Initialize	src/crypto/ripemd160.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon42::ripemd160
Initialize	src/crypto/sha1.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon38::sha1
Initialize	src/crypto/sha256.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon40::sha256
Initialize	src/crypto/sha512.cpp	/^void inline Initialize(uint64_t* s)$/;"	f	namespace:__anon39::sha512
Initialize	src/zmq/zmqnotificationinterface.cpp	/^bool CZMQNotificationInterface::Initialize()$/;"	f	class:CZMQNotificationInterface
Initialize	src/zmq/zmqpublishnotifier.cpp	/^bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)$/;"	f	class:CZMQAbstractPublishNotifier
InitializeNode	src/net_processing.cpp	/^void PeerLogicValidation::InitializeNode(CNode *pnode) {$/;"	f	class:PeerLogicValidation
InputMissing	test/functional/data/invalid_txs.py	/^class InputMissing(BadTxTemplate):$/;"	c
InsecureRand256	src/test/setup_common.h	/^static inline uint256 InsecureRand256() { return g_insecure_rand_ctx.rand256(); }$/;"	f
InsecureRand32	src/test/setup_common.h	/^static inline uint32_t InsecureRand32() { return g_insecure_rand_ctx.rand32(); }$/;"	f
InsecureRandBits	src/test/setup_common.h	/^static inline uint64_t InsecureRandBits(int bits) { return g_insecure_rand_ctx.randbits(bits); }$/;"	f
InsecureRandBool	src/test/setup_common.h	/^static inline bool InsecureRandBool() { return g_insecure_rand_ctx.randbool(); }$/;"	f
InsecureRandRange	src/test/setup_common.h	/^static inline uint64_t InsecureRandRange(uint64_t range) { return g_insecure_rand_ctx.randrange(range); }$/;"	f
Insert	src/leveldb/db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	src/leveldb/util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon4::HandleTable
Insert	src/leveldb/util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Insert	src/leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon4::LRUCache
Insert	src/leveldb/util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
Insert	src/leveldb/util/env_posix.cc	/^  bool Insert(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixLockTable
Insert	src/wallet/coinselection.cpp	/^void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {$/;"	f	class:OutputGroup
InsertAndReturnHandle	src/leveldb/util/cache_test.cc	/^  Cache::Handle* InsertAndReturnHandle(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
InsertBlockIndex	src/validation.cpp	/^CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)$/;"	f	class:CChainState
InsertCoinsMapEntry	src/test/coins_tests.cpp	/^static size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)$/;"	f	file:
InsertInto	src/leveldb/db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	src/leveldb/db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
Instance	src/support/lockedpool.h	/^    static LockedPoolManager& Instance()$/;"	f	class:LockedPoolManager
InternalFilterPolicy	src/leveldb/db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	src/leveldb/db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	src/leveldb/table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	src/leveldb/db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	src/leveldb/db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	src/leveldb/db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	src/leveldb/db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	src/leveldb/db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	src/leveldb/db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InterpretBool	src/util/system.cpp	/^static bool InterpretBool(const std::string& strValue)$/;"	f	file:
InterpretNegatedOption	src/util/system.cpp	/^static bool InterpretNegatedOption(std::string& key, std::string& val)$/;"	f	file:
Interrupt	src/httpserver.cpp	/^    void Interrupt()$/;"	f	class:WorkQueue
Interrupt	src/index/base.cpp	/^void BaseIndex::Interrupt()$/;"	f	class:BaseIndex
Interrupt	src/init.cpp	/^void Interrupt()$/;"	f
Interrupt	src/net.cpp	/^void CConnman::Interrupt()$/;"	f	class:CConnman
InterruptHTTPRPC	src/httprpc.cpp	/^void InterruptHTTPRPC()$/;"	f
InterruptHTTPServer	src/httpserver.cpp	/^void InterruptHTTPServer()$/;"	f
InterruptMapPort	src/net.cpp	/^void InterruptMapPort()$/;"	f
InterruptREST	src/rest.cpp	/^void InterruptREST()$/;"	f
InterruptRPC	src/rpc/server.cpp	/^void InterruptRPC()$/;"	f
InterruptSocks5	src/netbase.cpp	/^void InterruptSocks5(bool interrupt)$/;"	f
InterruptTorControl	src/torcontrol.cpp	/^void InterruptTorControl()$/;"	f
InterruptibleRecv	src/netbase.cpp	/^static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)$/;"	f	file:
IntrRecvError	src/netbase.cpp	/^enum class IntrRecvError {$/;"	c	file:
Intro	src/qt/intro.cpp	/^Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_size) :$/;"	f	class:Intro
Intro	src/qt/intro.h	/^class Intro : public QDialog$/;"	c
InvLockOrders	src/sync.cpp	/^typedef std::set<std::pair<void*, void*> > InvLockOrders;$/;"	t	file:
InvShiftRows	src/crypto/ctaes/ctaes.c	/^static void InvShiftRows(AES_state* s) {$/;"	f	file:
Invalid	src/consensus/validation.h	/^    bool Invalid(ValidationInvalidReason reasonIn, bool ret = false,$/;"	f	class:CValidationState
InvalidAddress	src/qt/walletmodel.h	/^        InvalidAddress,$/;"	e	enum:WalletModel::StatusCode
InvalidAmount	src/qt/walletmodel.h	/^        InvalidAmount,$/;"	e	enum:WalletModel::StatusCode
InvalidArgument	src/leveldb/include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
InvalidBlockFound	src/validation.cpp	/^void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {$/;"	f	class:CChainState
InvalidBlockRequestTest	test/functional/p2p_invalid_block.py	/^class InvalidBlockRequestTest(BitcoinTestFramework):$/;"	c
InvalidLocatorTest	test/functional/p2p_invalid_locator.py	/^class InvalidLocatorTest(BitcoinTestFramework):$/;"	c
InvalidMessagesTest	test/functional/p2p_invalid_messages.py	/^class InvalidMessagesTest(BitcoinTestFramework):$/;"	c
InvalidOPIFConstruction	test/functional/data/invalid_txs.py	/^class InvalidOPIFConstruction(BadTxTemplate):$/;"	c
InvalidTxRequestTest	test/functional/p2p_invalid_tx.py	/^class InvalidTxRequestTest(BitcoinTestFramework):$/;"	c
Invalidate	src/pubkey.h	/^    void Invalidate()$/;"	f	class:CPubKey
InvalidateBlock	src/validation.cpp	/^bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)$/;"	f	class:CChainState
InvalidateBlock	src/validation.cpp	/^bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {$/;"	f
InvalidateTest	test/functional/rpc_invalidateblock.py	/^class InvalidateTest(BitcoinTestFramework):$/;"	c
InvertLowestOne	src/chain.cpp	/^int static inline InvertLowestOne(int n) { return n & (n - 1); }$/;"	f	file:
Is	src/leveldb/util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsAbortingRescan	src/wallet/wallet.h	/^    bool IsAbortingRescan() { return fAbortRescan; }$/;"	f	class:final
IsAllFromMe	src/wallet/wallet.cpp	/^bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
IsArgKnown	src/util/system.cpp	/^bool ArgsManager::IsArgKnown(const std::string& key) const$/;"	f	class:ArgsManager
IsArgNegated	src/util/system.cpp	/^bool ArgsManager::IsArgNegated(const std::string& strArg) const$/;"	f	class:ArgsManager
IsArgSet	src/util/system.cpp	/^bool ArgsManager::IsArgSet(const std::string& strArg) const$/;"	f	class:ArgsManager
IsBanned	src/banman.cpp	/^bool BanMan::IsBanned(CNetAddr net_addr)$/;"	f	class:BanMan
IsBanned	src/banman.cpp	/^bool BanMan::IsBanned(CSubNet sub_net)$/;"	f	class:BanMan
IsBannedLevel	src/banman.cpp	/^int BanMan::IsBannedLevel(CNetAddr net_addr)$/;"	f	class:BanMan
IsBaseLevelForKey	src/leveldb/db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsBerkeleyBtree	src/wallet/walletutil.cpp	/^static bool IsBerkeleyBtree(const fs::path& path)$/;"	f	file:
IsBindAny	src/netaddress.cpp	/^bool CNetAddr::IsBindAny() const$/;"	f	class:CNetAddr
IsBlockPruned	src/validation.h	/^inline bool IsBlockPruned(const CBlockIndex* pblockindex)$/;"	f
IsBlockReason	src/consensus/validation.h	/^inline bool IsBlockReason(ValidationInvalidReason r)$/;"	f
IsChange	src/wallet/wallet.cpp	/^bool CWallet::IsChange(const CScript& script) const$/;"	f	class:CWallet
IsChange	src/wallet/wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	src/coins.h	/^    bool IsCoinBase() const {$/;"	f	class:Coin
IsCoinBase	src/primitives/transaction.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsCoinBase	src/wallet/wallet.h	/^    bool IsCoinBase() const { return tx->IsCoinBase(); }$/;"	f	class:CMerkleTx
IsCompressed	src/key.h	/^    bool IsCompressed() const { return fCompressed; }$/;"	f	class:CKey
IsCompressed	src/pubkey.h	/^    bool IsCompressed() const$/;"	f	class:CPubKey
IsCompressedOrUncompressedPubKey	src/script/interpreter.cpp	/^bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {$/;"	f	file:
IsCompressedPubKey	src/script/interpreter.cpp	/^bool static IsCompressedPubKey(const valtype &vchPubKey) {$/;"	f	file:
IsCorruption	src/leveldb/include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsCrypted	src/wallet/crypter.h	/^    bool IsCrypted() const { return fUseCrypto; }$/;"	f	class:CCryptoKeyStore
IsCurrentForAntiFeeSniping	src/wallet/wallet.cpp	/^static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)$/;"	f	file:
IsDatabaseLoaded	src/wallet/db.h	/^    bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }$/;"	f	class:BerkeleyEnvironment
IsDefinedHashtypeSignature	src/script/interpreter.cpp	/^bool static IsDefinedHashtypeSignature(const valtype &vchSig) {$/;"	f	file:
IsDeprecatedRPCEnabled	src/rpc/server.cpp	/^bool IsDeprecatedRPCEnabled(const std::string& method)$/;"	f
IsDigit	src/util/strencodings.h	/^constexpr bool IsDigit(char c)$/;"	f
IsDummy	src/wallet/db.h	/^    bool IsDummy() { return env == nullptr; }$/;"	f	class:BerkeleyDatabase
IsDust	src/policy/policy.cpp	/^bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)$/;"	f
IsEmpty	src/dbwrapper.cpp	/^bool CDBWrapper::IsEmpty()$/;"	f	class:CDBWrapper
IsEquivalentTo	src/wallet/wallet.cpp	/^bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const$/;"	f	class:CWalletTx
IsError	src/consensus/validation.h	/^    bool IsError() const {$/;"	f	class:CValidationState
IsFallbackFeeEnabled	src/chainparams.h	/^    bool IsFallbackFeeEnabled() const { return m_fallback_fee_enabled; }$/;"	f	class:CChainParams
IsFileCreatedSinceLastDirSync	src/leveldb/db/fault_injection_test.cc	/^bool FaultInjectionTestEnv::IsFileCreatedSinceLastDirSync($/;"	f	class:leveldb::FaultInjectionTestEnv
IsFilesystemActive	src/leveldb/db/fault_injection_test.cc	/^  bool IsFilesystemActive() const { return filesystem_active_; }$/;"	f	class:leveldb::FaultInjectionTestEnv
IsFinalTx	src/consensus/tx_verify.cpp	/^bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)$/;"	f
IsFromMe	src/wallet/wallet.cpp	/^bool CWallet::IsFromMe(const CTransaction& tx) const$/;"	f	class:CWallet
IsFromMe	src/wallet/wallet.h	/^    bool IsFromMe(const isminefilter& filter) const$/;"	f	class:CWalletTx
IsFullySynced	src/leveldb/db/fault_injection_test.cc	/^  bool IsFullySynced() const { return pos_ <= 0 || pos_ == pos_at_last_sync_; }$/;"	f	struct:leveldb::__anon20::FileState
IsFullyValid	src/pubkey.cpp	/^bool CPubKey::IsFullyValid() const {$/;"	f	class:CPubKey
IsHDEnabled	src/wallet/wallet.cpp	/^bool CWallet::IsHDEnabled() const$/;"	f	class:CWallet
IsHardened	src/script/descriptor.cpp	/^    bool IsHardened() const$/;"	f	class:__anon75::final	file:
IsHex	src/util/strencodings.cpp	/^bool IsHex(const std::string& str)$/;"	f
IsHexNumber	src/util/strencodings.cpp	/^bool IsHexNumber(const std::string& str)$/;"	f
IsIOError	src/leveldb/include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsIPv4	src/netaddress.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	src/netaddress.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsImmatureCoinBase	src/wallet/wallet.cpp	/^bool CMerkleTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CMerkleTx
IsInMainChain	src/wallet/wallet.h	/^    bool IsInMainChain(interfaces::Chain::Lock& locked_chain) const { return GetDepthInMainChain(locked_chain) > 0; }$/;"	f	class:CMerkleTx
IsInitialBlockDownload	src/validation.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsInitialized	src/qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::IsInitialized() const$/;"	f	class:PaymentRequestPlus
IsInitialized	src/wallet/db.h	/^    bool IsInitialized() const { return fDbEnvInit; }$/;"	f	class:BerkeleyEnvironment
IsInternal	src/netaddress.cpp	/^bool CNetAddr::IsInternal() const$/;"	f	class:CNetAddr
IsInvalid	src/consensus/validation.h	/^    bool IsInvalid() const {$/;"	f	class:CValidationState
IsInvalidArgument	src/leveldb/include/leveldb/status.h	/^  bool IsInvalidArgument() const { return code() == kInvalidArgument; }$/;"	f	class:leveldb::Status
IsKeyType	src/wallet/walletdb.cpp	/^bool WalletBatch::IsKeyType(const std::string& strType)$/;"	f	class:WalletBatch
IsLoaded	src/txmempool.cpp	/^bool CTxMemPool::IsLoaded() const$/;"	f	class:CTxMemPool
IsLocal	src/net.cpp	/^bool IsLocal(const CService& addr)$/;"	f
IsLocal	src/netaddress.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsLocked	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::IsLocked() const$/;"	f	class:CCryptoKeyStore
IsLockedCoin	src/wallet/wallet.cpp	/^bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const$/;"	f	class:CWallet
IsLowDERSignature	src/script/interpreter.cpp	/^bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {$/;"	f	file:
IsMine	src/script/ismine.cpp	/^isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)$/;"	f
IsMine	src/script/ismine.cpp	/^isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest)$/;"	f
IsMine	src/wallet/wallet.cpp	/^bool CWallet::IsMine(const CTransaction& tx) const$/;"	f	class:CWallet
IsMine	src/wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxIn &txin) const$/;"	f	class:CWallet
IsMine	src/wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxOut& txout) const$/;"	f	class:CWallet
IsMineInner	src/script/ismine.cpp	/^IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)$/;"	f	namespace:__anon85
IsMineResult	src/script/ismine.cpp	/^enum class IsMineResult$/;"	c	namespace:__anon85	file:
IsMineSigVersion	src/script/ismine.cpp	/^enum class IsMineSigVersion$/;"	c	namespace:__anon85	file:
IsMock	src/wallet/db.h	/^    bool IsMock() const { return fMockDb; }$/;"	f	class:BerkeleyEnvironment
IsNotFound	src/leveldb/include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsNotSupportedError	src/leveldb/include/leveldb/status.h	/^  bool IsNotSupportedError() const { return code() == kNotSupported; }$/;"	f	class:leveldb::Status
IsNull	src/flatfile.h	/^    bool IsNull() const { return (nFile == -1); }$/;"	f	struct:FlatFilePos
IsNull	src/primitives/block.h	/^    bool IsNull() const$/;"	f	class:CBlockHeader
IsNull	src/primitives/block.h	/^    bool IsNull() const$/;"	f	struct:CBlockLocator
IsNull	src/primitives/transaction.h	/^    bool IsNull() const { return (hash.IsNull() && n == NULL_INDEX); }$/;"	f	class:COutPoint
IsNull	src/primitives/transaction.h	/^    bool IsNull() const {$/;"	f	class:CTransaction
IsNull	src/primitives/transaction.h	/^    bool IsNull() const$/;"	f	class:CTxOut
IsNull	src/psbt.cpp	/^bool PSBTInput::IsNull() const$/;"	f	class:PSBTInput
IsNull	src/psbt.cpp	/^bool PSBTOutput::IsNull() const$/;"	f	class:PSBTOutput
IsNull	src/psbt.cpp	/^bool PartiallySignedTransaction::IsNull() const$/;"	f	class:PartiallySignedTransaction
IsNull	src/script/script.h	/^    bool IsNull() const { return stack.empty(); }$/;"	f	struct:CScriptWitness
IsNull	src/streams.h	/^    bool IsNull() const         { return (file == nullptr); }$/;"	f	class:CAutoFile
IsNull	src/uint256.h	/^    bool IsNull() const$/;"	f	class:base_blob
IsNullDummyEnabled	src/validation.cpp	/^bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
IsOk	src/leveldb/util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsOptional	src/rpc/util.cpp	/^bool RPCArg::IsOptional() const$/;"	f	class:RPCArg
IsOutboundDisconnectionCandidate	src/net_processing.cpp	/^static bool IsOutboundDisconnectionCandidate(const CNode *node)$/;"	f	file:
IsPayToScriptHash	src/script/script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsPayToWitnessScriptHash	src/script/script.cpp	/^bool CScript::IsPayToWitnessScriptHash() const$/;"	f	class:CScript
IsPeerAddrLocalGood	src/net.cpp	/^bool IsPeerAddrLocalGood(CNode *pnode)$/;"	f
IsProxy	src/netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsPushOnly	src/script/script.cpp	/^bool CScript::IsPushOnly() const$/;"	f	class:CScript
IsPushOnly	src/script/script.cpp	/^bool CScript::IsPushOnly(const_iterator pc) const$/;"	f	class:CScript
IsRBFOptIn	src/policy/rbf.cpp	/^RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)$/;"	f
IsRFC1918	src/netaddress.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC2544	src/netaddress.cpp	/^bool CNetAddr::IsRFC2544() const$/;"	f	class:CNetAddr
IsRFC3849	src/netaddress.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	src/netaddress.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	src/netaddress.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	src/netaddress.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	src/netaddress.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	src/netaddress.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	src/netaddress.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC5737	src/netaddress.cpp	/^bool CNetAddr::IsRFC5737() const$/;"	f	class:CNetAddr
IsRFC6052	src/netaddress.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	src/netaddress.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsRFC6598	src/netaddress.cpp	/^bool CNetAddr::IsRFC6598() const$/;"	f	class:CNetAddr
IsRPCRunning	src/rpc/server.cpp	/^bool IsRPCRunning()$/;"	f
IsReachable	src/net.cpp	/^bool IsReachable(const CNetAddr &addr)$/;"	f
IsReachable	src/net.cpp	/^bool IsReachable(enum Network net)$/;"	f
IsRelevantAndUpdate	src/bloom.cpp	/^bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)$/;"	f	class:CBloomFilter
IsRoutable	src/netaddress.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsSane	src/psbt.cpp	/^bool PSBTInput::IsSane() const$/;"	f	class:PSBTInput
IsSane	src/psbt.cpp	/^bool PartiallySignedTransaction::IsSane() const$/;"	f	class:PartiallySignedTransaction
IsScanning	src/wallet/wallet.h	/^    bool IsScanning() { return fScanningWallet; }$/;"	f	class:final
IsScriptWitnessEnabled	src/validation.cpp	/^static bool IsScriptWitnessEnabled(const Consensus::Params& params)$/;"	f	file:
IsSelectableSocket	src/compat.h	/^bool static inline IsSelectableSocket(const SOCKET& s) {$/;"	f
IsSelected	src/wallet/coincontrol.h	/^    bool IsSelected(const COutPoint& output) const$/;"	f	class:CCoinControl
IsSmallInteger	src/script/standard.cpp	/^static constexpr bool IsSmallInteger(opcodetype opcode)$/;"	f	file:
IsSolvable	src/script/sign.cpp	/^bool IsSolvable(const SigningProvider& provider, const CScript& script)$/;"	f
IsSpent	src/coins.h	/^    bool IsSpent() const {$/;"	f	class:Coin
IsSpent	src/wallet/wallet.cpp	/^bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const$/;"	f	class:CWallet
IsStandard	src/policy/policy.cpp	/^bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)$/;"	f
IsStandardTx	src/policy/policy.cpp	/^bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason)$/;"	f
IsStandardTx	src/policy/settings.h	/^static inline bool IsStandardTx(const CTransaction& tx, std::string& reason)$/;"	f
IsSwitchChar	src/util/system.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	src/addrman.cpp	/^bool CAddrInfo::IsTerrible(int64_t nNow) const$/;"	f	class:CAddrInfo
IsToKeyID	src/compressor.cpp	/^static bool IsToKeyID(const CScript& script, CKeyID &hash)$/;"	f	file:
IsToPubKey	src/compressor.cpp	/^static bool IsToPubKey(const CScript& script, CPubKey &pubkey)$/;"	f	file:
IsToScriptID	src/compressor.cpp	/^static bool IsToScriptID(const CScript& script, CScriptID &hash)$/;"	f	file:
IsTor	src/netaddress.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsTransactionReason	src/consensus/validation.h	/^inline bool IsTransactionReason(ValidationInvalidReason r)$/;"	f
IsTrivialMove	src/leveldb/db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsTrusted	src/wallet/wallet.cpp	/^bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CWalletTx
IsTxAvailable	src/blockencodings.cpp	/^bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {$/;"	f	class:PartiallyDownloadedBlock
IsUnspendable	src/script/script.h	/^    bool IsUnspendable() const$/;"	f	class:CScript
IsValid	src/chain.h	/^    bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const$/;"	f	class:CBlockIndex
IsValid	src/consensus/validation.h	/^    bool IsValid() const {$/;"	f	class:CValidationState
IsValid	src/key.h	/^    bool IsValid() const { return fValid; }$/;"	f	class:CKey
IsValid	src/netaddress.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
IsValid	src/netaddress.cpp	/^bool CSubNet::IsValid() const$/;"	f	class:CSubNet
IsValid	src/netbase.h	/^    bool IsValid() const { return proxy.IsValid(); }$/;"	f	class:proxyType
IsValid	src/protocol.cpp	/^bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const$/;"	f	class:CMessageHeader
IsValid	src/pubkey.h	/^    bool IsValid() const$/;"	f	class:CPubKey
IsValidDestination	src/script/standard.cpp	/^bool IsValidDestination(const CTxDestination& dest) {$/;"	f
IsValidDestinationString	src/key_io.cpp	/^bool IsValidDestinationString(const std::string& str)$/;"	f
IsValidDestinationString	src/key_io.cpp	/^bool IsValidDestinationString(const std::string& str, const CChainParams& params)$/;"	f
IsValidFlagCombination	src/test/fuzz/script_flags.cpp	/^static bool IsValidFlagCombination(unsigned flags)$/;"	f	file:
IsValidKey	src/leveldb/db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
IsValidNumArgs	src/rpc/util.cpp	/^bool RPCHelpMan::IsValidNumArgs(size_t num_args) const$/;"	f	class:RPCHelpMan
IsValidSignatureEncoding	src/script/interpreter.cpp	/^bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {$/;"	f	file:
IsWalletFlagSet	src/wallet/wallet.cpp	/^bool CWallet::IsWalletFlagSet(uint64_t flag)$/;"	f	class:CWallet
IsWalletLoaded	src/wallet/db.cpp	/^bool IsWalletLoaded(const fs::path& wallet_path)$/;"	f
IsWhitelistedRange	src/net.cpp	/^bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {$/;"	f	class:CConnman
IsWithinSizeConstraints	src/bloom.cpp	/^bool CBloomFilter::IsWithinSizeConstraints() const$/;"	f	class:CBloomFilter
IsWitnessEnabled	src/validation.cpp	/^bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
IsWitnessProgram	src/script/script.cpp	/^bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const$/;"	f	class:CScript
IsWitnessStandard	src/policy/policy.cpp	/^bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)$/;"	f
Issue178	src/leveldb/issues/issue178_test.cc	/^class Issue178 { };$/;"	c	namespace:__anon34	file:
Issue200	src/leveldb/issues/issue200_test.cc	/^class Issue200 { };$/;"	c	namespace:leveldb	file:
ItemDelegate	src/qt/guiutil.h	/^        ItemDelegate(QObject* parent) : QItemDelegate(parent) {}$/;"	f	class:GUIUtil::ItemDelegate
ItemDelegate	src/qt/guiutil.h	/^    class ItemDelegate : public QItemDelegate$/;"	c	namespace:GUIUtil
Iter	src/leveldb/table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	src/leveldb/table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	src/leveldb/db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon18	file:
IterStatus	src/leveldb/db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	src/leveldb/db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	src/leveldb/db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	src/leveldb/db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	src/leveldb/include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	src/leveldb/table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorComparator	src/net_processing.cpp	/^    struct IteratorComparator$/;"	s	namespace:__anon88	file:
IteratorWrapper	src/leveldb/table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	src/leveldb/table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	src/leveldb/table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
JAVAORG	src/secp256k1/Makefile	/^JAVAORG = org\/bitcoin$/;"	m
JAVAROOT	src/secp256k1/Makefile	/^JAVAROOT = src\/java$/;"	m
JAVA_FILES	src/secp256k1/Makefile	/^JAVA_FILES = \\$/;"	m
JAVA_GUAVA	src/secp256k1/Makefile	/^JAVA_GUAVA = $(srcdir)\/$(JAVAROOT)\/guava\/guava-18.0.jar$/;"	m
JNI_INCLUDES	src/secp256k1/Makefile	/^JNI_INCLUDES = $/;"	m
JNI_LIB	src/secp256k1/Makefile	/^JNI_LIB = $/;"	m
JSON	src/rest.cpp	/^    JSON,$/;"	m	class:RetFormat	file:
JSON	test/functional/interface_rest.py	/^    JSON = 1$/;"	v	class:ReqType
JSON	test/functional/interface_rest.py	/^    JSON = 3$/;"	v	class:RetType
JSONErrorReply	src/httprpc.cpp	/^static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)$/;"	f	file:
JSONPrettyPrint	src/test/script_tests.cpp	/^std::string JSONPrettyPrint(const UniValue& univalue)$/;"	f	namespace:__anon58
JSONRPCError	src/rpc/protocol.cpp	/^UniValue JSONRPCError(int code, const std::string& message)$/;"	f
JSONRPCException	test/functional/interface_rpc.py	/^from test_framework.authproxy import JSONRPCException$/;"	i
JSONRPCException	test/functional/rpc_misc.py	/^from test_framework.authproxy import JSONRPCException$/;"	i
JSONRPCException	test/functional/test_framework/authproxy.py	/^class JSONRPCException(Exception):$/;"	c
JSONRPCException	test/functional/test_framework/test_framework.py	/^from .authproxy import JSONRPCException$/;"	i
JSONRPCException	test/functional/test_framework/test_node.py	/^from .authproxy import JSONRPCException$/;"	i
JSONRPCException	test/functional/test_framework/util.py	/^from .authproxy import AuthServiceProxy, JSONRPCException$/;"	i
JSONRPCExecBatch	src/rpc/server.cpp	/^std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)$/;"	f
JSONRPCExecOne	src/rpc/server.cpp	/^static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)$/;"	f	file:
JSONRPCProcessBatchReply	src/rpc/protocol.cpp	/^std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)$/;"	f
JSONRPCReply	src/rpc/protocol.cpp	/^std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id)$/;"	f
JSONRPCReplyObj	src/rpc/protocol.cpp	/^UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)$/;"	f
JSONRPCRequest	src/rpc/server.h	/^    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}$/;"	f	class:JSONRPCRequest
JSONRPCRequest	src/rpc/server.h	/^class JSONRPCRequest$/;"	c
JSONRPCRequestObj	src/rpc/protocol.cpp	/^UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)$/;"	f
JSONRPCTransactionError	src/rpc/util.cpp	/^UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string)$/;"	f
JSONUTF8StringFilter	src/univalue/lib/univalue_utffilter.h	/^    explicit JSONUTF8StringFilter(std::string &s):$/;"	f	class:JSONUTF8StringFilter
JSONUTF8StringFilter	src/univalue/lib/univalue_utffilter.h	/^class JSONUTF8StringFilter$/;"	c
JSON_TEST_FILES	src/Makefile	/^JSON_TEST_FILES = \\$/;"	m
JTOK_ARR_CLOSE	src/univalue/include/univalue.h	/^    JTOK_ARR_CLOSE,$/;"	e	enum:jtokentype
JTOK_ARR_OPEN	src/univalue/include/univalue.h	/^    JTOK_ARR_OPEN,$/;"	e	enum:jtokentype
JTOK_COLON	src/univalue/include/univalue.h	/^    JTOK_COLON,$/;"	e	enum:jtokentype
JTOK_COMMA	src/univalue/include/univalue.h	/^    JTOK_COMMA,$/;"	e	enum:jtokentype
JTOK_ERR	src/univalue/include/univalue.h	/^    JTOK_ERR        = -1,$/;"	e	enum:jtokentype
JTOK_KW_FALSE	src/univalue/include/univalue.h	/^    JTOK_KW_FALSE,$/;"	e	enum:jtokentype
JTOK_KW_NULL	src/univalue/include/univalue.h	/^    JTOK_KW_NULL,$/;"	e	enum:jtokentype
JTOK_KW_TRUE	src/univalue/include/univalue.h	/^    JTOK_KW_TRUE,$/;"	e	enum:jtokentype
JTOK_NONE	src/univalue/include/univalue.h	/^    JTOK_NONE       = 0,                           \/\/ eof$/;"	e	enum:jtokentype
JTOK_NUMBER	src/univalue/include/univalue.h	/^    JTOK_NUMBER,$/;"	e	enum:jtokentype
JTOK_OBJ_CLOSE	src/univalue/include/univalue.h	/^    JTOK_OBJ_CLOSE,$/;"	e	enum:jtokentype
JTOK_OBJ_OPEN	src/univalue/include/univalue.h	/^    JTOK_OBJ_OPEN,$/;"	e	enum:jtokentype
JTOK_STRING	src/univalue/include/univalue.h	/^    JTOK_STRING,$/;"	e	enum:jtokentype
Java_org_bitcoin_NativeSecp256k1_secp256k1_1context_1randomize	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1context_1randomize$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ctx_1clone	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jlong JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ctx_1clone$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1destroy_1context	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API void JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1destroy_1context$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1create	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1create$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1seckey_1verify	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1seckey_1verify$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdh	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdh$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1pubkey_1combine	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jlong JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1pubkey_1combine$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1sign	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1sign$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1verify	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1verify$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1add	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1add$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1mul	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1mul$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1add	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1add$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1mul	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1mul$/;"	f
Java_org_bitcoin_Secp256k1Context_secp256k1_1init_1context	src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c	/^SECP256K1_API jlong JNICALL Java_org_bitcoin_Secp256k1Context_secp256k1_1init_1context$/;"	f
K	src/crypto/sha256_avx2.cpp	/^__m256i inline K(uint32_t x) { return _mm256_set1_epi32(x); }$/;"	f	namespace:sha256d64_avx2::__anon37
K	src/crypto/sha256_sse41.cpp	/^__m128i inline K(uint32_t x) { return _mm_set1_epi32(x); }$/;"	f	namespace:sha256d64_sse41::__anon41
K	src/leveldb/db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	src/leveldb/db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KEY_GENERATION_FAILURE	src/qt/addresstablemodel.h	/^        KEY_GENERATION_FAILURE  \/**< Generating a new public key for a receiving address failed *\/$/;"	e	enum:AddressTableModel::EditStatus
KVMap	src/leveldb/db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon25	file:
KVMap	src/leveldb/table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
KeepKey	src/wallet/wallet.cpp	/^void CReserveKey::KeepKey()$/;"	f	class:CReserveKey
KeepKey	src/wallet/wallet.cpp	/^void CWallet::KeepKey(int64_t nIndex)$/;"	f	class:CWallet
KeepRunning	src/bench/bench.h	/^    inline bool KeepRunning()$/;"	f	class:benchmark::State
Key	src/leveldb/db/autocompact_test.cc	/^  std::string Key(int i) {$/;"	f	class:leveldb::AutoCompactTest
Key	src/leveldb/db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	src/leveldb/db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	src/leveldb/db/fault_injection_test.cc	/^  Slice Key(int i, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Key	src/leveldb/db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
Key	src/leveldb/util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
Key	test/functional/test_framework/wallet_util.py	/^Key = namedtuple('Key', ['privkey',$/;"	v
Key1	src/leveldb/issues/issue178_test.cc	/^std::string Key1(int i) {$/;"	f	namespace:__anon34
Key2	src/leveldb/issues/issue178_test.cc	/^std::string Key2(int i) {$/;"	f	namespace:__anon34
KeyComparator	src/leveldb/db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	src/leveldb/db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	src/leveldb/table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	src/leveldb/table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb	file:
KeyData	src/test/script_tests.cpp	/^    KeyData()$/;"	f	struct:__anon58::KeyData
KeyData	src/test/script_tests.cpp	/^struct KeyData$/;"	s	namespace:__anon58	file:
KeyIsAfterNode	src/leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMayMatch	src/leveldb/db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	src/leveldb/db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	src/leveldb/table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	src/leveldb/table/filter_block_test.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	class:leveldb::TestHashFilter
KeyMayMatch	src/leveldb/util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
KeyOriginInfo	src/script/sign.h	/^struct KeyOriginInfo$/;"	s
KeyPath	src/script/descriptor.cpp	/^typedef std::vector<uint32_t> KeyPath;$/;"	t	namespace:__anon75	file:
KeyPoolTest	test/functional/wallet_keypool.py	/^class KeyPoolTest(BitcoinTestFramework):$/;"	c
KeySetupColumnMix	src/crypto/ctaes/ctaes.c	/^static void KeySetupColumnMix(AES_state* s, AES_state* r, const AES_state* a, int c1, int c2) {$/;"	f	file:
KeySetupTransform	src/crypto/ctaes/ctaes.c	/^static void KeySetupTransform(AES_state* s, const AES_state* r) {$/;"	f	file:
KeyValPair	src/wallet/db.h	/^    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;$/;"	t	class:BerkeleyEnvironment
KeypoolCountExternalKeys	src/wallet/wallet.cpp	/^size_t CWallet::KeypoolCountExternalKeys()$/;"	f	class:CWallet
KeypoolRestoreTest	test/functional/wallet_keypool_topup.py	/^class KeypoolRestoreTest(BitcoinTestFramework):$/;"	c
Keystream	src/crypto/chacha20.cpp	/^void ChaCha20::Keystream(unsigned char* c, size_t bytes)$/;"	f	class:ChaCha20
KnapsackSolver	src/wallet/coinselection.cpp	/^bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)$/;"	f
LABEL_COLUMN_WIDTH	src/qt/receivecoinsdialog.h	/^        LABEL_COLUMN_WIDTH = 120,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
LCOV	Makefile	/^LCOV = $/;"	m
LCOV	doc/man/Makefile	/^LCOV = $/;"	m
LCOV	src/Makefile	/^LCOV = $/;"	m
LCOV_OPTS	Makefile	/^LCOV_OPTS = $/;"	m
LCOV_OPTS	doc/man/Makefile	/^LCOV_OPTS = $/;"	m
LCOV_OPTS	src/Makefile	/^LCOV_OPTS = $/;"	m
LD	Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LD	doc/man/Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LD	src/Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LD	src/secp256k1/Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LD	src/univalue/Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LD64_VERSION	depends/hosts/darwin.mk	/^LD64_VERSION=253.9$/;"	m
LDFLAGS	Makefile	/^LDFLAGS =  -Wl,-headerpad_max_install_names -Wl,-dead_strip$/;"	m
LDFLAGS	doc/man/Makefile	/^LDFLAGS =  -Wl,-headerpad_max_install_names -Wl,-dead_strip$/;"	m
LDFLAGS	src/Makefile	/^LDFLAGS =  -Wl,-headerpad_max_install_names -Wl,-dead_strip$/;"	m
LDFLAGS	src/secp256k1/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	src/univalue/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS_FOR_BUILD	src/secp256k1/Makefile	/^LDFLAGS_FOR_BUILD = $/;"	m
LEAVE_CRITICAL_SECTION	src/sync.h	/^#define LEAVE_CRITICAL_SECTION(/;"	d
LEGACY	src/outputtype.h	/^    LEGACY,$/;"	m	class:OutputType
LEVELDB_CPPFLAGS	Makefile	/^LEVELDB_CPPFLAGS = $/;"	m
LEVELDB_CPPFLAGS	doc/man/Makefile	/^LEVELDB_CPPFLAGS = $/;"	m
LEVELDB_CPPFLAGS	src/Makefile	/^LEVELDB_CPPFLAGS =  $(am__append_20)$/;"	m
LEVELDB_CPPFLAGS_INT	src/Makefile	/^LEVELDB_CPPFLAGS_INT = -I$(srcdir)\/leveldb \\$/;"	m
LEVELDB_HAVE_MEMORY_BARRIER	src/leveldb/port/atomic_pointer.h	/^#undef LEVELDB_HAVE_MEMORY_BARRIER$/;"	d
LEVELDB_ONCE_INIT	src/leveldb/port/port_example.h	/^#define LEVELDB_ONCE_INIT /;"	d
LEVELDB_ONCE_INIT	src/leveldb/port/port_posix.h	/^#define LEVELDB_ONCE_INIT /;"	d
LEVELDB_ONCE_INIT	src/leveldb/port/port_win.h	/^#define LEVELDB_ONCE_INIT /;"	d
LEVELDB_TARGET_FLAGS	Makefile	/^LEVELDB_TARGET_FLAGS = -DOS_MACOSX$/;"	m
LEVELDB_TARGET_FLAGS	doc/man/Makefile	/^LEVELDB_TARGET_FLAGS = -DOS_MACOSX$/;"	m
LEVELDB_TARGET_FLAGS	src/Makefile	/^LEVELDB_TARGET_FLAGS = -DOS_MACOSX$/;"	m
LE_LOAD32	src/leveldb/port/port_posix_sse.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::port
LE_LOAD32	src/leveldb/util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LE_LOAD64	src/leveldb/port/port_posix_sse.cc	/^static inline uint64_t LE_LOAD64(const uint8_t *p) {$/;"	f	namespace:leveldb::port
LIBBITCOINCONSENSUS	src/Makefile	/^LIBBITCOINCONSENSUS = libbitcoinconsensus.la$/;"	m
LIBBITCOINQT	src/Makefile	/^LIBBITCOINQT = qt\/libbitcoinqt.a$/;"	m
LIBBITCOIN_CLI	src/Makefile	/^LIBBITCOIN_CLI = libbitcoin_cli.a$/;"	m
LIBBITCOIN_COMMON	src/Makefile	/^LIBBITCOIN_COMMON = libbitcoin_common.a$/;"	m
LIBBITCOIN_CONSENSUS	src/Makefile	/^LIBBITCOIN_CONSENSUS = libbitcoin_consensus.a$/;"	m
LIBBITCOIN_CRYPTO	src/Makefile	/^LIBBITCOIN_CRYPTO = $(LIBBITCOIN_CRYPTO_BASE) $(am__append_1) \\$/;"	m
LIBBITCOIN_CRYPTO_AVX2	src/Makefile	/^LIBBITCOIN_CRYPTO_AVX2 = crypto\/libbitcoin_crypto_avx2.a$/;"	m
LIBBITCOIN_CRYPTO_BASE	src/Makefile	/^LIBBITCOIN_CRYPTO_BASE = crypto\/libbitcoin_crypto_base.a$/;"	m
LIBBITCOIN_CRYPTO_SHANI	src/Makefile	/^LIBBITCOIN_CRYPTO_SHANI = crypto\/libbitcoin_crypto_shani.a$/;"	m
LIBBITCOIN_CRYPTO_SSE41	src/Makefile	/^LIBBITCOIN_CRYPTO_SSE41 = crypto\/libbitcoin_crypto_sse41.a$/;"	m
LIBBITCOIN_SERVER	src/Makefile	/^LIBBITCOIN_SERVER = libbitcoin_server.a$/;"	m
LIBBITCOIN_UTIL	src/Makefile	/^LIBBITCOIN_UTIL = libbitcoin_util.a$/;"	m
LIBBITCOIN_ZMQ	src/Makefile	/^LIBBITCOIN_ZMQ = libbitcoin_zmq.a$/;"	m
LIBLEVELDB	Makefile	/^LIBLEVELDB = $/;"	m
LIBLEVELDB	doc/man/Makefile	/^LIBLEVELDB = $/;"	m
LIBLEVELDB	src/Makefile	/^LIBLEVELDB =  $(am__append_18)$/;"	m
LIBLEVELDB_INT	src/Makefile	/^LIBLEVELDB_INT = leveldb\/libleveldb.a$/;"	m
LIBLEVELDB_SSE42	src/Makefile	/^LIBLEVELDB_SSE42 = $(LIBLEVELDB_SSE42_INT)$/;"	m
LIBLEVELDB_SSE42_INT	src/Makefile	/^LIBLEVELDB_SSE42_INT = leveldb\/libleveldb_sse42.a$/;"	m
LIBMEMENV	Makefile	/^LIBMEMENV = $/;"	m
LIBMEMENV	doc/man/Makefile	/^LIBMEMENV = $/;"	m
LIBMEMENV	src/Makefile	/^LIBMEMENV =  $(am__append_19)$/;"	m
LIBMEMENV_INT	src/Makefile	/^LIBMEMENV_INT = leveldb\/libmemenv.a$/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	doc/man/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	src/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	src/secp256k1/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	src/univalue/Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS =  -L\/usr\/local\/opt\/berkeley-db@4\/lib$/;"	m
LIBS	doc/man/Makefile	/^LIBS =  -L\/usr\/local\/opt\/berkeley-db@4\/lib$/;"	m
LIBS	src/Makefile	/^LIBS =  -L\/usr\/local\/opt\/berkeley-db@4\/lib$/;"	m
LIBS	src/secp256k1/Makefile	/^LIBS = $/;"	m
LIBS	src/univalue/Makefile	/^LIBS = $/;"	m
LIBSECP256K1	src/Makefile	/^LIBSECP256K1 = secp256k1\/libsecp256k1.la$/;"	m
LIBSECP256K1_CONFIG_H	src/secp256k1/src/libsecp256k1-config.h	/^#define LIBSECP256K1_CONFIG_H$/;"	d
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	doc/man/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	src/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	src/secp256k1/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	src/univalue/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL_APP_LDFLAGS	Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBTOOL_APP_LDFLAGS	doc/man/Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBTOOL_APP_LDFLAGS	src/Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBTOOL_APP_LDFLAGS	src/univalue/Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBUNIVALUE	src/Makefile	/^LIBUNIVALUE = univalue\/libunivalue.la$/;"	m
LIBUNIVALUE_AGE	src/univalue/Makefile	/^LIBUNIVALUE_AGE = 100$/;"	m
LIBUNIVALUE_CURRENT	src/univalue/Makefile	/^LIBUNIVALUE_CURRENT = 100$/;"	m
LIBUNIVALUE_REVISION	src/univalue/Makefile	/^LIBUNIVALUE_REVISION = 3$/;"	m
LIMITED_STRING	src/serialize.h	/^#define LIMITED_STRING(/;"	d
LINK	src/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK	src/secp256k1/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = lipo$/;"	m
LIPO	doc/man/Makefile	/^LIPO = lipo$/;"	m
LIPO	src/Makefile	/^LIPO = lipo$/;"	m
LIPO	src/secp256k1/Makefile	/^LIPO = lipo$/;"	m
LIPO	src/univalue/Makefile	/^LIPO = lipo$/;"	m
LLVMFuzzerInitialize	src/test/fuzz/fuzz.cpp	/^extern "C" int LLVMFuzzerInitialize(int* argc, char*** argv)$/;"	f
LLVMFuzzerTestOneInput	src/test/fuzz/fuzz.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f
LN2	src/bloom.cpp	/^#define LN2 /;"	d	file:
LN2SQUARED	src/bloom.cpp	/^#define LN2SQUARED /;"	d	file:
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LN_S	doc/man/Makefile	/^LN_S = ln -s$/;"	m
LN_S	src/Makefile	/^LN_S = ln -s$/;"	m
LN_S	src/secp256k1/Makefile	/^LN_S = ln -s$/;"	m
LN_S	src/univalue/Makefile	/^LN_S = ln -s$/;"	m
LOAD_FAIL	src/wallet/walletdb.h	/^    LOAD_FAIL,$/;"	m	class:DBErrors
LOAD_OK	src/wallet/walletdb.h	/^    LOAD_OK,$/;"	m	class:DBErrors
LOCALE_DIR	contrib/devtools/update-translations.py	/^LOCALE_DIR = 'src\/qt\/locale'$/;"	v
LOCAL_BIND	src/net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon53
LOCAL_IF	src/net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon53
LOCAL_MANUAL	src/net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon53
LOCAL_MAX	src/net.h	/^    LOCAL_MAX$/;"	e	enum:__anon53
LOCAL_NONE	src/net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon53
LOCAL_UPNP	src/net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon53
LOCK	src/sync.h	/^#define LOCK(/;"	d
LOCK2	src/sync.h	/^#define LOCK2(/;"	d
LOCKABLE	src/leveldb/port/thread_annotations.h	/^#define LOCKABLE$/;"	d
LOCKABLE	src/threadsafety.h	/^#define LOCKABLE /;"	d
LOCKABLE	src/threadsafety.h	/^#define LOCKABLE$/;"	d
LOCKED_IN	src/versionbits.h	/^    LOCKED_IN,$/;"	m	class:ThresholdState
LOCKS_EXCLUDED	src/leveldb/port/thread_annotations.h	/^#define LOCKS_EXCLUDED(/;"	d
LOCKS_EXCLUDED	src/net_processing.cpp	/^void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)$/;"	f
LOCKS_EXCLUDED	src/threadsafety.h	/^#define LOCKS_EXCLUDED(/;"	d
LOCKS_EXCLUDED	src/validation.cpp	/^static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {$/;"	f
LOCKS_EXCLUDED	src/validation.cpp	/^static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {$/;"	f
LOCKTIME_MAX	src/script/script.h	/^static const uint32_t LOCKTIME_MAX = 0xFFFFFFFFU;$/;"	v
LOCKTIME_MEDIAN_TIME_PAST	src/consensus/consensus.h	/^static constexpr unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v
LOCKTIME_THRESHOLD	src/script/script.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; \/\/ Tue Nov  5 00:53:20 1985 UTC$/;"	v
LOCKTIME_VERIFY_SEQUENCE	src/consensus/consensus.h	/^static constexpr unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v
LOCK_RETURNED	src/leveldb/port/thread_annotations.h	/^#define LOCK_RETURNED(/;"	d
LOCK_RETURNED	src/threadsafety.h	/^#define LOCK_RETURNED(/;"	d
LOG_COMPILE	src/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_COMPILE	src/secp256k1/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_COMPILE	src/univalue/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_DRIVER	src/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LOG_DRIVER	src/secp256k1/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LOG_DRIVER	src/univalue/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LONG_BLOCK_PERIODS	src/policy/fees.h	/^    static constexpr unsigned int LONG_BLOCK_PERIODS = 42;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
LONG_DECAY	src/policy/fees.h	/^    static constexpr double LONG_DECAY = .99931;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
LONG_HALFLIFE	src/policy/fees.h	/^    LONG_HALFLIFE = 2$/;"	m	class:FeeEstimateHorizon
LONG_SCALE	src/policy/fees.h	/^    static constexpr unsigned int LONG_SCALE = 24;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
LRELEASE	Makefile	/^LRELEASE = $/;"	m
LRELEASE	doc/man/Makefile	/^LRELEASE = $/;"	m
LRELEASE	src/Makefile	/^LRELEASE = $/;"	m
LRUCache	src/leveldb/util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon4::LRUCache
LRUCache	src/leveldb/util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon4	file:
LRUHandle	src/leveldb/util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon4	file:
LRU_Append	src/leveldb/util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* list, LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
LRU_Remove	src/leveldb/util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
LTCCASCOMPILE	src/secp256k1/Makefile	/^LTCCASCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	src/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	src/secp256k1/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	src/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	src/univalue/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	doc/man/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	src/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	src/secp256k1/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	src/univalue/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	src/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTLIBRARIES	src/secp256k1/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	src/univalue/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTOBJCXXCOMPILE	src/Makefile	/^LTOBJCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
LT_OBJDIR	build_msvc/bitcoin_config.h	/^#define LT_OBJDIR /;"	d
LT_OBJDIR	src/config/bitcoin-config.h	/^#define LT_OBJDIR /;"	d
LT_OBJDIR	src/secp256k1/src/libsecp256k1-config.h	/^#define LT_OBJDIR /;"	d
LT_OBJDIR	src/univalue/univalue-config.h	/^#define LT_OBJDIR /;"	d
LT_SYS_LIBRARY_PATH	Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LT_SYS_LIBRARY_PATH	doc/man/Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LT_SYS_LIBRARY_PATH	src/Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LT_SYS_LIBRARY_PATH	src/secp256k1/Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LT_SYS_LIBRARY_PATH	src/univalue/Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LUPDATE	Makefile	/^LUPDATE = $/;"	m
LUPDATE	doc/man/Makefile	/^LUPDATE = $/;"	m
LUPDATE	src/Makefile	/^LUPDATE = $/;"	m
Label	src/qt/addresstablemodel.h	/^        Label = 0,   \/**< User specified label *\/$/;"	e	enum:AddressTableModel::ColumnIndex
Label	src/qt/recentrequeststablemodel.h	/^        Label = 1,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
Label	test/functional/wallet_labels.py	/^class Label:$/;"	c
LabelFromValue	src/wallet/rpcwallet.cpp	/^static std::string LabelFromValue(const UniValue& value)$/;"	f	file:
LabelRole	src/qt/transactiontablemodel.h	/^        LabelRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Language	src/qt/optionsmodel.h	/^        Language,               \/\/ QString$/;"	e	enum:OptionsModel::OptionID
LastCommonAncestor	src/chain.cpp	/^const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {$/;"	f
LastMonth	src/qt/transactionview.h	/^        LastMonth,$/;"	e	enum:TransactionView::DateEnum
LastRecordOffset	src/leveldb/db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	src/leveldb/db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LearnAllRelatedScripts	src/wallet/wallet.cpp	/^void CWallet::LearnAllRelatedScripts(const CPubKey& key)$/;"	f	class:CWallet
LearnRelatedScripts	src/wallet/wallet.cpp	/^void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)$/;"	f	class:CWallet
LeaveCritical	src/sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	src/sync.h	/^void static inline LeaveCritical() {}$/;"	f
LevelFileNumIterator	src/leveldb/db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	src/leveldb/db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	src/leveldb/db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	src/leveldb/db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	src/leveldb/db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
LicenseInfo	src/init.cpp	/^std::string LicenseInfo()$/;"	f
LimitMempoolSize	src/validation.cpp	/^static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {$/;"	f	file:
LimitOrphanTxSize	src/net_processing.cpp	/^unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)$/;"	f
LimitedString	src/serialize.h	/^    explicit LimitedString(std::string& _string) : string(_string) {}$/;"	f	class:LimitedString
LimitedString	src/serialize.h	/^class LimitedString$/;"	c
Limiter	src/leveldb/util/env_posix.cc	/^  Limiter(intptr_t n) {$/;"	f	class:leveldb::__anon8::Limiter
Limiter	src/leveldb/util/env_posix.cc	/^class Limiter {$/;"	c	namespace:leveldb::__anon8	file:
Linux	test/functional/test_framework/netutil.py	/^    import fcntl  # Linux only, so only import when required$/;"	i
ListActiveLogCategories	src/logging.cpp	/^std::vector<CLogCategoryActive> ListActiveLogCategories()$/;"	f
ListBlockFilterTypes	src/blockfilter.cpp	/^const std::string& ListBlockFilterTypes()$/;"	f
ListCoins	src/wallet/wallet.cpp	/^std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CWallet
ListCoinsTestingSetup	src/wallet/test/wallet_tests.cpp	/^    ListCoinsTestingSetup()$/;"	f	class:ListCoinsTestingSetup
ListCoinsTestingSetup	src/wallet/test/wallet_tests.cpp	/^class ListCoinsTestingSetup : public TestChain100Setup$/;"	c	file:
ListLockedCoins	src/wallet/wallet.cpp	/^void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const$/;"	f	class:CWallet
ListLogCategories	src/logging.cpp	/^std::string ListLogCategories()$/;"	f
ListSelected	src/wallet/coincontrol.h	/^    void ListSelected(std::vector<COutPoint>& vOutpoints) const$/;"	f	class:CCoinControl
ListSinceBlockTest	test/functional/wallet_listsinceblock.py	/^class ListSinceBlockTest (BitcoinTestFramework):$/;"	c
ListTransactionsTest	test/functional/wallet_listtransactions.py	/^class ListTransactionsTest(BitcoinTestFramework):$/;"	c
ListWalletDir	src/dummywallet.cpp	/^std::vector<fs::path> ListWalletDir()$/;"	f
ListWalletDir	src/wallet/walletutil.cpp	/^std::vector<fs::path> ListWalletDir()$/;"	f
Listen	src/qt/optionsmodel.h	/^        Listen,                 \/\/ bool$/;"	e	enum:OptionsModel::OptionID
ListenSocket	src/net.h	/^        ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}$/;"	f	struct:CConnman::ListenSocket
ListenSocket	src/net.h	/^    struct ListenSocket {$/;"	s	class:CConnman
Load	src/crypto/sha256_shani.cpp	/^__m128i inline  __attribute__((always_inline)) Load(const unsigned char* in)$/;"	f	namespace:__anon43
Load	src/key.cpp	/^bool CKey::Load(const CPrivKey &privkey, const CPubKey &vchPubKey, bool fSkipCheck=false) {$/;"	f	class:CKey
LoadBlockIndex	src/validation.cpp	/^bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree)$/;"	f	class:CChainState
LoadBlockIndex	src/validation.cpp	/^bool LoadBlockIndex(const CChainParams& chainparams)$/;"	f
LoadBlockIndexGuts	src/txdb.cpp	/^bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)$/;"	f	class:CBlockTreeDB
LoadByte	src/crypto/ctaes/ctaes.c	/^static void LoadByte(AES_state* s, unsigned char byte, int r, int c) {$/;"	f	file:
LoadBytes	src/crypto/ctaes/ctaes.c	/^static void LoadBytes(AES_state *s, const unsigned char* data16) {$/;"	f	file:
LoadCScript	src/wallet/wallet.cpp	/^bool CWallet::LoadCScript(const CScript& redeemScript)$/;"	f	class:CWallet
LoadChainTip	src/validation.cpp	/^bool LoadChainTip(const CChainParams& chainparams)$/;"	f
LoadCryptedKey	src/wallet/wallet.cpp	/^bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CWallet
LoadDestData	src/wallet/wallet.cpp	/^void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)$/;"	f	class:CWallet
LoadExternalBlockFile	src/validation.cpp	/^bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp)$/;"	f
LoadGenesisBlock	src/validation.cpp	/^bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)$/;"	f	class:CChainState
LoadGenesisBlock	src/validation.cpp	/^bool LoadGenesisBlock(const CChainParams& chainparams)$/;"	f
LoadKey	src/wallet/wallet.h	/^    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }$/;"	f	class:final
LoadKeyMetadata	src/wallet/wallet.cpp	/^void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)$/;"	f	class:CWallet
LoadKeyPool	src/wallet/wallet.cpp	/^void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)$/;"	f	class:CWallet
LoadMempool	src/validation.cpp	/^bool LoadMempool(CTxMemPool& pool)$/;"	f
LoadRootCAs	src/qt/paymentserver.cpp	/^void PaymentServer::LoadRootCAs(X509_STORE* _store)$/;"	f	class:PaymentServer
LoadScriptMetadata	src/wallet/wallet.cpp	/^void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)$/;"	f	class:CWallet
LoadToWallet	src/wallet/wallet.cpp	/^void CWallet::LoadToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
LoadWallet	src/dummywallet.cpp	/^std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)$/;"	f
LoadWallet	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::LoadWalletSig> LoadWallet;$/;"	m	struct:UISignals	file:
LoadWallet	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(LoadWallet);$/;"	v
LoadWallet	src/ui_interface.cpp	/^void CClientUIInterface::LoadWallet(std::unique_ptr<interfaces::Wallet>& wallet) { return g_ui_signals.LoadWallet(wallet); }$/;"	f	class:CClientUIInterface
LoadWallet	src/wallet/wallet.cpp	/^DBErrors CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	src/wallet/wallet.cpp	/^std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning)$/;"	f
LoadWallet	src/wallet/wallet.cpp	/^std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)$/;"	f
LoadWallet	src/wallet/walletdb.cpp	/^DBErrors WalletBatch::LoadWallet(CWallet* pwallet)$/;"	f	class:WalletBatch
LoadWallet	src/wallet/wallettool.cpp	/^static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)$/;"	f	namespace:WalletTool
LoadWallets	src/wallet/load.cpp	/^bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)$/;"	f
LoadWatchOnly	src/wallet/wallet.cpp	/^bool CWallet::LoadWatchOnly(const CScript &dest)$/;"	f	class:CWallet
LocalServiceInfo	src/net.h	/^struct LocalServiceInfo {$/;"	s
Lock	src/interfaces/chain.h	/^    class Lock$/;"	c	class:interfaces::Chain
Lock	src/leveldb/port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Lock	src/leveldb/port/port_win.cc	/^void Mutex::Lock() {$/;"	f	class:leveldb::port::Mutex
Lock	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::Lock()$/;"	f	class:CCryptoKeyStore
LockAnnotation	src/threadsafety.h	/^struct SCOPED_LOCKABLE LockAnnotation$/;"	s
LockCoin	src/wallet/wallet.cpp	/^void CWallet::LockCoin(const COutPoint& output)$/;"	f	class:CWallet
LockCommand	src/test/util_tests.cpp	/^static constexpr char LockCommand = 'L';$/;"	v	file:
LockData	src/sync.cpp	/^    LockData() : available(true) {}$/;"	f	struct:LockData
LockData	src/sync.cpp	/^struct LockData {$/;"	s	file:
LockDataDirectory	src/init.cpp	/^static bool LockDataDirectory(bool probeOnly)$/;"	f	file:
LockDirectory	src/util/system.cpp	/^bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)$/;"	f
LockFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
LockFile	src/leveldb/include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	src/leveldb/util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon8::PosixEnv
LockFile	src/leveldb/util/env_win.cc	/^Status Win32Env::LockFile( const std::string& fname, FileLock** lock )$/;"	f	class:leveldb::Win32::Win32Env
LockFileName	src/leveldb/db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockImpl	src/interfaces/chain.cpp	/^class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>$/;"	c	namespace:interfaces::__anon129	file:
LockOrUnlock	src/leveldb/util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon8
LockOrders	src/sync.cpp	/^typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;$/;"	t	file:
LockPoints	src/txmempool.h	/^    LockPoints() : height(0), time(0), maxInputBlock(nullptr) { }$/;"	f	struct:LockPoints
LockPoints	src/txmempool.h	/^struct LockPoints$/;"	s
LockStack	src/sync.cpp	/^typedef std::vector<std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
Locked	src/qt/walletmodel.h	/^        Locked,       \/\/ wallet->IsCrypted() && wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
LockedPageAllocator	src/support/lockedpool.h	/^class LockedPageAllocator$/;"	c
LockedPageArena	src/support/lockedpool.cpp	/^LockedPool::LockedPageArena::LockedPageArena(LockedPageAllocator *allocator_in, void *base_in, size_t size_in, size_t align_in):$/;"	f	class:LockedPool::LockedPageArena
LockedPageArena	src/support/lockedpool.h	/^    class LockedPageArena: public Arena$/;"	c	class:LockedPool
LockedPool	src/support/lockedpool.cpp	/^LockedPool::LockedPool(std::unique_ptr<LockedPageAllocator> allocator_in, LockingFailed_Callback lf_cb_in):$/;"	f	class:LockedPool
LockedPool	src/support/lockedpool.h	/^class LockedPool$/;"	c
LockedPoolManager	src/support/lockedpool.cpp	/^LockedPoolManager::LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator_in):$/;"	f	class:LockedPoolManager
LockedPoolManager	src/support/lockedpool.h	/^class LockedPoolManager : public LockedPool$/;"	c
LockingFailed	src/support/lockedpool.cpp	/^bool LockedPoolManager::LockingFailed()$/;"	f	class:LockedPoolManager
LockingFailed_Callback	src/support/lockedpool.h	/^    typedef bool (*LockingFailed_Callback)();$/;"	t	class:LockedPool
LocksHeld	src/sync.cpp	/^std::string LocksHeld()$/;"	f
Log	src/leveldb/util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAcceptCategory	src/logging.h	/^static inline bool LogAcceptCategory(BCLog::LogFlags category)$/;"	f
LogAndApply	src/leveldb/db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogCategories	src/logging.cpp	/^const CLogCategoryDesc LogCategories[] =$/;"	v
LogConnectFailure	src/netbase.cpp	/^static void LogConnectFailure(bool manual_connection, const char* fmt, const Args&... args) {$/;"	f	file:
LogEvent	test/functional/combine_logs.py	/^LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])$/;"	v
LogFileName	src/leveldb/db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogInstance	src/logging.cpp	/^BCLog::Logger& LogInstance()$/;"	f
LogName	src/leveldb/db/recovery_test.cc	/^  std::string LogName(uint64_t number) {$/;"	f	class:leveldb::RecoveryTest
LogNumber	src/leveldb/db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogPrint	src/logging.h	/^static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)$/;"	f
LogPrintStr	src/logging.cpp	/^void BCLog::Logger::LogPrintStr(const std::string &str)$/;"	f	class:BCLog::Logger
LogPrintf	src/logging.h	/^static inline void LogPrintf(const char* fmt, const Args&... args)$/;"	f
LogTest	src/leveldb/db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	src/leveldb/db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
LogTimestampStr	src/logging.cpp	/^std::string BCLog::Logger::LogTimestampStr(const std::string& str)$/;"	f	class:BCLog::Logger
Logger	src/leveldb/include/leveldb/env.h	/^  Logger() { }$/;"	f	class:leveldb::Logger
Logger	src/leveldb/include/leveldb/env.h	/^class Logger {$/;"	c	namespace:leveldb
Logger	src/logging.h	/^    class Logger$/;"	c	namespace:BCLog
LoggingTest	test/functional/feature_logging.py	/^class LoggingTest(BitcoinTestFramework):$/;"	c
Logv	src/leveldb/helpers/memenv/memenv.cc	/^  virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon35::NoOpLogger
Logv	src/leveldb/util/env_win.cc	/^void Win32Logger::Logv( const char* format, va_list ap )$/;"	f	class:leveldb::Win32::Win32Logger
Logv	src/leveldb/util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
LongDescriptionRole	src/qt/transactiontablemodel.h	/^        LongDescriptionRole,$/;"	e	enum:TransactionTableModel::RoleIndex
LongTestString	src/test/crypto_tests.cpp	/^static std::string LongTestString() {$/;"	f	file:
LongpollThread	test/functional/mining_getblocktemplate_longpoll.py	/^class LongpollThread(threading.Thread):$/;"	c
Lookup	src/leveldb/util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::HandleTable
Lookup	src/leveldb/util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Lookup	src/leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::LRUCache
Lookup	src/leveldb/util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
Lookup	src/netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	src/netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupFilter	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const$/;"	f	class:BlockFilterIndex
LookupFilterHashRange	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilterHashRange(int start_height, const CBlockIndex* stop_index,$/;"	f	class:BlockFilterIndex
LookupFilterHeader	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const$/;"	f	class:BlockFilterIndex
LookupFilterRange	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,$/;"	f	class:BlockFilterIndex
LookupHelper	src/script/sign.cpp	/^bool LookupHelper(const M& map, const K& key, V& value)$/;"	f	namespace:__anon83
LookupHost	src/netbase.cpp	/^bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)$/;"	f
LookupHost	src/netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupIntern	src/netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupKey	src/leveldb/db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	src/leveldb/db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
LookupNumeric	src/netbase.cpp	/^CService LookupNumeric(const char *pszName, int portDefault)$/;"	f
LookupOne	src/index/blockfilterindex.cpp	/^static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)$/;"	f	file:
LookupRange	src/index/blockfilterindex.cpp	/^static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,$/;"	f	file:
LookupSubNet	src/netbase.cpp	/^bool LookupSubNet(const char* pszName, CSubNet& ret)$/;"	f
Loop	src/checkqueue.h	/^    bool Loop(bool fMaster = false)$/;"	f	class:CCheckQueue
LowerCase	src/bech32.cpp	/^inline unsigned char LowerCase(unsigned char c)$/;"	f	namespace:__anon116
MAGIC_BYTES	test/functional/test_framework/mininode.py	/^MAGIC_BYTES = {$/;"	v
MAIN	src/chainparamsbase.cpp	/^const std::string CBaseChainParams::MAIN = "main";$/;"	m	class:CBaseChainParams	file:
MAIN	src/chainparamsbase.h	/^    static const std::string MAIN;$/;"	m	class:CBaseChainParams
MAINT	Makefile	/^MAINT = $/;"	m
MAINT	doc/man/Makefile	/^MAINT = $/;"	m
MAINT	src/Makefile	/^MAINT = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	doc/man/Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	src/Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	src/secp256k1/Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	src/univalue/Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing makeinfo$/;"	m
MAKENSIS	Makefile	/^MAKENSIS = $/;"	m
MAKENSIS	doc/man/Makefile	/^MAKENSIS = $/;"	m
MAKENSIS	src/Makefile	/^MAKENSIS = $/;"	m
MAKE_RAII	src/support/events.h	/^#define MAKE_RAII(/;"	d
MANDATORY_SCRIPT_VERIFY_FLAGS	src/script/standard.h	/^static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;$/;"	v
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	doc/man/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	src/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	src/secp256k1/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	src/univalue/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANS	doc/man/Makefile	/^MANS = $(dist_man1_MANS)$/;"	m
MAPPING	contrib/devtools/circular-dependencies.py	/^MAPPING = {$/;"	v
MAP_ANONYMOUS	src/support/lockedpool.cpp	/^#define MAP_ANONYMOUS /;"	d	file:
MASK	src/crypto/sha256_shani.cpp	/^const __m128i MASK = _mm_set_epi64x(0x0c0d0e0f08090a0bULL, 0x0405060700010203ULL);$/;"	m	namespace:__anon43	file:
MAXTXFEE	src/policy/fees.h	/^    MAXTXFEE,$/;"	m	class:FeeEstimateHorizon::FeeReason
MAX_ACTIONS	src/test/util_tests.cpp	/^    static constexpr int MAX_ACTIONS = 2;$/;"	m	struct:ChainMergeTestingSetup	file:
MAX_ACTIONS	src/test/util_tests.cpp	/^    static constexpr int MAX_ACTIONS = 3;$/;"	m	struct:ArgsMergeTestingSetup	file:
MAX_ADDNODE_CONNECTIONS	src/net.h	/^static const int MAX_ADDNODE_CONNECTIONS = 8;$/;"	v
MAX_ADDR_TO_SEND	src/net.h	/^static const unsigned int MAX_ADDR_TO_SEND = 1000;$/;"	v
MAX_ANCESTORS	test/functional/mempool_packages.py	/^MAX_ANCESTORS = 25$/;"	v
MAX_BASE58_TYPES	src/chainparams.h	/^        MAX_BASE58_TYPES$/;"	e	enum:CChainParams::Base58Type
MAX_BIP125_RBF_SEQUENCE	src/util/rbf.h	/^static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;$/;"	v
MAX_BIP125_RBF_SEQUENCE	test/functional/rpc_psbt.py	/^MAX_BIP125_RBF_SEQUENCE = 0xfffffffd$/;"	v
MAX_BLOCKFILE_SIZE	src/validation.h	/^static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; \/\/ 128 MiB$/;"	v
MAX_BLOCKS_IN_TRANSIT_PER_PEER	src/validation.h	/^static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;$/;"	v
MAX_BLOCKS_TO_ANNOUNCE	src/validation.h	/^static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;$/;"	v
MAX_BLOCKTXN_DEPTH	src/validation.h	/^static const int MAX_BLOCKTXN_DEPTH = 10;$/;"	v
MAX_BLOCK_BASE_SIZE	test/functional/mining_prioritisetransaction.py	/^from test_framework.messages import COIN, MAX_BLOCK_BASE_SIZE$/;"	i
MAX_BLOCK_BASE_SIZE	test/functional/test_framework/messages.py	/^MAX_BLOCK_BASE_SIZE = 1000000$/;"	v
MAX_BLOCK_COINSDB_USAGE	src/txdb.h	/^static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;$/;"	v
MAX_BLOCK_SERIALIZED_SIZE	src/consensus/consensus.h	/^static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;$/;"	v
MAX_BLOCK_SIGOPS	test/functional/data/invalid_txs.py	/^from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS$/;"	i
MAX_BLOCK_SIGOPS	test/functional/test_framework/blocktools.py	/^MAX_BLOCK_SIGOPS = 20000$/;"	v
MAX_BLOCK_SIGOPS_COST	src/consensus/consensus.h	/^static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;$/;"	v
MAX_BLOCK_TIME_GAP	src/chain.h	/^static constexpr int64_t MAX_BLOCK_TIME_GAP = 90 * 60;$/;"	v
MAX_BLOCK_WEIGHT	src/consensus/consensus.h	/^static const unsigned int MAX_BLOCK_WEIGHT = 4000000;$/;"	v
MAX_BLOOM_FILTER_SIZE	src/bloom.h	/^static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; \/\/ bytes$/;"	v
MAX_BUCKET_FEERATE	src/policy/fees.h	/^    static constexpr double MAX_BUCKET_FEERATE = 1e7;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MAX_CMPCTBLOCK_DEPTH	src/validation.h	/^static const int MAX_CMPCTBLOCK_DEPTH = 5;$/;"	v
MAX_DATE	src/qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MAX_DATE = QDateTime::fromTime_t(0xFFFFFFFF);$/;"	m	class:TransactionFilterProxy	file:
MAX_DATE	src/qt/transactionfilterproxy.h	/^    static const QDateTime MAX_DATE;$/;"	m	class:TransactionFilterProxy
MAX_DESCENDANTS	test/functional/mempool_packages.py	/^MAX_DESCENDANTS = 25$/;"	v
MAX_DISCONNECTED_TX_POOL_SIZE	src/validation.h	/^static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;$/;"	v
MAX_FEEFILTER_CHANGE_DELAY	src/net_processing.cpp	/^static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;$/;"	v	file:
MAX_FEE_ESTIMATION_TIP_AGE	src/validation.h	/^static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;$/;"	v
MAX_FILTER_FEERATE	src/policy/fees.h	/^    static constexpr double MAX_FILTER_FEERATE = 1e7;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
MAX_FLTR_FILE_SIZE	src/index/blockfilterindex.cpp	/^constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; \/\/ 16 MiB$/;"	v
MAX_FUTURE_BLOCK_TIME	src/chain.h	/^static constexpr int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;$/;"	v
MAX_GETDATA_RANDOM_DELAY	src/net_processing.cpp	/^static constexpr int64_t MAX_GETDATA_RANDOM_DELAY = 2 * 1000000;$/;"	v	file:
MAX_GETDATA_SZ	src/net_processing.cpp	/^static const unsigned int MAX_GETDATA_SZ = 1000;$/;"	v	file:
MAX_GETUTXOS_OUTPOINTS	src/rest.cpp	/^static const size_t MAX_GETUTXOS_OUTPOINTS = 15; \/\/allow a max of 15 outpoints to be queried at once$/;"	v	file:
MAX_HASH_FUNCS	src/bloom.h	/^static const unsigned int MAX_HASH_FUNCS = 50;$/;"	v
MAX_HEADERS_RESULTS	src/validation.h	/^static const unsigned int MAX_HEADERS_RESULTS = 2000;$/;"	v
MAX_HEADERS_SIZE	src/httpserver.cpp	/^static const size_t MAX_HEADERS_SIZE = 8192;$/;"	v	file:
MAX_INPUTS_PER_BLOCK	src/undo.h	/^static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT \/ MIN_TRANSACTION_INPUT_WEIGHT;$/;"	v
MAX_INV_SZ	src/net.h	/^static const unsigned int MAX_INV_SZ = 50000;$/;"	v
MAX_LINE_LENGTH	src/torcontrol.cpp	/^static const int MAX_LINE_LENGTH = 100000;$/;"	v	file:
MAX_LOCATOR_SZ	src/net.h	/^static const unsigned int MAX_LOCATOR_SZ = 101;$/;"	v
MAX_LOCATOR_SZ	test/functional/p2p_invalid_locator.py	/^from test_framework.messages import msg_getheaders, msg_getblocks, MAX_LOCATOR_SZ$/;"	i
MAX_LOCATOR_SZ	test/functional/test_framework/messages.py	/^MAX_LOCATOR_SZ = 101$/;"	v
MAX_MAX_SIG_CACHE_SIZE	src/script/sigcache.h	/^static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;$/;"	v
MAX_MONEY	src/amount.h	/^static const CAmount MAX_MONEY = 21000000 * COIN;$/;"	v
MAX_NODES	test/functional/test_framework/util.py	/^MAX_NODES = 8$/;"	v
MAX_OPCODE	src/script/script.h	/^static const unsigned int MAX_OPCODE = OP_NOP10;$/;"	v
MAX_OPS_PER_SCRIPT	src/script/script.h	/^static const int MAX_OPS_PER_SCRIPT = 201;$/;"	v
MAX_OP_RETURN_RELAY	src/script/standard.h	/^static const unsigned int MAX_OP_RETURN_RELAY = 83;$/;"	v
MAX_OUTBOUND_CONNECTIONS	src/net.h	/^static const int MAX_OUTBOUND_CONNECTIONS = 8;$/;"	v
MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT	src/net_processing.cpp	/^static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;$/;"	v	file:
MAX_OUTPUTS_PER_BLOCK	src/coins.cpp	/^static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT \/ MIN_TRANSACTION_OUTPUT_WEIGHT;$/;"	v	file:
MAX_P2SH_SIGOPS	src/policy/policy.h	/^static const unsigned int MAX_P2SH_SIGOPS = 15;$/;"	v
MAX_PASSPHRASE_SIZE	src/qt/guiconstants.h	/^static const int MAX_PASSPHRASE_SIZE = 1024;$/;"	v
MAX_PATH	src/compat.h	/^#define MAX_PATH /;"	d
MAX_PEER_TX_ANNOUNCEMENTS	src/net_processing.cpp	/^static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENTS = 2 * MAX_INV_SZ;$/;"	v	file:
MAX_PEER_TX_IN_FLIGHT	src/net_processing.cpp	/^static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;$/;"	v	file:
MAX_PROTOCOL_MESSAGE_LENGTH	src/net.h	/^static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;$/;"	v
MAX_PUBKEYS_PER_MULTISIG	src/script/script.h	/^static const int MAX_PUBKEYS_PER_MULTISIG = 20;$/;"	v
MAX_REJECT_MESSAGE_LENGTH	src/validation.h	/^static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;$/;"	v
MAX_REPLACEMENT_LIMIT	test/functional/feature_rbf.py	/^MAX_REPLACEMENT_LIMIT = 100$/;"	v
MAX_SCRIPTCHECK_THREADS	src/validation.h	/^static const int MAX_SCRIPTCHECK_THREADS = 16;$/;"	v
MAX_SCRIPT_ELEMENT_SIZE	src/script/script.h	/^static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;$/;"	v
MAX_SCRIPT_ELEMENT_SIZE	test/functional/test_framework/script.py	/^MAX_SCRIPT_ELEMENT_SIZE = 520$/;"	v
MAX_SCRIPT_SIZE	src/script/script.h	/^static const int MAX_SCRIPT_SIZE = 10000;$/;"	v
MAX_SEEDS_PER_ASN	contrib/seeds/makeseeds.py	/^MAX_SEEDS_PER_ASN=2$/;"	v
MAX_SIGOP_COST	test/functional/p2p_segwit.py	/^MAX_SIGOP_COST = 80000$/;"	v
MAX_SIZE	src/serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MAX_STACK_SIZE	src/script/script.h	/^static const int MAX_STACK_SIZE = 1000;$/;"	v
MAX_STANDARD_P2WSH_SCRIPT_SIZE	src/policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;$/;"	v
MAX_STANDARD_P2WSH_STACK_ITEMS	src/policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;$/;"	v
MAX_STANDARD_P2WSH_STACK_ITEM_SIZE	src/policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;$/;"	v
MAX_STANDARD_TX_SIGOPS_COST	src/policy/policy.h	/^static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST\/5;$/;"	v
MAX_STANDARD_TX_WEIGHT	src/policy/policy.h	/^static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;$/;"	v
MAX_STANDARD_VERSION	src/primitives/transaction.h	/^    static const int32_t MAX_STANDARD_VERSION=2;$/;"	m	class:CTransaction
MAX_SUBVERSION_LENGTH	src/net.h	/^static const unsigned int MAX_SUBVERSION_LENGTH = 256;$/;"	v
MAX_UNCONNECTING_HEADERS	src/validation.h	/^static const int MAX_UNCONNECTING_HEADERS = 10;$/;"	v
MAX_UPLOAD_TIMEFRAME	src/net.h	/^static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;$/;"	v
MAX_URI_LENGTH	src/qt/qrimagewidget.h	/^static const int MAX_URI_LENGTH = 255;$/;"	v
MAX_VERSIONS	contrib/devtools/symbol-check.py	/^MAX_VERSIONS = {$/;"	v
MAX_VERSION_BITS_DEPLOYMENTS	src/consensus/params.h	/^    MAX_VERSION_BITS_DEPLOYMENTS$/;"	e	enum:Consensus::DeploymentPos
MC_DEBUG	src/qt/rpcconsole.h	/^        MC_DEBUG,$/;"	e	enum:RPCConsole::MessageClass
MC_ERROR	src/qt/rpcconsole.h	/^        MC_ERROR,$/;"	e	enum:RPCConsole::MessageClass
MED_BLOCK_PERIODS	src/policy/fees.h	/^    static constexpr unsigned int MED_BLOCK_PERIODS = 24;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MED_DECAY	src/policy/fees.h	/^    static constexpr double MED_DECAY = .9952;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MED_HALFLIFE	src/policy/fees.h	/^    MED_HALFLIFE = 1,$/;"	m	class:FeeEstimateHorizon
MED_SCALE	src/policy/fees.h	/^    static constexpr unsigned int MED_SCALE = 2;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MEMPOOL	src/protocol.cpp	/^const char *MEMPOOL="mempool";$/;"	m	namespace:NetMsgType	file:
MEMPOOL_DUMP_VERSION	src/validation.cpp	/^static const uint64_t MEMPOOL_DUMP_VERSION = 1;$/;"	v	file:
MEMPOOL_ERROR	src/util/error.h	/^    MEMPOOL_ERROR,$/;"	m	class:TransactionError
MEMPOOL_HEIGHT	src/txmempool.h	/^static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;$/;"	v
MEMPOOL_MIN	src/policy/fees.h	/^    MEMPOOL_MIN,$/;"	m	class:FeeEstimateHorizon::FeeReason
MEMPOOL_REJECTED	src/util/error.h	/^    MEMPOOL_REJECTED,$/;"	m	class:TransactionError
MEMTABLE_TEST	src/leveldb/table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
MERKLEBLOCK	src/protocol.cpp	/^const char *MERKLEBLOCK="merkleblock";$/;"	m	namespace:NetMsgType	file:
MESSAGEMAP	test/functional/test_framework/mininode.py	/^MESSAGEMAP = {$/;"	v
MESSAGE_SIZE_OFFSET	src/protocol.h	/^    static constexpr size_t MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE;$/;"	m	class:CMessageHeader
MESSAGE_SIZE_SIZE	src/protocol.h	/^    static constexpr size_t MESSAGE_SIZE_SIZE = 4;$/;"	m	class:CMessageHeader
MESSAGE_START_SIZE	src/protocol.h	/^    static constexpr size_t MESSAGE_START_SIZE = 4;$/;"	m	class:CMessageHeader
MICRO	src/validation.cpp	/^#define MICRO /;"	d	file:
MILLI	src/validation.cpp	/^#define MILLI /;"	d	file:
MINIMUM_COLUMN_WIDTH	src/qt/receivecoinsdialog.h	/^        MINIMUM_COLUMN_WIDTH = 130$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
MINIMUM_COLUMN_WIDTH	src/qt/transactionview.h	/^        MINIMUM_COLUMN_WIDTH = 23$/;"	e	enum:TransactionView::ColumnWidths
MINIMUM_CONNECT_TIME	src/net_processing.cpp	/^static constexpr int64_t MINIMUM_CONNECT_TIME = 30;$/;"	v	file:
MINIUPNPC_CPPFLAGS	Makefile	/^MINIUPNPC_CPPFLAGS = $/;"	m
MINIUPNPC_CPPFLAGS	doc/man/Makefile	/^MINIUPNPC_CPPFLAGS = $/;"	m
MINIUPNPC_CPPFLAGS	src/Makefile	/^MINIUPNPC_CPPFLAGS = $/;"	m
MINIUPNPC_LIBS	Makefile	/^MINIUPNPC_LIBS = $/;"	m
MINIUPNPC_LIBS	doc/man/Makefile	/^MINIUPNPC_LIBS = $/;"	m
MINIUPNPC_LIBS	src/Makefile	/^MINIUPNPC_LIBS = $/;"	m
MIN_BLOCKS	contrib/seeds/makeseeds.py	/^MIN_BLOCKS = 337600$/;"	v
MIN_BLOCKS_TO_KEEP	src/validation.h	/^static const unsigned int MIN_BLOCKS_TO_KEEP = 288;$/;"	v
MIN_BLOCKS_TO_KEEP	test/functional/feature_pruning.py	/^MIN_BLOCKS_TO_KEEP = 288$/;"	v
MIN_BUCKET_FEERATE	src/policy/fees.h	/^    static constexpr double MIN_BUCKET_FEERATE = 1000;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MIN_CORES	src/bench/checkqueue.cpp	/^static const int MIN_CORES = 2;$/;"	v	file:
MIN_CORE_FILEDESCRIPTORS	src/init.cpp	/^#define MIN_CORE_FILEDESCRIPTORS /;"	d	file:
MIN_DATE	src/qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MIN_DATE = QDateTime::fromTime_t(0);$/;"	m	class:TransactionFilterProxy	file:
MIN_DATE	src/qt/transactionfilterproxy.h	/^    static const QDateTime MIN_DATE;$/;"	m	class:TransactionFilterProxy
MIN_DISK_SPACE_FOR_BLOCK_FILES	src/validation.h	/^static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;$/;"	v
MIN_FINAL_CHANGE	src/wallet/coinselection.h	/^static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE\/2;$/;"	v
MIN_NUM_MESSAGES	contrib/devtools/update-translations.py	/^MIN_NUM_MESSAGES = 10$/;"	v
MIN_PEER_PROTO_VERSION	src/version.h	/^static const int MIN_PEER_PROTO_VERSION = GETHEADERS_VERSION;$/;"	v
MIN_SERIALIZABLE_TRANSACTION_WEIGHT	src/consensus/consensus.h	/^static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; \/\/ 10 is the lower bound for the size of a serialized CTransaction$/;"	v
MIN_STANDARD_TX_NONWITNESS_SIZE	src/policy/policy.h	/^static const unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE = 82;$/;"	v
MIN_TRANSACTION_INPUT_WEIGHT	src/undo.h	/^static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), PROTOCOL_VERSION);$/;"	v
MIN_TRANSACTION_OUTPUT_WEIGHT	src/coins.cpp	/^static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), PROTOCOL_VERSION);$/;"	v	file:
MIN_TRANSACTION_WEIGHT	src/consensus/consensus.h	/^static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; \/\/ 60 is the lower bound for the size of a valid serialized CTransaction$/;"	v
MIN_VERSION_SUPPORTED	test/functional/test_framework/messages.py	/^MIN_VERSION_SUPPORTED = 60001$/;"	v
MISC_ERROR	src/wallet/feebumper.h	/^    MISC_ERROR,$/;"	m	class:feebumper::Result
MISSING_INPUTS	src/util/error.h	/^    MISSING_INPUTS,$/;"	m	class:TransactionError
MKDIR_P	Makefile	/^MKDIR_P = build-aux\/install-sh -c -d$/;"	m
MKDIR_P	doc/man/Makefile	/^MKDIR_P = ..\/..\/build-aux\/install-sh -c -d$/;"	m
MKDIR_P	src/Makefile	/^MKDIR_P = ..\/build-aux\/install-sh -c -d$/;"	m
MKDIR_P	src/secp256k1/Makefile	/^MKDIR_P = build-aux\/install-sh -c -d$/;"	m
MKDIR_P	src/univalue/Makefile	/^MKDIR_P = build-aux\/install-sh -c -d$/;"	m
MOC	Makefile	/^MOC = $/;"	m
MOC	doc/man/Makefile	/^MOC = $/;"	m
MOC	src/Makefile	/^MOC = $/;"	m
MOC_DEFS	Makefile	/^MOC_DEFS = -DHAVE_CONFIG_H -I$(srcdir)$/;"	m
MOC_DEFS	doc/man/Makefile	/^MOC_DEFS = -DHAVE_CONFIG_H -I$(srcdir)$/;"	m
MOC_DEFS	src/Makefile	/^MOC_DEFS = -DHAVE_CONFIG_H -I$(srcdir)$/;"	m
MODAL	src/ui_interface.h	/^        MODAL               = 0x10000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MODEL_UPDATE_DELAY	src/qt/guiconstants.h	/^static const int MODEL_UPDATE_DELAY = 250;$/;"	v
MODE_ERROR	src/consensus/validation.h	/^        MODE_ERROR,   \/\/!< run-time error$/;"	e	enum:CValidationState::mode_state
MODE_INVALID	src/consensus/validation.h	/^        MODE_INVALID, \/\/!< network rule violation (DoS value may be set)$/;"	e	enum:CValidationState::mode_state
MODE_VALID	src/consensus/validation.h	/^        MODE_VALID,   \/\/!< everything ok$/;"	e	enum:CValidationState::mode_state
MSG_BLOCK	src/protocol.h	/^    MSG_BLOCK = 2,$/;"	e	enum:GetDataMsg
MSG_BLOCK	test/functional/test_framework/messages.py	/^MSG_BLOCK = 2$/;"	v
MSG_CMPCT_BLOCK	src/protocol.h	/^    MSG_CMPCT_BLOCK = 4,     \/\/!< Defined in BIP152$/;"	e	enum:GetDataMsg
MSG_DONTWAIT	src/net.cpp	/^#define MSG_DONTWAIT /;"	d	file:
MSG_ERROR	src/ui_interface.h	/^        MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_FILTERED_BLOCK	src/protocol.h	/^    MSG_FILTERED_BLOCK = 3,  \/\/!< Defined in BIP37$/;"	e	enum:GetDataMsg
MSG_FILTERED_WITNESS_BLOCK	src/protocol.h	/^    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,$/;"	e	enum:GetDataMsg
MSG_HASHBLOCK	src/zmq/zmqpublishnotifier.cpp	/^static const char *MSG_HASHBLOCK = "hashblock";$/;"	v	file:
MSG_HASHTX	src/zmq/zmqpublishnotifier.cpp	/^static const char *MSG_HASHTX    = "hashtx";$/;"	v	file:
MSG_INFORMATION	src/ui_interface.h	/^        MSG_INFORMATION = ICON_INFORMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_NOSIGNAL	src/net.cpp	/^#define MSG_NOSIGNAL /;"	d	file:
MSG_NOSIGNAL	src/netbase.cpp	/^#define MSG_NOSIGNAL /;"	d	file:
MSG_RAWBLOCK	src/zmq/zmqpublishnotifier.cpp	/^static const char *MSG_RAWBLOCK  = "rawblock";$/;"	v	file:
MSG_RAWTX	src/zmq/zmqpublishnotifier.cpp	/^static const char *MSG_RAWTX     = "rawtx";$/;"	v	file:
MSG_TX	src/protocol.h	/^    MSG_TX = 1,$/;"	e	enum:GetDataMsg
MSG_TX	test/functional/test_framework/messages.py	/^MSG_TX = 1$/;"	v
MSG_TYPE_MASK	src/protocol.h	/^const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;$/;"	v
MSG_TYPE_MASK	test/functional/test_framework/messages.py	/^MSG_TYPE_MASK = 0xffffffff >> 2$/;"	v
MSG_WARNING	src/ui_interface.h	/^        MSG_WARNING = (ICON_WARNING | BTN_OK | MODAL),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_WITNESS_BLOCK	src/protocol.h	/^    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
MSG_WITNESS_FLAG	src/protocol.h	/^const uint32_t MSG_WITNESS_FLAG = 1 << 30;$/;"	v
MSG_WITNESS_FLAG	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
MSG_WITNESS_FLAG	test/functional/test_framework/messages.py	/^MSG_WITNESS_FLAG = 1 << 30$/;"	v
MSG_WITNESS_TX	src/protocol.h	/^    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
MSIZE	src/bench/lockedpool.cpp	/^#define MSIZE /;"	d	file:
MTState	src/leveldb/db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon24	file:
MTThread	src/leveldb/db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon24	file:
MTThreadBody	src/leveldb/db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon24
MY_RELAY	test/functional/test_framework/messages.py	/^MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)$/;"	v
MY_SUBVERSION	test/functional/test_framework/messages.py	/^MY_SUBVERSION = b"\/python-mininode-tester:0.0.3\/"$/;"	v
MY_VERSION	test/functional/test_framework/messages.py	/^MY_VERSION = 70014  # past bip-31 for ping\/pong$/;"	v
MacDockIconHandler	src/qt/macdockiconhandler.h	/^class MacDockIconHandler : public QObject$/;"	c
MacNotificationHandler	src/qt/macnotificationhandler.h	/^class MacNotificationHandler : public QObject$/;"	c
MainSignalsInstance	src/validationinterface.cpp	/^    explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}$/;"	f	struct:MainSignalsInstance
MainSignalsInstance	src/validationinterface.cpp	/^struct MainSignalsInstance {$/;"	s	file:
Maj	src/crypto/sha256.cpp	/^uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon40::sha256
Maj	src/crypto/sha256_avx2.cpp	/^__m256i inline Maj(__m256i x, __m256i y, __m256i z) { return Or(And(x, y), And(z, Or(x, y))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Maj	src/crypto/sha256_sse41.cpp	/^__m128i inline Maj(__m128i x, __m128i y, __m128i z) { return Or(And(x, y), And(z, Or(x, y))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Maj	src/crypto/sha512.cpp	/^uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon39::sha512
Maj	src/secp256k1/src/hash_impl.h	/^#define Maj(/;"	d
Maj	src/secp256k1/src/hash_impl.h	/^#undef Maj$/;"	d
Make	src/netmessagemaker.h	/^    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
Make	src/netmessagemaker.h	/^    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
MakeChain	src/interfaces/chain.cpp	/^std::unique_ptr<Chain> MakeChain() { return MakeUnique<ChainImpl>(); }$/;"	f	namespace:interfaces
MakeDeterministic	src/test/addrman_tests.cpp	/^    void MakeDeterministic()$/;"	f	class:CAddrManTest
MakeDeterministic	src/test/net_tests.cpp	/^    void MakeDeterministic()$/;"	f	class:CAddrManSerializationMock
MakeFileName	src/leveldb/db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeHandler	src/interfaces/handler.cpp	/^std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection)$/;"	f	namespace:interfaces
MakeInputIterator	src/leveldb/db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	src/leveldb/db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	src/leveldb/db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeLogFile	src/leveldb/db/recovery_test.cc	/^  void MakeLogFile(uint64_t lognum, SequenceNumber seq, Slice key, Slice val) {$/;"	f	class:leveldb::RecoveryTest
MakeNewKey	src/key.cpp	/^void CKey::MakeNewKey(bool fCompressedIn) {$/;"	f	class:CKey
MakeNode	src/interfaces/node.cpp	/^std::unique_ptr<Node> MakeNode() { return MakeUnique<NodeImpl>(); }$/;"	f	namespace:interfaces
MakeOptional	src/optional.h	/^Optional<T> MakeOptional(bool condition, T&& value)$/;"	f
MakeRoomForWrite	src/leveldb/db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
MakeSingleColorImage	src/qt/platformstyle.cpp	/^void MakeSingleColorImage(QImage& img, const QColor& colorbase)$/;"	f	namespace:__anon67
MakeSpan	src/span.h	/^constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }$/;"	f
MakeTables	src/leveldb/db/db_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
MakeTransactionRef	src/primitives/transaction.h	/^static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }$/;"	f
MakeTransactionRef	src/primitives/transaction.h	/^template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }$/;"	f
MakeTried	src/addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId)$/;"	f	class:CAddrMan
MakeUnique	src/util/memory.h	/^std::unique_ptr<T> MakeUnique(Args&&... args)$/;"	f
MakeWallet	src/dummywallet.cpp	/^std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)$/;"	f	namespace:interfaces
MakeWallet	src/interfaces/wallet.cpp	/^std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? MakeUnique<WalletImpl>(wallet) : nullptr; }$/;"	f	namespace:interfaces
MakeWalletClient	src/interfaces/wallet.cpp	/^std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames)$/;"	f	namespace:interfaces
MakeWalletTx	src/interfaces/wallet.cpp	/^WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, const CWalletTx& wtx)$/;"	f	namespace:interfaces::__anon130
MakeWalletTxStatus	src/interfaces/wallet.cpp	/^WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)$/;"	f	namespace:interfaces::__anon130
MallocUsage	src/memusage.h	/^static inline size_t MallocUsage(size_t alloc)$/;"	f	namespace:memusage
ManifestFileName	src/leveldb/db/recovery_test.cc	/^  std::string ManifestFileName() {$/;"	f	class:leveldb::RecoveryTest
ManifestFileNumber	src/leveldb/db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	src/leveldb/db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MapArgs	src/util/system.cpp	/^    typedef std::map<std::string, std::vector<std::string>> MapArgs;$/;"	t	class:ArgsManagerHelper	file:
MapCheckpoints	src/chainparams.h	/^typedef std::map<int, uint256> MapCheckpoints;$/;"	t
MapIntoRange	src/blockfilter.cpp	/^static uint64_t MapIntoRange(uint64_t x, uint64_t n)$/;"	f	file:
MapPortUPnP	src/qt/optionsmodel.h	/^        MapPortUPnP,            \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MapRelay	src/net_processing.cpp	/^    typedef std::map<uint256, CTransactionRef> MapRelay;$/;"	t	namespace:__anon88	file:
MarkAddressGood	src/net.cpp	/^void CConnman::MarkAddressGood(const CAddress& addr)$/;"	f	class:CConnman
MarkConflicted	src/wallet/wallet.cpp	/^void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)$/;"	f	class:CWallet
MarkDirty	src/wallet/wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	src/wallet/wallet.h	/^    void MarkDirty()$/;"	f	class:CWalletTx
MarkFileNumberUsed	src/leveldb/db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
MarkInputsDirty	src/wallet/wallet.cpp	/^void CWallet::MarkInputsDirty(const CTransactionRef& tx)$/;"	f	class:CWallet
MarkPreSplitKeys	src/wallet/wallet.cpp	/^void CWallet::MarkPreSplitKeys()$/;"	f	class:CWallet
MarkReplaced	src/wallet/wallet.cpp	/^bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)$/;"	f	class:CWallet
MarkReserveKeysAsUsed	src/wallet/wallet.cpp	/^void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)$/;"	f	class:CWallet
Mask	src/leveldb/util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
Mask	src/versionbits.cpp	/^    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }$/;"	f	class:__anon126::VersionBitsConditionChecker
MasterKeyMap	src/wallet/wallet.h	/^    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;$/;"	t	class:final
Match	src/blockfilter.cpp	/^bool GCSFilter::Match(const Element& element) const$/;"	f	class:GCSFilter
Match	src/netaddress.cpp	/^bool CSubNet::Match(const CNetAddr &addr) const$/;"	f	class:CSubNet
MatchAny	src/blockfilter.cpp	/^bool GCSFilter::MatchAny(const ElementSet& elements) const$/;"	f	class:GCSFilter
MatchError	src/leveldb/db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
MatchGCSFilter	src/bench/gcs_filter.cpp	/^static void MatchGCSFilter(benchmark::State& state)$/;"	f	file:
MatchInternal	src/blockfilter.cpp	/^bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const$/;"	f	class:GCSFilter
MatchMultisig	src/script/standard.cpp	/^static bool MatchMultisig(const CScript& script, unsigned int& required, std::vector<valtype>& pubkeys)$/;"	f	file:
MatchPayToPubkey	src/script/standard.cpp	/^static bool MatchPayToPubkey(const CScript& script, valtype& pubkey)$/;"	f	file:
MatchPayToPubkeyHash	src/script/standard.cpp	/^static bool MatchPayToPubkeyHash(const CScript& script, valtype& pubkeyhash)$/;"	f	file:
Matches	src/leveldb/util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaxArray	src/test/arith_uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxArray	src/test/uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxBytesForLevel	src/leveldb/db/version_set.cc	/^static double MaxBytesForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	src/leveldb/db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxGrandParentOverlapBytes	src/leveldb/db/version_set.cc	/^static int64_t MaxGrandParentOverlapBytes(const Options* options) {$/;"	f	namespace:leveldb
MaxL	src/test/arith_uint256_tests.cpp	/^const arith_uint256 MaxL = arith_uint256V(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxL	src/test/uint256_tests.cpp	/^const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxMmaps	src/leveldb/util/env_posix.cc	/^static int MaxMmaps() {$/;"	f	namespace:leveldb::__anon8
MaxNextLevelOverlappingBytes	src/leveldb/db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOpenFiles	src/leveldb/util/env_posix.cc	/^static intptr_t MaxOpenFiles() {$/;"	f	namespace:leveldb::__anon8
MaxOutputFileSize	src/leveldb/db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaxS	src/test/uint256_tests.cpp	/^const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));$/;"	v
MaxUploadTest	test/functional/feature_maxuploadtarget.py	/^class MaxUploadTest(BitcoinTestFramework):$/;"	c
MaxUsableEstimate	src/policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const$/;"	f	class:CBlockPolicyEstimator
MayHaveUsefulAddressDB	src/protocol.h	/^static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {$/;"	f
MaybeAddFile	src/leveldb/db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeCompactWalletDB	src/wallet/walletdb.cpp	/^void MaybeCompactWalletDB()$/;"	f
MaybeIgnoreError	src/leveldb/db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybePunishNode	src/net_processing.cpp	/^static bool MaybePunishNode(NodeId nodeid, const CValidationState& state, bool via_compact_block, const std::string& message = "") {$/;"	f	file:
MaybePushAddress	src/wallet/rpcwallet.cpp	/^static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)$/;"	f	file:
MaybeResendWalletTxs	src/wallet/wallet.cpp	/^void MaybeResendWalletTxs()$/;"	f
MaybeScheduleCompaction	src/leveldb/db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
MaybeScheduleProcessQueue	src/scheduler.cpp	/^void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {$/;"	f	class:SingleThreadedSchedulerClient
MaybeSetAddrName	src/net.cpp	/^void CNode::MaybeSetAddrName(const std::string& addrNameIn) {$/;"	f	class:CNode
MaybeUseHInsteadOfApostrophy	src/test/descriptor_tests.cpp	/^std::string MaybeUseHInsteadOfApostrophy(std::string ret)$/;"	f	namespace:__anon56
Median	src/leveldb/util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemEnvTest	src/leveldb/helpers/memenv/memenv_test.cc	/^  MemEnvTest()$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	src/leveldb/helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb	file:
MemPoolRemovalReason	src/txmempool.h	/^enum class MemPoolRemovalReason {$/;"	c
MemTable	src/leveldb/db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	src/leveldb/db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	src/leveldb/table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	src/leveldb/table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
MemTableInserter	src/leveldb/db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon22	file:
MemTableIterator	src/leveldb/db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	src/leveldb/db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	src/leveldb/table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb	file:
MemoryCheck	src/test/checkqueue_tests.cpp	/^    MemoryCheck(){};$/;"	f	struct:MemoryCheck
MemoryCheck	src/test/checkqueue_tests.cpp	/^    MemoryCheck(bool b_) : b(b_)$/;"	f	struct:MemoryCheck
MemoryCheck	src/test/checkqueue_tests.cpp	/^    MemoryCheck(const MemoryCheck& x)$/;"	f	struct:MemoryCheck
MemoryCheck	src/test/checkqueue_tests.cpp	/^struct MemoryCheck {$/;"	s	file:
MemoryUsage	src/leveldb/util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Memory_Queue	src/test/checkqueue_tests.cpp	/^typedef CCheckQueue<MemoryCheck> Memory_Queue;$/;"	t	file:
MempoolAcceptanceTest	test/functional/mempool_accept.py	/^class MempoolAcceptanceTest(BitcoinTestFramework):$/;"	c
MempoolCoinbaseTest	test/functional/mempool_reorg.py	/^class MempoolCoinbaseTest(BitcoinTestFramework):$/;"	c
MempoolCoinbaseTest	test/functional/mempool_resurrect.py	/^class MempoolCoinbaseTest(BitcoinTestFramework):$/;"	c
MempoolEntryRemoved	src/validationinterface.cpp	/^void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {$/;"	f	class:CMainSignals
MempoolEviction	src/bench/mempool_eviction.cpp	/^static void MempoolEviction(benchmark::State& state)$/;"	f	file:
MempoolInfoToJSON	src/rpc/blockchain.cpp	/^UniValue MempoolInfoToJSON(const CTxMemPool& pool)$/;"	f
MempoolLimitTest	test/functional/mempool_limit.py	/^class MempoolLimitTest(BitcoinTestFramework):$/;"	c
MempoolPackagesTest	test/functional/mempool_packages.py	/^class MempoolPackagesTest(BitcoinTestFramework):$/;"	c
MempoolPersistTest	test/functional/mempool_persist.py	/^class MempoolPersistTest(BitcoinTestFramework):$/;"	c
MempoolSpendCoinbaseTest	test/functional/mempool_spend_coinbase.py	/^class MempoolSpendCoinbaseTest(BitcoinTestFramework):$/;"	c
MempoolToJSON	src/rpc/blockchain.cpp	/^UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)$/;"	f
Merge	src/leveldb/db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon19::Stats
Merge	src/leveldb/util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
Merge	src/psbt.cpp	/^bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)$/;"	f	class:PartiallySignedTransaction
Merge	src/psbt.cpp	/^void PSBTInput::Merge(const PSBTInput& input)$/;"	f	class:PSBTInput
Merge	src/psbt.cpp	/^void PSBTOutput::Merge(const PSBTOutput& output)$/;"	f	class:PSBTOutput
Merge	src/script/sign.cpp	/^FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)$/;"	f
MergeSignatureData	src/script/sign.cpp	/^void SignatureData::MergeSignatureData(SignatureData sigdata)$/;"	f	class:SignatureData
MergingIterator	src/leveldb/table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon11::MergingIterator
MergingIterator	src/leveldb/table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon11	file:
MerkleBlockTest	test/functional/rpc_txoutproof.py	/^class MerkleBlockTest(BitcoinTestFramework):$/;"	c
MerkleComputation	src/test/merkle_tests.cpp	/^static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {$/;"	f	file:
MerkleRoot	src/bench/merkle_root.cpp	/^static void MerkleRoot(benchmark::State& state)$/;"	f	file:
Message	src/qt/recentrequeststablemodel.h	/^        Message = 2,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
MessageBoxFlags	src/ui_interface.h	/^    enum MessageBoxFlags$/;"	g	class:CClientUIInterface
MessageClass	src/qt/rpcconsole.h	/^    enum MessageClass {$/;"	g	class:RPCConsole
MessageStart	src/chainparams.h	/^    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }$/;"	f	class:CChainParams
MessageStartChars	src/protocol.h	/^    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];$/;"	t	class:CMessageHeader
MicroSleep	src/test/scheduler_tests.cpp	/^static void MicroSleep(uint64_t n)$/;"	f	file:
MigrateData	src/index/txindex.cpp	/^bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator)$/;"	f	class:TxIndex::DB
MilliSleep	src/util/time.cpp	/^void MilliSleep(int64_t n)$/;"	f
MillisToTimeval	src/netbase.cpp	/^struct timeval MillisToTimeval(int64_t nTimeout)$/;"	f
Mine	src/test/versionbits_tests.cpp	/^    VersionBitsTester& Mine(unsigned int height, int32_t nTime, int32_t nVersion) {$/;"	f	class:VersionBitsTester
MineBlock	src/test/util.cpp	/^CTxIn MineBlock(const CScript& coinbase_scriptPubKey)$/;"	f
MineBlocksOnDemand	src/chainparams.h	/^    bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }$/;"	f	class:CChainParams
MinimizeOnClose	src/qt/optionsmodel.h	/^        MinimizeOnClose,        \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MinimizeToTray	src/qt/optionsmodel.h	/^        MinimizeToTray,         \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MinimumChainWorkTest	test/functional/feature_minchainwork.py	/^class MinimumChainWorkTest(BitcoinTestFramework):$/;"	c
MiningTest	test/functional/mining_basic.py	/^class MiningTest(BitcoinTestFramework):$/;"	c
MixColumns	src/crypto/ctaes/ctaes.c	/^static void MixColumns(AES_state* s, int inv) {$/;"	f	file:
ModalOverlay	src/qt/modaloverlay.cpp	/^ModalOverlay::ModalOverlay(QWidget *parent) :$/;"	f	class:ModalOverlay
ModalOverlay	src/qt/modaloverlay.h	/^class ModalOverlay : public QWidget$/;"	c
Mode	src/qt/addressbookpage.h	/^    enum Mode {$/;"	g	class:AddressBookPage
Mode	src/qt/askpassphrasedialog.h	/^    enum Mode {$/;"	g	class:AskPassphraseDialog
Mode	src/qt/editaddressdialog.h	/^    enum Mode {$/;"	g	class:EditAddressDialog
Mode	src/qt/notificator.h	/^    enum Mode {$/;"	g	class:Notificator
ModelDB	src/leveldb/db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	src/leveldb/db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb	file:
ModelIter	src/leveldb/db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	src/leveldb/db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB	file:
ModelSnapshot	src/leveldb/db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB	file:
ModifyPath	src/leveldb/util/env_win.cc	/^std::string& ModifyPath(std::string& path)$/;"	f	namespace:leveldb::Win32
ModifyPath	src/leveldb/util/env_win.cc	/^std::wstring& ModifyPath(std::wstring& path)$/;"	f	namespace:leveldb::Win32
MoneyRange	src/amount.h	/^inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
MoveTo	src/sync.h	/^    void MoveTo(CSemaphoreGrant& grant)$/;"	f	class:CSemaphoreGrant
MultX	src/crypto/ctaes/ctaes.c	/^static void MultX(AES_state* s) {$/;"	f	file:
MultiWalletTest	test/functional/wallet_multiwallet.py	/^class MultiWalletTest(BitcoinTestFramework):$/;"	c
Multisig	test/functional/test_framework/wallet_util.py	/^Multisig = namedtuple('Multisig', ['privkeys',$/;"	v
MultisigDescriptor	src/script/descriptor.cpp	/^    MultisigDescriptor(int threshold, std::vector<std::unique_ptr<PubkeyProvider>> providers) : DescriptorImpl(std::move(providers), {}, "multi"), m_threshold(threshold) {}$/;"	f	class:__anon75::final
MultisigKeys	src/test/gen/crypto_gen.cpp	/^rc::Gen<std::vector<CKey>> MultisigKeys()$/;"	f
MurmurHash3	src/hash.cpp	/^unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)$/;"	f
MutableTransactionSignatureCreator	src/script/sign.cpp	/^MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}$/;"	f	class:MutableTransactionSignatureCreator
MutableTransactionSignatureCreator	src/script/sign.h	/^class MutableTransactionSignatureCreator : public BaseSignatureCreator {$/;"	c
MutateTx	src/bitcoin-tx.cpp	/^static void MutateTx(CMutableTransaction& tx, const std::string& command,$/;"	f	file:
MutateTxAddInput	src/bitcoin-tx.cpp	/^static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutAddr	src/bitcoin-tx.cpp	/^static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutData	src/bitcoin-tx.cpp	/^static void MutateTxAddOutData(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutMultiSig	src/bitcoin-tx.cpp	/^static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutPubKey	src/bitcoin-tx.cpp	/^static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutScript	src/bitcoin-tx.cpp	/^static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxDelInput	src/bitcoin-tx.cpp	/^static void MutateTxDelInput(CMutableTransaction& tx, const std::string& strInIdx)$/;"	f	file:
MutateTxDelOutput	src/bitcoin-tx.cpp	/^static void MutateTxDelOutput(CMutableTransaction& tx, const std::string& strOutIdx)$/;"	f	file:
MutateTxLocktime	src/bitcoin-tx.cpp	/^static void MutateTxLocktime(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
MutateTxRBFOptIn	src/bitcoin-tx.cpp	/^static void MutateTxRBFOptIn(CMutableTransaction& tx, const std::string& strInIdx)$/;"	f	file:
MutateTxSign	src/bitcoin-tx.cpp	/^static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)$/;"	f	file:
MutateTxVersion	src/bitcoin-tx.cpp	/^static void MutateTxVersion(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
Mutex	src/leveldb/port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	src/leveldb/port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	src/leveldb/port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	src/leveldb/port/port_win.cc	/^Mutex::Mutex() :$/;"	f	class:leveldb::port::Mutex
Mutex	src/leveldb/port/port_win.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	src/sync.h	/^typedef AnnotatedMixin<std::mutex> Mutex;$/;"	t
MutexLock	src/leveldb/util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
NAMED_ARG	src/rpc/util.cpp	/^        NAMED_ARG, \/\/ Only set on first recursion$/;"	m	class:Sections::OuterType	file:
NCONST_PTR	src/serialize.h	/^inline T* NCONST_PTR(const T* val)$/;"	f
NEGATE	src/test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
NEGATE_REG	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
NEGATE_TEST	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
NETUNREACHABLE	src/netbase.cpp	/^    NETUNREACHABLE = 0x03,   \/\/!< Network unreachable$/;"	e	enum:uint8_t	file:
NET_INTERNAL	src/netaddress.h	/^    NET_INTERNAL,$/;"	e	enum:Network
NET_IPV4	src/netaddress.h	/^    NET_IPV4,$/;"	e	enum:Network
NET_IPV6	src/netaddress.h	/^    NET_IPV6,$/;"	e	enum:Network
NET_MAX	src/netaddress.h	/^    NET_MAX,$/;"	e	enum:Network
NET_MESSAGE_COMMAND_OTHER	src/net.cpp	/^const std::string NET_MESSAGE_COMMAND_OTHER = "*other*";$/;"	v
NET_ONION	src/netaddress.h	/^    NET_ONION,$/;"	e	enum:Network
NET_TEREDO	src/netaddress.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_UNKNOWN	src/netaddress.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	src/netaddress.h	/^    NET_UNROUTABLE = 0,$/;"	e	enum:Network
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	doc/man/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	src/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	src/secp256k1/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	src/univalue/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = nmedit$/;"	m
NMEDIT	doc/man/Makefile	/^NMEDIT = nmedit$/;"	m
NMEDIT	src/Makefile	/^NMEDIT = nmedit$/;"	m
NMEDIT	src/secp256k1/Makefile	/^NMEDIT = nmedit$/;"	m
NMEDIT	src/univalue/Makefile	/^NMEDIT = nmedit$/;"	m
NO	src/rpc/util.h	/^        NO,$/;"	m	class:RPCArg::Optional
NO	src/script/descriptor.cpp	/^    NO,$/;"	m	class:__anon75::DeriveType	file:
NO	src/script/ismine.cpp	/^    NO = 0,         \/\/!< Not ours$/;"	m	class:__anon85::IsMineResult	file:
NOAUTH	src/netbase.cpp	/^    NOAUTH = 0x00,        \/\/!< No authentication required$/;"	e	enum:uint8_t	file:
NODE_0	test/functional/feature_segwit.py	/^NODE_0 = 0$/;"	v
NODE_2	test/functional/feature_segwit.py	/^NODE_2 = 2$/;"	v
NODE_BLOOM	src/protocol.h	/^    NODE_BLOOM = (1 << 2),$/;"	e	enum:uint64_t
NODE_BLOOM	test/functional/p2p_node_network_limited.py	/^from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS$/;"	i
NODE_BLOOM	test/functional/test_framework/messages.py	/^NODE_BLOOM = (1 << 2)$/;"	v
NODE_GETUTXO	src/protocol.h	/^    NODE_GETUTXO = (1 << 1),$/;"	e	enum:uint64_t
NODE_NETWORK	src/protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:uint64_t
NODE_NETWORK	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
NODE_NETWORK	test/functional/rpc_net.py	/^from test_framework.messages import CAddress, msg_addr, NODE_NETWORK, NODE_WITNESS$/;"	i
NODE_NETWORK	test/functional/test_framework/messages.py	/^NODE_NETWORK = (1 << 0)$/;"	v
NODE_NETWORK_LIMITED	src/protocol.h	/^    NODE_NETWORK_LIMITED = (1 << 10),$/;"	e	enum:uint64_t
NODE_NETWORK_LIMITED	test/functional/p2p_node_network_limited.py	/^from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS$/;"	i
NODE_NETWORK_LIMITED	test/functional/test_framework/messages.py	/^NODE_NETWORK_LIMITED = (1 << 10)$/;"	v
NODE_NETWORK_LIMITED_MIN_BLOCKS	src/validation.h	/^static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;$/;"	v
NODE_NONE	src/protocol.h	/^    NODE_NONE = 0,$/;"	e	enum:uint64_t
NODE_RELAY	src/util/system.h	/^    NODE_RELAY,$/;"	m	class:OptionsCategory
NODE_WITNESS	src/protocol.h	/^    NODE_WITNESS = (1 << 3),$/;"	e	enum:uint64_t
NODE_WITNESS	test/functional/p2p_node_network_limited.py	/^from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS$/;"	i
NODE_WITNESS	test/functional/rpc_net.py	/^from test_framework.messages import CAddress, msg_addr, NODE_NETWORK, NODE_WITNESS$/;"	i
NODE_WITNESS	test/functional/test_framework/messages.py	/^NODE_WITNESS = (1 << 3)$/;"	v
NODE_XTHIN	src/protocol.h	/^    NODE_XTHIN = (1 << 4),$/;"	e	enum:uint64_t
NODISCARD	src/attributes.h	/^#    define NODISCARD /;"	d
NOMINMAX	src/compat.h	/^#define NOMINMAX$/;"	d
NOMINMAX	src/fs.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	src/qt/guiutil.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	src/support/lockedpool.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	src/util/system.cpp	/^#define NOMINMAX$/;"	d	file:
NONCRITICAL_ERROR	src/wallet/walletdb.h	/^    NONCRITICAL_ERROR,$/;"	m	class:DBErrors
NONE	src/consensus/validation.h	/^    NONE,                    \/\/!< not actually invalid$/;"	m	class:ValidationInvalidReason
NONE	src/policy/fees.h	/^    NONE,$/;"	m	class:FeeEstimateHorizon::FeeReason
NONE	src/qt/clientmodel.h	/^    NONE,$/;"	m	class:BlockSource
NONE	src/test/script_tests.cpp	/^    NONE,$/;"	m	class:__anon58::WitnessMode	file:
NONE	src/test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
NONE	src/test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
NONE	src/validation.cpp	/^    NONE,$/;"	m	class:FlushStateMode	file:
NONFATAL	contrib/devtools/security-check.py	/^NONFATAL = {} # checks which are non-fatal for now but only generate a warning$/;"	v
NON_SCRIPTS	test/functional/test_runner.py	/^NON_SCRIPTS = [$/;"	v
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	doc/man/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	src/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	src/secp256k1/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	src/univalue/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	doc/man/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	src/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	src/secp256k1/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	src/univalue/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTALLOWED	src/netbase.cpp	/^    NOTALLOWED = 0x02,       \/\/!< Connection not allowed by ruleset$/;"	e	enum:uint8_t	file:
NOTFOUND	src/protocol.cpp	/^const char *NOTFOUND="notfound";$/;"	m	namespace:NetMsgType	file:
NOT_FINAL_ERROR	test/functional/feature_bip68_sequence.py	/^NOT_FINAL_ERROR = "non-BIP68-final (code 64)"$/;"	v
NOWARN_CXXFLAGS	Makefile	/^NOWARN_CXXFLAGS =  -Wno-unused-parameter -Wno-self-assign -Wno-unused-local-typedef -Wno-deprecated-register -Wno-implicit-fallthrough$/;"	m
NOWARN_CXXFLAGS	doc/man/Makefile	/^NOWARN_CXXFLAGS =  -Wno-unused-parameter -Wno-self-assign -Wno-unused-local-typedef -Wno-deprecated-register -Wno-implicit-fallthrough$/;"	m
NOWARN_CXXFLAGS	src/Makefile	/^NOWARN_CXXFLAGS =  -Wno-unused-parameter -Wno-self-assign -Wno-unused-local-typedef -Wno-deprecated-register -Wno-implicit-fallthrough$/;"	m
NO_ACCEPTABLE	src/netbase.cpp	/^    NO_ACCEPTABLE = 0xff, \/\/!< No acceptable methods$/;"	e	enum:uint8_t	file:
NO_BLOOM_VERSION	src/version.h	/^static const int NO_BLOOM_VERSION = 70011;$/;"	v
NO_CHANGES	src/qt/addresstablemodel.h	/^        NO_CHANGES,             \/**< No changes were made during edit operation *\/$/;"	e	enum:AddressTableModel::EditStatus
NO_ENTRY	src/test/coins_tests.cpp	/^const static char NO_ENTRY = -1;$/;"	v	file:
NO_QT	depends/Makefile	/^NO_QT ?=$/;"	m
NO_THREAD_SAFETY_ANALYSIS	src/leveldb/port/thread_annotations.h	/^#define NO_THREAD_SAFETY_ANALYSIS$/;"	d
NO_THREAD_SAFETY_ANALYSIS	src/net.h	/^    void Stop() NO_THREAD_SAFETY_ANALYSIS;$/;"	m	class:CConnman
NO_THREAD_SAFETY_ANALYSIS	src/threadsafety.h	/^#define NO_THREAD_SAFETY_ANALYSIS /;"	d
NO_THREAD_SAFETY_ANALYSIS	src/threadsafety.h	/^#define NO_THREAD_SAFETY_ANALYSIS$/;"	d
NO_THREAD_SAFETY_ANALYSIS	src/wallet/wallet.h	/^    CAmount GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;$/;"	m	class:CWalletTx
NO_THREAD_SAFETY_ANALYSIS	src/wallet/wallet.h	/^    std::set<uint256> GetConflicts() const NO_THREAD_SAFETY_ANALYSIS;$/;"	m	class:CWalletTx
NO_TIMEOUT	src/consensus/params.h	/^    static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();$/;"	m	struct:Consensus::BIP9Deployment
NO_UPNP	depends/Makefile	/^NO_UPNP ?=$/;"	m
NO_WALLET	depends/Makefile	/^NO_WALLET ?=$/;"	m
NROFF	doc/man/Makefile	/^NROFF = nroff$/;"	m
NSEEDS	contrib/seeds/makeseeds.py	/^NSEEDS=512$/;"	v
NULLDUMMYTest	test/functional/feature_nulldummy.py	/^class NULLDUMMYTest(BitcoinTestFramework):$/;"	c
NULLDUMMY_ERROR	test/functional/feature_nulldummy.py	/^NULLDUMMY_ERROR = "non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)"$/;"	v
NULL_INDEX	src/primitives/transaction.h	/^    static constexpr uint32_t NULL_INDEX = std::numeric_limits<uint32_t>::max();$/;"	m	class:COutPoint
NUM	src/rpc/util.h	/^        NUM,$/;"	m	class:RPCArg::Type
NUMBER_OF_COLUMNS	src/qt/recentrequeststablemodel.h	/^        NUMBER_OF_COLUMNS$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
NUM_GETBLOCKSTATS_PERCENTILES	src/rpc/blockchain.h	/^static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;$/;"	v
NUM_ITEMS	src/qt/overviewpage.cpp	/^#define NUM_ITEMS /;"	d	file:
NUM_LIMBS	src/secp256k1/src/num_gmp.h	/^#define NUM_LIMBS /;"	d
NUM_MULTIPLES_1BTC	src/test/compress_tests.cpp	/^#define NUM_MULTIPLES_1BTC /;"	d	file:
NUM_MULTIPLES_50BTC	src/test/compress_tests.cpp	/^#define NUM_MULTIPLES_50BTC /;"	d	file:
NUM_MULTIPLES_CENT	src/test/compress_tests.cpp	/^#define NUM_MULTIPLES_CENT /;"	d	file:
NUM_MULTIPLES_UNIT	src/test/compress_tests.cpp	/^#define NUM_MULTIPLES_UNIT /;"	d	file:
NUM_OS_RANDOM_BYTES	src/random.h	/^static const int NUM_OS_RANDOM_BYTES = 32;$/;"	v
NUM_SIMULATION_ITERATIONS	src/test/coins_tests.cpp	/^static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;$/;"	v	file:
N_SIGHASH_OPTS	src/bitcoin-tx.cpp	/^static const unsigned int N_SIGHASH_OPTS = 6;$/;"	v	file:
Name	src/leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	src/leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	src/leveldb/db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	src/leveldb/db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	src/leveldb/table/filter_block_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::TestHashFilter
Name	src/leveldb/table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon15::ReverseKeyComparator
Name	src/leveldb/util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
Name	src/leveldb/util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
Name	src/qt/rpcconsole.cpp	/^    const char *Name() { return "Qt"; }$/;"	f	class:QtRPCTimerInterface
NamedArgumentTest	test/functional/rpc_named_arguments.py	/^class NamedArgumentTest(BitcoinTestFramework):$/;"	c
NativeSecp256k1	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^public class NativeSecp256k1 {$/;"	c
NativeSecp256k1Test	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^public class NativeSecp256k1Test {$/;"	c
NativeSecp256k1Util	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^public class NativeSecp256k1Util{$/;"	c
NeedsCompaction	src/leveldb/db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
Negate	src/key.cpp	/^bool CKey::Negate()$/;"	f	class:CKey
NegateSignatureS	src/test/script_tests.cpp	/^void static NegateSignatureS(std::vector<unsigned char>& vchSig) {$/;"	f	file:
NetEventsInterface	src/net.h	/^class NetEventsInterface$/;"	c
NetMsgType	src/protocol.cpp	/^namespace NetMsgType {$/;"	n	file:
NetMsgType	src/protocol.h	/^namespace NetMsgType {$/;"	n
NetNodeId	src/qt/peertablemodel.h	/^        NetNodeId = 0,$/;"	e	enum:PeerTableModel::ColumnIndex
NetTest	test/functional/rpc_net.py	/^class NetTest(BitcoinTestFramework):$/;"	c
NetmaskBits	src/netaddress.cpp	/^static inline int NetmaskBits(uint8_t x)$/;"	f	file:
Network	src/netaddress.h	/^enum Network$/;"	g
NetworkArg	src/util/system.cpp	/^    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)$/;"	f	class:ArgsManagerHelper
NetworkError	src/netbase.cpp	/^    NetworkError,$/;"	m	class:IntrRecvError	file:
NetworkErrorString	src/netbase.cpp	/^std::string NetworkErrorString(int err)$/;"	f
NetworkIDString	src/chainparams.h	/^    std::string NetworkIDString() const { return strNetworkID; }$/;"	f	class:CChainParams
NetworkStyle	src/qt/networkstyle.cpp	/^NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *_titleAddText):$/;"	f	class:NetworkStyle
NetworkStyle	src/qt/networkstyle.h	/^class NetworkStyle$/;"	c
NetworkThread	test/functional/p2p_invalid_messages.py	/^from test_framework.mininode import P2PDataStore, NetworkThread$/;"	i
NetworkThread	test/functional/test_framework/mininode.py	/^class NetworkThread(threading.Thread):$/;"	c
NetworkThread	test/functional/test_framework/test_framework.py	/^from .mininode import NetworkThread$/;"	i
Neuter	src/key.cpp	/^CExtPubKey CExtKey::Neuter() const {$/;"	f	class:CExtKey
New	src/leveldb/db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewAppendableFile	src/leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewAppendableFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewAppendableFile	src/leveldb/include/leveldb/env.h	/^  Status NewAppendableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewAppendableFile	src/leveldb/util/env.cc	/^Status Env::NewAppendableFile(const std::string& fname, WritableFile** result) {$/;"	f	class:leveldb::Env
NewAppendableFile	src/leveldb/util/env_posix.cc	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewAppendableFile	src/leveldb/util/env_win.cc	/^Status Win32Env::NewAppendableFile( const std::string& fname, WritableFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewAppendableFile	src/leveldb/util/testutil.h	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewBloomFilterPolicy	src/leveldb/util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	src/leveldb/db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	src/leveldb/db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	src/leveldb/table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	src/leveldb/db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	src/leveldb/table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	src/leveldb/table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	src/leveldb/db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	src/leveldb/util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
NewInternalIterator	src/leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	src/dbwrapper.h	/^    CDBIterator *NewIterator()$/;"	f	class:CDBWrapper
NewIterator	src/leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	src/leveldb/db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	src/leveldb/db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	src/leveldb/db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	src/leveldb/table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	src/leveldb/table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	src/leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	src/leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	src/leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	src/leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewKeyPool	src/wallet/wallet.cpp	/^bool CWallet::NewKeyPool()$/;"	f	class:CWallet
NewLRUCache	src/leveldb/util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewLogger	src/leveldb/include/leveldb/env.h	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::EnvWrapper
NewLogger	src/leveldb/util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon8::PosixEnv
NewLogger	src/leveldb/util/env_win.cc	/^Status Win32Env::NewLogger( const std::string& fname, Logger** result )$/;"	f	class:leveldb::Win32::Win32Env
NewMemEnv	src/leveldb/helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	src/leveldb/table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	src/leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewPoWValidBlock	src/net_processing.cpp	/^void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {$/;"	f	class:PeerLogicValidation
NewPoWValidBlock	src/validationinterface.cpp	/^    boost::signals2::scoped_connection NewPoWValidBlock;$/;"	m	struct:ValidationInterfaceConnections	file:
NewPoWValidBlock	src/validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;$/;"	m	struct:MainSignalsInstance	file:
NewPoWValidBlock	src/validationinterface.cpp	/^void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {$/;"	f	class:CMainSignals
NewPoWValidBlock	src/validationinterface.h	/^    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};$/;"	f	class:CValidationInterface
NewRandomAccessFile	src/leveldb/db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewRandomAccessFile	src/leveldb/include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	src/leveldb/util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewRandomAccessFile	src/leveldb/util/env_win.cc	/^Status Win32Env::NewRandomAccessFile( const std::string& fname, RandomAccessFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewSendingAddress	src/qt/editaddressdialog.h	/^        NewSendingAddress,$/;"	e	enum:EditAddressDialog::Mode
NewSequentialFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewSequentialFile	src/leveldb/include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	src/leveldb/util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewSequentialFile	src/leveldb/util/env_win.cc	/^Status Win32Env::NewSequentialFile( const std::string& fname, SequentialFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewTableIterator	src/leveldb/db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon30::Repairer	file:
NewTimer	src/qt/rpcconsole.cpp	/^    RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis)$/;"	f	class:QtRPCTimerInterface
NewTwoLevelIterator	src/leveldb/table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewTx	src/policy/fees.cpp	/^unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)$/;"	f	class:TxConfirmStats
NewWritableFile	src/leveldb/db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	src/leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewWritableFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewWritableFile	src/leveldb/include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	src/leveldb/util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewWritableFile	src/leveldb/util/env_win.cc	/^Status Win32Env::NewWritableFile( const std::string& fname, WritableFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewWritableFile	src/leveldb/util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	src/leveldb/db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	src/chain.h	/^    CBlockIndex *Next(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Next	src/dbwrapper.cpp	/^void CDBIterator::Next() { piter->Next(); }$/;"	f	class:CDBIterator
Next	src/leveldb/db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon29::DBIter
Next	src/leveldb/db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	src/leveldb/db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	src/leveldb/db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	src/leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	src/leveldb/db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	src/leveldb/table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	src/leveldb/table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon12::EmptyIterator
Next	src/leveldb/table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	src/leveldb/table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon11::MergingIterator
Next	src/leveldb/table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
Next	src/leveldb/util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
Next	src/txdb.cpp	/^void CCoinsViewDBCursor::Next()$/;"	f	class:CCoinsViewDBCursor
NextEntryOffset	src/leveldb/table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NextLength	src/leveldb/util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Load	src/leveldb/port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Load	src/leveldb/port/port_win.cc	/^void* AtomicPointer::NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	src/leveldb/db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	src/leveldb/db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	src/leveldb/port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Store	src/leveldb/port/port_win.cc	/^void AtomicPointer::NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoOpLogger	src/leveldb/helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon35	file:
NoWriteTestPreFault	src/leveldb/db/fault_injection_test.cc	/^  void NoWriteTestPreFault() {$/;"	f	class:leveldb::FaultInjectionTest
NoWriteTestReopenWithFault	src/leveldb/db/fault_injection_test.cc	/^  void NoWriteTestReopenWithFault(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
Node	src/interfaces/node.h	/^class Node$/;"	c	namespace:interfaces
Node	src/leveldb/db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	src/leveldb/db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NodeEvictionCandidate	src/net.cpp	/^struct NodeEvictionCandidate$/;"	s	file:
NodeFullyConnected	src/net.cpp	/^bool CConnman::NodeFullyConnected(const CNode* pnode)$/;"	f	class:CConnman
NodeId	src/net.h	/^typedef int64_t NodeId;$/;"	t
NodeImpl	src/interfaces/node.cpp	/^    NodeImpl() { m_interfaces.chain = MakeChain(); }$/;"	f	class:interfaces::__anon128::NodeImpl
NodeImpl	src/interfaces/node.cpp	/^class NodeImpl : public Node$/;"	c	namespace:interfaces::__anon128	file:
NodeLessThan	src/qt/peertablemodel.h	/^    NodeLessThan(int nColumn, Qt::SortOrder fOrder) :$/;"	f	class:NodeLessThan
NodeLessThan	src/qt/peertablemodel.h	/^class NodeLessThan$/;"	c
NodeNetworkLimitedTest	test/functional/p2p_node_network_limited.py	/^class NodeNetworkLimitedTest(BitcoinTestFramework):$/;"	c
None	src/qt/notificator.h	/^        None,                       \/**< Ignore informational notifications, and show a modal pop-up dialog for Critical notifications. *\/$/;"	e	enum:Notificator::Mode
NonexistentInput	test/functional/data/invalid_txs.py	/^class NonexistentInput(BadTxTemplate):$/;"	c
NotAccepted	src/qt/transactionrecord.h	/^        NotAccepted         \/**< Mined but not accepted *\/$/;"	e	enum:TransactionStatus::Status
NotFound	src/leveldb/include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	src/leveldb/include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Note	src/secp256k1/src/asm/field_10x26_arm.s	/^	Note: do not read from a[] after here, it may overlap with r[]$/;"	d
Note	src/secp256k1/src/asm/field_10x26_arm.s	/^	Note: do not write to r[] here, it may overlap with a[]$/;"	d
Notifications	src/interfaces/chain.h	/^    class Notifications$/;"	c	class:interfaces::Chain
NotificationsHandlerImpl	src/interfaces/chain.cpp	/^    explicit NotificationsHandlerImpl(Chain& chain, Chain::Notifications& notifications)$/;"	f	class:interfaces::__anon129::NotificationsHandlerImpl
NotificationsHandlerImpl	src/interfaces/chain.cpp	/^class NotificationsHandlerImpl : public Handler, CValidationInterface$/;"	c	namespace:interfaces::__anon129	file:
NotificationsTest	test/functional/feature_notifications.py	/^class NotificationsTest(BitcoinTestFramework):$/;"	c
Notificator	src/qt/notificator.cpp	/^Notificator::Notificator(const QString &_programName, QSystemTrayIcon *_trayIcon, QWidget *_parent) :$/;"	f	class:Notificator
Notificator	src/qt/notificator.h	/^class Notificator: public QObject$/;"	c
NotifyAddressBookChanged	src/qt/walletmodel.cpp	/^static void NotifyAddressBookChanged(WalletModel *walletmodel,$/;"	f	file:
NotifyAddressBookChanged	src/wallet/wallet.h	/^            ChangeType status)> NotifyAddressBookChanged;$/;"	m	class:final
NotifyAlertChanged	src/qt/clientmodel.cpp	/^static void NotifyAlertChanged(ClientModel *clientmodel)$/;"	f	file:
NotifyAlertChanged	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;$/;"	m	struct:UISignals	file:
NotifyAlertChanged	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);$/;"	v
NotifyAlertChanged	src/ui_interface.cpp	/^void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }$/;"	f	class:CClientUIInterface
NotifyBlock	src/zmq/zmqabstractnotifier.cpp	/^bool CZMQAbstractNotifier::NotifyBlock(const CBlockIndex * \/*CBlockIndex*\/)$/;"	f	class:CZMQAbstractNotifier
NotifyBlock	src/zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)$/;"	f	class:CZMQPublishHashBlockNotifier
NotifyBlock	src/zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)$/;"	f	class:CZMQPublishRawBlockNotifier
NotifyBlockTip	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyBlockTipSig> NotifyBlockTip;$/;"	m	struct:UISignals	file:
NotifyBlockTip	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyBlockTip);$/;"	v
NotifyBlockTip	src/ui_interface.cpp	/^void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyBlockTip(b, i); }$/;"	f	class:CClientUIInterface
NotifyCanGetAddressesChanged	src/qt/walletmodel.cpp	/^static void NotifyCanGetAddressesChanged(WalletModel* walletmodel)$/;"	f	file:
NotifyCanGetAddressesChanged	src/wallet/wallet.h	/^    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;$/;"	m	class:final
NotifyEntryAdded	src/txmempool.h	/^    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	src/txmempool.h	/^    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	src/validation.cpp	/^    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {$/;"	f	class:ConnectTrace
NotifyHeaderTip	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyHeaderTipSig> NotifyHeaderTip;$/;"	m	struct:UISignals	file:
NotifyHeaderTip	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyHeaderTip);$/;"	v
NotifyHeaderTip	src/ui_interface.cpp	/^void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }$/;"	f	class:CClientUIInterface
NotifyKeyStoreStatusChanged	src/qt/walletmodel.cpp	/^static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel)$/;"	f	file:
NotifyNetworkActiveChanged	src/qt/clientmodel.cpp	/^static void NotifyNetworkActiveChanged(ClientModel *clientmodel, bool networkActive)$/;"	f	file:
NotifyNetworkActiveChanged	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;$/;"	m	struct:UISignals	file:
NotifyNetworkActiveChanged	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);$/;"	v
NotifyNetworkActiveChanged	src/ui_interface.cpp	/^void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }$/;"	f	class:CClientUIInterface
NotifyNumConnectionsChanged	src/net.cpp	/^void CConnman::NotifyNumConnectionsChanged()$/;"	f	class:CConnman
NotifyNumConnectionsChanged	src/qt/clientmodel.cpp	/^static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)$/;"	f	file:
NotifyNumConnectionsChanged	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;$/;"	m	struct:UISignals	file:
NotifyNumConnectionsChanged	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);$/;"	v
NotifyNumConnectionsChanged	src/ui_interface.cpp	/^void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }$/;"	f	class:CClientUIInterface
NotifyStatusChanged	src/wallet/crypter.h	/^    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;$/;"	m	class:CCryptoKeyStore
NotifyTransaction	src/zmq/zmqabstractnotifier.cpp	/^bool CZMQAbstractNotifier::NotifyTransaction(const CTransaction &\/*transaction*\/)$/;"	f	class:CZMQAbstractNotifier
NotifyTransaction	src/zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)$/;"	f	class:CZMQPublishHashTransactionNotifier
NotifyTransaction	src/zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)$/;"	f	class:CZMQPublishRawTransactionNotifier
NotifyTransactionChanged	src/qt/transactiontablemodel.cpp	/^static void NotifyTransactionChanged(TransactionTableModel *ttm, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyTransactionChanged	src/qt/walletmodel.cpp	/^static void NotifyTransactionChanged(WalletModel *walletmodel, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyTransactionChanged	src/wallet/wallet.h	/^            ChangeType status)> NotifyTransactionChanged;$/;"	m	class:final
NotifyUnload	src/qt/walletmodel.cpp	/^static void NotifyUnload(WalletModel* walletModel)$/;"	f	file:
NotifyUnload	src/wallet/wallet.h	/^    boost::signals2::signal<void ()> NotifyUnload;$/;"	m	class:final
NotifyWatchonlyChanged	src/qt/walletmodel.cpp	/^static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly)$/;"	f	file:
NotifyWatchonlyChanged	src/wallet/wallet.h	/^    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;$/;"	m	class:final
NowMicros	src/leveldb/include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	src/leveldb/util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon8::PosixEnv
NowMicros	src/leveldb/util/env_win.cc	/^uint64_t Win32Env::NowMicros()$/;"	f	class:leveldb::Win32::Win32Env
NullUniValue	src/univalue/lib/univalue.cpp	/^const UniValue NullUniValue;$/;"	v
Num	src/test/script_tests.cpp	/^    TestBuilder& Num(int num)$/;"	f	class:__anon58::TestBuilder
NumConnections	src/net.h	/^    enum NumConnections {$/;"	g	class:CConnman
NumConnections	src/qt/clientmodel.h	/^enum NumConnections {$/;"	g
NumEntries	src/leveldb/table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	src/leveldb/db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	src/leveldb/db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	src/leveldb/db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumLogs	src/leveldb/db/recovery_test.cc	/^  int NumLogs() {$/;"	f	class:leveldb::RecoveryTest
NumRestarts	src/leveldb/table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	src/leveldb/db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumTables	src/leveldb/db/recovery_test.cc	/^  int NumTables() {$/;"	f	class:leveldb::RecoveryTest
NumberString	src/leveldb/db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	src/leveldb/util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OBFUSCATE_KEY_KEY	src/dbwrapper.h	/^    static const std::string OBFUSCATE_KEY_KEY;$/;"	m	class:CDBWrapper
OBFUSCATE_KEY_NUM_BYTES	src/dbwrapper.cpp	/^const unsigned int CDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;$/;"	m	class:CDBWrapper	file:
OBFUSCATE_KEY_NUM_BYTES	src/dbwrapper.h	/^    static const unsigned int OBFUSCATE_KEY_NUM_BYTES;$/;"	m	class:CDBWrapper
OBJ	src/rpc/util.cpp	/^        OBJ,$/;"	m	class:Sections::OuterType	file:
OBJ	src/rpc/util.h	/^        OBJ,$/;"	m	class:RPCArg::Type
OBJ	test/functional/interface_rest.py	/^    OBJ = 1$/;"	v	class:RetType
OBJCOPY	Makefile	/^OBJCOPY = $/;"	m
OBJCOPY	doc/man/Makefile	/^OBJCOPY = $/;"	m
OBJCOPY	src/Makefile	/^OBJCOPY = $/;"	m
OBJCXX	Makefile	/^OBJCXX = g++ -std=c++11$/;"	m
OBJCXX	doc/man/Makefile	/^OBJCXX = g++ -std=c++11$/;"	m
OBJCXX	src/Makefile	/^OBJCXX = g++ -std=c++11$/;"	m
OBJCXXCOMPILE	src/Makefile	/^OBJCXXCOMPILE = $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
OBJCXXDEPMODE	Makefile	/^OBJCXXDEPMODE = depmode=gcc3$/;"	m
OBJCXXDEPMODE	doc/man/Makefile	/^OBJCXXDEPMODE = depmode=gcc3$/;"	m
OBJCXXDEPMODE	src/Makefile	/^OBJCXXDEPMODE = depmode=gcc3$/;"	m
OBJCXXFLAGS	Makefile	/^OBJCXXFLAGS = -g -O2$/;"	m
OBJCXXFLAGS	doc/man/Makefile	/^OBJCXXFLAGS = -g -O2$/;"	m
OBJCXXFLAGS	src/Makefile	/^OBJCXXFLAGS = -g -O2$/;"	m
OBJCXXLD	src/Makefile	/^OBJCXXLD = $(OBJCXX)$/;"	m
OBJCXXLINK	src/Makefile	/^OBJCXXLINK = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	doc/man/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	src/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	src/secp256k1/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	src/univalue/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP_CMD	contrib/devtools/security-check.py	/^OBJDUMP_CMD = os.getenv('OBJDUMP', '\/usr\/bin\/objdump')$/;"	v
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OBJEXT	doc/man/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	src/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	src/secp256k1/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	src/univalue/Makefile	/^OBJEXT = o$/;"	m
OBJ_USER_KEYS	src/rpc/util.h	/^        OBJ_USER_KEYS, \/\/!< Special type where the user must set the keys e.g. to define multiple addresses; as opposed to e.g. an options object where the keys are predefined$/;"	m	class:RPCArg::Type
OK	src/leveldb/include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OK	src/netbase.cpp	/^    OK,$/;"	m	class:IntrRecvError	file:
OK	src/qt/addresstablemodel.h	/^        OK,                     \/**< Everything ok *\/$/;"	e	enum:AddressTableModel::EditStatus
OK	src/qt/walletmodel.h	/^        OK,$/;"	e	enum:WalletModel::StatusCode
OK	src/util/error.h	/^    OK, \/\/!< No error$/;"	m	class:TransactionError
OK	src/wallet/feebumper.h	/^    OK,$/;"	m	class:feebumper::Result
OLDEST_ESTIMATE_HISTORY	src/policy/fees.h	/^    static const unsigned int OLDEST_ESTIMATE_HISTORY = 6 * 1008;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
OMITTED	src/rpc/util.h	/^        OMITTED,$/;"	m	class:RPCArg::Optional
OMITTED_NAMED_ARG	src/rpc/util.h	/^        OMITTED_NAMED_ARG,$/;"	m	class:RPCArg::Optional
OPCODE_NAMES	test/functional/test_framework/script.py	/^OPCODE_NAMES = {}$/;"	v
OPT	src/leveldb/Makefile	/^OPT ?= -O2 -DNDEBUG$/;"	m
OPTIONS	src/util/system.h	/^    OPTIONS,$/;"	m	class:OptionsCategory
OP_0	contrib/testgen/gen_key_io_test_vectors.py	/^OP_0 = 0x00$/;"	v
OP_0	src/script/script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_0	test/functional/rpc_signrawtransaction.py	/^from test_framework.script import CScript, OP_0$/;"	i
OP_0	test/functional/test_framework/address.py	/^from .script import hash256, hash160, sha256, CScript, OP_0$/;"	i
OP_0	test/functional/test_framework/script.py	/^OP_0 = CScriptOp(0x00)$/;"	v
OP_0NOTEQUAL	src/script/script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	test/functional/test_framework/script.py	/^OP_0NOTEQUAL = CScriptOp(0x92)$/;"	v
OP_1	contrib/testgen/gen_key_io_test_vectors.py	/^OP_1 = 0x51$/;"	v
OP_1	src/script/script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_1	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
OP_1	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_1	test/functional/test_framework/script.py	/^OP_1 = CScriptOp(0x51)$/;"	v
OP_10	src/script/script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_10	test/functional/test_framework/script.py	/^OP_10 = CScriptOp(0x5a)$/;"	v
OP_11	src/script/script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_11	test/functional/test_framework/script.py	/^OP_11 = CScriptOp(0x5b)$/;"	v
OP_12	src/script/script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_12	test/functional/test_framework/script.py	/^OP_12 = CScriptOp(0x5c)$/;"	v
OP_13	src/script/script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_13	test/functional/test_framework/script.py	/^OP_13 = CScriptOp(0x5d)$/;"	v
OP_14	src/script/script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_14	test/functional/test_framework/script.py	/^OP_14 = CScriptOp(0x5e)$/;"	v
OP_15	src/script/script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_15	test/functional/test_framework/script.py	/^OP_15 = CScriptOp(0x5f)$/;"	v
OP_16	contrib/testgen/gen_key_io_test_vectors.py	/^OP_16 = 0x60$/;"	v
OP_16	src/script/script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_16	test/functional/test_framework/script.py	/^OP_16 = CScriptOp(0x60)$/;"	v
OP_1ADD	src/script/script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1ADD	test/functional/test_framework/script.py	/^OP_1ADD = CScriptOp(0x8b)$/;"	v
OP_1NEGATE	src/script/script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1NEGATE	test/functional/feature_cltv.py	/^from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum$/;"	i
OP_1NEGATE	test/functional/test_framework/script.py	/^OP_1NEGATE = CScriptOp(0x4f)$/;"	v
OP_1SUB	src/script/script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_1SUB	test/functional/test_framework/script.py	/^OP_1SUB = CScriptOp(0x8c)$/;"	v
OP_2	contrib/testgen/gen_key_io_test_vectors.py	/^OP_2 = 0x52$/;"	v
OP_2	src/script/script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
OP_2	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_2	test/functional/test_framework/script.py	/^OP_2 = CScriptOp(0x52)$/;"	v
OP_2DIV	src/script/script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DIV	test/functional/test_framework/script.py	/^OP_2DIV = CScriptOp(0x8e)$/;"	v
OP_2DROP	src/script/script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DROP	test/functional/test_framework/script.py	/^OP_2DROP = CScriptOp(0x6d)$/;"	v
OP_2DUP	src/script/script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2DUP	test/functional/test_framework/script.py	/^OP_2DUP = CScriptOp(0x6e)$/;"	v
OP_2MUL	src/script/script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2MUL	test/functional/test_framework/script.py	/^OP_2MUL = CScriptOp(0x8d)$/;"	v
OP_2OVER	src/script/script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2OVER	test/functional/test_framework/script.py	/^OP_2OVER = CScriptOp(0x70)$/;"	v
OP_2ROT	src/script/script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2ROT	test/functional/test_framework/script.py	/^OP_2ROT = CScriptOp(0x71)$/;"	v
OP_2SWAP	src/script/script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_2SWAP	test/functional/test_framework/script.py	/^OP_2SWAP = CScriptOp(0x72)$/;"	v
OP_3	src/script/script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3	test/functional/test_framework/script.py	/^OP_3 = CScriptOp(0x53)$/;"	v
OP_3DUP	src/script/script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_3DUP	test/functional/test_framework/script.py	/^OP_3DUP = CScriptOp(0x6f)$/;"	v
OP_4	src/script/script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_4	test/functional/test_framework/script.py	/^OP_4 = CScriptOp(0x54)$/;"	v
OP_5	src/script/script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_5	test/functional/test_framework/script.py	/^OP_5 = CScriptOp(0x55)$/;"	v
OP_6	src/script/script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_6	test/functional/test_framework/script.py	/^OP_6 = CScriptOp(0x56)$/;"	v
OP_7	src/script/script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_7	test/functional/test_framework/script.py	/^OP_7 = CScriptOp(0x57)$/;"	v
OP_8	src/script/script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_8	test/functional/test_framework/script.py	/^OP_8 = CScriptOp(0x58)$/;"	v
OP_9	src/script/script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_9	test/functional/test_framework/script.py	/^OP_9 = CScriptOp(0x59)$/;"	v
OP_ABS	src/script/script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ABS	test/functional/test_framework/script.py	/^OP_ABS = CScriptOp(0x90)$/;"	v
OP_ADD	src/script/script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_ADD	test/functional/test_framework/script.py	/^OP_ADD = CScriptOp(0x93)$/;"	v
OP_AND	src/script/script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_AND	test/functional/test_framework/script.py	/^OP_AND = CScriptOp(0x84)$/;"	v
OP_BOOLAND	src/script/script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLAND	test/functional/test_framework/script.py	/^OP_BOOLAND = CScriptOp(0x9a)$/;"	v
OP_BOOLOR	src/script/script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_BOOLOR	test/functional/test_framework/script.py	/^OP_BOOLOR = CScriptOp(0x9b)$/;"	v
OP_CAT	src/script/script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CAT	test/functional/test_framework/script.py	/^OP_CAT = CScriptOp(0x7e)$/;"	v
OP_CHECKLOCKTIMEVERIFY	src/script/script.h	/^    OP_CHECKLOCKTIMEVERIFY = 0xb1,$/;"	e	enum:opcodetype
OP_CHECKLOCKTIMEVERIFY	test/functional/feature_cltv.py	/^from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum$/;"	i
OP_CHECKLOCKTIMEVERIFY	test/functional/test_framework/script.py	/^OP_CHECKLOCKTIMEVERIFY = CScriptOp(0xb1)$/;"	v
OP_CHECKMULTISIG	src/script/script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_CHECKMULTISIG	test/functional/test_framework/script.py	/^OP_CHECKMULTISIG = CScriptOp(0xae)$/;"	v
OP_CHECKMULTISIGVERIFY	src/script/script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	test/functional/test_framework/script.py	/^OP_CHECKMULTISIGVERIFY = CScriptOp(0xaf)$/;"	v
OP_CHECKSEQUENCEVERIFY	src/script/script.h	/^    OP_CHECKSEQUENCEVERIFY = 0xb2,$/;"	e	enum:opcodetype
OP_CHECKSEQUENCEVERIFY	test/functional/test_framework/script.py	/^OP_CHECKSEQUENCEVERIFY = CScriptOp(0xb2)$/;"	v
OP_CHECKSIG	contrib/testgen/gen_key_io_test_vectors.py	/^OP_CHECKSIG = 0xac$/;"	v
OP_CHECKSIG	src/script/script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIG	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_CHECKSIG	test/functional/test_framework/script.py	/^OP_CHECKSIG = CScriptOp(0xac)$/;"	v
OP_CHECKSIGVERIFY	src/script/script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	test/functional/test_framework/script.py	/^OP_CHECKSIGVERIFY = CScriptOp(0xad)$/;"	v
OP_CODESEPARATOR	src/script/script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	test/functional/test_framework/script.py	/^OP_CODESEPARATOR = CScriptOp(0xab)$/;"	v
OP_DEPTH	src/script/script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DEPTH	test/functional/test_framework/script.py	/^OP_DEPTH = CScriptOp(0x74)$/;"	v
OP_DIV	src/script/script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DIV	test/functional/test_framework/script.py	/^OP_DIV = CScriptOp(0x96)$/;"	v
OP_DROP	src/script/script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DROP	test/functional/feature_cltv.py	/^from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum$/;"	i
OP_DROP	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
OP_DROP	test/functional/feature_rbf.py	/^from test_framework.script import CScript, OP_DROP$/;"	i
OP_DROP	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_DROP	test/functional/p2p_compactblocks.py	/^from test_framework.script import CScript, OP_TRUE, OP_DROP$/;"	i
OP_DROP	test/functional/test_framework/script.py	/^OP_DROP = CScriptOp(0x75)$/;"	v
OP_DUP	contrib/testgen/gen_key_io_test_vectors.py	/^OP_DUP = 0x76$/;"	v
OP_DUP	src/script/script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_DUP	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_DUP	test/functional/test_framework/script.py	/^OP_DUP = CScriptOp(0x76)$/;"	v
OP_ELSE	src/script/script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ELSE	test/functional/test_framework/script.py	/^OP_ELSE = CScriptOp(0x67)$/;"	v
OP_ENDIF	src/script/script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_ENDIF	test/functional/test_framework/script.py	/^OP_ENDIF = CScriptOp(0x68)$/;"	v
OP_EQUAL	contrib/testgen/gen_key_io_test_vectors.py	/^OP_EQUAL = 0x87$/;"	v
OP_EQUAL	src/script/script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUAL	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
OP_EQUAL	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_EQUAL	test/functional/test_framework/script.py	/^OP_EQUAL = CScriptOp(0x87)$/;"	v
OP_EQUALVERIFY	contrib/testgen/gen_key_io_test_vectors.py	/^OP_EQUALVERIFY = 0x88$/;"	v
OP_EQUALVERIFY	src/script/script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_EQUALVERIFY	test/functional/test_framework/script.py	/^OP_EQUALVERIFY = CScriptOp(0x88)$/;"	v
OP_FALSE	src/script/script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FALSE	test/functional/test_framework/script.py	/^OP_FALSE = OP_0$/;"	v
OP_FROMALTSTACK	src/script/script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	test/functional/test_framework/script.py	/^OP_FROMALTSTACK = CScriptOp(0x6c)$/;"	v
OP_GREATERTHAN	src/script/script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHAN	test/functional/test_framework/script.py	/^OP_GREATERTHAN = CScriptOp(0xa0)$/;"	v
OP_GREATERTHANOREQUAL	src/script/script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	test/functional/test_framework/script.py	/^OP_GREATERTHANOREQUAL = CScriptOp(0xa2)$/;"	v
OP_HASH160	contrib/testgen/gen_key_io_test_vectors.py	/^OP_HASH160 = 0xa9$/;"	v
OP_HASH160	src/script/script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH160	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
OP_HASH160	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_HASH160	test/functional/test_framework/script.py	/^OP_HASH160 = CScriptOp(0xa9)$/;"	v
OP_HASH256	src/script/script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_HASH256	test/functional/test_framework/script.py	/^OP_HASH256 = CScriptOp(0xaa)$/;"	v
OP_IF	src/script/script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IF	test/functional/test_framework/script.py	/^OP_IF = CScriptOp(0x63)$/;"	v
OP_IFDUP	src/script/script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_IFDUP	test/functional/test_framework/script.py	/^OP_IFDUP = CScriptOp(0x73)$/;"	v
OP_INVALIDOPCODE	src/script/script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	test/functional/test_framework/script.py	/^OP_INVALIDOPCODE = CScriptOp(0xff)$/;"	v
OP_INVERT	src/script/script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_INVERT	test/functional/test_framework/script.py	/^OP_INVERT = CScriptOp(0x83)$/;"	v
OP_LEFT	src/script/script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LEFT	test/functional/test_framework/script.py	/^OP_LEFT = CScriptOp(0x80)$/;"	v
OP_LESSTHAN	src/script/script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHAN	test/functional/test_framework/script.py	/^OP_LESSTHAN = CScriptOp(0x9f)$/;"	v
OP_LESSTHANOREQUAL	src/script/script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	test/functional/test_framework/script.py	/^OP_LESSTHANOREQUAL = CScriptOp(0xa1)$/;"	v
OP_LSHIFT	src/script/script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_LSHIFT	test/functional/test_framework/script.py	/^OP_LSHIFT = CScriptOp(0x98)$/;"	v
OP_MAX	src/script/script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MAX	test/functional/test_framework/script.py	/^OP_MAX = CScriptOp(0xa4)$/;"	v
OP_MIN	src/script/script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MIN	test/functional/test_framework/script.py	/^OP_MIN = CScriptOp(0xa3)$/;"	v
OP_MOD	src/script/script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MOD	test/functional/test_framework/script.py	/^OP_MOD = CScriptOp(0x97)$/;"	v
OP_MUL	src/script/script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_MUL	test/functional/test_framework/script.py	/^OP_MUL = CScriptOp(0x95)$/;"	v
OP_NEGATE	src/script/script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NEGATE	test/functional/test_framework/script.py	/^OP_NEGATE = CScriptOp(0x8f)$/;"	v
OP_NIP	src/script/script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NIP	test/functional/test_framework/script.py	/^OP_NIP = CScriptOp(0x77)$/;"	v
OP_NOP	src/script/script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP	test/functional/feature_pruning.py	/^from test_framework.script import CScript, OP_RETURN, OP_NOP$/;"	i
OP_NOP	test/functional/test_framework/script.py	/^OP_NOP = CScriptOp(0x61)$/;"	v
OP_NOP1	src/script/script.h	/^    OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP1	test/functional/test_framework/script.py	/^OP_NOP1 = CScriptOp(0xb0)$/;"	v
OP_NOP10	src/script/script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP10	test/functional/test_framework/script.py	/^OP_NOP10 = CScriptOp(0xb9)$/;"	v
OP_NOP2	src/script/script.h	/^    OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,$/;"	e	enum:opcodetype
OP_NOP3	src/script/script.h	/^    OP_NOP3 = OP_CHECKSEQUENCEVERIFY,$/;"	e	enum:opcodetype
OP_NOP4	src/script/script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP4	test/functional/test_framework/script.py	/^OP_NOP4 = CScriptOp(0xb3)$/;"	v
OP_NOP5	src/script/script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP5	test/functional/test_framework/script.py	/^OP_NOP5 = CScriptOp(0xb4)$/;"	v
OP_NOP6	src/script/script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP6	test/functional/test_framework/script.py	/^OP_NOP6 = CScriptOp(0xb5)$/;"	v
OP_NOP7	src/script/script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP7	test/functional/test_framework/script.py	/^OP_NOP7 = CScriptOp(0xb6)$/;"	v
OP_NOP8	src/script/script.h	/^    OP_NOP8 = 0xb7,$/;"	e	enum:opcodetype
OP_NOP8	test/functional/test_framework/script.py	/^OP_NOP8 = CScriptOp(0xb7)$/;"	v
OP_NOP9	src/script/script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOP9	test/functional/test_framework/script.py	/^OP_NOP9 = CScriptOp(0xb8)$/;"	v
OP_NOT	src/script/script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOT	test/functional/test_framework/script.py	/^OP_NOT = CScriptOp(0x91)$/;"	v
OP_NOTIF	src/script/script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NOTIF	test/functional/test_framework/script.py	/^OP_NOTIF = CScriptOp(0x64)$/;"	v
OP_NUMEQUAL	src/script/script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUAL	test/functional/test_framework/script.py	/^OP_NUMEQUAL = CScriptOp(0x9c)$/;"	v
OP_NUMEQUALVERIFY	src/script/script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	test/functional/test_framework/script.py	/^OP_NUMEQUALVERIFY = CScriptOp(0x9d)$/;"	v
OP_NUMNOTEQUAL	src/script/script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	test/functional/test_framework/script.py	/^OP_NUMNOTEQUAL = CScriptOp(0x9e)$/;"	v
OP_OR	src/script/script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OR	test/functional/test_framework/script.py	/^OP_OR = CScriptOp(0x85)$/;"	v
OP_OVER	src/script/script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_OVER	test/functional/test_framework/script.py	/^OP_OVER = CScriptOp(0x78)$/;"	v
OP_PICK	src/script/script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PICK	test/functional/test_framework/script.py	/^OP_PICK = CScriptOp(0x79)$/;"	v
OP_PUBKEY	test/functional/test_framework/script.py	/^OP_PUBKEY = CScriptOp(0xfe)$/;"	v
OP_PUBKEYHASH	test/functional/test_framework/script.py	/^OP_PUBKEYHASH = CScriptOp(0xfd)$/;"	v
OP_PUBKEYS	test/functional/test_framework/script.py	/^OP_PUBKEYS = CScriptOp(0xfb)$/;"	v
OP_PUSHDATA1	src/script/script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA1	test/functional/test_framework/script.py	/^OP_PUSHDATA1 = CScriptOp(0x4c)$/;"	v
OP_PUSHDATA2	src/script/script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA2	test/functional/test_framework/script.py	/^OP_PUSHDATA2 = CScriptOp(0x4d)$/;"	v
OP_PUSHDATA4	src/script/script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_PUSHDATA4	test/functional/test_framework/script.py	/^OP_PUSHDATA4 = CScriptOp(0x4e)$/;"	v
OP_RESERVED	src/script/script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED	test/functional/test_framework/script.py	/^OP_RESERVED = CScriptOp(0x50)$/;"	v
OP_RESERVED1	src/script/script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED1	test/functional/test_framework/script.py	/^OP_RESERVED1 = CScriptOp(0x89)$/;"	v
OP_RESERVED2	src/script/script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RESERVED2	test/functional/test_framework/script.py	/^OP_RESERVED2 = CScriptOp(0x8a)$/;"	v
OP_RETURN	src/script/script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RETURN	test/functional/feature_pruning.py	/^from test_framework.script import CScript, OP_RETURN, OP_NOP$/;"	i
OP_RETURN	test/functional/test_framework/script.py	/^OP_RETURN = CScriptOp(0x6a)$/;"	v
OP_RIGHT	src/script/script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIGHT	test/functional/test_framework/script.py	/^OP_RIGHT = CScriptOp(0x81)$/;"	v
OP_RIPEMD160	src/script/script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_RIPEMD160	test/functional/test_framework/script.py	/^OP_RIPEMD160 = CScriptOp(0xa6)$/;"	v
OP_ROLL	src/script/script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROLL	test/functional/test_framework/script.py	/^OP_ROLL = CScriptOp(0x7a)$/;"	v
OP_ROT	src/script/script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_ROT	test/functional/test_framework/script.py	/^OP_ROT = CScriptOp(0x7b)$/;"	v
OP_RSHIFT	src/script/script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_RSHIFT	test/functional/test_framework/script.py	/^OP_RSHIFT = CScriptOp(0x99)$/;"	v
OP_SHA1	src/script/script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA1	test/functional/test_framework/script.py	/^OP_SHA1 = CScriptOp(0xa7)$/;"	v
OP_SHA256	src/script/script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SHA256	test/functional/test_framework/script.py	/^OP_SHA256 = CScriptOp(0xa8)$/;"	v
OP_SIZE	src/script/script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SIZE	test/functional/test_framework/script.py	/^OP_SIZE = CScriptOp(0x82)$/;"	v
OP_SMALLINTEGER	test/functional/test_framework/script.py	/^OP_SMALLINTEGER = CScriptOp(0xfa)$/;"	v
OP_SUB	src/script/script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUB	test/functional/test_framework/script.py	/^OP_SUB = CScriptOp(0x94)$/;"	v
OP_SUBSTR	src/script/script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SUBSTR	test/functional/test_framework/script.py	/^OP_SUBSTR = CScriptOp(0x7f)$/;"	v
OP_SWAP	src/script/script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_SWAP	test/functional/test_framework/script.py	/^OP_SWAP = CScriptOp(0x7c)$/;"	v
OP_TOALTSTACK	src/script/script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TOALTSTACK	test/functional/test_framework/script.py	/^OP_TOALTSTACK = CScriptOp(0x6b)$/;"	v
OP_TRUE	src/script/script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TRUE	test/functional/feature_assumevalid.py	/^from test_framework.script import (CScript, OP_TRUE)$/;"	i
OP_TRUE	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
OP_TRUE	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
OP_TRUE	test/functional/p2p_compactblocks.py	/^from test_framework.script import CScript, OP_TRUE, OP_DROP$/;"	i
OP_TRUE	test/functional/test_framework/script.py	/^OP_TRUE=OP_1$/;"	v
OP_TUCK	src/script/script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_TUCK	test/functional/test_framework/script.py	/^OP_TUCK = CScriptOp(0x7d)$/;"	v
OP_VER	src/script/script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VER	test/functional/test_framework/script.py	/^OP_VER = CScriptOp(0x62)$/;"	v
OP_VERIF	src/script/script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIF	test/functional/test_framework/script.py	/^OP_VERIF = CScriptOp(0x65)$/;"	v
OP_VERIFY	src/script/script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERIFY	test/functional/test_framework/script.py	/^OP_VERIFY = CScriptOp(0x69)$/;"	v
OP_VERNOTIF	src/script/script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_VERNOTIF	test/functional/test_framework/script.py	/^OP_VERNOTIF = CScriptOp(0x66)$/;"	v
OP_WITHIN	src/script/script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_WITHIN	test/functional/test_framework/script.py	/^OP_WITHIN = CScriptOp(0xa5)$/;"	v
OP_XOR	src/script/script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
OP_XOR	test/functional/test_framework/script.py	/^OP_XOR = CScriptOp(0x86)$/;"	v
ORPHAN_TX_EXPIRE_INTERVAL	src/net_processing.cpp	/^static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;$/;"	v	file:
ORPHAN_TX_EXPIRE_TIME	src/net_processing.cpp	/^static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;$/;"	v	file:
OSX_APP	Makefile	/^OSX_APP = Bitcoin-Qt.app$/;"	m
OSX_APP_BUILT	Makefile	/^OSX_APP_BUILT = $(OSX_APP)\/Contents\/PkgInfo $(OSX_APP)\/Contents\/Resources\/empty.lproj \\$/;"	m
OSX_BACKGROUND_IMAGE	Makefile	/^OSX_BACKGROUND_IMAGE = background.tiff$/;"	m
OSX_BACKGROUND_IMAGE_DPIS	Makefile	/^OSX_BACKGROUND_IMAGE_DPIS = 36 72$/;"	m
OSX_BACKGROUND_SVG	Makefile	/^OSX_BACKGROUND_SVG = background.svg$/;"	m
OSX_DEPLOY_SCRIPT	Makefile	/^OSX_DEPLOY_SCRIPT = $(top_srcdir)\/contrib\/macdeploy\/macdeployqtplus$/;"	m
OSX_DMG	Makefile	/^OSX_DMG = $(OSX_VOLNAME).dmg$/;"	m
OSX_DSSTORE_GEN	Makefile	/^OSX_DSSTORE_GEN = $(top_srcdir)\/contrib\/macdeploy\/custom_dsstore.py$/;"	m
OSX_FANCY_PLIST	Makefile	/^OSX_FANCY_PLIST = $(top_srcdir)\/contrib\/macdeploy\/fancy.plist$/;"	m
OSX_INSTALLER_ICONS	Makefile	/^OSX_INSTALLER_ICONS = $(top_srcdir)\/src\/qt\/res\/icons\/bitcoin.icns$/;"	m
OSX_MIN_VERSION	depends/hosts/darwin.mk	/^OSX_MIN_VERSION=10.10$/;"	m
OSX_PACKAGING	Makefile	/^OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\$/;"	m
OSX_PLIST	Makefile	/^OSX_PLIST = $(top_builddir)\/share\/qt\/Info.plist #not installed$/;"	m
OSX_QT_TRANSLATIONS	Makefile	/^OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW$/;"	m
OSX_SDK	depends/hosts/darwin.mk	/^OSX_SDK=$(SDK_PATH)\/MacOSX$(OSX_SDK_VERSION).sdk$/;"	m
OSX_SDK_VERSION	depends/hosts/darwin.mk	/^OSX_SDK_VERSION=10.11$/;"	m
OSX_VOLNAME	Makefile	/^OSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))$/;"	m
OTOOL	Makefile	/^OTOOL = otool$/;"	m
OTOOL	doc/man/Makefile	/^OTOOL = otool$/;"	m
OTOOL	src/Makefile	/^OTOOL = otool$/;"	m
OTOOL	src/secp256k1/Makefile	/^OTOOL = otool$/;"	m
OTOOL	src/univalue/Makefile	/^OTOOL = otool$/;"	m
OTOOL64	Makefile	/^OTOOL64 = :$/;"	m
OTOOL64	doc/man/Makefile	/^OTOOL64 = :$/;"	m
OTOOL64	src/Makefile	/^OTOOL64 = :$/;"	m
OTOOL64	src/secp256k1/Makefile	/^OTOOL64 = :$/;"	m
OTOOL64	src/univalue/Makefile	/^OTOOL64 = :$/;"	m
OUTPOINT	src/test/coins_tests.cpp	/^const static COutPoint OUTPOINT;$/;"	v	file:
OUTPUT_GROUP_MAX_ENTRIES	src/wallet/wallet.cpp	/^static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;$/;"	v	file:
OUTPUT_SIZE	src/crypto/hkdf_sha256_32.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CHKDF_HMAC_SHA256_L32
OUTPUT_SIZE	src/crypto/hmac_sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CHMAC_SHA256
OUTPUT_SIZE	src/crypto/hmac_sha512.h	/^    static const size_t OUTPUT_SIZE = 64;$/;"	m	class:CHMAC_SHA512
OUTPUT_SIZE	src/crypto/ripemd160.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CRIPEMD160
OUTPUT_SIZE	src/crypto/sha1.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CSHA1
OUTPUT_SIZE	src/crypto/sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CSHA256
OUTPUT_SIZE	src/crypto/sha512.h	/^    static constexpr size_t OUTPUT_SIZE = 64;$/;"	m	class:CSHA512
OUTPUT_SIZE	src/hash.h	/^    static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;$/;"	m	class:CHash160
OUTPUT_SIZE	src/hash.h	/^    static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;$/;"	m	class:CHash256
OUTPUT_TYPE_STRING_BECH32	src/outputtype.cpp	/^static const std::string OUTPUT_TYPE_STRING_BECH32 = "bech32";$/;"	v	file:
OUTPUT_TYPE_STRING_LEGACY	src/outputtype.cpp	/^static const std::string OUTPUT_TYPE_STRING_LEGACY = "legacy";$/;"	v	file:
OUTPUT_TYPE_STRING_P2SH_SEGWIT	src/outputtype.cpp	/^static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = "p2sh-segwit";$/;"	v	file:
OUT_CPP	share/qt/extract_strings_qt.py	/^OUT_CPP="qt\/bitcoinstrings.cpp"$/;"	v
OldInfoLogFileName	src/leveldb/db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OnRPCStarted	src/init.cpp	/^static void OnRPCStarted()$/;"	f	file:
OnRPCStopped	src/init.cpp	/^static void OnRPCStopped()$/;"	f	file:
OnStarted	src/rpc/server.cpp	/^void RPCServer::OnStarted(std::function<void ()> slot)$/;"	f	class:RPCServer
OnStopped	src/rpc/server.cpp	/^void RPCServer::OnStopped(std::function<void ()> slot)$/;"	f	class:RPCServer
OnceType	src/leveldb/port/port_example.h	/^typedef intptr_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	src/leveldb/port/port_posix.h	/^typedef pthread_once_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	src/leveldb/port/port_win.h	/^    OnceType(bool f) : init_(f) {}$/;"	f	class:leveldb::port::OnceType
OnceType	src/leveldb/port/port_win.h	/^    OnceType(const OnceType &once) : init_(once.init_) {}$/;"	f	class:leveldb::port::OnceType
OnceType	src/leveldb/port/port_win.h	/^class OnceType {$/;"	c	namespace:leveldb::port
OneArray	src/test/arith_uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneArray	src/test/uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneIn	src/leveldb/util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
OneL	src/test/arith_uint256_tests.cpp	/^const arith_uint256 OneL = arith_uint256V(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneL	src/test/uint256_tests.cpp	/^const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneS	src/test/uint256_tests.cpp	/^const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));$/;"	v
Open	src/flatfile.cpp	/^FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)$/;"	f	class:FlatFileSeq
Open	src/leveldb/db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	src/leveldb/db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	src/leveldb/db/recovery_test.cc	/^  void Open(Options* options = NULL) {$/;"	f	class:leveldb::RecoveryTest
Open	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	src/leveldb/doc/bench/db_bench_tree_db.cc	/^    void Open(bool sync) {$/;"	f	class:leveldb::Benchmark	file:
Open	src/leveldb/table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
Open	src/wallet/db.cpp	/^bool BerkeleyEnvironment::Open(bool retry)$/;"	f	class:BerkeleyEnvironment
OpenBench	src/leveldb/db/db_bench.cc	/^  void OpenBench(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
OpenBlockFile	src/validation.cpp	/^FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly) {$/;"	f
OpenCompactionOutputFile	src/leveldb/db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OpenDB	src/leveldb/db/fault_injection_test.cc	/^  Status OpenDB() {$/;"	f	class:leveldb::FaultInjectionTest
OpenDebugLog	src/logging.cpp	/^bool BCLog::Logger::OpenDebugLog()$/;"	f	class:BCLog::Logger
OpenNetworkConnection	src/net.cpp	/^void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)$/;"	f	class:CConnman
OpenURIDialog	src/qt/openuridialog.cpp	/^OpenURIDialog::OpenURIDialog(QWidget *parent) :$/;"	f	class:OpenURIDialog
OpenURIDialog	src/qt/openuridialog.h	/^class OpenURIDialog : public QDialog$/;"	c
OpenUndoFile	src/validation.cpp	/^static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly) {$/;"	f	file:
OpenUntilBlock	src/qt/transactionrecord.h	/^        OpenUntilBlock,     \/**< Transaction not yet final, waiting for block *\/$/;"	e	enum:TransactionStatus::Status
OpenUntilDate	src/qt/transactionrecord.h	/^        OpenUntilDate,      \/**< Transaction not yet final, waiting for date *\/$/;"	e	enum:TransactionStatus::Status
OpenWalletActivity	src/qt/walletcontroller.cpp	/^OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, const std::string& name)$/;"	f	class:OpenWalletActivity
OpenWalletActivity	src/qt/walletcontroller.h	/^class OpenWalletActivity : public QObject$/;"	c
OptionConfig	src/leveldb/db/db_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest	file:
OptionID	src/qt/optionsmodel.h	/^    enum OptionID {$/;"	g	class:OptionsModel
OptionIDRowCount	src/qt/optionsmodel.h	/^        OptionIDRowCount,$/;"	e	enum:OptionsModel::OptionID
Optional	src/rpc/util.h	/^    enum class Optional {$/;"	c	struct:RPCArg
Options	src/leveldb/include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	src/leveldb/util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Options	src/miner.cpp	/^BlockAssembler::Options::Options() {$/;"	f	class:BlockAssembler::Options
Options	src/miner.h	/^    struct Options {$/;"	s	class:BlockAssembler
Options	src/net.h	/^    struct Options$/;"	s	class:CConnman
OptionsCategory	src/util/system.h	/^enum class OptionsCategory {$/;"	c
OptionsDialog	src/qt/optionsdialog.cpp	/^OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :$/;"	f	class:OptionsDialog
OptionsDialog	src/qt/optionsdialog.h	/^class OptionsDialog : public QDialog$/;"	c
OptionsModel	src/qt/optionsmodel.cpp	/^OptionsModel::OptionsModel(interfaces::Node& node, QObject *parent, bool resetSettings) :$/;"	f	class:OptionsModel
OptionsModel	src/qt/optionsmodel.h	/^class OptionsModel : public QAbstractListModel$/;"	c
Or	src/crypto/sha256_avx2.cpp	/^__m256i inline Or(__m256i x, __m256i y) { return _mm256_or_si256(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
Or	src/crypto/sha256_sse41.cpp	/^__m128i inline Or(__m128i x, __m128i y) { return _mm_or_si128(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
Order	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Order	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
OrderedDict	test/functional/rpc_rawtransaction.py	/^from collections import OrderedDict$/;"	i
OriginPubkeyProvider	src/script/descriptor.cpp	/^    OriginPubkeyProvider(KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : m_origin(std::move(info)), m_provider(std::move(provider)) {}$/;"	f	class:__anon75::final
OriginString	src/script/descriptor.cpp	/^    std::string OriginString() const$/;"	f	class:__anon75::final	file:
Other	src/qt/transactionrecord.h	/^        Other,$/;"	e	enum:TransactionRecord::Type
OutboundTargetReached	src/net.cpp	/^bool CConnman::OutboundTargetReached(bool historicalBlockServingLimit)$/;"	f	class:CConnman
OuterType	src/rpc/util.cpp	/^    enum class OuterType {$/;"	c	struct:Sections	file:
Output	src/leveldb/db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
OutputGroup	src/wallet/coinselection.h	/^    OutputGroup() {}$/;"	f	struct:OutputGroup
OutputGroup	src/wallet/coinselection.h	/^    OutputGroup(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) : OutputGroup() {$/;"	f	struct:OutputGroup
OutputGroup	src/wallet/coinselection.h	/^    OutputGroup(std::vector<CInputCoin>&& outputs, bool from_me, CAmount value, int depth, size_t ancestors, size_t descendants)$/;"	f	struct:OutputGroup
OutputGroup	src/wallet/coinselection.h	/^struct OutputGroup$/;"	s
OutputMissing	test/functional/data/invalid_txs.py	/^class OutputMissing(BadTxTemplate):$/;"	c
OutputTx	src/bitcoin-tx.cpp	/^static void OutputTx(const CTransaction& tx)$/;"	f	file:
OutputTxHash	src/bitcoin-tx.cpp	/^static void OutputTxHash(const CTransaction& tx)$/;"	f	file:
OutputTxHex	src/bitcoin-tx.cpp	/^static void OutputTxHex(const CTransaction& tx)$/;"	f	file:
OutputTxJSON	src/bitcoin-tx.cpp	/^static void OutputTxJSON(const CTransaction& tx)$/;"	f	file:
OutputType	src/outputtype.h	/^enum class OutputType {$/;"	c
OverlapInLevel	src/leveldb/db/version_set.cc	/^bool Version::OverlapInLevel(int level,$/;"	f	class:leveldb::Version
Overlaps	src/leveldb/db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
OverrideStream	src/streams.h	/^    OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}$/;"	f	class:OverrideStream
OverrideStream	src/streams.h	/^class OverrideStream$/;"	c
OverviewPage	src/qt/overviewpage.cpp	/^OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :$/;"	f	class:OverviewPage
OverviewPage	src/qt/overviewpage.h	/^class OverviewPage : public QWidget$/;"	c
P2PBlocksOnly	test/functional/p2p_blocksonly.py	/^class P2PBlocksOnly(BitcoinTestFramework):$/;"	c
P2PConnection	test/functional/test_framework/mininode.py	/^class P2PConnection(asyncio.Protocol):$/;"	c
P2PDataStore	test/functional/feature_block.py	/^from test_framework.mininode import P2PDataStore$/;"	i
P2PDataStore	test/functional/feature_csv_activation.py	/^from test_framework.mininode import P2PDataStore$/;"	i
P2PDataStore	test/functional/p2p_invalid_block.py	/^from test_framework.mininode import P2PDataStore$/;"	i
P2PDataStore	test/functional/p2p_invalid_messages.py	/^from test_framework.mininode import P2PDataStore, NetworkThread$/;"	i
P2PDataStore	test/functional/p2p_invalid_tx.py	/^from test_framework.mininode import P2PDataStore$/;"	i
P2PDataStore	test/functional/p2p_leak_tx.py	/^from test_framework.mininode import P2PDataStore$/;"	i
P2PDataStore	test/functional/test_framework/mininode.py	/^class P2PDataStore(P2PInterface):$/;"	c
P2PFingerprintTest	test/functional/p2p_fingerprint.py	/^class P2PFingerprintTest(BitcoinTestFramework):$/;"	c
P2PHeaderAndShortIDs	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
P2PHeaderAndShortIDs	test/functional/test_framework/messages.py	/^class P2PHeaderAndShortIDs:$/;"	c
P2PHeaderAndShortWitnessIDs	test/functional/test_framework/messages.py	/^class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):$/;"	c
P2PIgnoreInv	test/functional/p2p_node_network_limited.py	/^class P2PIgnoreInv(P2PInterface):$/;"	c
P2PInterface	test/functional/feature_assumevalid.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/feature_cltv.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/feature_dersig.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
P2PInterface	test/functional/feature_maxuploadtarget.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/feature_versionbits_warning.py	/^from test_framework.mininode import P2PInterface, mininode_lock$/;"	i
P2PInterface	test/functional/p2p_blocksonly.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/p2p_compactblocks.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
P2PInterface	test/functional/p2p_feefilter.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
P2PInterface	test/functional/p2p_invalid_locator.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/p2p_leak.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
P2PInterface	test/functional/p2p_mempool.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/p2p_node_network_limited.py	/^from test_framework.mininode import P2PInterface, mininode_lock$/;"	i
P2PInterface	test/functional/p2p_timeouts.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/p2p_unrequested_blocks.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
P2PInterface	test/functional/rpc_net.py	/^from test_framework.mininode import P2PInterface$/;"	i
P2PInterface	test/functional/test_framework/mininode.py	/^class P2PInterface(P2PConnection):$/;"	c
P2PInterface	test/functional/wallet_resendwallettransactions.py	/^from test_framework.mininode import P2PInterface, mininode_lock$/;"	i
P2PLeakTest	test/functional/p2p_leak.py	/^class P2PLeakTest(BitcoinTestFramework):$/;"	c
P2PLeakTxTest	test/functional/p2p_leak_tx.py	/^class P2PLeakTxTest(BitcoinTestFramework):$/;"	c
P2PMempoolTests	test/functional/p2p_mempool.py	/^class P2PMempoolTests(BitcoinTestFramework):$/;"	c
P2PNode	test/functional/p2p_leak_tx.py	/^class P2PNode(P2PDataStore):$/;"	c
P2PStoreTxInvs	test/functional/wallet_resendwallettransactions.py	/^class P2PStoreTxInvs(P2PInterface):$/;"	c
P2P_DISABLED	src/util/error.h	/^    P2P_DISABLED,$/;"	m	class:TransactionError
P2SH	src/script/descriptor.cpp	/^    P2SH,$/;"	m	class:__anon75::ParseScriptContext	file:
P2SH	src/script/ismine.cpp	/^    P2SH = 1,       \/\/!< P2SH redeemScript$/;"	m	class:__anon85::IsMineSigVersion	file:
P2SH	src/wallet/rpcdump.cpp	/^    P2SH, \/\/!< P2SH redeemScript$/;"	m	class:ScriptContext	file:
P2SH_1	test/functional/feature_fee_estimation.py	/^P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])$/;"	v
P2SH_2	test/functional/feature_fee_estimation.py	/^P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])$/;"	v
P2SH_SEGWIT	src/outputtype.h	/^    P2SH_SEGWIT,$/;"	m	class:OutputType
P2WPKH	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
P2WPKH	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address as watch only")$/;"	i
P2WPKH	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address with key")$/;"	i
P2WSH	src/script/descriptor.cpp	/^    P2WSH,$/;"	m	class:__anon75::ParseScriptContext	file:
PACKAGE	Makefile	/^PACKAGE = bitcoin$/;"	m
PACKAGE	depends/packages/qt.mk	/^PACKAGE=qt$/;"	m
PACKAGE	doc/man/Makefile	/^PACKAGE = bitcoin$/;"	m
PACKAGE	src/Makefile	/^PACKAGE = bitcoin$/;"	m
PACKAGE	src/secp256k1/Makefile	/^PACKAGE = libsecp256k1$/;"	m
PACKAGE	src/secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE /;"	d
PACKAGE	src/univalue/Makefile	/^PACKAGE = univalue$/;"	m
PACKAGE	src/univalue/univalue-config.h	/^#define PACKAGE /;"	d
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = https:\/\/github.com\/bitcoin\/bitcoin\/issues$/;"	m
PACKAGE_BUGREPORT	build_msvc/bitcoin_config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_BUGREPORT	doc/man/Makefile	/^PACKAGE_BUGREPORT = https:\/\/github.com\/bitcoin\/bitcoin\/issues$/;"	m
PACKAGE_BUGREPORT	src/Makefile	/^PACKAGE_BUGREPORT = https:\/\/github.com\/bitcoin\/bitcoin\/issues$/;"	m
PACKAGE_BUGREPORT	src/config/bitcoin-config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_BUGREPORT	src/secp256k1/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	src/secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_BUGREPORT	src/univalue/Makefile	/^PACKAGE_BUGREPORT = http:\/\/github.com\/jgarzik\/univalue\/$/;"	m
PACKAGE_BUGREPORT	src/univalue/univalue-config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = Bitcoin Core$/;"	m
PACKAGE_NAME	build_msvc/bitcoin_config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_NAME	doc/man/Makefile	/^PACKAGE_NAME = Bitcoin Core$/;"	m
PACKAGE_NAME	src/Makefile	/^PACKAGE_NAME = Bitcoin Core$/;"	m
PACKAGE_NAME	src/config/bitcoin-config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_NAME	src/secp256k1/Makefile	/^PACKAGE_NAME = libsecp256k1$/;"	m
PACKAGE_NAME	src/secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_NAME	src/univalue/Makefile	/^PACKAGE_NAME = univalue$/;"	m
PACKAGE_NAME	src/univalue/univalue-config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = Bitcoin Core 0.18.99$/;"	m
PACKAGE_STRING	build_msvc/bitcoin_config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_STRING	doc/man/Makefile	/^PACKAGE_STRING = Bitcoin Core 0.18.99$/;"	m
PACKAGE_STRING	src/Makefile	/^PACKAGE_STRING = Bitcoin Core 0.18.99$/;"	m
PACKAGE_STRING	src/config/bitcoin-config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_STRING	src/secp256k1/Makefile	/^PACKAGE_STRING = libsecp256k1 0.1$/;"	m
PACKAGE_STRING	src/secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_STRING	src/univalue/Makefile	/^PACKAGE_STRING = univalue 1.0.3$/;"	m
PACKAGE_STRING	src/univalue/univalue-config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = bitcoin$/;"	m
PACKAGE_TARNAME	build_msvc/bitcoin_config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_TARNAME	doc/man/Makefile	/^PACKAGE_TARNAME = bitcoin$/;"	m
PACKAGE_TARNAME	src/Makefile	/^PACKAGE_TARNAME = bitcoin$/;"	m
PACKAGE_TARNAME	src/config/bitcoin-config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_TARNAME	src/secp256k1/Makefile	/^PACKAGE_TARNAME = libsecp256k1$/;"	m
PACKAGE_TARNAME	src/secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_TARNAME	src/univalue/Makefile	/^PACKAGE_TARNAME = univalue$/;"	m
PACKAGE_TARNAME	src/univalue/univalue-config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_URL	Makefile	/^PACKAGE_URL = https:\/\/bitcoincore.org\/$/;"	m
PACKAGE_URL	build_msvc/bitcoin_config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_URL	doc/man/Makefile	/^PACKAGE_URL = https:\/\/bitcoincore.org\/$/;"	m
PACKAGE_URL	src/Makefile	/^PACKAGE_URL = https:\/\/bitcoincore.org\/$/;"	m
PACKAGE_URL	src/config/bitcoin-config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_URL	src/secp256k1/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	src/secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_URL	src/univalue/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	src/univalue/univalue-config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.18.99$/;"	m
PACKAGE_VERSION	build_msvc/bitcoin_config.h	/^#define PACKAGE_VERSION /;"	d
PACKAGE_VERSION	doc/man/Makefile	/^PACKAGE_VERSION = 0.18.99$/;"	m
PACKAGE_VERSION	src/Makefile	/^PACKAGE_VERSION = 0.18.99$/;"	m
PACKAGE_VERSION	src/config/bitcoin-config.h	/^#define PACKAGE_VERSION /;"	d
PACKAGE_VERSION	src/secp256k1/Makefile	/^PACKAGE_VERSION = 0.1$/;"	m
PACKAGE_VERSION	src/secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_VERSION /;"	d
PACKAGE_VERSION	src/univalue/Makefile	/^PACKAGE_VERSION = 1.0.3$/;"	m
PACKAGE_VERSION	src/univalue/univalue-config.h	/^#define PACKAGE_VERSION /;"	d
PARTIAL_REGEX	test/functional/test_framework/test_node.py	/^    PARTIAL_REGEX = 3$/;"	v	class:ErrorMatch
PASSED	test/functional/test_framework/test_framework.py	/^    PASSED = 1$/;"	v	class:TestStatus
PASTE	src/sync.h	/^#define PASTE(/;"	d
PASTE2	src/sync.h	/^#define PASTE2(/;"	d
PATCHES_PATH	depends/Makefile	/^PATCHES_PATH = $(BASEDIR)\/patches$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	doc/man/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	src/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	src/secp256k1/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	src/univalue/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATTERN_AGENT	contrib/seeds/makeseeds.py	/^PATTERN_AGENT = re.compile(r"^(\/Satoshi:0.14.(0|1|2|99)\/|\/Satoshi:0.15.(0|1|2|99)|\/Satoshi:0.16.(0|1|2|99)\/)$")$/;"	v
PATTERN_IPV4	contrib/seeds/makeseeds.py	/^PATTERN_IPV4 = re.compile(r"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$")$/;"	v
PATTERN_IPV6	contrib/seeds/makeseeds.py	/^PATTERN_IPV6 = re.compile(r"^\\[([0-9a-z:]+)\\]:(\\d+)$")$/;"	v
PATTERN_ONION	contrib/seeds/makeseeds.py	/^PATTERN_ONION = re.compile(r"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$")$/;"	v
PAYTXFEE	src/policy/fees.h	/^    PAYTXFEE,$/;"	m	class:FeeEstimateHorizon::FeeReason
PERIODIC	src/validation.cpp	/^    PERIODIC,$/;"	m	class:FlushStateMode	file:
PER_UTXO_OVERHEAD	src/rpc/blockchain.cpp	/^static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);$/;"	v	file:
PIC_FLAGS	Makefile	/^PIC_FLAGS = -fPIC$/;"	m
PIC_FLAGS	doc/man/Makefile	/^PIC_FLAGS = -fPIC$/;"	m
PIC_FLAGS	src/Makefile	/^PIC_FLAGS = -fPIC$/;"	m
PIE_FLAGS	Makefile	/^PIE_FLAGS = $/;"	m
PIE_FLAGS	doc/man/Makefile	/^PIE_FLAGS = $/;"	m
PIE_FLAGS	src/Makefile	/^PIE_FLAGS = $/;"	m
PING	src/protocol.cpp	/^const char *PING="ping";$/;"	m	namespace:NetMsgType	file:
PING_COLUMN_WIDTH	src/qt/rpcconsole.h	/^        PING_COLUMN_WIDTH = 80,$/;"	e	enum:RPCConsole::ColumnWidths
PING_INTERVAL	src/net.h	/^static const int PING_INTERVAL = 2 * 60;$/;"	v
PIPE	share/qt/extract_strings_qt.py	/^from subprocess import Popen, PIPE$/;"	i
PKDescriptor	src/script/descriptor.cpp	/^    PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "pk") {}$/;"	f	class:__anon75::final
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/local\/bin\/pkg-config$/;"	m
PKG_CONFIG	doc/man/Makefile	/^PKG_CONFIG = \/usr\/local\/bin\/pkg-config$/;"	m
PKG_CONFIG	src/Makefile	/^PKG_CONFIG = \/usr\/local\/bin\/pkg-config$/;"	m
PKG_CONFIG	src/secp256k1/Makefile	/^PKG_CONFIG = \/usr\/local\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	doc/man/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	src/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	src/secp256k1/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = \/usr\/local\/opt\/qt\/lib\/pkgconfig:\/usr\/local\/opt\/openssl\/lib\/pkgconfig:$/;"	m
PKG_CONFIG_PATH	doc/man/Makefile	/^PKG_CONFIG_PATH = \/usr\/local\/opt\/qt\/lib\/pkgconfig:\/usr\/local\/opt\/openssl\/lib\/pkgconfig:$/;"	m
PKG_CONFIG_PATH	src/Makefile	/^PKG_CONFIG_PATH = \/usr\/local\/opt\/qt\/lib\/pkgconfig:\/usr\/local\/opt\/openssl\/lib\/pkgconfig:$/;"	m
PKG_CONFIG_PATH	src/secp256k1/Makefile	/^PKG_CONFIG_PATH = \/usr\/local\/opt\/openssl\/lib\/pkgconfig:$/;"	m
PKH	src/test/script_tests.cpp	/^    PKH,$/;"	m	class:__anon58::WitnessMode	file:
PKHDescriptor	src/script/descriptor.cpp	/^    PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "pkh") {}$/;"	f	class:__anon75::final
PKHash	src/script/standard.cpp	/^PKHash::PKHash(const CPubKey& pubkey) : uint160(pubkey.GetID()) {}$/;"	f	class:PKHash
PKHash	src/script/standard.h	/^    PKHash() : uint160() {}$/;"	f	struct:PKHash
PKHash	src/script/standard.h	/^    explicit PKHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:PKHash
PKHash	src/script/standard.h	/^struct PKHash : public uint160$/;"	s
PLATFORM_IS_LITTLE_ENDIAN	src/leveldb/port/port_posix.h	/^    #define PLATFORM_IS_LITTLE_ENDIAN /;"	d
PLATFORM_IS_LITTLE_ENDIAN	src/leveldb/port/port_posix.h	/^  #define PLATFORM_IS_LITTLE_ENDIAN /;"	d
PLATFORM_IS_LITTLE_ENDIAN	src/leveldb/port/port_posix.h	/^#define PLATFORM_IS_LITTLE_ENDIAN /;"	d
PLATFORM_IS_LITTLE_ENDIAN	src/leveldb/port/port_posix.h	/^#undef PLATFORM_IS_LITTLE_ENDIAN$/;"	d
POLY1305	src/bench/poly1305.cpp	/^static void POLY1305(benchmark::State& state, size_t buffersize)$/;"	f	file:
POLY1305_1MB	src/bench/poly1305.cpp	/^static void POLY1305_1MB(benchmark::State& state)$/;"	f	file:
POLY1305_256BYTES	src/bench/poly1305.cpp	/^static void POLY1305_256BYTES(benchmark::State& state)$/;"	f	file:
POLY1305_64BYTES	src/bench/poly1305.cpp	/^static void POLY1305_64BYTES(benchmark::State& state)$/;"	f	file:
POLY1305_KEYLEN	src/crypto/poly1305.h	/^#define POLY1305_KEYLEN /;"	d
POLY1305_TAGLEN	src/crypto/poly1305.h	/^#define POLY1305_TAGLEN /;"	d
PONG	src/protocol.cpp	/^const char *PONG="pong";$/;"	m	namespace:NetMsgType	file:
PORT	src/secp256k1/Makefile	/^PORT = $/;"	m
PORT_ATOMIC_POINTER_H_	src/leveldb/port/atomic_pointer.h	/^#define PORT_ATOMIC_POINTER_H_$/;"	d
PORT_MIN	test/functional/test_framework/util.py	/^PORT_MIN = 11000$/;"	v
PORT_RANGE	test/functional/test_framework/util.py	/^PORT_RANGE = 5000$/;"	v
POST	src/httpserver.h	/^        POST,$/;"	e	enum:HTTPRequest::RequestMethod
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	doc/man/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	src/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	src/secp256k1/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	src/univalue/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	doc/man/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	src/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	src/secp256k1/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	src/univalue/Makefile	/^POST_UNINSTALL = :$/;"	m
PREVECTOR_SIZE	src/bench/checkqueue.cpp	/^static const int PREVECTOR_SIZE = 28;$/;"	v	file:
PREVECTOR_TEST	src/bench/prevector.cpp	/^#define PREVECTOR_TEST(/;"	d	file:
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	doc/man/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	src/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	src/secp256k1/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	src/univalue/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	doc/man/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	src/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	src/secp256k1/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	src/univalue/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIVATE_KEY_SIZE	src/key.h	/^    static const unsigned int PRIVATE_KEY_SIZE            = 279;$/;"	m	class:CKey
PRIVKEY	contrib/testgen/gen_key_io_test_vectors.py	/^PRIVKEY = 128$/;"	v
PRIVKEY_REGTEST	contrib/testgen/gen_key_io_test_vectors.py	/^PRIVKEY_REGTEST = 239$/;"	v
PRIVKEY_TEST	contrib/testgen/gen_key_io_test_vectors.py	/^PRIVKEY_TEST = 239$/;"	v
PROGNAMES	src/leveldb/Makefile	/^PROGNAMES := $(notdir $(TESTS) $(UTILS))$/;"	m
PROGRAMS	src/Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROGRAMS	src/secp256k1/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROGRAMS	src/univalue/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROTOBUF_CFLAGS	Makefile	/^PROTOBUF_CFLAGS = $/;"	m
PROTOBUF_CFLAGS	doc/man/Makefile	/^PROTOBUF_CFLAGS = $/;"	m
PROTOBUF_CFLAGS	src/Makefile	/^PROTOBUF_CFLAGS = $/;"	m
PROTOBUF_LIBS	Makefile	/^PROTOBUF_LIBS = $/;"	m
PROTOBUF_LIBS	doc/man/Makefile	/^PROTOBUF_LIBS = $/;"	m
PROTOBUF_LIBS	src/Makefile	/^PROTOBUF_LIBS = $/;"	m
PROTOC	Makefile	/^PROTOC = $/;"	m
PROTOC	doc/man/Makefile	/^PROTOC = $/;"	m
PROTOC	src/Makefile	/^PROTOC = $/;"	m
PROTOCOL_VERSION	src/version.h	/^static const int PROTOCOL_VERSION = 70015;$/;"	v
PRUNED	src/test/coins_tests.cpp	/^const static CAmount PRUNED = -1;$/;"	v	file:
PSBTAnalysis	src/node/psbt.h	/^struct PSBTAnalysis {$/;"	s
PSBTInput	src/psbt.h	/^    PSBTInput() {}$/;"	f	struct:PSBTInput
PSBTInput	src/psbt.h	/^    PSBTInput(deserialize_type, Stream& s) {$/;"	f	struct:PSBTInput
PSBTInput	src/psbt.h	/^struct PSBTInput$/;"	s
PSBTInputAnalysis	src/node/psbt.h	/^struct PSBTInputAnalysis {$/;"	s
PSBTInputSigned	src/psbt.cpp	/^bool PSBTInputSigned(const PSBTInput& input)$/;"	f
PSBTOutput	src/psbt.h	/^    PSBTOutput() {}$/;"	f	struct:PSBTOutput
PSBTOutput	src/psbt.h	/^    PSBTOutput(deserialize_type, Stream& s) {$/;"	f	struct:PSBTOutput
PSBTOutput	src/psbt.h	/^struct PSBTOutput$/;"	s
PSBTRole	src/psbt.h	/^enum class PSBTRole {$/;"	c
PSBTRoleName	src/psbt.cpp	/^std::string PSBTRoleName(PSBTRole role) {$/;"	f
PSBTTest	test/functional/rpc_psbt.py	/^class PSBTTest(BitcoinTestFramework):$/;"	c
PSBT_GLOBAL_UNSIGNED_TX	src/psbt.h	/^static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;$/;"	v
PSBT_IN_BIP32_DERIVATION	src/psbt.h	/^static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;$/;"	v
PSBT_IN_NON_WITNESS_UTXO	src/psbt.h	/^static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;$/;"	v
PSBT_IN_PARTIAL_SIG	src/psbt.h	/^static constexpr uint8_t PSBT_IN_PARTIAL_SIG = 0x02;$/;"	v
PSBT_IN_REDEEMSCRIPT	src/psbt.h	/^static constexpr uint8_t PSBT_IN_REDEEMSCRIPT = 0x04;$/;"	v
PSBT_IN_SCRIPTSIG	src/psbt.h	/^static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;$/;"	v
PSBT_IN_SCRIPTWITNESS	src/psbt.h	/^static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;$/;"	v
PSBT_IN_SIGHASH	src/psbt.h	/^static constexpr uint8_t PSBT_IN_SIGHASH = 0x03;$/;"	v
PSBT_IN_WITNESSSCRIPT	src/psbt.h	/^static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;$/;"	v
PSBT_IN_WITNESS_UTXO	src/psbt.h	/^static constexpr uint8_t PSBT_IN_WITNESS_UTXO = 0x01;$/;"	v
PSBT_MAGIC_BYTES	src/psbt.h	/^static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};$/;"	v
PSBT_MISMATCH	src/util/error.h	/^    PSBT_MISMATCH,$/;"	m	class:TransactionError
PSBT_OUT_BIP32_DERIVATION	src/psbt.h	/^static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;$/;"	v
PSBT_OUT_REDEEMSCRIPT	src/psbt.h	/^static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;$/;"	v
PSBT_OUT_WITNESSSCRIPT	src/psbt.h	/^static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;$/;"	v
PSBT_SEPARATOR	src/psbt.h	/^static constexpr uint8_t PSBT_SEPARATOR = 0x00;$/;"	v
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CC	doc/man/Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CC	src/Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_CFLAGS	doc/man/Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_CFLAGS	src/Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS = $/;"	m
PTHREAD_LIBS	doc/man/Makefile	/^PTHREAD_LIBS = $/;"	m
PTHREAD_LIBS	src/Makefile	/^PTHREAD_LIBS = $/;"	m
PT_GUARDED_BY	src/threadsafety.h	/^#define PT_GUARDED_BY(/;"	d
PT_GUARDED_VAR	src/threadsafety.h	/^#define PT_GUARDED_VAR /;"	d
PT_GUARDED_VAR	src/threadsafety.h	/^#define PT_GUARDED_VAR$/;"	d
PUBKEY_ADDRESS	contrib/testgen/gen_key_io_test_vectors.py	/^PUBKEY_ADDRESS = 0$/;"	v
PUBKEY_ADDRESS	src/chainparams.h	/^        PUBKEY_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
PUBKEY_ADDRESS_REGTEST	contrib/testgen/gen_key_io_test_vectors.py	/^PUBKEY_ADDRESS_REGTEST = 111$/;"	v
PUBKEY_ADDRESS_TEST	contrib/testgen/gen_key_io_test_vectors.py	/^PUBKEY_ADDRESS_TEST = 111$/;"	v
PUBLIC_KEY_SIZE	src/pubkey.h	/^    static constexpr unsigned int PUBLIC_KEY_SIZE             = 65;$/;"	m	class:CPubKey
PUT	src/httpserver.h	/^        PUT$/;"	e	enum:HTTPRequest::RequestMethod
PYTHON	Makefile	/^PYTHON = \/usr\/local\/bin\/python3.6$/;"	m
PYTHON	doc/man/Makefile	/^PYTHON = \/usr\/local\/bin\/python3.6$/;"	m
PYTHON	src/Makefile	/^PYTHON = \/usr\/local\/bin\/python3.6$/;"	m
PYTHONPATH	Makefile	/^PYTHONPATH = $/;"	m
PYTHONPATH	doc/man/Makefile	/^PYTHONPATH = $/;"	m
PYTHONPATH	src/Makefile	/^PYTHONPATH = $/;"	m
PackSequenceAndType	src/leveldb/db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
ParameterInteraction	src/wallet/init.cpp	/^bool WalletInit::ParameterInteraction() const$/;"	f	class:WalletInit
Params	src/blockfilter.h	/^        Params(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 1)$/;"	f	struct:GCSFilter::Params
Params	src/blockfilter.h	/^    struct Params$/;"	s	class:GCSFilter
Params	src/chainparams.cpp	/^const CChainParams &Params() {$/;"	f
Params	src/consensus/params.h	/^struct Params {$/;"	s	namespace:Consensus
Parse	src/script/descriptor.cpp	/^std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)$/;"	f
ParseConfirmTarget	src/rpc/util.cpp	/^unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)$/;"	f
ParseDataFormat	src/rest.cpp	/^static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)$/;"	f	file:
ParseDescriptorRange	src/rpc/util.cpp	/^std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value)$/;"	f
ParseDouble	src/univalue/lib/univalue_get.cpp	/^bool ParseDouble(const std::string& str, double *out)$/;"	f	namespace:__anon125
ParseDouble	src/util/strencodings.cpp	/^bool ParseDouble(const std::string& str, double *out)$/;"	f
ParseFileName	src/leveldb/db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseFixedPoint	src/util/strencodings.cpp	/^bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)$/;"	f
ParseHDKeypath	src/util/bip32.cpp	/^bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)$/;"	f
ParseHashO	src/rpc/util.cpp	/^uint256 ParseHashO(const UniValue& o, std::string strKey)$/;"	f
ParseHashStr	src/core_read.cpp	/^bool ParseHashStr(const std::string& strHex, uint256& result)$/;"	f
ParseHashV	src/rpc/util.cpp	/^uint256 ParseHashV(const UniValue& v, std::string strName)$/;"	f
ParseHex	src/util/strencodings.cpp	/^std::vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	src/util/strencodings.cpp	/^std::vector<unsigned char> ParseHex(const std::string& str)$/;"	f
ParseHexO	src/rpc/util.cpp	/^std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)$/;"	f
ParseHexUV	src/core_read.cpp	/^std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)$/;"	f
ParseHexV	src/rpc/util.cpp	/^std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)$/;"	f
ParseHex_expected	src/test/util_tests.cpp	/^static const unsigned char ParseHex_expected[65] = {$/;"	v	file:
ParseInt32	src/univalue/lib/univalue_get.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f	namespace:__anon125
ParseInt32	src/util/strencodings.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f
ParseInt64	src/univalue/lib/univalue_get.cpp	/^bool ParseInt64(const std::string& str, int64_t *out)$/;"	f	namespace:__anon125
ParseInt64	src/util/strencodings.cpp	/^bool ParseInt64(const std::string& str, int64_t *out)$/;"	f
ParseInternalKey	src/leveldb/db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	src/leveldb/db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon29::DBIter
ParseKeyPath	src/script/descriptor.cpp	/^NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)$/;"	f	namespace:__anon75
ParseMoney	src/util/moneystr.cpp	/^bool ParseMoney(const char* pszIn, CAmount& nRet)$/;"	f
ParseMoney	src/util/moneystr.cpp	/^bool ParseMoney(const std::string& str, CAmount& nRet)$/;"	f
ParseNetwork	src/netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
ParseNextKey	src/leveldb/table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParseNonRFCJSONValue	src/rpc/client.cpp	/^UniValue ParseNonRFCJSONValue(const std::string& strVal)$/;"	f
ParseOutputType	src/outputtype.cpp	/^bool ParseOutputType(const std::string& type, OutputType& output_type)$/;"	f
ParseParameters	src/util/system.cpp	/^bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)$/;"	f	class:ArgsManager
ParsePrechecks	src/univalue/lib/univalue_get.cpp	/^static bool ParsePrechecks(const std::string& str)$/;"	f	namespace:__anon125
ParsePrechecks	src/util/strencodings.cpp	/^NODISCARD static bool ParsePrechecks(const std::string& str)$/;"	f	file:
ParsePubkey	src/script/descriptor.cpp	/^std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)$/;"	f	namespace:__anon75
ParsePubkeyInner	src/script/descriptor.cpp	/^std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)$/;"	f	namespace:__anon75
ParseRange	src/rpc/util.cpp	/^static std::pair<int64_t, int64_t> ParseRange(const UniValue& value)$/;"	f	file:
ParseScript	src/core_read.cpp	/^CScript ParseScript(const std::string& s)$/;"	f
ParseScript	src/script/descriptor.cpp	/^std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)$/;"	f	namespace:__anon75
ParseScriptContext	src/script/descriptor.cpp	/^enum class ParseScriptContext {$/;"	c	namespace:__anon75	file:
ParseScriptError	src/test/script_tests.cpp	/^static ScriptError_t ParseScriptError(const std::string &name)$/;"	f	file:
ParseScriptFlags	src/test/transaction_tests.cpp	/^unsigned int ParseScriptFlags(std::string strFlags)$/;"	f
ParseSighashString	src/core_read.cpp	/^int ParseSighashString(const UniValue& sighash)$/;"	f
ParseTorReplyMapping	src/torcontrol.cpp	/^std::map<std::string,std::string> ParseTorReplyMapping(const std::string &s)$/;"	f
ParseUInt32	src/util/strencodings.cpp	/^bool ParseUInt32(const std::string& str, uint32_t *out)$/;"	f
ParseUInt64	src/util/strencodings.cpp	/^bool ParseUInt64(const std::string& str, uint64_t *out)$/;"	f
ParsedInternalKey	src/leveldb/db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	src/leveldb/db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	src/leveldb/db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
PartialCompactTestPreFault	src/leveldb/db/fault_injection_test.cc	/^  void PartialCompactTestPreFault(int num_pre_sync, int num_post_sync) {$/;"	f	class:leveldb::FaultInjectionTest
PartialCompactTestReopenWithFault	src/leveldb/db/fault_injection_test.cc	/^  void PartialCompactTestReopenWithFault(ResetMethod reset_method,$/;"	f	class:leveldb::FaultInjectionTest
PartiallyDownloadedBlock	src/blockencodings.h	/^    explicit PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}$/;"	f	class:PartiallyDownloadedBlock
PartiallyDownloadedBlock	src/blockencodings.h	/^class PartiallyDownloadedBlock {$/;"	c
PartiallySignedTransaction	src/psbt.cpp	/^PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)$/;"	f	class:PartiallySignedTransaction
PartiallySignedTransaction	src/psbt.h	/^    PartiallySignedTransaction() {}$/;"	f	struct:PartiallySignedTransaction
PartiallySignedTransaction	src/psbt.h	/^    PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}$/;"	f	struct:PartiallySignedTransaction
PartiallySignedTransaction	src/psbt.h	/^    PartiallySignedTransaction(deserialize_type, Stream& s) {$/;"	f	struct:PartiallySignedTransaction
PartiallySignedTransaction	src/psbt.h	/^struct PartiallySignedTransaction$/;"	s
PaymentRequestExpired	src/qt/walletmodel.h	/^        PaymentRequestExpired$/;"	e	enum:WalletModel::StatusCode
PaymentRequestPlus	src/qt/paymentrequestplus.h	/^    PaymentRequestPlus() { }$/;"	f	class:PaymentRequestPlus
PaymentRequestPlus	src/qt/paymentrequestplus.h	/^class PaymentRequestPlus$/;"	c
PaymentServer	src/qt/paymentserver.cpp	/^PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :$/;"	f	class:PaymentServer
PaymentServer	src/qt/paymentserver.h	/^class PaymentServer : public QObject$/;"	c
PaymentServerTests	src/qt/test/paymentservertests.h	/^class PaymentServerTests : public QObject$/;"	c
PeerLogicValidation	src/net_processing.cpp	/^PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler &scheduler, bool enable_bip61)$/;"	f	class:PeerLogicValidation
PeerTableModel	src/qt/peertablemodel.cpp	/^PeerTableModel::PeerTableModel(interfaces::Node& node, ClientModel *parent) :$/;"	f	class:PeerTableModel
PeerTableModel	src/qt/peertablemodel.h	/^class PeerTableModel : public QAbstractTableModel$/;"	c
PeerTablePriv	src/qt/peertablemodel.cpp	/^class PeerTablePriv$/;"	c	file:
PendingWalletTx	src/interfaces/wallet.h	/^class PendingWalletTx$/;"	c	namespace:interfaces
PendingWalletTxImpl	src/interfaces/wallet.cpp	/^    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}$/;"	f	class:interfaces::__anon130::PendingWalletTxImpl
PendingWalletTxImpl	src/interfaces/wallet.cpp	/^class PendingWalletTxImpl : public PendingWalletTx$/;"	c	namespace:interfaces::__anon130	file:
PerBlockConnectTrace	src/validation.cpp	/^    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}$/;"	f	struct:PerBlockConnectTrace
PerBlockConnectTrace	src/validation.cpp	/^struct PerBlockConnectTrace {$/;"	s	file:
Percentile	src/leveldb/util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PeriodicFlush	src/wallet/db.cpp	/^bool BerkeleyBatch::PeriodicFlush(BerkeleyDatabase& database)$/;"	f	class:BerkeleyBatch
PermitsUncompressed	src/script/ismine.cpp	/^bool PermitsUncompressed(IsMineSigVersion sigversion)$/;"	f	namespace:__anon85
PickCompaction	src/leveldb/db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	src/leveldb/db/version_set.cc	/^int Version::PickLevelForMemTableOutput($/;"	f	class:leveldb::Version
PickRandomKey	src/leveldb/table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
Pillow	contrib/devtools/optimize-pngs.py	/^from PIL import Image  # pip3 install Pillow$/;"	i
Ping	src/qt/peertablemodel.h	/^        Ping = 2,$/;"	e	enum:PeerTableModel::ColumnIndex
PlatformStyle	src/qt/platformstyle.cpp	/^PlatformStyle::PlatformStyle(const QString &_name, bool _imagesOnButtons, bool _colorizeIcons, bool _useExtraSpacing):$/;"	f	class:PlatformStyle
PlatformStyle	src/qt/platformstyle.h	/^class PlatformStyle$/;"	c
PlotlyPrinter	src/bench/bench.cpp	/^benchmark::PlotlyPrinter::PlotlyPrinter(std::string plotly_url, int64_t width, int64_t height)$/;"	f	class:benchmark::PlotlyPrinter
PlotlyPrinter	src/bench/bench.h	/^class PlotlyPrinter : public Printer$/;"	c	namespace:benchmark
PoissonNextSend	src/net.cpp	/^int64_t PoissonNextSend(int64_t now, int average_interval_seconds)$/;"	f
PoissonNextSendInbound	src/net.cpp	/^int64_t CConnman::PoissonNextSendInbound(int64_t now, int average_interval_seconds)$/;"	f	class:CConnman
PolishProgressDialog	src/qt/guiutil.cpp	/^void PolishProgressDialog(QProgressDialog* dialog)$/;"	f	namespace:GUIUtil
PolyMod	src/bech32.cpp	/^uint32_t PolyMod(const data& v)$/;"	f	namespace:__anon116
PolyMod	src/script/descriptor.cpp	/^uint64_t PolyMod(uint64_t c, int val)$/;"	f	namespace:__anon75
Popen	share/qt/extract_strings_qt.py	/^from subprocess import Popen, PIPE$/;"	i
PortSeed	test/functional/test_framework/util.py	/^class PortSeed:$/;"	c
PosixEnv	src/leveldb/util/env_posix.cc	/^PosixEnv::PosixEnv()$/;"	f	class:leveldb::__anon8::PosixEnv
PosixEnv	src/leveldb/util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon8	file:
PosixFileLock	src/leveldb/util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon8	file:
PosixLockTable	src/leveldb/util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon8	file:
PosixLockedPageAllocator	src/support/lockedpool.cpp	/^PosixLockedPageAllocator::PosixLockedPageAllocator()$/;"	f	class:PosixLockedPageAllocator
PosixLockedPageAllocator	src/support/lockedpool.cpp	/^class PosixLockedPageAllocator: public LockedPageAllocator$/;"	c	file:
PosixLogger	src/leveldb/util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	src/leveldb/util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapReadableFile	src/leveldb/util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length,$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
PosixMmapReadableFile	src/leveldb/util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon8	file:
PosixRandomAccessFile	src/leveldb/util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd, Limiter* limiter)$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
PosixRandomAccessFile	src/leveldb/util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon8	file:
PosixSequentialFile	src/leveldb/util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon8::PosixSequentialFile
PosixSequentialFile	src/leveldb/util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon8	file:
PosixWritableFile	src/leveldb/util/env_posix.cc	/^  PosixWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon8::PosixWritableFile
PosixWritableFile	src/leveldb/util/env_posix.cc	/^class PosixWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon8	file:
PreciousBlock	src/validation.cpp	/^bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)$/;"	f	class:CChainState
PreciousBlock	src/validation.cpp	/^bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) {$/;"	f
PreciousTest	test/functional/rpc_preciousblock.py	/^class PreciousTest(BitcoinTestFramework):$/;"	c
PrecomputedTransactionData	src/script/interpreter.cpp	/^PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)$/;"	f	class:PrecomputedTransactionData
PrecomputedTransactionData	src/script/interpreter.h	/^struct PrecomputedTransactionData$/;"	s
PrefilledTransaction	src/blockencodings.h	/^struct PrefilledTransaction {$/;"	s
PrefilledTransaction	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
PrefilledTransaction	test/functional/test_framework/messages.py	/^class PrefilledTransaction:$/;"	c
PrepareBlock	src/test/util.cpp	/^std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)$/;"	f
Prev	src/leveldb/db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon29::DBIter
Prev	src/leveldb/db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	src/leveldb/db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	src/leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	src/leveldb/db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	src/leveldb/table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	src/leveldb/table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon12::EmptyIterator
Prev	src/leveldb/table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	src/leveldb/table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon11::MergingIterator
Prev	src/leveldb/table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
PrevLogNumber	src/leveldb/db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrevectorClear	src/bench/prevector.cpp	/^static void PrevectorClear(benchmark::State& state)$/;"	f	file:
PrevectorDeserialize	src/bench/prevector.cpp	/^static void PrevectorDeserialize(benchmark::State& state)$/;"	f	file:
PrevectorDestructor	src/bench/prevector.cpp	/^static void PrevectorDestructor(benchmark::State& state)$/;"	f	file:
PrevectorResize	src/bench/prevector.cpp	/^static void PrevectorResize(benchmark::State& state)$/;"	f	file:
PrintContents	src/leveldb/db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	src/leveldb/db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintExceptionContinue	src/util/system.cpp	/^void PrintExceptionContinue(const std::exception* pex, const char* pszThread)$/;"	f
PrintHeader	src/leveldb/db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLockContention	src/sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
PrintLogContents	src/leveldb/db/dumpfile.cc	/^Status PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon27
PrintStats	src/leveldb/db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	src/leveldb/db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
Printer	src/bench/bench.h	/^class Printer$/;"	c	namespace:benchmark
PrioritiseTransaction	src/txmempool.cpp	/^void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)$/;"	f	class:CTxMemPool
PrioritiseTransactionTest	test/functional/mining_prioritisetransaction.py	/^class PrioritiseTransactionTest(BitcoinTestFramework):$/;"	c
ProcRand	src/random.cpp	/^static void ProcRand(unsigned char* out, int num, RNGLevel level)$/;"	f	file:
ProcessGetBlockData	src/net_processing.cpp	/^void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, const CInv& inv, CConnman* connman)$/;"	f	file:
ProcessHeadersMessage	src/net_processing.cpp	/^bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)$/;"	f	file:
ProcessImportDescriptor	src/wallet/rpcdump.cpp	/^static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)$/;"	f	file:
ProcessImportLegacy	src/wallet/rpcdump.cpp	/^static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)$/;"	f	file:
ProcessMantissaDigit	src/util/strencodings.cpp	/^static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)$/;"	f	file:
ProcessMessage	src/net_processing.cpp	/^bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)$/;"	f	file:
ProcessMessages	src/net_processing.cpp	/^bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)$/;"	f	class:PeerLogicValidation
ProcessNewBlock	src/validation.cpp	/^bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)$/;"	f
ProcessNewBlockHeaders	src/validation.cpp	/^bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex, CBlockHeader *first_invalid)$/;"	f
ProcessOneShot	src/net.cpp	/^void CConnman::ProcessOneShot()$/;"	f	class:CConnman
ProcessQueue	src/scheduler.cpp	/^void SingleThreadedSchedulerClient::ProcessQueue() {$/;"	f	class:SingleThreadedSchedulerClient
ProcessSubScript	src/wallet/rpcwallet.cpp	/^    void ProcessSubScript(const CScript& subscript, UniValue& obj) const$/;"	f	class:DescribeWalletAddressVisitor
ProduceSignature	src/script/sign.cpp	/^bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)$/;"	f
ProgressBar	src/qt/guiutil.h	/^    typedef ClickableProgressBar ProgressBar;$/;"	t	namespace:GUIUtil
Property	src/leveldb/db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
ProxyAddressValidator	src/qt/optionsdialog.cpp	/^ProxyAddressValidator::ProxyAddressValidator(QObject *parent) :$/;"	f	class:ProxyAddressValidator
ProxyAddressValidator	src/qt/optionsdialog.h	/^class ProxyAddressValidator : public QValidator$/;"	c
ProxyCredentials	src/netbase.cpp	/^struct ProxyCredentials$/;"	s	file:
ProxyIP	src/qt/optionsmodel.h	/^        ProxyIP,                \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ProxyIPTor	src/qt/optionsmodel.h	/^        ProxyIPTor,             \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ProxyPort	src/qt/optionsmodel.h	/^        ProxyPort,              \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxyPortTor	src/qt/optionsmodel.h	/^        ProxyPortTor,           \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxySetting	src/qt/optionsmodel.cpp	/^struct ProxySetting {$/;"	s	file:
ProxyTest	test/functional/feature_proxy.py	/^class ProxyTest(BitcoinTestFramework):$/;"	c
ProxyUse	src/qt/optionsmodel.h	/^        ProxyUse,               \/\/ bool$/;"	e	enum:OptionsModel::OptionID
ProxyUseTor	src/qt/optionsmodel.h	/^        ProxyUseTor,            \/\/ bool$/;"	e	enum:OptionsModel::OptionID
Prune	src/leveldb/include/leveldb/cache.h	/^  virtual void Prune() {}$/;"	f	class:leveldb::Cache
Prune	src/leveldb/util/cache.cc	/^  virtual void Prune() {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Prune	src/leveldb/util/cache.cc	/^void LRUCache::Prune() {$/;"	f	class:leveldb::__anon4::LRUCache
Prune	src/qt/optionsmodel.h	/^        Prune,                  \/\/ bool$/;"	e	enum:OptionsModel::OptionID
PruneAfterHeight	src/chainparams.h	/^    uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }$/;"	f	class:CChainParams
PruneAndFlush	src/validation.cpp	/^void PruneAndFlush() {$/;"	f
PruneBlockFilesManual	src/validation.cpp	/^void PruneBlockFilesManual(int nManualPruneHeight)$/;"	f
PruneBlockIndexCandidates	src/validation.cpp	/^void CChainState::PruneBlockIndexCandidates() {$/;"	f	class:CChainState
PruneOneBlockFile	src/validation.cpp	/^void PruneOneBlockFile(const int fileNumber)$/;"	f
PruneSize	src/qt/optionsmodel.h	/^        PruneSize,              \/\/ int$/;"	e	enum:OptionsModel::OptionID
PruneTest	test/functional/feature_pruning.py	/^class PruneTest(BitcoinTestFramework):$/;"	c
PthreadCall	src/leveldb/port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	src/leveldb/util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon8::PosixEnv	file:
PubkeyProvider	src/script/descriptor.cpp	/^struct PubkeyProvider$/;"	s	namespace:__anon75	file:
Push	src/rpc/util.cpp	/^    void Push(const RPCArg& arg, const size_t current_indent = 5, const OuterType outer_type = OuterType::NAMED_ARG)$/;"	f	struct:Sections
Push	src/test/script_tests.cpp	/^    TestBuilder& Push(const CPubKey& pubkey)$/;"	f	class:__anon58::TestBuilder
Push	src/test/script_tests.cpp	/^    TestBuilder& Push(const CScript& _script) {$/;"	f	class:__anon58::TestBuilder
Push	src/test/script_tests.cpp	/^    TestBuilder& Push(const std::string& hex)$/;"	f	class:__anon58::TestBuilder
PushAddress	src/net.h	/^    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)$/;"	f	class:CNode
PushAll	src/script/sign.cpp	/^static CScript PushAll(const std::vector<valtype>& values)$/;"	f	file:
PushAll	src/test/transaction_tests.cpp	/^static CScript PushAll(const std::vector<valtype>& values)$/;"	f	file:
PushBlockHash	src/net.h	/^    void PushBlockHash(const uint256 &hash)$/;"	f	class:CNode
PushInventory	src/net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	src/net.cpp	/^void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)$/;"	f	class:CConnman
PushNodeVersion	src/net_processing.cpp	/^static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)$/;"	f	namespace:__anon89
PushRedeem	src/test/script_tests.cpp	/^    TestBuilder& PushRedeem()$/;"	f	class:__anon58::TestBuilder
PushSection	src/rpc/util.cpp	/^    void PushSection(const Section& s)$/;"	f	struct:Sections
PushSig	src/test/script_tests.cpp	/^    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SigVersion::BASE, CAmount amount = 0)$/;"	f	class:__anon58::TestBuilder
PushWitRedeem	src/test/script_tests.cpp	/^    TestBuilder& PushWitRedeem()$/;"	f	class:__anon58::TestBuilder
PushWitSig	src/test/script_tests.cpp	/^    TestBuilder& PushWitSig(const CKey& key, CAmount amount = -1, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SigVersion::WITNESS_V0)$/;"	f	class:__anon58::TestBuilder
Put	src/leveldb/db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	src/leveldb/db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	src/leveldb/db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	src/leveldb/db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	src/leveldb/db/dumpfile.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon27::WriteBatchItemPrinter
Put	src/leveldb/db/recovery_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::RecoveryTest
Put	src/leveldb/db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon22::MemTableInserter
Put	src/leveldb/db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	src/leveldb/util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	src/leveldb/util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	src/leveldb/util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	src/leveldb/util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	src/leveldb/util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
QAPP_APP_NAME_DEFAULT	src/qt/guiconstants.h	/^#define QAPP_APP_NAME_DEFAULT /;"	d
QAPP_APP_NAME_REGTEST	src/qt/guiconstants.h	/^#define QAPP_APP_NAME_REGTEST /;"	d
QAPP_APP_NAME_TESTNET	src/qt/guiconstants.h	/^#define QAPP_APP_NAME_TESTNET /;"	d
QAPP_ORG_DOMAIN	src/qt/guiconstants.h	/^#define QAPP_ORG_DOMAIN /;"	d
QAPP_ORG_NAME	src/qt/guiconstants.h	/^#define QAPP_ORG_NAME /;"	d
QCocoaIntegrationPlugin	src/qt/bitcoin.cpp	/^Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);$/;"	v
QCocoaIntegrationPlugin	src/qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);$/;"	v
QMinimalIntegrationPlugin	src/qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin);$/;"	v
QRImageWidget	src/qt/qrimagewidget.cpp	/^QRImageWidget::QRImageWidget(QWidget *parent):$/;"	f	class:QRImageWidget
QRImageWidget	src/qt/qrimagewidget.h	/^class QRImageWidget : public QLabel$/;"	c
QR_CFLAGS	Makefile	/^QR_CFLAGS = $/;"	m
QR_CFLAGS	doc/man/Makefile	/^QR_CFLAGS = $/;"	m
QR_CFLAGS	src/Makefile	/^QR_CFLAGS = $/;"	m
QR_IMAGE_SIZE	src/qt/qrimagewidget.h	/^static const int QR_IMAGE_SIZE = 300;$/;"	v
QR_LIBS	Makefile	/^QR_LIBS = $/;"	m
QR_LIBS	doc/man/Makefile	/^QR_LIBS = $/;"	m
QR_LIBS	src/Makefile	/^QR_LIBS = $/;"	m
QSystemTray	src/qt/notificator.h	/^        QSystemTray,                \/**< Use QSystemTrayIcon::showMessage() *\/$/;"	e	enum:Notificator::Mode
QT5_CFLAGS	Makefile	/^QT5_CFLAGS = $/;"	m
QT5_CFLAGS	doc/man/Makefile	/^QT5_CFLAGS = $/;"	m
QT5_CFLAGS	src/Makefile	/^QT5_CFLAGS = $/;"	m
QT5_LIBS	Makefile	/^QT5_LIBS = $/;"	m
QT5_LIBS	doc/man/Makefile	/^QT5_LIBS = $/;"	m
QT5_LIBS	src/Makefile	/^QT5_LIBS = $/;"	m
QTACCESSIBILITY_CFLAGS	Makefile	/^QTACCESSIBILITY_CFLAGS = $/;"	m
QTACCESSIBILITY_CFLAGS	doc/man/Makefile	/^QTACCESSIBILITY_CFLAGS = $/;"	m
QTACCESSIBILITY_CFLAGS	src/Makefile	/^QTACCESSIBILITY_CFLAGS = $/;"	m
QTACCESSIBILITY_LIBS	Makefile	/^QTACCESSIBILITY_LIBS = $/;"	m
QTACCESSIBILITY_LIBS	doc/man/Makefile	/^QTACCESSIBILITY_LIBS = $/;"	m
QTACCESSIBILITY_LIBS	src/Makefile	/^QTACCESSIBILITY_LIBS = $/;"	m
QTCGL_CFLAGS	Makefile	/^QTCGL_CFLAGS = $/;"	m
QTCGL_CFLAGS	doc/man/Makefile	/^QTCGL_CFLAGS = $/;"	m
QTCGL_CFLAGS	src/Makefile	/^QTCGL_CFLAGS = $/;"	m
QTCGL_LIBS	Makefile	/^QTCGL_LIBS = $/;"	m
QTCGL_LIBS	doc/man/Makefile	/^QTCGL_LIBS = $/;"	m
QTCGL_LIBS	src/Makefile	/^QTCGL_LIBS = $/;"	m
QTCLIPBOARD_CFLAGS	Makefile	/^QTCLIPBOARD_CFLAGS = $/;"	m
QTCLIPBOARD_CFLAGS	doc/man/Makefile	/^QTCLIPBOARD_CFLAGS = $/;"	m
QTCLIPBOARD_CFLAGS	src/Makefile	/^QTCLIPBOARD_CFLAGS = $/;"	m
QTCLIPBOARD_LIBS	Makefile	/^QTCLIPBOARD_LIBS = $/;"	m
QTCLIPBOARD_LIBS	doc/man/Makefile	/^QTCLIPBOARD_LIBS = $/;"	m
QTCLIPBOARD_LIBS	src/Makefile	/^QTCLIPBOARD_LIBS = $/;"	m
QTDEVICEDISCOVERY_CFLAGS	Makefile	/^QTDEVICEDISCOVERY_CFLAGS = $/;"	m
QTDEVICEDISCOVERY_CFLAGS	doc/man/Makefile	/^QTDEVICEDISCOVERY_CFLAGS = $/;"	m
QTDEVICEDISCOVERY_CFLAGS	src/Makefile	/^QTDEVICEDISCOVERY_CFLAGS = $/;"	m
QTDEVICEDISCOVERY_LIBS	Makefile	/^QTDEVICEDISCOVERY_LIBS = $/;"	m
QTDEVICEDISCOVERY_LIBS	doc/man/Makefile	/^QTDEVICEDISCOVERY_LIBS = $/;"	m
QTDEVICEDISCOVERY_LIBS	src/Makefile	/^QTDEVICEDISCOVERY_LIBS = $/;"	m
QTEVENTDISPATCHER_CFLAGS	Makefile	/^QTEVENTDISPATCHER_CFLAGS = $/;"	m
QTEVENTDISPATCHER_CFLAGS	doc/man/Makefile	/^QTEVENTDISPATCHER_CFLAGS = $/;"	m
QTEVENTDISPATCHER_CFLAGS	src/Makefile	/^QTEVENTDISPATCHER_CFLAGS = $/;"	m
QTEVENTDISPATCHER_LIBS	Makefile	/^QTEVENTDISPATCHER_LIBS = $/;"	m
QTEVENTDISPATCHER_LIBS	doc/man/Makefile	/^QTEVENTDISPATCHER_LIBS = $/;"	m
QTEVENTDISPATCHER_LIBS	src/Makefile	/^QTEVENTDISPATCHER_LIBS = $/;"	m
QTFB_CFLAGS	Makefile	/^QTFB_CFLAGS = $/;"	m
QTFB_CFLAGS	doc/man/Makefile	/^QTFB_CFLAGS = $/;"	m
QTFB_CFLAGS	src/Makefile	/^QTFB_CFLAGS = $/;"	m
QTFB_LIBS	Makefile	/^QTFB_LIBS = $/;"	m
QTFB_LIBS	doc/man/Makefile	/^QTFB_LIBS = $/;"	m
QTFB_LIBS	src/Makefile	/^QTFB_LIBS = $/;"	m
QTFONTDATABASE_CFLAGS	Makefile	/^QTFONTDATABASE_CFLAGS = $/;"	m
QTFONTDATABASE_CFLAGS	doc/man/Makefile	/^QTFONTDATABASE_CFLAGS = $/;"	m
QTFONTDATABASE_CFLAGS	src/Makefile	/^QTFONTDATABASE_CFLAGS = $/;"	m
QTFONTDATABASE_LIBS	Makefile	/^QTFONTDATABASE_LIBS = $/;"	m
QTFONTDATABASE_LIBS	doc/man/Makefile	/^QTFONTDATABASE_LIBS = $/;"	m
QTFONTDATABASE_LIBS	src/Makefile	/^QTFONTDATABASE_LIBS = $/;"	m
QTGRAPHICS_CFLAGS	Makefile	/^QTGRAPHICS_CFLAGS = $/;"	m
QTGRAPHICS_CFLAGS	doc/man/Makefile	/^QTGRAPHICS_CFLAGS = $/;"	m
QTGRAPHICS_CFLAGS	src/Makefile	/^QTGRAPHICS_CFLAGS = $/;"	m
QTGRAPHICS_LIBS	Makefile	/^QTGRAPHICS_LIBS = $/;"	m
QTGRAPHICS_LIBS	doc/man/Makefile	/^QTGRAPHICS_LIBS = $/;"	m
QTGRAPHICS_LIBS	src/Makefile	/^QTGRAPHICS_LIBS = $/;"	m
QTPLATFORM_CFLAGS	Makefile	/^QTPLATFORM_CFLAGS = $/;"	m
QTPLATFORM_CFLAGS	doc/man/Makefile	/^QTPLATFORM_CFLAGS = $/;"	m
QTPLATFORM_CFLAGS	src/Makefile	/^QTPLATFORM_CFLAGS = $/;"	m
QTPLATFORM_LIBS	Makefile	/^QTPLATFORM_LIBS = $/;"	m
QTPLATFORM_LIBS	doc/man/Makefile	/^QTPLATFORM_LIBS = $/;"	m
QTPLATFORM_LIBS	src/Makefile	/^QTPLATFORM_LIBS = $/;"	m
QTTHEME_CFLAGS	Makefile	/^QTTHEME_CFLAGS = $/;"	m
QTTHEME_CFLAGS	doc/man/Makefile	/^QTTHEME_CFLAGS = $/;"	m
QTTHEME_CFLAGS	src/Makefile	/^QTTHEME_CFLAGS = $/;"	m
QTTHEME_LIBS	Makefile	/^QTTHEME_LIBS = $/;"	m
QTTHEME_LIBS	doc/man/Makefile	/^QTTHEME_LIBS = $/;"	m
QTTHEME_LIBS	src/Makefile	/^QTTHEME_LIBS = $/;"	m
QTXCBQPA_CFLAGS	Makefile	/^QTXCBQPA_CFLAGS = $/;"	m
QTXCBQPA_CFLAGS	doc/man/Makefile	/^QTXCBQPA_CFLAGS = $/;"	m
QTXCBQPA_CFLAGS	src/Makefile	/^QTXCBQPA_CFLAGS = $/;"	m
QTXCBQPA_LIBS	Makefile	/^QTXCBQPA_LIBS = $/;"	m
QTXCBQPA_LIBS	doc/man/Makefile	/^QTXCBQPA_LIBS = $/;"	m
QTXCBQPA_LIBS	src/Makefile	/^QTXCBQPA_LIBS = $/;"	m
QT_DBUS_CFLAGS	Makefile	/^QT_DBUS_CFLAGS = $/;"	m
QT_DBUS_CFLAGS	doc/man/Makefile	/^QT_DBUS_CFLAGS = $/;"	m
QT_DBUS_CFLAGS	src/Makefile	/^QT_DBUS_CFLAGS = $/;"	m
QT_DBUS_INCLUDES	Makefile	/^QT_DBUS_INCLUDES = $/;"	m
QT_DBUS_INCLUDES	doc/man/Makefile	/^QT_DBUS_INCLUDES = $/;"	m
QT_DBUS_INCLUDES	src/Makefile	/^QT_DBUS_INCLUDES = $/;"	m
QT_DBUS_LIBS	Makefile	/^QT_DBUS_LIBS = $/;"	m
QT_DBUS_LIBS	doc/man/Makefile	/^QT_DBUS_LIBS = $/;"	m
QT_DBUS_LIBS	src/Makefile	/^QT_DBUS_LIBS = $/;"	m
QT_INCLUDES	Makefile	/^QT_INCLUDES = $/;"	m
QT_INCLUDES	doc/man/Makefile	/^QT_INCLUDES = $/;"	m
QT_INCLUDES	src/Makefile	/^QT_INCLUDES = $/;"	m
QT_LDFLAGS	Makefile	/^QT_LDFLAGS = $/;"	m
QT_LDFLAGS	doc/man/Makefile	/^QT_LDFLAGS = $/;"	m
QT_LDFLAGS	src/Makefile	/^QT_LDFLAGS = $/;"	m
QT_LIBS	Makefile	/^QT_LIBS = $/;"	m
QT_LIBS	doc/man/Makefile	/^QT_LIBS = $/;"	m
QT_LIBS	src/Makefile	/^QT_LIBS = $/;"	m
QT_PIE_FLAGS	Makefile	/^QT_PIE_FLAGS = $/;"	m
QT_PIE_FLAGS	doc/man/Makefile	/^QT_PIE_FLAGS = $/;"	m
QT_PIE_FLAGS	src/Makefile	/^QT_PIE_FLAGS = $/;"	m
QT_QPA_PLATFORM_MINIMAL	build_msvc/bitcoin_config.h	/^#define QT_QPA_PLATFORM_MINIMAL /;"	d
QT_QPA_PLATFORM_WINDOWS	build_msvc/bitcoin_config.h	/^#define QT_QPA_PLATFORM_WINDOWS /;"	d
QT_SELECT	Makefile	/^QT_SELECT = qt5$/;"	m
QT_SELECT	doc/man/Makefile	/^QT_SELECT = qt5$/;"	m
QT_SELECT	src/Makefile	/^QT_SELECT = qt5$/;"	m
QT_STATICPLUGIN	build_msvc/bitcoin_config.h	/^#define QT_STATICPLUGIN /;"	d
QT_TEST_CFLAGS	Makefile	/^QT_TEST_CFLAGS = $/;"	m
QT_TEST_CFLAGS	doc/man/Makefile	/^QT_TEST_CFLAGS = $/;"	m
QT_TEST_CFLAGS	src/Makefile	/^QT_TEST_CFLAGS = $/;"	m
QT_TEST_INCLUDES	Makefile	/^QT_TEST_INCLUDES = $/;"	m
QT_TEST_INCLUDES	doc/man/Makefile	/^QT_TEST_INCLUDES = $/;"	m
QT_TEST_INCLUDES	src/Makefile	/^QT_TEST_INCLUDES = $/;"	m
QT_TEST_LIBS	Makefile	/^QT_TEST_LIBS = $/;"	m
QT_TEST_LIBS	doc/man/Makefile	/^QT_TEST_LIBS = $/;"	m
QT_TEST_LIBS	src/Makefile	/^QT_TEST_LIBS = $/;"	m
QT_TRANSLATION_DIR	Makefile	/^QT_TRANSLATION_DIR = $/;"	m
QT_TRANSLATION_DIR	doc/man/Makefile	/^QT_TRANSLATION_DIR = $/;"	m
QT_TRANSLATION_DIR	src/Makefile	/^QT_TRANSLATION_DIR = $/;"	m
QUARTERROUND	src/crypto/chacha20.cpp	/^#define QUARTERROUND(/;"	d	file:
QUEUE_BATCH_SIZE	src/bench/checkqueue.cpp	/^static const unsigned int QUEUE_BATCH_SIZE = 128;$/;"	v	file:
QUEUE_BATCH_SIZE	src/test/checkqueue_tests.cpp	/^static const unsigned int QUEUE_BATCH_SIZE = 128;$/;"	v	file:
QValidatedLineEdit	src/qt/qvalidatedlineedit.cpp	/^QValidatedLineEdit::QValidatedLineEdit(QWidget *parent) :$/;"	f	class:QValidatedLineEdit
QValidatedLineEdit	src/qt/qvalidatedlineedit.h	/^class QValidatedLineEdit : public QLineEdit$/;"	c
QValueComboBox	src/qt/qvaluecombobox.cpp	/^QValueComboBox::QValueComboBox(QWidget *parent) :$/;"	f	class:QValueComboBox
QValueComboBox	src/qt/qvaluecombobox.h	/^class QValueComboBox : public QComboBox$/;"	c
QWindowsIntegrationPlugin	src/qt/bitcoin.cpp	/^Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);$/;"	v
QWindowsIntegrationPlugin	src/qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);$/;"	v
QXcbIntegrationPlugin	src/qt/bitcoin.cpp	/^Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);$/;"	v
QXcbIntegrationPlugin	src/qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);$/;"	v
QtRPCTimerBase	src/qt/rpcconsole.cpp	/^    QtRPCTimerBase(std::function<void()>& _func, int64_t millis):$/;"	f	class:QtRPCTimerBase
QtRPCTimerBase	src/qt/rpcconsole.cpp	/^class QtRPCTimerBase: public QObject, public RPCTimerBase$/;"	c	file:
QtRPCTimerInterface	src/qt/rpcconsole.cpp	/^class QtRPCTimerInterface: public RPCTimerInterface$/;"	c	file:
QuadRound	src/crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) QuadRound(__m128i& state0, __m128i& state1, __m128i m, uint64_t k1, uint64_t k0)$/;"	f	namespace:__anon43
QuadRound	src/crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) QuadRound(__m128i& state0, __m128i& state1, uint64_t k1, uint64_t k0)$/;"	f	namespace:__anon43
QueuedBlock	src/net_processing.cpp	/^    struct QueuedBlock {$/;"	s	namespace:__anon88	file:
R11	src/crypto/ripemd160.cpp	/^void inline R11(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon42::ripemd160
R12	src/crypto/ripemd160.cpp	/^void inline R12(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }$/;"	f	namespace:__anon42::ripemd160
R1Array	src/test/arith_uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1Array	src/test/uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1ArrayHex	src/test/arith_uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1ArrayHex	src/test/uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1L	src/test/arith_uint256_tests.cpp	/^const arith_uint256 R1L = arith_uint256V(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1L	src/test/uint256_tests.cpp	/^const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1LLow64	src/test/arith_uint256_tests.cpp	/^const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;$/;"	v
R1Ldouble	src/test/arith_uint256_tests.cpp	/^const double R1Ldouble = 0.4887374590559308955; \/\/ R1L equals roughly R1Ldouble * 2^256$/;"	v
R1LplusR2L	src/test/arith_uint256_tests.cpp	/^const char R1LplusR2L[] = "549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C";$/;"	v
R1S	src/test/uint256_tests.cpp	/^const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));$/;"	v
R21	src/crypto/ripemd160.cpp	/^void inline R21(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }$/;"	f	namespace:__anon42::ripemd160
R22	src/crypto/ripemd160.cpp	/^void inline R22(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }$/;"	f	namespace:__anon42::ripemd160
R2Array	src/test/arith_uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2Array	src/test/uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2L	src/test/arith_uint256_tests.cpp	/^const arith_uint256 R2L = arith_uint256V(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2L	src/test/uint256_tests.cpp	/^const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2S	src/test/uint256_tests.cpp	/^const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));$/;"	v
R31	src/crypto/ripemd160.cpp	/^void inline R31(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }$/;"	f	namespace:__anon42::ripemd160
R32	src/crypto/ripemd160.cpp	/^void inline R32(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }$/;"	f	namespace:__anon42::ripemd160
R41	src/crypto/ripemd160.cpp	/^void inline R41(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }$/;"	f	namespace:__anon42::ripemd160
R42	src/crypto/ripemd160.cpp	/^void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }$/;"	f	namespace:__anon42::ripemd160
R51	src/crypto/ripemd160.cpp	/^void inline R51(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }$/;"	f	namespace:__anon42::ripemd160
R52	src/crypto/ripemd160.cpp	/^void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon42::ripemd160
RANDOM	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM	src/leveldb/doc/bench/db_bench_tree_db.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOMIZER_ID_ADDRESS_RELAY	src/net_processing.cpp	/^static constexpr uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL;$/;"	v	file:
RANDOMIZER_ID_LOCALHOSTNONCE	src/net.cpp	/^static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; \/\/ SHA256("localhostnonce")[0:8]$/;"	v	file:
RANDOMIZER_ID_NETGROUP	src/net.cpp	/^static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; \/\/ SHA256("netgroup")[0:8]$/;"	v	file:
RANDOM_REPEATS	src/wallet/test/coinselector_tests.cpp	/^#define RANDOM_REPEATS /;"	d	file:
RANGE	src/rpc/util.h	/^        RANGE,         \/\/!< Special type that is a NUM or [NUM,NUM]$/;"	m	class:RPCArg::Type
RANGE	src/test/descriptor_tests.cpp	/^constexpr int RANGE = 1; \/\/ Expected to be ranged descriptor$/;"	m	namespace:__anon56	file:
RANGE_BEGIN	test/functional/feature_proxy.py	/^RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports$/;"	v
RANLIB	Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	doc/man/Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	src/Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	src/secp256k1/Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	src/univalue/Makefile	/^RANLIB = ranlib$/;"	m
RAPIDCHECK	depends/Makefile	/^RAPIDCHECK ?=$/;"	m
RAPIDCHECK_LIBS	Makefile	/^RAPIDCHECK_LIBS = $/;"	m
RAPIDCHECK_LIBS	doc/man/Makefile	/^RAPIDCHECK_LIBS = $/;"	m
RAPIDCHECK_LIBS	src/Makefile	/^RAPIDCHECK_LIBS = $/;"	m
RAW_TEST_FILES	src/Makefile	/^RAW_TEST_FILES = $/;"	m
RBFTransactionState	src/policy/rbf.h	/^enum class RBFTransactionState {$/;"	c
RCC	Makefile	/^RCC = $/;"	m
RCC	doc/man/Makefile	/^RCC = $/;"	m
RCC	src/Makefile	/^RCC = $/;"	m
RC_BOOST_PROP	src/test/key_properties.cpp	/^RC_BOOST_PROP(key_generates_correct_pubkey, (const CKey& key))$/;"	f
RC_BOOST_PROP	src/test/key_properties.cpp	/^RC_BOOST_PROP(key_set_symmetry, (const CKey& key))$/;"	f
RC_BOOST_PROP	src/test/key_properties.cpp	/^RC_BOOST_PROP(key_sign_symmetry, (const CKey& key, const uint256& hash))$/;"	f
RC_BOOST_PROP	src/test/key_properties.cpp	/^RC_BOOST_PROP(key_uniqueness, (const CKey& key1, const CKey& key2))$/;"	f
RE	contrib/devtools/circular-dependencies.py	/^RE = re.compile("^#include <(.*)>")$/;"	v
READELF	Makefile	/^READELF = $/;"	m
READELF	doc/man/Makefile	/^READELF = $/;"	m
READELF	src/Makefile	/^READELF = $/;"	m
READELF_CMD	contrib/devtools/security-check.py	/^READELF_CMD = os.getenv('READELF', '\/usr\/bin\/readelf')$/;"	v
READELF_CMD	contrib/devtools/symbol-check.py	/^READELF_CMD = os.getenv('READELF', '\/usr\/bin\/readelf')$/;"	v
READWRITE	src/serialize.h	/^#define READWRITE(/;"	d
READWRITEAS	src/serialize.h	/^#define READWRITEAS(/;"	d
READ_STATUS_CHECKBLOCK_FAILED	src/blockencodings.h	/^    READ_STATUS_CHECKBLOCK_FAILED, \/\/ Used only by FillBlock to indicate a$/;"	e	enum:ReadStatus_t
READ_STATUS_FAILED	src/blockencodings.h	/^    READ_STATUS_FAILED, \/\/ Failed to process object$/;"	e	enum:ReadStatus_t
READ_STATUS_INVALID	src/blockencodings.h	/^    READ_STATUS_INVALID, \/\/ Invalid object, peer is sending bogus crap$/;"	e	enum:ReadStatus_t
READ_STATUS_OK	src/blockencodings.h	/^    READ_STATUS_OK,$/;"	e	enum:ReadStatus_t
REAL_THIN_SP_CP	src/qt/bitcoinunits.h	/^#define REAL_THIN_SP_CP /;"	d
REAL_THIN_SP_HTML	src/qt/bitcoinunits.h	/^#define REAL_THIN_SP_HTML /;"	d
REAL_THIN_SP_UTF8	src/qt/bitcoinunits.h	/^#define REAL_THIN_SP_UTF8 /;"	d
RECENT_CONSENSUS_CHANGE	src/consensus/validation.h	/^    RECENT_CONSENSUS_CHANGE,$/;"	m	class:ValidationInvalidReason
RECHECK_LOGS	src/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECHECK_LOGS	src/secp256k1/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECHECK_LOGS	src/univalue/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECONNECT_TIMEOUT_EXP	src/torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_EXP = 1.5;$/;"	v	file:
RECONNECT_TIMEOUT_START	src/torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_START = 1.0;$/;"	v	file:
RECOVER_OK	src/wallet/db.h	/^                        RECOVER_OK,$/;"	m	class:BerkeleyEnvironment::VerifyResult
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_CLEAN_TARGETS	src/Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RECURSIVE_TARGETS	src/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RED	test/functional/test_runner.py	/^    RED = ('\\033[0m', '\\033[0;31m')$/;"	v
REDEEM_SCRIPT_1	test/functional/feature_fee_estimation.py	/^REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])$/;"	v
REDEEM_SCRIPT_2	test/functional/feature_fee_estimation.py	/^REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])$/;"	v
REF	src/serialize.h	/^inline T& REF(const T& val)$/;"	f
REFERENCE_FILENAME	test/functional/test_framework/coverage.py	/^REFERENCE_FILENAME = 'rpc_interface.txt'$/;"	v
REGEX_ARG	test/lint/check-doc.py	/^REGEX_ARG = '(?:ForceSet|SoftSet|Get|Is)(?:Bool)?Args?(?:Set)?\\("(-[^"]+)"'$/;"	v
REGEX_DOC	test/lint/check-doc.py	/^REGEX_DOC = 'AddArg\\("(-[^"=]+?)(?:=|")'$/;"	v
REGISTER_COMMANDS	src/util/system.h	/^    REGISTER_COMMANDS,$/;"	m	class:OptionsCategory
REGTEST	src/chainparamsbase.cpp	/^const std::string CBaseChainParams::REGTEST = "regtest";$/;"	m	class:CBaseChainParams	file:
REGTEST	src/chainparamsbase.h	/^    static const std::string REGTEST;$/;"	m	class:CBaseChainParams
REGTEST_WORK_PER_BLOCK	test/functional/feature_minchainwork.py	/^REGTEST_WORK_PER_BLOCK = 2$/;"	v
REINDEX	src/qt/clientmodel.h	/^    REINDEX,$/;"	m	class:BlockSource
REJECT	src/protocol.cpp	/^const char *REJECT="reject";$/;"	m	namespace:NetMsgType	file:
REJECT_CHECKPOINT	src/consensus/validation.h	/^static const unsigned char REJECT_CHECKPOINT = 0x43;$/;"	v
REJECT_DUPLICATE	src/consensus/validation.h	/^static const unsigned char REJECT_DUPLICATE = 0x12;$/;"	v
REJECT_HIGHFEE	src/validation.h	/^static const unsigned int REJECT_HIGHFEE = 0x100;$/;"	v
REJECT_INSUFFICIENTFEE	src/consensus/validation.h	/^static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;$/;"	v
REJECT_INTERNAL	src/validation.h	/^static const unsigned int REJECT_INTERNAL = 0x100;$/;"	v
REJECT_INVALID	src/consensus/validation.h	/^static const unsigned char REJECT_INVALID = 0x10;$/;"	v
REJECT_INVALID	test/functional/feature_cltv.py	/^REJECT_INVALID = 16$/;"	v
REJECT_INVALID	test/functional/feature_dersig.py	/^REJECT_INVALID = 16$/;"	v
REJECT_MALFORMED	src/consensus/validation.h	/^static const unsigned char REJECT_MALFORMED = 0x01;$/;"	v
REJECT_MALFORMED	test/functional/test_framework/messages.py	/^    REJECT_MALFORMED = 1$/;"	v	class:msg_reject
REJECT_NONSTANDARD	src/consensus/validation.h	/^static const unsigned char REJECT_NONSTANDARD = 0x40;$/;"	v
REJECT_NONSTANDARD	test/functional/feature_cltv.py	/^REJECT_NONSTANDARD = 64$/;"	v
REJECT_NONSTANDARD	test/functional/feature_dersig.py	/^REJECT_NONSTANDARD = 64$/;"	v
REJECT_OBSOLETE	src/consensus/validation.h	/^static const unsigned char REJECT_OBSOLETE = 0x11;$/;"	v
RELDFLAGS	Makefile	/^RELDFLAGS = $/;"	m
RELDFLAGS	doc/man/Makefile	/^RELDFLAGS = $/;"	m
RELDFLAGS	src/Makefile	/^RELDFLAGS = $/;"	m
REORG	src/txmempool.h	/^    REORG,       \/\/!< Removed for reorganization$/;"	m	class:MemPoolRemovalReason
REPLACEABLE_BIP125	src/policy/rbf.h	/^    REPLACEABLE_BIP125,$/;"	m	class:RBFTransactionState
REPLACED	src/txmempool.h	/^    REPLACED,    \/\/!< Removed for replacement$/;"	m	class:MemPoolRemovalReason
REQUIRED	src/policy/fees.h	/^    REQUIRED,$/;"	m	class:FeeEstimateHorizon::FeeReason
RESET_DELETE_UNSYNCED_FILES	src/leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RESET_DROP_UNSYNCED_DATA	src/leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RESTERR	src/rest.cpp	/^static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)$/;"	f	file:
RESTTest	test/functional/interface_rest.py	/^class RESTTest (BitcoinTestFramework):$/;"	c
RIPEMD160	src/bench/crypto_hash.cpp	/^static void RIPEMD160(benchmark::State& state)$/;"	f	file:
RNGLevel	src/random.cpp	/^enum class RNGLevel {$/;"	c	file:
RNGState	src/random.cpp	/^class RNGState {$/;"	c	namespace:__anon61	file:
ROLLING_FEE_HALFLIFE	src/txmempool.h	/^    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; \/\/ public only for testing$/;"	m	class:CTxMemPool
ROT	src/crypto/ctaes/ctaes.c	/^#define ROT(/;"	d	file:
ROTL	src/crypto/siphash.cpp	/^#define ROTL(/;"	d	file:
ROTL32	src/hash.cpp	/^inline uint32_t ROTL32(uint32_t x, int8_t r)$/;"	f
ROUND_DOWN	test/functional/test_framework/util.py	/^from decimal import Decimal, ROUND_DOWN$/;"	i
RPC	src/util/system.h	/^    RPC,$/;"	m	class:OptionsCategory
RPCArg	src/rpc/util.h	/^    RPCArg($/;"	f	struct:RPCArg
RPCArg	src/rpc/util.h	/^struct RPCArg {$/;"	s
RPCArgument	test/lint/check-rpc-mappings.py	/^class RPCArgument:$/;"	c
RPCAuthorized	src/httprpc.cpp	/^static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)$/;"	f	file:
RPCBindTest	test/functional/rpc_bind.py	/^class RPCBindTest(BitcoinTestFramework):$/;"	c
RPCCommand	test/lint/check-rpc-mappings.py	/^class RPCCommand:$/;"	c
RPCCommandExecution	src/rpc/server.cpp	/^    explicit RPCCommandExecution(const std::string& method)$/;"	f	struct:RPCCommandExecution
RPCCommandExecution	src/rpc/server.cpp	/^struct RPCCommandExecution$/;"	s	file:
RPCCommandExecutionInfo	src/rpc/server.cpp	/^struct RPCCommandExecutionInfo$/;"	s	file:
RPCConsole	src/qt/rpcconsole.cpp	/^RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:RPCConsole
RPCConsole	src/qt/rpcconsole.h	/^class RPCConsole: public QWidget$/;"	c
RPCConvertNamedValues	src/rpc/client.cpp	/^UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCConvertValues	src/rpc/client.cpp	/^UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCCoverage	test/functional/test_runner.py	/^class RPCCoverage():$/;"	c
RPCErrorCode	src/rpc/protocol.h	/^enum RPCErrorCode$/;"	g
RPCErrorFromTransactionError	src/rpc/util.cpp	/^RPCErrorCode RPCErrorFromTransactionError(TransactionError terr)$/;"	f
RPCExamples	src/rpc/util.h	/^    RPCExamples($/;"	f	struct:RPCExamples
RPCExamples	src/rpc/util.h	/^struct RPCExamples {$/;"	s
RPCExecuteCommandLine	src/qt/rpcconsole.h	/^    static bool RPCExecuteCommandLine(interfaces::Node& node, std::string &strResult, const std::string &strCommand, std::string * const pstrFilteredOut = nullptr, const WalletModel* wallet_model = nullptr) {$/;"	f	class:RPCConsole
RPCExecutor	src/qt/rpcconsole.cpp	/^    explicit RPCExecutor(interfaces::Node& node) : m_node(node) {}$/;"	f	class:RPCExecutor
RPCExecutor	src/qt/rpcconsole.cpp	/^class RPCExecutor : public QObject$/;"	c	file:
RPCHelpMan	src/rpc/util.cpp	/^RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples)$/;"	f	class:RPCHelpMan
RPCHelpMan	src/rpc/util.h	/^class RPCHelpMan$/;"	c
RPCInterfaceTest	test/functional/interface_rpc.py	/^class RPCInterfaceTest(BitcoinTestFramework):$/;"	c
RPCIsInWarmup	src/rpc/server.cpp	/^bool RPCIsInWarmup(std::string *outStatus)$/;"	f
RPCLockedMemoryInfo	src/rpc/misc.cpp	/^static UniValue RPCLockedMemoryInfo()$/;"	f	file:
RPCMallocInfo	src/rpc/misc.cpp	/^static std::string RPCMallocInfo()$/;"	f	file:
RPCNestedTests	src/qt/test/rpcnestedtests.h	/^class RPCNestedTests : public QObject$/;"	c
RPCNotifyBlockChange	src/rpc/blockchain.cpp	/^void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)$/;"	f
RPCParseCommandLine	src/qt/rpcconsole.cpp	/^bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const WalletModel* wallet_model)$/;"	f	class:RPCConsole
RPCPort	src/chainparamsbase.h	/^    int RPCPort() const { return nRPCPort; }$/;"	f	class:CBaseChainParams
RPCResult	src/rpc/util.h	/^    RPCResult(std::string cond, std::string result)$/;"	f	struct:RPCResult
RPCResult	src/rpc/util.h	/^    explicit RPCResult(std::string result)$/;"	f	struct:RPCResult
RPCResult	src/rpc/util.h	/^struct RPCResult {$/;"	s
RPCResults	src/rpc/util.h	/^    RPCResults()$/;"	f	struct:RPCResults
RPCResults	src/rpc/util.h	/^    RPCResults(RPCResult result)$/;"	f	struct:RPCResults
RPCResults	src/rpc/util.h	/^    RPCResults(std::initializer_list<RPCResult> results)$/;"	f	struct:RPCResults
RPCResults	src/rpc/util.h	/^struct RPCResults {$/;"	s
RPCRunLater	src/rpc/server.cpp	/^void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds)$/;"	f
RPCSerializationFlags	src/rpc/server.cpp	/^int RPCSerializationFlags()$/;"	f
RPCServer	src/rpc/server.h	/^namespace RPCServer$/;"	n
RPCServerInfo	src/rpc/server.cpp	/^struct RPCServerInfo$/;"	s	file:
RPCSetTimerInterface	src/rpc/server.cpp	/^void RPCSetTimerInterface(RPCTimerInterface *iface)$/;"	f
RPCSetTimerInterfaceIfUnset	src/rpc/server.cpp	/^void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)$/;"	f
RPCTimerBase	src/rpc/server.h	/^class RPCTimerBase$/;"	c
RPCTimerInterface	src/rpc/server.h	/^class RPCTimerInterface$/;"	c
RPCTypeCheck	src/rpc/util.cpp	/^void RPCTypeCheck(const UniValue& params,$/;"	f
RPCTypeCheckArgument	src/rpc/util.cpp	/^void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected)$/;"	f
RPCTypeCheckObj	src/rpc/util.cpp	/^void RPCTypeCheckObj(const UniValue& o,$/;"	f
RPCUnsetTimerInterface	src/rpc/server.cpp	/^void RPCUnsetTimerInterface(RPCTimerInterface *iface)$/;"	f
RPC_CLIENT_INVALID_IP_OR_SUBNET	src/rpc/protocol.h	/^    RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, \/\/!< Invalid IP\/Subnet$/;"	e	enum:RPCErrorCode
RPC_CLIENT_IN_INITIAL_DOWNLOAD	src/rpc/protocol.h	/^    RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, \/\/!< Still downloading initial blocks$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_ALREADY_ADDED	src/rpc/protocol.h	/^    RPC_CLIENT_NODE_ALREADY_ADDED   = -23, \/\/!< Node is already added$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_ADDED	src/rpc/protocol.h	/^    RPC_CLIENT_NODE_NOT_ADDED       = -24, \/\/!< Node has not been added before$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_CONNECTED	src/rpc/protocol.h	/^    RPC_CLIENT_NODE_NOT_CONNECTED   = -29, \/\/!< Node to disconnect not found in connected nodes$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NOT_CONNECTED	src/rpc/protocol.h	/^    RPC_CLIENT_NOT_CONNECTED        = -9,  \/\/!< Bitcoin is not connected$/;"	e	enum:RPCErrorCode
RPC_CLIENT_P2P_DISABLED	src/rpc/protocol.h	/^    RPC_CLIENT_P2P_DISABLED         = -31, \/\/!< No valid connection manager instance found$/;"	e	enum:RPCErrorCode
RPC_DATABASE_ERROR	src/rpc/protocol.h	/^    RPC_DATABASE_ERROR              = -20, \/\/!< Database error$/;"	e	enum:RPCErrorCode
RPC_DESERIALIZATION_ERROR	src/rpc/protocol.h	/^    RPC_DESERIALIZATION_ERROR       = -22, \/\/!< Error parsing or validating structure in raw format$/;"	e	enum:RPCErrorCode
RPC_FORBIDDEN_BY_SAFE_MODE	src/rpc/protocol.h	/^    RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  \/\/!< Server is in safe mode, and command is not allowed in safe mode$/;"	e	enum:RPCErrorCode
RPC_INTERNAL_ERROR	src/rpc/protocol.h	/^    RPC_INTERNAL_ERROR   = -32603,$/;"	e	enum:RPCErrorCode
RPC_INVALID_ADDRESS_OR_KEY	src/rpc/protocol.h	/^    RPC_INVALID_ADDRESS_OR_KEY      = -5,  \/\/!< Invalid address or key$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMETER	src/rpc/protocol.h	/^    RPC_INVALID_PARAMETER           = -8,  \/\/!< Invalid, missing or duplicate parameter$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMS	src/rpc/protocol.h	/^    RPC_INVALID_PARAMS   = -32602,$/;"	e	enum:RPCErrorCode
RPC_INVALID_REQUEST	src/rpc/protocol.h	/^    RPC_INVALID_REQUEST  = -32600,$/;"	e	enum:RPCErrorCode
RPC_IN_WARMUP	src/rpc/protocol.h	/^    RPC_IN_WARMUP                   = -28, \/\/!< Client still warming up$/;"	e	enum:RPCErrorCode
RPC_METHOD_DEPRECATED	src/rpc/protocol.h	/^    RPC_METHOD_DEPRECATED           = -32, \/\/!< RPC method is deprecated$/;"	e	enum:RPCErrorCode
RPC_METHOD_NOT_FOUND	src/rpc/protocol.h	/^    RPC_METHOD_NOT_FOUND = -32601,$/;"	e	enum:RPCErrorCode
RPC_MISC_ERROR	src/rpc/protocol.h	/^    RPC_MISC_ERROR                  = -1,  \/\/!< std::exception thrown in command handling$/;"	e	enum:RPCErrorCode
RPC_OUT_OF_MEMORY	src/rpc/protocol.h	/^    RPC_OUT_OF_MEMORY               = -7,  \/\/!< Ran out of memory during operation$/;"	e	enum:RPCErrorCode
RPC_PARSE_ERROR	src/rpc/protocol.h	/^    RPC_PARSE_ERROR      = -32700,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ALREADY_IN_CHAIN	src/rpc/protocol.h	/^    RPC_TRANSACTION_ALREADY_IN_CHAIN= RPC_VERIFY_ALREADY_IN_CHAIN,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ERROR	src/rpc/protocol.h	/^    RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_REJECTED	src/rpc/protocol.h	/^    RPC_TRANSACTION_REJECTED        = RPC_VERIFY_REJECTED,$/;"	e	enum:RPCErrorCode
RPC_TYPE_ERROR	src/rpc/protocol.h	/^    RPC_TYPE_ERROR                  = -3,  \/\/!< Unexpected type was passed as parameter$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ALREADY_IN_CHAIN	src/rpc/protocol.h	/^    RPC_VERIFY_ALREADY_IN_CHAIN     = -27, \/\/!< Transaction already in chain$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ERROR	src/rpc/protocol.h	/^    RPC_VERIFY_ERROR                = -25, \/\/!< General error during transaction or block submission$/;"	e	enum:RPCErrorCode
RPC_VERIFY_REJECTED	src/rpc/protocol.h	/^    RPC_VERIFY_REJECTED             = -26, \/\/!< Transaction or block was rejected by network rules$/;"	e	enum:RPCErrorCode
RPC_WALLET_ALREADY_UNLOCKED	src/rpc/protocol.h	/^    RPC_WALLET_ALREADY_UNLOCKED     = -17, \/\/!< Wallet is already unlocked$/;"	e	enum:RPCErrorCode
RPC_WALLET_ENCRYPTION_FAILED	src/rpc/protocol.h	/^    RPC_WALLET_ENCRYPTION_FAILED    = -16, \/\/!< Failed to encrypt the wallet$/;"	e	enum:RPCErrorCode
RPC_WALLET_ERROR	src/rpc/protocol.h	/^    RPC_WALLET_ERROR                = -4,  \/\/!< Unspecified problem with wallet (key not found etc.)$/;"	e	enum:RPCErrorCode
RPC_WALLET_INSUFFICIENT_FUNDS	src/rpc/protocol.h	/^    RPC_WALLET_INSUFFICIENT_FUNDS   = -6,  \/\/!< Not enough funds in wallet or account$/;"	e	enum:RPCErrorCode
RPC_WALLET_INVALID_ACCOUNT_NAME	src/rpc/protocol.h	/^    RPC_WALLET_INVALID_ACCOUNT_NAME = RPC_WALLET_INVALID_LABEL_NAME,$/;"	e	enum:RPCErrorCode
RPC_WALLET_INVALID_LABEL_NAME	src/rpc/protocol.h	/^    RPC_WALLET_INVALID_LABEL_NAME   = -11, \/\/!< Invalid label name$/;"	e	enum:RPCErrorCode
RPC_WALLET_KEYPOOL_RAN_OUT	src/rpc/protocol.h	/^    RPC_WALLET_KEYPOOL_RAN_OUT      = -12, \/\/!< Keypool ran out, call keypoolrefill first$/;"	e	enum:RPCErrorCode
RPC_WALLET_NOT_FOUND	src/rpc/protocol.h	/^    RPC_WALLET_NOT_FOUND            = -18, \/\/!< Invalid wallet specified$/;"	e	enum:RPCErrorCode
RPC_WALLET_NOT_SPECIFIED	src/rpc/protocol.h	/^    RPC_WALLET_NOT_SPECIFIED        = -19, \/\/!< No wallet specified (error when there are multiple wallets loaded)$/;"	e	enum:RPCErrorCode
RPC_WALLET_PASSPHRASE_INCORRECT	src/rpc/protocol.h	/^    RPC_WALLET_PASSPHRASE_INCORRECT = -14, \/\/!< The wallet passphrase entered was incorrect$/;"	e	enum:RPCErrorCode
RPC_WALLET_UNLOCK_NEEDED	src/rpc/protocol.h	/^    RPC_WALLET_UNLOCK_NEEDED        = -13, \/\/!< Enter the wallet passphrase with walletpassphrase first$/;"	e	enum:RPCErrorCode
RPC_WALLET_WRONG_ENC_STATE	src/rpc/protocol.h	/^    RPC_WALLET_WRONG_ENC_STATE      = -15, \/\/!< Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.)$/;"	e	enum:RPCErrorCode
RSVG_CONVERT	Makefile	/^RSVG_CONVERT = rsvg-convert$/;"	m
RSVG_CONVERT	doc/man/Makefile	/^RSVG_CONVERT = rsvg-convert$/;"	m
RSVG_CONVERT	src/Makefile	/^RSVG_CONVERT = rsvg-convert$/;"	m
RUNNING	src/leveldb/db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
RUN_TESTS	src/wallet/test/coinselector_tests.cpp	/^#define RUN_TESTS /;"	d	file:
RaiseFileDescriptorLimit	src/util/system.cpp	/^int RaiseFileDescriptorLimit(int nMinFD) {$/;"	f
RaiseValidity	src/chain.h	/^    bool RaiseValidity(enum BlockStatus nUpTo)$/;"	f	class:CBlockIndex
RandAddSeedPerfmon	src/random.cpp	/^static void RandAddSeedPerfmon(CSHA512& hasher)$/;"	f	file:
RandAddSeedSleep	src/random.cpp	/^void RandAddSeedSleep() { ProcRand(nullptr, 0, RNGLevel::SLEEP); }$/;"	f
RandFailure	src/random.cpp	/^[[noreturn]] static void RandFailure()$/;"	f	file:
Random	src/leveldb/util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	src/leveldb/util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	src/leveldb/include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	src/leveldb/include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
RandomAccessFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon35	file:
RandomData	src/test/bloom_tests.cpp	/^static std::vector<unsigned char> RandomData()$/;"	f	file:
RandomGenerator	src/leveldb/db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon19::RandomGenerator
RandomGenerator	src/leveldb/db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon19	file:
RandomGenerator	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon32::RandomGenerator
RandomGenerator	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon32	file:
RandomGenerator	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon33::RandomGenerator
RandomGenerator	src/leveldb/doc/bench/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon33	file:
RandomHeight	src/leveldb/db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomInit	src/random.cpp	/^void RandomInit()$/;"	f
RandomKey	src/leveldb/db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	src/leveldb/util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomOrphan	src/test/denialofservice_tests.cpp	/^static CTransactionRef RandomOrphan()$/;"	f	file:
RandomPeriod	src/leveldb/db/db_iter.cc	/^  ssize_t RandomPeriod() {$/;"	f	class:leveldb::__anon29::DBIter	file:
RandomScript	src/test/sighash_tests.cpp	/^void static RandomScript(CScript &script) {$/;"	f	file:
RandomSeed	src/leveldb/util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSeed	src/random.cpp	/^void FastRandomContext::RandomSeed()$/;"	f	class:FastRandomContext
RandomSkewedString	src/leveldb/db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	src/leveldb/db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	src/leveldb/util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	src/leveldb/db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
RandomTransaction	src/test/sighash_tests.cpp	/^void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {$/;"	f	file:
Random_SanityCheck	src/random.cpp	/^bool Random_SanityCheck()$/;"	f
Range	src/leveldb/include/leveldb/db.h	/^  Range() { }$/;"	f	struct:leveldb::Range
Range	src/leveldb/include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	src/leveldb/include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
Range	src/qt/transactionview.h	/^        Range$/;"	e	enum:TransactionView::DateEnum
RawDecorationRole	src/qt/transactiontablemodel.h	/^        RawDecorationRole,$/;"	e	enum:TransactionTableModel::RoleIndex
RawDescriptor	src/script/descriptor.cpp	/^    RawDescriptor(CScript script) : DescriptorImpl({}, {}, "raw"), m_script(std::move(script)) {}$/;"	f	class:__anon75::final
RawTransactionsTest	test/functional/rpc_fundrawtransaction.py	/^class RawTransactionsTest(BitcoinTestFramework):$/;"	c
RawTransactionsTest	test/functional/rpc_rawtransaction.py	/^class RawTransactionsTest(BitcoinTestFramework):$/;"	c
ReacceptWalletTransactions	src/wallet/wallet.cpp	/^void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)$/;"	f	class:CWallet
Read	src/addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr)$/;"	f	class:CAddrDB
Read	src/addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)$/;"	f	class:CAddrDB
Read	src/addrdb.cpp	/^bool CBanDB::Read(banmap_t& banSet)$/;"	f	class:CBanDB
Read	src/dbwrapper.h	/^    bool Read(const K& key, V& value) const$/;"	f	class:CDBWrapper
Read	src/leveldb/db/db_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon23::AtomicCounter
Read	src/leveldb/db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	src/leveldb/db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	src/leveldb/helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon35::FileState
Read	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
Read	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
Read	src/leveldb/table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	src/leveldb/util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon8::PosixSequentialFile
Read	src/leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
Read	src/leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
Read	src/leveldb/util/env_win.cc	/^Status Win32RandomAccessFile::Read(uint64_t offset,size_t n,Slice* result,char* scratch) const$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Read	src/leveldb/util/env_win.cc	/^Status Win32SequentialFile::Read( size_t n, Slice* result, char* scratch )$/;"	f	class:leveldb::Win32::Win32SequentialFile
Read	src/policy/fees.cpp	/^bool CBlockPolicyEstimator::Read(CAutoFile& filein)$/;"	f	class:CBlockPolicyEstimator
Read	src/policy/fees.cpp	/^void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets)$/;"	f	class:TxConfirmStats
Read	src/streams.h	/^    uint64_t Read(int nbits) {$/;"	f	class:BitStreamReader
Read	src/wallet/db.h	/^    bool Read(const K& key, T& value)$/;"	f	class:BerkeleyBatch
Read4	src/crypto/sha256_sse41.cpp	/^__m128i inline Read4(const unsigned char* chunk, int offset) {$/;"	f	namespace:sha256d64_sse41::__anon41
Read8	src/crypto/sha256_avx2.cpp	/^__m256i inline Read8(const unsigned char* chunk, int offset) {$/;"	f	namespace:sha256d64_avx2::__anon37
ReadAtCursor	src/wallet/db.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue)$/;"	f	class:BerkeleyBatch
ReadBE32	src/crypto/common.h	/^uint32_t static inline ReadBE32(const unsigned char* ptr)$/;"	f
ReadBE64	src/crypto/common.h	/^uint64_t static inline ReadBE64(const unsigned char* ptr)$/;"	f
ReadBestBlock	src/index/base.cpp	/^bool BaseIndex::DB::ReadBestBlock(CBlockLocator& locator) const$/;"	f	class:BaseIndex::DB
ReadBestBlock	src/wallet/walletdb.cpp	/^bool WalletBatch::ReadBestBlock(CBlockLocator& locator)$/;"	f	class:WalletBatch
ReadBinaryFile	src/torcontrol.cpp	/^static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())$/;"	f	file:
ReadBlock	src/leveldb/table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadBlockFileInfo	src/txdb.cpp	/^bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {$/;"	f	class:CBlockTreeDB
ReadBlockFromDisk	src/validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)$/;"	f
ReadBlockFromDisk	src/validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)$/;"	f
ReadBody	src/httpserver.cpp	/^std::string HTTPRequest::ReadBody()$/;"	f	class:HTTPRequest
ReadCompactSize	src/serialize.h	/^uint64_t ReadCompactSize(Stream& is)$/;"	f
ReadConfigFiles	src/util/system.cpp	/^bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)$/;"	f	class:ArgsManager
ReadConfigStream	src/util/system.cpp	/^bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)$/;"	f	class:ArgsManager
ReadConfigString	src/test/util_tests.cpp	/^    void ReadConfigString(const std::string str_config)$/;"	f	struct:TestArgsManager
ReadFileToString	src/leveldb/util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	src/leveldb/table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadFilterFromDisk	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const$/;"	f	class:BlockFilterIndex
ReadFlag	src/txdb.cpp	/^bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {$/;"	f	class:CBlockTreeDB
ReadHot	src/leveldb/db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadLE16	src/crypto/common.h	/^uint16_t static inline ReadLE16(const unsigned char* ptr)$/;"	f
ReadLE32	src/crypto/common.h	/^uint32_t static inline ReadLE32(const unsigned char* ptr)$/;"	f
ReadLE64	src/crypto/common.h	/^uint64_t static inline ReadLE64(const unsigned char* ptr)$/;"	f
ReadLastBlockFile	src/txdb.cpp	/^bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {$/;"	f	class:CBlockTreeDB
ReadMeta	src/leveldb/table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	src/leveldb/db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	src/leveldb/include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	src/leveldb/include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadOrderPos	src/wallet/wallet.h	/^static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
ReadPhysicalRecord	src/leveldb/db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadPool	src/wallet/walletdb.cpp	/^bool WalletBatch::ReadPool(int64_t nPool, CKeyPool& keypool)$/;"	f	class:WalletBatch
ReadRandom	src/leveldb/db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRandom	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRawBlockFromDisk	src/validation.cpp	/^bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)$/;"	f
ReadRawBlockFromDisk	src/validation.cpp	/^bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)$/;"	f
ReadRecord	src/leveldb/db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReindexing	src/txdb.cpp	/^void CBlockTreeDB::ReadReindexing(bool &fReindexing) {$/;"	f	class:CBlockTreeDB
ReadReverse	src/leveldb/db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	src/leveldb/db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStatus	src/blockencodings.h	/^} ReadStatus;$/;"	t	typeref:enum:ReadStatus_t
ReadStatus_t	src/blockencodings.h	/^typedef enum ReadStatus_t$/;"	g
ReadStep	src/leveldb/db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadTxPos	src/index/txindex.cpp	/^bool TxIndex::DB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const$/;"	f	class:TxIndex::DB
ReadValue	src/leveldb/db/fault_injection_test.cc	/^  Status ReadValue(int i, std::string* val) const {$/;"	f	class:leveldb::FaultInjectionTest
ReadVarInt	src/serialize.h	/^I ReadVarInt(Stream& is)$/;"	f
ReadVersion	src/wallet/db.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:BerkeleyBatch
ReadVersion	src/wallet/walletdb.cpp	/^bool WalletBatch::ReadVersion(int& nVersion)$/;"	f	class:WalletBatch
ReadWhileWriting	src/leveldb/db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadWriteAsHelper	src/serialize.h	/^template<typename X> X& ReadWriteAsHelper(X& x) { return x; }$/;"	f
ReadWriteAsHelper	src/serialize.h	/^template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }$/;"	f
Reader	src/leveldb/db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	src/leveldb/db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	src/leveldb/db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState	file:
Receive	src/qt/addresstablemodel.cpp	/^const QString AddressTableModel::Receive = "R";$/;"	m	class:AddressTableModel	file:
Receive	src/qt/addresstablemodel.h	/^    static const QString Receive;   \/**< Specifies receive address *\/$/;"	m	class:AddressTableModel
ReceiveCoinsDialog	src/qt/receivecoinsdialog.cpp	/^ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:ReceiveCoinsDialog
ReceiveCoinsDialog	src/qt/receivecoinsdialog.h	/^class ReceiveCoinsDialog : public QDialog$/;"	c
ReceiveMsgBytes	src/net.cpp	/^bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)$/;"	f	class:CNode
ReceiveRequestDialog	src/qt/receiverequestdialog.cpp	/^ReceiveRequestDialog::ReceiveRequestDialog(QWidget *parent) :$/;"	f	class:ReceiveRequestDialog
ReceiveRequestDialog	src/qt/receiverequestdialog.h	/^class ReceiveRequestDialog : public QDialog$/;"	c
Received	src/qt/peertablemodel.h	/^        Received = 4,$/;"	e	enum:PeerTableModel::ColumnIndex
ReceivedBlockTransactions	src/validation.cpp	/^void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams)$/;"	f	class:CChainState
ReceivedByTest	test/functional/wallet_listreceivedby.py	/^class ReceivedByTest(BitcoinTestFramework):$/;"	c
Receiving	src/qt/addresstablemodel.cpp	/^        Receiving,$/;"	e	enum:AddressTableEntry::Type	file:
ReceivingTab	src/qt/addressbookpage.h	/^        ReceivingTab = 1$/;"	e	enum:AddressBookPage::Tabs
RecentRequestEntry	src/qt/recentrequeststablemodel.h	/^    RecentRequestEntry() : nVersion(RecentRequestEntry::CURRENT_VERSION), id(0) { }$/;"	f	class:RecentRequestEntry
RecentRequestEntry	src/qt/recentrequeststablemodel.h	/^class RecentRequestEntry$/;"	c
RecentRequestEntryLessThan	src/qt/recentrequeststablemodel.h	/^    RecentRequestEntryLessThan(int nColumn, Qt::SortOrder fOrder):$/;"	f	class:RecentRequestEntryLessThan
RecentRequestEntryLessThan	src/qt/recentrequeststablemodel.h	/^class RecentRequestEntryLessThan$/;"	c
RecentRequestsTableModel	src/qt/recentrequeststablemodel.cpp	/^RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :$/;"	f	class:RecentRequestsTableModel
RecentRequestsTableModel	src/qt/recentrequeststablemodel.h	/^class RecentRequestsTableModel: public QAbstractTableModel$/;"	c
RecipientCatcher	src/qt/test/paymentservertests.h	/^class RecipientCatcher : public QObject$/;"	c
RecommendedNumConfirmations	src/qt/transactionrecord.h	/^    static const int RecommendedNumConfirmations = 6;$/;"	m	class:TransactionRecord
Reconnect	src/torcontrol.cpp	/^void TorController::Reconnect()$/;"	f	class:TorController
Record	src/policy/fees.cpp	/^void TxConfirmStats::Record(int blocksToConfirm, double val)$/;"	f	class:TxConfirmStats
RecordBackgroundError	src/leveldb/db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordBytesRecv	src/net.cpp	/^void CConnman::RecordBytesRecv(uint64_t bytes)$/;"	f	class:CConnman
RecordBytesSent	src/net.cpp	/^void CConnman::RecordBytesSent(uint64_t bytes)$/;"	f	class:CConnman
RecordReadSample	src/leveldb/db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	src/leveldb/db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	src/leveldb/db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	src/leveldb/db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit, bool *save_manifest) {$/;"	f	class:leveldb::DBImpl
Recover	src/leveldb/db/version_set.cc	/^Status VersionSet::Recover(bool *save_manifest) {$/;"	f	class:leveldb::VersionSet
Recover	src/wallet/db.cpp	/^bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)$/;"	f	class:BerkeleyBatch
Recover	src/wallet/walletdb.cpp	/^bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_filename)$/;"	f	class:WalletBatch
Recover	src/wallet/walletdb.cpp	/^bool WalletBatch::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)$/;"	f	class:WalletBatch
RecoverCompact	src/pubkey.cpp	/^bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
RecoverKeysOnlyFilter	src/wallet/walletdb.cpp	/^bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)$/;"	f	class:WalletBatch
RecoverLogFile	src/leveldb/db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,$/;"	f	class:leveldb::DBImpl
RecoveryTest	src/leveldb/db/recovery_test.cc	/^  RecoveryTest() : env_(Env::Default()), db_(NULL) {$/;"	f	class:leveldb::RecoveryTest
RecoveryTest	src/leveldb/db/recovery_test.cc	/^class RecoveryTest {$/;"	c	namespace:leveldb	file:
RecurseImportData	src/wallet/rpcdump.cpp	/^static std::string RecurseImportData(const CScript& script, ImportData& import_data, const ScriptContext script_ctx)$/;"	f	file:
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlock& block) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const COutPoint& out) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CScript& script) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxIn& in) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxOut& out) {$/;"	f
RecursiveDynamicUsage	src/core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const std::shared_ptr<X>& p) {$/;"	f
RecvFromOther	src/qt/transactionrecord.h	/^        RecvFromOther,$/;"	e	enum:TransactionRecord::Type
RecvWithAddress	src/qt/transactionrecord.h	/^        RecvWithAddress,$/;"	e	enum:TransactionRecord::Type
Ref	src/leveldb/db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	src/leveldb/db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	src/leveldb/helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon35::FileState
Ref	src/leveldb/util/cache.cc	/^void LRUCache::Ref(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
RegisterAllCoreRPCCommands	src/rpc/register.h	/^static inline void RegisterAllCoreRPCCommands(CRPCTable &t)$/;"	f
RegisterBackgroundSignalScheduler	src/validationinterface.cpp	/^void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {$/;"	f	class:CMainSignals
RegisterBlockchainRPCCommands	src/rpc/blockchain.cpp	/^void RegisterBlockchainRPCCommands(CRPCTable &t)$/;"	f
RegisterCleanup	src/leveldb/table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterHTTPHandler	src/httpserver.cpp	/^void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)$/;"	f
RegisterLoad	src/bitcoin-tx.cpp	/^static void RegisterLoad(const std::string& strInput)$/;"	f	file:
RegisterMiningRPCCommands	src/rpc/mining.cpp	/^void RegisterMiningRPCCommands(CRPCTable &t)$/;"	f
RegisterMiscRPCCommands	src/rpc/misc.cpp	/^void RegisterMiscRPCCommands(CRPCTable &t)$/;"	f
RegisterNetRPCCommands	src/rpc/net.cpp	/^void RegisterNetRPCCommands(CRPCTable &t)$/;"	f
RegisterRawTransactionRPCCommands	src/rpc/rawtransaction.cpp	/^void RegisterRawTransactionRPCCommands(CRPCTable &t)$/;"	f
RegisterSet	src/bitcoin-tx.cpp	/^static void RegisterSet(const std::string& strInput)$/;"	f	file:
RegisterSetJson	src/bitcoin-tx.cpp	/^static void RegisterSetJson(const std::string& key, const std::string& rawJson)$/;"	f	file:
RegisterTest	src/leveldb/util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
RegisterValidationInterface	src/validationinterface.cpp	/^void RegisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
RegisterWalletRPCCommands	src/wallet/rpcwallet.cpp	/^void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)$/;"	f
RegisterWithMempoolSignals	src/validationinterface.cpp	/^void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {$/;"	f	class:CMainSignals
RegisterZMQRPCCommands	src/zmq/zmqrpc.cpp	/^void RegisterZMQRPCCommands(CRPCTable& t)$/;"	f
RegtestingSetup	src/test/blockencodings_tests.cpp	/^    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}$/;"	f	struct:RegtestingSetup
RegtestingSetup	src/test/blockencodings_tests.cpp	/^struct RegtestingSetup : public TestingSetup {$/;"	s	file:
RegtestingSetup	src/test/validation_block_tests.cpp	/^    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}$/;"	f	struct:RegtestingSetup
RegtestingSetup	src/test/validation_block_tests.cpp	/^struct RegtestingSetup : public TestingSetup {$/;"	s	file:
ReindexTest	test/functional/feature_reindex.py	/^class ReindexTest(BitcoinTestFramework):$/;"	c
RejectDifficultyMismatch	src/test/blockchain_tests.cpp	/^static void RejectDifficultyMismatch(double difficulty, double expected_difficulty) {$/;"	f	file:
RelayAddress	src/net_processing.cpp	/^static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connman)$/;"	f	file:
RelayTransaction	src/net_processing.cpp	/^static void RelayTransaction(const CTransaction& tx, CConnman* connman)$/;"	f	file:
RelayWalletTransaction	src/wallet/wallet.cpp	/^bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)$/;"	f	class:CWalletTx
Release	src/leveldb/util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Release	src/leveldb/util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon4::LRUCache
Release	src/leveldb/util/env_posix.cc	/^  void Release() {$/;"	f	class:leveldb::__anon8::Limiter
Release	src/net.h	/^    void Release()$/;"	f	class:CNode
Release	src/sync.h	/^    void Release()$/;"	f	class:CSemaphoreGrant
ReleaseBlock	src/leveldb/table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseDirectoryLocks	src/util/system.cpp	/^void ReleaseDirectoryLocks()$/;"	f
ReleaseInputs	src/leveldb/db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	src/leveldb/db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	src/leveldb/db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
ReleaseWallet	src/wallet/wallet.cpp	/^static void ReleaseWallet(CWallet* wallet)$/;"	f	file:
Release_Store	src/leveldb/port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Release_Store	src/leveldb/port/port_win.cc	/^void AtomicPointer::Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
ReloadDbEnv	src/wallet/db.cpp	/^void BerkeleyDatabase::ReloadDbEnv()$/;"	f	class:BerkeleyDatabase
ReloadDbEnv	src/wallet/db.cpp	/^void BerkeleyEnvironment::ReloadDbEnv()$/;"	f	class:BerkeleyEnvironment
Remove	src/leveldb/util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::HandleTable
Remove	src/leveldb/util/env_posix.cc	/^  void Remove(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixLockTable
RemoveAddedNode	src/net.cpp	/^bool CConnman::RemoveAddedNode(const std::string& strNode)$/;"	f	class:CConnman
RemoveLocal	src/net.cpp	/^void RemoveLocal(const CService& addr)$/;"	f
RemoveStaged	src/txmempool.cpp	/^void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {$/;"	f	class:CTxMemPool
RemoveWallet	src/wallet/wallet.cpp	/^bool RemoveWallet(const std::shared_ptr<CWallet>& wallet)$/;"	f
RemoveWatchOnly	src/keystore.cpp	/^bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
RemoveWatchOnly	src/wallet/wallet.cpp	/^bool CWallet::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CWallet
RenameEnMasse	src/test/util_threadnames_tests.cpp	/^std::set<std::string> RenameEnMasse(int num_threads)$/;"	f
RenameFile	src/leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::RenameFile(const std::string& s,$/;"	f	class:leveldb::FaultInjectionTestEnv
RenameFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon35::InMemoryEnv
RenameFile	src/leveldb/include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	src/leveldb/util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon8::PosixEnv
RenameFile	src/leveldb/util/env_win.cc	/^Status Win32Env::RenameFile( const std::string& src, const std::string& target )$/;"	f	class:leveldb::Win32::Win32Env
RenameLDBToSST	src/leveldb/db/db_test.cc	/^  int RenameLDBToSST() {$/;"	f	class:leveldb::DBTest
RenameOver	src/util/system.cpp	/^bool RenameOver(fs::path src, fs::path dest)$/;"	f
Reopen	src/leveldb/db/corruption_test.cc	/^  void Reopen() {$/;"	f	class:leveldb::CorruptionTest
Reopen	src/leveldb/db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
ReopenForAppend	src/leveldb/db/log_test.cc	/^  void ReopenForAppend() {$/;"	f	class:leveldb::log::LogTest
ReorderTransactions	src/wallet/wallet.cpp	/^DBErrors CWallet::ReorderTransactions()$/;"	f	class:CWallet
Rep	src/leveldb/table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	src/leveldb/table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	src/leveldb/table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	src/leveldb/db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	src/leveldb/db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	src/leveldb/db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon30::Repairer	file:
Repairer	src/leveldb/db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon30::Repairer
Repairer	src/leveldb/db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon30	file:
Repeat	src/scheduler.cpp	/^static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	file:
ReplaceByFeeTest	test/functional/feature_rbf.py	/^class ReplaceByFeeTest(BitcoinTestFramework):$/;"	c
ReplaceRedeemScript	src/test/transaction_tests.cpp	/^static void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)$/;"	f	file:
ReplayBlocks	src/validation.cpp	/^bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)$/;"	f	class:CChainState
ReplayBlocks	src/validation.cpp	/^bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {$/;"	f
ReplyHandlerCB	src/torcontrol.cpp	/^    typedef std::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;$/;"	t	class:TorControlConnection	file:
Report	src/leveldb/db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon19::Stats
ReportCollector	src/leveldb/db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	src/leveldb/db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportCorruption	src/leveldb/db/log_reader.cc	/^void Reader::ReportCorruption(uint64_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	src/leveldb/db/log_reader.cc	/^void Reader::ReportDrop(uint64_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportHardwareRand	src/random.cpp	/^static void ReportHardwareRand() {}$/;"	f	file:
ReportHardwareRand	src/random.cpp	/^static void ReportHardwareRand()$/;"	f	file:
ReportInvalidCertificate	src/qt/paymentserver.cpp	/^static void ReportInvalidCertificate(const QSslCertificate& cert)$/;"	f	file:
ReportMessage	src/leveldb/db/log_test.cc	/^  std::string ReportMessage() const {$/;"	f	class:leveldb::log::LogTest
Reporter	src/leveldb/db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
ReqType	test/functional/interface_rest.py	/^class ReqType(Enum):$/;"	c
Request	contrib/devtools/github-merge.py	/^from urllib.request import Request, urlopen$/;"	i
RequestMethod	src/httpserver.h	/^    enum RequestMethod {$/;"	g	class:HTTPRequest
RequestMethodString	src/httpserver.cpp	/^static std::string RequestMethodString(HTTPRequest::RequestMethod m)$/;"	f	file:
RequireStandard	src/chainparams.h	/^    bool RequireStandard() const { return fRequireStandard; }$/;"	f	class:CChainParams
Rescan	test/functional/wallet_import_rescan.py	/^Rescan = enum.Enum("Rescan", "no yes late_timestamp")$/;"	v
RescanFromTime	src/wallet/wallet.cpp	/^int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update)$/;"	f	class:CWallet
RescanWallet	src/wallet/rpcdump.cpp	/^static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver, int64_t time_begin = TIMESTAMP_MIN, bool update = true)$/;"	f	file:
ResendWalletTransactions	src/wallet/wallet.cpp	/^void CWallet::ResendWalletTransactions()$/;"	f	class:CWallet
ResendWalletTransactionsTest	test/functional/wallet_resendwallettransactions.py	/^class ResendWalletTransactionsTest(BitcoinTestFramework):$/;"	c
ReserveKeyFromKeyPool	src/wallet/wallet.cpp	/^bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)$/;"	f	class:CWallet
Reset	src/crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Reset()$/;"	f	class:CRIPEMD160
Reset	src/crypto/sha1.cpp	/^CSHA1& CSHA1::Reset()$/;"	f	class:CSHA1
Reset	src/crypto/sha256.cpp	/^CSHA256& CSHA256::Reset()$/;"	f	class:CSHA256
Reset	src/crypto/sha512.cpp	/^CSHA512& CSHA512::Reset()$/;"	f	class:CSHA512
Reset	src/hash.h	/^    CHash160& Reset() {$/;"	f	class:CHash160
Reset	src/hash.h	/^    CHash256& Reset() {$/;"	f	class:CHash256
Reset	src/leveldb/db/db_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon23::AtomicCounter
Reset	src/leveldb/table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	src/leveldb/table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reset	src/leveldb/util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
Reset	src/qt/optionsmodel.cpp	/^void OptionsModel::Reset()$/;"	f	class:OptionsModel
Reset	src/script/ismine.h	/^    inline void Reset()$/;"	f	struct:CachableAmount
Reset	src/test/versionbits_tests.cpp	/^    VersionBitsTester& Reset() {$/;"	f	class:VersionBitsTester
Reset	src/wallet/db.cpp	/^void BerkeleyEnvironment::Reset()$/;"	f	class:BerkeleyEnvironment
ResetArgs	src/test/getarg_tests.cpp	/^static void ResetArgs(const std::string& strArg)$/;"	f	file:
ResetBlockFailureFlags	src/validation.cpp	/^void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {$/;"	f	class:CChainState
ResetBlockFailureFlags	src/validation.cpp	/^void ResetBlockFailureFlags(CBlockIndex *pindex) {$/;"	f
ResetDBState	src/leveldb/db/fault_injection_test.cc	/^  void ResetDBState(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
ResetMethod	src/leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	g	class:leveldb::FaultInjectionTest	file:
ResetState	src/leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::ResetState() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Resize	src/leveldb/util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon4::HandleTable	file:
ResolveCollisions	src/addrman.h	/^    void ResolveCollisions()$/;"	f	class:CAddrMan
ResolveCollisions_	src/addrman.cpp	/^void CAddrMan::ResolveCollisions_()$/;"	f	class:CAddrMan
ResolveErrMsg	src/init.cpp	/^static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)$/;"	f	file:
ResolveIP	src/test/addrman_tests.cpp	/^static CNetAddr ResolveIP(const char* ip)$/;"	f	file:
ResolveIP	src/test/addrman_tests.cpp	/^static CNetAddr ResolveIP(std::string ip)$/;"	f	file:
ResolveIP	src/test/netbase_tests.cpp	/^static CNetAddr ResolveIP(const char* ip)$/;"	f	file:
ResolveService	src/test/addrman_tests.cpp	/^static CService ResolveService(const char* ip, int port = 0)$/;"	f	file:
ResolveService	src/test/addrman_tests.cpp	/^static CService ResolveService(std::string ip, int port = 0)$/;"	f	file:
ResolveSubNet	src/test/netbase_tests.cpp	/^static CSubNet ResolveSubNet(const char* subnet)$/;"	f	file:
Result	src/wallet/feebumper.h	/^enum class Result$/;"	c	namespace:feebumper
RetFormat	src/rest.cpp	/^enum class RetFormat {$/;"	c	file:
RetType	test/functional/interface_rest.py	/^class RetType(Enum):$/;"	c
ReturnFalse	src/test/validation_tests.cpp	/^static bool ReturnFalse() { return false; }$/;"	f	file:
ReturnKey	src/wallet/wallet.cpp	/^void CReserveKey::ReturnKey()$/;"	f	class:CReserveKey
ReturnKey	src/wallet/wallet.cpp	/^void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)$/;"	f	class:CWallet
ReturnTrue	src/test/validation_tests.cpp	/^static bool ReturnTrue() { return true; }$/;"	f	file:
ReuseFileNumber	src/leveldb/db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
ReuseLogs	src/leveldb/db/fault_injection_test.cc	/^  void ReuseLogs(bool reuse) {$/;"	f	class:leveldb::FaultInjectionTest
ReuseManifest	src/leveldb/db/version_set.cc	/^bool VersionSet::ReuseManifest(const std::string& dscname,$/;"	f	class:leveldb::VersionSet
Reverse	src/leveldb/table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseCompareNodeMinPingTime	src/net.cpp	/^static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
ReverseCompareNodeTimeConnected	src/net.cpp	/^static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
ReverseKeyComparator	src/leveldb/table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon15	file:
Rewind	src/index/base.cpp	/^bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)$/;"	f	class:BaseIndex
Rewind	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)$/;"	f	class:BlockFilterIndex
Rewind	src/streams.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
RewindBlockIndex	src/validation.cpp	/^bool CChainState::RewindBlockIndex(const CChainParams& params)$/;"	f	class:CChainState
RewindBlockIndex	src/validation.cpp	/^bool RewindBlockIndex(const CChainParams& params) {$/;"	f
Rewrite	src/wallet/db.cpp	/^bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)$/;"	f	class:BerkeleyBatch
Rewrite	src/wallet/db.cpp	/^bool BerkeleyDatabase::Rewrite(const char* pszSkip)$/;"	f	class:BerkeleyDatabase
RoleIndex	src/qt/addresstablemodel.h	/^    enum RoleIndex {$/;"	g	class:AddressTableModel
RoleIndex	src/qt/bitcoinunits.h	/^    enum RoleIndex {$/;"	g	class:BitcoinUnits
RoleIndex	src/qt/transactiontablemodel.h	/^    enum RoleIndex {$/;"	g	class:TransactionTableModel
RollforwardBlock	src/validation.cpp	/^bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)$/;"	f	class:CChainState
RollingBloom	src/bench/rollingbloom.cpp	/^static void RollingBloom(benchmark::State& state)$/;"	f	file:
RollingBloomHash	src/bloom.cpp	/^static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {$/;"	f	file:
Round	src/crypto/ripemd160.cpp	/^void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)$/;"	f	namespace:__anon42::ripemd160
Round	src/crypto/sha1.cpp	/^void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)$/;"	f	namespace:__anon38::sha1
Round	src/crypto/sha256.cpp	/^void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k)$/;"	f	namespace:__anon40::sha256
Round	src/crypto/sha256_avx2.cpp	/^void inline __attribute__((always_inline)) Round(__m256i a, __m256i b, __m256i c, __m256i& d, __m256i e, __m256i f, __m256i g, __m256i& h, __m256i k)$/;"	f	namespace:sha256d64_avx2::__anon37
Round	src/crypto/sha256_sse41.cpp	/^void inline __attribute__((always_inline)) Round(__m128i a, __m128i b, __m128i c, __m128i& d, __m128i e, __m128i f, __m128i g, __m128i& h, __m128i k)$/;"	f	namespace:sha256d64_sse41::__anon41
Round	src/crypto/sha512.cpp	/^void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)$/;"	f	namespace:__anon39::sha512
Round	src/secp256k1/src/hash_impl.h	/^#define Round(/;"	d
Round	src/secp256k1/src/hash_impl.h	/^#undef Round$/;"	d
RpcCreateMultiSigTest	test/functional/rpc_createmultisig.py	/^class RpcCreateMultiSigTest(BitcoinTestFramework):$/;"	c
RpcHandlerImpl	src/interfaces/chain.cpp	/^    RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)$/;"	f	class:interfaces::__anon129::RpcHandlerImpl
RpcHandlerImpl	src/interfaces/chain.cpp	/^class RpcHandlerImpl : public Handler$/;"	c	namespace:interfaces::__anon129	file:
RpcMempool	src/bench/rpc_mempool.cpp	/^static void RpcMempool(benchmark::State& state)$/;"	f	file:
RpcMiscTest	test/functional/rpc_misc.py	/^class RpcMiscTest(BitcoinTestFramework):$/;"	c
Run	src/httpserver.cpp	/^    void Run()$/;"	f	class:WorkQueue
Run	src/leveldb/db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	src/leveldb/db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon30::Repairer
Run	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
RunAll	src/bench/bench.cpp	/^void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double scaling, const std::string& filter, bool is_list_only)$/;"	f	class:benchmark::BenchRunner
RunAllTests	src/leveldb/util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	src/leveldb/db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
RunConcurrent	src/leveldb/db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
RunCreate	src/test/scriptnum_tests.cpp	/^static void RunCreate(const int64_t& num)$/;"	f	file:
RunOperators	src/test/scriptnum_tests.cpp	/^static void RunOperators(const int64_t& num1, const int64_t& num2)$/;"	f	file:
RunTest	src/test/bip32_tests.cpp	/^static void RunTest(const TestVector &test) {$/;"	f	file:
SAFE_CHARS	src/util/strencodings.cpp	/^static const std::string SAFE_CHARS[] =$/;"	v	file:
SAFE_CHARS_DEFAULT	src/util/strencodings.h	/^    SAFE_CHARS_DEFAULT, \/\/!< The full set of allowed chars$/;"	e	enum:SafeChars
SAFE_CHARS_FILENAME	src/util/strencodings.h	/^    SAFE_CHARS_FILENAME, \/\/!< Chars allowed in filenames$/;"	e	enum:SafeChars
SAFE_CHARS_UA_COMMENT	src/util/strencodings.h	/^    SAFE_CHARS_UA_COMMENT, \/\/!< BIP-0014 subset$/;"	e	enum:SafeChars
SAFE_CHARS_URI	src/util/strencodings.h	/^    SAFE_CHARS_URI, \/\/!< Chars allowed in URIs (RFC 3986)$/;"	e	enum:SafeChars
SANITIZER_CXXFLAGS	Makefile	/^SANITIZER_CXXFLAGS = $/;"	m
SANITIZER_CXXFLAGS	doc/man/Makefile	/^SANITIZER_CXXFLAGS = $/;"	m
SANITIZER_CXXFLAGS	src/Makefile	/^SANITIZER_CXXFLAGS = $/;"	m
SANITIZER_LDFLAGS	Makefile	/^SANITIZER_LDFLAGS = $/;"	m
SANITIZER_LDFLAGS	doc/man/Makefile	/^SANITIZER_LDFLAGS = $/;"	m
SANITIZER_LDFLAGS	src/Makefile	/^SANITIZER_LDFLAGS = $/;"	m
SAT	src/qt/bitcoinunits.h	/^        SAT$/;"	e	enum:BitcoinUnits::Unit
SC	src/secp256k1/src/ecmult_static_context.h	/^#define SC /;"	d
SC	src/secp256k1/src/ecmult_static_context.h	/^#undef SC$/;"	d
SCOPED_LOCKABLE	src/leveldb/port/thread_annotations.h	/^#define SCOPED_LOCKABLE$/;"	d
SCOPED_LOCKABLE	src/threadsafety.h	/^#define SCOPED_LOCKABLE /;"	d
SCOPED_LOCKABLE	src/threadsafety.h	/^#define SCOPED_LOCKABLE$/;"	d
SCRIPTS	Makefile	/^SCRIPTS = $(dist_noinst_SCRIPTS)$/;"	m
SCRIPT_ADDRESS	contrib/testgen/gen_key_io_test_vectors.py	/^SCRIPT_ADDRESS = 5$/;"	v
SCRIPT_ADDRESS	src/chainparams.h	/^        SCRIPT_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
SCRIPT_ADDRESS_REGTEST	contrib/testgen/gen_key_io_test_vectors.py	/^SCRIPT_ADDRESS_REGTEST = 196$/;"	v
SCRIPT_ADDRESS_TEST	contrib/testgen/gen_key_io_test_vectors.py	/^SCRIPT_ADDRESS_TEST = 196$/;"	v
SCRIPT_ERR_BAD_OPCODE	src/script/script_error.h	/^    SCRIPT_ERR_BAD_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKMULTISIGVERIFY	src/script/script_error.h	/^    SCRIPT_ERR_CHECKMULTISIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKSIGVERIFY	src/script/script_error.h	/^    SCRIPT_ERR_CHECKSIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CLEANSTACK	src/script/script_error.h	/^    SCRIPT_ERR_CLEANSTACK,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISABLED_OPCODE	src/script/script_error.h	/^    SCRIPT_ERR_DISABLED_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS	src/script/script_error.h	/^    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	src/script/script_error.h	/^    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EQUALVERIFY	src/script/script_error.h	/^    SCRIPT_ERR_EQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_ERROR_COUNT	src/script/script_error.h	/^    SCRIPT_ERR_ERROR_COUNT$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EVAL_FALSE	src/script/script_error.h	/^    SCRIPT_ERR_EVAL_FALSE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_ALTSTACK_OPERATION	src/script/script_error.h	/^    SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_STACK_OPERATION	src/script/script_error.h	/^    SCRIPT_ERR_INVALID_STACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_LAST	src/script/script_error.h	/^#define SCRIPT_ERR_LAST /;"	d
SCRIPT_ERR_MINIMALDATA	src/script/script_error.h	/^    SCRIPT_ERR_MINIMALDATA,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_MINIMALIF	src/script/script_error.h	/^    SCRIPT_ERR_MINIMALIF,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_NEGATIVE_LOCKTIME	src/script/script_error.h	/^    SCRIPT_ERR_NEGATIVE_LOCKTIME,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_NUMEQUALVERIFY	src/script/script_error.h	/^    SCRIPT_ERR_NUMEQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OK	src/script/script_error.h	/^    SCRIPT_ERR_OK = 0,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_CODESEPARATOR	src/script/script_error.h	/^    SCRIPT_ERR_OP_CODESEPARATOR,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_COUNT	src/script/script_error.h	/^    SCRIPT_ERR_OP_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_RETURN	src/script/script_error.h	/^    SCRIPT_ERR_OP_RETURN,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEYTYPE	src/script/script_error.h	/^    SCRIPT_ERR_PUBKEYTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEY_COUNT	src/script/script_error.h	/^    SCRIPT_ERR_PUBKEY_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUSH_SIZE	src/script/script_error.h	/^    SCRIPT_ERR_PUSH_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SCRIPT_SIZE	src/script/script_error.h	/^    SCRIPT_ERR_SCRIPT_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_COUNT	src/script/script_error.h	/^    SCRIPT_ERR_SIG_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_DER	src/script/script_error.h	/^    SCRIPT_ERR_SIG_DER,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_FINDANDDELETE	src/script/script_error.h	/^    SCRIPT_ERR_SIG_FINDANDDELETE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HASHTYPE	src/script/script_error.h	/^    SCRIPT_ERR_SIG_HASHTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HIGH_S	src/script/script_error.h	/^    SCRIPT_ERR_SIG_HIGH_S,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_NULLDUMMY	src/script/script_error.h	/^    SCRIPT_ERR_SIG_NULLDUMMY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_NULLFAIL	src/script/script_error.h	/^    SCRIPT_ERR_SIG_NULLFAIL,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_PUSHONLY	src/script/script_error.h	/^    SCRIPT_ERR_SIG_PUSHONLY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_STACK_SIZE	src/script/script_error.h	/^    SCRIPT_ERR_STACK_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNBALANCED_CONDITIONAL	src/script/script_error.h	/^    SCRIPT_ERR_UNBALANCED_CONDITIONAL,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNKNOWN_ERROR	src/script/script_error.h	/^    SCRIPT_ERR_UNKNOWN_ERROR,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNSATISFIED_LOCKTIME	src/script/script_error.h	/^    SCRIPT_ERR_UNSATISFIED_LOCKTIME,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_VERIFY	src/script/script_error.h	/^    SCRIPT_ERR_VERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_MALLEATED	src/script/script_error.h	/^    SCRIPT_ERR_WITNESS_MALLEATED,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_MALLEATED_P2SH	src/script/script_error.h	/^    SCRIPT_ERR_WITNESS_MALLEATED_P2SH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH	src/script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY	src/script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH	src/script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PUBKEYTYPE	src/script/script_error.h	/^    SCRIPT_ERR_WITNESS_PUBKEYTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_UNEXPECTED	src/script/script_error.h	/^    SCRIPT_ERR_WITNESS_UNEXPECTED,$/;"	e	enum:ScriptError_t
SCRIPT_SIG	test/functional/feature_fee_estimation.py	/^SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]$/;"	v
SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY	src/script/interpreter.h	/^    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),$/;"	e	enum:__anon79
SCRIPT_VERIFY_CHECKSEQUENCEVERIFY	src/script/interpreter.h	/^    SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),$/;"	e	enum:__anon79
SCRIPT_VERIFY_CLEANSTACK	src/script/interpreter.h	/^    SCRIPT_VERIFY_CLEANSTACK = (1U << 8),$/;"	e	enum:__anon79
SCRIPT_VERIFY_CONST_SCRIPTCODE	src/script/interpreter.h	/^    SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),$/;"	e	enum:__anon79
SCRIPT_VERIFY_DERSIG	src/script/interpreter.h	/^    SCRIPT_VERIFY_DERSIG    = (1U << 2),$/;"	e	enum:__anon79
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS	src/script/interpreter.h	/^    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),$/;"	e	enum:__anon79
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	src/script/interpreter.h	/^    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),$/;"	e	enum:__anon79
SCRIPT_VERIFY_LOW_S	src/script/interpreter.h	/^    SCRIPT_VERIFY_LOW_S     = (1U << 3),$/;"	e	enum:__anon79
SCRIPT_VERIFY_MINIMALDATA	src/script/interpreter.h	/^    SCRIPT_VERIFY_MINIMALDATA = (1U << 6),$/;"	e	enum:__anon79
SCRIPT_VERIFY_MINIMALIF	src/script/interpreter.h	/^    SCRIPT_VERIFY_MINIMALIF = (1U << 13),$/;"	e	enum:__anon79
SCRIPT_VERIFY_NONE	src/script/interpreter.h	/^    SCRIPT_VERIFY_NONE      = 0,$/;"	e	enum:__anon79
SCRIPT_VERIFY_NULLDUMMY	src/script/interpreter.h	/^    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),$/;"	e	enum:__anon79
SCRIPT_VERIFY_NULLFAIL	src/script/interpreter.h	/^    SCRIPT_VERIFY_NULLFAIL = (1U << 14),$/;"	e	enum:__anon79
SCRIPT_VERIFY_P2SH	src/script/interpreter.h	/^    SCRIPT_VERIFY_P2SH      = (1U << 0),$/;"	e	enum:__anon79
SCRIPT_VERIFY_SIGPUSHONLY	src/script/interpreter.h	/^    SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),$/;"	e	enum:__anon79
SCRIPT_VERIFY_STRICTENC	src/script/interpreter.h	/^    SCRIPT_VERIFY_STRICTENC = (1U << 1),$/;"	e	enum:__anon79
SCRIPT_VERIFY_WITNESS	src/script/interpreter.h	/^    SCRIPT_VERIFY_WITNESS = (1U << 11),$/;"	e	enum:__anon79
SCRIPT_VERIFY_WITNESS_PUBKEYTYPE	src/script/interpreter.h	/^    SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),$/;"	e	enum:__anon79
SDK_PATH	depends/Makefile	/^SDK_PATH ?= $(BASEDIR)\/SDKs$/;"	m
SECP256K1	test/functional/test_framework/key.py	/^SECP256K1 = EllipticCurve(2**256 - 2**32 - 977, 0, 7)$/;"	v
SECP256K1_API	src/secp256k1/include/secp256k1.h	/^#   define SECP256K1_API /;"	d
SECP256K1_API	src/secp256k1/include/secp256k1.h	/^#   define SECP256K1_API$/;"	d
SECP256K1_API	src/secp256k1/include/secp256k1.h	/^#  define SECP256K1_API /;"	d
SECP256K1_API	src/secp256k1/include/secp256k1.h	/^#  define SECP256K1_API$/;"	d
SECP256K1_ARG_NONNULL	src/secp256k1/include/secp256k1.h	/^#  define SECP256K1_ARG_NONNULL(/;"	d
SECP256K1_BASIC_CONFIG_H	src/secp256k1/src/basic-config.h	/^#define SECP256K1_BASIC_CONFIG_H$/;"	d
SECP256K1_BENCH_H	src/secp256k1/src/bench.h	/^#define SECP256K1_BENCH_H$/;"	d
SECP256K1_CONTEXT_NONE	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_CONTEXT_NONE /;"	d
SECP256K1_CONTEXT_SIGN	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_CONTEXT_SIGN /;"	d
SECP256K1_CONTEXT_VERIFY	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_CONTEXT_VERIFY /;"	d
SECP256K1_CONTRIB_BER_PRIVATEKEY_H	src/secp256k1/contrib/lax_der_privatekey_parsing.h	/^#define SECP256K1_CONTRIB_BER_PRIVATEKEY_H$/;"	d
SECP256K1_CONTRIB_LAX_DER_PARSING_H	src/secp256k1/contrib/lax_der_parsing.h	/^#define SECP256K1_CONTRIB_LAX_DER_PARSING_H$/;"	d
SECP256K1_ECDH_H	src/secp256k1/include/secp256k1_ecdh.h	/^#define SECP256K1_ECDH_H$/;"	d
SECP256K1_ECDSA_H	src/secp256k1/src/ecdsa.h	/^#define SECP256K1_ECDSA_H$/;"	d
SECP256K1_ECDSA_IMPL_H	src/secp256k1/src/ecdsa_impl.h	/^#define SECP256K1_ECDSA_IMPL_H$/;"	d
SECP256K1_ECKEY_H	src/secp256k1/src/eckey.h	/^#define SECP256K1_ECKEY_H$/;"	d
SECP256K1_ECKEY_IMPL_H	src/secp256k1/src/eckey_impl.h	/^#define SECP256K1_ECKEY_IMPL_H$/;"	d
SECP256K1_ECMULT_CONST_H	src/secp256k1/src/ecmult_const.h	/^#define SECP256K1_ECMULT_CONST_H$/;"	d
SECP256K1_ECMULT_CONST_IMPL_H	src/secp256k1/src/ecmult_const_impl.h	/^#define SECP256K1_ECMULT_CONST_IMPL_H$/;"	d
SECP256K1_ECMULT_GEN_H	src/secp256k1/src/ecmult_gen.h	/^#define SECP256K1_ECMULT_GEN_H$/;"	d
SECP256K1_ECMULT_GEN_IMPL_H	src/secp256k1/src/ecmult_gen_impl.h	/^#define SECP256K1_ECMULT_GEN_IMPL_H$/;"	d
SECP256K1_ECMULT_H	src/secp256k1/src/ecmult.h	/^#define SECP256K1_ECMULT_H$/;"	d
SECP256K1_ECMULT_IMPL_H	src/secp256k1/src/ecmult_impl.h	/^#define SECP256K1_ECMULT_IMPL_H$/;"	d
SECP256K1_EC_COMPRESSED	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_EC_COMPRESSED /;"	d
SECP256K1_EC_PARSE_TEST_NINVALID	src/secp256k1/src/tests.c	/^#define SECP256K1_EC_PARSE_TEST_NINVALID /;"	d	file:
SECP256K1_EC_PARSE_TEST_NVALID	src/secp256k1/src/tests.c	/^#define SECP256K1_EC_PARSE_TEST_NVALID /;"	d	file:
SECP256K1_EC_PARSE_TEST_NXVALID	src/secp256k1/src/tests.c	/^#define SECP256K1_EC_PARSE_TEST_NXVALID /;"	d	file:
SECP256K1_EC_UNCOMPRESSED	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_EC_UNCOMPRESSED /;"	d
SECP256K1_FE_CONST	src/secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_CONST(/;"	d
SECP256K1_FE_CONST	src/secp256k1/src/field_5x52.h	/^#define SECP256K1_FE_CONST(/;"	d
SECP256K1_FE_CONST_INNER	src/secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_CONST_INNER(/;"	d
SECP256K1_FE_CONST_INNER	src/secp256k1/src/field_5x52.h	/^#define SECP256K1_FE_CONST_INNER(/;"	d
SECP256K1_FE_STORAGE_CONST	src/secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_STORAGE_CONST(/;"	d
SECP256K1_FE_STORAGE_CONST	src/secp256k1/src/field_5x52.h	/^#define SECP256K1_FE_STORAGE_CONST(/;"	d
SECP256K1_FE_STORAGE_CONST_GET	src/secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_STORAGE_CONST_GET(/;"	d
SECP256K1_FIELD_H	src/secp256k1/src/field.h	/^#define SECP256K1_FIELD_H$/;"	d
SECP256K1_FIELD_IMPL_H	src/secp256k1/src/field_impl.h	/^#define SECP256K1_FIELD_IMPL_H$/;"	d
SECP256K1_FIELD_INNER5X52_IMPL_H	src/secp256k1/src/field_5x52_asm_impl.h	/^#define SECP256K1_FIELD_INNER5X52_IMPL_H$/;"	d
SECP256K1_FIELD_INNER5X52_IMPL_H	src/secp256k1/src/field_5x52_int128_impl.h	/^#define SECP256K1_FIELD_INNER5X52_IMPL_H$/;"	d
SECP256K1_FIELD_REPR_H	src/secp256k1/src/field_10x26.h	/^#define SECP256K1_FIELD_REPR_H$/;"	d
SECP256K1_FIELD_REPR_H	src/secp256k1/src/field_5x52.h	/^#define SECP256K1_FIELD_REPR_H$/;"	d
SECP256K1_FIELD_REPR_IMPL_H	src/secp256k1/src/field_10x26_impl.h	/^#define SECP256K1_FIELD_REPR_IMPL_H$/;"	d
SECP256K1_FIELD_REPR_IMPL_H	src/secp256k1/src/field_5x52_impl.h	/^#define SECP256K1_FIELD_REPR_IMPL_H$/;"	d
SECP256K1_FLAGS_BIT_COMPRESSION	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_BIT_COMPRESSION /;"	d
SECP256K1_FLAGS_BIT_CONTEXT_SIGN	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_BIT_CONTEXT_SIGN /;"	d
SECP256K1_FLAGS_BIT_CONTEXT_VERIFY	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY /;"	d
SECP256K1_FLAGS_TYPE_COMPRESSION	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_TYPE_COMPRESSION /;"	d
SECP256K1_FLAGS_TYPE_CONTEXT	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_TYPE_CONTEXT /;"	d
SECP256K1_FLAGS_TYPE_MASK	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_TYPE_MASK /;"	d
SECP256K1_G	test/functional/test_framework/key.py	/^SECP256K1_G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8, 1)$/;"	v
SECP256K1_GEJ_CONST	src/secp256k1/src/group.h	/^#define SECP256K1_GEJ_CONST(/;"	d
SECP256K1_GEJ_CONST_INFINITY	src/secp256k1/src/group.h	/^#define SECP256K1_GEJ_CONST_INFINITY /;"	d
SECP256K1_GE_CONST	src/secp256k1/src/group.h	/^#define SECP256K1_GE_CONST(/;"	d
SECP256K1_GE_CONST_INFINITY	src/secp256k1/src/group.h	/^#define SECP256K1_GE_CONST_INFINITY /;"	d
SECP256K1_GE_STORAGE_CONST	src/secp256k1/src/group.h	/^#define SECP256K1_GE_STORAGE_CONST(/;"	d
SECP256K1_GE_STORAGE_CONST_GET	src/secp256k1/src/group.h	/^#define SECP256K1_GE_STORAGE_CONST_GET(/;"	d
SECP256K1_GNUC_EXT	src/secp256k1/src/util.h	/^#  define SECP256K1_GNUC_EXT /;"	d
SECP256K1_GNUC_EXT	src/secp256k1/src/util.h	/^#  define SECP256K1_GNUC_EXT$/;"	d
SECP256K1_GNUC_PREREQ	src/secp256k1/include/secp256k1.h	/^#   define SECP256K1_GNUC_PREREQ(/;"	d
SECP256K1_GROUP_H	src/secp256k1/src/group.h	/^#define SECP256K1_GROUP_H$/;"	d
SECP256K1_GROUP_IMPL_H	src/secp256k1/src/group_impl.h	/^#define SECP256K1_GROUP_IMPL_H$/;"	d
SECP256K1_H	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_H$/;"	d
SECP256K1_HASH_H	src/secp256k1/src/hash.h	/^#define SECP256K1_HASH_H$/;"	d
SECP256K1_HASH_IMPL_H	src/secp256k1/src/hash_impl.h	/^#define SECP256K1_HASH_IMPL_H$/;"	d
SECP256K1_INLINE	src/secp256k1/include/secp256k1.h	/^#   define SECP256K1_INLINE /;"	d
SECP256K1_INLINE	src/secp256k1/include/secp256k1.h	/^#   define SECP256K1_INLINE$/;"	d
SECP256K1_INLINE	src/secp256k1/include/secp256k1.h	/^#  define SECP256K1_INLINE /;"	d
SECP256K1_MODULE_ECDH_MAIN_H	src/secp256k1/src/modules/ecdh/main_impl.h	/^#define SECP256K1_MODULE_ECDH_MAIN_H$/;"	d
SECP256K1_MODULE_ECDH_TESTS_H	src/secp256k1/src/modules/ecdh/tests_impl.h	/^#define SECP256K1_MODULE_ECDH_TESTS_H$/;"	d
SECP256K1_MODULE_RECOVERY_MAIN_H	src/secp256k1/src/modules/recovery/main_impl.h	/^#define SECP256K1_MODULE_RECOVERY_MAIN_H$/;"	d
SECP256K1_MODULE_RECOVERY_TESTS_H	src/secp256k1/src/modules/recovery/tests_impl.h	/^#define SECP256K1_MODULE_RECOVERY_TESTS_H$/;"	d
SECP256K1_NUM_H	src/secp256k1/src/num.h	/^#define SECP256K1_NUM_H$/;"	d
SECP256K1_NUM_IMPL_H	src/secp256k1/src/num_impl.h	/^#define SECP256K1_NUM_IMPL_H$/;"	d
SECP256K1_NUM_REPR_H	src/secp256k1/src/num_gmp.h	/^#define SECP256K1_NUM_REPR_H$/;"	d
SECP256K1_NUM_REPR_IMPL_H	src/secp256k1/src/num_gmp_impl.h	/^#define SECP256K1_NUM_REPR_IMPL_H$/;"	d
SECP256K1_N_0	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_0 /;"	d
SECP256K1_N_0	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_0 /;"	d
SECP256K1_N_1	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_1 /;"	d
SECP256K1_N_1	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_1 /;"	d
SECP256K1_N_2	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_2 /;"	d
SECP256K1_N_2	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_2 /;"	d
SECP256K1_N_3	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_3 /;"	d
SECP256K1_N_3	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_3 /;"	d
SECP256K1_N_4	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_4 /;"	d
SECP256K1_N_5	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_5 /;"	d
SECP256K1_N_6	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_6 /;"	d
SECP256K1_N_7	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_7 /;"	d
SECP256K1_N_C_0	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_C_0 /;"	d
SECP256K1_N_C_0	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_0 /;"	d
SECP256K1_N_C_1	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_C_1 /;"	d
SECP256K1_N_C_1	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_1 /;"	d
SECP256K1_N_C_2	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_C_2 /;"	d
SECP256K1_N_C_2	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_2 /;"	d
SECP256K1_N_C_3	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_3 /;"	d
SECP256K1_N_C_4	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_4 /;"	d
SECP256K1_N_H_0	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_0 /;"	d
SECP256K1_N_H_0	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_0 /;"	d
SECP256K1_N_H_1	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_1 /;"	d
SECP256K1_N_H_1	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_1 /;"	d
SECP256K1_N_H_2	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_2 /;"	d
SECP256K1_N_H_2	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_2 /;"	d
SECP256K1_N_H_3	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_3 /;"	d
SECP256K1_N_H_3	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_3 /;"	d
SECP256K1_N_H_4	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_4 /;"	d
SECP256K1_N_H_5	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_5 /;"	d
SECP256K1_N_H_6	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_6 /;"	d
SECP256K1_N_H_7	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_7 /;"	d
SECP256K1_ORDER	test/functional/test_framework/key.py	/^SECP256K1_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141$/;"	v
SECP256K1_ORDER_HALF	test/functional/test_framework/key.py	/^SECP256K1_ORDER_HALF = SECP256K1_ORDER \/\/ 2$/;"	v
SECP256K1_RECOVERY_H	src/secp256k1/include/secp256k1_recovery.h	/^#define SECP256K1_RECOVERY_H$/;"	d
SECP256K1_RESTRICT	src/secp256k1/src/util.h	/^#   define SECP256K1_RESTRICT /;"	d
SECP256K1_RESTRICT	src/secp256k1/src/util.h	/^#   define SECP256K1_RESTRICT$/;"	d
SECP256K1_RESTRICT	src/secp256k1/src/util.h	/^#  define SECP256K1_RESTRICT /;"	d
SECP256K1_RESTRICT	src/secp256k1/src/util.h	/^# define SECP256K1_RESTRICT$/;"	d
SECP256K1_SCALAR_CONST	src/secp256k1/src/scalar_4x64.h	/^#define SECP256K1_SCALAR_CONST(/;"	d
SECP256K1_SCALAR_CONST	src/secp256k1/src/scalar_8x32.h	/^#define SECP256K1_SCALAR_CONST(/;"	d
SECP256K1_SCALAR_H	src/secp256k1/src/scalar.h	/^#define SECP256K1_SCALAR_H$/;"	d
SECP256K1_SCALAR_IMPL_H	src/secp256k1/src/scalar_impl.h	/^#define SECP256K1_SCALAR_IMPL_H$/;"	d
SECP256K1_SCALAR_REPR_H	src/secp256k1/src/scalar_4x64.h	/^#define SECP256K1_SCALAR_REPR_H$/;"	d
SECP256K1_SCALAR_REPR_H	src/secp256k1/src/scalar_8x32.h	/^#define SECP256K1_SCALAR_REPR_H$/;"	d
SECP256K1_SCALAR_REPR_H	src/secp256k1/src/scalar_low.h	/^#define SECP256K1_SCALAR_REPR_H$/;"	d
SECP256K1_SCALAR_REPR_IMPL_H	src/secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_SCALAR_REPR_IMPL_H$/;"	d
SECP256K1_SCALAR_REPR_IMPL_H	src/secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_SCALAR_REPR_IMPL_H$/;"	d
SECP256K1_SCALAR_REPR_IMPL_H	src/secp256k1/src/scalar_low_impl.h	/^#define SECP256K1_SCALAR_REPR_IMPL_H$/;"	d
SECP256K1_TAG_PUBKEY_EVEN	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_EVEN /;"	d
SECP256K1_TAG_PUBKEY_HYBRID_EVEN	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN /;"	d
SECP256K1_TAG_PUBKEY_HYBRID_ODD	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_HYBRID_ODD /;"	d
SECP256K1_TAG_PUBKEY_ODD	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_ODD /;"	d
SECP256K1_TAG_PUBKEY_UNCOMPRESSED	src/secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED /;"	d
SECP256K1_TESTRAND_H	src/secp256k1/src/testrand.h	/^#define SECP256K1_TESTRAND_H$/;"	d
SECP256K1_TESTRAND_IMPL_H	src/secp256k1/src/testrand_impl.h	/^#define SECP256K1_TESTRAND_IMPL_H$/;"	d
SECP256K1_UTIL_H	src/secp256k1/src/util.h	/^#define SECP256K1_UTIL_H$/;"	d
SECP256K1_WARN_UNUSED_RESULT	src/secp256k1/include/secp256k1.h	/^#  define SECP256K1_WARN_UNUSED_RESULT /;"	d
SECP256K1_WARN_UNUSED_RESULT	src/secp256k1/include/secp256k1.h	/^#  define SECP256K1_WARN_UNUSED_RESULT$/;"	d
SECP_INCLUDES	src/secp256k1/Makefile	/^SECP_INCLUDES = $/;"	m
SECP_LIBS	src/secp256k1/Makefile	/^SECP_LIBS = $/;"	m
SECP_TEST_INCLUDES	src/secp256k1/Makefile	/^SECP_TEST_INCLUDES = $/;"	m
SECP_TEST_LIBS	src/secp256k1/Makefile	/^SECP_TEST_LIBS = $/;"	m
SECRET_KEY	src/chainparams.h	/^        SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
SECTION_NEGATE	src/test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
SECTION_SET	src/test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
SECURE	src/ui_interface.h	/^        SECURE              = 0x40000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
SED	Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	doc/man/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	src/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	src/secp256k1/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	src/univalue/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SEGWIT_HEIGHT	test/functional/p2p_segwit.py	/^SEGWIT_HEIGHT = 120$/;"	v
SELECT_TIMEOUT_MILLISECONDS	src/net.cpp	/^static const uint64_t SELECT_TIMEOUT_MILLISECONDS = 50;$/;"	v	file:
SENDCMPCT	src/protocol.cpp	/^const char *SENDCMPCT="sendcmpct";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS	src/protocol.cpp	/^const char *SENDHEADERS="sendheaders";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS_VERSION	src/version.h	/^static const int SENDHEADERS_VERSION = 70012;$/;"	v
SEND_CONFIRM_DELAY	src/qt/sendcoinsdialog.h	/^#define SEND_CONFIRM_DELAY /;"	d
SEPARATOR	contrib/devtools/copyright_header.py	/^SEPARATOR = '-'.join(['' for _ in range(80)])$/;"	v
SEQUENCE_FINAL	src/primitives/transaction.h	/^    static const uint32_t SEQUENCE_FINAL = 0xffffffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_DISABLE_FLAG	src/primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1U << 31);$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_DISABLE_FLAG	test/functional/feature_bip68_sequence.py	/^SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)$/;"	v
SEQUENCE_LOCKTIME_GRANULARITY	src/primitives/transaction.h	/^    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_GRANULARITY	test/functional/feature_bip68_sequence.py	/^SEQUENCE_LOCKTIME_GRANULARITY = 9 # this is a bit-shift$/;"	v
SEQUENCE_LOCKTIME_MASK	src/primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_MASK	test/functional/feature_bip68_sequence.py	/^SEQUENCE_LOCKTIME_MASK = 0x0000ffff$/;"	v
SEQUENCE_LOCKTIME_TYPE_FLAG	src/primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_TYPE_FLAG	test/functional/feature_bip68_sequence.py	/^SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)$/;"	v
SEQUENTIAL	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQUENTIAL	src/leveldb/doc/bench/db_bench_tree_db.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQ_DISABLE_FLAG	test/functional/feature_csv_activation.py	/^SEQ_DISABLE_FLAG = 1 << 31$/;"	v
SEQ_RANDOM_HIGH_BIT	test/functional/feature_csv_activation.py	/^SEQ_RANDOM_HIGH_BIT = 1 << 25$/;"	v
SEQ_RANDOM_LOW_BIT	test/functional/feature_csv_activation.py	/^SEQ_RANDOM_LOW_BIT = 1 << 18$/;"	v
SEQ_TYPE_FLAG	test/functional/feature_csv_activation.py	/^SEQ_TYPE_FLAG = 1 << 22$/;"	v
SERIALIZE_TRANSACTION_NO_WITNESS	src/primitives/transaction.h	/^static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;$/;"	v
SER_DISK	src/serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon124
SER_GETHASH	src/serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon124
SER_NETWORK	src/serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon124
SET	src/test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
SET_DOC_OPTIONAL	test/lint/check-doc.py	/^SET_DOC_OPTIONAL = set(['-h', '-help', '-dbcrashratio', '-forcecompactdb'])$/;"	v
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	doc/man/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	src/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	src/secp256k1/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	src/univalue/Makefile	/^SET_MAKE = $/;"	m
SHA1	src/bench/crypto_hash.cpp	/^static void SHA1(benchmark::State& state)$/;"	f	file:
SHA256	contrib/testgen/base58.py	/^class SHA256:$/;"	c
SHA256	src/bench/crypto_hash.cpp	/^static void SHA256(benchmark::State& state)$/;"	f	file:
SHA256AutoDetect	src/crypto/sha256.cpp	/^std::string SHA256AutoDetect()$/;"	f
SHA256D64	src/crypto/sha256.cpp	/^void SHA256D64(unsigned char* out, const unsigned char* in, size_t blocks)$/;"	f
SHA256D64_1024	src/bench/crypto_hash.cpp	/^static void SHA256D64_1024(benchmark::State& state)$/;"	f	file:
SHA256_32b	src/bench/crypto_hash.cpp	/^static void SHA256_32b(benchmark::State& state)$/;"	f	file:
SHA512	src/bench/crypto_hash.cpp	/^static void SHA512(benchmark::State& state)$/;"	f	file:
SHANI_CXXFLAGS	Makefile	/^SHANI_CXXFLAGS = -msse4 -msha$/;"	m
SHANI_CXXFLAGS	doc/man/Makefile	/^SHANI_CXXFLAGS = -msse4 -msha$/;"	m
SHANI_CXXFLAGS	src/Makefile	/^SHANI_CXXFLAGS = -msse4 -msha$/;"	m
SHARED_ALLOBJS	src/leveldb/Makefile	/^SHARED_ALLOBJS := $(SHARED_LIBOBJECTS) $(SHARED_MEMENVOBJECTS) $(TESTHARNESS)$/;"	m
SHARED_LIB1	src/leveldb/Makefile	/^SHARED_LIB1 = libleveldb.$(PLATFORM_SHARED_EXT)$/;"	m
SHARED_LIB2	src/leveldb/Makefile	/^SHARED_LIB2 = $(SHARED_LIB1)$/;"	m
SHARED_LIB2	src/leveldb/Makefile	/^SHARED_LIB2 = $(SHARED_LIB1).$(SHARED_VERSION_MAJOR)$/;"	m
SHARED_LIB3	src/leveldb/Makefile	/^SHARED_LIB3 = $(SHARED_LIB1)$/;"	m
SHARED_LIB3	src/leveldb/Makefile	/^SHARED_LIB3 = $(SHARED_LIB1).$(SHARED_VERSION_MAJOR).$(SHARED_VERSION_MINOR)$/;"	m
SHARED_LIBOBJECTS	src/leveldb/Makefile	/^SHARED_LIBOBJECTS := $(addprefix $(SHARED_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
SHARED_LIBS	src/leveldb/Makefile	/^SHARED_LIBS = $(SHARED_LIB1)$/;"	m
SHARED_LIBS	src/leveldb/Makefile	/^SHARED_LIBS = $(SHARED_OUTDIR)\/$(SHARED_LIB1) $(SHARED_OUTDIR)\/$(SHARED_LIB2) $(SHARED_OUTDIR)\/$(SHARED_LIB3)$/;"	m
SHARED_LOCKS_REQUIRED	src/leveldb/port/thread_annotations.h	/^#define SHARED_LOCKS_REQUIRED(/;"	d
SHARED_LOCKS_REQUIRED	src/threadsafety.h	/^#define SHARED_LOCKS_REQUIRED(/;"	d
SHARED_LOCK_FUNCTION	src/leveldb/port/thread_annotations.h	/^#define SHARED_LOCK_FUNCTION(/;"	d
SHARED_LOCK_FUNCTION	src/threadsafety.h	/^#define SHARED_LOCK_FUNCTION(/;"	d
SHARED_MEMENVLIB	src/leveldb/Makefile	/^SHARED_MEMENVLIB = $(SHARED_OUTDIR)\/libmemenv.a$/;"	m
SHARED_MEMENVOBJECTS	src/leveldb/Makefile	/^SHARED_MEMENVOBJECTS := $(addprefix $(SHARED_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
SHARED_OUTDIR	src/leveldb/Makefile	/^SHARED_OUTDIR=out-shared$/;"	m
SHARED_PROGRAMS	src/leveldb/Makefile	/^SHARED_PROGRAMS := $(addprefix $(SHARED_OUTDIR)\/, db_bench)$/;"	m
SHARED_TRYLOCK_FUNCTION	src/leveldb/port/thread_annotations.h	/^#define SHARED_TRYLOCK_FUNCTION(/;"	d
SHARED_TRYLOCK_FUNCTION	src/threadsafety.h	/^#define SHARED_TRYLOCK_FUNCTION(/;"	d
SHARED_VERSION_MAJOR	src/leveldb/Makefile	/^SHARED_VERSION_MAJOR = 1$/;"	m
SHARED_VERSION_MINOR	src/leveldb/Makefile	/^SHARED_VERSION_MINOR = 20$/;"	m
SHDescriptor	src/script/descriptor.cpp	/^    SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), "sh") {}$/;"	f	class:__anon75::final
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	doc/man/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	src/secp256k1/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	src/univalue/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHORTTXIDS_LENGTH	src/blockencodings.h	/^    static const int SHORTTXIDS_LENGTH = 6;$/;"	m	class:CBlockHeaderAndShortTxIDs
SHORT_BLOCK_PERIODS	src/policy/fees.h	/^    static constexpr unsigned int SHORT_BLOCK_PERIODS = 12;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SHORT_DECAY	src/policy/fees.h	/^    static constexpr double SHORT_DECAY = .962;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SHORT_HALFLIFE	src/policy/fees.h	/^    SHORT_HALFLIFE = 0,$/;"	m	class:FeeEstimateHorizon
SHORT_IDS_BLOCKS_VERSION	src/version.h	/^static const int SHORT_IDS_BLOCKS_VERSION = 70014;$/;"	v
SHORT_SCALE	src/policy/fees.h	/^    static constexpr unsigned int SHORT_SCALE = 1;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SIGHASH_ALL	src/script/interpreter.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon78
SIGHASH_ALL	test/functional/test_framework/script.py	/^SIGHASH_ALL = 1$/;"	v
SIGHASH_ANYONECANPAY	src/script/interpreter.h	/^    SIGHASH_ANYONECANPAY = 0x80,$/;"	e	enum:__anon78
SIGHASH_ANYONECANPAY	test/functional/test_framework/script.py	/^SIGHASH_ANYONECANPAY = 0x80$/;"	v
SIGHASH_MISMATCH	src/util/error.h	/^    SIGHASH_MISMATCH,$/;"	m	class:TransactionError
SIGHASH_NONE	src/script/interpreter.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon78
SIGHASH_NONE	test/functional/test_framework/script.py	/^SIGHASH_NONE = 2$/;"	v
SIGHASH_SINGLE	src/script/interpreter.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon78
SIGHASH_SINGLE	test/functional/test_framework/script.py	/^SIGHASH_SINGLE = 3$/;"	v
SIGNABLE	src/test/descriptor_tests.cpp	/^constexpr int SIGNABLE = 8; \/\/ We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)$/;"	m	namespace:__anon56	file:
SIGNATURE_SIZE	src/pubkey.h	/^    static constexpr unsigned int SIGNATURE_SIZE              = 72;$/;"	m	class:CPubKey
SIGNER	src/psbt.h	/^    SIGNER,$/;"	m	class:PSBTRole
SIMULATORSDK	src/leveldb/Makefile	/^SIMULATORSDK=$(shell xcrun -sdk iphonesimulator --show-sdk-path)$/;"	m
SIMULATOR_ALLOBJS	src/leveldb/Makefile	/^SIMULATOR_ALLOBJS := $(SIMULATOR_LIBOBJECTS) $(SIMULATOR_MEMENVOBJECTS)$/;"	m
SIMULATOR_CFLAGS	src/leveldb/Makefile	/^SIMULATOR_CFLAGS = -isysroot "$(SIMULATORSDK)" -arch i686 -arch x86_64$/;"	m
SIMULATOR_LIBOBJECTS	src/leveldb/Makefile	/^SIMULATOR_LIBOBJECTS := $(addprefix $(SIMULATOR_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
SIMULATOR_MEMENVOBJECTS	src/leveldb/Makefile	/^SIMULATOR_MEMENVOBJECTS := $(addprefix $(SIMULATOR_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
SIMULATOR_OUTDIR	src/leveldb/Makefile	/^SIMULATOR_OUTDIR=out-ios-x86$/;"	m
SIPROUND	src/crypto/siphash.cpp	/^#define SIPROUND /;"	d	file:
SIXPEREM_SP_CP	src/qt/bitcoinunits.h	/^#define SIXPEREM_SP_CP /;"	d
SIXPEREM_SP_HTML	src/qt/bitcoinunits.h	/^#define SIXPEREM_SP_HTML /;"	d
SIXPEREM_SP_UTF8	src/qt/bitcoinunits.h	/^#define SIXPEREM_SP_UTF8 /;"	d
SIZELIMIT	src/txmempool.h	/^    SIZELIMIT,   \/\/!< Removed in size limiting$/;"	m	class:MemPoolRemovalReason
SKIPLIST_LENGTH	src/test/skiplist_tests.cpp	/^#define SKIPLIST_LENGTH /;"	d	file:
SKIPPED	test/functional/test_framework/test_framework.py	/^    SKIPPED = 3$/;"	v	class:TestStatus
SLEEP	src/random.cpp	/^    SLEEP, \/\/!< Called by RandAddSeedSleep()$/;"	m	class:RNGLevel	file:
SLOW	src/random.cpp	/^    SLOW, \/\/!< Automatically called by GetStrongRandBytes$/;"	m	class:RNGLevel	file:
SOCKET	src/compat.h	/^typedef unsigned int SOCKET;$/;"	t
SOCKET_ERROR	src/compat.h	/^#define SOCKET_ERROR /;"	d
SOCKS4	src/netbase.cpp	/^    SOCKS4 = 0x04,$/;"	e	enum:uint8_t	file:
SOCKS5	src/netbase.cpp	/^    SOCKS5 = 0x05$/;"	e	enum:uint8_t	file:
SOCKS5_RECV_TIMEOUT	src/netbase.cpp	/^static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;$/;"	v	file:
SOURCES	Makefile	/^SOURCES =$/;"	m
SOURCES	doc/man/Makefile	/^SOURCES =$/;"	m
SOURCES	src/Makefile	/^SOURCES = $(crypto_libbitcoin_crypto_avx2_a_SOURCES) \\$/;"	m
SOURCES	src/secp256k1/Makefile	/^SOURCES = $(libsecp256k1_la_SOURCES) $(libsecp256k1_common_la_SOURCES) \\$/;"	m
SOURCES	src/univalue/Makefile	/^SOURCES = $(libunivalue_la_SOURCES) $(test_no_nul_SOURCES) \\$/;"	m
SOURCES	test/lint/check-rpc-mappings.py	/^SOURCES = [$/;"	v
SOURCES_PATH	depends/Makefile	/^SOURCES_PATH ?= $(BASEDIR)\/sources$/;"	m
SOURCE_CLIENT	test/lint/check-rpc-mappings.py	/^SOURCE_CLIENT = 'src\/rpc\/client.cpp'$/;"	v
SOURCE_DIR	build_msvc/msvc-autogen.py	/^SOURCE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))$/;"	v
SOURCE_LANG	contrib/devtools/update-translations.py	/^SOURCE_LANG = 'bitcoin_en.ts'$/;"	v
SPENDABLE	src/script/ismine.cpp	/^    SPENDABLE = 2,  \/\/!< Included in all balances$/;"	m	class:__anon85::IsMineResult	file:
SPINNER_FRAMES	src/qt/guiconstants.h	/^#define SPINNER_FRAMES /;"	d
SSE41_CXXFLAGS	Makefile	/^SSE41_CXXFLAGS = -msse4.1$/;"	m
SSE41_CXXFLAGS	doc/man/Makefile	/^SSE41_CXXFLAGS = -msse4.1$/;"	m
SSE41_CXXFLAGS	src/Makefile	/^SSE41_CXXFLAGS = -msse4.1$/;"	m
SSE42_CXXFLAGS	Makefile	/^SSE42_CXXFLAGS = -msse4.2$/;"	m
SSE42_CXXFLAGS	doc/man/Makefile	/^SSE42_CXXFLAGS = -msse4.2$/;"	m
SSE42_CXXFLAGS	src/Makefile	/^SSE42_CXXFLAGS = -msse4.2$/;"	m
SSLVerifyError	src/qt/paymentrequestplus.cpp	/^    explicit SSLVerifyError(std::string err) : std::runtime_error(err) { }$/;"	f	class:SSLVerifyError
SSLVerifyError	src/qt/paymentrequestplus.cpp	/^class SSLVerifyError : public std::runtime_error$/;"	c	file:
SSL_CFLAGS	Makefile	/^SSL_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
SSL_CFLAGS	doc/man/Makefile	/^SSL_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
SSL_CFLAGS	src/Makefile	/^SSL_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
SSL_LIBS	Makefile	/^SSL_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lssl$/;"	m
SSL_LIBS	doc/man/Makefile	/^SSL_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lssl$/;"	m
SSL_LIBS	src/Makefile	/^SSL_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lssl$/;"	m
SSTTableFileName	src/leveldb/db/filename.cc	/^std::string SSTTableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
STALE_CHECK_INTERVAL	src/net_processing.cpp	/^static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; \/\/ 10 minutes$/;"	v	file:
STALE_RELAY_AGE_LIMIT	src/net_processing.cpp	/^static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;$/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	src/policy/policy.h	/^static constexpr unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |$/;"	v
STANDARD_NOT_MANDATORY_VERIFY_FLAGS	src/policy/policy.h	/^static constexpr unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;$/;"	v
STANDARD_SCRIPT_VERIFY_FLAGS	src/policy/policy.h	/^static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |$/;"	v
STARTED	src/versionbits.h	/^    STARTED,$/;"	m	class:ThresholdState
STARTING	src/leveldb/db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
STATE_LISTEN	test/functional/test_framework/netutil.py	/^STATE_LISTEN = '0A'$/;"	v
STATIC_ALLOBJS	src/leveldb/Makefile	/^STATIC_ALLOBJS := $(STATIC_LIBOBJECTS) $(STATIC_MEMENVOBJECTS) $(STATIC_TESTOBJS) $(STATIC_UTILOBJS) $(TESTHARNESS)$/;"	m
STATIC_LIBOBJECTS	src/leveldb/Makefile	/^STATIC_LIBOBJECTS := $(addprefix $(STATIC_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
STATIC_MEMENVOBJECTS	src/leveldb/Makefile	/^STATIC_MEMENVOBJECTS := $(addprefix $(STATIC_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
STATIC_OUTDIR	src/leveldb/Makefile	/^STATIC_OUTDIR=out-ios-universal$/;"	m
STATIC_OUTDIR	src/leveldb/Makefile	/^STATIC_OUTDIR=out-static$/;"	m
STATIC_PROGRAMS	src/leveldb/Makefile	/^STATIC_PROGRAMS := $(addprefix $(STATIC_OUTDIR)\/, $(PROGNAMES))$/;"	m
STATIC_TESTOBJS	src/leveldb/Makefile	/^STATIC_TESTOBJS := $(addprefix $(STATIC_OUTDIR)\/, $(addsuffix .o, $(TESTS)))$/;"	m
STATIC_UTILOBJS	src/leveldb/Makefile	/^STATIC_UTILOBJS := $(addprefix $(STATIC_OUTDIR)\/, $(addsuffix .o, $(UTILS)))$/;"	m
STATUSBAR_ICONSIZE	src/qt/guiconstants.h	/^static const int STATUSBAR_ICONSIZE = 16;$/;"	v
STATUS_COLUMN_WIDTH	src/qt/transactionview.h	/^        STATUS_COLUMN_WIDTH = 30,$/;"	e	enum:TransactionView::ColumnWidths
STDC_HEADERS	build_msvc/bitcoin_config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	src/config/bitcoin-config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	src/secp256k1/src/libsecp256k1-config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	src/univalue/univalue-config.h	/^#define STDC_HEADERS /;"	d
STD_ERROR_HANDLE	test/functional/test_runner.py	/^        STD_ERROR_HANDLE = -12$/;"	v
STD_OUTPUT_HANDLE	test/functional/test_runner.py	/^        STD_OUTPUT_HANDLE = -11$/;"	v
STEP1	src/leveldb/util/crc32c.cc	/^#define STEP1 /;"	d	file:
STEP1	src/leveldb/util/crc32c.cc	/^#undef STEP1$/;"	d	file:
STEP4	src/leveldb/util/crc32c.cc	/^#define STEP4 /;"	d	file:
STEP4	src/leveldb/util/crc32c.cc	/^#undef STEP4$/;"	d	file:
STLLessThan	src/leveldb/table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon16::STLLessThan
STLLessThan	src/leveldb/table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon16::STLLessThan
STLLessThan	src/leveldb/table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon16	file:
STORAGE_LEVELDB_DB_BUILDER_H_	src/leveldb/db/builder.h	/^#define STORAGE_LEVELDB_DB_BUILDER_H_$/;"	d
STORAGE_LEVELDB_DB_DBFORMAT_H_	src/leveldb/db/dbformat.h	/^#define STORAGE_LEVELDB_DB_DBFORMAT_H_$/;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	src/leveldb/db/db_impl.h	/^#define STORAGE_LEVELDB_DB_DB_IMPL_H_$/;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	src/leveldb/db/db_iter.h	/^#define STORAGE_LEVELDB_DB_DB_ITER_H_$/;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	src/leveldb/db/filename.h	/^#define STORAGE_LEVELDB_DB_FILENAME_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	src/leveldb/db/log_format.h	/^#define STORAGE_LEVELDB_DB_LOG_FORMAT_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	src/leveldb/db/log_reader.h	/^#define STORAGE_LEVELDB_DB_LOG_READER_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	src/leveldb/db/log_writer.h	/^#define STORAGE_LEVELDB_DB_LOG_WRITER_H_$/;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	src/leveldb/db/memtable.h	/^#define STORAGE_LEVELDB_DB_MEMTABLE_H_$/;"	d
STORAGE_LEVELDB_DB_SKIPLIST_H_	src/leveldb/db/skiplist.h	/^#define STORAGE_LEVELDB_DB_SKIPLIST_H_$/;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	src/leveldb/db/snapshot.h	/^#define STORAGE_LEVELDB_DB_SNAPSHOT_H_$/;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	src/leveldb/db/table_cache.h	/^#define STORAGE_LEVELDB_DB_TABLE_CACHE_H_$/;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	src/leveldb/db/version_edit.h	/^#define STORAGE_LEVELDB_DB_VERSION_EDIT_H_$/;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	src/leveldb/db/version_set.h	/^#define STORAGE_LEVELDB_DB_VERSION_SET_H_$/;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	src/leveldb/db/write_batch_internal.h	/^#define STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_$/;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	src/leveldb/helpers/memenv/memenv.h	/^#define STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	src/leveldb/include/leveldb/cache.h	/^#define STORAGE_LEVELDB_INCLUDE_CACHE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	src/leveldb/include/leveldb/comparator.h	/^#define STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	src/leveldb/include/leveldb/c.h	/^#define STORAGE_LEVELDB_INCLUDE_C_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	src/leveldb/include/leveldb/db.h	/^#define STORAGE_LEVELDB_INCLUDE_DB_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_	src/leveldb/include/leveldb/dumpfile.h	/^#define STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	src/leveldb/include/leveldb/env.h	/^#define STORAGE_LEVELDB_INCLUDE_ENV_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	src/leveldb/include/leveldb/filter_policy.h	/^#define STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	src/leveldb/include/leveldb/iterator.h	/^#define STORAGE_LEVELDB_INCLUDE_ITERATOR_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	src/leveldb/include/leveldb/options.h	/^#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	src/leveldb/include/leveldb/slice.h	/^#define STORAGE_LEVELDB_INCLUDE_SLICE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	src/leveldb/include/leveldb/status.h	/^#define STORAGE_LEVELDB_INCLUDE_STATUS_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	src/leveldb/include/leveldb/table_builder.h	/^#define STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	src/leveldb/include/leveldb/table.h	/^#define STORAGE_LEVELDB_INCLUDE_TABLE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	src/leveldb/include/leveldb/write_batch.h	/^#define STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	src/leveldb/port/port_example.h	/^#define STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_H_	src/leveldb/port/port.h	/^#define STORAGE_LEVELDB_PORT_PORT_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	src/leveldb/port/port_posix.h	/^#define STORAGE_LEVELDB_PORT_PORT_POSIX_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_WIN_H_	src/leveldb/port/port_win.h	/^#define STORAGE_LEVELDB_PORT_PORT_WIN_H_$/;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	src/leveldb/port/thread_annotations.h	/^#define STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_$/;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	src/leveldb/port/win/stdint.h	/^#define STORAGE_LEVELDB_PORT_WIN_STDINT_H_$/;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	src/leveldb/table/block_builder.h	/^#define STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_$/;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	src/leveldb/table/block.h	/^#define STORAGE_LEVELDB_TABLE_BLOCK_H_$/;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	src/leveldb/table/filter_block.h	/^#define STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_$/;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	src/leveldb/table/format.h	/^#define STORAGE_LEVELDB_TABLE_FORMAT_H_$/;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	src/leveldb/table/iterator_wrapper.h	/^#define STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_$/;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	src/leveldb/table/merger.h	/^#define STORAGE_LEVELDB_TABLE_MERGER_H_$/;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	src/leveldb/table/two_level_iterator.h	/^#define STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_$/;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	src/leveldb/util/arena.h	/^#define STORAGE_LEVELDB_UTIL_ARENA_H_$/;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	src/leveldb/util/coding.h	/^#define STORAGE_LEVELDB_UTIL_CODING_H_$/;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	src/leveldb/util/crc32c.h	/^#define STORAGE_LEVELDB_UTIL_CRC32C_H_$/;"	d
STORAGE_LEVELDB_UTIL_ENV_POSIX_TEST_HELPER_H_	src/leveldb/util/env_posix_test_helper.h	/^#define STORAGE_LEVELDB_UTIL_ENV_POSIX_TEST_HELPER_H_$/;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	src/leveldb/util/hash.h	/^#define STORAGE_LEVELDB_UTIL_HASH_H_$/;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	src/leveldb/util/histogram.h	/^#define STORAGE_LEVELDB_UTIL_HISTOGRAM_H_$/;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	src/leveldb/util/logging.h	/^#define STORAGE_LEVELDB_UTIL_LOGGING_H_$/;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	src/leveldb/util/mutexlock.h	/^#define STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_$/;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	src/leveldb/util/posix_logger.h	/^#define STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_$/;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	src/leveldb/util/random.h	/^#define STORAGE_LEVELDB_UTIL_RANDOM_H_$/;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	src/leveldb/util/testharness.h	/^#define STORAGE_LEVELDB_UTIL_TESTHARNESS_H_$/;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	src/leveldb/util/testutil.h	/^#define STORAGE_LEVELDB_UTIL_TESTUTIL_H_$/;"	d
STR	src/rpc/util.h	/^        STR,$/;"	m	class:RPCArg::Type
STRINGIZE	src/clientversion.h	/^#define STRINGIZE(/;"	d
STRIP	Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	doc/man/Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	src/Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	src/secp256k1/Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	src/univalue/Makefile	/^STRIP = strip$/;"	m
STRIPPROG	Makefile	/^	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)\/release$/;"	m
STRIPPROG	Makefile	/^	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)\/release$/;"	m
STRIPPROG	Makefile	/^	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)\/release$/;"	m
STRIPPROG	Makefile	/^	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)\/release$/;"	m
STR_HEX	src/rpc/util.h	/^        STR_HEX,       \/\/!< Special type that is a STR with only hex chars$/;"	m	class:RPCArg::Type
STYLE_INVALID	src/qt/guiconstants.h	/^#define STYLE_INVALID /;"	d
ST_ERROR	src/qt/intro.cpp	/^        ST_ERROR$/;"	e	enum:FreespaceChecker::Status	file:
ST_OK	src/qt/intro.cpp	/^        ST_OK,$/;"	e	enum:FreespaceChecker::Status	file:
SUBCOMMANDS	contrib/devtools/copyright_header.py	/^SUBCOMMANDS = ['report', 'update', 'insert']$/;"	v
SUBDIRS	Makefile	/^SUBDIRS = src $(am__append_1)$/;"	m
SUBDIRS	src/Makefile	/^SUBDIRS =$/;"	m
SUBVERSION_COLUMN_WIDTH	src/qt/rpcconsole.h	/^        SUBVERSION_COLUMN_WIDTH = 150,$/;"	e	enum:RPCConsole::ColumnWidths
SUCCEEDED	src/netbase.cpp	/^    SUCCEEDED = 0x00,        \/\/!< Succeeded$/;"	e	enum:uint8_t	file:
SUCCESS	src/wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	e	enum:final::ScanResult::__anon118
SUCCESS_PCT	src/policy/fees.h	/^    static constexpr double SUCCESS_PCT = .85;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SUFFICIENT_FEETXS	src/policy/fees.h	/^    static constexpr double SUFFICIENT_FEETXS = 0.1;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SUFFICIENT_TXS_SHORT	src/policy/fees.h	/^    static constexpr double SUFFICIENT_TXS_SHORT = 0.5;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SUSPICIOUS_HOSTS	contrib/seeds/makeseeds.py	/^SUSPICIOUS_HOSTS = {$/;"	v
SYNC_LOCATOR_WRITE_INTERVAL	src/index/base.cpp	/^constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; \/\/ seconds$/;"	v
SYNC_LOG_INTERVAL	src/index/base.cpp	/^constexpr int64_t SYNC_LOG_INTERVAL = 30; \/\/ seconds$/;"	v
S_IRUSR	src/compat.h	/^#define S_IRUSR /;"	d
S_IWUSR	src/compat.h	/^#define S_IWUSR /;"	d
SafeChars	src/util/strencodings.h	/^enum SafeChars$/;"	g
SafeDbt	src/wallet/db.cpp	/^BerkeleyBatch::SafeDbt::SafeDbt()$/;"	f	class:BerkeleyBatch::SafeDbt
SafeDbt	src/wallet/db.cpp	/^BerkeleyBatch::SafeDbt::SafeDbt(void* data, size_t size)$/;"	f	class:BerkeleyBatch::SafeDbt
SaltedOutpointHasher	src/coins.cpp	/^SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}$/;"	f	class:SaltedOutpointHasher
SaltedOutpointHasher	src/coins.h	/^class SaltedOutpointHasher$/;"	c
SaltedTxidHasher	src/txmempool.cpp	/^SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}$/;"	f	class:SaltedTxidHasher
SaltedTxidHasher	src/txmempool.h	/^class SaltedTxidHasher$/;"	c
Salvage	src/wallet/db.cpp	/^bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)$/;"	f	class:BerkeleyEnvironment
SanitizeOptions	src/leveldb/db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SanitizeString	src/util/strencodings.cpp	/^std::string SanitizeString(const std::string& str, int rule)$/;"	f
Save	src/crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) Save(unsigned char* out, __m128i s)$/;"	f	namespace:__anon43
SaveBlockToDisk	src/validation.cpp	/^static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const FlatFilePos* dbp) {$/;"	f	file:
SaveBytes	src/crypto/ctaes/ctaes.c	/^static void SaveBytes(unsigned char* data16, const AES_state *s) {$/;"	f	file:
SaveError	src/leveldb/db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	src/leveldb/table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon17::TwoLevelIterator	file:
SaveKey	src/leveldb/db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon29::DBIter	file:
SaveTo	src/leveldb/db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	src/leveldb/db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	src/leveldb/db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon26	file:
SaverState	src/leveldb/db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon26	file:
ScanForWalletTransactions	src/wallet/wallet.cpp	/^CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)$/;"	f	class:CWallet
ScanResult	src/wallet/wallet.h	/^    struct ScanResult {$/;"	s	class:final
ScanTable	src/leveldb/db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon30::Repairer	file:
ScanningDuration	src/wallet/wallet.h	/^    int64_t ScanningDuration() const { return fScanningWallet ? GetTimeMillis() - m_scanning_start : 0; }$/;"	f	class:final
ScanningProgress	src/wallet/wallet.h	/^    double ScanningProgress() const { return fScanningWallet ? (double) m_scanning_progress : 0; }$/;"	f	class:final
ScantxoutsetTest	test/functional/rpc_scantxoutset.py	/^class ScantxoutsetTest(BitcoinTestFramework):$/;"	c
Schedule	src/leveldb/include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	src/leveldb/util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon8::PosixEnv
Schedule	src/leveldb/util/env_win.cc	/^void Win32Env::Schedule( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
ScheduleBatchPriority	src/util/system.cpp	/^int ScheduleBatchPriority()$/;"	f
ScheduleProc	src/leveldb/util/env_win.cc	/^typedef void (*ScheduleProc)(void*) ;$/;"	t	namespace:leveldb::Win32	file:
ScriptContext	src/wallet/rpcdump.cpp	/^enum class ScriptContext$/;"	c	file:
ScriptError	src/script/script_error.h	/^} ScriptError;$/;"	t	typeref:enum:ScriptError_t
ScriptError	src/test/script_tests.cpp	/^    TestBuilder& ScriptError(ScriptError_t err)$/;"	f	class:__anon58::TestBuilder
ScriptErrorDesc	src/test/script_tests.cpp	/^struct ScriptErrorDesc$/;"	s	file:
ScriptErrorString	src/script/script_error.cpp	/^const char* ScriptErrorString(const ScriptError serror)$/;"	f
ScriptError_t	src/script/script_error.h	/^typedef enum ScriptError_t$/;"	g
ScriptFromHex	src/test/script_tests.cpp	/^ScriptFromHex(const char* hex)$/;"	f	file:
ScriptHash	src/script/standard.cpp	/^ScriptHash::ScriptHash(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}$/;"	f	class:ScriptHash
ScriptHash	src/script/standard.h	/^    ScriptHash() : uint160() {}$/;"	f	struct:ScriptHash
ScriptHash	src/script/standard.h	/^    explicit ScriptHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:ScriptHash
ScriptHash	src/script/standard.h	/^struct ScriptHash : public uint160$/;"	s
ScriptPubKeyToUniv	src/core_write.cpp	/^void ScriptPubKeyToUniv(const CScript& scriptPubKey,$/;"	f
ScriptToAsmStr	src/core_write.cpp	/^std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)$/;"	f
ScriptToUniv	src/core_write.cpp	/^void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)$/;"	f
Secp256k1Context	src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^public class Secp256k1Context {$/;"	c
Secp256k1Init	src/bitcoin-tx.cpp	/^    Secp256k1Init() {$/;"	f	class:Secp256k1Init
Secp256k1Init	src/bitcoin-tx.cpp	/^class Secp256k1Init$/;"	c	file:
Section	src/rpc/util.cpp	/^    Section(const std::string& left, const std::string& right)$/;"	f	struct:Section
Section	src/rpc/util.cpp	/^struct Section {$/;"	s	file:
SectionInfo	src/util/system.h	/^struct SectionInfo$/;"	s
Sections	src/rpc/util.cpp	/^struct Sections {$/;"	s	file:
SecureClearQLineEdit	src/qt/askpassphrasedialog.cpp	/^static void SecureClearQLineEdit(QLineEdit* edit)$/;"	f	file:
SeedInsecureRand	src/test/setup_common.h	/^static inline void SeedInsecureRand(bool deterministic = false)$/;"	f
SeedSleep	src/random.cpp	/^static void SeedSleep(CSHA512& hasher, RNGState& rng)$/;"	f	file:
SeedSpec6	src/chainparams.h	/^struct SeedSpec6 {$/;"	s
Seek	src/crypto/chacha20.cpp	/^void ChaCha20::Seek(uint64_t pos)$/;"	f	class:ChaCha20
Seek	src/dbwrapper.h	/^    template<typename K> void Seek(const K& key) {$/;"	f	class:CDBIterator
Seek	src/leveldb/db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon29::DBIter
Seek	src/leveldb/db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	src/leveldb/db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	src/leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	src/leveldb/db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	src/leveldb/table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	src/leveldb/table/iterator.cc	/^  virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon12::EmptyIterator
Seek	src/leveldb/table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	src/leveldb/table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon11::MergingIterator
Seek	src/leveldb/table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
Seek	src/streams.h	/^    bool Seek(uint64_t nPos) {$/;"	f	class:CBufferedFile
SeekRandom	src/leveldb/db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekToFirst	src/dbwrapper.cpp	/^void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }$/;"	f	class:CDBIterator
SeekToFirst	src/leveldb/db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon29::DBIter
SeekToFirst	src/leveldb/db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	src/leveldb/db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	src/leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	src/leveldb/db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	src/leveldb/table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	src/leveldb/table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon12::EmptyIterator
SeekToFirst	src/leveldb/table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	src/leveldb/table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon11::MergingIterator
SeekToFirst	src/leveldb/table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SeekToLast	src/leveldb/db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon29::DBIter
SeekToLast	src/leveldb/db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	src/leveldb/db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	src/leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	src/leveldb/db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	src/leveldb/table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	src/leveldb/table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon12::EmptyIterator
SeekToLast	src/leveldb/table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	src/leveldb/table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon11::MergingIterator
SeekToLast	src/leveldb/table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SeekToRestartPoint	src/leveldb/table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
SeenLocal	src/net.cpp	/^bool SeenLocal(const CService& addr)$/;"	f
SegWitTest	test/functional/feature_segwit.py	/^class SegWitTest(BitcoinTestFramework):$/;"	c
SegWitTest	test/functional/p2p_segwit.py	/^class SegWitTest(BitcoinTestFramework):$/;"	c
SegwitHeight	src/consensus/params.h	/^    int SegwitHeight;$/;"	m	struct:Consensus::Params
SegwitVersion1SignatureHash	test/functional/test_framework/script.py	/^def SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, amount):$/;"	f
Select	src/addrman.h	/^    CAddrInfo Select(bool newOnly = false)$/;"	f	class:CAddrMan
Select	src/wallet/coincontrol.h	/^    void Select(const COutPoint& output)$/;"	f	class:CCoinControl
SelectBaseParams	src/chainparamsbase.cpp	/^void SelectBaseParams(const std::string& chain)$/;"	f
SelectCoins	src/wallet/wallet.cpp	/^bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const$/;"	f	class:CWallet
SelectCoinsBnB	src/wallet/coinselection.cpp	/^bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)$/;"	f
SelectCoinsMinConf	src/wallet/wallet.cpp	/^bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,$/;"	f	class:CWallet
SelectConfigNetwork	src/util/system.cpp	/^void ArgsManager::SelectConfigNetwork(const std::string& network)$/;"	f	class:ArgsManager
SelectParams	src/chainparams.cpp	/^void SelectParams(const std::string& network)$/;"	f
SelectTriedCollision	src/addrman.h	/^    CAddrInfo SelectTriedCollision()$/;"	f	class:CAddrMan
SelectTriedCollision_	src/addrman.cpp	/^CAddrInfo CAddrMan::SelectTriedCollision_()$/;"	f	class:CAddrMan
Select_	src/addrman.cpp	/^CAddrInfo CAddrMan::Select_(bool newOnly)$/;"	f	class:CAddrMan
SelfTest	src/crypto/sha256.cpp	/^bool SelfTest() {$/;"	f	namespace:__anon40
SelfTest	src/test/coins_tests.cpp	/^    void SelfTest() const$/;"	f	class:__anon60::CCoinsViewCacheTest
Send	src/qt/addresstablemodel.cpp	/^const QString AddressTableModel::Send = "S";$/;"	m	class:AddressTableModel	file:
Send	src/qt/addresstablemodel.h	/^    static const QString Send;      \/**< Specifies send address *\/$/;"	m	class:AddressTableModel
SendBlockTransactions	src/net_processing.cpp	/^inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman* connman) {$/;"	f	file:
SendCoins	src/qt/test/wallettests.cpp	/^uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CTxDestination& address, CAmount amount, bool rbf)$/;"	f	namespace:__anon63
SendCoinsDialog	src/qt/sendcoinsdialog.cpp	/^SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SendCoinsDialog
SendCoinsDialog	src/qt/sendcoinsdialog.h	/^class SendCoinsDialog : public QDialog$/;"	c
SendCoinsEntry	src/qt/sendcoinsentry.cpp	/^SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SendCoinsEntry
SendCoinsEntry	src/qt/sendcoinsentry.h	/^class SendCoinsEntry : public QStackedWidget$/;"	c
SendCoinsRecipient	src/qt/walletmodel.h	/^    explicit SendCoinsRecipient() : amount(0), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }$/;"	f	class:SendCoinsRecipient
SendCoinsRecipient	src/qt/walletmodel.h	/^    explicit SendCoinsRecipient(const QString &addr, const QString &_label, const CAmount& _amount, const QString &_message):$/;"	f	class:SendCoinsRecipient
SendCoinsRecipient	src/qt/walletmodel.h	/^class SendCoinsRecipient$/;"	c
SendCoinsReturn	src/qt/walletmodel.h	/^        SendCoinsReturn(StatusCode _status = OK, QString _reasonCommitFailed = "")$/;"	f	struct:WalletModel::SendCoinsReturn
SendCoinsReturn	src/qt/walletmodel.h	/^    struct SendCoinsReturn$/;"	s	class:WalletModel
SendConfirmationDialog	src/qt/sendcoinsdialog.cpp	/^SendConfirmationDialog::SendConfirmationDialog(const QString &title, const QString &text, int _secDelay,$/;"	f	class:SendConfirmationDialog
SendConfirmationDialog	src/qt/sendcoinsdialog.h	/^class SendConfirmationDialog : public QMessageBox$/;"	c
SendHeadersTest	test/functional/p2p_sendheaders.py	/^class SendHeadersTest(BitcoinTestFramework):$/;"	c
SendMessage	src/zmq/zmqpublishnotifier.cpp	/^bool CZMQAbstractPublishNotifier::SendMessage(const char *command, const void* data, size_t size)$/;"	f	class:CZMQAbstractPublishNotifier
SendMessages	src/net_processing.cpp	/^bool PeerLogicValidation::SendMessages(CNode* pto)$/;"	f	class:PeerLogicValidation
SendMoney	src/wallet/rpcwallet.cpp	/^static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)$/;"	f	file:
SendToAddress	src/qt/transactionrecord.h	/^        SendToAddress,$/;"	e	enum:TransactionRecord::Type
SendToOther	src/qt/transactionrecord.h	/^        SendToOther,$/;"	e	enum:TransactionRecord::Type
SendToSelf	src/qt/transactionrecord.h	/^        SendToSelf$/;"	e	enum:TransactionRecord::Type
Sending	src/qt/addresstablemodel.cpp	/^        Sending,$/;"	e	enum:AddressTableEntry::Type	file:
SendingTab	src/qt/addressbookpage.h	/^        SendingTab = 0,$/;"	e	enum:AddressBookPage::Tabs
Sent	src/qt/peertablemodel.h	/^        Sent = 3,$/;"	e	enum:PeerTableModel::ColumnIndex
SeparatorStyle	src/qt/bitcoinunits.h	/^    enum SeparatorStyle$/;"	g	class:BitcoinUnits
Sequence	src/leveldb/db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceLocks	src/consensus/tx_verify.cpp	/^bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
SequenceNumber	src/leveldb/db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	src/leveldb/include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	src/leveldb/include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
SequentialFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon35	file:
SerReadWriteMany	src/serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionSerialize ser_action, const Args&... args)$/;"	f
SerReadWriteMany	src/serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&&... args)$/;"	f
SerializationOp	src/addrdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBanEntry
SerializationOp	src/addrman.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CAddrInfo
SerializationOp	src/bench/prevector.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {READWRITE(x);}$/;"	f	struct:nontrivial_t
SerializationOp	src/blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactions
SerializationOp	src/blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactionsRequest
SerializationOp	src/blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeaderAndShortTxIDs
SerializationOp	src/blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:PrefilledTransaction
SerializationOp	src/blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:TransactionCompressor
SerializationOp	src/bloom.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBloomFilter
SerializationOp	src/chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockFileInfo
SerializationOp	src/chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CDiskBlockIndex
SerializationOp	src/compressor.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxOutCompressor
SerializationOp	src/flatfile.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:FlatFilePos
SerializationOp	src/index/blockfilterindex.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:__anon120::DBHashKey
SerializationOp	src/index/blockfilterindex.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:__anon120::DBVal
SerializationOp	src/index/txindex.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CDiskTxPos
SerializationOp	src/merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMerkleBlock
SerializationOp	src/merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CPartialMerkleTree
SerializationOp	src/netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CNetAddr
SerializationOp	src/netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CService
SerializationOp	src/netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSubNet
SerializationOp	src/policy/feerate.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CFeeRate
SerializationOp	src/primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlock
SerializationOp	src/primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeader
SerializationOp	src/primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CBlockLocator
SerializationOp	src/primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:COutPoint
SerializationOp	src/primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxIn
SerializationOp	src/primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxOut
SerializationOp	src/protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CAddress
SerializationOp	src/protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CInv
SerializationOp	src/protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CMessageHeader
SerializationOp	src/qt/recentrequeststablemodel.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:RecentRequestEntry
SerializationOp	src/qt/walletmodel.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:SendCoinsRecipient
SerializationOp	src/rest.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	struct:CCoin
SerializationOp	src/script/script.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CScript
SerializationOp	src/script/sign.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	struct:KeyOriginInfo
SerializationOp	src/test/blockencodings_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:TestHeaderAndShortIDs
SerializationOp	src/test/dbwrapper_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:StringContentsSerializer
SerializationOp	src/test/serialize_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSerializeMethodsTestMany
SerializationOp	src/test/serialize_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSerializeMethodsTestSingle
SerializationOp	src/undo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockUndo
SerializationOp	src/wallet/crypter.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMasterKey
SerializationOp	src/wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CKeyPool
SerializationOp	src/wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMerkleTx
SerializationOp	src/wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CWalletKey
SerializationOp	src/wallet/walletdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CKeyMetadata
SerializationOp	src/wallet/walletdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CHDChain
Serialize	src/addrman.h	/^    void Serialize(Stream &s) const$/;"	f	class:CAddrMan
Serialize	src/blockfilter.h	/^    void Serialize(Stream& s) const {$/;"	f	class:BlockFilter
Serialize	src/coins.h	/^    void Serialize(Stream &s) const {$/;"	f	class:Coin
Serialize	src/compressor.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CScriptCompressor
Serialize	src/index/blockfilterindex.cpp	/^    void Serialize(Stream& s) const$/;"	f	struct:__anon120::DBHeightKey
Serialize	src/key.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtKey
Serialize	src/primitives/transaction.h	/^    inline void Serialize(Stream& s) const {$/;"	f	class:CTransaction
Serialize	src/primitives/transaction.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:CMutableTransaction
Serialize	src/psbt.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:PSBTInput
Serialize	src/psbt.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:PSBTOutput
Serialize	src/psbt.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:PartiallySignedTransaction
Serialize	src/pubkey.h	/^    void Serialize(CSizeComputer& s) const$/;"	f	struct:CExtPubKey
Serialize	src/pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	class:CPubKey
Serialize	src/pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtPubKey
Serialize	src/script/interpreter.cpp	/^    void Serialize(S &s) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
Serialize	src/serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CCompactSize
Serialize	src/serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CVarInt
Serialize	src/serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:BigEndian
Serialize	src/serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:LimitedString
Serialize	src/serialize.h	/^Serialize(Stream& os, const std::shared_ptr<const T>& p)$/;"	f
Serialize	src/serialize.h	/^Serialize(Stream& os, const std::unique_ptr<const T>& p)$/;"	f
Serialize	src/serialize.h	/^inline void Serialize(Stream& os, const T& a)$/;"	f
Serialize	src/serialize.h	/^inline void Serialize(Stream& os, const prevector<N, T>& v)$/;"	f
Serialize	src/serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v)$/;"	f
Serialize	src/serialize.h	/^template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } \/\/ TODO Get rid of bare char$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int16_t a ) { ser_writedata16(s, a); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_writedata32(s, a); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint16_t a) { ser_writedata16(s, a); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }$/;"	f
Serialize	src/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }$/;"	f
Serialize	src/serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str)$/;"	f
Serialize	src/serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m)$/;"	f
Serialize	src/serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item)$/;"	f
Serialize	src/serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m)$/;"	f
Serialize	src/streams.h	/^    void Serialize(Stream& s) const$/;"	f	class:CDataStream
Serialize	src/test/script_p2sh_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	src/test/sigopcount_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	src/txdb.cpp	/^    void Serialize(Stream &s) const {$/;"	f	struct:__anon121::CoinEntry
Serialize	src/uint256.h	/^    void Serialize(Stream& s) const$/;"	f	class:base_blob
Serialize	src/undo.h	/^    void Serialize(Stream &s) const {$/;"	f	class:TxInUndoSerializer
Serialize	src/undo.h	/^    void Serialize(Stream& s) const {$/;"	f	class:CTxUndo
Serialize	src/wallet/wallet.h	/^    void Serialize(Stream& s) const$/;"	f	class:CWalletTx
SerializeDB	src/addrdb.cpp	/^bool SerializeDB(Stream& stream, const Data& data)$/;"	f	namespace:__anon115
SerializeFileDB	src/addrdb.cpp	/^bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data)$/;"	f	namespace:__anon115
SerializeHDKeypaths	src/script/sign.h	/^void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, uint8_t type)$/;"	f
SerializeHash	src/hash.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)$/;"	f
SerializeInput	src/script/interpreter.cpp	/^    void SerializeInput(S &s, unsigned int nInput) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
SerializeMany	src/serialize.h	/^void SerializeMany(Stream& s)$/;"	f
SerializeMany	src/serialize.h	/^void SerializeMany(Stream& s, const Arg& arg, const Args&... args)$/;"	f
SerializeOutput	src/script/interpreter.cpp	/^    void SerializeOutput(S &s, unsigned int nOutput) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
SerializeScriptCode	src/script/interpreter.cpp	/^    void SerializeScriptCode(S &s) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
SerializeToString	src/qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::SerializeToString(std::string* output) const$/;"	f	class:PaymentRequestPlus
SerializeToVector	src/script/sign.h	/^void SerializeToVector(Stream& s, const X&... args)$/;"	f
SerializeTransaction	src/primitives/transaction.h	/^inline void SerializeTransaction(const TxType& tx, Stream& s) {$/;"	f
Serialize_impl	src/serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)$/;"	f
Serialize_impl	src/serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)$/;"	f
Serialize_impl	src/serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)$/;"	f
Serialize_impl	src/serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&)$/;"	f
Set	src/key.h	/^    void Set(const T pbegin, const T pend, bool fCompressedIn)$/;"	f	class:CKey
Set	src/leveldb/db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	src/leveldb/table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
Set	src/pubkey.h	/^    void Set(const T pbegin, const T pend)$/;"	f	class:CPubKey
Set	src/script/ismine.h	/^    void Set(isminefilter filter, CAmount value)$/;"	f	struct:CachableAmount
Set	src/script/sigcache.cpp	/^    void Set(uint256& entry)$/;"	f	class:__anon84::CSignatureCache
SetAddrLocal	src/net.cpp	/^void CNode::SetAddrLocal(const CService& addrLocalIn) {$/;"	f	class:CNode
SetAddress	src/zmq/zmqabstractnotifier.h	/^    void SetAddress(const std::string &a) { address = a; }$/;"	f	class:CZMQAbstractNotifier
SetAddressBook	src/wallet/wallet.cpp	/^bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& strPurpose)$/;"	f	class:CWallet
SetAllowEmpty	src/qt/bitcoinamountfield.cpp	/^    void SetAllowEmpty(bool allow)$/;"	f	class:AmountSpinBox
SetAllowEmpty	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::SetAllowEmpty(bool allow)$/;"	f	class:BitcoinAmountField
SetAllowed	src/leveldb/util/env_posix.cc	/^  void SetAllowed(intptr_t v) {$/;"	f	class:leveldb::__anon8::Limiter	file:
SetBackend	src/coins.cpp	/^void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }$/;"	f	class:CCoinsViewBacked
SetBanned	src/banman.cpp	/^void BanMan::SetBanned(const banmap_t& banmap)$/;"	f	class:BanMan
SetBannedSetDirty	src/banman.cpp	/^void BanMan::SetBannedSetDirty(bool dirty)$/;"	f	class:BanMan
SetBestBlock	src/coins.cpp	/^void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
SetBestHeight	src/net.cpp	/^void CConnman::SetBestHeight(int height)$/;"	f	class:CConnman
SetBool	src/leveldb/util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetBroadcastTransactions	src/wallet/wallet.h	/^    void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }$/;"	f	class:final
SetByte	src/leveldb/db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	src/leveldb/util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon4::LRUCache
SetCoinsValue	src/test/coins_tests.cpp	/^static void SetCoinsValue(CAmount value, Coin& coin)$/;"	f	file:
SetCompact	src/arith_uint256.cpp	/^arith_uint256& arith_uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)$/;"	f	class:arith_uint256
SetCompactPointer	src/leveldb/db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	src/leveldb/db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	src/leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	src/leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCrypted	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::SetCrypted()$/;"	f	class:CCryptoKeyStore
SetCurrentFile	src/leveldb/db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataDir	src/test/setup_common.cpp	/^fs::path BasicTestingSetup::SetDataDir(const std::string& name)$/;"	f	class:BasicTestingSetup
SetDataIterator	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SetFileLimits	src/leveldb/util/env_posix_test.cc	/^  static void SetFileLimits(int read_only_file_limit, int mmap_limit) {$/;"	f	class:leveldb::EnvPosixTest
SetFilesystemActive	src/leveldb/db/fault_injection_test.cc	/^  void SetFilesystemActive(bool active) { filesystem_active_ = active; }$/;"	f	class:leveldb::FaultInjectionTestEnv
SetFrom	src/leveldb/db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetHDChain	src/wallet/wallet.cpp	/^void CWallet::SetHDChain(const CHDChain& chain, bool memonly)$/;"	f	class:CWallet
SetHDSeed	src/wallet/wallet.cpp	/^void CWallet::SetHDSeed(const CPubKey& seed)$/;"	f	class:CWallet
SetHasKeys	src/rpc/blockchain.cpp	/^static inline bool SetHasKeys(const std::set<T>& set) {return false;}$/;"	f	file:
SetHasKeys	src/rpc/blockchain.cpp	/^static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)$/;"	f	file:
SetHex	src/arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	src/arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const std::string& str)$/;"	f	class:base_uint
SetHex	src/uint256.cpp	/^void base_blob<BITS>::SetHex(const char* psz)$/;"	f	class:base_blob
SetHex	src/uint256.cpp	/^void base_blob<BITS>::SetHex(const std::string& str)$/;"	f	class:base_blob
SetIP	src/netaddress.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetIV	src/crypto/chacha20.cpp	/^void ChaCha20::SetIV(uint64_t iv)$/;"	f	class:ChaCha20
SetInternal	src/netaddress.cpp	/^bool CNetAddr::SetInternal(const std::string &name)$/;"	f	class:CNetAddr
SetInternalName	src/util/threadnames.cpp	/^static void SetInternalName(std::string name) { g_thread_name = std::move(name); }$/;"	f	file:
SetInternalName	src/util/threadnames.cpp	/^static void SetInternalName(std::string name) { }$/;"	f	file:
SetIsLoaded	src/txmempool.cpp	/^void CTxMemPool::SetIsLoaded(bool loaded)$/;"	f	class:CTxMemPool
SetKey	src/crypto/chacha20.cpp	/^void ChaCha20::SetKey(const unsigned char* k, size_t keylen)$/;"	f	class:ChaCha20
SetKey	src/wallet/crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	src/wallet/crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLastSequence	src/leveldb/db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	src/leveldb/db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLimit	src/streams.h	/^    bool SetLimit(uint64_t nPos = std::numeric_limits<uint64_t>::max()) {$/;"	f	class:CBufferedFile
SetLogNumber	src/leveldb/db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetMaxOpenFiles	src/dbwrapper.cpp	/^static void SetMaxOpenFiles(leveldb::Options *options) {$/;"	f	file:
SetMaxOutboundTarget	src/net.cpp	/^void CConnman::SetMaxOutboundTarget(uint64_t limit)$/;"	f	class:CConnman
SetMaxOutboundTimeframe	src/net.cpp	/^void CConnman::SetMaxOutboundTimeframe(uint64_t timeframe)$/;"	f	class:CConnman
SetMaxValue	src/qt/bitcoinamountfield.cpp	/^    void SetMaxValue(const CAmount& value)$/;"	f	class:AmountSpinBox
SetMaxValue	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::SetMaxValue(const CAmount& value)$/;"	f	class:BitcoinAmountField
SetMaxVersion	src/wallet/wallet.cpp	/^bool CWallet::SetMaxVersion(int nVersion)$/;"	f	class:CWallet
SetMerkleBranch	src/wallet/wallet.cpp	/^void CMerkleTx::SetMerkleBranch(const uint256& block_hash, int posInBlock)$/;"	f	class:CMerkleTx
SetMinValue	src/qt/bitcoinamountfield.cpp	/^    void SetMinValue(const CAmount& value)$/;"	f	class:AmountSpinBox
SetMinValue	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::SetMinValue(const CAmount& value)$/;"	f	class:BitcoinAmountField
SetMinVersion	src/wallet/wallet.cpp	/^void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in, bool fExplicit)$/;"	f	class:CWallet
SetMiscWarning	src/warnings.cpp	/^void SetMiscWarning(const std::string& strWarning)$/;"	f
SetMockTime	src/util/time.cpp	/^void SetMockTime(int64_t nMockTimeIn)$/;"	f
SetNameProxy	src/netbase.cpp	/^bool SetNameProxy(const proxyType &addrProxy) {$/;"	f
SetNetworkActive	src/net.cpp	/^void CConnman::SetNetworkActive(bool active)$/;"	f	class:CConnman
SetNetworkOnlyArg	src/test/util_tests.cpp	/^    void SetNetworkOnlyArg(const std::string arg)$/;"	f	struct:TestArgsManager
SetNext	src/leveldb/db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	src/leveldb/db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNull	src/addrdb.h	/^    void SetNull()$/;"	f	class:CBanEntry
SetNull	src/chain.h	/^     void SetNull() {$/;"	f	class:CBlockFileInfo
SetNull	src/chain.h	/^    void SetNull()$/;"	f	class:CBlockIndex
SetNull	src/flatfile.h	/^    void SetNull() { nFile = -1; nPos = 0; }$/;"	f	struct:FlatFilePos
SetNull	src/index/txindex.cpp	/^    void SetNull() {$/;"	f	struct:CDiskTxPos
SetNull	src/primitives/block.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	src/primitives/block.h	/^    void SetNull()$/;"	f	class:CBlockHeader
SetNull	src/primitives/block.h	/^    void SetNull()$/;"	f	struct:CBlockLocator
SetNull	src/primitives/transaction.h	/^    void SetNull() { hash.SetNull(); n = NULL_INDEX; }$/;"	f	class:COutPoint
SetNull	src/primitives/transaction.h	/^    void SetNull()$/;"	f	class:CTxOut
SetNull	src/script/script.h	/^    void SetNull() { stack.clear(); stack.shrink_to_fit(); }$/;"	f	struct:CScriptWitness
SetNull	src/uint256.h	/^    void SetNull()$/;"	f	class:base_blob
SetNull	src/wallet/coincontrol.cpp	/^void CCoinControl::SetNull()$/;"	f	class:CCoinControl
SetNull	src/wallet/walletdb.h	/^    void SetNull()$/;"	f	class:CHDChain
SetNull	src/wallet/walletdb.h	/^    void SetNull()$/;"	f	class:CKeyMetadata
SetOutboundMessageHighWaterMark	src/zmq/zmqabstractnotifier.h	/^    void SetOutboundMessageHighWaterMark(const int sndhwm) {$/;"	f	class:CZMQAbstractNotifier
SetPos	src/streams.h	/^    bool SetPos(uint64_t nPos) {$/;"	f	class:CBufferedFile
SetPrevLogNumber	src/leveldb/db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetProxy	src/netbase.cpp	/^bool SetProxy(enum Network net, const proxyType &addrProxy) {$/;"	f
SetProxySetting	src/qt/optionsmodel.cpp	/^static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)$/;"	f	file:
SetRPCWarmupFinished	src/rpc/server.cpp	/^void SetRPCWarmupFinished()$/;"	f
SetRPCWarmupStatus	src/rpc/server.cpp	/^void SetRPCWarmupStatus(const std::string& newStatus)$/;"	f
SetRaw	src/netaddress.cpp	/^void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)$/;"	f	class:CNetAddr
SetReachable	src/net.cpp	/^void SetReachable(enum Network net, bool reachable)$/;"	f
SetReadOnlyFDLimit	src/leveldb/util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyFDLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetReadOnlyMMapLimit	src/leveldb/util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyMMapLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetRecvVersion	src/net.h	/^    void SetRecvVersion(int nVersionIn)$/;"	f	class:CNode
SetSeed	src/key.cpp	/^void CExtKey::SetSeed(const unsigned char *seed, unsigned int nSeedLen) {$/;"	f	class:CExtKey
SetSendVersion	src/net.cpp	/^void CNode::SetSendVersion(int nVersionIn)$/;"	f	class:CNode
SetSequence	src/leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetServiceFlagsIBDCache	src/protocol.cpp	/^void SetServiceFlagsIBDCache(bool state) {$/;"	f
SetServices	src/addrman.h	/^    void SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetServices	src/net.cpp	/^void CConnman::SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CConnman
SetServices_	src/addrman.cpp	/^void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetSockAddr	src/netaddress.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSocketNoDelay	src/netbase.cpp	/^bool SetSocketNoDelay(const SOCKET& hSocket)$/;"	f
SetSocketNonBlocking	src/netbase.cpp	/^bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)$/;"	f
SetSpecial	src/netaddress.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetStartOnSystemStartup	src/qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart) { return false; }$/;"	f	namespace:GUIUtil
SetStartOnSystemStartup	src/qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart)$/;"	f	namespace:GUIUtil
SetThreadName	src/util/threadnames.cpp	/^static void SetThreadName(const char* name)$/;"	f	file:
SetTip	src/chain.cpp	/^void CChain::SetTip(CBlockIndex *pindex) {$/;"	f	class:CChain
SetTryNewOutboundPeer	src/net.cpp	/^void CConnman::SetTryNewOutboundPeer(bool flag)$/;"	f	class:CConnman
SetTx	src/wallet/wallet.h	/^    void SetTx(CTransactionRef arg)$/;"	f	class:CMerkleTx
SetType	src/streams.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetType	src/zmq/zmqabstractnotifier.h	/^    void SetType(const std::string &t) { type = t; }$/;"	f	class:CZMQAbstractNotifier
SetVersion	src/net.h	/^    void SetVersion(int nVersionIn)$/;"	f	class:CNetMessage
SetVersion	src/streams.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
SetWalletDir	src/wallet/test/init_test_fixture.cpp	/^void InitWalletDirTestingSetup::SetWalletDir(const fs::path& walletdir_path)$/;"	f	class:InitWalletDirTestingSetup
SetWalletFlag	src/wallet/wallet.cpp	/^void CWallet::SetWalletFlag(uint64_t flags)$/;"	f	class:CWallet
SetWalletFlags	src/wallet/wallet.cpp	/^bool CWallet::SetWalletFlags(uint64_t overwriteFlags, bool memonly)$/;"	f	class:CWallet
SetfLargeWorkForkFound	src/warnings.cpp	/^void SetfLargeWorkForkFound(bool flag)$/;"	f
SetfLargeWorkInvalidChainFound	src/warnings.cpp	/^void SetfLargeWorkInvalidChainFound(bool flag)$/;"	f
SetupArgs	src/test/getarg_tests.cpp	/^static void SetupArgs(const std::vector<std::string>& args)$/;"	f	file:
SetupArgs	src/test/util_tests.cpp	/^    void SetupArgs(int argv, const char* args[])$/;"	f	struct:TestArgsManager
SetupBenchArgs	src/bench/bench_bitcoin.cpp	/^static void SetupBenchArgs()$/;"	f	file:
SetupBitcoinTxArgs	src/bitcoin-tx.cpp	/^static void SetupBitcoinTxArgs()$/;"	f	file:
SetupChainParamsBaseOptions	src/chainparamsbase.cpp	/^void SetupChainParamsBaseOptions()$/;"	f
SetupCliArgs	src/bitcoin-cli.cpp	/^static void SetupCliArgs()$/;"	f	file:
SetupDummyInputs	src/bench/ccoins_caching.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)$/;"	f	file:
SetupDummyInputs	src/test/transaction_tests.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)$/;"	f	file:
SetupEnvironment	src/util/system.cpp	/^void SetupEnvironment()$/;"	f
SetupHelpOptions	src/util/system.cpp	/^void SetupHelpOptions(ArgsManager& args)$/;"	f
SetupNetworking	src/util/system.cpp	/^bool SetupNetworking()$/;"	f
SetupOtherInputs	src/leveldb/db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
SetupServerArgs	src/init.cpp	/^void SetupServerArgs()$/;"	f
SetupUIArgs	src/qt/bitcoin.cpp	/^static void SetupUIArgs()$/;"	f	file:
SetupWalletToolArgs	src/bitcoin-wallet.cpp	/^static void SetupWalletToolArgs()$/;"	f	file:
ShL	src/crypto/sha256_avx2.cpp	/^__m256i inline ShL(__m256i x, int n) { return _mm256_slli_epi32(x, n); }$/;"	f	namespace:sha256d64_avx2::__anon37
ShL	src/crypto/sha256_sse41.cpp	/^__m128i inline ShL(__m128i x, int n) { return _mm_slli_epi32(x, n); }$/;"	f	namespace:sha256d64_sse41::__anon41
ShR	src/crypto/sha256_avx2.cpp	/^__m256i inline ShR(__m256i x, int n) { return _mm256_srli_epi32(x, n); }$/;"	f	namespace:sha256d64_avx2::__anon37
ShR	src/crypto/sha256_sse41.cpp	/^__m128i inline ShR(__m128i x, int n) { return _mm_srli_epi32(x, n); }$/;"	f	namespace:sha256d64_sse41::__anon41
Shard	src/leveldb/util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache	file:
ShardedLRUCache	src/leveldb/util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon4::ShardedLRUCache
ShardedLRUCache	src/leveldb/util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon4	file:
SharedState	src/leveldb/db/db_bench.cc	/^  SharedState() : cv(&mu) { }$/;"	f	struct:leveldb::__anon19::SharedState
SharedState	src/leveldb/db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon19	file:
ShiftMessageA	src/crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) ShiftMessageA(__m128i& m0, __m128i m1)$/;"	f	namespace:__anon43
ShiftMessageB	src/crypto/sha256_shani.cpp	/^void inline __attribute__((always_inline)) ShiftMessageB(__m128i& m0, __m128i m1, __m128i& m2)$/;"	f	namespace:__anon43
ShiftMessageC	src/crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) ShiftMessageC(__m128i& m0, __m128i m1, __m128i& m2)$/;"	f	namespace:__anon43
ShiftRows	src/crypto/ctaes/ctaes.c	/^static void ShiftRows(AES_state* s) {$/;"	f	file:
ShortSuccessor	src/leveldb/db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	src/leveldb/db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	src/leveldb/db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
ShowProgress	src/qt/clientmodel.cpp	/^static void ShowProgress(ClientModel *clientmodel, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	src/qt/splashscreen.cpp	/^static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress, bool resume_possible)$/;"	f	file:
ShowProgress	src/qt/transactiontablemodel.cpp	/^static void ShowProgress(TransactionTableModel *ttm, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	src/qt/walletmodel.cpp	/^static void ShowProgress(WalletModel *walletmodel, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::ShowProgressSig> ShowProgress;$/;"	m	struct:UISignals	file:
ShowProgress	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(ShowProgress);$/;"	v
ShowProgress	src/ui_interface.cpp	/^void CClientUIInterface::ShowProgress(const std::string& title, int nProgress, bool resume_possible) { return g_ui_signals.ShowProgress(title, nProgress, resume_possible); }$/;"	f	class:CClientUIInterface
ShowProgress	src/wallet/wallet.h	/^    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;$/;"	m	class:final
ShrinkDebugFile	src/logging.cpp	/^void BCLog::Logger::ShrinkDebugFile()$/;"	f	class:BCLog::Logger
ShrinkSize	src/leveldb/db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Shuffle	src/crypto/sha256_shani.cpp	/^void inline __attribute__((always_inline)) Shuffle(__m128i& s0, __m128i& s1)$/;"	f	namespace:__anon43
Shuffle	src/random.h	/^void Shuffle(I first, I last, R&& rng)$/;"	f
Shutdown	src/init.cpp	/^void Shutdown(InitInterfaces& interfaces)$/;"	f
Shutdown	src/zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::Shutdown()$/;"	f	class:CZMQNotificationInterface
Shutdown	src/zmq/zmqpublishnotifier.cpp	/^void CZMQAbstractPublishNotifier::Shutdown()$/;"	f	class:CZMQAbstractPublishNotifier
ShutdownRequested	src/shutdown.cpp	/^bool ShutdownRequested()$/;"	f
ShutdownTest	test/functional/feature_shutdown.py	/^class ShutdownTest(BitcoinTestFramework):$/;"	c
ShutdownWindow	src/qt/utilitydialog.cpp	/^ShutdownWindow::ShutdownWindow(QWidget *parent, Qt::WindowFlags f):$/;"	f	class:ShutdownWindow
ShutdownWindow	src/qt/utilitydialog.h	/^class ShutdownWindow : public QWidget$/;"	c
SigHasLowR	src/key.cpp	/^bool SigHasLowR(const secp256k1_ecdsa_signature* sig)$/;"	f
SigOpsCost	src/test/setup_common.h	/^    TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
SigPair	src/script/sign.h	/^typedef std::pair<CPubKey, std::vector<unsigned char>> SigPair;$/;"	t
SigVersion	src/script/interpreter.h	/^enum class SigVersion$/;"	c
SighashToStr	src/core_write.cpp	/^std::string SighashToStr(unsigned char sighash_type)$/;"	f
Sigma0	src/crypto/sha256.cpp	/^uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }$/;"	f	namespace:__anon40::sha256
Sigma0	src/crypto/sha256_avx2.cpp	/^__m256i inline Sigma0(__m256i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Sigma0	src/crypto/sha256_sse41.cpp	/^__m128i inline Sigma0(__m128i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Sigma0	src/crypto/sha512.cpp	/^uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }$/;"	f	namespace:__anon39::sha512
Sigma0	src/secp256k1/src/hash_impl.h	/^#define Sigma0(/;"	d
Sigma0	src/secp256k1/src/hash_impl.h	/^#undef Sigma0$/;"	d
Sigma1	src/crypto/sha256.cpp	/^uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }$/;"	f	namespace:__anon40::sha256
Sigma1	src/crypto/sha256_avx2.cpp	/^__m256i inline Sigma1(__m256i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Sigma1	src/crypto/sha256_sse41.cpp	/^__m128i inline Sigma1(__m128i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Sigma1	src/crypto/sha512.cpp	/^uint64_t inline Sigma1(uint64_t x) { return (x >> 14 | x << 50) ^ (x >> 18 | x << 46) ^ (x >> 41 | x << 23); }$/;"	f	namespace:__anon39::sha512
Sigma1	src/secp256k1/src/hash_impl.h	/^#define Sigma1(/;"	d
Sigma1	src/secp256k1/src/hash_impl.h	/^#undef Sigma1$/;"	d
Sign	src/key.cpp	/^bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool grind, uint32_t test_case) const {$/;"	f	class:CKey
SignCompact	src/key.cpp	/^bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {$/;"	f	class:CKey
SignMessagesTest	test/functional/rpc_signmessage.py	/^class SignMessagesTest(BitcoinTestFramework):$/;"	c
SignPSBTInput	src/psbt.cpp	/^bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)$/;"	f
SignRawTransactionsTest	test/functional/rpc_signrawtransaction.py	/^class SignRawTransactionsTest(BitcoinTestFramework):$/;"	c
SignSignature	src/script/sign.cpp	/^bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)$/;"	f
SignSignature	src/script/sign.cpp	/^bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignStep	src/script/sign.cpp	/^static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey,$/;"	f	file:
SignTransaction	src/rpc/rawtransaction_util.cpp	/^UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)$/;"	f
SignTransaction	src/wallet/feebumper.cpp	/^bool SignTransaction(CWallet* wallet, CMutableTransaction& mtx) {$/;"	f	namespace:feebumper
SignTransaction	src/wallet/wallet.cpp	/^bool CWallet::SignTransaction(CMutableTransaction& tx)$/;"	f	class:CWallet
SignVerifyMessageDialog	src/qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SignVerifyMessageDialog
SignVerifyMessageDialog	src/qt/signverifymessagedialog.h	/^class SignVerifyMessageDialog : public QDialog$/;"	c
Signal	src/leveldb/port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
Signal	src/leveldb/port/port_win.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	src/leveldb/port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalAll	src/leveldb/port/port_win.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalsOptInRBF	src/util/rbf.cpp	/^bool SignalsOptInRBF(const CTransaction &tx)$/;"	f
SignatureCacheHasher	src/script/sigcache.h	/^class SignatureCacheHasher$/;"	c
SignatureData	src/script/sign.h	/^    SignatureData() {}$/;"	f	struct:SignatureData
SignatureData	src/script/sign.h	/^    explicit SignatureData(const CScript& script) : scriptSig(script) {}$/;"	f	struct:SignatureData
SignatureData	src/script/sign.h	/^struct SignatureData {$/;"	s
SignatureExtractorChecker	src/script/sign.cpp	/^    SignatureExtractorChecker(SignatureData& sigdata, BaseSignatureChecker& checker) : sigdata(sigdata), checker(checker) {}$/;"	f	class:final
SignatureHash	src/script/interpreter.cpp	/^uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)$/;"	f
SignatureHash	test/functional/test_framework/script.py	/^def SignatureHash(script, txTo, inIdx, hashtype):$/;"	f
SignatureHashOld	src/test/sighash_tests.cpp	/^uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f	file:
SigningProvider	src/script/sign.h	/^class SigningProvider$/;"	c
SimConnFail	src/test/addrman_tests.cpp	/^    void SimConnFail(CService& addr)$/;"	f	class:CAddrManTest
SingleColor	src/qt/platformstyle.h	/^    QColor SingleColor() const { return singleColor; }$/;"	f	class:PlatformStyle
SingleColorIcon	src/qt/platformstyle.cpp	/^QIcon PlatformStyle::SingleColorIcon(const QIcon& icon) const$/;"	f	class:PlatformStyle
SingleColorIcon	src/qt/platformstyle.cpp	/^QIcon PlatformStyle::SingleColorIcon(const QString& filename) const$/;"	f	class:PlatformStyle
SingleColorImage	src/qt/platformstyle.cpp	/^QImage PlatformStyle::SingleColorImage(const QString& filename) const$/;"	f	class:PlatformStyle
SingleEntryCacheTest	src/test/coins_tests.cpp	/^    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)$/;"	f	class:SingleEntryCacheTest
SingleEntryCacheTest	src/test/coins_tests.cpp	/^class SingleEntryCacheTest$/;"	c	file:
SingleThreadedSchedulerClient	src/scheduler.h	/^    explicit SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}$/;"	f	class:SingleThreadedSchedulerClient
SingleThreadedSchedulerClient	src/scheduler.h	/^class SingleThreadedSchedulerClient {$/;"	c
Singleton	src/script/descriptor.cpp	/^std::vector<T> Singleton(T elem)$/;"	f	namespace:__anon75
SipHashUint256	src/crypto/siphash.cpp	/^uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)$/;"	f
SipHashUint256Extra	src/crypto/siphash.cpp	/^uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)$/;"	f
SipHash_32b	src/bench/crypto_hash.cpp	/^static void SipHash_32b(benchmark::State& state)$/;"	f	file:
Size	src/leveldb/db/autocompact_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::AutoCompactTest
Size	src/leveldb/db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	src/leveldb/helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon35::FileState
Size	src/leveldb/table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Size	src/test/prevector_tests.cpp	/^    typedef typename pretype::size_type Size;$/;"	t	class:prevector_tester	file:
SizeEstimate	src/dbwrapper.h	/^    size_t SizeEstimate() const { return size_estimate; }$/;"	f	class:CDBBatch
SizeToChunkSortedMap	src/support/lockedpool.h	/^    typedef std::multimap<size_t, char*> SizeToChunkSortedMap;$/;"	t	class:Arena
SizeTooSmall	test/functional/data/invalid_txs.py	/^class SizeTooSmall(BadTxTemplate):$/;"	c
Skewed	src/leveldb/util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skip	src/leveldb/db/log_test.cc	/^    virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::log::LogTest::StringSource
Skip	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
Skip	src/leveldb/util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon8::PosixSequentialFile
Skip	src/leveldb/util/env_win.cc	/^Status Win32SequentialFile::Skip( uint64_t n )$/;"	f	class:leveldb::Win32::Win32SequentialFile
SkipEmptyDataBlocksBackward	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SkipEmptyDataBlocksForward	src/leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SkipList	src/leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	src/leveldb/db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipMapTxEntry	src/miner.cpp	/^bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)$/;"	f	class:BlockAssembler
SkipTest	src/leveldb/db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb	file:
SkipTest	test/functional/rpc_bind.py	/^from test_framework.test_framework import BitcoinTestFramework, SkipTest$/;"	i
SkipTest	test/functional/test_framework/test_framework.py	/^class SkipTest(Exception):$/;"	c
SkipToInitialBlock	src/leveldb/db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
Sleep100ms	src/bench/examples.cpp	/^static void Sleep100ms(benchmark::State& state)$/;"	f	file:
SleepForMicroseconds	src/leveldb/include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	src/leveldb/util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon8::PosixEnv
SleepForMicroseconds	src/leveldb/util/env_win.cc	/^void Win32Env::SleepForMicroseconds( int micros )$/;"	f	class:leveldb::Win32::Win32Env
Slice	src/leveldb/include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	src/leveldb/include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	src/leveldb/include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	src/leveldb/include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	src/leveldb/include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	src/leveldb/db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	src/leveldb/table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	src/leveldb/db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	src/leveldb/port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Compress	src/leveldb/port/port_win.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	src/leveldb/port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	src/leveldb/port/port_win.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	src/leveldb/port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	src/leveldb/port/port_win.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	src/leveldb/include/leveldb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	src/leveldb/db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	src/leveldb/db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	src/leveldb/db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SocketEvents	src/net.cpp	/^void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)$/;"	f	class:CConnman
SocketHandler	src/net.cpp	/^void CConnman::SocketHandler()$/;"	f	class:CConnman
Socks5	src/netbase.cpp	/^static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, const SOCKET& hSocket)$/;"	f	file:
Socks5Command	test/functional/feature_proxy.py	/^from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType$/;"	i
Socks5Command	test/functional/test_framework/socks5.py	/^class Socks5Command():$/;"	c
Socks5Configuration	test/functional/feature_proxy.py	/^from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType$/;"	i
Socks5Configuration	test/functional/test_framework/socks5.py	/^class Socks5Configuration():$/;"	c
Socks5Connection	test/functional/test_framework/socks5.py	/^class Socks5Connection():$/;"	c
Socks5ErrorString	src/netbase.cpp	/^static std::string Socks5ErrorString(uint8_t err)$/;"	f	file:
Socks5Server	test/functional/feature_proxy.py	/^from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType$/;"	i
Socks5Server	test/functional/test_framework/socks5.py	/^class Socks5Server():$/;"	c
SoftSetArg	src/util/system.cpp	/^bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f	class:ArgsManager
SoftSetBoolArg	src/util/system.cpp	/^bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f	class:ArgsManager
Solver	src/script/standard.cpp	/^txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet)$/;"	f
SomeFileOverlapsRange	src/leveldb/db/version_set.cc	/^bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SortForBlock	src/miner.cpp	/^void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)$/;"	f	class:BlockAssembler
Span	src/span.h	/^class Span$/;"	c
SpecialEnv	src/leveldb/db/db_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	src/leveldb/db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
SpendCoin	src/coins.cpp	/^bool CCoinsViewCache::SpendCoin(const COutPoint &outpoint, Coin* moveout) {$/;"	f	class:CCoinsViewCache
SpendNegative	test/functional/data/invalid_txs.py	/^class SpendNegative(BadTxTemplate):$/;"	c
SpendTooMuch	test/functional/data/invalid_txs.py	/^class SpendTooMuch(BadTxTemplate):$/;"	c
SpendZeroConfChange	src/qt/optionsmodel.h	/^        SpendZeroConfChange,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
SpendsCoinbase	src/test/setup_common.h	/^    TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
SplashScreen	src/qt/splashscreen.cpp	/^SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const NetworkStyle *networkStyle) :$/;"	f	class:SplashScreen
SplashScreen	src/qt/splashscreen.h	/^class SplashScreen : public QWidget$/;"	c
Split	src/script/descriptor.cpp	/^std::vector<Span<const char>> Split(const Span<const char>& sp, char sep)$/;"	f	namespace:__anon75
SplitHostPort	src/util/strencodings.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
SplitTorReplyLine	src/torcontrol.cpp	/^std::pair<std::string,std::string> SplitTorReplyLine(const std::string &s)$/;"	f
SplitWalletPath	src/wallet/db.cpp	/^static void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename)$/;"	f	file:
Stacks	src/script/sign.cpp	/^    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {$/;"	f	struct:__anon82::Stacks
Stacks	src/script/sign.cpp	/^struct Stacks$/;"	s	namespace:__anon82	file:
StandardDeviation	src/leveldb/util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Standard_Queue	src/test/checkqueue_tests.cpp	/^typedef CCheckQueue<FakeCheck> Standard_Queue;$/;"	t	file:
Start	src/index/base.cpp	/^void BaseIndex::Start()$/;"	f	class:BaseIndex
Start	src/leveldb/db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon19::Stats
Start	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	src/net.cpp	/^bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)$/;"	f	class:CConnman
StartAtStartup	src/qt/optionsmodel.h	/^        StartAtStartup,         \/\/ bool$/;"	e	enum:OptionsModel::OptionID
StartBlock	src/leveldb/table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartHTTPRPC	src/httprpc.cpp	/^bool StartHTTPRPC()$/;"	f
StartHTTPServer	src/httpserver.cpp	/^void StartHTTPServer()$/;"	f
StartMapPort	src/net.cpp	/^void StartMapPort()$/;"	f
StartPhase	src/leveldb/db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartREST	src/rest.cpp	/^void StartREST()$/;"	f
StartRPC	src/rpc/server.cpp	/^void StartRPC()$/;"	f
StartReadingAt	src/leveldb/db/log_test.cc	/^  void StartReadingAt(uint64_t initial_offset) {$/;"	f	class:leveldb::log::LogTest
StartShutdown	src/shutdown.cpp	/^void StartShutdown()$/;"	f
StartThread	src/leveldb/include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	src/leveldb/util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon8::PosixEnv
StartThread	src/leveldb/util/env_win.cc	/^void Win32Env::StartThread( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
StartThreadState	src/leveldb/util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon8::__anon9	file:
StartThreadWrapper	src/leveldb/util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon8
StartTorControl	src/torcontrol.cpp	/^void StartTorControl()$/;"	f
StartWallets	src/wallet/load.cpp	/^void StartWallets(CScheduler& scheduler)$/;"	f
Started	src/rpc/server.cpp	/^    boost::signals2::signal<void ()> Started;$/;"	m	struct:CRPCSignals	file:
StartupShortcutPath	src/qt/guiutil.cpp	/^fs::path static StartupShortcutPath()$/;"	f	namespace:GUIUtil
State	src/bench/bench.h	/^    State(std::string name, uint64_t num_evals, double num_iters, Printer& printer) : m_name(name), m_num_iters_left(0), m_num_iters(num_iters), m_num_evals(num_evals)$/;"	f	class:benchmark::State
State	src/bench/bench.h	/^class State$/;"	c	namespace:benchmark
State	src/leveldb/db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	src/leveldb/db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
State	src/leveldb/util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb	file:
Stats	src/leveldb/db/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon19::Stats
Stats	src/leveldb/db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon19	file:
Stats	src/support/lockedpool.h	/^    struct Stats$/;"	s	class:Arena
Stats	src/support/lockedpool.h	/^    struct Stats$/;"	s	class:LockedPool
Status	src/leveldb/include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	src/leveldb/include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	src/leveldb/include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	src/leveldb/util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
Status	src/qt/intro.cpp	/^    enum Status {$/;"	g	class:FreespaceChecker	file:
Status	src/qt/transactionrecord.h	/^    enum Status {$/;"	g	class:TransactionStatus
Status	src/qt/transactiontablemodel.h	/^        Status = 0,$/;"	e	enum:TransactionTableModel::ColumnIndex
StatusCode	src/qt/walletmodel.h	/^    enum StatusCode \/\/ Returned by sendCoins$/;"	g	class:WalletModel
StatusRole	src/qt/transactiontablemodel.h	/^        StatusRole,$/;"	e	enum:TransactionTableModel::RoleIndex
StdoutPrinter	src/leveldb/db/leveldbutil.cc	/^class StdoutPrinter : public WritableFile {$/;"	c	namespace:leveldb::__anon31	file:
StepErrorCheck	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static void StepErrorCheck(int status) {$/;"	f	file:
Stop	src/index/base.cpp	/^void BaseIndex::Stop()$/;"	f	class:BaseIndex
Stop	src/leveldb/db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon19::Stats
Stop	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	src/net.cpp	/^void CConnman::Stop()$/;"	f	class:CConnman
StopHTTPRPC	src/httprpc.cpp	/^void StopHTTPRPC()$/;"	f
StopHTTPServer	src/httpserver.cpp	/^void StopHTTPServer()$/;"	f
StopMapPort	src/net.cpp	/^void StopMapPort()$/;"	f
StopREST	src/rest.cpp	/^void StopREST()$/;"	f
StopRPC	src/rpc/server.cpp	/^void StopRPC()$/;"	f
StopTorControl	src/torcontrol.cpp	/^void StopTorControl()$/;"	f
StopWallets	src/wallet/load.cpp	/^void StopWallets()$/;"	f
Stopped	src/rpc/server.cpp	/^    boost::signals2::signal<void ()> Stopped;$/;"	m	struct:CRPCSignals	file:
StringContentsSerializer	src/test/dbwrapper_tests.cpp	/^    StringContentsSerializer() {}$/;"	f	struct:StringContentsSerializer
StringContentsSerializer	src/test/dbwrapper_tests.cpp	/^    explicit StringContentsSerializer(const std::string& inp) : str(inp) {}$/;"	f	struct:StringContentsSerializer
StringContentsSerializer	src/test/dbwrapper_tests.cpp	/^struct StringContentsSerializer {$/;"	s	file:
StringDest	src/leveldb/db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringForFeeEstimateHorizon	src/policy/fees.cpp	/^std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {$/;"	f
StringForFeeReason	src/util/fees.cpp	/^std::string StringForFeeReason(FeeReason reason) {$/;"	f
StringMap	src/wallet/wallet.h	/^    typedef std::map<std::string, std::string> StringMap;$/;"	t	class:CAddressBookData
StringSink	src/leveldb/table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	src/leveldb/db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	src/leveldb/db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	src/leveldb/table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	src/leveldb/table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb	file:
SubBytes	src/crypto/ctaes/ctaes.c	/^static void SubBytes(AES_state *s, int inv) {$/;"	f	file:
Subversion	src/qt/peertablemodel.h	/^        Subversion = 5$/;"	e	enum:PeerTableModel::ColumnIndex
SwapRandom	src/addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
SweepBanned	src/banman.cpp	/^void BanMan::SweepBanned()$/;"	f	class:BanMan
Sync	src/dbwrapper.h	/^    bool Sync()$/;"	f	class:CDBWrapper
Sync	src/leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Sync() {$/;"	f	class:leveldb::TestWritableFile
Sync	src/leveldb/db/leveldbutil.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon31::StdoutPrinter
Sync	src/leveldb/db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon35::WritableFileImpl
Sync	src/leveldb/table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	src/leveldb/util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Sync	src/leveldb/util/env_win.cc	/^Status Win32WritableFile::Sync()$/;"	f	class:leveldb::Win32::Win32WritableFile
SyncDir	src/leveldb/db/fault_injection_test.cc	/^Status SyncDir(const std::string& dir) {$/;"	f	namespace:leveldb::__anon20
SyncDirIfManifest	src/leveldb/util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
SyncMetaData	src/wallet/wallet.cpp	/^void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)$/;"	f	class:CWallet
SyncParent	src/leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::SyncParent() {$/;"	f	class:leveldb::TestWritableFile
SyncTransaction	src/wallet/wallet.cpp	/^void CWallet::SyncTransaction(const CTransactionRef& ptx, const uint256& block_hash, int posInBlock, bool update_tx) {$/;"	f	class:CWallet
SyncWithValidationInterfaceQueue	src/validationinterface.cpp	/^void SyncWithValidationInterfaceQueue() {$/;"	f
SystemRandom	test/functional/rpc_users.py	/^from random import SystemRandom$/;"	i
T	src/test/hash_tests.cpp	/^#define T(/;"	d	file:
T	src/test/hash_tests.cpp	/^#undef T$/;"	d	file:
TABLE_TEST	src/leveldb/table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
TAB_CONSOLE	src/qt/rpcconsole.h	/^        TAB_CONSOLE = 1,$/;"	e	enum:RPCConsole::TabTypes
TAB_GRAPH	src/qt/rpcconsole.h	/^        TAB_GRAPH = 2,$/;"	e	enum:RPCConsole::TabTypes
TAB_INFO	src/qt/rpcconsole.h	/^        TAB_INFO = 0,$/;"	e	enum:RPCConsole::TabTypes
TAB_MAIN	src/qt/optionsdialog.h	/^        TAB_MAIN,$/;"	e	enum:OptionsDialog::Tab
TAB_NETWORK	src/qt/optionsdialog.h	/^        TAB_NETWORK,$/;"	e	enum:OptionsDialog::Tab
TAB_PEERS	src/qt/rpcconsole.h	/^        TAB_PEERS = 3$/;"	e	enum:RPCConsole::TabTypes
TCONCAT	src/leveldb/util/testharness.h	/^#define TCONCAT(/;"	d
TCONCAT1	src/leveldb/util/testharness.h	/^#define TCONCAT1(/;"	d
TEST	src/leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadAll) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadHalf) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileRepair) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetEncountersEmptyLevel) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetMemUsage) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_a) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_b) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, Locking) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, ManifestWriteError) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, ManualCompaction) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, MissingSSTFile) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, NonWritableFileSystem) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, RepeatedWritesToSameKey) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, StillReadSST) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/db_test.cc	/^TEST(DBTest, WriteSyncError) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestNoLogReuse) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestWithLogReuse) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, BadLengthAtEndIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, MissingLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, OpenForAppend) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, PartialLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadEnd) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadInitialOffsetIntoBlockPadding) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadPastEnd) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondStart) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadStart) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdStart) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, SkipIntoMultiRecord) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecordIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	src/leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, LargeManifestCompacted) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, LogFileReuse) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, ManifestReused) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, MultipleLogFiles) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, MultipleMemTables) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, NoLogFiles) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	src/leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	src/leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	src/leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	src/leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	src/leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	src/leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	src/leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	src/leveldb/issues/issue178_test.cc	/^TEST(Issue178, Test) {$/;"	f	namespace:__anon34
TEST	src/leveldb/issues/issue200_test.cc	/^TEST(Issue200, Test) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, Empty) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(Harness, ZeroRestartPointsInBlock) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	src/leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, Prune) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/cache_test.cc	/^TEST(CacheTest, UseExceedsCacheSize) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, EncodingOutput) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	src/leveldb/util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	src/leveldb/util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	src/leveldb/util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	src/leveldb/util/env_posix_test.cc	/^TEST(EnvPosixTest, TestOpenOnRead) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/env_test.cc	/^TEST(EnvTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/env_test.cc	/^TEST(EnvTest, RunMany) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/env_test.cc	/^TEST(EnvTest, StartThread) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/hash_test.cc	/^TEST(HASH, SignedUnsignedIssue) {$/;"	f	namespace:leveldb
TEST	src/leveldb/util/testharness.h	/^#define TEST(/;"	d
TESTDEFS	Makefile	/^TESTDEFS =  -DBOOST_TEST_DYN_LINK$/;"	m
TESTDEFS	doc/man/Makefile	/^TESTDEFS =  -DBOOST_TEST_DYN_LINK$/;"	m
TESTDEFS	src/Makefile	/^TESTDEFS =  -DBOOST_TEST_DYN_LINK$/;"	m
TESTHARNESS	src/leveldb/Makefile	/^TESTHARNESS := $(STATIC_OUTDIR)\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTNET	src/chainparamsbase.cpp	/^const std::string CBaseChainParams::TESTNET = "test";$/;"	m	class:CBaseChainParams	file:
TESTNET	src/chainparamsbase.h	/^    static const std::string TESTNET;$/;"	m	class:CBaseChainParams
TESTS	src/Makefile	/^TESTS = $(am__EXEEXT_8)$/;"	m
TESTS	src/leveldb/Makefile	/^TESTS = \\$/;"	m
TESTS	src/secp256k1/Makefile	/^TESTS = $(am__EXEEXT_2) $(am__EXEEXT_3)$/;"	m
TESTS	src/univalue/Makefile	/^TESTS = test\/object$(EXEEXT) test\/unitester$(EXEEXT) \\$/;"	m
TESTSDIR	test/functional/rpc_getblockstats.py	/^TESTSDIR = os.path.dirname(os.path.realpath(__file__))$/;"	v
TESTUTIL	src/leveldb/Makefile	/^TESTUTIL := $(STATIC_OUTDIR)\/util\/testutil.o$/;"	m
TEST_BINARY	src/Makefile	/^TEST_BINARY = test\/test_bitcoin$(EXEEXT)$/;"	m
TEST_CompactMemTable	src/leveldb/db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	src/leveldb/db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_DATA_DIR	src/univalue/Makefile	/^TEST_DATA_DIR = test$/;"	m
TEST_EXIT_FAILED	test/functional/test_framework/test_framework.py	/^TEST_EXIT_FAILED = 1$/;"	v
TEST_EXIT_PASSED	test/functional/test_framework/test_framework.py	/^TEST_EXIT_PASSED = 0$/;"	v
TEST_EXIT_PASSED	test/functional/test_runner.py	/^TEST_EXIT_PASSED = 0$/;"	v
TEST_EXIT_SKIPPED	test/functional/test_framework/test_framework.py	/^TEST_EXIT_SKIPPED = 77$/;"	v
TEST_EXIT_SKIPPED	test/functional/test_runner.py	/^TEST_EXIT_SKIPPED = 77$/;"	v
TEST_EXTENSIONS	src/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_EXTENSIONS	src/secp256k1/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_EXTENSIONS	src/univalue/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_FAILURE	src/secp256k1/src/util.h	/^#define TEST_FAILURE(/;"	d
TEST_FILES	src/univalue/Makefile	/^TEST_FILES = \\$/;"	m
TEST_LOGS	src/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOGS	src/secp256k1/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOGS	src/univalue/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOG_COMPILE	src/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_COMPILE	src/secp256k1/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_COMPILE	src/univalue/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_DRIVER	src/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_LOG_DRIVER	src/secp256k1/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_LOG_DRIVER	src/univalue/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_MaxNextLevelOverlappingBytes	src/leveldb/db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	src/leveldb/db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
TEST_SRCDIR	src/Makefile	/^TEST_SRCDIR = test$/;"	m
TEST_SUITE_LOG	src/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_SUITE_LOG	src/secp256k1/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_SUITE_LOG	src/univalue/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_THREAD_NAME_BASE	src/test/util_threadnames_tests.cpp	/^const std::string TEST_THREAD_NAME_BASE = "test_thread.";$/;"	v
THIN_SP_CP	src/qt/bitcoinunits.h	/^#define THIN_SP_CP /;"	d
THIN_SP_HTML	src/qt/bitcoinunits.h	/^#define THIN_SP_HTML /;"	d
THIN_SP_UTF8	src/qt/bitcoinunits.h	/^#define THIN_SP_UTF8 /;"	d
TICK	test/functional/test_runner.py	/^    TICK = "P "$/;"	v
TICK	test/functional/test_runner.py	/^    TICK = "✓ "$/;"	v
TIFFCP	Makefile	/^TIFFCP = $/;"	m
TIFFCP	doc/man/Makefile	/^TIFFCP = $/;"	m
TIFFCP	src/Makefile	/^TIFFCP = $/;"	m
TIMEOUT_INTERVAL	src/net.h	/^static const int TIMEOUT_INTERVAL = 20 * 60;$/;"	v
TIMESTAMP_MIN	src/wallet/rpcdump.cpp	/^static const int64_t TIMESTAMP_MIN = 0;$/;"	v	file:
TIMESTAMP_PATTERN	test/functional/combine_logs.py	/^TIMESTAMP_PATTERN = re.compile(r"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{6})?Z")$/;"	v
TIMESTAMP_WINDOW	src/chain.h	/^static constexpr int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;$/;"	v
TIMESTAMP_WINDOW	test/functional/feature_pruning.py	/^TIMESTAMP_WINDOW = 2 * 60 * 60$/;"	v
TIMESTAMP_WINDOW	test/functional/wallet_import_rescan.py	/^TIMESTAMP_WINDOW = 2 * 60 * 60$/;"	v
TIME_GENESIS_BLOCK	test/functional/test_framework/blocktools.py	/^TIME_GENESIS_BLOCK = 1296688602$/;"	v
TINYFORMAT_ARGTYPES	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES(/;"	d
TINYFORMAT_ARGTYPES_1	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_1 /;"	d
TINYFORMAT_ARGTYPES_10	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_10 /;"	d
TINYFORMAT_ARGTYPES_11	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_11 /;"	d
TINYFORMAT_ARGTYPES_12	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_12 /;"	d
TINYFORMAT_ARGTYPES_13	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_13 /;"	d
TINYFORMAT_ARGTYPES_14	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_14 /;"	d
TINYFORMAT_ARGTYPES_15	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_15 /;"	d
TINYFORMAT_ARGTYPES_16	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_16 /;"	d
TINYFORMAT_ARGTYPES_2	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_2 /;"	d
TINYFORMAT_ARGTYPES_3	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_3 /;"	d
TINYFORMAT_ARGTYPES_4	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_4 /;"	d
TINYFORMAT_ARGTYPES_5	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_5 /;"	d
TINYFORMAT_ARGTYPES_6	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_6 /;"	d
TINYFORMAT_ARGTYPES_7	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_7 /;"	d
TINYFORMAT_ARGTYPES_8	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_8 /;"	d
TINYFORMAT_ARGTYPES_9	src/tinyformat.h	/^#define TINYFORMAT_ARGTYPES_9 /;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	src/tinyformat.h	/^#define TINYFORMAT_DEFINE_FORMATVALUE_CHAR(/;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	src/tinyformat.h	/^#undef TINYFORMAT_DEFINE_FORMATVALUE_CHAR$/;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	src/tinyformat.h	/^#define TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(/;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	src/tinyformat.h	/^#undef TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR$/;"	d
TINYFORMAT_ERROR	src/tinyformat.h	/^#   define TINYFORMAT_ERROR(/;"	d
TINYFORMAT_ERROR	src/tinyformat.h	/^#define TINYFORMAT_ERROR(/;"	d
TINYFORMAT_FOREACH_ARGNUM	src/tinyformat.h	/^#define TINYFORMAT_FOREACH_ARGNUM(/;"	d
TINYFORMAT_HIDDEN	src/tinyformat.h	/^#   define TINYFORMAT_HIDDEN /;"	d
TINYFORMAT_HIDDEN	src/tinyformat.h	/^#   define TINYFORMAT_HIDDEN$/;"	d
TINYFORMAT_H_INCLUDED	src/tinyformat.h	/^#define TINYFORMAT_H_INCLUDED$/;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	src/tinyformat.h	/^#define TINYFORMAT_MAKE_FORMAT_FUNCS(/;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	src/tinyformat.h	/^#undef TINYFORMAT_MAKE_FORMAT_FUNCS$/;"	d
TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND	src/tinyformat.h	/^#   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND$/;"	d
TINYFORMAT_PASSARGS	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS(/;"	d
TINYFORMAT_PASSARGS_1	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_1 /;"	d
TINYFORMAT_PASSARGS_10	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_10 /;"	d
TINYFORMAT_PASSARGS_11	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_11 /;"	d
TINYFORMAT_PASSARGS_12	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_12 /;"	d
TINYFORMAT_PASSARGS_13	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_13 /;"	d
TINYFORMAT_PASSARGS_14	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_14 /;"	d
TINYFORMAT_PASSARGS_15	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_15 /;"	d
TINYFORMAT_PASSARGS_16	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_16 /;"	d
TINYFORMAT_PASSARGS_2	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_2 /;"	d
TINYFORMAT_PASSARGS_3	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_3 /;"	d
TINYFORMAT_PASSARGS_4	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_4 /;"	d
TINYFORMAT_PASSARGS_5	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_5 /;"	d
TINYFORMAT_PASSARGS_6	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_6 /;"	d
TINYFORMAT_PASSARGS_7	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_7 /;"	d
TINYFORMAT_PASSARGS_8	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_8 /;"	d
TINYFORMAT_PASSARGS_9	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_9 /;"	d
TINYFORMAT_PASSARGS_TAIL	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL(/;"	d
TINYFORMAT_PASSARGS_TAIL_1	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_1$/;"	d
TINYFORMAT_PASSARGS_TAIL_10	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_10 /;"	d
TINYFORMAT_PASSARGS_TAIL_11	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_11 /;"	d
TINYFORMAT_PASSARGS_TAIL_12	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_12 /;"	d
TINYFORMAT_PASSARGS_TAIL_13	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_13 /;"	d
TINYFORMAT_PASSARGS_TAIL_14	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_14 /;"	d
TINYFORMAT_PASSARGS_TAIL_15	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_15 /;"	d
TINYFORMAT_PASSARGS_TAIL_16	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_16 /;"	d
TINYFORMAT_PASSARGS_TAIL_2	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_2 /;"	d
TINYFORMAT_PASSARGS_TAIL_3	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_3 /;"	d
TINYFORMAT_PASSARGS_TAIL_4	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_4 /;"	d
TINYFORMAT_PASSARGS_TAIL_5	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_5 /;"	d
TINYFORMAT_PASSARGS_TAIL_6	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_6 /;"	d
TINYFORMAT_PASSARGS_TAIL_7	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_7 /;"	d
TINYFORMAT_PASSARGS_TAIL_8	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_8 /;"	d
TINYFORMAT_PASSARGS_TAIL_9	src/tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_9 /;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	src/tinyformat.h	/^#       define TINYFORMAT_USE_VARIADIC_TEMPLATES$/;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	src/tinyformat.h	/^#define TINYFORMAT_USE_VARIADIC_TEMPLATES$/;"	d
TINYFORMAT_VARARGS	src/tinyformat.h	/^#define TINYFORMAT_VARARGS(/;"	d
TINYFORMAT_VARARGS_1	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_1 /;"	d
TINYFORMAT_VARARGS_10	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_10 /;"	d
TINYFORMAT_VARARGS_11	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_11 /;"	d
TINYFORMAT_VARARGS_12	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_12 /;"	d
TINYFORMAT_VARARGS_13	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_13 /;"	d
TINYFORMAT_VARARGS_14	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_14 /;"	d
TINYFORMAT_VARARGS_15	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_15 /;"	d
TINYFORMAT_VARARGS_16	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_16 /;"	d
TINYFORMAT_VARARGS_2	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_2 /;"	d
TINYFORMAT_VARARGS_3	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_3 /;"	d
TINYFORMAT_VARARGS_4	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_4 /;"	d
TINYFORMAT_VARARGS_5	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_5 /;"	d
TINYFORMAT_VARARGS_6	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_6 /;"	d
TINYFORMAT_VARARGS_7	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_7 /;"	d
TINYFORMAT_VARARGS_8	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_8 /;"	d
TINYFORMAT_VARARGS_9	src/tinyformat.h	/^#define TINYFORMAT_VARARGS_9 /;"	d
TMPDIR_PREFIX	test/functional/combine_logs.py	/^TMPDIR_PREFIX = "bitcoin_func_test_"$/;"	v
TMPDIR_PREFIX	test/functional/test_framework/test_framework.py	/^TMPDIR_PREFIX = "bitcoin_func_test_"$/;"	v
TOOLTIP_WRAP_THRESHOLD	src/qt/guiconstants.h	/^static const int TOOLTIP_WRAP_THRESHOLD = 80;$/;"	v
TOO_NEW	src/wallet/walletdb.h	/^    TOO_NEW,$/;"	m	class:DBErrors
TOP	src/script/descriptor.cpp	/^    TOP,$/;"	m	class:__anon75::ParseScriptContext	file:
TOP	src/script/ismine.cpp	/^    TOP = 0,        \/\/!< scriptPubKey execution$/;"	m	class:__anon85::IsMineSigVersion	file:
TOP	src/wallet/rpcdump.cpp	/^    TOP, \/\/!< Top-level scriptPubKey$/;"	m	class:ScriptContext	file:
TOR_COOKIE_SIZE	src/torcontrol.cpp	/^static const int TOR_COOKIE_SIZE = 32;$/;"	v	file:
TOR_NONCE_SIZE	src/torcontrol.cpp	/^static const int TOR_NONCE_SIZE = 32;$/;"	v	file:
TOR_SAFE_CLIENTKEY	src/torcontrol.cpp	/^static const std::string TOR_SAFE_CLIENTKEY = "Tor safe cookie authentication controller-to-server hash";$/;"	v	file:
TOR_SAFE_SERVERKEY	src/torcontrol.cpp	/^static const std::string TOR_SAFE_SERVERKEY = "Tor safe cookie authentication server-to-controller hash";$/;"	v	file:
TOTAL_TRIES	src/wallet/coinselection.cpp	/^static const size_t TOTAL_TRIES = 100000;$/;"	v	file:
TRY_LOCK	src/sync.h	/^#define TRY_LOCK(/;"	d
TTLEXPIRED	src/netbase.cpp	/^    TTLEXPIRED = 0x06,       \/\/!< TTL expired$/;"	e	enum:uint8_t	file:
TX	contrib/devtools/update-translations.py	/^TX = 'tx'$/;"	v
TX	src/protocol.cpp	/^const char *TX="tx";$/;"	m	namespace:NetMsgType	file:
TX_CONFLICT	src/consensus/validation.h	/^    TX_CONFLICT,$/;"	m	class:ValidationInvalidReason
TX_MEMPOOL_POLICY	src/consensus/validation.h	/^    TX_MEMPOOL_POLICY,        \/\/!< violated mempool's fee\/size\/descendant\/RBF\/etc limits$/;"	m	class:ValidationInvalidReason
TX_MISSING_INPUTS	src/consensus/validation.h	/^    TX_MISSING_INPUTS,        \/\/!< a transaction was missing some of its inputs$/;"	m	class:ValidationInvalidReason
TX_MULTISIG	src/script/standard.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	src/script/standard.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_NOT_STANDARD	src/consensus/validation.h	/^    TX_NOT_STANDARD,          \/\/!< didn't meet our local policy rules$/;"	m	class:ValidationInvalidReason
TX_NULL_DATA	src/script/standard.h	/^    TX_NULL_DATA, \/\/!< unspendable OP_RETURN script that carries data$/;"	e	enum:txnouttype
TX_PREMATURE_SPEND	src/consensus/validation.h	/^    TX_PREMATURE_SPEND,       \/\/!< transaction spends a coinbase too early, or violates locktime\/sequence locks$/;"	m	class:ValidationInvalidReason
TX_PUBKEY	src/script/standard.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	src/script/standard.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	src/script/standard.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
TX_WITNESS_MUTATED	src/consensus/validation.h	/^    TX_WITNESS_MUTATED,$/;"	m	class:ValidationInvalidReason
TX_WITNESS_UNKNOWN	src/script/standard.h	/^    TX_WITNESS_UNKNOWN, \/\/!< Only for Witness versions not already defined above$/;"	e	enum:txnouttype
TX_WITNESS_V0_KEYHASH	src/script/standard.h	/^    TX_WITNESS_V0_KEYHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V0_SCRIPTHASH	src/script/standard.h	/^    TX_WITNESS_V0_SCRIPTHASH,$/;"	e	enum:txnouttype
TYPE	src/qt/transactionfilterproxy.h	/^    static quint32 TYPE(int type) { return 1<<type; }$/;"	f	class:TransactionFilterProxy
TYPE_COLUMN_WIDTH	src/qt/transactionview.h	/^        TYPE_COLUMN_WIDTH = 113,$/;"	e	enum:TransactionView::ColumnWidths
Tab	src/qt/optionsdialog.h	/^    enum Tab {$/;"	g	class:OptionsDialog
TabTypes	src/qt/rpcconsole.h	/^    enum TabTypes {$/;"	g	class:RPCConsole
Table	src/leveldb/db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	src/leveldb/include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	src/leveldb/include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	src/leveldb/db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	src/leveldb/include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	src/leveldb/table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	src/leveldb/db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	src/leveldb/db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	src/leveldb/table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	src/leveldb/table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	src/leveldb/db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	src/leveldb/db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon30::Repairer	file:
TableTest	src/leveldb/table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb	file:
TableViewLastColumnResizingFixer	src/qt/guiutil.cpp	/^TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth, QObject *parent) :$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
TableViewLastColumnResizingFixer	src/qt/guiutil.h	/^    class TableViewLastColumnResizingFixer: public QObject$/;"	c	namespace:GUIUtil
Tabs	src/qt/addressbookpage.h	/^    enum Tabs {$/;"	g	class:AddressBookPage
Tag	src/leveldb/db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TargetFileSize	src/leveldb/db/version_set.cc	/^static size_t TargetFileSize(const Options* options) {$/;"	f	namespace:leveldb
TempFileName	src/leveldb/db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	src/leveldb/table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	src/leveldb/util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon5	file:
Test	src/test/script_tests.cpp	/^    TestBuilder& Test()$/;"	f	class:__anon58::TestBuilder
TestAES256	src/test/crypto_tests.cpp	/^static void TestAES256(const std::string &hexkey, const std::string &hexin, const std::string &hexout)$/;"	f	file:
TestAES256CBC	src/test/crypto_tests.cpp	/^static void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)$/;"	f	file:
TestActive	src/test/versionbits_tests.cpp	/^    VersionBitsTester& TestActive() {$/;"	f	class:VersionBitsTester
TestAddAddressesToSendBook	src/qt/test/addressbooktests.cpp	/^void TestAddAddressesToSendBook()$/;"	f	namespace:__anon62
TestAlwaysActiveConditionChecker	src/test/versionbits_tests.cpp	/^class TestAlwaysActiveConditionChecker : public TestConditionChecker$/;"	c	file:
TestArgs	src/leveldb/table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestArgsManager	src/test/util_tests.cpp	/^    TestArgsManager() { m_network_only_args.clear(); }$/;"	f	struct:TestArgsManager
TestArgsManager	src/test/util_tests.cpp	/^struct TestArgsManager : public ArgsManager$/;"	s	file:
TestBackwardScan	src/leveldb/table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestBitcoinCli	test/functional/interface_bitcoin_cli.py	/^class TestBitcoinCli(BitcoinTestFramework):$/;"	c
TestBlockSubsidyHalvings	src/test/validation_tests.cpp	/^static void TestBlockSubsidyHalvings(const Consensus::Params& consensusParams)$/;"	f	file:
TestBlockSubsidyHalvings	src/test/validation_tests.cpp	/^static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)$/;"	f	file:
TestBlockValidity	src/validation.cpp	/^bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
TestBuilder	src/test/script_tests.cpp	/^    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WitnessMode::NONE, int witnessversion = 0, CAmount nValue_ = 0) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK), nValue(nValue_)$/;"	f	class:__anon58::TestBuilder
TestBuilder	src/test/script_tests.cpp	/^class TestBuilder$/;"	c	namespace:__anon58	file:
TestChaCha20	src/test/crypto_tests.cpp	/^static void TestChaCha20(const std::string &hex_message, const std::string &hexkey, uint64_t nonce, uint64_t seek, const std::string& hexout)$/;"	f	file:
TestChain100Setup	src/test/setup_common.cpp	/^TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)$/;"	f	class:TestChain100Setup
TestChain100Setup	src/test/setup_common.h	/^struct TestChain100Setup : public TestingSetup {$/;"	s
TestConditionChecker	src/test/versionbits_tests.cpp	/^class TestConditionChecker : public AbstractThresholdConditionChecker$/;"	c	file:
TestCrypter	src/wallet/test/wallet_crypto_tests.cpp	/^class TestCrypter$/;"	c	file:
TestDecode	src/test/compress_tests.cpp	/^bool static TestDecode(uint64_t in) {$/;"	f	file:
TestDecrypt	src/wallet/test/wallet_crypto_tests.cpp	/^static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\$/;"	f	class:TestCrypter
TestDefined	src/test/versionbits_tests.cpp	/^    VersionBitsTester& TestDefined() {$/;"	f	class:VersionBitsTester
TestDerivation	src/test/bip32_tests.cpp	/^struct TestDerivation {$/;"	s	file:
TestDifficulty	src/test/blockchain_tests.cpp	/^static void TestDifficulty(uint32_t nbits, double expected_difficulty)$/;"	f	file:
TestEncode	src/test/compress_tests.cpp	/^bool static TestEncode(uint64_t in) {$/;"	f	file:
TestEncodeDecode	src/leveldb/db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestEncrypt	src/wallet/test/wallet_crypto_tests.cpp	/^static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\$/;"	f	class:TestCrypter
TestEncryptSingle	src/wallet/test/wallet_crypto_tests.cpp	/^static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,$/;"	f	class:TestCrypter
TestFailed	src/test/versionbits_tests.cpp	/^    VersionBitsTester& TestFailed() {$/;"	f	class:VersionBitsTester
TestForwardScan	src/leveldb/table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestGUI	src/qt/test/wallettests.cpp	/^void TestGUI()$/;"	f	namespace:__anon63
TestHKDF_SHA256_32	src/test/crypto_tests.cpp	/^static void TestHKDF_SHA256_32(const std::string &ikm_hex, const std::string &salt_hex, const std::string &info_hex, const std::string &okm_check_hex) {$/;"	f	file:
TestHMACSHA256	src/test/crypto_tests.cpp	/^static void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f	file:
TestHMACSHA512	src/test/crypto_tests.cpp	/^static void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f	file:
TestHandler	test/functional/test_runner.py	/^class TestHandler:$/;"	c
TestHashFilter	src/leveldb/table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb	file:
TestHeaderAndShortIDs	src/test/blockencodings_tests.cpp	/^    explicit TestHeaderAndShortIDs(const CBlock& block) :$/;"	f	class:TestHeaderAndShortIDs
TestHeaderAndShortIDs	src/test/blockencodings_tests.cpp	/^    explicit TestHeaderAndShortIDs(const CBlockHeaderAndShortTxIDs& orig) {$/;"	f	class:TestHeaderAndShortIDs
TestHeaderAndShortIDs	src/test/blockencodings_tests.cpp	/^class TestHeaderAndShortIDs {$/;"	c	file:
TestKey	src/leveldb/db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestLockPointValidity	src/validation.cpp	/^bool TestLockPointValidity(const LockPoints* lp)$/;"	f
TestLockedIn	src/test/versionbits_tests.cpp	/^    VersionBitsTester& TestLockedIn() {$/;"	f	class:VersionBitsTester
TestLockedPageAllocator	src/test/allocator_tests.cpp	/^    TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}$/;"	f	class:TestLockedPageAllocator
TestLockedPageAllocator	src/test/allocator_tests.cpp	/^class TestLockedPageAllocator: public LockedPageAllocator$/;"	c	file:
TestMemPoolEntryHelper	src/test/setup_common.h	/^    TestMemPoolEntryHelper() :$/;"	f	struct:TestMemPoolEntryHelper
TestMemPoolEntryHelper	src/test/setup_common.h	/^struct TestMemPoolEntryHelper$/;"	s
TestNode	test/functional/test_framework/test_framework.py	/^from .test_node import TestNode$/;"	i
TestNode	test/functional/test_framework/test_node.py	/^class TestNode():$/;"	c
TestNodeCLI	test/functional/test_framework/test_node.py	/^class TestNodeCLI():$/;"	c
TestNodeCLIAttr	test/functional/test_framework/test_node.py	/^class TestNodeCLIAttr:$/;"	c
TestOtherProcess	src/test/util_tests.cpp	/^static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)$/;"	f	file:
TestOtherThread	src/test/util_tests.cpp	/^static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)$/;"	f	file:
TestP2PConn	test/functional/feature_maxuploadtarget.py	/^class TestP2PConn(P2PInterface):$/;"	c
TestP2PConn	test/functional/p2p_compactblocks.py	/^class TestP2PConn(P2PInterface):$/;"	c
TestP2PConn	test/functional/p2p_feefilter.py	/^class TestP2PConn(P2PInterface):$/;"	c
TestP2PConn	test/functional/p2p_segwit.py	/^class TestP2PConn(P2PInterface):$/;"	c
TestP2PConn	test/functional/p2p_timeouts.py	/^class TestP2PConn(P2PInterface):$/;"	c
TestPackage	src/miner.cpp	/^bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const$/;"	f	class:BlockAssembler
TestPackageTransactions	src/miner.cpp	/^bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)$/;"	f	class:BlockAssembler
TestPair	src/test/compress_tests.cpp	/^bool static TestPair(uint64_t dec, uint64_t enc) {$/;"	f	file:
TestParse	src/test/netbase_tests.cpp	/^bool static TestParse(std::string src, std::string canon)$/;"	f	file:
TestPassphrase	src/wallet/test/wallet_crypto_tests.cpp	/^static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,$/;"	f	class:TestCrypter
TestPassphraseSingle	src/wallet/test/wallet_crypto_tests.cpp	/^static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,$/;"	f	class:TestCrypter
TestPoly1305	src/test/crypto_tests.cpp	/^static void TestPoly1305(const std::string &hexmessage, const std::string &hexkey, const std::string& hextag)$/;"	f	file:
TestPotentialDeadLockDetected	src/test/sync_tests.cpp	/^void TestPotentialDeadLockDetected(MutexType& mutex1, MutexType& mutex2)$/;"	f	namespace:__anon57
TestRIPEMD160	src/test/crypto_tests.cpp	/^static void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}$/;"	f	file:
TestRPCAuth	test/util/rpcauth-test.py	/^class TestRPCAuth(unittest.TestCase):$/;"	c
TestRandomAccess	src/leveldb/table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestResult	test/functional/test_runner.py	/^class TestResult():$/;"	c
TestRpcCommand	src/qt/test/apptests.cpp	/^void TestRpcCommand(RPCConsole* console)$/;"	f	namespace:__anon64
TestSHA1	src/test/crypto_tests.cpp	/^static void TestSHA1(const std::string &in, const std::string &hexout) { TestVector(CSHA1(), in, ParseHex(hexout));}$/;"	f	file:
TestSHA256	src/test/crypto_tests.cpp	/^static void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(CSHA256(), in, ParseHex(hexout));}$/;"	f	file:
TestSHA512	src/test/crypto_tests.cpp	/^static void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}$/;"	f	file:
TestSecurityChecks	contrib/devtools/test-security-check.py	/^class TestSecurityChecks(unittest.TestCase):$/;"	c
TestSplitHost	src/test/netbase_tests.cpp	/^bool static TestSplitHost(std::string test, std::string host, int port)$/;"	f	file:
TestStarted	src/test/versionbits_tests.cpp	/^    VersionBitsTester& TestStarted() {$/;"	f	class:VersionBitsTester
TestState	src/leveldb/db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	src/leveldb/db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestStateSinceHeight	src/test/versionbits_tests.cpp	/^    VersionBitsTester& TestStateSinceHeight(int height) {$/;"	f	class:VersionBitsTester
TestStatus	test/functional/test_framework/test_framework.py	/^class TestStatus(Enum):$/;"	c
TestSubscriber	src/test/validation_block_tests.cpp	/^    explicit TestSubscriber(uint256 tip) : m_expected_tip(tip) {}$/;"	f	struct:TestSubscriber
TestSubscriber	src/test/validation_block_tests.cpp	/^struct TestSubscriber : public CValidationInterface {$/;"	s	file:
TestTime	src/test/versionbits_tests.cpp	/^static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }$/;"	f	file:
TestType	src/leveldb/table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb	file:
TestVector	src/test/bip32_tests.cpp	/^    explicit TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}$/;"	f	struct:TestVector
TestVector	src/test/bip32_tests.cpp	/^struct TestVector {$/;"	s	file:
TestVector	src/test/crypto_tests.cpp	/^static void TestVector(const Hasher &h, const In &in, const Out &out) {$/;"	f	file:
TestWritableFile	src/leveldb/db/fault_injection_test.cc	/^TestWritableFile::TestWritableFile(const FileState& state,$/;"	f	class:leveldb::TestWritableFile
TestWritableFile	src/leveldb/db/fault_injection_test.cc	/^class TestWritableFile : public WritableFile {$/;"	c	namespace:leveldb	file:
Tester	src/leveldb/util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	src/leveldb/util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
TestingSetup	src/test/setup_common.cpp	/^TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)$/;"	f	class:TestingSetup
TestingSetup	src/test/setup_common.h	/^struct TestingSetup : public BasicTestingSetup {$/;"	s
TextColor	src/qt/platformstyle.h	/^    QColor TextColor() const { return textColor; }$/;"	f	class:PlatformStyle
TextColorIcon	src/qt/platformstyle.cpp	/^QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const$/;"	f	class:PlatformStyle
TextColorIcon	src/qt/platformstyle.cpp	/^QIcon PlatformStyle::TextColorIcon(const QString& filename) const$/;"	f	class:PlatformStyle
ThirdPartyTxUrls	src/qt/optionsmodel.h	/^        ThirdPartyTxUrls,       \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ThisMonth	src/qt/transactionview.h	/^        ThisMonth,$/;"	e	enum:TransactionView::DateEnum
ThisWeek	src/qt/transactionview.h	/^        ThisWeek,$/;"	e	enum:TransactionView::DateEnum
ThisYear	src/qt/transactionview.h	/^        ThisYear,$/;"	e	enum:TransactionView::DateEnum
Thread	src/checkqueue.h	/^    void Thread()$/;"	f	class:CCheckQueue
Thread	test/functional/feature_shutdown.py	/^from threading import Thread$/;"	i
ThreadArg	src/leveldb/db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	src/leveldb/db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadBody	src/leveldb/util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadDNSAddressSeed	src/net.cpp	/^void CConnman::ThreadDNSAddressSeed()$/;"	f	class:CConnman
ThreadGetInternalName	src/util/threadnames.cpp	/^const std::string& util::ThreadGetInternalName() { return empty_string; }$/;"	f	class:util
ThreadGetInternalName	src/util/threadnames.cpp	/^const std::string& util::ThreadGetInternalName() { return g_thread_name; }$/;"	f	class:util
ThreadHTTP	src/httpserver.cpp	/^static bool ThreadHTTP(struct event_base* base)$/;"	f	file:
ThreadImport	src/init.cpp	/^static void ThreadImport(std::vector<fs::path> vImportFiles)$/;"	f	file:
ThreadMapPort	src/net.cpp	/^static void ThreadMapPort()$/;"	f	file:
ThreadMessageHandler	src/net.cpp	/^void CConnman::ThreadMessageHandler()$/;"	f	class:CConnman
ThreadOpenAddedConnections	src/net.cpp	/^void CConnman::ThreadOpenAddedConnections()$/;"	f	class:CConnman
ThreadOpenConnections	src/net.cpp	/^void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)$/;"	f	class:CConnman
ThreadRename	src/util/threadnames.cpp	/^void util::ThreadRename(std::string&& name)$/;"	f	class:util
ThreadSafeMessageBox	src/qt/bitcoingui.cpp	/^static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
ThreadSafeMessageBox	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::last_value<bool>> ThreadSafeMessageBox;$/;"	m	struct:UISignals	file:
ThreadSafeMessageBox	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);$/;"	v
ThreadSafeMessageBox	src/ui_interface.cpp	/^bool CClientUIInterface::ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style); }$/;"	f	class:CClientUIInterface
ThreadSafeQuestion	src/ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::last_value<bool>> ThreadSafeQuestion;$/;"	m	struct:UISignals	file:
ThreadSafeQuestion	src/ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);$/;"	v
ThreadSafeQuestion	src/ui_interface.cpp	/^bool CClientUIInterface::ThreadSafeQuestion(const std::string& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style); }$/;"	f	class:CClientUIInterface
ThreadScriptCheck	src/validation.cpp	/^void ThreadScriptCheck(int worker_num) {$/;"	f
ThreadSocketHandler	src/net.cpp	/^void CConnman::ThreadSocketHandler()$/;"	f	class:CConnman
ThreadState	src/leveldb/db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon19::ThreadState
ThreadState	src/leveldb/db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon19	file:
ThreadSync	src/index/base.cpp	/^void BaseIndex::ThreadSync()$/;"	f	class:BaseIndex
ThreadsScriptVerif	src/qt/optionsmodel.h	/^        ThreadsScriptVerif,     \/\/ int$/;"	e	enum:OptionsModel::OptionID
ThresholdConditionCache	src/versionbits.h	/^typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;$/;"	t
ThresholdState	src/versionbits.h	/^enum class ThresholdState {$/;"	c
Time	src/test/setup_common.h	/^    TestMemPoolEntryHelper &Time(int64_t _time) { nTime = _time; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
Timeout	src/netbase.cpp	/^    Timeout,$/;"	m	class:IntrRecvError	file:
TimeoutsTest	test/functional/p2p_timeouts.py	/^class TimeoutsTest(BitcoinTestFramework):$/;"	c
TimingResistantEqual	src/util/strencodings.h	/^bool TimingResistantEqual(const T& a, const T& b)$/;"	f
Tip	src/chain.h	/^    CBlockIndex *Tip() const {$/;"	f	class:CChain
Tip	src/test/versionbits_tests.cpp	/^    CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : nullptr; }$/;"	f	class:VersionBitsTester
TmpDir	src/leveldb/util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToAddress	src/qt/transactiontablemodel.h	/^        ToAddress = 4,$/;"	e	enum:TransactionTableModel::ColumnIndex
ToByteVector	src/script/script.h	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToDescriptionString	src/rpc/util.cpp	/^std::string RPCArg::ToDescriptionString() const$/;"	f	class:RPCArg
ToDescriptionString	src/rpc/util.cpp	/^std::string RPCExamples::ToDescriptionString() const$/;"	f	class:RPCExamples
ToDescriptionString	src/rpc/util.cpp	/^std::string RPCResults::ToDescriptionString() const$/;"	f	class:RPCResults
ToHex	test/functional/feature_bip68_sequence.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex$/;"	i
ToHex	test/functional/feature_cltv.py	/^from test_framework.messages import CTransaction, msg_block, ToHex$/;"	i
ToHex	test/functional/feature_csv_activation.py	/^from test_framework.messages import ToHex, CTransaction$/;"	i
ToHex	test/functional/feature_dbcrash.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex$/;"	i
ToHex	test/functional/feature_fee_estimation.py	/^from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN$/;"	i
ToHex	test/functional/feature_pruning.py	/^from test_framework.messages import CBlock, ToHex$/;"	i
ToHex	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
ToHex	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
ToHex	test/functional/rpc_rawtransaction.py	/^from test_framework.messages import CTransaction, ToHex$/;"	i
ToHex	test/functional/rpc_txoutproof.py	/^from test_framework.messages import CMerkleBlock, FromHex, ToHex$/;"	i
ToHex	test/functional/test_framework/messages.py	/^def ToHex(obj):$/;"	f
ToHex	test/functional/wallet_groups.py	/^from test_framework.messages import CTransaction, FromHex, ToHex$/;"	i
ToHex	test/functional/wallet_resendwallettransactions.py	/^from test_framework.messages import ToHex$/;"	i
ToLower	src/util/strencodings.h	/^constexpr char ToLower(char c)$/;"	f
ToMemPool	src/test/txvalidationcache_tests.cpp	/^ToMemPool(const CMutableTransaction& tx)$/;"	f	file:
ToNarrowPath	src/leveldb/util/env_win.cc	/^void ToNarrowPath(const std::wstring& value, std::string& target) {$/;"	f	namespace:leveldb::Win32
ToString	src/arith_uint256.cpp	/^std::string base_uint<BITS>::ToString() const$/;"	f	class:base_uint
ToString	src/chain.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	src/chain.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	src/flatfile.cpp	/^std::string FlatFilePos::ToString() const$/;"	f	class:FlatFilePos
ToString	src/leveldb/include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	src/leveldb/table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	src/leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	src/leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	src/leveldb/util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	src/leveldb/util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
ToString	src/netaddress.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	src/netaddress.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	src/netaddress.cpp	/^std::string CSubNet::ToString() const$/;"	f	class:CSubNet
ToString	src/policy/feerate.cpp	/^std::string CFeeRate::ToString() const$/;"	f	class:CFeeRate
ToString	src/primitives/block.cpp	/^std::string CBlock::ToString() const$/;"	f	class:CBlock
ToString	src/primitives/transaction.cpp	/^std::string COutPoint::ToString() const$/;"	f	class:COutPoint
ToString	src/primitives/transaction.cpp	/^std::string CTransaction::ToString() const$/;"	f	class:CTransaction
ToString	src/primitives/transaction.cpp	/^std::string CTxIn::ToString() const$/;"	f	class:CTxIn
ToString	src/primitives/transaction.cpp	/^std::string CTxOut::ToString() const$/;"	f	class:CTxOut
ToString	src/protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	src/rpc/util.cpp	/^    std::string ToString() const$/;"	f	struct:Sections
ToString	src/rpc/util.cpp	/^std::string RPCArg::ToString(const bool oneline) const$/;"	f	class:RPCArg
ToString	src/rpc/util.cpp	/^std::string RPCHelpMan::ToString() const$/;"	f	class:RPCHelpMan
ToString	src/script/script.cpp	/^std::string CScriptWitness::ToString() const$/;"	f	class:CScriptWitness
ToString	src/sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	src/uint256.cpp	/^std::string base_blob<BITS>::ToString() const$/;"	f	class:base_blob
ToString	src/validation.cpp	/^std::string CBlockFileInfo::ToString() const$/;"	f	class:CBlockFileInfo
ToString	src/wallet/wallet.cpp	/^std::string COutput::ToString() const$/;"	f	class:COutput
ToStringExtra	src/script/descriptor.cpp	/^    virtual std::string ToStringExtra() const { return ""; }$/;"	f	class:__anon75::DescriptorImpl
ToStringHelper	src/script/descriptor.cpp	/^    bool ToStringHelper(const SigningProvider* arg, std::string& out, bool priv) const$/;"	f	class:__anon75::DescriptorImpl
ToStringIP	src/netaddress.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	src/netaddress.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringObj	src/rpc/util.cpp	/^std::string RPCArg::ToStringObj(const bool oneline) const$/;"	f	class:RPCArg
ToStringPort	src/netaddress.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
ToUpper	src/util/strencodings.h	/^constexpr char ToUpper(char c)$/;"	f
ToWidePath	src/leveldb/util/env_win.cc	/^void ToWidePath(const std::string& value, std::wstring& target) {$/;"	f	namespace:leveldb::Win32
Today	src/qt/transactionview.h	/^        Today,$/;"	e	enum:TransactionView::DateEnum
TooManySigops	test/functional/data/invalid_txs.py	/^class TooManySigops(BadTxTemplate):$/;"	c
ToolTipToRichTextFilter	src/qt/guiutil.cpp	/^ToolTipToRichTextFilter::ToolTipToRichTextFilter(int _size_threshold, QObject *parent) :$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
ToolTipToRichTextFilter	src/qt/guiutil.h	/^    class ToolTipToRichTextFilter : public QObject$/;"	c	namespace:GUIUtil
ToolWalletTest	test/functional/tool_wallet.py	/^class ToolWalletTest(BitcoinTestFramework):$/;"	c
TopUpKeyPool	src/wallet/wallet.cpp	/^bool CWallet::TopUpKeyPool(unsigned int kpSize)$/;"	f	class:CWallet
TorControlConnection	src/torcontrol.cpp	/^TorControlConnection::TorControlConnection(struct event_base *_base):$/;"	f	class:TorControlConnection
TorControlConnection	src/torcontrol.cpp	/^class TorControlConnection$/;"	c	file:
TorControlReply	src/torcontrol.cpp	/^    TorControlReply() { Clear(); }$/;"	f	class:TorControlReply
TorControlReply	src/torcontrol.cpp	/^class TorControlReply$/;"	c	file:
TorControlThread	src/torcontrol.cpp	/^static void TorControlThread()$/;"	f	file:
TorController	src/torcontrol.cpp	/^TorController::TorController(struct event_base* _base, const std::string& _target):$/;"	f	class:TorController
TorController	src/torcontrol.cpp	/^class TorController$/;"	c	file:
TotalCharge	src/leveldb/util/cache.cc	/^  size_t TotalCharge() const {$/;"	f	class:leveldb::__anon4::LRUCache
TotalCharge	src/leveldb/util/cache.cc	/^  virtual size_t TotalCharge() const {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
TotalFileSize	src/leveldb/db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalTableFiles	src/leveldb/db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TraceThread	src/util/system.h	/^template <typename Callable> void TraceThread(const char* name,  Callable func)$/;"	f
TrafficGraphWidget	src/qt/trafficgraphwidget.cpp	/^TrafficGraphWidget::TrafficGraphWidget(QWidget *parent) :$/;"	f	class:TrafficGraphWidget
TrafficGraphWidget	src/qt/trafficgraphwidget.h	/^class TrafficGraphWidget : public QWidget$/;"	c
TransactionAddedToMempool	src/interfaces/chain.h	/^        virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}$/;"	f	class:interfaces::Chain::Notifications
TransactionAddedToMempool	src/validationinterface.cpp	/^    boost::signals2::scoped_connection TransactionAddedToMempool;$/;"	m	struct:ValidationInterfaceConnections	file:
TransactionAddedToMempool	src/validationinterface.cpp	/^    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;$/;"	m	struct:MainSignalsInstance	file:
TransactionAddedToMempool	src/validationinterface.cpp	/^void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {$/;"	f	class:CMainSignals
TransactionAddedToMempool	src/validationinterface.h	/^    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}$/;"	f	class:CValidationInterface
TransactionAddedToMempool	src/wallet/wallet.cpp	/^void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {$/;"	f	class:CWallet
TransactionAddedToMempool	src/zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx)$/;"	f	class:CZMQNotificationInterface
TransactionCanBeAbandoned	src/wallet/wallet.cpp	/^bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const$/;"	f	class:CWallet
TransactionCanBeBumped	src/wallet/feebumper.cpp	/^bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)$/;"	f	namespace:feebumper
TransactionChangeType	src/wallet/wallet.cpp	/^OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend)$/;"	f	class:CWallet
TransactionCommitFailed	src/qt/walletmodel.h	/^        TransactionCommitFailed,$/;"	e	enum:WalletModel::StatusCode
TransactionCompressor	src/blockencodings.h	/^    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}$/;"	f	struct:TransactionCompressor
TransactionCompressor	src/blockencodings.h	/^struct TransactionCompressor {$/;"	s
TransactionCreationFailed	src/qt/walletmodel.h	/^        TransactionCreationFailed, \/\/ Error returned when wallet is still locked$/;"	e	enum:WalletModel::StatusCode
TransactionDesc	src/qt/transactiondesc.h	/^    TransactionDesc() {}$/;"	f	class:TransactionDesc
TransactionDesc	src/qt/transactiondesc.h	/^class TransactionDesc: public QObject$/;"	c
TransactionDescDialog	src/qt/transactiondescdialog.cpp	/^TransactionDescDialog::TransactionDescDialog(const QModelIndex &idx, QWidget *parent) :$/;"	f	class:TransactionDescDialog
TransactionDescDialog	src/qt/transactiondescdialog.h	/^class TransactionDescDialog : public QDialog$/;"	c
TransactionError	src/util/error.h	/^enum class TransactionError {$/;"	c
TransactionErrorString	src/util/error.cpp	/^std::string TransactionErrorString(const TransactionError err)$/;"	f
TransactionFilterProxy	src/qt/transactionfilterproxy.cpp	/^TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :$/;"	f	class:TransactionFilterProxy
TransactionFilterProxy	src/qt/transactionfilterproxy.h	/^class TransactionFilterProxy : public QSortFilterProxyModel$/;"	c
TransactionNotification	src/qt/transactiontablemodel.cpp	/^    TransactionNotification() {}$/;"	f	struct:TransactionNotification
TransactionNotification	src/qt/transactiontablemodel.cpp	/^    TransactionNotification(uint256 _hash, ChangeType _status, bool _showTransaction):$/;"	f	struct:TransactionNotification
TransactionNotification	src/qt/transactiontablemodel.cpp	/^struct TransactionNotification$/;"	s	file:
TransactionRecord	src/qt/transactionrecord.h	/^    TransactionRecord():$/;"	f	class:TransactionRecord
TransactionRecord	src/qt/transactionrecord.h	/^    TransactionRecord(uint256 _hash, qint64 _time):$/;"	f	class:TransactionRecord
TransactionRecord	src/qt/transactionrecord.h	/^    TransactionRecord(uint256 _hash, qint64 _time,$/;"	f	class:TransactionRecord
TransactionRecord	src/qt/transactionrecord.h	/^class TransactionRecord$/;"	c
TransactionRemovedFromMempool	src/interfaces/chain.h	/^        virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}$/;"	f	class:interfaces::Chain::Notifications
TransactionRemovedFromMempool	src/validationinterface.cpp	/^    boost::signals2::scoped_connection TransactionRemovedFromMempool;$/;"	m	struct:ValidationInterfaceConnections	file:
TransactionRemovedFromMempool	src/validationinterface.cpp	/^    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;$/;"	m	struct:MainSignalsInstance	file:
TransactionRemovedFromMempool	src/validationinterface.h	/^    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}$/;"	f	class:CValidationInterface
TransactionRemovedFromMempool	src/wallet/wallet.cpp	/^void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {$/;"	f	class:CWallet
TransactionStatus	src/qt/transactionrecord.h	/^    TransactionStatus():$/;"	f	class:TransactionStatus
TransactionStatus	src/qt/transactionrecord.h	/^class TransactionStatus$/;"	c
TransactionTableModel	src/qt/transactiontablemodel.cpp	/^TransactionTableModel::TransactionTableModel(const PlatformStyle *_platformStyle, WalletModel *parent):$/;"	f	class:TransactionTableModel
TransactionTableModel	src/qt/transactiontablemodel.h	/^class TransactionTableModel : public QAbstractTableModel$/;"	c
TransactionTablePriv	src/qt/transactiontablemodel.cpp	/^    explicit TransactionTablePriv(TransactionTableModel *_parent) :$/;"	f	class:TransactionTablePriv
TransactionTablePriv	src/qt/transactiontablemodel.cpp	/^class TransactionTablePriv$/;"	c	file:
TransactionView	src/qt/transactionview.cpp	/^TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :$/;"	f	class:TransactionView
TransactionView	src/qt/transactionview.h	/^class TransactionView : public QWidget$/;"	c
Transform	src/crypto/ripemd160.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon42::ripemd160
Transform	src/crypto/sha1.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon38::sha1
Transform	src/crypto/sha256.cpp	/^TransformType Transform = sha256::Transform;$/;"	m	namespace:__anon40	file:
Transform	src/crypto/sha256.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:__anon40::sha256
Transform	src/crypto/sha256_shani.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:sha256_shani
Transform	src/crypto/sha256_sse4.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:sha256_sse4
Transform	src/crypto/sha512.cpp	/^void Transform(uint64_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon39::sha512
TransformD64	src/crypto/sha256.cpp	/^TransformD64Type TransformD64 = sha256::TransformD64;$/;"	m	namespace:__anon40	file:
TransformD64	src/crypto/sha256.cpp	/^void TransformD64(unsigned char* out, const unsigned char* in)$/;"	f	namespace:__anon40::sha256
TransformD64Type	src/crypto/sha256.cpp	/^typedef void (*TransformD64Type)(unsigned char*, const unsigned char*);$/;"	t	namespace:__anon40	file:
TransformD64Wrapper	src/crypto/sha256.cpp	/^void TransformD64Wrapper(unsigned char* out, const unsigned char* in)$/;"	f	namespace:__anon40
TransformD64_2way	src/crypto/sha256.cpp	/^TransformD64Type TransformD64_2way = nullptr;$/;"	m	namespace:__anon40	file:
TransformD64_4way	src/crypto/sha256.cpp	/^TransformD64Type TransformD64_4way = nullptr;$/;"	m	namespace:__anon40	file:
TransformD64_8way	src/crypto/sha256.cpp	/^TransformD64Type TransformD64_8way = nullptr;$/;"	m	namespace:__anon40	file:
TransformType	src/crypto/sha256.cpp	/^typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);$/;"	t	namespace:__anon40	file:
Transform_2way	src/crypto/sha256_shani.cpp	/^void Transform_2way(unsigned char* out, const unsigned char* in)$/;"	f	namespace:sha256d64_shani
Transform_4way	src/crypto/sha256_sse41.cpp	/^void Transform_4way(unsigned char* out, const unsigned char* in)$/;"	f	namespace:sha256d64_sse41
Transform_8way	src/crypto/sha256_avx2.cpp	/^void Transform_8way(unsigned char* out, const unsigned char* in)$/;"	f	namespace:sha256d64_avx2
TraverseAndBuild	src/merkleblock.cpp	/^void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) {$/;"	f	class:CPartialMerkleTree
TraverseAndExtract	src/merkleblock.cpp	/^uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
Trig	src/bench/examples.cpp	/^static void Trig(benchmark::State& state)$/;"	f	file:
TrimSpace	src/leveldb/db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon19
TrimSpace	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon32
TrimSpace	src/leveldb/doc/bench/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon33
TrimString	src/util/system.cpp	/^static std::string TrimString(const std::string& str, const std::string& pattern)$/;"	f	file:
TrimToSize	src/txmempool.cpp	/^void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {$/;"	f	class:CTxMemPool
Truncate	src/leveldb/db/fault_injection_test.cc	/^Status Truncate(const std::string& filename, uint64_t length) {$/;"	f	namespace:leveldb::__anon20
TruncateFile	src/util/system.cpp	/^bool TruncateFile(FILE *file, unsigned int length) {$/;"	f
TryAcquire	src/sync.h	/^    bool TryAcquire()$/;"	f	class:CSemaphoreGrant
TryCreateDirectories	src/util/system.cpp	/^bool TryCreateDirectories(const fs::path& p)$/;"	f
TryEnter	src/sync.h	/^    bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:UniqueLock
TryLock	src/fs.cpp	/^bool FileLock::TryLock()$/;"	f	class:fsbridge::FileLock
TryReopen	src/leveldb/db/corruption_test.cc	/^  Status TryReopen() {$/;"	f	class:leveldb::CorruptionTest
TryReopen	src/leveldb/db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	src/leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon17::TwoLevelIterator
TwoLevelIterator	src/leveldb/table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon17	file:
TxConfirmStats	src/policy/fees.cpp	/^TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,$/;"	f	class:TxConfirmStats
TxConfirmStats	src/policy/fees.cpp	/^class TxConfirmStats$/;"	c	file:
TxData	src/chainparams.h	/^    const ChainTxData& TxData() const { return chainTxData; }$/;"	f	class:CChainParams
TxDownloadState	src/net_processing.cpp	/^    struct TxDownloadState {$/;"	s	struct:__anon89::CNodeState	file:
TxHashRole	src/qt/coincontroldialog.h	/^        TxHashRole = Qt::UserRole,$/;"	e	enum:CoinControlDialog::__anon72
TxHashRole	src/qt/transactiontablemodel.h	/^        TxHashRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxHexRole	src/qt/transactiontablemodel.h	/^        TxHexRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxInErrorToJSON	src/rpc/rawtransaction_util.cpp	/^static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)$/;"	f	file:
TxInUndoDeserializer	src/undo.h	/^    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}$/;"	f	class:TxInUndoDeserializer
TxInUndoDeserializer	src/undo.h	/^class TxInUndoDeserializer$/;"	c
TxInUndoSerializer	src/undo.h	/^    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}$/;"	f	class:TxInUndoSerializer
TxInUndoSerializer	src/undo.h	/^class TxInUndoSerializer$/;"	c
TxIndex	src/index/txindex.cpp	/^TxIndex::TxIndex(size_t n_cache_size, bool f_memory, bool f_wipe)$/;"	f	class:TxIndex
TxInputStream	src/script/bitcoinconsensus.cpp	/^    TxInputStream(int nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :$/;"	f	class:__anon81::TxInputStream
TxInputStream	src/script/bitcoinconsensus.cpp	/^class TxInputStream$/;"	c	namespace:__anon81	file:
TxItems	src/wallet/wallet.h	/^    typedef std::multimap<int64_t, CWalletTx*> TxItems;$/;"	t	class:final
TxLessThan	src/qt/transactiontablemodel.cpp	/^struct TxLessThan$/;"	s	file:
TxLinks	src/txmempool.h	/^    struct TxLinks {$/;"	s	class:CTxMemPool
TxMempoolInfo	src/txmempool.h	/^struct TxMempoolInfo$/;"	s
TxPlainTextRole	src/qt/transactiontablemodel.h	/^        TxPlainTextRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxRelayMayResultInDisconnect	src/net_processing.cpp	/^static bool TxRelayMayResultInDisconnect(const CValidationState& state)$/;"	f	file:
TxSpends	src/wallet/wallet.h	/^    typedef std::multimap<COutPoint, uint256> TxSpends;$/;"	t	class:final
TxStatsInfo	src/policy/fees.h	/^        TxStatsInfo() : blockHeight(0), bucketIndex(0) {}$/;"	f	struct:FeeEstimateHorizon::CBlockPolicyEstimator::TxStatsInfo
TxStatsInfo	src/policy/fees.h	/^    struct TxStatsInfo$/;"	s	class:FeeEstimateHorizon::CBlockPolicyEstimator
TxToJSON	src/rpc/rawtransaction.cpp	/^static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)$/;"	f	file:
TxToUniv	src/core_write.cpp	/^void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags)$/;"	f
TxViewDelegate	src/qt/overviewpage.cpp	/^    explicit TxViewDelegate(const PlatformStyle *_platformStyle, QObject *parent=nullptr):$/;"	f	class:TxViewDelegate
TxViewDelegate	src/qt/overviewpage.cpp	/^class TxViewDelegate : public QAbstractItemDelegate$/;"	c	file:
TxnAbort	src/wallet/db.h	/^    bool TxnAbort()$/;"	f	class:BerkeleyBatch
TxnAbort	src/wallet/walletdb.cpp	/^bool WalletBatch::TxnAbort()$/;"	f	class:WalletBatch
TxnBegin	src/wallet/db.h	/^    DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)$/;"	f	class:BerkeleyEnvironment
TxnBegin	src/wallet/db.h	/^    bool TxnBegin()$/;"	f	class:BerkeleyBatch
TxnBegin	src/wallet/walletdb.cpp	/^bool WalletBatch::TxnBegin()$/;"	f	class:WalletBatch
TxnCommit	src/wallet/db.h	/^    bool TxnCommit()$/;"	f	class:BerkeleyBatch
TxnCommit	src/wallet/walletdb.cpp	/^bool WalletBatch::TxnCommit()$/;"	f	class:WalletBatch
TxnMallTest	test/functional/wallet_txn_clone.py	/^class TxnMallTest(BitcoinTestFramework):$/;"	c
TxnMallTest	test/functional/wallet_txn_doublespend.py	/^class TxnMallTest(BitcoinTestFramework):$/;"	c
Type	src/qt/addresstablemodel.cpp	/^    enum Type {$/;"	g	struct:AddressTableEntry	file:
Type	src/qt/transactionrecord.h	/^    enum Type$/;"	g	class:TransactionRecord
Type	src/qt/transactiontablemodel.h	/^        Type = 3,$/;"	e	enum:TransactionTableModel::ColumnIndex
Type	src/rpc/util.h	/^    enum class Type {$/;"	c	struct:RPCArg
TypeRole	src/qt/addresstablemodel.h	/^        TypeRole = Qt::UserRole \/**< Type of address (#Send or #Receive) *\/$/;"	e	enum:AddressTableModel::RoleIndex
TypeRole	src/qt/transactiontablemodel.h	/^        TypeRole = Qt::UserRole,$/;"	e	enum:TransactionTableModel::RoleIndex
UDP_ASSOCIATE	src/netbase.cpp	/^    UDP_ASSOCIATE = 0x03$/;"	e	enum:uint8_t	file:
UIC	Makefile	/^UIC = $/;"	m
UIC	doc/man/Makefile	/^UIC = $/;"	m
UIC	src/Makefile	/^UIC = $/;"	m
UISignals	src/ui_interface.cpp	/^struct UISignals {$/;"	s	file:
UNDEF	src/rest.cpp	/^    UNDEF,$/;"	m	class:RetFormat	file:
UNDEFINED	src/protocol.h	/^    UNDEFINED = 0,$/;"	e	enum:GetDataMsg
UNDOFILE_CHUNK_SIZE	src/validation.h	/^static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; \/\/ 1 MiB$/;"	v
UNHARDENED	src/script/descriptor.cpp	/^    UNHARDENED,$/;"	m	class:__anon75::DeriveType	file:
UNIVALUE_CFLAGS	Makefile	/^UNIVALUE_CFLAGS = -I$(srcdir)\/univalue\/include$/;"	m
UNIVALUE_CFLAGS	doc/man/Makefile	/^UNIVALUE_CFLAGS = -I$(srcdir)\/univalue\/include$/;"	m
UNIVALUE_CFLAGS	src/Makefile	/^UNIVALUE_CFLAGS = -I$(srcdir)\/univalue\/include$/;"	m
UNIVALUE_LIBS	Makefile	/^UNIVALUE_LIBS = univalue\/libunivalue.la$/;"	m
UNIVALUE_LIBS	doc/man/Makefile	/^UNIVALUE_LIBS = univalue\/libunivalue.la$/;"	m
UNIVALUE_LIBS	src/Makefile	/^UNIVALUE_LIBS = univalue\/libunivalue.la$/;"	m
UNIVALUE_UTFFILTER_H	src/univalue/lib/univalue_utffilter.h	/^#define UNIVALUE_UTFFILTER_H$/;"	d
UNKNOWN	src/httpserver.h	/^        UNKNOWN,$/;"	e	enum:HTTPRequest::RequestMethod
UNKNOWN	src/policy/rbf.h	/^    UNKNOWN,$/;"	m	class:RBFTransactionState
UNKNOWN	src/txmempool.h	/^    UNKNOWN = 0, \/\/!< Manually removed or unknown reason$/;"	m	class:MemPoolRemovalReason
UNLOCK_FUNCTION	src/leveldb/port/thread_annotations.h	/^#define UNLOCK_FUNCTION(/;"	d
UNLOCK_FUNCTION	src/leveldb/util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
UNLOCK_FUNCTION	src/sync.h	/^    void unlock() UNLOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
UNLOCK_FUNCTION	src/sync.h	/^    ~UniqueLock() UNLOCK_FUNCTION()$/;"	f	class:UniqueLock
UNLOCK_FUNCTION	src/threadsafety.h	/^    ~LockAnnotation() UNLOCK_FUNCTION() {}$/;"	f	struct:LockAnnotation
UNLOCK_FUNCTION	src/threadsafety.h	/^#define UNLOCK_FUNCTION(/;"	d
UNSET	src/policy/fees.h	/^    UNSET,        \/\/!< Use default settings based on other criteria$/;"	m	class:FeeEstimateHorizon::FeeEstimateMode
UNSOLVABLE	src/test/descriptor_tests.cpp	/^constexpr int UNSOLVABLE = 4; \/\/ This descriptor is not expected to be solvable$/;"	m	namespace:__anon56	file:
UNUSED	src/qt/bitcoinstrings.cpp	/^#define UNUSED /;"	d	file:
UNUSED	src/qt/bitcoinstrings.cpp	/^#define UNUSED$/;"	d	file:
UPDATEABLE_LINE_COMPILED	contrib/devtools/copyright_header.py	/^UPDATEABLE_LINE_COMPILED = re.compile(' '.join([COPYRIGHT, YEAR_RANGE, HOLDER]))$/;"	v
UPDATER	src/psbt.h	/^    UPDATER,$/;"	m	class:PSBTRole
UPPER_BOUND	src/util/strencodings.cpp	/^static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;$/;"	v	file:
URI	src/rpc/server.h	/^    std::string URI;$/;"	m	class:JSONRPCRequest
URITests	src/qt/test/uritests.h	/^class URITests : public QObject$/;"	c
USER_ABORT	src/wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	e	enum:final::ScanResult::__anon118
USER_AGENT	test/functional/test_framework/authproxy.py	/^USER_AGENT = "AuthServiceProxy\/0.1"$/;"	v
USER_PASS	src/netbase.cpp	/^    USER_PASS = 0x02,     \/\/!< Username\/password$/;"	e	enum:uint8_t	file:
USE_ASM	src/config/bitcoin-config.h	/^#define USE_ASM /;"	d
USE_ASM_X86_64	build_msvc/libsecp256k1_config.h	/^#undef USE_ASM_X86_64$/;"	d
USE_ASM_X86_64	src/secp256k1/src/basic-config.h	/^#undef USE_ASM_X86_64$/;"	d
USE_ASM_X86_64	src/secp256k1/src/libsecp256k1-config.h	/^#define USE_ASM_X86_64 /;"	d
USE_BASIC_CONFIG	src/secp256k1/src/gen_context.c	/^#define USE_BASIC_CONFIG /;"	d	file:
USE_ECMULT_STATIC_PRECOMPUTATION	src/secp256k1/src/libsecp256k1-config.h	/^#define USE_ECMULT_STATIC_PRECOMPUTATION /;"	d
USE_ECMULT_STATIC_PRECOMPUTATION	src/secp256k1/src/tests_exhaustive.c	/^#undef USE_ECMULT_STATIC_PRECOMPUTATION$/;"	d	file:
USE_ENDOMORPHISM	build_msvc/libsecp256k1_config.h	/^#undef USE_ENDOMORPHISM$/;"	d
USE_ENDOMORPHISM	src/secp256k1/src/basic-config.h	/^#undef USE_ENDOMORPHISM$/;"	d
USE_FIELD_10X26	build_msvc/libsecp256k1_config.h	/^#define USE_FIELD_10X26 /;"	d
USE_FIELD_10X26	build_msvc/libsecp256k1_config.h	/^#undef USE_FIELD_10X26$/;"	d
USE_FIELD_10X26	src/secp256k1/src/basic-config.h	/^#define USE_FIELD_10X26 /;"	d
USE_FIELD_10X26	src/secp256k1/src/basic-config.h	/^#undef USE_FIELD_10X26$/;"	d
USE_FIELD_5X52	build_msvc/libsecp256k1_config.h	/^#undef USE_FIELD_5X52$/;"	d
USE_FIELD_5X52	src/secp256k1/src/basic-config.h	/^#undef USE_FIELD_5X52$/;"	d
USE_FIELD_5X52	src/secp256k1/src/libsecp256k1-config.h	/^#define USE_FIELD_5X52 /;"	d
USE_FIELD_INV_BUILTIN	build_msvc/libsecp256k1_config.h	/^#define USE_FIELD_INV_BUILTIN /;"	d
USE_FIELD_INV_BUILTIN	build_msvc/libsecp256k1_config.h	/^#undef USE_FIELD_INV_BUILTIN$/;"	d
USE_FIELD_INV_BUILTIN	src/secp256k1/src/basic-config.h	/^#define USE_FIELD_INV_BUILTIN /;"	d
USE_FIELD_INV_BUILTIN	src/secp256k1/src/basic-config.h	/^#undef USE_FIELD_INV_BUILTIN$/;"	d
USE_FIELD_INV_BUILTIN	src/secp256k1/src/libsecp256k1-config.h	/^#define USE_FIELD_INV_BUILTIN /;"	d
USE_FIELD_INV_NUM	build_msvc/libsecp256k1_config.h	/^#undef USE_FIELD_INV_NUM$/;"	d
USE_FIELD_INV_NUM	src/secp256k1/src/basic-config.h	/^#undef USE_FIELD_INV_NUM$/;"	d
USE_NUM_GMP	build_msvc/libsecp256k1_config.h	/^#undef USE_NUM_GMP$/;"	d
USE_NUM_GMP	src/secp256k1/src/basic-config.h	/^#undef USE_NUM_GMP$/;"	d
USE_NUM_NONE	build_msvc/libsecp256k1_config.h	/^#define USE_NUM_NONE /;"	d
USE_NUM_NONE	build_msvc/libsecp256k1_config.h	/^#undef USE_NUM_NONE$/;"	d
USE_NUM_NONE	src/secp256k1/src/basic-config.h	/^#define USE_NUM_NONE /;"	d
USE_NUM_NONE	src/secp256k1/src/basic-config.h	/^#undef USE_NUM_NONE$/;"	d
USE_NUM_NONE	src/secp256k1/src/libsecp256k1-config.h	/^#define USE_NUM_NONE /;"	d
USE_POLL	src/compat.h	/^#define USE_POLL$/;"	d
USE_QRCODE	Makefile	/^USE_QRCODE = $/;"	m
USE_QRCODE	doc/man/Makefile	/^USE_QRCODE = $/;"	m
USE_QRCODE	src/Makefile	/^USE_QRCODE = $/;"	m
USE_SCALAR_4X64	build_msvc/libsecp256k1_config.h	/^#undef USE_SCALAR_4X64$/;"	d
USE_SCALAR_4X64	src/secp256k1/src/basic-config.h	/^#undef USE_SCALAR_4X64$/;"	d
USE_SCALAR_4X64	src/secp256k1/src/libsecp256k1-config.h	/^#define USE_SCALAR_4X64 /;"	d
USE_SCALAR_8X32	build_msvc/libsecp256k1_config.h	/^#define USE_SCALAR_8X32 /;"	d
USE_SCALAR_8X32	build_msvc/libsecp256k1_config.h	/^#undef USE_SCALAR_8X32$/;"	d
USE_SCALAR_8X32	src/secp256k1/src/basic-config.h	/^#define USE_SCALAR_8X32 /;"	d
USE_SCALAR_8X32	src/secp256k1/src/basic-config.h	/^#undef USE_SCALAR_8X32$/;"	d
USE_SCALAR_INV_BUILTIN	build_msvc/libsecp256k1_config.h	/^#define USE_SCALAR_INV_BUILTIN /;"	d
USE_SCALAR_INV_BUILTIN	build_msvc/libsecp256k1_config.h	/^#undef USE_SCALAR_INV_BUILTIN$/;"	d
USE_SCALAR_INV_BUILTIN	src/secp256k1/src/basic-config.h	/^#define USE_SCALAR_INV_BUILTIN /;"	d
USE_SCALAR_INV_BUILTIN	src/secp256k1/src/basic-config.h	/^#undef USE_SCALAR_INV_BUILTIN$/;"	d
USE_SCALAR_INV_BUILTIN	src/secp256k1/src/libsecp256k1-config.h	/^#define USE_SCALAR_INV_BUILTIN /;"	d
USE_SCALAR_INV_NUM	build_msvc/libsecp256k1_config.h	/^#undef USE_SCALAR_INV_NUM$/;"	d
USE_SCALAR_INV_NUM	src/secp256k1/src/basic-config.h	/^#undef USE_SCALAR_INV_NUM$/;"	d
USE_UPNP	Makefile	/^USE_UPNP = $/;"	m
USE_UPNP	doc/man/Makefile	/^USE_UPNP = $/;"	m
USE_UPNP	src/Makefile	/^USE_UPNP = $/;"	m
UTILS	src/leveldb/Makefile	/^UTILS = \\$/;"	m
UTXO	test/functional/p2p_segwit.py	/^class UTXO():$/;"	c
UacommentTest	test/functional/feature_uacomment.py	/^class UacommentTest(BitcoinTestFramework):$/;"	c
Ui	src/qt/addressbookpage.h	/^namespace Ui {$/;"	n
Ui	src/qt/askpassphrasedialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/coincontroldialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/editaddressdialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/intro.h	/^namespace Ui {$/;"	n
Ui	src/qt/modaloverlay.h	/^namespace Ui {$/;"	n
Ui	src/qt/openuridialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/optionsdialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/overviewpage.h	/^namespace Ui {$/;"	n
Ui	src/qt/receivecoinsdialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/receiverequestdialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/rpcconsole.h	/^namespace Ui {$/;"	n
Ui	src/qt/sendcoinsdialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/sendcoinsentry.h	/^namespace Ui {$/;"	n
Ui	src/qt/signverifymessagedialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/transactiondescdialog.h	/^namespace Ui {$/;"	n
Ui	src/qt/utilitydialog.h	/^namespace Ui {$/;"	n
UintToArith256	src/arith_uint256.cpp	/^arith_uint256 UintToArith256(const uint256 &a)$/;"	f
UnSelect	src/wallet/coincontrol.h	/^    void UnSelect(const COutPoint& output)$/;"	f	class:CCoinControl
UnSelectAll	src/wallet/coincontrol.h	/^    void UnSelectAll()$/;"	f	class:CCoinControl
Unban	src/banman.cpp	/^bool BanMan::Unban(const CNetAddr& net_addr)$/;"	f	class:BanMan
Unban	src/banman.cpp	/^bool BanMan::Unban(const CSubNet& sub_net)$/;"	f	class:BanMan
Uncache	src/coins.cpp	/^void CCoinsViewCache::Uncache(const COutPoint& hash)$/;"	f	class:CCoinsViewCache
Unconfirmed	src/qt/transactionrecord.h	/^        Unconfirmed,        \/**< Not yet mined into a block **\/$/;"	e	enum:TransactionStatus::Status
UndoFileSeq	src/validation.cpp	/^static FlatFileSeq UndoFileSeq()$/;"	f	file:
UndoReadFromDisk	src/validation.cpp	/^bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)$/;"	f
UndoWriteToDisk	src/validation.cpp	/^static bool UndoWriteToDisk(const CBlockUndo& blockundo, FlatFilePos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	file:
Unencrypted	src/qt/walletmodel.h	/^        Unencrypted,  \/\/ !wallet->IsCrypted()$/;"	e	enum:WalletModel::EncryptionStatus
UniValue	src/univalue/include/univalue.h	/^    UniValue() { typ = VNULL; }$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(UniValue::VType initialType, const std::string& initialStr = "") {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(bool val_) {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(const char *val_) {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(const std::string& val_) {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(double val_) {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(int val_) {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(int64_t val_) {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^    UniValue(uint64_t val_) {$/;"	f	class:UniValue
UniValue	src/univalue/include/univalue.h	/^class UniValue {$/;"	c
UniValueType	src/rpc/util.h	/^    UniValueType() : typeAny(true) {}$/;"	f	struct:UniValueType
UniValueType	src/rpc/util.h	/^    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}$/;"	f	struct:UniValueType
UniValueType	src/rpc/util.h	/^struct UniValueType {$/;"	s
Uniform	src/leveldb/util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
UniqueCheck	src/test/checkqueue_tests.cpp	/^    UniqueCheck() : check_id(0){};$/;"	f	struct:UniqueCheck
UniqueCheck	src/test/checkqueue_tests.cpp	/^    UniqueCheck(size_t check_id_in) : check_id(check_id_in){};$/;"	f	struct:UniqueCheck
UniqueCheck	src/test/checkqueue_tests.cpp	/^struct UniqueCheck {$/;"	s	file:
UniqueLock	src/sync.h	/^class SCOPED_LOCKABLE UniqueLock : public Base$/;"	c
Unique_Queue	src/test/checkqueue_tests.cpp	/^typedef CCheckQueue<UniqueCheck> Unique_Queue;$/;"	t	file:
Unit	src/qt/bitcoinunits.h	/^    enum Unit$/;"	g	class:BitcoinUnits
UnitDisplayStatusBarControl	src/qt/bitcoingui.cpp	/^UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :$/;"	f	class:UnitDisplayStatusBarControl
UnitDisplayStatusBarControl	src/qt/bitcoingui.h	/^class UnitDisplayStatusBarControl : public QLabel$/;"	c
UnitRole	src/qt/bitcoinunits.h	/^        UnitRole = Qt::UserRole$/;"	e	enum:BitcoinUnits::RoleIndex
UnlinkPrunedFiles	src/validation.cpp	/^void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)$/;"	f
UnloadBlockIndex	src/validation.cpp	/^void CChainState::UnloadBlockIndex() {$/;"	f	class:CChainState
UnloadBlockIndex	src/validation.cpp	/^void UnloadBlockIndex()$/;"	f
UnloadWallet	src/wallet/wallet.cpp	/^void UnloadWallet(std::shared_ptr<CWallet>&& wallet)$/;"	f
UnloadWallets	src/wallet/load.cpp	/^void UnloadWallets()$/;"	f
Unlock	src/leveldb/port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Unlock	src/leveldb/port/port_win.cc	/^void Mutex::Unlock() {$/;"	f	class:leveldb::port::Mutex
Unlock	src/qt/askpassphrasedialog.h	/^        Unlock,     \/**< Ask passphrase and unlock *\/$/;"	e	enum:AskPassphraseDialog::Mode
Unlock	src/wallet/crypter.cpp	/^bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)$/;"	f	class:CCryptoKeyStore
Unlock	src/wallet/wallet.cpp	/^bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)$/;"	f	class:CWallet
UnlockAllCoins	src/wallet/wallet.cpp	/^void CWallet::UnlockAllCoins()$/;"	f	class:CWallet
UnlockCoin	src/wallet/wallet.cpp	/^void CWallet::UnlockCoin(const COutPoint& output)$/;"	f	class:CWallet
UnlockCommand	src/test/util_tests.cpp	/^static constexpr char UnlockCommand = 'U';$/;"	v	file:
UnlockContext	src/qt/walletmodel.cpp	/^WalletModel::UnlockContext::UnlockContext(WalletModel *_wallet, bool _valid, bool _relock):$/;"	f	class:WalletModel::UnlockContext
UnlockContext	src/qt/walletmodel.h	/^        UnlockContext(UnlockContext&& obj) { CopyFrom(std::move(obj)); }$/;"	f	class:WalletModel::UnlockContext
UnlockContext	src/qt/walletmodel.h	/^    class UnlockContext$/;"	c	class:WalletModel
UnlockDirectory	src/util/system.cpp	/^void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name)$/;"	f
UnlockFile	src/leveldb/helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
UnlockFile	src/leveldb/include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	src/leveldb/util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon8::PosixEnv
UnlockFile	src/leveldb/util/env_win.cc	/^Status Win32Env::UnlockFile( FileLock* lock )$/;"	f	class:leveldb::Win32::Win32Env
Unlocked	src/qt/walletmodel.h	/^        Unlocked      \/\/ wallet->IsCrypted() && !wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
Unmask	src/leveldb/util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	src/leveldb/db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	src/leveldb/db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	src/leveldb/helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon35::FileState
Unref	src/leveldb/util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
UnrefEntry	src/leveldb/db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
UnregisterAllValidationInterfaces	src/validationinterface.cpp	/^void UnregisterAllValidationInterfaces() {$/;"	f
UnregisterBackgroundSignalScheduler	src/validationinterface.cpp	/^void CMainSignals::UnregisterBackgroundSignalScheduler() {$/;"	f	class:CMainSignals
UnregisterHTTPHandler	src/httpserver.cpp	/^void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)$/;"	f
UnregisterValidationInterface	src/validationinterface.cpp	/^void UnregisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
UnregisterWithMempoolSignals	src/validationinterface.cpp	/^void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {$/;"	f	class:CMainSignals
Unserialize	src/addrman.h	/^    void Unserialize(Stream& s)$/;"	f	class:CAddrMan
Unserialize	src/blockfilter.h	/^    void Unserialize(Stream& s) {$/;"	f	class:BlockFilter
Unserialize	src/coins.h	/^    void Unserialize(Stream &s) {$/;"	f	class:Coin
Unserialize	src/compressor.h	/^    void Unserialize(Stream &s) {$/;"	f	class:CScriptCompressor
Unserialize	src/index/blockfilterindex.cpp	/^    void Unserialize(Stream& s)$/;"	f	struct:__anon120::DBHeightKey
Unserialize	src/key.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtKey
Unserialize	src/primitives/transaction.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:CMutableTransaction
Unserialize	src/psbt.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:PSBTInput
Unserialize	src/psbt.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:PSBTOutput
Unserialize	src/psbt.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:PartiallySignedTransaction
Unserialize	src/pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	class:CPubKey
Unserialize	src/pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtPubKey
Unserialize	src/serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CCompactSize
Unserialize	src/serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CVarInt
Unserialize	src/serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:BigEndian
Unserialize	src/serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:LimitedString
Unserialize	src/serialize.h	/^inline void Unserialize(Stream& is, T&& a)$/;"	f
Unserialize	src/serialize.h	/^inline void Unserialize(Stream& is, prevector<N, T>& v)$/;"	f
Unserialize	src/serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v)$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(CharCast(span.data()), span.size()); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } \/\/ TODO Get rid of bare char$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }$/;"	f
Unserialize	src/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }$/;"	f
Unserialize	src/serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str)$/;"	f
Unserialize	src/serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m)$/;"	f
Unserialize	src/serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item)$/;"	f
Unserialize	src/serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m)$/;"	f
Unserialize	src/serialize.h	/^void Unserialize(Stream& is, std::shared_ptr<const T>& p)$/;"	f
Unserialize	src/serialize.h	/^void Unserialize(Stream& is, std::unique_ptr<const T>& p)$/;"	f
Unserialize	src/txdb.cpp	/^    void Unserialize(Stream &s) {$/;"	f	class:__anon122::CCoins
Unserialize	src/txdb.cpp	/^    void Unserialize(Stream& s) {$/;"	f	struct:__anon121::CoinEntry
Unserialize	src/uint256.h	/^    void Unserialize(Stream& s)$/;"	f	class:base_blob
Unserialize	src/undo.h	/^    void Unserialize(Stream &s) {$/;"	f	class:TxInUndoDeserializer
Unserialize	src/undo.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CTxUndo
Unserialize	src/wallet/wallet.h	/^    void Unserialize(Stream& s)$/;"	f	class:CWalletTx
UnserializeFromVector	src/script/sign.h	/^void UnserializeFromVector(Stream& s, X&... args)$/;"	f
UnserializeMany	src/serialize.h	/^inline void UnserializeMany(Stream& s)$/;"	f
UnserializeMany	src/serialize.h	/^inline void UnserializeMany(Stream& s, Arg&& arg, Args&&... args)$/;"	f
UnserializeTransaction	src/primitives/transaction.h	/^inline void UnserializeTransaction(TxType& tx, Stream& s) {$/;"	f
Unserialize_impl	src/serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)$/;"	f
Unserialize_impl	src/serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)$/;"	f
Unserialize_impl	src/serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)$/;"	f
Unserialize_impl	src/serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)$/;"	f
UnsetWalletFlag	src/wallet/wallet.cpp	/^void CWallet::UnsetWalletFlag(uint64_t flag)$/;"	f	class:CWallet
Unshuffle	src/crypto/sha256_shani.cpp	/^void inline __attribute__((always_inline)) Unshuffle(__m128i& s0, __m128i& s1)$/;"	f	namespace:__anon43
UntrackFile	src/leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::UntrackFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
Update	src/leveldb/table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateActivationParametersFromArgs	src/chainparams.cpp	/^void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)$/;"	f	class:CRegTestParams
UpdateAncestorState	src/txmempool.cpp	/^void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)$/;"	f	class:CTxMemPoolEntry
UpdateAncestorsOf	src/txmempool.cpp	/^void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateChild	src/txmempool.cpp	/^void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)$/;"	f	class:CTxMemPool
UpdateChildrenForRemoval	src/txmempool.cpp	/^void CTxMemPool::UpdateChildrenForRemoval(txiter it)$/;"	f	class:CTxMemPool
UpdateCoins	src/validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txundo, int nHeight)$/;"	f
UpdateCoins	src/validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)$/;"	f
UpdateDescendantState	src/txmempool.cpp	/^void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)$/;"	f	class:CTxMemPoolEntry
UpdateEmptyFull	src/bloom.cpp	/^void CBloomFilter::UpdateEmptyFull()$/;"	f	class:CBloomFilter
UpdateEntryForAncestors	src/txmempool.cpp	/^void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateFeeDelta	src/txmempool.cpp	/^void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)$/;"	f	class:CTxMemPoolEntry
UpdateForDescendants	src/txmempool.cpp	/^void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)$/;"	f	class:CTxMemPool
UpdateForRemoveFromMempool	src/txmempool.cpp	/^void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants)$/;"	f	class:CTxMemPool
UpdateHTTPServerLogging	src/httpserver.cpp	/^bool UpdateHTTPServerLogging(bool enable) {$/;"	f
UpdateHeaderSyncLabel	src/qt/modaloverlay.cpp	/^void ModalOverlay::UpdateHeaderSyncLabel() {$/;"	f	class:ModalOverlay
UpdateInput	src/script/sign.cpp	/^void UpdateInput(CTxIn& input, const SignatureData& data)$/;"	f
UpdateLastBlockAnnounceTime	src/net_processing.cpp	/^void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)$/;"	f
UpdateLockPoints	src/txmempool.cpp	/^void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)$/;"	f	class:CTxMemPoolEntry
UpdateMovingAverages	src/policy/fees.cpp	/^void TxConfirmStats::UpdateMovingAverages()$/;"	f	class:TxConfirmStats
UpdatePackagesForAdded	src/miner.cpp	/^int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,$/;"	f	class:BlockAssembler
UpdateParent	src/txmempool.cpp	/^void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)$/;"	f	class:CTxMemPool
UpdateStats	src/leveldb/db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
UpdateTime	src/miner.cpp	/^int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f
UpdateTimeFirstKey	src/wallet/wallet.cpp	/^void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)$/;"	f	class:CWallet
UpdateTimer	src/bench/bench.cpp	/^bool benchmark::State::UpdateTimer(const benchmark::time_point current_time)$/;"	f	class:benchmark::State
UpdateTip	src/validation.cpp	/^void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainParams) {$/;"	f	file:
UpdateTransactionsFromBlock	src/txmempool.cpp	/^void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)$/;"	f	class:CTxMemPool
UpdateUncommittedBlockStructures	src/validation.cpp	/^void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
UpdateVersionBitsParameters	src/chainparams.cpp	/^    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)$/;"	f	class:CRegTestParams
UpdatedBlockTip	src/interfaces/chain.h	/^        virtual void UpdatedBlockTip() {}$/;"	f	class:interfaces::Chain::Notifications
UpdatedBlockTip	src/net_processing.cpp	/^void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {$/;"	f	class:PeerLogicValidation
UpdatedBlockTip	src/validationinterface.cpp	/^    boost::signals2::scoped_connection UpdatedBlockTip;$/;"	m	struct:ValidationInterfaceConnections	file:
UpdatedBlockTip	src/validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;$/;"	m	struct:MainSignalsInstance	file:
UpdatedBlockTip	src/validationinterface.cpp	/^void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {$/;"	f	class:CMainSignals
UpdatedBlockTip	src/validationinterface.h	/^    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}$/;"	f	class:CValidationInterface
UpdatedBlockTip	src/wallet/wallet.cpp	/^void CWallet::UpdatedBlockTip()$/;"	f	class:CWallet
UpdatedBlockTip	src/zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)$/;"	f	class:CZMQNotificationInterface
Upgrade	src/txdb.cpp	/^bool CCoinsViewDB::Upgrade() {$/;"	f	class:CCoinsViewDB
UpgradeKeyMetadata	src/wallet/wallet.cpp	/^void CWallet::UpgradeKeyMetadata()$/;"	f	class:CWallet
UptimeTest	test/functional/rpc_uptime.py	/^class UptimeTest(BitcoinTestFramework):$/;"	c
Usage	src/leveldb/db/leveldbutil.cc	/^static void Usage() {$/;"	f	file:
UserNotificationCenter	src/qt/notificator.h	/^        UserNotificationCenter      \/**< Use the 10.8+ User Notification Center (Mac only) *\/$/;"	e	enum:Notificator::Mode
UtilBuildAddress	src/test/net_tests.cpp	/^CNetAddr UtilBuildAddress(unsigned char p1, unsigned char p2, unsigned char p3, unsigned char p4)$/;"	f
UtxoData	src/test/coins_tests.cpp	/^typedef std::map<COutPoint, std::tuple<CTransaction,CTxUndo,Coin>> UtxoData;$/;"	t	file:
VALUE1	src/test/coins_tests.cpp	/^const static CAmount VALUE1 = 100;$/;"	v	file:
VALUE2	src/test/coins_tests.cpp	/^const static CAmount VALUE2 = 200;$/;"	v	file:
VALUE3	src/test/coins_tests.cpp	/^const static CAmount VALUE3 = 300;$/;"	v	file:
VAL_EXPECT_ERROR	src/leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
VAL_EXPECT_NO_ERROR	src/leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
VARINT	src/serialize.h	/^#define VARINT(/;"	d
VARR	src/univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VBDeploymentInfo	src/versionbitsinfo.h	/^struct VBDeploymentInfo {$/;"	s
VBOOL	src/univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VB_PATTERN	test/functional/feature_versionbits_warning.py	/^VB_PATTERN = re.compile("Warning: unknown new rules activated.*versionbit")$/;"	v
VB_PERIOD	test/functional/feature_versionbits_warning.py	/^VB_PERIOD = 144           # versionbits period length for regtest$/;"	v
VB_PERIOD	test/functional/p2p_segwit.py	/^VB_PERIOD = 144$/;"	v
VB_THRESHOLD	test/functional/feature_versionbits_warning.py	/^VB_THRESHOLD = 108        # versionbits activation threshold for regtest$/;"	v
VB_TOP_BITS	test/functional/feature_versionbits_warning.py	/^VB_TOP_BITS = 0x20000000$/;"	v
VB_TOP_BITS	test/functional/p2p_segwit.py	/^VB_TOP_BITS = 0x20000000$/;"	v
VB_UNKNOWN_BIT	test/functional/feature_versionbits_warning.py	/^VB_UNKNOWN_BIT = 27       # Choose a bit unassigned to any deployment$/;"	v
VB_UNKNOWN_VERSION	test/functional/feature_versionbits_warning.py	/^VB_UNKNOWN_VERSION = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)$/;"	v
VB_WITNESS_BIT	test/functional/p2p_segwit.py	/^VB_WITNESS_BIT = 1$/;"	v
VERACK	src/protocol.cpp	/^const char *VERACK="verack";$/;"	m	namespace:NetMsgType	file:
VERIFY_BITS	src/secp256k1/src/field_10x26_impl.h	/^#define VERIFY_BITS(/;"	d
VERIFY_BITS	src/secp256k1/src/field_5x52_int128_impl.h	/^#define VERIFY_BITS(/;"	d
VERIFY_CHECK	src/secp256k1/src/util.h	/^#define VERIFY_CHECK /;"	d
VERIFY_CHECK	src/secp256k1/src/util.h	/^#define VERIFY_CHECK(/;"	d
VERIFY_OK	src/wallet/db.h	/^    enum class VerifyResult { VERIFY_OK,$/;"	m	class:BerkeleyEnvironment::VerifyResult
VERIFY_SETUP	src/secp256k1/src/util.h	/^#define VERIFY_SETUP(/;"	d
VERSION	Makefile	/^VERSION = 0.18.99$/;"	m
VERSION	doc/man/Makefile	/^VERSION = 0.18.99$/;"	m
VERSION	src/Makefile	/^VERSION = 0.18.99$/;"	m
VERSION	src/protocol.cpp	/^const char *VERSION="version";$/;"	m	namespace:NetMsgType	file:
VERSION	src/secp256k1/Makefile	/^VERSION = 0.1$/;"	m
VERSION	src/secp256k1/src/libsecp256k1-config.h	/^#define VERSION /;"	d
VERSION	src/univalue/Makefile	/^VERSION = 1.0.3$/;"	m
VERSION	src/univalue/univalue-config.h	/^#define VERSION /;"	d
VERSIONBITS_LAST_OLD_BLOCK_VERSION	src/versionbits.h	/^static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;$/;"	v
VERSIONBITS_NUM_BITS	src/versionbits.h	/^static const int32_t VERSIONBITS_NUM_BITS = 29;$/;"	v
VERSIONBITS_TOP_BITS	src/versionbits.h	/^static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;$/;"	v
VERSIONBITS_TOP_MASK	src/versionbits.h	/^static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;$/;"	v
VERSION_BASIC	src/wallet/walletdb.h	/^    static const int VERSION_BASIC=1;$/;"	m	class:CKeyMetadata
VERSION_HD_BASE	src/wallet/walletdb.h	/^    static const int VERSION_HD_BASE        = 1;$/;"	m	class:CHDChain
VERSION_HD_CHAIN_SPLIT	src/wallet/walletdb.h	/^    static const int VERSION_HD_CHAIN_SPLIT = 2;$/;"	m	class:CHDChain
VERSION_WITH_HDDATA	src/wallet/walletdb.h	/^    static const int VERSION_WITH_HDDATA=10;$/;"	m	class:CKeyMetadata
VERSION_WITH_KEY_ORIGIN	src/wallet/walletdb.h	/^    static const int VERSION_WITH_KEY_ORIGIN = 12;$/;"	m	class:CKeyMetadata
VG_CHECK	src/secp256k1/src/tests.c	/^#  define VG_CHECK(/;"	d	file:
VG_UNDEF	src/secp256k1/src/tests.c	/^#  define VG_UNDEF(/;"	d	file:
VNULL	src/univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VNUM	src/univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VOBJ	src/univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VOutRole	src/qt/coincontroldialog.h	/^        VOutRole$/;"	e	enum:CoinControlDialog::__anon72
VSTR	src/univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VType	src/univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	g	class:UniValue
Valid	src/dbwrapper.cpp	/^bool CDBIterator::Valid() const { return piter->Valid(); }$/;"	f	class:CDBIterator
Valid	src/leveldb/db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon29::DBIter
Valid	src/leveldb/db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	src/leveldb/db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	src/leveldb/db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	src/leveldb/db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	src/leveldb/table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	src/leveldb/table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon12::EmptyIterator
Valid	src/leveldb/table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	src/leveldb/table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon11::MergingIterator
Valid	src/leveldb/table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	src/leveldb/table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
Valid	src/txdb.cpp	/^bool CCoinsViewDBCursor::Valid() const$/;"	f	class:CCoinsViewDBCursor
ValidSize	src/pubkey.h	/^    bool static ValidSize(const std::vector<unsigned char> &vch) {$/;"	f	class:CPubKey
ValidationInterfaceConnections	src/validationinterface.cpp	/^struct ValidationInterfaceConnections {$/;"	s	file:
ValidationInvalidReason	src/consensus/validation.h	/^enum class ValidationInvalidReason {$/;"	c
Value	src/leveldb/db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	src/leveldb/db/fault_injection_test.cc	/^  Slice Value(int k, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Value	src/leveldb/util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Value	src/leveldb/util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueFromAmount	src/core_write.cpp	/^UniValue ValueFromAmount(const CAmount& amount)$/;"	f
ValueFromString	src/test/rpc_tests.cpp	/^static UniValue ValueFromString(const std::string &str)$/;"	f	file:
ValueType	src/leveldb/db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarIntMode	src/serialize.h	/^enum class VarIntMode { DEFAULT, NONNEGATIVE_SIGNED };$/;"	c
Variant	test/functional/wallet_import_rescan.py	/^class Variant(collections.namedtuple("Variant", "call data rescan prune")):$/;"	c
VarintLength	src/leveldb/util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
VectorReader	src/streams.h	/^    VectorReader(int type, int version, const std::vector<unsigned char>& data, size_t pos)$/;"	f	class:VectorReader
VectorReader	src/streams.h	/^    VectorReader(int type, int version, const std::vector<unsigned char>& data, size_t pos,$/;"	f	class:VectorReader
VectorReader	src/streams.h	/^class VectorReader$/;"	c
Verify	src/leveldb/db/fault_injection_test.cc	/^  Status Verify(int start_idx, int num_vals,$/;"	f	class:leveldb::FaultInjectionTest
Verify	src/pubkey.cpp	/^bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {$/;"	f	class:CPubKey
Verify	src/test/script_p2sh_tests.cpp	/^Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, ScriptError& err)$/;"	f	file:
Verify	src/wallet/db.cpp	/^BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename)$/;"	f	class:BerkeleyEnvironment
Verify	src/wallet/wallet.cpp	/^bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)$/;"	f	class:CWallet
VerifyChecksum	src/bech32.cpp	/^bool VerifyChecksum(const std::string& hrp, const data& values)$/;"	f	namespace:__anon116
VerifyDB	src/validation.cpp	/^bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)$/;"	f	class:CVerifyDB
VerifyDatabaseFile	src/wallet/db.cpp	/^bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)$/;"	f	class:BerkeleyBatch
VerifyDatabaseFile	src/wallet/walletdb.cpp	/^bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)$/;"	f	class:WalletBatch
VerifyEnvironment	src/wallet/db.cpp	/^bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)$/;"	f	class:BerkeleyBatch
VerifyEnvironment	src/wallet/walletdb.cpp	/^bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr)$/;"	f	class:WalletBatch
VerifyPubKey	src/key.cpp	/^bool CKey::VerifyPubKey(const CPubKey& pubkey) const {$/;"	f	class:CKey
VerifyResult	src/wallet/db.h	/^    enum class VerifyResult { VERIFY_OK,$/;"	c	class:BerkeleyEnvironment
VerifyScript	src/script/interpreter.cpp	/^bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f
VerifyScriptBench	src/bench/verify_script.cpp	/^static void VerifyScriptBench(benchmark::State& state)$/;"	f	file:
VerifySignature	src/script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:GenericTransactionSignatureChecker
VerifySignature	src/script/sigcache.cpp	/^bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:CachingTransactionSignatureChecker
VerifyWallets	src/wallet/load.cpp	/^bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)$/;"	f
VerifyWithFlag	src/test/sigopcount_tests.cpp	/^static ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags)$/;"	f	file:
VerifyWitnessProgram	src/script/interpreter.cpp	/^static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f	file:
Version	src/leveldb/db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	src/leveldb/db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionBitsCache	src/versionbits.h	/^struct VersionBitsCache$/;"	s
VersionBitsConditionChecker	src/versionbits.cpp	/^    explicit VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}$/;"	f	class:__anon126::VersionBitsConditionChecker
VersionBitsConditionChecker	src/versionbits.cpp	/^class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {$/;"	c	namespace:__anon126	file:
VersionBitsDeploymentInfo	src/versionbitsinfo.cpp	/^const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {$/;"	v	typeref:struct:VBDeploymentInfo
VersionBitsMask	src/versionbits.cpp	/^uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsState	src/versionbits.cpp	/^ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsStateSinceHeight	src/versionbits.cpp	/^int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsStatistics	src/versionbits.cpp	/^BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTester	src/test/versionbits_tests.cpp	/^    VersionBitsTester() : num(0) {}$/;"	f	class:VersionBitsTester
VersionBitsTester	src/test/versionbits_tests.cpp	/^class VersionBitsTester$/;"	c	file:
VersionBitsTipState	src/validation.cpp	/^ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTipStateSinceHeight	src/validation.cpp	/^int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTipStatistics	src/validation.cpp	/^BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsWarningTest	test/functional/feature_versionbits_warning.py	/^class VersionBitsWarningTest(BitcoinTestFramework):$/;"	c
VersionEdit	src/leveldb/db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	src/leveldb/db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	src/leveldb/db/dumpfile.cc	/^static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
VersionEditTest	src/leveldb/db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb	file:
VersionSet	src/leveldb/db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	src/leveldb/db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
WAIT_LOCK	src/sync.h	/^#define WAIT_LOCK(/;"	d
WALLET	src/util/system.h	/^    WALLET,$/;"	m	class:OptionsCategory
WALLET_CRYPTO_IV_SIZE	src/wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_IV_SIZE = 16;$/;"	v
WALLET_CRYPTO_KEY_SIZE	src/wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	src/wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WALLET_DEBUG_TEST	src/util/system.h	/^    WALLET_DEBUG_TEST,$/;"	m	class:OptionsCategory
WALLET_ENDPOINT_BASE	src/wallet/rpcwallet.cpp	/^static const std::string WALLET_ENDPOINT_BASE = "\/wallet\/";$/;"	v	file:
WALLET_ERROR	src/wallet/feebumper.h	/^    WALLET_ERROR,$/;"	m	class:feebumper::Result
WALLET_FLAG_BLANK_WALLET	src/wallet/wallet.h	/^    WALLET_FLAG_BLANK_WALLET = (1ULL << 33),$/;"	e	enum:uint64_t
WALLET_FLAG_DISABLE_PRIVATE_KEYS	src/wallet/wallet.h	/^    WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),$/;"	e	enum:uint64_t
WALLET_FLAG_KEY_ORIGIN_METADATA	src/wallet/wallet.h	/^    WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),$/;"	e	enum:uint64_t
WALLET_INCREMENTAL_RELAY_FEE	src/wallet/wallet.h	/^static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;$/;"	v
WALLET_PASSPHRASE	test/functional/wallet_bumpfee.py	/^WALLET_PASSPHRASE = "test"$/;"	v
WALLET_PASSPHRASE_TIMEOUT	test/functional/wallet_bumpfee.py	/^WALLET_PASSPHRASE_TIMEOUT = 3600$/;"	v
WALLET_UNLOCK_FAILURE	src/qt/addresstablemodel.h	/^        WALLET_UNLOCK_FAILURE,  \/**< Wallet could not be unlocked to create new receiving address *\/$/;"	e	enum:AddressTableModel::EditStatus
WARN_CXXFLAGS	Makefile	/^WARN_CXXFLAGS =  -Wall -Wextra -Wformat -Wvla -Wformat-security -Wthread-safety-analysis -Wrange-loop-analysis -Wredundant-decls$/;"	m
WARN_CXXFLAGS	doc/man/Makefile	/^WARN_CXXFLAGS =  -Wall -Wextra -Wformat -Wvla -Wformat-security -Wthread-safety-analysis -Wrange-loop-analysis -Wredundant-decls$/;"	m
WARN_CXXFLAGS	src/Makefile	/^WARN_CXXFLAGS =  -Wall -Wextra -Wformat -Wvla -Wformat-security -Wthread-safety-analysis -Wrange-loop-analysis -Wredundant-decls$/;"	m
WARN_UNKNOWN_RULES_ACTIVE	test/functional/feature_versionbits_warning.py	/^WARN_UNKNOWN_RULES_ACTIVE = "unknown new rules activated (versionbit {})".format(VB_UNKNOWN_BIT)$/;"	v
WATCHONLY_COLUMN_WIDTH	src/qt/transactionview.h	/^        WATCHONLY_COLUMN_WIDTH = 23,$/;"	e	enum:TransactionView::ColumnWidths
WATCH_ONLY	src/script/ismine.cpp	/^    WATCH_ONLY = 1, \/\/!< Included in watch-only balance$/;"	m	class:__anon85::IsMineResult	file:
WIDTH	src/arith_uint256.h	/^    static constexpr int WIDTH = BITS \/ 32;$/;"	m	class:base_uint
WIDTH	src/uint256.h	/^    static constexpr int WIDTH = BITS \/ 8;$/;"	m	class:base_blob
WIN32_LEAN_AND_MEAN	src/compat.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WIN32_LEAN_AND_MEAN	src/qt/guiutil.cpp	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WIN32_LEAN_AND_MEAN	src/support/lockedpool.cpp	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WIN32_LEAN_AND_MEAN	src/util/system.cpp	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WINDOWS_BITS	Makefile	/^WINDOWS_BITS = $/;"	m
WINDOWS_BITS	doc/man/Makefile	/^WINDOWS_BITS = $/;"	m
WINDOWS_BITS	src/Makefile	/^WINDOWS_BITS = $/;"	m
WINDOWS_PACKAGING	Makefile	/^WINDOWS_PACKAGING = $(top_srcdir)\/share\/pixmaps\/bitcoin.ico \\$/;"	m
WINDOW_A	src/secp256k1/src/ecmult_impl.h	/^#    define WINDOW_A /;"	d
WINDOW_A	src/secp256k1/src/ecmult_impl.h	/^#define WINDOW_A /;"	d
WINDOW_G	src/secp256k1/src/ecmult_impl.h	/^#    define WINDOW_G /;"	d
WINDOW_G	src/secp256k1/src/ecmult_impl.h	/^#define WINDOW_G /;"	d
WINDRES	Makefile	/^WINDRES = $/;"	m
WINDRES	doc/man/Makefile	/^WINDRES = $/;"	m
WINDRES	src/Makefile	/^WINDRES = $/;"	m
WITHOUT_C_STYLE_COMPILED	contrib/devtools/copyright_header.py	/^WITHOUT_C_STYLE_COMPILED = {}$/;"	v
WITH_LOCK	src/sync.h	/^#define WITH_LOCK(/;"	d
WITNESS_COMMITMENT_HEADER	test/functional/p2p_segwit.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER$/;"	i
WITNESS_COMMITMENT_HEADER	test/functional/test_framework/blocktools.py	/^WITNESS_COMMITMENT_HEADER = b"\\xaa\\x21\\xa9\\xed"$/;"	v
WITNESS_SCALE_FACTOR	src/consensus/consensus.h	/^static const int WITNESS_SCALE_FACTOR = 4;$/;"	v
WITNESS_V0	src/script/interpreter.h	/^    WITNESS_V0 = 1,$/;"	m	class:SigVersion
WITNESS_V0	src/script/ismine.cpp	/^    WITNESS_V0 = 2, \/\/!< P2WSH witness script execution$/;"	m	class:__anon85::IsMineSigVersion	file:
WITNESS_V0	src/wallet/rpcdump.cpp	/^    WITNESS_V0, \/\/!< P2WSH witnessScript$/;"	m	class:ScriptContext	file:
WITNESS_V0_KEYHASH_SIZE	src/script/interpreter.h	/^static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;$/;"	v
WITNESS_V0_SCRIPTHASH_SIZE	src/script/interpreter.h	/^static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;$/;"	v
WIT_V0	test/functional/feature_segwit.py	/^WIT_V0 = 0$/;"	v
WIT_V1	test/functional/feature_segwit.py	/^WIT_V1 = 1$/;"	v
WNAF_BITS	src/secp256k1/src/ecmult_const_impl.h	/^    #define WNAF_BITS /;"	d
WNAF_SIZE	src/secp256k1/src/ecmult_const_impl.h	/^#define WNAF_SIZE(/;"	d
WORDS_BIGENDIAN	build_msvc/bitcoin_config.h	/^#  define WORDS_BIGENDIAN /;"	d
WORDS_BIGENDIAN	src/config/bitcoin-config.h	/^#  define WORDS_BIGENDIAN /;"	d
WORDS_BIGENDIAN	src/secp256k1/src/libsecp256k1-config.h	/^#  define WORDS_BIGENDIAN /;"	d
WORK_PATH	depends/Makefile	/^WORK_PATH = $(BASEDIR)\/work$/;"	m
WPKHDescriptor	src/script/descriptor.cpp	/^    WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "wpkh") {}$/;"	f	class:__anon75::final
WSAEADDRINUSE	src/compat.h	/^#define WSAEADDRINUSE /;"	d
WSAEALREADY	src/compat.h	/^#define WSAEALREADY /;"	d
WSAEINPROGRESS	src/compat.h	/^#define WSAEINPROGRESS /;"	d
WSAEINTR	src/compat.h	/^#define WSAEINTR /;"	d
WSAEINVAL	src/compat.h	/^#define WSAEINVAL /;"	d
WSAEMSGSIZE	src/compat.h	/^#define WSAEMSGSIZE /;"	d
WSAENOTSOCK	src/compat.h	/^#define WSAENOTSOCK /;"	d
WSAEWOULDBLOCK	src/compat.h	/^#define WSAEWOULDBLOCK /;"	d
WSAGetLastError	src/compat.h	/^#define WSAGetLastError(/;"	d
WSHDescriptor	src/script/descriptor.cpp	/^    WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), "wsh") {}$/;"	f	class:__anon75::final
WWW_AUTH_HEADER_DATA	src/httprpc.cpp	/^static const char* WWW_AUTH_HEADER_DATA = "Basic realm=\\"jsonrpc\\"";$/;"	v	file:
Wait	src/checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueue
Wait	src/checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueueControl
Wait	src/leveldb/db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	src/leveldb/port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
Wait	src/leveldb/port/port_win.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WaitForShutdown	src/bitcoind.cpp	/^static void WaitForShutdown()$/;"	f	file:
WakeMessageHandler	src/net.cpp	/^void CConnman::WakeMessageHandler()$/;"	f	class:CConnman
WalCheckpoint	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^static void WalCheckpoint(sqlite3* db_) {$/;"	f	file:
Wallet	src/interfaces/wallet.h	/^class Wallet$/;"	c	namespace:interfaces
WalletAddress	src/interfaces/wallet.h	/^    WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)$/;"	f	struct:interfaces::WalletAddress
WalletAddress	src/interfaces/wallet.h	/^struct WalletAddress$/;"	s	namespace:interfaces
WalletAppInit	src/bitcoin-wallet.cpp	/^static bool WalletAppInit(int argc, char* argv[])$/;"	f	file:
WalletBackupTest	test/functional/wallet_backup.py	/^class WalletBackupTest(BitcoinTestFramework):$/;"	c
WalletBalance	src/bench/wallet_balance.cpp	/^static void WalletBalance(benchmark::State& state, const bool set_dirty, const bool add_watchonly, const bool add_mine)$/;"	f	file:
WalletBalanceClean	src/bench/wallet_balance.cpp	/^static void WalletBalanceClean(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ false, \/* add_watchonly *\/ true, \/* add_mine *\/ true); }$/;"	f	file:
WalletBalanceDirty	src/bench/wallet_balance.cpp	/^static void WalletBalanceDirty(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ true, \/* add_watchonly *\/ true, \/* add_mine *\/ true); }$/;"	f	file:
WalletBalanceMine	src/bench/wallet_balance.cpp	/^static void WalletBalanceMine(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ false, \/* add_watchonly *\/ false, \/* add_mine *\/ true); }$/;"	f	file:
WalletBalanceWatch	src/bench/wallet_balance.cpp	/^static void WalletBalanceWatch(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ false, \/* add_watchonly *\/ true, \/* add_mine *\/ false); }$/;"	f	file:
WalletBalances	src/interfaces/wallet.h	/^struct WalletBalances$/;"	s	namespace:interfaces
WalletBatch	src/wallet/walletdb.h	/^    explicit WalletBatch(WalletDatabase& database, const char* pszMode = "r+", bool _fFlushOnClose = true) :$/;"	f	class:WalletBatch
WalletBatch	src/wallet/walletdb.h	/^class WalletBatch$/;"	c
WalletClientImpl	src/interfaces/wallet.cpp	/^    WalletClientImpl(Chain& chain, std::vector<std::string> wallet_filenames)$/;"	f	class:interfaces::__anon130::WalletClientImpl
WalletClientImpl	src/interfaces/wallet.cpp	/^class WalletClientImpl : public ChainClient$/;"	c	namespace:interfaces::__anon130	file:
WalletController	src/qt/walletcontroller.cpp	/^WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)$/;"	f	class:WalletController
WalletController	src/qt/walletcontroller.h	/^class WalletController : public QObject$/;"	c
WalletDataFilePath	src/wallet/db.cpp	/^fs::path WalletDataFilePath(const fs::path& wallet_path)$/;"	f
WalletDatabaseFileId	src/wallet/db.h	/^struct WalletDatabaseFileId {$/;"	s
WalletDumpTest	test/functional/wallet_dump.py	/^class WalletDumpTest(BitcoinTestFramework):$/;"	c
WalletEncryptionTest	test/functional/wallet_encryption.py	/^class WalletEncryptionTest(BitcoinTestFramework):$/;"	c
WalletFeature	src/wallet/wallet.h	/^enum WalletFeature$/;"	g
WalletFrame	src/qt/walletframe.cpp	/^WalletFrame::WalletFrame(const PlatformStyle *_platformStyle, BitcoinGUI *_gui) :$/;"	f	class:WalletFrame
WalletFrame	src/qt/walletframe.h	/^class WalletFrame : public QFrame$/;"	c
WalletGroupTest	test/functional/wallet_groups.py	/^class WalletGroupTest(BitcoinTestFramework):$/;"	c
WalletHDTest	test/functional/wallet_hd.py	/^class WalletHDTest(BitcoinTestFramework):$/;"	c
WalletImpl	src/interfaces/wallet.cpp	/^    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_wallet(wallet) {}$/;"	f	class:interfaces::__anon130::WalletImpl
WalletImpl	src/interfaces/wallet.cpp	/^class WalletImpl : public Wallet$/;"	c	namespace:interfaces::__anon130	file:
WalletInit	src/wallet/init.cpp	/^class WalletInit : public WalletInitInterface {$/;"	c	file:
WalletInitInterface	src/walletinitinterface.h	/^class WalletInitInterface {$/;"	c
WalletLabelsTest	test/functional/wallet_labels.py	/^class WalletLabelsTest(BitcoinTestFramework):$/;"	c
WalletLocation	src/wallet/walletutil.cpp	/^WalletLocation::WalletLocation(const std::string& name)$/;"	f	class:WalletLocation
WalletLocation	src/wallet/walletutil.h	/^    explicit WalletLocation() {}$/;"	f	class:final
WalletLogPrintf	src/wallet/wallet.h	/^    void WalletLogPrintf(std::string fmt, Params... parameters) const {$/;"	f	class:final
WalletModel	src/qt/walletmodel.cpp	/^WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, interfaces::Node& node, const PlatformStyle *platformStyle, OptionsModel *_optionsModel, QObject *parent) :$/;"	f	class:WalletModel
WalletModel	src/qt/walletmodel.h	/^class WalletModel : public QObject$/;"	c
WalletModelTransaction	src/qt/walletmodeltransaction.cpp	/^WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &_recipients) :$/;"	f	class:WalletModelTransaction
WalletModelTransaction	src/qt/walletmodeltransaction.h	/^class WalletModelTransaction$/;"	c
WalletRBFTest	test/functional/wallet_fallbackfee.py	/^class WalletRBFTest(BitcoinTestFramework):$/;"	c
WalletRescanReserver	src/wallet/wallet.h	/^    explicit WalletRescanReserver(CWallet* w) : m_wallet(w), m_could_reserve(false) {}$/;"	f	class:WalletRescanReserver
WalletRescanReserver	src/wallet/wallet.h	/^class WalletRescanReserver$/;"	c
WalletShowInfo	src/wallet/wallettool.cpp	/^static void WalletShowInfo(CWallet* wallet_instance)$/;"	f	namespace:WalletTool
WalletTest	test/functional/wallet_balance.py	/^class WalletTest(BitcoinTestFramework):$/;"	c
WalletTest	test/functional/wallet_basic.py	/^class WalletTest(BitcoinTestFramework):$/;"	c
WalletTestingSetup	src/wallet/test/wallet_test_fixture.cpp	/^WalletTestingSetup::WalletTestingSetup(const std::string& chainName)$/;"	f	class:WalletTestingSetup
WalletTestingSetup	src/wallet/test/wallet_test_fixture.h	/^struct WalletTestingSetup: public TestingSetup {$/;"	s
WalletTests	src/qt/test/wallettests.h	/^class WalletTests : public QObject$/;"	c
WalletTool	src/wallet/wallettool.cpp	/^namespace WalletTool {$/;"	n	file:
WalletTool	src/wallet/wallettool.h	/^namespace WalletTool {$/;"	n
WalletToolReleaseWallet	src/wallet/wallettool.cpp	/^static void WalletToolReleaseWallet(CWallet* wallet)$/;"	f	namespace:WalletTool
WalletTx	src/interfaces/wallet.h	/^struct WalletTx$/;"	s	namespace:interfaces
WalletTxOut	src/interfaces/wallet.h	/^struct WalletTxOut$/;"	s	namespace:interfaces
WalletTxStatus	src/interfaces/wallet.h	/^struct WalletTxStatus$/;"	s	namespace:interfaces
WalletTxToJSON	src/wallet/rpcwallet.cpp	/^static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx, UniValue& entry)$/;"	f	file:
WalletView	src/qt/walletview.cpp	/^WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):$/;"	f	class:WalletView
WalletView	src/qt/walletview.h	/^class WalletView : public QStackedWidget$/;"	c
Warning	src/qt/notificator.h	/^        Warning,        \/**< Notify user of potential problem *\/$/;"	e	enum:Notificator::Class
WarningBitsConditionChecker	src/validation.cpp	/^    explicit WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}$/;"	f	class:WarningBitsConditionChecker
WarningBitsConditionChecker	src/validation.cpp	/^class WarningBitsConditionChecker : public AbstractThresholdConditionChecker$/;"	c	file:
WatchOnlyFilter	src/qt/transactionfilterproxy.h	/^    enum WatchOnlyFilter$/;"	g	class:TransactionFilterProxy
WatchOnlyFilter_All	src/qt/transactionfilterproxy.h	/^        WatchOnlyFilter_All,$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
WatchOnlyFilter_No	src/qt/transactionfilterproxy.h	/^        WatchOnlyFilter_No$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
WatchOnlyFilter_Yes	src/qt/transactionfilterproxy.h	/^        WatchOnlyFilter_Yes,$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
Watchonly	src/qt/transactiontablemodel.h	/^        Watchonly = 1,$/;"	e	enum:TransactionTableModel::ColumnIndex
WatchonlyDecorationRole	src/qt/transactiontablemodel.h	/^        WatchonlyDecorationRole,$/;"	e	enum:TransactionTableModel::RoleIndex
WatchonlyRole	src/qt/transactiontablemodel.h	/^        WatchonlyRole,$/;"	e	enum:TransactionTableModel::RoleIndex
WillLogCategory	src/logging.cpp	/^bool BCLog::Logger::WillLogCategory(BCLog::LogFlags category) const$/;"	f	class:BCLog::Logger
Win32	src/leveldb/util/env_win.cc	/^namespace Win32$/;"	n	namespace:leveldb	file:
Win32Env	src/leveldb/util/env_win.cc	/^Win32Env::Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
Win32Env	src/leveldb/util/env_win.cc	/^class Win32Env : public Env$/;"	c	namespace:leveldb::Win32	file:
Win32FileLock	src/leveldb/util/env_win.cc	/^Win32FileLock::Win32FileLock( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32FileLock
Win32FileLock	src/leveldb/util/env_win.cc	/^class Win32FileLock : public FileLock$/;"	c	namespace:leveldb::Win32	file:
Win32LockedPageAllocator	src/support/lockedpool.cpp	/^Win32LockedPageAllocator::Win32LockedPageAllocator()$/;"	f	class:Win32LockedPageAllocator
Win32LockedPageAllocator	src/support/lockedpool.cpp	/^class Win32LockedPageAllocator: public LockedPageAllocator$/;"	c	file:
Win32Logger	src/leveldb/util/env_win.cc	/^Win32Logger::Win32Logger(WritableFile* pFile) : _pFileProxy(pFile)$/;"	f	class:leveldb::Win32::Win32Logger
Win32Logger	src/leveldb/util/env_win.cc	/^class Win32Logger : public Logger$/;"	c	namespace:leveldb::Win32	file:
Win32RandomAccessFile	src/leveldb/util/env_win.cc	/^Win32RandomAccessFile::Win32RandomAccessFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Win32RandomAccessFile	src/leveldb/util/env_win.cc	/^class Win32RandomAccessFile : public RandomAccessFile$/;"	c	namespace:leveldb::Win32	file:
Win32SequentialFile	src/leveldb/util/env_win.cc	/^Win32SequentialFile::Win32SequentialFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32SequentialFile
Win32SequentialFile	src/leveldb/util/env_win.cc	/^class Win32SequentialFile : public SequentialFile$/;"	c	namespace:leveldb::Win32	file:
Win32WritableFile	src/leveldb/util/env_win.cc	/^Win32WritableFile::Win32WritableFile(const std::string& fname, bool append)$/;"	f	class:leveldb::Win32::Win32WritableFile
Win32WritableFile	src/leveldb/util/env_win.cc	/^class Win32WritableFile : public WritableFile$/;"	c	namespace:leveldb::Win32	file:
WinCmdLineArgs	src/util/system.cpp	/^WinCmdLineArgs::WinCmdLineArgs()$/;"	f	class:util::WinCmdLineArgs
WinCmdLineArgs	src/util/system.h	/^class WinCmdLineArgs$/;"	c	namespace:util
WinShutdownMonitor	src/qt/winshutdownmonitor.h	/^class WinShutdownMonitor : public QAbstractNativeEventFilter$/;"	c
WitnessMode	src/test/script_tests.cpp	/^enum class WitnessMode {$/;"	c	namespace:__anon58	file:
WitnessSigOps	src/script/interpreter.cpp	/^size_t static WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness)$/;"	f	file:
WitnessUnknown	src/script/standard.h	/^struct WitnessUnknown$/;"	s
WitnessV0KeyHash	src/script/standard.h	/^    WitnessV0KeyHash() : uint160() {}$/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	src/script/standard.h	/^    explicit WitnessV0KeyHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	src/script/standard.h	/^struct WitnessV0KeyHash : public uint160$/;"	s
WitnessV0ScriptHash	src/script/standard.cpp	/^WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)$/;"	f	class:WitnessV0ScriptHash
WitnessV0ScriptHash	src/script/standard.h	/^    WitnessV0ScriptHash() : uint256() {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	src/script/standard.h	/^    explicit WitnessV0ScriptHash(const uint256& hash) : uint256(hash) {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	src/script/standard.h	/^struct WitnessV0ScriptHash : public uint256$/;"	s
WorkItemWrapper	src/leveldb/util/env_win.cc	/^WorkItemWrapper::WorkItemWrapper( ScheduleProc proc_,void* content_ ) :$/;"	f	class:leveldb::Win32::WorkItemWrapper
WorkItemWrapper	src/leveldb/util/env_win.cc	/^struct WorkItemWrapper$/;"	s	namespace:leveldb::Win32	file:
WorkItemWrapperProc	src/leveldb/util/env_win.cc	/^DWORD WINAPI WorkItemWrapperProc(LPVOID pContent)$/;"	f	namespace:leveldb::Win32
WorkQueue	src/httpserver.cpp	/^    explicit WorkQueue(size_t _maxDepth) : running(true),$/;"	f	class:WorkQueue
WorkQueue	src/httpserver.cpp	/^class WorkQueue$/;"	c	file:
WrapBigEndian	src/serialize.h	/^BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }$/;"	f
WrapVarInt	src/serialize.h	/^CVarInt<Mode, I> WrapVarInt(I& n) { return CVarInt<Mode, I>{n}; }$/;"	f
WritableFile	src/leveldb/include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	src/leveldb/include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
WritableFileClosed	src/leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::WritableFileClosed(const FileState& state) {$/;"	f	class:leveldb::FaultInjectionTestEnv
WritableFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon35::WritableFileImpl
WritableFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon35	file:
Write	src/addrdb.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
Write	src/addrdb.cpp	/^bool CBanDB::Write(const banmap_t& banSet)$/;"	f	class:CBanDB
Write	src/crypto/hmac_sha256.h	/^    CHMAC_SHA256& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA256
Write	src/crypto/hmac_sha512.h	/^    CHMAC_SHA512& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA512
Write	src/crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Write(const unsigned char* data, size_t len)$/;"	f	class:CRIPEMD160
Write	src/crypto/sha1.cpp	/^CSHA1& CSHA1::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA1
Write	src/crypto/sha256.cpp	/^CSHA256& CSHA256::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA256
Write	src/crypto/sha512.cpp	/^CSHA512& CSHA512::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA512
Write	src/crypto/siphash.cpp	/^CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)$/;"	f	class:CSipHasher
Write	src/crypto/siphash.cpp	/^CSipHasher& CSipHasher::Write(uint64_t data)$/;"	f	class:CSipHasher
Write	src/dbwrapper.h	/^    bool Write(const K& key, const V& value, bool fSync = false)$/;"	f	class:CDBWrapper
Write	src/dbwrapper.h	/^    void Write(const K& key, const V& value)$/;"	f	class:CDBBatch
Write	src/hash.h	/^    CHash160& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash160
Write	src/hash.h	/^    CHash256& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash256
Write	src/leveldb/db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {$/;"	f	class:leveldb::DBImpl
Write	src/leveldb/db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	src/leveldb/db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
Write	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark	file:
Write	src/policy/fees.cpp	/^bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const$/;"	f	class:CBlockPolicyEstimator
Write	src/policy/fees.cpp	/^void TxConfirmStats::Write(CAutoFile& fileout) const$/;"	f	class:TxConfirmStats
Write	src/streams.h	/^    void Write(uint64_t data, int nbits) {$/;"	f	class:BitStreamWriter
Write	src/wallet/db.h	/^    bool Write(const K& key, const T& value, bool fOverwrite = true)$/;"	f	class:BerkeleyBatch
Write4	src/crypto/sha256_sse41.cpp	/^void inline Write4(unsigned char* out, int offset, __m128i v) {$/;"	f	namespace:sha256d64_sse41::__anon41
Write8	src/crypto/sha256_avx2.cpp	/^void inline Write8(unsigned char* out, int offset, __m256i v) {$/;"	f	namespace:sha256d64_avx2::__anon37
WriteBE32	src/crypto/common.h	/^void static inline WriteBE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteBE64	src/crypto/common.h	/^void static inline WriteBE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteBatch	src/dbwrapper.cpp	/^bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)$/;"	f	class:CDBWrapper
WriteBatch	src/leveldb/db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	src/leveldb/include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	src/leveldb/db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	src/leveldb/db/dumpfile.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon27	file:
WriteBatchPrinter	src/leveldb/db/dumpfile.cc	/^static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
WriteBatchSync	src/txdb.cpp	/^bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {$/;"	f	class:CBlockTreeDB
WriteBatchTest	src/leveldb/db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb	file:
WriteBestBlock	src/index/base.cpp	/^void BaseIndex::DB::WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator)$/;"	f	class:BaseIndex::DB
WriteBestBlock	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:WalletBatch
WriteBinaryFile	src/torcontrol.cpp	/^static bool WriteBinaryFile(const fs::path &filename, const std::string &data)$/;"	f	file:
WriteBlock	src/index/base.h	/^    virtual bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) { return true; }$/;"	f	class:BaseIndex
WriteBlock	src/index/blockfilterindex.cpp	/^bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)$/;"	f	class:BlockFilterIndex
WriteBlock	src/index/txindex.cpp	/^bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)$/;"	f	class:TxIndex
WriteBlock	src/leveldb/table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteBlockToDisk	src/validation.cpp	/^static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	file:
WriteCScript	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:WalletBatch
WriteCoinsViewEntry	src/test/coins_tests.cpp	/^void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)$/;"	f
WriteCompactSize	src/serialize.h	/^inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)$/;"	f
WriteCompactSize	src/serialize.h	/^void WriteCompactSize(Stream& os, uint64_t nSize)$/;"	f
WriteCryptedKey	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,$/;"	f	class:WalletBatch
WriteDescriptor	src/leveldb/db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon30::Repairer	file:
WriteDestData	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)$/;"	f	class:WalletBatch
WriteFilterToDisk	src/index/blockfilterindex.cpp	/^size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)$/;"	f	class:BlockFilterIndex
WriteFlag	src/txdb.cpp	/^bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {$/;"	f	class:CBlockTreeDB
WriteHDChain	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteHDChain(const CHDChain& chain)$/;"	f	class:WalletBatch
WriteHDKeypath	src/rpc/rawtransaction.cpp	/^static std::string WriteHDKeypath(std::vector<uint32_t>& keypath)$/;"	f	file:
WriteHDKeypath	src/util/bip32.cpp	/^std::string WriteHDKeypath(const std::vector<uint32_t>& keypath)$/;"	f
WriteHeader	src/httpserver.cpp	/^void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)$/;"	f	class:HTTPRequest
WriteIC	src/wallet/walletdb.h	/^    bool WriteIC(const K& key, const T& value, bool fOverwrite = true)$/;"	f	class:WalletBatch
WriteInitialOffsetLog	src/leveldb/db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteKey	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)$/;"	f	class:WalletBatch
WriteKeyMetadata	src/wallet/wallet.cpp	/^bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)$/;"	f	class:CWallet
WriteKeyMetadata	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)$/;"	f	class:WalletBatch
WriteLE16	src/crypto/common.h	/^void static inline WriteLE16(unsigned char* ptr, uint16_t x)$/;"	f
WriteLE32	src/crypto/common.h	/^void static inline WriteLE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteLE64	src/crypto/common.h	/^void static inline WriteLE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteLevel0Table	src/leveldb/db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteMasterKey	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:WalletBatch
WriteMinVersion	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteMinVersion(int nVersion)$/;"	f	class:WalletBatch
WriteName	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteName(const std::string& strAddress, const std::string& strName)$/;"	f	class:WalletBatch
WriteOptions	src/leveldb/include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	src/leveldb/include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteOrderPos	src/wallet/wallet.h	/^static inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
WriteOrderPosNext	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteOrderPosNext(int64_t nOrderPosNext)$/;"	f	class:WalletBatch
WritePool	src/wallet/walletdb.cpp	/^bool WalletBatch::WritePool(int64_t nPool, const CKeyPool& keypool)$/;"	f	class:WalletBatch
WritePurpose	src/wallet/walletdb.cpp	/^bool WalletBatch::WritePurpose(const std::string& strAddress, const std::string& strPurpose)$/;"	f	class:WalletBatch
WriteRandom	src/leveldb/db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	src/leveldb/table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteReindexing	src/txdb.cpp	/^bool CBlockTreeDB::WriteReindexing(bool fReindexing) {$/;"	f	class:CBlockTreeDB
WriteReply	src/httpserver.cpp	/^void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)$/;"	f	class:HTTPRequest
WriteSeq	src/leveldb/db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	src/leveldb/db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	src/leveldb/db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	src/leveldb/util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	src/leveldb/util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	src/leveldb/db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
WriteTx	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteTx(const CWalletTx& wtx)$/;"	f	class:WalletBatch
WriteTxIndexMigrationBatches	src/index/txindex.cpp	/^static void WriteTxIndexMigrationBatches(CDBWrapper& newdb, CDBWrapper& olddb,$/;"	f	file:
WriteTxs	src/index/txindex.cpp	/^bool TxIndex::DB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)$/;"	f	class:TxIndex::DB
WriteUndoDataForBlock	src/validation.cpp	/^static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)$/;"	f	file:
WriteVarInt	src/serialize.h	/^inline void WriteVarInt(CSizeComputer &s, I n)$/;"	f
WriteVarInt	src/serialize.h	/^void WriteVarInt(Stream& os, I n)$/;"	f
WriteVersion	src/wallet/db.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:BerkeleyBatch
WriteVersion	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteVersion(int nVersion)$/;"	f	class:WalletBatch
WriteWalletFlags	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteWalletFlags(const uint64_t flags)$/;"	f	class:WalletBatch
WriteWatchOnly	src/wallet/walletdb.cpp	/^bool WalletBatch::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)$/;"	f	class:WalletBatch
Writer	src/leveldb/db/db_impl.cc	/^  explicit Writer(port::Mutex* mu) : cv(mu) { }$/;"	f	struct:leveldb::DBImpl::Writer
Writer	src/leveldb/db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	src/leveldb/db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	src/leveldb/db/log_writer.cc	/^Writer::Writer(WritableFile* dest, uint64_t dest_length)$/;"	f	class:leveldb::log::Writer
Writer	src/leveldb/db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	src/leveldb/db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
X	src/net.cpp	/^#define X(/;"	d	file:
X	src/net.cpp	/^#undef X$/;"	d	file:
X11XCB_CFLAGS	Makefile	/^X11XCB_CFLAGS = $/;"	m
X11XCB_CFLAGS	doc/man/Makefile	/^X11XCB_CFLAGS = $/;"	m
X11XCB_CFLAGS	src/Makefile	/^X11XCB_CFLAGS = $/;"	m
X11XCB_LIBS	Makefile	/^X11XCB_LIBS = $/;"	m
X11XCB_LIBS	doc/man/Makefile	/^X11XCB_LIBS = $/;"	m
X11XCB_LIBS	src/Makefile	/^X11XCB_LIBS = $/;"	m
X509Deleter	src/qt/paymentserver.cpp	/^struct X509Deleter {$/;"	s	file:
X509StoreDeleter	src/qt/paymentserver.cpp	/^struct X509StoreDeleter {$/;"	s	file:
XGETTEXT	Makefile	/^XGETTEXT = $/;"	m
XGETTEXT	doc/man/Makefile	/^XGETTEXT = $/;"	m
XGETTEXT	share/qt/extract_strings_qt.py	/^XGETTEXT=os.getenv('XGETTEXT', 'xgettext')$/;"	v
XGETTEXT	src/Makefile	/^XGETTEXT = $/;"	m
XMARGIN	src/qt/trafficgraphwidget.cpp	/^#define XMARGIN /;"	d	file:
Xor	src/crypto/sha256_avx2.cpp	/^__m256i inline Xor(__m256i x, __m256i y) { return _mm256_xor_si256(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
Xor	src/crypto/sha256_avx2.cpp	/^__m256i inline Xor(__m256i x, __m256i y, __m256i z) { return Xor(Xor(x, y), z); }$/;"	f	namespace:sha256d64_avx2::__anon37
Xor	src/crypto/sha256_sse41.cpp	/^__m128i inline Xor(__m128i x, __m128i y) { return _mm_xor_si128(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
Xor	src/crypto/sha256_sse41.cpp	/^__m128i inline Xor(__m128i x, __m128i y, __m128i z) { return Xor(Xor(x, y), z); }$/;"	f	namespace:sha256d64_sse41::__anon41
Xor	src/streams.h	/^    void Xor(const std::vector<unsigned char>& key)$/;"	f	class:CDataStream
YEAR	contrib/devtools/copyright_header.py	/^YEAR = "20[0-9][0-9]"$/;"	v
YEAR_LIST	contrib/devtools/copyright_header.py	/^YEAR_LIST = '(%s)(, %s)+' % (YEAR, YEAR)$/;"	v
YEAR_LIST_STYLE_COMPILED	contrib/devtools/copyright_header.py	/^YEAR_LIST_STYLE_COMPILED = {}$/;"	v
YEAR_RANGE	contrib/devtools/copyright_header.py	/^YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)$/;"	v
YMARGIN	src/qt/trafficgraphwidget.cpp	/^#define YMARGIN /;"	d	file:
ZMQ	src/util/system.h	/^    ZMQ,$/;"	m	class:OptionsCategory
ZMQHandler	contrib/zmq/zmq_sub.py	/^class ZMQHandler():$/;"	c
ZMQSubscriber	test/functional/interface_zmq.py	/^class ZMQSubscriber:$/;"	c
ZMQTest	test/functional/interface_zmq.py	/^class ZMQTest (BitcoinTestFramework):$/;"	c
ZMQ_CFLAGS	Makefile	/^ZMQ_CFLAGS = -I\/usr\/local\/Cellar\/zeromq\/4.2.5\/include$/;"	m
ZMQ_CFLAGS	doc/man/Makefile	/^ZMQ_CFLAGS = -I\/usr\/local\/Cellar\/zeromq\/4.2.5\/include$/;"	m
ZMQ_CFLAGS	src/Makefile	/^ZMQ_CFLAGS = -I\/usr\/local\/Cellar\/zeromq\/4.2.5\/include$/;"	m
ZMQ_LIBS	Makefile	/^ZMQ_LIBS = -L\/usr\/local\/Cellar\/zeromq\/4.2.5\/lib -lzmq$/;"	m
ZMQ_LIBS	doc/man/Makefile	/^ZMQ_LIBS = -L\/usr\/local\/Cellar\/zeromq\/4.2.5\/lib -lzmq$/;"	m
ZMQ_LIBS	src/Makefile	/^ZMQ_LIBS = -L\/usr\/local\/Cellar\/zeromq\/4.2.5\/lib -lzmq$/;"	m
ZapSelectTx	src/wallet/wallet.cpp	/^DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)$/;"	f	class:CWallet
ZapSelectTx	src/wallet/walletdb.cpp	/^DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<uint256>& vTxHashOut)$/;"	f	class:WalletBatch
ZapWalletTXesTest	test/functional/wallet_zapwallettxes.py	/^class ZapWalletTXesTest (BitcoinTestFramework):$/;"	c
ZapWalletTx	src/wallet/wallet.cpp	/^DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)$/;"	f	class:CWallet
ZapWalletTx	src/wallet/walletdb.cpp	/^DBErrors WalletBatch::ZapWalletTx(std::vector<CWalletTx>& vWtx)$/;"	f	class:WalletBatch
ZeroArray	src/test/arith_uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroArray	src/test/uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroL	src/test/arith_uint256_tests.cpp	/^const arith_uint256 ZeroL = arith_uint256V(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroL	src/test/uint256_tests.cpp	/^const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroS	src/test/uint256_tests.cpp	/^const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));$/;"	v
_	src/util/system.h	/^inline std::string _(const char* psz)$/;"	f
_ACJNI_JAVAC	src/secp256k1/Makefile	/^_ACJNI_JAVAC = $/;"	m
_CTAES_H_	src/crypto/ctaes/ctaes.h	/^#define _CTAES_H_ /;"	d
_CleanUp	src/leveldb/util/env_win.cc	/^void Win32FileLock::_CleanUp()$/;"	f	class:leveldb::Win32::Win32FileLock
_CleanUp	src/leveldb/util/env_win.cc	/^void Win32RandomAccessFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_CleanUp	src/leveldb/util/env_win.cc	/^void Win32SequentialFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_DARWIN_USE_64_BIT_INODE	build_msvc/bitcoin_config.h	/^# define _DARWIN_USE_64_BIT_INODE /;"	d
_DARWIN_USE_64_BIT_INODE	src/config/bitcoin-config.h	/^# define _DARWIN_USE_64_BIT_INODE /;"	d
_FILE_OFFSET_BITS	build_msvc/bitcoin_config.h	/^#define _FILE_OFFSET_BITS /;"	d
_Included_org_bitcoin_NativeSecp256k1	src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.h	/^#define _Included_org_bitcoin_NativeSecp256k1$/;"	d
_Included_org_bitcoin_Secp256k1Context	src/secp256k1/src/java/org_bitcoin_Secp256k1Context.h	/^#define _Included_org_bitcoin_Secp256k1Context$/;"	d
_Init	src/leveldb/util/env_win.cc	/^BOOL Win32FileLock::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32FileLock
_Init	src/leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_Init	src/leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::_Init()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_POSIX_C_SOURCE	src/util/system.cpp	/^#define _POSIX_C_SOURCE /;"	d	file:
_POSIX_C_SOURCE	src/util/system.cpp	/^#undef _POSIX_C_SOURCE$/;"	d	file:
_SECP256K1_ECMULT_STATIC_CONTEXT_	src/secp256k1/src/ecmult_static_context.h	/^#define _SECP256K1_ECMULT_STATIC_CONTEXT_$/;"	d
_WIN32_IE	src/qt/guiutil.cpp	/^#define _WIN32_IE /;"	d	file:
_WIN32_IE	src/qt/guiutil.cpp	/^#undef _WIN32_IE$/;"	d	file:
_WIN32_IE	src/util/system.cpp	/^#define _WIN32_IE /;"	d	file:
_WIN32_IE	src/util/system.cpp	/^#undef _WIN32_IE$/;"	d	file:
__UNIVALUE_H__	src/univalue/include/univalue.h	/^#define __UNIVALUE_H__$/;"	d
__add__	test/functional/test_framework/script.py	/^    def __add__(self, other):$/;"	m	class:CScript	file:
__b58base	contrib/testgen/base58.py	/^__b58base = len(__b58chars)$/;"	v
__b58chars	contrib/testgen/base58.py	/^__b58chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'$/;"	v
__call__	contrib/devtools/symbol-check.py	/^    def __call__(self, mangled):$/;"	m	class:CPPFilt	file:
__call__	test/functional/test_framework/authproxy.py	/^    def __call__(self, *args, **argsn):$/;"	m	class:AuthServiceProxy	file:
__call__	test/functional/test_framework/coverage.py	/^    def __call__(self, *args, **kwargs):$/;"	m	class:AuthServiceProxyWrapper	file:
__call__	test/functional/test_framework/test_node.py	/^    def __call__(self, *args, **kwargs):$/;"	m	class:TestNodeCLIAttr	file:
__call__	test/functional/test_framework/test_node.py	/^    def __call__(self, *options, input=None):$/;"	m	class:TestNodeCLI	file:
__coerce_instance	test/functional/test_framework/script.py	/^    def __coerce_instance(cls, other):$/;"	m	class:CScript	file:
__del__	test/functional/test_framework/test_node.py	/^    def __del__(self):$/;"	m	class:TestNode	file:
__fdelt_warn	src/compat/glibc_compat.cpp	/^extern "C" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)$/;"	f
__getattr__	test/functional/test_framework/authproxy.py	/^    def __getattr__(self, name):$/;"	m	class:AuthServiceProxy	file:
__getattr__	test/functional/test_framework/coverage.py	/^    def __getattr__(self, name):$/;"	m	class:AuthServiceProxyWrapper	file:
__getattr__	test/functional/test_framework/test_node.py	/^    def __getattr__(self, command):$/;"	m	class:TestNodeCLI	file:
__getattr__	test/functional/test_framework/test_node.py	/^    def __getattr__(self, name):$/;"	m	class:TestNode	file:
__id_count	test/functional/test_framework/authproxy.py	/^    __id_count = 0$/;"	v	class:AuthServiceProxy
__init__	contrib/devtools/symbol-check.py	/^    def __init__(self):$/;"	m	class:CPPFilt
__init__	contrib/linearize/linearize-data.py	/^    def __init__(self, settings, blkindex, blkmap):$/;"	m	class:BlockDataCopier
__init__	contrib/linearize/linearize-hashes.py	/^    def __init__(self, host, port, username, password):$/;"	m	class:BitcoinRPC
__init__	contrib/zmq/zmq_sub.py	/^    def __init__(self):$/;"	m	class:ZMQHandler
__init__	test/functional/data/invalid_txs.py	/^    def __init__(self, *, spend_tx=None, spend_block=None):$/;"	m	class:BadTxTemplate
__init__	test/functional/example_test.py	/^    def __init__(self):$/;"	m	class:BaseNode
__init__	test/functional/feature_maxuploadtarget.py	/^    def __init__(self):$/;"	m	class:TestP2PConn
__init__	test/functional/interface_zmq.py	/^    def __init__(self, socket, topic):$/;"	m	class:ZMQSubscriber
__init__	test/functional/mining_getblocktemplate_longpoll.py	/^    def __init__(self, node):$/;"	m	class:LongpollThread
__init__	test/functional/p2p_compactblocks.py	/^    def __init__(self, cmpct_version):$/;"	m	class:TestP2PConn
__init__	test/functional/p2p_feefilter.py	/^    def __init__(self):$/;"	m	class:TestP2PConn
__init__	test/functional/p2p_invalid_messages.py	/^    def __init__(self, *, str_data):$/;"	m	class:msg_unrecognized
__init__	test/functional/p2p_leak.py	/^    def __init__(self):$/;"	m	class:CLazyNode
__init__	test/functional/p2p_leak.py	/^    def __init__(self):$/;"	m	class:CNodeNoVerackIdle
__init__	test/functional/p2p_leak.py	/^    def __init__(self):$/;"	m	class:CNodeNoVersionIdle
__init__	test/functional/p2p_segwit.py	/^    def __init__(self):$/;"	m	class:TestP2PConn
__init__	test/functional/p2p_segwit.py	/^    def __init__(self, sha256, n, value):$/;"	m	class:UTXO
__init__	test/functional/p2p_sendheaders.py	/^    def __init__(self):$/;"	m	class:BaseNode
__init__	test/functional/rpc_rawtransaction.py	/^    def __init__(self, x):$/;"	m	class:multidict
__init__	test/functional/test_framework/authproxy.py	/^    def __init__(self, rpc_error, http_status=None):$/;"	m	class:JSONRPCException
__init__	test/functional/test_framework/authproxy.py	/^    def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None, ensure_ascii=True):$/;"	m	class:AuthServiceProxy
__init__	test/functional/test_framework/coverage.py	/^    def __init__(self, auth_service_proxy_instance, coverage_logfile=None):$/;"	m	class:AuthServiceProxyWrapper
__init__	test/functional/test_framework/key.py	/^    def __init__(self):$/;"	m	class:ECKey
__init__	test/functional/test_framework/key.py	/^    def __init__(self):$/;"	m	class:ECPubKey
__init__	test/functional/test_framework/key.py	/^    def __init__(self, p, a, b):$/;"	m	class:EllipticCurve
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:CAddress
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:CBlockLocator
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:CMerkleBlock
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:CPartialMerkleTree
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:CScriptWitness
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:CTxInWitness
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:CTxWitness
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:P2PHeaderAndShortIDs
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_addr
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_blocktxn
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_getaddr
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_getblocks
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_getblocktxn
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_getheaders
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_mempool
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_reject
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_sendcmpct
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_sendheaders
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_verack
__init__	test/functional/test_framework/messages.py	/^    def __init__(self):$/;"	m	class:msg_version
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, block=None):$/;"	m	class:msg_block
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, blockhash=0, indexes = None):$/;"	m	class:BlockTransactionsRequest
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, blockhash=0, transactions = None):$/;"	m	class:BlockTransactions
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, command, data=None):$/;"	m	class:msg_generic
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, feerate=0):$/;"	m	class:msg_feefilter
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, hash=0, n=0):$/;"	m	class:COutPoint
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, header=None):$/;"	m	class:CBlock
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, header=None):$/;"	m	class:CBlockHeader
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, header_and_shortids = None):$/;"	m	class:msg_cmpctblock
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, headers=None):$/;"	m	class:msg_headers
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, index=0, tx = None):$/;"	m	class:PrefilledTransaction
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, inv=None):$/;"	m	class:msg_getdata
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, inv=None):$/;"	m	class:msg_inv
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, nValue=0, scriptPubKey=b""):$/;"	m	class:CTxOut
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, nonce=0):$/;"	m	class:msg_ping
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, nonce=0):$/;"	m	class:msg_pong
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, outpoint=None, scriptSig=b"", nSequence=0):$/;"	m	class:CTxIn
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, p2pheaders_and_shortids = None):$/;"	m	class:HeaderAndShortIDs
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, t=0, h=0):$/;"	m	class:CInv
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, tx=CTransaction()):$/;"	m	class:msg_tx
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, tx=None):$/;"	m	class:CTransaction
__init__	test/functional/test_framework/messages.py	/^    def __init__(self, vec=None):$/;"	m	class:msg_notfound
__init__	test/functional/test_framework/mininode.py	/^    def __init__(self):$/;"	m	class:NetworkThread
__init__	test/functional/test_framework/mininode.py	/^    def __init__(self):$/;"	m	class:P2PConnection
__init__	test/functional/test_framework/mininode.py	/^    def __init__(self):$/;"	m	class:P2PDataStore
__init__	test/functional/test_framework/mininode.py	/^    def __init__(self):$/;"	m	class:P2PInterface
__init__	test/functional/test_framework/script.py	/^    def __init__(self, d=0):$/;"	m	class:CScriptNum
__init__	test/functional/test_framework/script.py	/^    def __init__(self, msg, data):$/;"	m	class:CScriptTruncatedPushDataError
__init__	test/functional/test_framework/socks5.py	/^    def __init__(self):$/;"	m	class:Socks5Configuration
__init__	test/functional/test_framework/socks5.py	/^    def __init__(self, cmd, atyp, addr, port, username, password):$/;"	m	class:Socks5Command
__init__	test/functional/test_framework/socks5.py	/^    def __init__(self, conf):$/;"	m	class:Socks5Server
__init__	test/functional/test_framework/socks5.py	/^    def __init__(self, serv, conn):$/;"	m	class:Socks5Connection
__init__	test/functional/test_framework/test_framework.py	/^    def __init__(self):$/;"	m	class:BitcoinTestFramework
__init__	test/functional/test_framework/test_framework.py	/^    def __init__(self, message):$/;"	m	class:SkipTest
__init__	test/functional/test_framework/test_node.py	/^    def __init__(self, binary, datadir):$/;"	m	class:TestNodeCLI
__init__	test/functional/test_framework/test_node.py	/^    def __init__(self, cli, command):$/;"	m	class:TestNodeCLIAttr
__init__	test/functional/test_framework/test_node.py	/^    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):$/;"	m	class:TestNode
__init__	test/functional/test_runner.py	/^    def __init__(self):$/;"	m	class:RPCCoverage
__init__	test/functional/test_runner.py	/^    def __init__(self, *, num_tests_parallel, tests_dir, tmpdir, test_list, flags, timeout_duration):$/;"	m	class:TestHandler
__init__	test/functional/test_runner.py	/^    def __init__(self, name, status, time):$/;"	m	class:TestResult
__init__	test/functional/wallet_labels.py	/^    def __init__(self, name):$/;"	m	class:Label
__init__	test/functional/wallet_resendwallettransactions.py	/^    def __init__(self):$/;"	m	class:P2PStoreTxInvs
__init__	test/lint/check-rpc-mappings.py	/^    def __init__(self, name, args):$/;"	m	class:RPCCommand
__init__	test/lint/check-rpc-mappings.py	/^    def __init__(self, names, idx):$/;"	m	class:RPCArgument
__iter__	test/functional/test_framework/script.py	/^    def __iter__(self):$/;"	m	class:CScript	file:
__metaclass__	test/functional/data/invalid_txs.py	/^    __metaclass__ = abc.ABCMeta$/;"	v	class:BadTxTemplate
__new__	test/functional/test_framework/script.py	/^    def __new__(cls, n):$/;"	m	class:CScriptOp	file:
__new__	test/functional/test_framework/script.py	/^    def __new__(cls, value=b''):$/;"	m	class:CScript	file:
__new__	test/functional/test_framework/test_framework.py	/^    def __new__(cls, clsname, bases, dct):$/;"	m	class:BitcoinTestMetaClass	file:
__pushKV	src/univalue/lib/univalue.cpp	/^void UniValue::__pushKV(const std::string& key, const UniValue& val_)$/;"	f	class:UniValue
__repr__	test/functional/p2p_invalid_messages.py	/^    def __repr__(self):$/;"	m	class:msg_unrecognized	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:BlockTransactions	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:BlockTransactionsRequest	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CAddress	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CBlock	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CBlockHeader	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CBlockLocator	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CInv	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CMerkleBlock	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:COutPoint	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CPartialMerkleTree	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CScriptWitness	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CTransaction	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CTxIn	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CTxInWitness	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CTxOut	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:CTxWitness	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:HeaderAndShortIDs	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:P2PHeaderAndShortIDs	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:PrefilledTransaction	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_addr	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_block	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_blocktxn	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_cmpctblock	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_feefilter	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_generic	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_getaddr	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_getblocks	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_getblocktxn	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_getdata	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_getheaders	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_headers	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_inv	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_mempool	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_notfound	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_ping	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_pong	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_reject	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_sendcmpct	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_sendheaders	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_tx	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_verack	file:
__repr__	test/functional/test_framework/messages.py	/^    def __repr__(self):$/;"	m	class:msg_version	file:
__repr__	test/functional/test_framework/script.py	/^    def __repr__(self):$/;"	m	class:CScript	file:
__repr__	test/functional/test_framework/script.py	/^    def __repr__(self):$/;"	m	class:CScriptOp	file:
__repr__	test/functional/test_framework/socks5.py	/^    def __repr__(self):$/;"	m	class:Socks5Command	file:
__repr__	test/functional/test_runner.py	/^    def __repr__(self):$/;"	m	class:TestResult	file:
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("addrFrom", "addrTo", "nNonce", "nRelay", "nServices",$/;"	v	class:msg_version
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("addrs",)$/;"	v	class:msg_addr
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("announce", "version")$/;"	v	class:msg_sendcmpct
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("block",)$/;"	v	class:msg_block
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("block_transactions",)$/;"	v	class:msg_blocktxn
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("block_txn_request",)$/;"	v	class:msg_getblocktxn
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("blockhash", "indexes")$/;"	v	class:BlockTransactionsRequest
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("blockhash", "transactions")$/;"	v	class:BlockTransactions
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("code", "data", "message", "reason")$/;"	v	class:msg_reject
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("command", "data")$/;"	v	class:msg_generic
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("feerate",)$/;"	v	class:msg_feefilter
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("hash", "hashMerkleRoot", "hashPrevBlock", "nBits", "nNonce",$/;"	v	class:CBlockHeader
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("hash", "n")$/;"	v	class:COutPoint
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("hash", "nLockTime", "nVersion", "sha256", "vin", "vout",$/;"	v	class:CTransaction
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("hash", "type")$/;"	v	class:CInv
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("hashstop", "locator",)$/;"	v	class:msg_getheaders
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("header", "nonce", "prefilled_txn", "prefilled_txn_length",$/;"	v	class:P2PHeaderAndShortIDs
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("header", "nonce", "prefilled_txn", "shortids", "use_witness")$/;"	v	class:HeaderAndShortIDs
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("header", "txn")$/;"	v	class:CMerkleBlock
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("header_and_shortids",)$/;"	v	class:msg_cmpctblock
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("headers",)$/;"	v	class:msg_headers
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("index", "tx")$/;"	v	class:PrefilledTransaction
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("inv",)$/;"	v	class:msg_getdata
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("inv",)$/;"	v	class:msg_inv
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("ip", "nServices", "pchReserved", "port", "time")$/;"	v	class:CAddress
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("locator", "hashstop")$/;"	v	class:msg_getblocks
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("nSequence", "prevout", "scriptSig")$/;"	v	class:CTxIn
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("nTransactions", "vBits", "vHash")$/;"	v	class:CPartialMerkleTree
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("nValue", "scriptPubKey")$/;"	v	class:CTxOut
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("nVersion", "vHave")$/;"	v	class:CBlockLocator
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("nonce",)$/;"	v	class:msg_ping
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("nonce",)$/;"	v	class:msg_pong
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("scriptWitness",)$/;"	v	class:CTxInWitness
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("stack",)$/;"	v	class:CScriptWitness
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("tx",)$/;"	v	class:msg_tx
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("vec", )$/;"	v	class:msg_notfound
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("vtx",)$/;"	v	class:CBlock
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ("vtxinwit",)$/;"	v	class:CTxWitness
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:P2PHeaderAndShortWitnessIDs
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:msg_getaddr
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:msg_mempool
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:msg_sendheaders
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:msg_verack
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:msg_witness_block
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:msg_witness_blocktxn
__slots__	test/functional/test_framework/messages.py	/^    __slots__ = ()$/;"	v	class:msg_witness_tx
__slots__	test/functional/test_framework/script.py	/^    __slots__ = ("value",)$/;"	v	class:CScriptNum
__slots__	test/functional/test_framework/script.py	/^    __slots__ = ()$/;"	v	class:CScript
__slots__	test/functional/test_framework/script.py	/^    __slots__ = ()$/;"	v	class:CScriptOp
__str__	test/functional/test_framework/script.py	/^    def __str__(self):$/;"	m	class:CScriptOp	file:
__truediv__	test/functional/test_framework/authproxy.py	/^    def __truediv__(self, relative_uri):$/;"	m	class:AuthServiceProxy	file:
__truediv__	test/functional/test_framework/coverage.py	/^    def __truediv__(self, relative_uri):$/;"	m	class:AuthServiceProxyWrapper	file:
__wrap___divmoddi4	src/compat/glibc_compat.cpp	/^extern "C" int64_t __wrap___divmoddi4(int64_t u, int64_t v, int64_t* rp)$/;"	f
__wrap_log2f	src/compat/glibc_compat.cpp	/^extern "C" float __wrap_log2f(float x)$/;"	f
_clear	src/txmempool.cpp	/^void CTxMemPool::_clear()$/;"	f	class:CTxMemPool
_convert_ip_port	test/functional/test_framework/netutil.py	/^def _convert_ip_port(array):$/;"	f
_filename	src/leveldb/util/env_win.cc	/^    const std::string _filename;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_filename	src/leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_filename	src/leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_get_response	test/functional/test_framework/authproxy.py	/^    def _get_response(self):$/;"	m	class:AuthServiceProxy
_get_uncovered_rpc_commands	test/functional/test_runner.py	/^    def _get_uncovered_rpc_commands(self):$/;"	m	class:RPCCoverage
_hFile	src/leveldb/util/env_win.cc	/^    ::HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_hFile	src/leveldb/util/env_win.cc	/^    ::HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32WritableFile	file:
_hFile	src/leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_hFile	src/leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_initialize_chain	test/functional/test_framework/test_framework.py	/^    def _initialize_chain(self):$/;"	m	class:BitcoinTestFramework
_initialize_chain_clean	test/functional/test_framework/test_framework.py	/^    def _initialize_chain_clean(self):$/;"	m	class:BitcoinTestFramework
_instance	src/support/lockedpool.cpp	/^LockedPoolManager* LockedPoolManager::_instance = nullptr;$/;"	m	class:LockedPoolManager	file:
_instance	src/support/lockedpool.h	/^    static LockedPoolManager* _instance;$/;"	m	class:LockedPoolManager
_log_call	test/functional/test_framework/coverage.py	/^    def _log_call(self):$/;"	m	class:AuthServiceProxyWrapper
_log_message	test/functional/test_framework/mininode.py	/^    def _log_message(self, direction, msg):$/;"	m	class:P2PConnection
_node_msg	test/functional/test_framework/test_node.py	/^    def _node_msg(self, msg: str) -> str:$/;"	m	class:TestNode
_ohai	contrib/testgen/base58.py	/^    _ohai = 'o hai'.encode('ascii')$/;"	v
_on_data	test/functional/test_framework/mininode.py	/^    def _on_data(self):$/;"	m	class:P2PConnection
_opcode_instances	test/functional/test_framework/script.py	/^_opcode_instances = []$/;"	v
_orig_escape_cdata	contrib/devtools/update-translations.py	/^_orig_escape_cdata = None$/;"	v
_pFileProxy	src/leveldb/util/env_win.cc	/^    WritableFile* _pFileProxy;$/;"	m	class:leveldb::Win32::Win32Logger	file:
_platformStyle	src/qt/bitcoingui.cpp	/^    platformStyle(_platformStyle),$/;"	v
_raise_assertion_error	test/functional/test_framework/test_node.py	/^    def _raise_assertion_error(self, msg: str):$/;"	m	class:TestNode
_remove_empty	test/functional/test_framework/netutil.py	/^def _remove_empty(array):$/;"	f
_repr	test/functional/test_framework/script.py	/^        def _repr(o):$/;"	f	function:CScript.__repr__
_request	test/functional/test_framework/authproxy.py	/^    def _request(self, method, path, postdata):$/;"	m	class:AuthServiceProxy
_run_loopback_tests	test/functional/rpc_bind.py	/^    def _run_loopback_tests(self):$/;"	m	class:RPCBindTest
_run_nonloopback_tests	test/functional/rpc_bind.py	/^    def _run_nonloopback_tests(self):$/;"	m	class:RPCBindTest
_set_conn	test/functional/test_framework/authproxy.py	/^    def _set_conn(self, connection=None):$/;"	m	class:AuthServiceProxy
_size	src/prevector.h	/^    size_type _size = 0;$/;"	m	class:prevector
_start_logging	test/functional/test_framework/test_framework.py	/^    def _start_logging(self):$/;"	m	class:BitcoinTestFramework
_start_perf	test/functional/test_framework/test_node.py	/^    def _start_perf(self, profile_name=None):$/;"	m	class:TestNode
_stop_perf	test/functional/test_framework/test_node.py	/^    def _stop_perf(self, profile_name):$/;"	m	class:TestNode
_test_connection_count	test/functional/rpc_net.py	/^    def _test_connection_count(self):$/;"	m	class:NetTest
_test_getaddednodeinfo	test/functional/rpc_net.py	/^    def _test_getaddednodeinfo(self):$/;"	m	class:NetTest
_test_getblockchaininfo	test/functional/rpc_blockchain.py	/^    def _test_getblockchaininfo(self):$/;"	m	class:BlockchainTest
_test_getblockheader	test/functional/rpc_blockchain.py	/^    def _test_getblockheader(self):$/;"	m	class:BlockchainTest
_test_getchaintxstats	test/functional/rpc_blockchain.py	/^    def _test_getchaintxstats(self):$/;"	m	class:BlockchainTest
_test_getdifficulty	test/functional/rpc_blockchain.py	/^    def _test_getdifficulty(self):$/;"	m	class:BlockchainTest
_test_getnettotals	test/functional/rpc_net.py	/^    def _test_getnettotals(self):$/;"	m	class:NetTest
_test_getnetworkhashps	test/functional/rpc_blockchain.py	/^    def _test_getnetworkhashps(self):$/;"	m	class:BlockchainTest
_test_getnetworkinginfo	test/functional/rpc_net.py	/^    def _test_getnetworkinginfo(self):$/;"	m	class:NetTest
_test_getnodeaddresses	test/functional/rpc_net.py	/^    def _test_getnodeaddresses(self):$/;"	m	class:NetTest
_test_getpeerinfo	test/functional/rpc_net.py	/^    def _test_getpeerinfo(self):$/;"	m	class:NetTest
_test_gettxoutsetinfo	test/functional/rpc_blockchain.py	/^    def _test_gettxoutsetinfo(self):$/;"	m	class:BlockchainTest
_test_stopatheight	test/functional/rpc_blockchain.py	/^    def _test_stopatheight(self):$/;"	m	class:BlockchainTest
_test_uptime	test/functional/rpc_uptime.py	/^    def _test_uptime(self):$/;"	m	class:UptimeTest
_test_waitforblockheight	test/functional/rpc_blockchain.py	/^    def _test_waitforblockheight(self):$/;"	m	class:BlockchainTest
_tmp	contrib/testgen/base58.py	/^    _tmp = b58encode(_ohai)$/;"	v
_tweak_msg_data_size	test/functional/p2p_invalid_messages.py	/^    def _tweak_msg_data_size(self, message, wrong_size):$/;"	m	class:InvalidMessagesTest
_union	src/prevector.h	/^    } _union = {};$/;"	m	class:prevector	typeref:union:prevector::direct_or_indirect
_zmq_test	test/functional/interface_zmq.py	/^    def _zmq_test(self):$/;"	m	class:ZMQTest
a	test/functional/wallet_createwallet.py	/^        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')$/;"	i
a	test/functional/wallet_createwallet.py	/^        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Ranged descriptor import should fail without a specified range")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a 1-of-2 bare multisig from descriptor")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address as watch only")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address with key")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2pkh address from descriptor")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with private key")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with public key")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal flag")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal flag")$/;"	i
a	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
a2b_hex	contrib/seeds/generate-seeds.py	/^from binascii import a2b_hex$/;"	i
abandonAction	src/qt/transactionview.h	/^    QAction *abandonAction;$/;"	m	class:TransactionView
abandonTx	src/qt/transactionview.cpp	/^void TransactionView::abandonTx()$/;"	f	class:TransactionView
abandontransaction	src/wallet/rpcwallet.cpp	/^static UniValue abandontransaction(const JSONRPCRequest& request)$/;"	f	file:
abc	test/functional/data/invalid_txs.py	/^import abc$/;"	i
abortrescan	src/wallet/rpcdump.cpp	/^UniValue abortrescan(const JSONRPCRequest& request)$/;"	f
aboutAction	src/qt/bitcoingui.h	/^    QAction* aboutAction = nullptr;$/;"	m	class:BitcoinGUI
aboutClicked	src/qt/bitcoingui.cpp	/^void BitcoinGUI::aboutClicked()$/;"	f	class:BitcoinGUI
aboutQtAction	src/qt/bitcoingui.h	/^    QAction* aboutQtAction = nullptr;$/;"	m	class:BitcoinGUI
abs64	src/timedata.cpp	/^static int64_t abs64(int64_t n)$/;"	f	file:
absFolder	contrib/devtools/optimize-pngs.py	/^    absFolder=os.path.join(basePath, folder)$/;"	v
abs_builddir	Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_builddir	doc/man/Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/doc\/man$/;"	m
abs_builddir	src/Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src$/;"	m
abs_builddir	src/secp256k1/Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_builddir	src/univalue/Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_srcdir	doc/man/Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/doc\/man$/;"	m
abs_srcdir	src/Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src$/;"	m
abs_srcdir	src/secp256k1/Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_srcdir	src/univalue/Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_builddir	doc/man/Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_builddir	src/Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_builddir	src/secp256k1/Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_top_builddir	src/univalue/Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_srcdir	doc/man/Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_srcdir	src/Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_srcdir	src/secp256k1/Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_top_srcdir	src/univalue/Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	doc/man/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	src/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	src/secp256k1/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	src/univalue/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	doc/man/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	src/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	src/secp256k1/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	src/univalue/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC_FOR_BUILD	src/secp256k1/Makefile	/^ac_ct_CC_FOR_BUILD = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	doc/man/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	src/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	src/univalue/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	doc/man/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	src/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	src/secp256k1/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	src/univalue/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_OBJCXX	Makefile	/^ac_ct_OBJCXX = $/;"	m
ac_ct_OBJCXX	doc/man/Makefile	/^ac_ct_OBJCXX = $/;"	m
ac_ct_OBJCXX	src/Makefile	/^ac_ct_OBJCXX = $/;"	m
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	src/secp256k1/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	src/univalue/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	src/secp256k1/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	src/univalue/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	src/secp256k1/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	src/secp256k1/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	src/secp256k1/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	src/univalue/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	src/secp256k1/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	src/univalue/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	src/secp256k1/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	src/univalue/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	src/secp256k1/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	src/univalue/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_check_decl	configure	/^ac_fn_cxx_check_decl ()$/;"	f
ac_fn_cxx_check_func	configure	/^ac_fn_cxx_check_func ()$/;"	f
ac_fn_cxx_check_header_mongrel	configure	/^ac_fn_cxx_check_header_mongrel ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_compile	src/univalue/configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_cpp	src/univalue/configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
ac_fn_cxx_try_link	src/univalue/configure	/^ac_fn_cxx_try_link ()$/;"	f
ac_fn_cxx_try_run	configure	/^ac_fn_cxx_try_run ()$/;"	f
ac_fn_objcxx_try_compile	configure	/^ac_fn_objcxx_try_compile ()$/;"	f
accept	src/qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::accept()$/;"	f	class:AskPassphraseDialog
accept	src/qt/editaddressdialog.cpp	/^void EditAddressDialog::accept()$/;"	f	class:EditAddressDialog
accept	src/qt/openuridialog.cpp	/^void OpenURIDialog::accept()$/;"	f	class:OpenURIDialog
accept	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::accept()$/;"	f	class:ReceiveCoinsDialog
accept	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::accept()$/;"	f	class:SendCoinsDialog
activateCSV	test/functional/feature_bip68_sequence.py	/^    def activateCSV(self):$/;"	m	class:BIP68Test
active	src/logging.h	/^    bool active;$/;"	m	struct:CLogCategoryActive
activeTxn	src/wallet/db.h	/^    DbTxn* activeTxn;$/;"	m	class:BerkeleyBatch
actor	src/rpc/server.h	/^    Actor actor;$/;"	m	class:CRPCCommand
add	test/functional/test_framework/key.py	/^    def add(self, p1, p2):$/;"	m	class:EllipticCurve
addCoin	src/bench/coin_selection.cpp	/^static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<std::unique_ptr<CWalletTx>>& wtxs)$/;"	f	file:
addColumn	src/qt/csvmodelwriter.cpp	/^void CSVModelWriter::addColumn(const QString &title, int column, int role)$/;"	f	class:CSVModelWriter
addEntry	src/qt/sendcoinsdialog.cpp	/^SendCoinsEntry *SendCoinsDialog::addEntry()$/;"	f	class:SendCoinsDialog
addNewRequest	src/qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)$/;"	f	class:RecentRequestsTableModel
addNewRequest	src/qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient)$/;"	f	class:RecentRequestsTableModel
addNewRequest	src/qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(const std::string &recipient)$/;"	f	class:RecentRequestsTableModel
addOverriddenOption	src/qt/optionsmodel.cpp	/^void OptionsModel::addOverriddenOption(const std::string &option)$/;"	f	class:OptionsModel
addPackageTxs	src/miner.cpp	/^void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)$/;"	f	class:BlockAssembler
addRow	src/qt/addresstablemodel.cpp	/^QString AddressTableModel::addRow(const QString &type, const QString &label, const QString &address, const OutputType address_type)$/;"	f	class:AddressTableModel
addTransaction	src/txmempool.h	/^    void addTransaction(const CTransactionRef& tx)$/;"	f	struct:DisconnectedBlockTransactions
addUnchecked	src/txmempool.cpp	/^void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, bool validFeeEstimate)$/;"	f	class:CTxMemPool
addUnchecked	src/txmempool.cpp	/^void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)$/;"	f	class:CTxMemPool
addWallet	src/qt/bitcoingui.cpp	/^void BitcoinGUI::addWallet(WalletModel* walletModel)$/;"	f	class:BitcoinGUI
addWallet	src/qt/rpcconsole.cpp	/^void RPCConsole::addWallet(WalletModel * const walletModel)$/;"	f	class:RPCConsole
addWallet	src/qt/walletcontroller.cpp	/^void WalletController::addWallet(WalletModel* wallet_model)$/;"	f	class:WalletController
addWallet	src/qt/walletframe.cpp	/^void WalletFrame::addWallet(WalletModel *walletModel)$/;"	f	class:WalletFrame
add_address	test/functional/wallet_labels.py	/^    def add_address(self, address):$/;"	m	class:Label
add_build_flags_func	depends/builders/default.mk	/^define add_build_flags_func$/;"	m
add_build_tool_func	depends/builders/default.mk	/^define add_build_tool_func$/;"	m
add_coin	src/bench/coin_selection.cpp	/^static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>& set)$/;"	f	file:
add_coin	src/wallet/test/coinselector_tests.cpp	/^static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)$/;"	f	file:
add_coin	src/wallet/test/coinselector_tests.cpp	/^static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)$/;"	f	file:
add_coin	src/wallet/test/coinselector_tests.cpp	/^static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)$/;"	f	file:
add_host_flags_func	depends/hosts/default.mk	/^define add_host_flags_func$/;"	m
add_host_tool_func	depends/hosts/default.mk	/^define add_host_tool_func$/;"	m
add_mixed	test/functional/test_framework/key.py	/^    def add_mixed(self, p1, p2):$/;"	m	class:EllipticCurve
add_nodes	test/functional/test_framework/test_framework.py	/^    def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):$/;"	m	class:BitcoinTestFramework
add_onion_cb	src/torcontrol.cpp	/^void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
add_options	test/functional/rpc_bind.py	/^    def add_options(self, parser):$/;"	m	class:RPCBindTest
add_options	test/functional/rpc_getblockstats.py	/^    def add_options(self, parser):$/;"	m	class:GetblockstatsTest
add_options	test/functional/test_framework/test_framework.py	/^    def add_options(self, parser):$/;"	m	class:BitcoinTestFramework
add_options	test/functional/wallet_txn_clone.py	/^    def add_options(self, parser):$/;"	m	class:TxnMallTest
add_options	test/functional/wallet_txn_doublespend.py	/^    def add_options(self, parser):$/;"	m	class:TxnMallTest
add_p2p_connection	test/functional/test_framework/test_node.py	/^    def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):$/;"	m	class:TestNode
add_receive_address	test/functional/wallet_labels.py	/^    def add_receive_address(self, address):$/;"	m	class:Label
add_transactions_to_block	test/functional/feature_block.py	/^    def add_transactions_to_block(self, block, tx_list):$/;"	m	class:FullBlockTest
add_witness_commitment	test/functional/feature_bip68_sequence.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment$/;"	i
add_witness_commitment	test/functional/feature_nulldummy.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction, add_witness_commitment$/;"	i
add_witness_commitment	test/functional/p2p_compactblocks.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment$/;"	i
add_witness_commitment	test/functional/p2p_segwit.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER$/;"	i
add_witness_commitment	test/functional/test_framework/blocktools.py	/^def add_witness_commitment(block, nonce=0):$/;"	f
add_witness_commitment	test/functional/wallet_bumpfee.py	/^from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness$/;"	i
added_files	src/leveldb/db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
addmultisigaddress	src/wallet/rpcwallet.cpp	/^static UniValue addmultisigaddress(const JSONRPCRequest& request)$/;"	f	file:
addnode	src/rpc/net.cpp	/^static UniValue addnode(const JSONRPCRequest& request)$/;"	f	file:
addr	src/chainparams.h	/^    uint8_t addr[16];$/;"	m	struct:SeedSpec6
addr	src/net.cpp	/^    CAddress addr;$/;"	m	struct:NodeEvictionCandidate	file:
addr	src/net.h	/^    CAddress addr;$/;"	m	class:CNodeStats
addr	src/net.h	/^    const CAddress addr;$/;"	m	class:CNode
addr1	src/test/key_tests.cpp	/^static const std::string addr1 = "1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ";$/;"	v	file:
addr1C	src/test/key_tests.cpp	/^static const std::string addr1C = "1NoJrossxPBKfCHuJXT4HadJrXRE9Fxiqs";$/;"	v	file:
addr2	src/test/key_tests.cpp	/^static const std::string addr2 = "1F5y5E5FMc5YzdJtB9hLaUe43GDxEKXENJ";$/;"	v	file:
addr2C	src/test/key_tests.cpp	/^static const std::string addr2C = "1CRj2HyM1CXWzHAXLQtiGLyggNT9WQqsDs";$/;"	v	file:
addrBind	src/net.h	/^    CAddress addrBind;$/;"	m	class:CNodeStats
addrBind	src/net.h	/^    const CAddress addrBind;$/;"	m	class:CNode
addrKnown	src/net.h	/^    CRollingBloomFilter addrKnown;$/;"	m	class:CNode
addrLocal	src/net.h	/^    std::string addrLocal;$/;"	m	class:CNodeStats
addrName	src/net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
addr_to_hex	test/functional/rpc_bind.py	/^from test_framework.netutil import all_interfaces, addr_to_hex, get_bind_addrs, test_ipv6_local$/;"	i
addr_to_hex	test/functional/test_framework/netutil.py	/^def addr_to_hex(addr):$/;"	f
address	src/net_processing.cpp	/^    const CService address;$/;"	m	struct:__anon89::CNodeState	file:
address	src/qt/addresstablemodel.cpp	/^    QString address;$/;"	m	struct:AddressTableEntry	file:
address	src/qt/editaddressdialog.h	/^    QString address;$/;"	m	class:EditAddressDialog
address	src/qt/transactionrecord.h	/^    std::string address;$/;"	m	class:TransactionRecord
address	src/qt/walletmodel.h	/^    QString address;$/;"	m	class:SendCoinsRecipient
address	src/zmq/zmqabstractnotifier.h	/^    std::string address;$/;"	m	class:CZMQAbstractNotifier
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address with key")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2pkh address from descriptor")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key and with watchonly")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with public key")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
address	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an invalid address")$/;"	i
addressBookTests	src/qt/test/addressbooktests.cpp	/^void AddressBookTests::addressBookTests()$/;"	f	class:AddressBookTests
addressColor	src/qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::addressColor(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
addressInArena	src/support/lockedpool.h	/^    bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }$/;"	f	class:Arena
addressTableModel	src/qt/walletmodel.h	/^    AddressTableModel *addressTableModel;$/;"	m	class:WalletModel
addrman	src/net.h	/^    CAddrMan addrman;$/;"	m	class:CConnman
adjustTableColumnsWidth	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
advance_to_segwit_active	test/functional/p2p_segwit.py	/^    def advance_to_segwit_active(self):$/;"	m	class:SegWitTest
affine	test/functional/test_framework/key.py	/^    def affine(self, p1):$/;"	m	class:EllipticCurve
aix_post_process_depfile	build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
aix_post_process_depfile	src/secp256k1/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
aix_post_process_depfile	src/univalue/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
alert_filename	test/functional/mempool_reorg.py	/^    alert_filename = None  # Set by setup_network$/;"	v	class:MempoolCoinbaseTest
alias	contrib/macdeploy/custom_dsstore.py	/^alias = Alias.from_bytes(icvp['backgroundImageAlias'])$/;"	v
align_up	src/support/lockedpool.cpp	/^static inline size_t align_up(size_t x, size_t align)$/;"	f	file:
alignment	src/support/lockedpool.h	/^    size_t alignment;$/;"	m	class:Arena
allColumnsMinimumWidth	src/qt/guiutil.h	/^            int allColumnsMinimumWidth;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
allInvsMatch	test/functional/p2p_feefilter.py	/^def allInvsMatch(invsExpected, testnode):$/;"	f
allNetMessageTypes	src/protocol.cpp	/^const static std::string allNetMessageTypes[] = {$/;"	v	file:
all_interfaces	test/functional/rpc_bind.py	/^from test_framework.netutil import all_interfaces, addr_to_hex, get_bind_addrs, test_ipv6_local$/;"	i
all_interfaces	test/functional/test_framework/netutil.py	/^def all_interfaces():$/;"	f
all_packages	depends/Makefile	/^all_packages = $(packages) $(native_packages)$/;"	m
all_rlt_txs	test/functional/feature_csv_activation.py	/^def all_rlt_txs(txs):$/;"	f
all_ts_files	contrib/devtools/update-translations.py	/^def all_ts_files(suffix=''):$/;"	f
alloc	src/support/lockedpool.cpp	/^void* Arena::alloc(size_t size)$/;"	f	class:Arena
alloc	src/support/lockedpool.cpp	/^void* LockedPool::alloc(size_t size)$/;"	f	class:LockedPool
alloc_bytes_remaining_	src/leveldb/util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	src/leveldb/util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allocate	src/support/allocators/secure.h	/^    T* allocate(std::size_t n, const void* hint = 0)$/;"	f
allocated_memory	src/prevector.h	/^    size_t allocated_memory() const {$/;"	f	class:prevector
allocator	src/support/lockedpool.h	/^        LockedPageAllocator *allocator;$/;"	m	class:LockedPool::LockedPageArena
allocator	src/support/lockedpool.h	/^    std::unique_ptr<LockedPageAllocator> allocator;$/;"	m	class:LockedPool
allocator_type	src/streams.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
allow_erase	src/cuckoocache.h	/^    inline void allow_erase(uint32_t n) const$/;"	f	class:CuckooCache::cache
allowed_	src/leveldb/util/env_posix.cc	/^  port::AtomicPointer allowed_;$/;"	m	class:leveldb::__anon8::Limiter	file:
allowed_seeks	src/leveldb/db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
almostEqual	src/test/arith_uint256_tests.cpp	/^static bool almostEqual(double d1, double d2)$/;"	f	file:
already	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
altstacktop	src/script/interpreter.cpp	/^#define altstacktop(/;"	d	file:
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__CONFIG_DISTCLEAN_FILES	src/secp256k1/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__CONFIG_DISTCLEAN_FILES	src/univalue/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	src/Makefile	/^am__DEPENDENCIES_1 = $(am__append_18)$/;"	m
am__DEPENDENCIES_10	src/Makefile	/^am__DEPENDENCIES_10 = $(LIBBITCOIN_SERVER) \\$/;"	m
am__DEPENDENCIES_11	src/Makefile	/^am__DEPENDENCIES_11 =  \\$/;"	m
am__DEPENDENCIES_2	src/Makefile	/^am__DEPENDENCIES_2 = $(am__append_19)$/;"	m
am__DEPENDENCIES_2	src/secp256k1/Makefile	/^am__DEPENDENCIES_2 =$/;"	m
am__DEPENDENCIES_3	src/Makefile	/^am__DEPENDENCIES_3 =$/;"	m
am__DEPENDENCIES_4	src/Makefile	/^am__DEPENDENCIES_4 = univalue\/libunivalue.la$/;"	m
am__DIST_COMMON	Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in \\$/;"	m
am__DIST_COMMON	doc/man/Makefile	/^am__DIST_COMMON = $(dist_man1_MANS) $(srcdir)\/Makefile.in$/;"	m
am__DIST_COMMON	src/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.bench.include \\$/;"	m
am__DIST_COMMON	src/secp256k1/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/libsecp256k1.pc.in \\$/;"	m
am__DIST_COMMON	src/univalue/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/univalue-config.h.in \\$/;"	m
am__EXEEXT_1	src/Makefile	/^am__EXEEXT_1 = bitcoind$(EXEEXT)$/;"	m
am__EXEEXT_1	src/univalue/Makefile	/^am__EXEEXT_1 = test\/object$(EXEEXT) test\/unitester$(EXEEXT) \\$/;"	m
am__EXEEXT_2	src/Makefile	/^am__EXEEXT_2 = bitcoin-cli$(EXEEXT)$/;"	m
am__EXEEXT_2	src/secp256k1/Makefile	/^am__EXEEXT_2 = tests$(EXEEXT)$/;"	m
am__EXEEXT_3	src/Makefile	/^am__EXEEXT_3 = bitcoin-tx$(EXEEXT)$/;"	m
am__EXEEXT_3	src/secp256k1/Makefile	/^am__EXEEXT_3 = exhaustive_tests$(EXEEXT)$/;"	m
am__EXEEXT_5	src/Makefile	/^am__EXEEXT_5 = test\/test_bitcoin$(EXEEXT)$/;"	m
am__EXEEXT_9	src/Makefile	/^am__EXEEXT_9 =  \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/ax_boost_base.m4 \\$/;"	m
am__aclocal_m4_deps	doc/man/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/ax_boost_base.m4 \\$/;"	m
am__aclocal_m4_deps	src/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/ax_boost_base.m4 \\$/;"	m
am__aclocal_m4_deps	src/secp256k1/Makefile	/^am__aclocal_m4_deps =  \\$/;"	m
am__aclocal_m4_deps	src/univalue/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/libtool.m4 \\$/;"	m
am__append_1	Makefile	/^am__append_1 = doc\/man$/;"	m
am__append_1	doc/man/Makefile	/^am__append_1 = bitcoind.1$/;"	m
am__append_1	src/Makefile	/^am__append_1 = $(LIBBITCOIN_CRYPTO_SSE41)$/;"	m
am__append_13	src/secp256k1/Makefile	/^am__append_13 = include\/secp256k1_recovery.h$/;"	m
am__append_14	src/secp256k1/Makefile	/^am__append_14 =  \\$/;"	m
am__append_17	src/Makefile	/^am__append_17 = $(LIBLEVELDB_INT) \\$/;"	m
am__append_18	src/Makefile	/^am__append_18 = $(LIBLEVELDB_INT)$/;"	m
am__append_19	src/Makefile	/^am__append_19 = $(LIBMEMENV_INT)$/;"	m
am__append_2	src/Makefile	/^am__append_2 = $(LIBBITCOIN_CRYPTO_AVX2)$/;"	m
am__append_2	src/secp256k1/Makefile	/^am__append_2 = tests$/;"	m
am__append_20	src/Makefile	/^am__append_20 = -I$(srcdir)\/leveldb\/include \\$/;"	m
am__append_22	src/Makefile	/^am__append_22 = -DLEVELDB_PLATFORM_POSIX$/;"	m
am__append_24	src/Makefile	/^am__append_24 = leveldb\/port\/port_posix.cc$/;"	m
am__append_25	src/Makefile	/^am__append_25 = -DLEVELDB_PLATFORM_POSIX_SSE$/;"	m
am__append_26	src/Makefile	/^am__append_26 = $(SSE42_CXXFLAGS)$/;"	m
am__append_28	src/Makefile	/^am__append_28 = test\/test_bitcoin$/;"	m
am__append_3	doc/man/Makefile	/^am__append_3 = bitcoin-cli.1$/;"	m
am__append_3	src/Makefile	/^am__append_3 = $(LIBBITCOIN_CRYPTO_SHANI)$/;"	m
am__append_3	src/secp256k1/Makefile	/^am__append_3 = -DVERIFY$/;"	m
am__append_34	src/Makefile	/^am__append_34 = $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)$/;"	m
am__append_35	src/Makefile	/^am__append_35 = $(CLEAN_BITCOIN_TEST)$/;"	m
am__append_4	doc/man/Makefile	/^am__append_4 = bitcoin-tx.1$/;"	m
am__append_4	src/Makefile	/^am__append_4 = bitcoind$/;"	m
am__append_4	src/secp256k1/Makefile	/^am__append_4 = tests$/;"	m
am__append_5	src/Makefile	/^am__append_5 = bitcoin-cli$/;"	m
am__append_5	src/secp256k1/Makefile	/^am__append_5 = exhaustive_tests$/;"	m
am__append_6	src/Makefile	/^am__append_6 = bitcoin-tx$/;"	m
am__append_6	src/secp256k1/Makefile	/^am__append_6 = -DVERIFY$/;"	m
am__append_7	src/secp256k1/Makefile	/^am__append_7 = exhaustive_tests$/;"	m
am__append_8	src/Makefile	/^am__append_8 = dummywallet.cpp$/;"	m
am__append_8	src/secp256k1/Makefile	/^am__append_8 = -I$(top_srcdir)$/;"	m
am__append_9	src/Makefile	/^am__append_9 = crypto\/sha256_sse4.cpp$/;"	m
am__append_9	src/secp256k1/Makefile	/^am__append_9 = -Wall -Wextra -Wno-unused-function$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__base_list	doc/man/Makefile	/^am__base_list = \\$/;"	m
am__base_list	src/Makefile	/^am__base_list = \\$/;"	m
am__base_list	src/secp256k1/Makefile	/^am__base_list = \\$/;"	m
am__base_list	src/univalue/Makefile	/^am__base_list = \\$/;"	m
am__bench_bench_bitcoin_SOURCES_DIST	src/Makefile	/^am__bench_bench_bitcoin_SOURCES_DIST = bench\/data\/block413567.raw \\$/;"	m
am__bench_ecdh_SOURCES_DIST	src/secp256k1/Makefile	/^am__bench_ecdh_SOURCES_DIST = src\/bench_ecdh.c$/;"	m
am__bench_internal_SOURCES_DIST	src/secp256k1/Makefile	/^am__bench_internal_SOURCES_DIST = src\/bench_internal.c$/;"	m
am__bench_recover_SOURCES_DIST	src/secp256k1/Makefile	/^am__bench_recover_SOURCES_DIST = src\/bench_recover.c$/;"	m
am__bench_sign_SOURCES_DIST	src/secp256k1/Makefile	/^am__bench_sign_SOURCES_DIST = src\/bench_sign.c$/;"	m
am__bench_verify_SOURCES_DIST	src/secp256k1/Makefile	/^am__bench_verify_SOURCES_DIST = src\/bench_verify.c$/;"	m
am__bitcoin_cli_SOURCES_DIST	src/Makefile	/^am__bitcoin_cli_SOURCES_DIST = bitcoin-cli.cpp bitcoin-cli-res.rc$/;"	m
am__bitcoin_tx_SOURCES_DIST	src/Makefile	/^am__bitcoin_tx_SOURCES_DIST = bitcoin-tx.cpp bitcoin-tx-res.rc$/;"	m
am__bitcoin_wallet_SOURCES_DIST	src/Makefile	/^am__bitcoin_wallet_SOURCES_DIST = bitcoin-wallet.cpp \\$/;"	m
am__bitcoind_SOURCES_DIST	src/Makefile	/^am__bitcoind_SOURCES_DIST = bitcoind.cpp bitcoind-res.rc$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	doc/man/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	src/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	src/secp256k1/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	src/univalue/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	doc/man/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	src/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	src/secp256k1/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	src/univalue/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__check_pre	src/Makefile	/^am__check_pre = \\$/;"	m
am__check_pre	src/secp256k1/Makefile	/^am__check_pre = \\$/;"	m
am__check_pre	src/univalue/Makefile	/^am__check_pre = \\$/;"	m
am__common_driver_flags	src/Makefile	/^am__common_driver_flags = \\$/;"	m
am__common_driver_flags	src/secp256k1/Makefile	/^am__common_driver_flags = \\$/;"	m
am__common_driver_flags	src/univalue/Makefile	/^am__common_driver_flags = \\$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	doc/man/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	src/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	src/secp256k1/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	src/univalue/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__copy_in_global_log_rx	src/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__copy_in_global_log_rx	src/secp256k1/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__copy_in_global_log_rx	src/univalue/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__create_global_log	src/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__create_global_log	src/secp256k1/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__create_global_log	src/univalue/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__crypto_libbitcoin_crypto_base_a_SOURCES_DIST	src/Makefile	/^am__crypto_libbitcoin_crypto_base_a_SOURCES_DIST = crypto\/aes.cpp \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	src/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	src/secp256k1/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	src/univalue/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_remade	src/Makefile	/^am__depfiles_remade = .\/$(DEPDIR)\/bitcoin_cli-bitcoin-cli.Po \\$/;"	m
am__depfiles_remade	src/secp256k1/Makefile	/^am__depfiles_remade = src\/$(DEPDIR)\/bench_ecdh.Po \\$/;"	m
am__depfiles_remade	src/univalue/Makefile	/^am__depfiles_remade = lib\/$(DEPDIR)\/libunivalue_la-univalue.Plo \\$/;"	m
am__dirstamp	src/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	src/secp256k1/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	src/univalue/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__distuninstallcheck_listfiles	src/secp256k1/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__distuninstallcheck_listfiles	src/univalue/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__exhaustive_tests_SOURCES_DIST	src/secp256k1/Makefile	/^am__exhaustive_tests_SOURCES_DIST = src\/tests_exhaustive.c$/;"	m
am__global_test_result_rx	src/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__global_test_result_rx	src/secp256k1/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__global_test_result_rx	src/univalue/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include	doc/man/Makefile	/^am__include = include$/;"	m
am__include	src/Makefile	/^am__include = include$/;"	m
am__include	src/secp256k1/Makefile	/^am__include = include$/;"	m
am__include	src/univalue/Makefile	/^am__include = include$/;"	m
am__include_HEADERS_DIST	src/Makefile	/^am__include_HEADERS_DIST = script\/bitcoinconsensus.h$/;"	m
am__include_HEADERS_DIST	src/secp256k1/Makefile	/^am__include_HEADERS_DIST = include\/secp256k1.h \\$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__install_max	doc/man/Makefile	/^am__install_max = 40$/;"	m
am__install_max	src/Makefile	/^am__install_max = 40$/;"	m
am__install_max	src/secp256k1/Makefile	/^am__install_max = 40$/;"	m
am__install_max	src/univalue/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(pkgconfigdir)"$/;"	m
am__installdirs	doc/man/Makefile	/^am__installdirs = "$(DESTDIR)$(man1dir)"$/;"	m
am__installdirs	src/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(libdir)" \\$/;"	m
am__installdirs	src/secp256k1/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__installdirs	src/univalue/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	doc/man/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	src/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	src/secp256k1/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	src/univalue/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	doc/man/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	src/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	src/secp256k1/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	src/univalue/Makefile	/^am__leading_dot = .$/;"	m
am__leveldb_libleveldb_a_SOURCES_DIST	src/Makefile	/^am__leveldb_libleveldb_a_SOURCES_DIST = leveldb\/port\/atomic_pointer.h \\$/;"	m
am__leveldb_libleveldb_sse42_a_SOURCES_DIST	src/Makefile	/^am__leveldb_libleveldb_sse42_a_SOURCES_DIST =  \\$/;"	m
am__leveldb_libmemenv_a_SOURCES_DIST	src/Makefile	/^am__leveldb_libmemenv_a_SOURCES_DIST =  \\$/;"	m
am__libbitcoin_server_a_SOURCES_DIST	src/Makefile	/^am__libbitcoin_server_a_SOURCES_DIST = addrdb.cpp addrman.cpp \\$/;"	m
am__libbitcoin_util_a_SOURCES_DIST	src/Makefile	/^am__libbitcoin_util_a_SOURCES_DIST = support\/lockedpool.cpp \\$/;"	m
am__libbitcoin_zmq_a_SOURCES_DIST	src/Makefile	/^am__libbitcoin_zmq_a_SOURCES_DIST = zmq\/zmqabstractnotifier.cpp \\$/;"	m
am__libbitcoinconsensus_la_SOURCES_DIST	src/Makefile	/^am__libbitcoinconsensus_la_SOURCES_DIST = crypto\/aes.cpp crypto\/aes.h \\$/;"	m
am__libsecp256k1_common_la_SOURCES_DIST	src/secp256k1/Makefile	/^am__libsecp256k1_common_la_SOURCES_DIST = src\/asm\/field_10x26_arm.s$/;"	m
am__list_recheck_tests	src/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__list_recheck_tests	src/secp256k1/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__list_recheck_tests	src/univalue/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	doc/man/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	src/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	src/secp256k1/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	src/univalue/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	doc/man/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	src/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	src/secp256k1/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	src/univalue/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	doc/man/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	src/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	src/secp256k1/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	src/univalue/Makefile	/^am__make_running_with_option = \\$/;"	m
am__maybe_remake_depfiles	src/Makefile	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__maybe_remake_depfiles	src/secp256k1/Makefile	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__maybe_remake_depfiles	src/univalue/Makefile	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__mv	src/Makefile	/^am__mv = mv -f$/;"	m
am__mv	src/secp256k1/Makefile	/^am__mv = mv -f$/;"	m
am__mv	src/univalue/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	doc/man/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	src/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	src/secp256k1/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	src/univalue/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	doc/man/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	src/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	src/secp256k1/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	src/univalue/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	doc/man/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	src/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	src/secp256k1/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	src/univalue/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__noinst_HEADERS_DIST	src/secp256k1/Makefile	/^am__noinst_HEADERS_DIST = src\/scalar.h src\/scalar_4x64.h \\$/;"	m
am__objects_1	src/Makefile	/^am__objects_1 = crypto\/libbitcoin_crypto_base_a-sha256_sse4.$(OBJEXT)$/;"	m
am__objects_21	src/Makefile	/^am__objects_21 =  \\$/;"	m
am__objects_22	src/Makefile	/^am__objects_22 = crypto\/libbitcoinconsensus_la-aes.lo \\$/;"	m
am__objects_23	src/Makefile	/^am__objects_23 = libbitcoinconsensus_la-arith_uint256.lo \\$/;"	m
am__objects_3	src/Makefile	/^am__objects_3 = leveldb\/port\/libleveldb_a-port_posix.$(OBJEXT)$/;"	m
am__objects_39	src/Makefile	/^am__objects_39 = test\/fuzz_address_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_4	src/Makefile	/^am__objects_4 =$/;"	m
am__objects_40	src/Makefile	/^am__objects_40 = test\/fuzz_addrman_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_41	src/Makefile	/^am__objects_41 = test\/fuzz_banentry_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_42	src/Makefile	/^am__objects_42 = test\/fuzz_block_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_43	src/Makefile	/^am__objects_43 = test\/fuzz_blockheader_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_44	src/Makefile	/^am__objects_44 = test\/fuzz_blocklocator_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_45	src/Makefile	/^am__objects_45 = test\/fuzz_blockmerkleroot-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_46	src/Makefile	/^am__objects_46 = test\/fuzz_blocktransactions_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_47	src/Makefile	/^am__objects_47 = test\/fuzz_blocktransactionsrequest_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_48	src/Makefile	/^am__objects_48 = test\/fuzz_blockundo_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_49	src/Makefile	/^am__objects_49 = test\/fuzz_bloomfilter_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_5	src/Makefile	/^am__objects_5 = libbitcoin_server_a-dummywallet.$(OBJEXT)$/;"	m
am__objects_50	src/Makefile	/^am__objects_50 = test\/fuzz_coins_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_51	src/Makefile	/^am__objects_51 = test\/fuzz_diskblockindex_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_52	src/Makefile	/^am__objects_52 = test\/fuzz_inv_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_53	src/Makefile	/^am__objects_53 = test\/fuzz_messageheader_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_54	src/Makefile	/^am__objects_54 = test\/fuzz_netaddr_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_55	src/Makefile	/^am__objects_55 = test\/fuzz_script_flags-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_56	src/Makefile	/^am__objects_56 = test\/fuzz_service_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_57	src/Makefile	/^am__objects_57 = test\/fuzz_transaction_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_58	src/Makefile	/^am__objects_58 = test\/fuzz_txoutcompressor_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_59	src/Makefile	/^am__objects_59 = test\/fuzz_txundo_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_62	src/Makefile	/^am__objects_62 = test\/test_bitcoin-main.$(OBJEXT) \\$/;"	m
am__objects_65	src/Makefile	/^am__objects_65 = test\/test_bitcoin-arith_uint256_tests.$(OBJEXT) \\$/;"	m
am__objects_66	src/Makefile	/^am__objects_66 = $(am__objects_4) $(am__objects_4)$/;"	m
am__post_remove_distdir	Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__post_remove_distdir	src/secp256k1/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__post_remove_distdir	src/univalue/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__qt_bitcoin_qt_SOURCES_DIST	src/Makefile	/^am__qt_bitcoin_qt_SOURCES_DIST = qt\/main.cpp qt\/res\/bitcoin-qt-res.rc$/;"	m
am__qt_libbitcoinqt_a_SOURCES_DIST	src/Makefile	/^am__qt_libbitcoinqt_a_SOURCES_DIST = qt\/bantablemodel.cpp \\$/;"	m
am__qt_test_test_bitcoin_qt_SOURCES_DIST	src/Makefile	/^am__qt_test_test_bitcoin_qt_SOURCES_DIST = qt\/test\/apptests.cpp \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__quote	doc/man/Makefile	/^am__quote = $/;"	m
am__quote	src/Makefile	/^am__quote = $/;"	m
am__quote	src/secp256k1/Makefile	/^am__quote = $/;"	m
am__quote	src/univalue/Makefile	/^am__quote = $/;"	m
am__recheck_rx	src/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recheck_rx	src/secp256k1/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recheck_rx	src/univalue/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recursive_targets	Makefile	/^am__recursive_targets = \\$/;"	m
am__recursive_targets	src/Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__relativize	src/Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__remove_distdir	src/secp256k1/Makefile	/^am__remove_distdir = \\$/;"	m
am__remove_distdir	src/univalue/Makefile	/^am__remove_distdir = \\$/;"	m
am__rst_title	src/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__rst_title	src/secp256k1/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__rst_title	src/univalue/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__set_TESTS_bases	src/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_TESTS_bases	src/secp256k1/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_TESTS_bases	src/univalue/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_b	src/Makefile	/^am__set_b = \\$/;"	m
am__set_b	src/secp256k1/Makefile	/^am__set_b = \\$/;"	m
am__set_b	src/univalue/Makefile	/^am__set_b = \\$/;"	m
am__sh_e_setup	src/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__sh_e_setup	src/secp256k1/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__sh_e_setup	src/univalue/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	doc/man/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	src/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	src/secp256k1/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	src/univalue/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	doc/man/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	src/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	src/secp256k1/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	src/univalue/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	doc/man/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	src/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	src/secp256k1/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	src/univalue/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__test_fuzz_address_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_address_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_addrman_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_addrman_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_banentry_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_banentry_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_block_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_block_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_blockheader_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_blockheader_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blocklocator_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_blocklocator_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blockmerkleroot_SOURCES_DIST	src/Makefile	/^am__test_fuzz_blockmerkleroot_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_blocktransactions_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_blocktransactions_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blocktransactionsrequest_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_blocktransactionsrequest_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blockundo_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_blockundo_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_bloomfilter_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_bloomfilter_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_coins_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_coins_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_diskblockindex_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_diskblockindex_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_inv_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_inv_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_messageheader_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_messageheader_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_netaddr_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_netaddr_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_script_flags_SOURCES_DIST	src/Makefile	/^am__test_fuzz_script_flags_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_service_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_service_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_transaction_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_transaction_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_txoutcompressor_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_txoutcompressor_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_txundo_deserialize_SOURCES_DIST	src/Makefile	/^am__test_fuzz_txundo_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_logs1	src/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs1	src/secp256k1/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs1	src/univalue/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs2	src/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_logs2	src/secp256k1/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_logs2	src/univalue/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_test_bitcoin_SOURCES_DIST	src/Makefile	/^am__test_test_bitcoin_SOURCES_DIST = test\/main.cpp test\/test_bitcoin.h \\$/;"	m
am__tests_SOURCES_DIST	src/secp256k1/Makefile	/^am__tests_SOURCES_DIST = src\/tests.c$/;"	m
am__tty_colors	src/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors	src/secp256k1/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors	src/univalue/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	src/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__tty_colors_dummy	src/secp256k1/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__tty_colors_dummy	src/univalue/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	doc/man/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	src/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	src/secp256k1/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	src/univalue/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	src/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	src/secp256k1/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	src/univalue/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	doc/man/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	src/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	src/secp256k1/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	src/univalue/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	src/Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	src/Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	src/Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCAS_	src/secp256k1/Makefile	/^am__v_CCAS_ = $(am__v_CCAS_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCAS_0	src/secp256k1/Makefile	/^am__v_CCAS_0 = @echo "  CCAS    " $@;$/;"	m
am__v_CCAS_1	src/secp256k1/Makefile	/^am__v_CCAS_1 = $/;"	m
am__v_CCLD_	src/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_	src/secp256k1/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	src/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	src/secp256k1/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	src/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	src/secp256k1/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	src/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_	src/secp256k1/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	src/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	src/secp256k1/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	src/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CC_1	src/secp256k1/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	src/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_	src/univalue/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	src/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_0	src/univalue/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	src/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXXLD_1	src/univalue/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	src/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_	src/univalue/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	src/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_0	src/univalue/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	src/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_CXX_1	src/univalue/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	doc/man/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	src/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	src/secp256k1/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	src/univalue/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	doc/man/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	src/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	src/secp256k1/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	src/univalue/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	doc/man/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	src/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	src/secp256k1/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	src/univalue/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_OBJCXXLD_	src/Makefile	/^am__v_OBJCXXLD_ = $(am__v_OBJCXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXXLD_0	src/Makefile	/^am__v_OBJCXXLD_0 = @echo "  OBJCXXLD" $@;$/;"	m
am__v_OBJCXXLD_1	src/Makefile	/^am__v_OBJCXXLD_1 = $/;"	m
am__v_OBJCXX_	src/Makefile	/^am__v_OBJCXX_ = $(am__v_OBJCXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXX_0	src/Makefile	/^am__v_OBJCXX_0 = @echo "  OBJCXX  " $@;$/;"	m
am__v_OBJCXX_1	src/Makefile	/^am__v_OBJCXX_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	doc/man/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	src/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	src/secp256k1/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	src/univalue/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	doc/man/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	src/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	src/secp256k1/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	src/univalue/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	doc/man/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	src/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	src/secp256k1/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	src/univalue/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	doc/man/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	src/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	src/secp256k1/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	src/univalue/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	doc/man/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	src/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	src/secp256k1/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	src/univalue/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	doc/man/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	src/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	src/secp256k1/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	src/univalue/Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	src/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	src/secp256k1/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	src/univalue/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	src/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	src/secp256k1/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	src/univalue/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	src/Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	src/secp256k1/Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	src/univalue/Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	doc/man/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	src/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	src/secp256k1/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	src/univalue/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	doc/man/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	src/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	src/secp256k1/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	src/univalue/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_bitcoin_cli_OBJECTS	src/Makefile	/^am_bitcoin_cli_OBJECTS = bitcoin_cli-bitcoin-cli.$(OBJEXT) \\$/;"	m
am_bitcoin_tx_OBJECTS	src/Makefile	/^am_bitcoin_tx_OBJECTS = bitcoin_tx-bitcoin-tx.$(OBJEXT) \\$/;"	m
am_bitcoin_wallet_OBJECTS	src/Makefile	/^am_bitcoin_wallet_OBJECTS = bitcoin_wallet-bitcoin-wallet.$(OBJEXT) \\$/;"	m
am_bitcoind_OBJECTS	src/Makefile	/^am_bitcoind_OBJECTS = bitcoind-bitcoind.$(OBJEXT) $(am__objects_30)$/;"	m
am_crypto_libbitcoin_crypto_avx2_a_OBJECTS	src/Makefile	/^am_crypto_libbitcoin_crypto_avx2_a_OBJECTS =  \\$/;"	m
am_crypto_libbitcoin_crypto_base_a_OBJECTS	src/Makefile	/^am_crypto_libbitcoin_crypto_base_a_OBJECTS =  \\$/;"	m
am_crypto_libbitcoin_crypto_shani_a_OBJECTS	src/Makefile	/^am_crypto_libbitcoin_crypto_shani_a_OBJECTS =  \\$/;"	m
am_crypto_libbitcoin_crypto_sse41_a_OBJECTS	src/Makefile	/^am_crypto_libbitcoin_crypto_sse41_a_OBJECTS =  \\$/;"	m
am_exhaustive_tests_OBJECTS	src/secp256k1/Makefile	/^am_exhaustive_tests_OBJECTS = src\/exhaustive_tests-tests_exhaustive.$(OBJEXT)$/;"	m
am_leveldb_libleveldb_a_OBJECTS	src/Makefile	/^am_leveldb_libleveldb_a_OBJECTS = leveldb\/db\/libleveldb_a-builder.$(OBJEXT) \\$/;"	m
am_leveldb_libleveldb_sse42_a_OBJECTS	src/Makefile	/^am_leveldb_libleveldb_sse42_a_OBJECTS = leveldb\/port\/libleveldb_sse42_a-port_posix_sse.$(OBJEXT)$/;"	m
am_leveldb_libmemenv_a_OBJECTS	src/Makefile	/^am_leveldb_libmemenv_a_OBJECTS = leveldb\/helpers\/memenv\/libmemenv_a-memenv.$(OBJEXT)$/;"	m
am_libbitcoin_cli_a_OBJECTS	src/Makefile	/^am_libbitcoin_cli_a_OBJECTS = rpc\/libbitcoin_cli_a-client.$(OBJEXT) \\$/;"	m
am_libbitcoin_common_a_OBJECTS	src/Makefile	/^am_libbitcoin_common_a_OBJECTS = libbitcoin_common_a-base58.$(OBJEXT) \\$/;"	m
am_libbitcoin_consensus_a_OBJECTS	src/Makefile	/^am_libbitcoin_consensus_a_OBJECTS =  \\$/;"	m
am_libbitcoin_server_a_OBJECTS	src/Makefile	/^am_libbitcoin_server_a_OBJECTS = libbitcoin_server_a-addrdb.$(OBJEXT) \\$/;"	m
am_libbitcoin_util_a_OBJECTS	src/Makefile	/^am_libbitcoin_util_a_OBJECTS =  \\$/;"	m
am_libbitcoin_wallet_a_OBJECTS	src/Makefile	/^am_libbitcoin_wallet_a_OBJECTS =  \\$/;"	m
am_libbitcoin_wallet_tool_a_OBJECTS	src/Makefile	/^am_libbitcoin_wallet_tool_a_OBJECTS =  \\$/;"	m
am_libbitcoin_zmq_a_OBJECTS	src/Makefile	/^am_libbitcoin_zmq_a_OBJECTS = zmq\/libbitcoin_zmq_a-zmqabstractnotifier.$(OBJEXT) \\$/;"	m
am_libbitcoinconsensus_la_OBJECTS	src/Makefile	/^am_libbitcoinconsensus_la_OBJECTS =  \\$/;"	m
am_libbitcoinconsensus_la_rpath	src/Makefile	/^am_libbitcoinconsensus_la_rpath = -rpath \\$/;"	m
am_libsecp256k1_jni_la_OBJECTS	src/secp256k1/Makefile	/^am_libsecp256k1_jni_la_OBJECTS =  \\$/;"	m
am_libsecp256k1_la_OBJECTS	src/secp256k1/Makefile	/^am_libsecp256k1_la_OBJECTS = src\/libsecp256k1_la-secp256k1.lo$/;"	m
am_libunivalue_la_OBJECTS	src/univalue/Makefile	/^am_libunivalue_la_OBJECTS = lib\/libunivalue_la-univalue.lo \\$/;"	m
am_test_no_nul_OBJECTS	src/univalue/Makefile	/^am_test_no_nul_OBJECTS = test\/no_nul-no_nul.$(OBJEXT)$/;"	m
am_test_object_OBJECTS	src/univalue/Makefile	/^am_test_object_OBJECTS = test\/object-object.$(OBJEXT)$/;"	m
am_test_test_bitcoin_OBJECTS	src/Makefile	/^am_test_test_bitcoin_OBJECTS = $(am__objects_62) \\$/;"	m
am_test_test_json_OBJECTS	src/univalue/Makefile	/^am_test_test_json_OBJECTS = test\/test_json-test_json.$(OBJEXT)$/;"	m
am_test_unitester_OBJECTS	src/univalue/Makefile	/^am_test_unitester_OBJECTS = test\/unitester-unitester.$(OBJEXT)$/;"	m
am_tests_OBJECTS	src/secp256k1/Makefile	/^am_tests_OBJECTS = src\/tests-tests.$(OBJEXT)$/;"	m
amount	src/qt/bitcoinamountfield.h	/^    AmountSpinBox *amount;$/;"	m	class:BitcoinAmountField
amount	src/qt/walletmodel.h	/^    CAmount amount;$/;"	m	class:SendCoinsRecipient
amount	src/script/interpreter.h	/^    const CAmount amount;$/;"	m	class:GenericTransactionSignatureChecker
amount	src/script/sign.h	/^    CAmount amount;$/;"	m	class:MutableTransactionSignatureCreator
amount	src/wallet/wallet.h	/^    CAmount amount;$/;"	m	struct:COutputEntry
amountWidget	src/qt/transactionview.h	/^    QLineEdit *amountWidget;$/;"	m	class:TransactionView
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key and with watchonly")$/;"	i
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key")$/;"	i
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with public key")$/;"	i
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address")$/;"	i
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
an	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an invalid address")$/;"	i
analyzepsbt	src/rpc/rawtransaction.cpp	/^UniValue analyzepsbt(const JSONRPCRequest& request)$/;"	f
ancestor_score	src/txmempool.h	/^struct ancestor_score {};$/;"	s
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with private key")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with public key")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key and with watchonly")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
and	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
announce_block_and_wait_for_getdata	test/functional/p2p_segwit.py	/^    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):$/;"	m	class:TestP2PConn
announce_cmpct_block	test/functional/p2p_compactblocks.py	/^        def announce_cmpct_block(node, peer):$/;"	f	function:CompactBlocksTest.test_compactblock_reconstruction_multiple_peers
announce_tx_and_wait_for_getdata	test/functional/p2p_segwit.py	/^    def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True):$/;"	m	class:TestP2PConn
appIcon	src/qt/networkstyle.h	/^    QIcon appIcon;$/;"	m	class:NetworkStyle
appMenuBar	src/qt/bitcoingui.h	/^    QMenuBar* appMenuBar = nullptr;$/;"	m	class:BitcoinGUI
appName	src/qt/networkstyle.cpp	/^    const char *appName;$/;"	m	struct:__anon65	file:
appName	src/qt/networkstyle.h	/^    QString appName;$/;"	m	class:NetworkStyle
appTests	src/qt/test/apptests.cpp	/^void AppTests::appTests()$/;"	f	class:AppTests
appToolBar	src/qt/bitcoingui.h	/^    QToolBar* appToolBar = nullptr;$/;"	m	class:BitcoinGUI
appendCommand	src/rpc/server.cpp	/^bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)$/;"	f	class:CRPCTable
append_codepoint	src/univalue/lib/univalue_utffilter.h	/^    void append_codepoint(unsigned int codepoint_)$/;"	f	class:JSONUTF8StringFilter
append_config	test/functional/test_framework/util.py	/^def append_config(datadir, options):$/;"	f
applies_to_file	contrib/devtools/copyright_header.py	/^def applies_to_file(filename):$/;"	f
arbitrary	src/test/gen/crypto_gen.h	/^    static Gen<CKey> arbitrary()$/;"	f	struct:rc::Arbitrary
arbitrary	src/test/gen/crypto_gen.h	/^    static Gen<CPrivKey> arbitrary()$/;"	f	struct:rc::Arbitrary
arbitrary	src/test/gen/crypto_gen.h	/^    static Gen<CPubKey> arbitrary()$/;"	f	struct:rc::Arbitrary
arbitrary	src/test/gen/crypto_gen.h	/^    static Gen<uint256> arbitrary()$/;"	f	struct:rc::Arbitrary
arena_	src/leveldb/db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	src/leveldb/db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	src/leveldb/db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arenas	src/support/lockedpool.h	/^    std::list<LockedPageArena> arenas;$/;"	m	class:LockedPool
arg	src/leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon8::PosixEnv::BGItem	file:
arg	src/leveldb/util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon8::__anon9::StartThreadState	file:
arg1	src/leveldb/include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	src/leveldb/include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
argNames	src/rpc/server.h	/^    std::vector<std::string> argNames;$/;"	m	class:CRPCCommand
arg_	src/leveldb/table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
arg_to_cli	test/functional/test_framework/test_node.py	/^def arg_to_cli(arg):$/;"	f
argc	src/util/system.h	/^    int argc;$/;"	m	class:util::WinCmdLineArgs
argparse	contrib/devtools/clang-format-diff.py	/^import argparse$/;"	i
argparse	contrib/devtools/github-merge.py	/^import argparse$/;"	i
argparse	contrib/filter-lcov.py	/^import argparse$/;"	i
argparse	contrib/gitian-build.py	/^import argparse$/;"	i
argparse	contrib/verify-commits/verify-commits.py	/^import argparse$/;"	i
argparse	test/functional/combine_logs.py	/^import argparse$/;"	i
argparse	test/functional/test_framework/test_framework.py	/^import argparse$/;"	i
argparse	test/functional/test_runner.py	/^import argparse$/;"	i
argparse	test/fuzz/test_runner.py	/^import argparse$/;"	i
argparse	test/lint/lint-format-strings.py	/^import argparse$/;"	i
argparse	test/util/bitcoin-util-test.py	/^import argparse$/;"	i
args	contrib/filter-lcov.py	/^args = parser.parse_args()$/;"	v
args	src/util/system.h	/^    std::vector<std::string> args;$/;"	m	class:util::WinCmdLineArgs
argv	src/util/system.h	/^    char** argv;$/;"	m	class:util::WinCmdLineArgs
arith_uint256	src/arith_uint256.h	/^    arith_uint256() {}$/;"	f	class:arith_uint256
arith_uint256	src/arith_uint256.h	/^    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	src/arith_uint256.h	/^    arith_uint256(uint64_t b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	src/arith_uint256.h	/^    explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}$/;"	f	class:arith_uint256
arith_uint256	src/arith_uint256.h	/^class arith_uint256 : public base_uint<256> {$/;"	c
arith_uint256V	src/test/arith_uint256_tests.cpp	/^static inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)$/;"	f	file:
array	test/functional/test_framework/netutil.py	/^import array$/;"	i
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_append	src/secp256k1/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	src/secp256k1/configure	/^  as_fn_append ()$/;"	f
as_fn_append	src/univalue/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	src/univalue/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	src/secp256k1/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	src/secp256k1/configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	src/univalue/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	src/univalue/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_error	src/secp256k1/config.status	/^as_fn_error ()$/;"	f
as_fn_error	src/secp256k1/configure	/^as_fn_error ()$/;"	f
as_fn_error	src/univalue/config.status	/^as_fn_error ()$/;"	f
as_fn_error	src/univalue/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	src/secp256k1/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	src/secp256k1/configure	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	src/univalue/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	src/univalue/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_exit	src/secp256k1/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	src/secp256k1/configure	/^as_fn_exit ()$/;"	f
as_fn_exit	src/univalue/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	src/univalue/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	src/secp256k1/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	src/univalue/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	src/secp256k1/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	src/secp256k1/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	src/univalue/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	src/univalue/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	src/secp256k1/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	src/univalue/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	src/secp256k1/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	src/univalue/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	src/secp256k1/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	src/secp256k1/configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	src/univalue/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	src/univalue/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	src/secp256k1/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	src/univalue/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
as_fn_unset	src/secp256k1/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	src/secp256k1/configure	/^as_fn_unset ()$/;"	f
as_fn_unset	src/univalue/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	src/univalue/configure	/^as_fn_unset ()$/;"	f
ask_prompt	contrib/devtools/github-merge.py	/^def ask_prompt(text):$/;"	f
assertEquals	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static void assertEquals( String val, String val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assertEquals	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static void assertEquals( boolean val, boolean val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assertEquals	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static void assertEquals( int val, int val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assert_approx	test/functional/wallet_groups.py	/^def assert_approx(v, vexp, vspan=0.00001):$/;"	f
assert_array_result	test/functional/test_framework/util.py	/^def assert_array_result(object_array, to_match, expected, should_not_find=False):$/;"	f
assert_array_result	test/functional/wallet_listsinceblock.py	/^from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error$/;"	i
assert_blockchain_height	test/functional/feature_assumevalid.py	/^    def assert_blockchain_height(self, node, height):$/;"	m	class:AssumeValidTest
assert_category	test/functional/wallet_coinbase_category.py	/^    def assert_category(self, category, address, txid, skip):$/;"	m	class:CoinbaseCategoryTest
assert_debug_log	test/functional/test_framework/test_node.py	/^    def assert_debug_log(self, expected_msgs):$/;"	m	class:TestNode
assert_equal	test/functional/feature_assumevalid.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/feature_block.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/feature_dbcrash.py	/^from test_framework.util import assert_equal, create_confirmed_utxos, hex_str_to_bytes$/;"	i
assert_equal	test/functional/feature_help.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/feature_maxuploadtarget.py	/^from test_framework.util import assert_equal, mine_large_block$/;"	i
assert_equal	test/functional/feature_minchainwork.py	/^from test_framework.util import connect_nodes, assert_equal$/;"	i
assert_equal	test/functional/feature_notifications.py	/^from test_framework.util import assert_equal, wait_until, connect_nodes_bi$/;"	i
assert_equal	test/functional/feature_nulldummy.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/feature_rbf.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round$/;"	i
assert_equal	test/functional/feature_shutdown.py	/^from test_framework.util import assert_equal, get_rpc_proxy, wait_until$/;"	i
assert_equal	test/functional/feature_uacomment.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/interface_bitcoin_cli.py	/^from test_framework.util import assert_equal, assert_raises_process_error, get_auth_cookie$/;"	i
assert_equal	test/functional/interface_http.py	/^from test_framework.util import assert_equal, str_to_b64str$/;"	i
assert_equal	test/functional/interface_rpc.py	/^from test_framework.util import assert_equal, assert_greater_than_or_equal$/;"	i
assert_equal	test/functional/mempool_limit.py	/^from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
assert_equal	test/functional/mempool_persist.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, wait_until$/;"	i
assert_equal	test/functional/mempool_reorg.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/mempool_resurrect.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/mempool_spend_coinbase.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/mining_prioritisetransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
assert_equal	test/functional/p2p_blocksonly.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/p2p_compactblocks.py	/^from test_framework.util import assert_equal, wait_until, softfork_active$/;"	i
assert_equal	test/functional/p2p_invalid_block.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/p2p_mempool.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/rpc_bind.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, get_rpc_proxy, rpc_port, rpc_url$/;"	i
assert_equal	test/functional/rpc_decodescript.py	/^from test_framework.util import assert_equal, hex_str_to_bytes$/;"	i
assert_equal	test/functional/rpc_deriveaddresses.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/rpc_getchaintips.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/rpc_help.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/rpc_rawtransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes$/;"	i
assert_equal	test/functional/rpc_scantxoutset.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/rpc_signmessage.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/rpc_signrawtransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, hex_str_to_bytes$/;"	i
assert_equal	test/functional/rpc_txoutproof.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes$/;"	i
assert_equal	test/functional/test_framework/blocktools.py	/^from .util import assert_equal$/;"	i
assert_equal	test/functional/test_framework/messages.py	/^from test_framework.util import hex_str_to_bytes, assert_equal$/;"	i
assert_equal	test/functional/test_framework/util.py	/^def assert_equal(thing1, thing2, *args):$/;"	f
assert_equal	test/functional/tool_wallet.py	/^from test_framework.util import assert_equal$/;"	i
assert_equal	test/functional/wallet_keypool.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/wallet_labels.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/wallet_listsinceblock.py	/^from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error$/;"	i
assert_equal	test/functional/wallet_resendwallettransactions.py	/^from test_framework.util import assert_equal, wait_until$/;"	i
assert_fee_amount	test/functional/test_framework/util.py	/^def assert_fee_amount(fee, tx_size, fee_per_kB):$/;"	f
assert_greater_than	test/functional/mempool_limit.py	/^from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
assert_greater_than	test/functional/test_framework/util.py	/^def assert_greater_than(thing1, thing2):$/;"	f
assert_greater_than_or_equal	test/functional/interface_rpc.py	/^from test_framework.util import assert_equal, assert_greater_than_or_equal$/;"	i
assert_greater_than_or_equal	test/functional/test_framework/util.py	/^def assert_greater_than_or_equal(thing1, thing2):$/;"	f
assert_is_hash_string	test/functional/test_framework/util.py	/^def assert_is_hash_string(string, length=64):$/;"	f
assert_is_hex_string	test/functional/test_framework/util.py	/^def assert_is_hex_string(string):$/;"	f
assert_memory_usage_stable	test/functional/test_framework/test_node.py	/^    def assert_memory_usage_stable(self, *, increase_allowed=0.03):$/;"	m	class:TestNode
assert_raises	test/functional/test_framework/util.py	/^def assert_raises(exc, fun, *args, **kwds):$/;"	f
assert_raises_message	test/functional/test_framework/util.py	/^def assert_raises_message(exc, message, fun, *args, **kwds):$/;"	f
assert_raises_process_error	test/functional/interface_bitcoin_cli.py	/^from test_framework.util import assert_equal, assert_raises_process_error, get_auth_cookie$/;"	i
assert_raises_process_error	test/functional/test_framework/util.py	/^def assert_raises_process_error(returncode, output, fun, *args, **kwds):$/;"	f
assert_raises_rpc_error	test/functional/feature_nulldummy.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/feature_rbf.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round$/;"	i
assert_raises_rpc_error	test/functional/mempool_limit.py	/^from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
assert_raises_rpc_error	test/functional/mempool_persist.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, wait_until$/;"	i
assert_raises_rpc_error	test/functional/mempool_reorg.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/mempool_spend_coinbase.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/mining_prioritisetransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
assert_raises_rpc_error	test/functional/rpc_bind.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, get_rpc_proxy, rpc_port, rpc_url$/;"	i
assert_raises_rpc_error	test/functional/rpc_deriveaddresses.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/rpc_help.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/rpc_rawtransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes$/;"	i
assert_raises_rpc_error	test/functional/rpc_scantxoutset.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/rpc_signrawtransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, hex_str_to_bytes$/;"	i
assert_raises_rpc_error	test/functional/rpc_txoutproof.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes$/;"	i
assert_raises_rpc_error	test/functional/test_framework/util.py	/^def assert_raises_rpc_error(code, message, fun, *args, **kwds):$/;"	f
assert_raises_rpc_error	test/functional/wallet_disable.py	/^from test_framework.util import assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/wallet_fallbackfee.py	/^from test_framework.util import assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/wallet_keypool.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/wallet_labels.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error$/;"	i
assert_raises_rpc_error	test/functional/wallet_listsinceblock.py	/^from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error$/;"	i
assert_raises_tool_error	test/functional/tool_wallet.py	/^    def assert_raises_tool_error(self, error, *args):$/;"	m	class:ToolWalletTest
assert_start_raises_init_error	test/functional/test_framework/test_node.py	/^    def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):$/;"	m	class:TestNode
assert_submitblock	test/functional/mining_basic.py	/^        def assert_submitblock(block, result_str_1, result_str_2=None):$/;"	f	function:MiningTest.run_test
assert_template	test/functional/mining_basic.py	/^def assert_template(node, block, expect, rehash=True):$/;"	f
assert_tool_output	test/functional/tool_wallet.py	/^    def assert_tool_output(self, output, *args):$/;"	m	class:ToolWalletTest
assert_waitforheight	test/functional/rpc_blockchain.py	/^        def assert_waitforheight(height, timeout=2):$/;"	f	function:BlockchainTest._test_waitforblockheight
assign	src/prevector.h	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:prevector
assign	src/prevector.h	/^    void assign(size_type n, const T& val) {$/;"	f	class:prevector
assign	src/test/prevector_tests.cpp	/^    void assign(Size n, const T& value) {$/;"	f	class:prevector_tester
assign_big_endian	src/secp256k1/src/tests.c	/^static void assign_big_endian(unsigned char *ptr, size_t ptrlen, uint32_t val) {$/;"	f	file:
async_handler	src/torcontrol.cpp	/^    boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;$/;"	m	class:TorControlConnection	file:
asyncio	contrib/zmq/zmq_sub.py	/^import asyncio$/;"	i
asyncio	contrib/zmq/zmq_sub.py	/^import zmq.asyncio$/;"	i
asyncio	test/functional/p2p_invalid_messages.py	/^import asyncio$/;"	i
asyncio	test/functional/test_framework/mininode.py	/^import asyncio$/;"	i
atoi	src/util/strencodings.cpp	/^int atoi(const std::string& str)$/;"	f
atoi64	src/util/strencodings.cpp	/^int64_t atoi64(const char* psz)$/;"	f
atoi64	src/util/strencodings.cpp	/^int64_t atoi64(const std::string& str)$/;"	f
authUser	src/rpc/server.h	/^    std::string authUser;$/;"	m	class:JSONRPCRequest
auth_cb	src/torcontrol.cpp	/^void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
authchallenge_cb	src/torcontrol.cpp	/^void TorController::authchallenge_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
authenticatedMerchant	src/qt/walletmodel.h	/^    QString authenticatedMerchant;$/;"	m	class:SendCoinsRecipient
autoCompleter	src/qt/rpcconsole.h	/^    QCompleter *autoCompleter = nullptr;$/;"	m	class:RPCConsole
available	src/sync.cpp	/^    bool available;$/;"	m	struct:LockData	file:
availableUnits	src/qt/bitcoinunits.cpp	/^QList<BitcoinUnits::Unit> BitcoinUnits::availableUnits()$/;"	f	class:BitcoinUnits
avg	src/policy/fees.cpp	/^    std::vector<double> avg;$/;"	m	class:TxConfirmStats	file:
ax_pthread_config	Makefile	/^ax_pthread_config = $/;"	m
ax_pthread_config	doc/man/Makefile	/^ax_pthread_config = $/;"	m
ax_pthread_config	src/Makefile	/^ax_pthread_config = $/;"	m
b2a_hex	contrib/testgen/gen_key_io_test_vectors.py	/^from binascii import b2a_hex$/;"	i
b32decode	contrib/seeds/generate-seeds.py	/^from base64 import b32decode$/;"	i
b58chars	contrib/testgen/base58.py	/^b58chars = __b58chars$/;"	v
b58chars	contrib/testgen/gen_key_io_test_vectors.py	/^from base58 import b58encode_chk, b58decode_chk, b58chars$/;"	i
b58decode	contrib/testgen/base58.py	/^def b58decode(v, length = None):$/;"	f
b58decode_chk	contrib/testgen/base58.py	/^def b58decode_chk(v):$/;"	f
b58decode_chk	contrib/testgen/gen_key_io_test_vectors.py	/^from base58 import b58encode_chk, b58decode_chk, b58chars$/;"	i
b58encode	contrib/testgen/base58.py	/^def b58encode(v):$/;"	f
b58encode_chk	contrib/testgen/base58.py	/^def b58encode_chk(v):$/;"	f
b58encode_chk	contrib/testgen/gen_key_io_test_vectors.py	/^from base58 import b58encode_chk, b58decode_chk, b58chars$/;"	i
b64encode	test/functional/test_framework/util.py	/^from base64 import b64encode$/;"	i
bOutOfSync	src/qt/walletframe.h	/^    bool bOutOfSync;$/;"	m	class:WalletFrame
b_conn	src/torcontrol.cpp	/^    struct bufferevent *b_conn;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::bufferevent	file:
back	src/prevector.h	/^    T& back() {$/;"	f	class:prevector
back	src/prevector.h	/^    const T& back() const {$/;"	f	class:prevector
backing_store_	src/leveldb/db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
backupWallet	src/qt/walletframe.cpp	/^void WalletFrame::backupWallet()$/;"	f	class:WalletFrame
backupWallet	src/qt/walletview.cpp	/^void WalletView::backupWallet()$/;"	f	class:WalletView
backupWalletAction	src/qt/bitcoingui.h	/^    QAction* backupWalletAction = nullptr;$/;"	m	class:BitcoinGUI
backupwallet	src/wallet/rpcwallet.cpp	/^static UniValue backupwallet(const JSONRPCRequest& request)$/;"	f	file:
bad_message	test/functional/p2p_leak.py	/^    def bad_message(self, message):$/;"	m	class:CLazyNode
balance	src/interfaces/wallet.h	/^    CAmount balance = 0;$/;"	m	struct:interfaces::WalletBalances
balance	src/wallet/test/coinselector_tests.cpp	/^static CAmount balance = 0;$/;"	v	file:
balanceChanged	src/interfaces/wallet.h	/^    bool balanceChanged(const WalletBalances& prev) const$/;"	f	struct:interfaces::WalletBalances
banEntry	src/qt/bantablemodel.h	/^    CBanEntry banEntry;$/;"	m	struct:CCombinedBan
banReason	src/addrdb.h	/^    uint8_t banReason;$/;"	m	class:CBanEntry
banReasonToString	src/addrdb.h	/^    std::string banReasonToString() const$/;"	f	class:CBanEntry
banSelectedNode	src/qt/rpcconsole.cpp	/^void RPCConsole::banSelectedNode(int bantime)$/;"	f	class:RPCConsole
banTableContextMenu	src/qt/rpcconsole.h	/^    QMenu *banTableContextMenu = nullptr;$/;"	m	class:RPCConsole
banTableModel	src/qt/clientmodel.h	/^    BanTableModel *banTableModel;$/;"	m	class:ClientModel
banmap_t	src/addrdb.h	/^typedef std::map<CSubNet, CBanEntry> banmap_t;$/;"	t
banscore	test/functional/p2p_leak.py	/^banscore = 10$/;"	v
bare	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a 1-of-2 bare multisig from descriptor")$/;"	i
base	src/coins.h	/^    CCoinsView *base;$/;"	m	class:CCoinsViewBacked
base	src/httprpc.cpp	/^    struct event_base* base;$/;"	m	class:HTTPRPCTimerInterface	typeref:struct:HTTPRPCTimerInterface::event_base	file:
base	src/indirectmap.h	/^    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;$/;"	t	class:indirectmap
base	src/leveldb/util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon5::Test	file:
base	src/support/allocators/secure.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base	src/support/allocators/zeroafterfree.h	/^    typedef std::allocator<T> base;$/;"	t	struct:zero_after_free_allocator
base	src/support/lockedpool.h	/^        void *base;$/;"	m	class:LockedPool::LockedPageArena
base	src/support/lockedpool.h	/^    char* base;$/;"	m	class:Arena
base	src/torcontrol.cpp	/^    struct event_base *base;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::event_base	file:
base	src/torcontrol.cpp	/^    struct event_base* base;$/;"	m	class:TorController	typeref:struct:TorController::event_base	file:
base58Prefixes	src/chainparams.h	/^    std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];$/;"	m	class:CChainParams
base58_encode_decode	src/test/data/base58_encode_decode.json.h	/^static unsigned const char base58_encode_decode[] = {$/;"	m	namespace:json_tests
base64	contrib/linearize/linearize-hashes.py	/^import base64$/;"	i
base64	test/functional/test_framework/authproxy.py	/^import base64$/;"	i
base64	test/util/rpcauth-test.py	/^import base64$/;"	i
baseInitialize	src/qt/bitcoin.cpp	/^bool BitcoinApplication::baseInitialize()$/;"	f	class:BitcoinApplication
basePath	contrib/devtools/optimize-pngs.py	/^basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel'], universal_newlines=True, encoding='utf8').rstrip('\\n')$/;"	v
base_	src/leveldb/db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder	file:
base_blob	src/uint256.cpp	/^base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)$/;"	f	class:base_blob
base_blob	src/uint256.h	/^    base_blob()$/;"	f	class:base_blob
base_blob	src/uint256.h	/^class base_blob$/;"	c
base_build_dir	depends/Makefile	/^base_build_dir=$(WORK_PATH)\/build$/;"	m
base_download_dir	depends/Makefile	/^base_download_dir=$(WORK_PATH)\/download$/;"	m
base_lg_	src/leveldb/table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
base_staging_dir	depends/Makefile	/^base_staging_dir=$(WORK_PATH)\/staging$/;"	m
base_uint	src/arith_uint256.cpp	/^base_uint<BITS>::base_uint(const std::string& str)$/;"	f	class:base_uint
base_uint	src/arith_uint256.h	/^    base_uint()$/;"	f	class:base_uint
base_uint	src/arith_uint256.h	/^    base_uint(const base_uint& b)$/;"	f	class:base_uint
base_uint	src/arith_uint256.h	/^    base_uint(uint64_t b)$/;"	f	class:base_uint
base_uint	src/arith_uint256.h	/^class base_uint$/;"	c
basic_p2sh	test/functional/data/invalid_txs.py	/^basic_p2sh = sc.CScript([sc.OP_HASH160, sc.hash160(sc.CScript([sc.OP_0])), sc.OP_EQUAL])$/;"	v
batch	src/dbwrapper.h	/^    leveldb::WriteBatch batch;$/;"	m	class:CDBBatch
batch	src/leveldb/db/db_impl.cc	/^  WriteBatch* batch;$/;"	m	struct:leveldb::DBImpl::Writer	file:
batch	test/functional/test_framework/authproxy.py	/^    def batch(self, rpc_call_list):$/;"	m	class:AuthServiceProxy
batch	test/functional/test_framework/test_node.py	/^    def batch(self, requests):$/;"	m	class:TestNodeCLI
bctest	test/util/bitcoin-util-test.py	/^def bctest(testDir, testObj, buildenv):$/;"	f
bctester	test/util/bitcoin-util-test.py	/^def bctester(testDir, input_basename, buildenv):$/;"	f
be16toh	src/compat/endian.h	/^inline uint16_t be16toh(uint16_t big_endian_16bits)$/;"	f
be32toh	src/compat/endian.h	/^inline uint32_t be32toh(uint32_t big_endian_32bits)$/;"	f
be64toh	src/compat/endian.h	/^inline uint64_t be64toh(uint64_t big_endian_64bits)$/;"	f
bech32	src/bech32.cpp	/^namespace bech32$/;"	n	file:
bech32	src/bech32.h	/^namespace bech32$/;"	n
bech32_create_checksum	test/functional/test_framework/segwit_addr.py	/^def bech32_create_checksum(hrp, data):$/;"	f
bech32_decode	test/functional/test_framework/segwit_addr.py	/^def bech32_decode(bech):$/;"	f
bech32_encode	contrib/testgen/gen_key_io_test_vectors.py	/^from segwit_addr import bech32_encode, decode, convertbits, CHARSET$/;"	i
bech32_encode	test/functional/test_framework/segwit_addr.py	/^def bech32_encode(hrp, data):$/;"	f
bech32_hrp	src/chainparams.h	/^    std::string bech32_hrp;$/;"	m	class:CChainParams
bech32_hrp_expand	test/functional/test_framework/segwit_addr.py	/^def bech32_hrp_expand(hrp):$/;"	f
bech32_ng_templates	contrib/testgen/gen_key_io_test_vectors.py	/^bech32_ng_templates = [$/;"	v
bech32_polymod	test/functional/test_framework/segwit_addr.py	/^def bech32_polymod(values):$/;"	f
bech32_templates	contrib/testgen/gen_key_io_test_vectors.py	/^bech32_templates = [$/;"	v
bech32_verify_checksum	test/functional/test_framework/segwit_addr.py	/^def bech32_verify_checksum(hrp, data):$/;"	f
begin	src/indirectmap.h	/^    const_iterator begin() const    { return m.begin(); }$/;"	f	class:indirectmap
begin	src/indirectmap.h	/^    iterator begin()                { return m.begin(); }$/;"	f	class:indirectmap
begin	src/key.h	/^    const unsigned char* begin() const { return keydata.data(); }$/;"	f	class:CKey
begin	src/leveldb/db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
begin	src/limitedmap.h	/^    const_iterator begin() const { return map.begin(); }$/;"	f	class:limitedmap
begin	src/prevector.h	/^    const_iterator begin() const { return const_iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	src/prevector.h	/^    iterator begin() { return iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	src/pubkey.h	/^    const unsigned char* begin() const { return vch; }$/;"	f	class:CPubKey
begin	src/streams.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	src/streams.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	src/uint256.h	/^    const unsigned char* begin() const$/;"	f	class:base_blob
begin	src/uint256.h	/^    unsigned char* begin()$/;"	f	class:base_blob
bench_AES128_decrypt	src/crypto/ctaes/bench.c	/^static void bench_AES128_decrypt(void* data) {$/;"	f	file:
bench_AES128_encrypt	src/crypto/ctaes/bench.c	/^static void bench_AES128_encrypt(void* data) {$/;"	f	file:
bench_AES128_encrypt_setup	src/crypto/ctaes/bench.c	/^static void bench_AES128_encrypt_setup(void* data) {$/;"	f	file:
bench_AES128_init	src/crypto/ctaes/bench.c	/^static void bench_AES128_init(void* data) {$/;"	f	file:
bench_AES192_decrypt	src/crypto/ctaes/bench.c	/^static void bench_AES192_decrypt(void* data) {$/;"	f	file:
bench_AES192_encrypt	src/crypto/ctaes/bench.c	/^static void bench_AES192_encrypt(void* data) {$/;"	f	file:
bench_AES192_encrypt_setup	src/crypto/ctaes/bench.c	/^static void bench_AES192_encrypt_setup(void* data) {$/;"	f	file:
bench_AES192_init	src/crypto/ctaes/bench.c	/^static void bench_AES192_init(void* data) {$/;"	f	file:
bench_AES256_decrypt	src/crypto/ctaes/bench.c	/^static void bench_AES256_decrypt(void* data) {$/;"	f	file:
bench_AES256_encrypt	src/crypto/ctaes/bench.c	/^static void bench_AES256_encrypt(void* data) {$/;"	f	file:
bench_AES256_encrypt_setup	src/crypto/ctaes/bench.c	/^static void bench_AES256_encrypt_setup(void* data) {$/;"	f	file:
bench_AES256_init	src/crypto/ctaes/bench.c	/^static void bench_AES256_init(void* data) {$/;"	f	file:
bench_bench_bitcoin_LINK	src/Makefile	/^bench_bench_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
bench_bench_bitcoin_OBJECTS	src/Makefile	/^bench_bench_bitcoin_OBJECTS = $(am_bench_bench_bitcoin_OBJECTS) \\$/;"	m
bench_context_sign	src/secp256k1/src/bench_internal.c	/^void bench_context_sign(void* arg) {$/;"	f
bench_context_verify	src/secp256k1/src/bench_internal.c	/^void bench_context_verify(void* arg) {$/;"	f
bench_ecdh	src/secp256k1/src/bench_ecdh.c	/^static void bench_ecdh(void* arg) {$/;"	f	file:
bench_ecdh_OBJECTS	src/secp256k1/Makefile	/^bench_ecdh_OBJECTS = $(am_bench_ecdh_OBJECTS)$/;"	m
bench_ecdh_setup	src/secp256k1/src/bench_ecdh.c	/^static void bench_ecdh_setup(void* arg) {$/;"	f	file:
bench_ecdh_t	src/secp256k1/src/bench_ecdh.c	/^} bench_ecdh_t;$/;"	t	typeref:struct:__anon108	file:
bench_ecmult_wnaf	src/secp256k1/src/bench_internal.c	/^void bench_ecmult_wnaf(void* arg) {$/;"	f
bench_field_inverse	src/secp256k1/src/bench_internal.c	/^void bench_field_inverse(void* arg) {$/;"	f
bench_field_inverse_var	src/secp256k1/src/bench_internal.c	/^void bench_field_inverse_var(void* arg) {$/;"	f
bench_field_mul	src/secp256k1/src/bench_internal.c	/^void bench_field_mul(void* arg) {$/;"	f
bench_field_normalize	src/secp256k1/src/bench_internal.c	/^void bench_field_normalize(void* arg) {$/;"	f
bench_field_normalize_weak	src/secp256k1/src/bench_internal.c	/^void bench_field_normalize_weak(void* arg) {$/;"	f
bench_field_sqr	src/secp256k1/src/bench_internal.c	/^void bench_field_sqr(void* arg) {$/;"	f
bench_field_sqrt	src/secp256k1/src/bench_internal.c	/^void bench_field_sqrt(void* arg) {$/;"	f
bench_group_add_affine	src/secp256k1/src/bench_internal.c	/^void bench_group_add_affine(void* arg) {$/;"	f
bench_group_add_affine_var	src/secp256k1/src/bench_internal.c	/^void bench_group_add_affine_var(void* arg) {$/;"	f
bench_group_add_var	src/secp256k1/src/bench_internal.c	/^void bench_group_add_var(void* arg) {$/;"	f
bench_group_double_var	src/secp256k1/src/bench_internal.c	/^void bench_group_double_var(void* arg) {$/;"	f
bench_group_jacobi_var	src/secp256k1/src/bench_internal.c	/^void bench_group_jacobi_var(void* arg) {$/;"	f
bench_hmac_sha256	src/secp256k1/src/bench_internal.c	/^void bench_hmac_sha256(void* arg) {$/;"	f
bench_internal_OBJECTS	src/secp256k1/Makefile	/^bench_internal_OBJECTS = $(am_bench_internal_OBJECTS)$/;"	m
bench_inv_t	src/secp256k1/src/bench_internal.c	/^} bench_inv_t;$/;"	t	typeref:struct:__anon109	file:
bench_num_jacobi	src/secp256k1/src/bench_internal.c	/^void bench_num_jacobi(void* arg) {$/;"	f
bench_recover	src/secp256k1/src/bench_recover.c	/^void bench_recover(void* arg) {$/;"	f
bench_recover_OBJECTS	src/secp256k1/Makefile	/^bench_recover_OBJECTS = $(am_bench_recover_OBJECTS)$/;"	m
bench_recover_setup	src/secp256k1/src/bench_recover.c	/^void bench_recover_setup(void* arg) {$/;"	f
bench_recover_t	src/secp256k1/src/bench_recover.c	/^} bench_recover_t;$/;"	t	typeref:struct:__anon98	file:
bench_rfc6979_hmac_sha256	src/secp256k1/src/bench_internal.c	/^void bench_rfc6979_hmac_sha256(void* arg) {$/;"	f
bench_scalar_add	src/secp256k1/src/bench_internal.c	/^void bench_scalar_add(void* arg) {$/;"	f
bench_scalar_inverse	src/secp256k1/src/bench_internal.c	/^void bench_scalar_inverse(void* arg) {$/;"	f
bench_scalar_inverse_var	src/secp256k1/src/bench_internal.c	/^void bench_scalar_inverse_var(void* arg) {$/;"	f
bench_scalar_mul	src/secp256k1/src/bench_internal.c	/^void bench_scalar_mul(void* arg) {$/;"	f
bench_scalar_negate	src/secp256k1/src/bench_internal.c	/^void bench_scalar_negate(void* arg) {$/;"	f
bench_scalar_split	src/secp256k1/src/bench_internal.c	/^void bench_scalar_split(void* arg) {$/;"	f
bench_scalar_sqr	src/secp256k1/src/bench_internal.c	/^void bench_scalar_sqr(void* arg) {$/;"	f
bench_setup	src/secp256k1/src/bench_internal.c	/^void bench_setup(void* arg) {$/;"	f
bench_sha256	src/secp256k1/src/bench_internal.c	/^void bench_sha256(void* arg) {$/;"	f
bench_sign	src/secp256k1/src/bench_sign.c	/^static void bench_sign(void* arg) {$/;"	f	file:
bench_sign_OBJECTS	src/secp256k1/Makefile	/^bench_sign_OBJECTS = $(am_bench_sign_OBJECTS)$/;"	m
bench_sign_setup	src/secp256k1/src/bench_sign.c	/^static void bench_sign_setup(void* arg) {$/;"	f	file:
bench_sign_t	src/secp256k1/src/bench_sign.c	/^} bench_sign_t;$/;"	t	typeref:struct:__anon102	file:
bench_verify_OBJECTS	src/secp256k1/Makefile	/^bench_verify_OBJECTS = $(am_bench_verify_OBJECTS)$/;"	m
bench_wnaf_const	src/secp256k1/src/bench_internal.c	/^void bench_wnaf_const(void* arg) {$/;"	f
benchmark	src/bench/bench.h	/^namespace benchmark {$/;"	n
benchmark_verify	src/secp256k1/src/bench_verify.c	/^static void benchmark_verify(void* arg) {$/;"	f	file:
benchmark_verify_openssl	src/secp256k1/src/bench_verify.c	/^static void benchmark_verify_openssl(void* arg) {$/;"	f	file:
benchmark_verify_t	src/secp256k1/src/bench_verify.c	/^} benchmark_verify_t;$/;"	t	typeref:struct:__anon106	file:
benchmarks	src/bench/bench.cpp	/^benchmark::BenchRunner::BenchmarkMap& benchmark::BenchRunner::benchmarks()$/;"	f	class:benchmark::BenchRunner
bestHeaderDate	src/qt/modaloverlay.h	/^    QDateTime bestHeaderDate;$/;"	m	class:ModalOverlay
bestHeaderHeight	src/qt/modaloverlay.h	/^    int bestHeaderHeight; \/\/best known height (based on the headers)$/;"	m	class:ModalOverlay
best_clock	src/bench/bench.h	/^struct best_clock {$/;"	s	namespace:benchmark
bg_compaction_scheduled_	src/leveldb/db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	src/leveldb/db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when background work finishes$/;"	m	class:leveldb::DBImpl
bg_error_	src/leveldb/db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bgsignal_	src/leveldb/util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
bgthread_	src/leveldb/util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
bin_PROGRAMS	src/Makefile	/^bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
binary	contrib/devtools/clang-format-diff.py	/^binary = 'clang-format'$/;"	v
binascii	contrib/zmq/zmq_sub.py	/^import binascii$/;"	i
binascii	test/functional/interface_rest.py	/^import binascii$/;"	i
binascii	test/util/bitcoin-util-test.py	/^import binascii$/;"	i
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	doc/man/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	src/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	src/secp256k1/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	src/univalue/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
biplist	contrib/macdeploy/custom_dsstore.py	/^import biplist$/;"	i
bit	src/consensus/params.h	/^    int bit;$/;"	m	struct:Consensus::BIP9Deployment
bit	src/validation.cpp	/^    int bit;$/;"	m	class:WarningBitsConditionChecker	file:
bit_is_set	src/cuckoocache.h	/^    inline bool bit_is_set(uint32_t s) const$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	src/cuckoocache.h	/^    explicit bit_packed_atomic_flags(uint32_t size)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	src/cuckoocache.h	/^class bit_packed_atomic_flags$/;"	c	namespace:CuckooCache
bit_set	src/cuckoocache.h	/^    inline void bit_set(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_unset	src/cuckoocache.h	/^    inline void bit_unset(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bitbuf	src/random.h	/^    uint64_t bitbuf;$/;"	m	class:FastRandomContext
bitbuf_size	src/random.h	/^    int bitbuf_size;$/;"	m	class:FastRandomContext
bitcoin_cli_CPPFLAGS	src/Makefile	/^bitcoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)$/;"	m
bitcoin_cli_CXXFLAGS	src/Makefile	/^bitcoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_cli_DEPENDENCIES	src/Makefile	/^bitcoin_cli_DEPENDENCIES = $(LIBBITCOIN_CLI) $(am__DEPENDENCIES_4) \\$/;"	m
bitcoin_cli_LDADD	src/Makefile	/^bitcoin_cli_LDADD = $(LIBBITCOIN_CLI) $(LIBUNIVALUE) \\$/;"	m
bitcoin_cli_LDFLAGS	src/Makefile	/^bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_cli_LINK	src/Makefile	/^bitcoin_cli_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoin_cli_OBJECTS	src/Makefile	/^bitcoin_cli_OBJECTS = $(am_bitcoin_cli_OBJECTS)$/;"	m
bitcoin_cli_SOURCES	src/Makefile	/^bitcoin_cli_SOURCES = bitcoin-cli.cpp $(am__append_13)$/;"	m
bitcoin_strings	src/qt/bitcoinstrings.cpp	/^static const char UNUSED *bitcoin_strings[] = {$/;"	v	file:
bitcoin_tx_CPPFLAGS	src/Makefile	/^bitcoin_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoin_tx_CXXFLAGS	src/Makefile	/^bitcoin_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_tx_DEPENDENCIES	src/Makefile	/^bitcoin_tx_DEPENDENCIES = $(am__DEPENDENCIES_4) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoin_tx_LDADD	src/Makefile	/^bitcoin_tx_LDADD = $(LIBUNIVALUE) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoin_tx_LDFLAGS	src/Makefile	/^bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_tx_LINK	src/Makefile	/^bitcoin_tx_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoin_tx_OBJECTS	src/Makefile	/^bitcoin_tx_OBJECTS = $(am_bitcoin_tx_OBJECTS)$/;"	m
bitcoin_tx_SOURCES	src/Makefile	/^bitcoin_tx_SOURCES = bitcoin-tx.cpp $(am__append_14)$/;"	m
bitcoin_wallet_CPPFLAGS	src/Makefile	/^bitcoin_wallet_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoin_wallet_CXXFLAGS	src/Makefile	/^bitcoin_wallet_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_wallet_DEPENDENCIES	src/Makefile	/^bitcoin_wallet_DEPENDENCIES = $(LIBBITCOIN_WALLET_TOOL) \\$/;"	m
bitcoin_wallet_LDADD	src/Makefile	/^bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(LIBBITCOIN_WALLET) \\$/;"	m
bitcoin_wallet_LDFLAGS	src/Makefile	/^bitcoin_wallet_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_wallet_LINK	src/Makefile	/^bitcoin_wallet_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
bitcoin_wallet_OBJECTS	src/Makefile	/^bitcoin_wallet_OBJECTS = $(am_bitcoin_wallet_OBJECTS)$/;"	m
bitcoin_wallet_SOURCES	src/Makefile	/^bitcoin_wallet_SOURCES = bitcoin-wallet.cpp $(am__append_15)$/;"	m
bitcoin_wallet_process	test/functional/tool_wallet.py	/^    def bitcoin_wallet_process(self, *args):$/;"	m	class:ToolWalletTest
bitcoinconsensus_ERR_AMOUNT_REQUIRED	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_AMOUNT_REQUIRED,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_INVALID_FLAGS	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_INVALID_FLAGS,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_OK	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_OK = 0,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_DESERIALIZE	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_DESERIALIZE,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_INDEX	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_INDEX,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_SIZE_MISMATCH	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_SIZE_MISMATCH,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL                 = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG |$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), \/\/ enable CHECKLOCKTIMEVERIFY (BIP65)$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), \/\/ enable CHECKSEQUENCEVERIFY (BIP112)$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), \/\/ enforce strict DER (BIP66) compliance$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), \/\/ enforce NULLDUMMY (BIP147)$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), \/\/ evaluate P2SH (BIP16) subscripts$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS	src/script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), \/\/ enable WITNESS (BIP141)$/;"	e	enum:__anon80
bitcoinconsensus_error	src/script/bitcoinconsensus.h	/^} bitcoinconsensus_error;$/;"	t	typeref:enum:bitcoinconsensus_error_t
bitcoinconsensus_error_t	src/script/bitcoinconsensus.h	/^typedef enum bitcoinconsensus_error_t$/;"	g
bitcoinconsensus_verify_script	src/script/bitcoinconsensus.cpp	/^int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,$/;"	f
bitcoinconsensus_verify_script_with_amount	src/script/bitcoinconsensus.cpp	/^int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, int64_t amount,$/;"	f
bitcoinconsensus_version	src/script/bitcoinconsensus.cpp	/^unsigned int bitcoinconsensus_version()$/;"	f
bitcoind_CPPFLAGS	src/Makefile	/^bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoind_CXXFLAGS	src/Makefile	/^bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoind_DEPENDENCIES	src/Makefile	/^bitcoind_DEPENDENCIES = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_WALLET) \\$/;"	m
bitcoind_LDADD	src/Makefile	/^bitcoind_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_WALLET) \\$/;"	m
bitcoind_LDFLAGS	src/Makefile	/^bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoind_LINK	src/Makefile	/^bitcoind_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoind_OBJECTS	src/Makefile	/^bitcoind_OBJECTS = $(am_bitcoind_OBJECTS)$/;"	m
bitcoind_SOURCES	src/Makefile	/^bitcoind_SOURCES = bitcoind.cpp $(am__append_12)$/;"	m
bits	src/arith_uint256.cpp	/^unsigned int base_uint<BITS>::bits() const$/;"	f	class:base_uint
bitsPerSample	src/qt/notificator.cpp	/^    int bitsPerSample;$/;"	m	class:FreedesktopImage	file:
bits_per_key_	src/leveldb/util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon3::BloomFilterPolicy	file:
blind	src/secp256k1/src/ecmult_gen.h	/^    secp256k1_scalar blind;$/;"	m	struct:__anon100
blkindex	contrib/linearize/linearize-data.py	/^    blkindex = get_block_hashes(settings)$/;"	v	class:BlockDataCopier
blkmap	contrib/linearize/linearize-data.py	/^    blkmap = mkblockmap(blkindex)$/;"	v	class:BlockDataCopier
block	src/miner.h	/^    CBlock block;$/;"	m	struct:CBlockTemplate
blockHeight	src/policy/fees.h	/^        unsigned int blockHeight;$/;"	m	struct:FeeEstimateHorizon::CBlockPolicyEstimator::TxStatsInfo
blockMinFeeRate	src/miner.h	/^        CFeeRate blockMinFeeRate;$/;"	m	struct:BlockAssembler::Options
blockMinFeeRate	src/miner.h	/^    CFeeRate blockMinFeeRate;$/;"	m	class:BlockAssembler
blockMinFeeRate	src/test/miner_tests.cpp	/^static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);$/;"	v	file:
blockProcessTime	src/qt/modaloverlay.h	/^    QVector<QPair<qint64, double> > blockProcessTime;$/;"	m	class:ModalOverlay
blockSinceLastRollingFeeBump	src/txmempool.h	/^    mutable bool blockSinceLastRollingFeeBump;$/;"	m	class:CTxMemPool
blockToJSON	src/rpc/blockchain.cpp	/^UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails)$/;"	f
block_	src/leveldb/table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_bench	src/bench/checkblock.cpp	/^namespace block_bench {$/;"	n	file:
block_cache	src/leveldb/include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	src/leveldb/table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
block_height	src/interfaces/wallet.h	/^    int block_height;$/;"	m	struct:interfaces::WalletTxStatus
block_offset_	src/leveldb/db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_reject_reason	test/functional/data/invalid_txs.py	/^    block_reject_reason = ""$/;"	v	class:BadTxTemplate
block_reject_reason	test/functional/data/invalid_txs.py	/^    block_reject_reason = "bad-blk-sigops, out-of-bounds SigOpCount"$/;"	v	class:TooManySigops
block_restart_interval	src/leveldb/include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	src/leveldb/include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
block_submit	test/functional/feature_nulldummy.py	/^    def block_submit(self, node, txs, witness=False, accept=False):$/;"	m	class:NULLDUMMYTest
blockfilters	src/test/data/blockfilters.json.h	/^static unsigned const char blockfilters[] = {$/;"	m	namespace:json_tests
blockhash	src/blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactions
blockhash	src/blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactionsRequest
blockheaderToJSON	src/rpc/blockchain.cpp	/^UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex)$/;"	f
blockinfo	src/test/miner_tests.cpp	/^} blockinfo[] = {$/;"	v	typeref:struct:__anon59	file:
blockingGUIThreadConnection	src/qt/guiutil.cpp	/^Qt::ConnectionType blockingGUIThreadConnection()$/;"	f	namespace:GUIUtil
blocksConnected	src/validation.cpp	/^    std::vector<PerBlockConnectTrace> blocksConnected;$/;"	m	class:ConnectTrace	file:
blocksDir	src/qt/clientmodel.cpp	/^QString ClientModel::blocksDir() const$/;"	f	class:ClientModel
blocks_	src/leveldb/helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon35::FileState	file:
blocks_	src/leveldb/util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_to_maturity	src/interfaces/wallet.h	/^    int blocks_to_maturity;$/;"	m	struct:interfaces::WalletTxStatus
bloomflags	src/bloom.h	/^enum bloomflags$/;"	g
bm	src/leveldb/db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
bn2bin	test/functional/test_framework/bignum.py	/^def bn2bin(v):$/;"	f
bn2mpi	test/functional/test_framework/bignum.py	/^def bn2mpi(v):$/;"	f
bn2vch	test/functional/test_framework/bignum.py	/^def bn2vch(v):$/;"	f
bn2vch	test/functional/test_framework/script.py	/^from .bignum import bn2vch$/;"	i
bn_bytes	test/functional/test_framework/bignum.py	/^def bn_bytes(v, have_ext=False):$/;"	f
body	src/bitcoin-cli.cpp	/^    std::string body;$/;"	m	struct:HTTPReply	file:
boolval	src/test/serialize_tests.cpp	/^    bool boolval;$/;"	m	class:CSerializeMethodsTestSingle	file:
boost	src/init.h	/^namespace boost$/;"	n
boost	src/interfaces/handler.h	/^namespace boost {$/;"	n
boost	src/ui_interface.h	/^namespace boost {$/;"	n
boostPathToQString	src/qt/guiutil.cpp	/^QString boostPathToQString(const fs::path &path)$/;"	f	namespace:GUIUtil
bootstrap_p2p	test/functional/feature_block.py	/^    def bootstrap_p2p(self, timeout=10):$/;"	m	class:FullBlockTest
bootstrap_p2p	test/functional/p2p_invalid_tx.py	/^    def bootstrap_p2p(self, *, num_connections=1):$/;"	m	class:InvalidTxRequestTest
boundSockets	src/httpserver.cpp	/^std::vector<evhttp_bound_socket *> boundSockets;$/;"	v
branch	test/functional/feature_rbf.py	/^        def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _total_txs=None):$/;"	f	function:ReplaceByFeeTest.test_doublespend_tree
bringToFront	src/qt/guiutil.cpp	/^void bringToFront(QWidget* w)$/;"	f	namespace:GUIUtil
browseHistory	src/qt/rpcconsole.cpp	/^void RPCConsole::browseHistory(int offset)$/;"	f	class:RPCConsole
bswapTests	src/qt/test/compattests.cpp	/^void CompatTests::bswapTests()$/;"	f	class:CompatTests
bswap_16	src/compat/byteswap.h	/^#define bswap_16(/;"	d
bswap_16	src/compat/byteswap.h	/^inline uint16_t bswap_16(uint16_t x)$/;"	f
bswap_32	src/compat/byteswap.h	/^#define bswap_32(/;"	d
bswap_32	src/compat/byteswap.h	/^inline uint32_t bswap_32(uint32_t x)$/;"	f
bswap_64	src/compat/byteswap.h	/^#define bswap_64(/;"	d
bswap_64	src/compat/byteswap.h	/^inline uint64_t bswap_64(uint64_t x)$/;"	f
bucketIndex	src/policy/fees.h	/^        unsigned int bucketIndex;$/;"	m	struct:FeeEstimateHorizon::CBlockPolicyEstimator::TxStatsInfo
bucketMap	src/policy/fees.cpp	/^    const std::map<double, unsigned int>& bucketMap; \/\/ Map of bucket upper-bound to index into all vectors by bucket$/;"	m	class:TxConfirmStats	file:
buckets	src/policy/fees.cpp	/^    const std::vector<double>& buckets;              \/\/ The upper-bound of the range for the bucket (inclusive)$/;"	m	class:TxConfirmStats	file:
buckets_	src/leveldb/util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buf	src/crypto/ripemd160.h	/^    unsigned char buf[64];$/;"	m	class:CRIPEMD160
buf	src/crypto/sha1.h	/^    unsigned char buf[64];$/;"	m	class:CSHA1
buf	src/crypto/sha256.h	/^    unsigned char buf[64];$/;"	m	class:CSHA256
buf	src/crypto/sha512.h	/^    unsigned char buf[128];$/;"	m	class:CSHA512
buf	src/secp256k1/src/hash.h	/^    uint32_t buf[16]; \/* In big endian *\/$/;"	m	struct:__anon111
buffer	src/leveldb/db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	src/leveldb/db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	src/leveldb/table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
bufreverse	contrib/linearize/linearize-data.py	/^def bufreverse(in_buf):$/;"	f
build	Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build	contrib/gitian-build.py	/^def build():$/;"	f
build	depends/Makefile	/^build:=$(shell .\/config.sub $(BUILD))$/;"	m
build	doc/man/Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build	src/Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build	src/secp256k1/Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build	src/univalue/Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_alias	doc/man/Makefile	/^build_alias = $/;"	m
build_alias	src/Makefile	/^build_alias = $/;"	m
build_alias	src/secp256k1/Makefile	/^build_alias = $/;"	m
build_alias	src/univalue/Makefile	/^build_alias = $/;"	m
build_arch	depends/Makefile	/^build_arch =$(firstword $(subst -, ,$(build)))$/;"	m
build_block_on_tip	test/functional/p2p_compactblocks.py	/^    def build_block_on_tip(self, node, segwit=False):$/;"	m	class:CompactBlocksTest
build_block_with_transactions	test/functional/p2p_compactblocks.py	/^    def build_block_with_transactions(self, node, utxo, num_transactions):$/;"	m	class:CompactBlocksTest
build_chain	test/functional/p2p_fingerprint.py	/^    def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):$/;"	m	class:P2PFingerprintTest
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	doc/man/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	src/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	src/secp256k1/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	src/univalue/Makefile	/^build_cpu = x86_64$/;"	m
build_darwin_AR	depends/builders/darwin.mk	/^build_darwin_AR:=$(shell xcrun -f ar)$/;"	m
build_darwin_CC	depends/builders/darwin.mk	/^build_darwin_CC:=$(shell xcrun -f clang)$/;"	m
build_darwin_CXX	depends/builders/darwin.mk	/^build_darwin_CXX:=$(shell xcrun -f clang++)$/;"	m
build_darwin_DOWNLOAD	depends/builders/darwin.mk	/^build_darwin_DOWNLOAD=curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o$/;"	m
build_darwin_INSTALL_NAME_TOOL	depends/builders/darwin.mk	/^build_darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)$/;"	m
build_darwin_NM	depends/builders/darwin.mk	/^build_darwin_NM:=$(shell xcrun -f nm)$/;"	m
build_darwin_OTOOL	depends/builders/darwin.mk	/^build_darwin_OTOOL:=$(shell xcrun -f otool)$/;"	m
build_darwin_RANLIB	depends/builders/darwin.mk	/^build_darwin_RANLIB:=$(shell xcrun -f ranlib)$/;"	m
build_darwin_SHA256SUM	depends/builders/darwin.mk	/^build_darwin_SHA256SUM=shasum -a 256$/;"	m
build_darwin_STRIP	depends/builders/darwin.mk	/^build_darwin_STRIP:=$(shell xcrun -f strip)$/;"	m
build_host	depends/Makefile	/^build_host=$(build)$/;"	m
build_id_string	depends/Makefile	/^build_id_string:=$(BUILD_ID_SALT)$/;"	m
build_linux_DOWNLOAD	depends/builders/linux.mk	/^build_linux_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o$/;"	m
build_linux_SHA256SUM	depends/builders/linux.mk	/^build_linux_SHA256SUM = sha256sum$/;"	m
build_message	test/functional/test_framework/mininode.py	/^    def build_message(self, message):$/;"	m	class:P2PConnection
build_next_block	test/functional/p2p_segwit.py	/^    def build_next_block(self, version=4):$/;"	m	class:SegWitTest
build_os	Makefile	/^build_os = darwin17.7.0$/;"	m
build_os	depends/Makefile	/^build_os:=$(findstring linux,$(full_build_os))$/;"	m
build_os	depends/Makefile	/^build_os:=$(strip $(build_os))$/;"	m
build_os	depends/Makefile	/^build_os=$(full_build_os)$/;"	m
build_os	doc/man/Makefile	/^build_os = darwin17.7.0$/;"	m
build_os	src/Makefile	/^build_os = darwin17.7.0$/;"	m
build_os	src/secp256k1/Makefile	/^build_os = darwin17.7.0$/;"	m
build_os	src/univalue/Makefile	/^build_os = darwin17.7.0$/;"	m
build_prefix	depends/Makefile	/^build_prefix=$(host_prefix)\/native$/;"	m
build_request	contrib/linearize/linearize-hashes.py	/^    def build_request(idx, method, params):$/;"	m	class:BitcoinRPC
build_triplet	Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_triplet	doc/man/Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_triplet	src/Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_triplet	src/secp256k1/Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_triplet	src/univalue/Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_vendor	Makefile	/^build_vendor = apple$/;"	m
build_vendor	depends/Makefile	/^build_vendor=$(word 2,$(subst -, ,$(build)))$/;"	m
build_vendor	doc/man/Makefile	/^build_vendor = apple$/;"	m
build_vendor	src/Makefile	/^build_vendor = apple$/;"	m
build_vendor	src/secp256k1/Makefile	/^build_vendor = apple$/;"	m
build_vendor	src/univalue/Makefile	/^build_vendor = apple$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builddir	doc/man/Makefile	/^builddir = .$/;"	m
builddir	src/Makefile	/^builddir = .$/;"	m
builddir	src/secp256k1/Makefile	/^builddir = .$/;"	m
builddir	src/univalue/Makefile	/^builddir = .$/;"	m
builder	src/leveldb/db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
bumpFee	src/qt/transactionview.cpp	/^void TransactionView::bumpFee()$/;"	f	class:TransactionView
bumpFee	src/qt/walletmodel.cpp	/^bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)$/;"	f	class:WalletModel
bumpFeeAction	src/qt/transactionview.h	/^    QAction *bumpFeeAction;$/;"	m	class:TransactionView
bumpfee	src/wallet/rpcwallet.cpp	/^static UniValue bumpfee(const JSONRPCRequest& request)$/;"	f	file:
but	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
but	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
buttonBoxClicked	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::buttonBoxClicked(QAbstractButton* button)$/;"	f	class:CoinControlDialog
buttonSelectAllClicked	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::buttonSelectAllClicked()$/;"	f	class:CoinControlDialog
byte_to_base58	test/functional/test_framework/address.py	/^def byte_to_base58(b, version):$/;"	f
bytebuf	src/random.h	/^    unsigned char bytebuf[64];$/;"	m	class:FastRandomContext
bytebuf_size	src/random.h	/^    int bytebuf_size;$/;"	m	class:FastRandomContext
bytereverse	contrib/linearize/linearize-data.py	/^def bytereverse(x):$/;"	f
bytes	src/crypto/ripemd160.h	/^    uint64_t bytes;$/;"	m	class:CRIPEMD160
bytes	src/crypto/sha1.h	/^    uint64_t bytes;$/;"	m	class:CSHA1
bytes	src/crypto/sha256.h	/^    uint64_t bytes;$/;"	m	class:CSHA256
bytes	src/crypto/sha512.h	/^    uint64_t bytes;$/;"	m	class:CSHA512
bytes	src/secp256k1/src/hash.h	/^    size_t bytes;$/;"	m	struct:__anon111
bytes_	src/leveldb/db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon19::Stats	file:
bytes_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_counter_	src/leveldb/db/db_iter.cc	/^  ssize_t bytes_counter_;$/;"	m	class:leveldb::__anon29::DBIter	file:
bytes_read	src/leveldb/db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	src/leveldb/db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	src/leveldb/util/comparator.cc	/^static const Comparator* bytewise;$/;"	m	namespace:leveldb	file:
caCert1_BASE64	src/qt/test/paymentrequestdata.h	/^const char* caCert1_BASE64 =$/;"	v
caCert2_BASE64	src/qt/test/paymentrequestdata.h	/^const char* caCert2_BASE64 =$/;"	v
cachable	src/leveldb/table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache	src/cuckoocache.h	/^    cache() : table(), size(), collection_flags(0), epoch_flags(),$/;"	f	class:CuckooCache::cache
cache	src/cuckoocache.h	/^class cache$/;"	c	namespace:CuckooCache
cache	src/test/versionbits_tests.cpp	/^    mutable ThresholdConditionCache cache;$/;"	m	class:TestConditionChecker	file:
cacheCoins	src/coins.h	/^    mutable CCoinsMap cacheCoins;$/;"	m	class:CCoinsViewCache
cacheMap	src/txmempool.h	/^    typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;$/;"	t	class:CTxMemPool
cacheStore	src/validation.h	/^    bool cacheStore;$/;"	m	class:CScriptCheck
cache_	src/leveldb/db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	src/leveldb/db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	src/leveldb/util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	src/leveldb/table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
cache_path	test/functional/test_framework/test_framework.py	/^            def cache_path(n, *paths):$/;"	f	function:BitcoinTestFramework._initialize_chain
cachedAddressTable	src/qt/addresstablemodel.cpp	/^    QList<AddressTableEntry> cachedAddressTable;$/;"	m	class:AddressTablePriv	file:
cachedBanlist	src/qt/bantablemodel.cpp	/^    QList<CCombinedBan> cachedBanlist;$/;"	m	class:BanTablePriv	file:
cachedBestHeaderHeight	src/qt/clientmodel.h	/^    mutable std::atomic<int> cachedBestHeaderHeight;$/;"	m	class:ClientModel
cachedBestHeaderTime	src/qt/clientmodel.h	/^    mutable std::atomic<int64_t> cachedBestHeaderTime;$/;"	m	class:ClientModel
cachedCoinsUsage	src/coins.h	/^    mutable size_t cachedCoinsUsage;$/;"	m	class:CCoinsViewCache
cachedEncryptionStatus	src/qt/walletmodel.h	/^    EncryptionStatus cachedEncryptionStatus;$/;"	m	class:WalletModel
cachedInnerUsage	src/txmempool.h	/^    uint64_t cachedInnerUsage = 0;$/;"	m	struct:DisconnectedBlockTransactions
cachedInnerUsage	src/txmempool.h	/^    uint64_t cachedInnerUsage; \/\/!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)$/;"	m	class:CTxMemPool
cachedMinimumSizeHint	src/qt/bitcoinamountfield.cpp	/^    mutable QSize cachedMinimumSizeHint;$/;"	m	class:AmountSpinBox	file:
cachedNodeStats	src/qt/peertablemodel.cpp	/^    QList<CNodeCombinedStats> cachedNodeStats;$/;"	m	class:PeerTablePriv	file:
cachedNodeids	src/qt/rpcconsole.h	/^    QList<NodeId> cachedNodeids;$/;"	m	class:RPCConsole
cachedNumBlocks	src/qt/walletmodel.h	/^    int cachedNumBlocks;$/;"	m	class:WalletModel
cachedWallet	src/qt/transactiontablemodel.cpp	/^    QList<TransactionRecord> cachedWallet;$/;"	m	class:TransactionTablePriv	file:
caches	src/versionbits.h	/^    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:VersionBitsCache
calc_hash_str	contrib/linearize/linearize-data.py	/^def calc_hash_str(blk_hdr):$/;"	f
calc_hdr_hash	contrib/linearize/linearize-data.py	/^def calc_hdr_hash(blk_hdr):$/;"	f
calc_merkle_root	test/functional/test_framework/messages.py	/^    def calc_merkle_root(self):$/;"	m	class:CBlock
calc_sha256	test/functional/test_framework/messages.py	/^    def calc_sha256(self):$/;"	m	class:CBlockHeader
calc_sha256	test/functional/test_framework/messages.py	/^    def calc_sha256(self, with_witness=False):$/;"	m	class:CTransaction
calc_usage	test/functional/feature_pruning.py	/^def calc_usage(blockdir):$/;"	f
calc_witness_merkle_root	test/functional/test_framework/messages.py	/^    def calc_witness_merkle_root(self):$/;"	m	class:CBlock
calculateIdealFontSize	src/qt/guiutil.cpp	/^qreal calculateIdealFontSize(int width, const QString& text, QFont font, qreal minPointSize, qreal font_size) {$/;"	f	namespace:GUIUtil
calculate_shortid	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
calculate_shortid	test/functional/test_framework/messages.py	/^def calculate_shortid(k0, k1, tx_hash):$/;"	f
call_git_log	contrib/devtools/copyright_header.py	/^def call_git_log(filename):$/;"	f
call_git_ls	contrib/devtools/copyright_header.py	/^def call_git_ls(base_directory):$/;"	f
call_git_toplevel	contrib/devtools/copyright_header.py	/^def call_git_toplevel():$/;"	f
call_security_check	contrib/devtools/test-security-check.py	/^def call_security_check(cc, source, executable, options):$/;"	f
canGetAddresses	src/qt/walletmodel.cpp	/^bool WalletModel::canGetAddresses() const$/;"	f	class:WalletModel
canonical_host	depends/Makefile	/^canonical_host:=$(shell .\/config.sub $(HOST))$/;"	m
capacity	src/prevector.h	/^            size_type capacity;$/;"	m	struct:prevector::direct_or_indirect::__anon73
capacity	src/prevector.h	/^    size_t capacity() const {$/;"	f	class:prevector
capacity	src/test/prevector_tests.cpp	/^    Size capacity() const {$/;"	f	class:prevector_tester
capacity_	src/leveldb/util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
category	src/logging.cpp	/^    std::string category;$/;"	m	struct:CLogCategoryDesc	file:
category	src/logging.h	/^    std::string category;$/;"	m	struct:CLogCategoryActive
category	src/rpc/server.h	/^    std::string category;$/;"	m	class:CRPCCommand
categoryClass	src/qt/rpcconsole.cpp	/^static QString categoryClass(int category)$/;"	f	file:
cbegin	src/indirectmap.h	/^    const_iterator cbegin() const   { return m.cbegin(); }$/;"	f	class:indirectmap
cend	src/indirectmap.h	/^    const_iterator cend() const     { return m.cend(); }$/;"	f	class:indirectmap
certStore	src/qt/paymentserver.cpp	/^    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;$/;"	m	namespace:__anon70	file:
chRejectCode	src/consensus/validation.h	/^    unsigned int chRejectCode;$/;"	m	class:CValidationState
chRejectCode	src/net_processing.cpp	/^    unsigned char chRejectCode;$/;"	m	struct:__anon89::CBlockReject	file:
chain	src/init.h	/^    std::unique_ptr<interfaces::Chain> chain;$/;"	m	struct:InitInterfaces
chain	src/wallet/wallet.h	/^    interfaces::Chain& chain() const { assert(m_chain); return *m_chain; }$/;"	f	class:final
chainTxData	src/chainparams.h	/^    ChainTxData chainTxData;$/;"	m	class:CChainParams
chain_clients	src/init.h	/^    std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;$/;"	m	struct:InitInterfaces
chain_tip	test/functional/mining_basic.py	/^        def chain_tip(b_hash, *, status='headers-only', branchlen=1):$/;"	f	function:MiningTest.run_test
chain_transaction	test/functional/mempool_packages.py	/^    def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):$/;"	m	class:MempoolPackagesTest
chaincode	src/key.h	/^    ChainCode chaincode;$/;"	m	struct:CExtKey
chaincode	src/pubkey.h	/^    ChainCode chaincode;$/;"	m	struct:CExtPubKey
chainparams	src/miner.h	/^    const CChainParams& chainparams;$/;"	m	class:BlockAssembler
change	src/interfaces/wallet.h	/^    CAmount change;$/;"	m	struct:interfaces::WalletTx
changeEvent	src/qt/bitcoingui.cpp	/^void BitcoinGUI::changeEvent(QEvent *e)$/;"	f	class:BitcoinGUI
changePassphrase	src/qt/walletframe.cpp	/^void WalletFrame::changePassphrase()$/;"	f	class:WalletFrame
changePassphrase	src/qt/walletmodel.cpp	/^bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureString &newPass)$/;"	f	class:WalletModel
changePassphrase	src/qt/walletview.cpp	/^void WalletView::changePassphrase()$/;"	f	class:WalletView
changePassphraseAction	src/qt/bitcoingui.h	/^    QAction* changePassphraseAction = nullptr;$/;"	m	class:BitcoinGUI
change_capacity	src/prevector.h	/^    void change_capacity(size_type new_capacity) {$/;"	f	class:prevector
change_label	test/functional/wallet_labels.py	/^def change_label(node, address, old_label, new_label):$/;"	f
change_output_size	src/wallet/wallet.h	/^    size_t change_output_size = 0;$/;"	m	struct:CoinSelectionParams
change_spend_size	src/wallet/wallet.h	/^    size_t change_spend_size = 0;$/;"	m	struct:CoinSelectionParams
changedAmount	src/qt/transactionview.cpp	/^void TransactionView::changedAmount()$/;"	f	class:TransactionView
changedSearch	src/qt/transactionview.cpp	/^void TransactionView::changedSearch()$/;"	f	class:TransactionView
channels	src/qt/notificator.cpp	/^    int channels;$/;"	m	class:FreedesktopImage	file:
charge	src/leveldb/util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
chars	test/functional/test_framework/address.py	/^chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'$/;"	v
charstrval	src/test/serialize_tests.cpp	/^    char charstrval[16];$/;"	m	class:CSerializeMethodsTestSingle	file:
check	src/qt/intro.cpp	/^void FreespaceChecker::check()$/;"	f	class:FreespaceChecker
check	src/txmempool.cpp	/^void CTxMemPool::check(const CCoinsViewCache *pcoins) const$/;"	f	class:CTxMemPool
check	test/functional/wallet_import_rescan.py	/^    def check(self, txid=None, amount=None, confirmations=None):$/;"	m	class:Variant
checkAndMigrate	src/qt/optionsmodel.cpp	/^void OptionsModel::checkAndMigrate()$/;"	f	class:OptionsModel
checkBalanceChanged	src/qt/walletmodel.cpp	/^void WalletModel::checkBalanceChanged(const interfaces::WalletBalances& new_balances)$/;"	f	class:WalletModel
checkObject	src/univalue/lib/univalue.cpp	/^bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const$/;"	f	class:UniValue
checkPath	src/qt/intro.cpp	/^void Intro::checkPath(const QString &dataDir)$/;"	f	class:Intro
checkPoint	src/qt/guiutil.cpp	/^bool checkPoint(const QPoint &p, const QWidget *w)$/;"	f	namespace:GUIUtil
checkSubtractFeeFromAmount	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::checkSubtractFeeFromAmount()$/;"	f	class:SendCoinsEntry
checkValidator	src/qt/qvalidatedlineedit.h	/^    const QValidator *checkValidator;$/;"	m	class:QValidatedLineEdit
checkValidity	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::checkValidity()$/;"	f	class:QValidatedLineEdit
check_ELF_Canary	contrib/devtools/security-check.py	/^def check_ELF_Canary(executable):$/;"	f
check_ELF_NX	contrib/devtools/security-check.py	/^def check_ELF_NX(executable):$/;"	f
check_ELF_PIE	contrib/devtools/security-check.py	/^def check_ELF_PIE(executable):$/;"	f
check_ELF_RELRO	contrib/devtools/security-check.py	/^def check_ELF_RELRO(executable):$/;"	f
check_PE_DYNAMIC_BASE	contrib/devtools/security-check.py	/^def check_PE_DYNAMIC_BASE(executable):$/;"	f
check_PE_HIGH_ENTROPY_VA	contrib/devtools/security-check.py	/^def check_PE_HIGH_ENTROPY_VA(executable):$/;"	f
check_PE_NX	contrib/devtools/security-check.py	/^def check_PE_NX(executable):$/;"	f
check_addmultisigaddress_errors	test/functional/rpc_createmultisig.py	/^    def check_addmultisigaddress_errors(self):$/;"	m	class:RpcCreateMultiSigTest
check_announcement_of_new_block	test/functional/p2p_compactblocks.py	/^        def check_announcement_of_new_block(node, peer, predicate):$/;"	f	function:CompactBlocksTest.test_sendcmpct
check_at_repository_root	contrib/devtools/update-translations.py	/^def check_at_repository_root():$/;"	f
check_compactblock_construction_from_block	test/functional/p2p_compactblocks.py	/^    def check_compactblock_construction_from_block(self, version, header_and_shortids, block_hash, block):$/;"	m	class:CompactBlocksTest
check_estimates	test/functional/feature_fee_estimation.py	/^def check_estimates(node, fees_seen):$/;"	f
check_exists	contrib/install_db4.sh	/^check_exists() {$/;"	f
check_fe_equal	src/secp256k1/src/tests.c	/^int check_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
check_fe_inverse	src/secp256k1/src/tests.c	/^int check_fe_inverse(const secp256k1_fe *a, const secp256k1_fe *ai) {$/;"	f
check_fee_amount	test/functional/wallet_basic.py	/^    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):$/;"	m	class:WalletTest
check_format_specifiers	contrib/devtools/update-translations.py	/^def check_format_specifiers(source, translation, errors, numerus):$/;"	f
check_id	src/test/checkqueue_tests.cpp	/^    size_t check_id;$/;"	m	struct:UniqueCheck	file:
check_json_precision	test/functional/test_framework/util.py	/^def check_json_precision():$/;"	f
check_key	test/functional/test_framework/address.py	/^def check_key(key):$/;"	f
check_last_headers_announcement	test/functional/p2p_sendheaders.py	/^    def check_last_headers_announcement(self, headers):$/;"	m	class:BaseNode
check_last_inv_announcement	test/functional/p2p_sendheaders.py	/^    def check_last_inv_announcement(self, inv):$/;"	m	class:BaseNode
check_mempool_result	test/functional/mempool_accept.py	/^    def check_mempool_result(self, result_expected, *args, **kwargs):$/;"	m	class:MempoolAcceptanceTest
check_or_remove_cached	depends/Makefile	/^define check_or_remove_cached$/;"	m
check_or_remove_sources	depends/Makefile	/^define check_or_remove_sources$/;"	m
check_output	test/lint/check-doc.py	/^from subprocess import check_output$/;"	i
check_script	test/functional/test_framework/address.py	/^def check_script(script):$/;"	f
check_script_list	test/functional/test_runner.py	/^def check_script_list(*, src_dir, fail_on_warn):$/;"	f
check_script_prefixes	test/functional/test_runner.py	/^def check_script_prefixes():$/;"	f
check_version	contrib/devtools/symbol-check.py	/^def check_version(max_versions, version, arch):$/;"	f
checkbalances	test/functional/rpc_createmultisig.py	/^    def checkbalances(self):$/;"	m	class:RpcCreateMultiSigTest
checked_malloc	src/secp256k1/src/util.h	/^static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {$/;"	f
checker	src/script/sign.cpp	/^    BaseSignatureChecker& checker;$/;"	m	class:final	file:
checker	src/script/sign.h	/^    const MutableTransactionSignatureChecker checker;$/;"	m	class:MutableTransactionSignatureCreator
checker	src/test/versionbits_tests.cpp	/^    TestConditionChecker checker[CHECKERS];$/;"	m	class:VersionBitsTester	file:
checker_always	src/test/versionbits_tests.cpp	/^    TestAlwaysActiveConditionChecker checker_always[CHECKERS];$/;"	m	class:VersionBitsTester	file:
checkpointData	src/chainparams.h	/^    CCheckpointData checkpointData;$/;"	m	class:CChainParams
checksum	contrib/testgen/base58.py	/^def checksum(v):$/;"	f
checksum	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
checksum_	src/leveldb/db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
child	share/qt/extract_strings_qt.py	/^child = Popen([XGETTEXT,'--output=-','-n','--keyword=_'] + files, stdout=PIPE)$/;"	v
children	src/txmempool.h	/^        setEntries children;$/;"	m	struct:CTxMemPool::TxLinks
children_	src/leveldb/table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
chooseDate	src/qt/transactionview.cpp	/^void TransactionView::chooseDate(int idx)$/;"	f	class:TransactionView
chooseType	src/qt/transactionview.cpp	/^void TransactionView::chooseType(int idx)$/;"	f	class:TransactionView
chooseWatchonly	src/qt/transactionview.cpp	/^void TransactionView::chooseWatchonly(int idx)$/;"	f	class:TransactionView
chr	contrib/testgen/base58.py	/^    def chr(n):$/;"	f
chunks_free	src/support/lockedpool.h	/^        size_t chunks_free;$/;"	m	struct:Arena::Stats
chunks_free	src/support/lockedpool.h	/^        size_t chunks_free;$/;"	m	struct:LockedPool::Stats
chunks_free	src/support/lockedpool.h	/^    ChunkToSizeMap chunks_free;$/;"	m	class:Arena
chunks_free_end	src/support/lockedpool.h	/^    ChunkToSizeMap chunks_free_end;$/;"	m	class:Arena
chunks_used	src/support/lockedpool.h	/^        size_t chunks_used;$/;"	m	struct:Arena::Stats
chunks_used	src/support/lockedpool.h	/^        size_t chunks_used;$/;"	m	struct:LockedPool::Stats
chunks_used	src/support/lockedpool.h	/^    std::unordered_map<char*, size_t> chunks_used;$/;"	m	class:Arena
cipher	src/crypto/ctaes/test.c	/^    const char* cipher;$/;"	m	struct:__anon44	file:
class_type	src/memusage.h	/^    void* class_type;$/;"	m	struct:memusage::stl_shared_counter
cleanSubVer	src/net.h	/^    std::string cleanSubVer;$/;"	m	class:CNodeStats
clean_up	contrib/verifybinaries/verify.sh	/^function clean_up {$/;"	f
cleanup	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static synchronized void cleanup() {$/;"	m	class:NativeSecp256k1
cleanup	test/functional/test_runner.py	/^    def cleanup(self):$/;"	m	class:RPCCoverage
cleanup_	src/leveldb/include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	src/bloom.cpp	/^void CBloomFilter::clear()$/;"	f	class:CBloomFilter
clear	src/indirectmap.h	/^    void clear()                    { m.clear(); }$/;"	f	class:indirectmap
clear	src/leveldb/include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
clear	src/prevector.h	/^    void clear() {$/;"	f	class:prevector
clear	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::clear()$/;"	f	class:BitcoinAmountField
clear	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::clear()$/;"	f	class:QValidatedLineEdit
clear	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::clear()$/;"	f	class:ReceiveCoinsDialog
clear	src/qt/rpcconsole.cpp	/^void RPCConsole::clear(bool clearHistory)$/;"	f	class:RPCConsole
clear	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::clear()$/;"	f	class:SendCoinsDialog
clear	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::clear()$/;"	f	class:SendCoinsEntry
clear	src/qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::clear()$/;"	f	class:TrafficGraphWidget
clear	src/script/script.h	/^    void clear()$/;"	f	class:CScript
clear	src/script/sign.h	/^    void clear()$/;"	f	struct:KeyOriginInfo
clear	src/streams.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	src/test/prevector_tests.cpp	/^    void clear() {$/;"	f	class:prevector_tester
clear	src/txmempool.cpp	/^void CTxMemPool::clear()$/;"	f	class:CTxMemPool
clear	src/txmempool.h	/^    void clear()$/;"	f	struct:DisconnectedBlockTransactions
clear	src/univalue/lib/univalue.cpp	/^void UniValue::clear()$/;"	f	class:UniValue
clearExpect	src/univalue/lib/univalue_read.cpp	/^#define clearExpect(/;"	d	file:
clearSelectedNode	src/qt/rpcconsole.cpp	/^void RPCConsole::clearSelectedNode()$/;"	f	class:RPCConsole
clearStatusLabel	src/qt/optionsdialog.cpp	/^void OptionsDialog::clearStatusLabel()$/;"	f	class:OptionsDialog
clear_block_announcement	test/functional/p2p_compactblocks.py	/^    def clear_block_announcement(self):$/;"	m	class:TestP2PConn
clear_block_announcements	test/functional/p2p_sendheaders.py	/^    def clear_block_announcements(self):$/;"	m	class:BaseNode
clear_invs	test/functional/p2p_feefilter.py	/^    def clear_invs(self):$/;"	m	class:TestP2PConn
clearbanned	src/rpc/net.cpp	/^static UniValue clearbanned(const JSONRPCRequest& request)$/;"	f	file:
client	test/functional/feature_dbcrash.py	/^import http.client$/;"	i
client	test/functional/interface_http.py	/^import http.client$/;"	i
client	test/functional/interface_rest.py	/^import http.client$/;"	i
client	test/functional/rpc_blockchain.py	/^import http.client$/;"	i
client	test/functional/rpc_users.py	/^import http.client$/;"	i
client	test/functional/test_framework/authproxy.py	/^import http.client$/;"	i
client	test/functional/test_framework/test_node.py	/^import http.client$/;"	i
clientInterface	src/net.h	/^    CClientUIInterface* clientInterface;$/;"	m	class:CConnman
clientModel	src/qt/bantablemodel.h	/^    ClientModel *clientModel;$/;"	m	class:BanTableModel
clientModel	src/qt/bitcoin.h	/^    ClientModel *clientModel;$/;"	m	class:BitcoinApplication
clientModel	src/qt/bitcoingui.h	/^    ClientModel* clientModel = nullptr;$/;"	m	class:BitcoinGUI
clientModel	src/qt/overviewpage.h	/^    ClientModel *clientModel;$/;"	m	class:OverviewPage
clientModel	src/qt/peertablemodel.h	/^    ClientModel *clientModel;$/;"	m	class:PeerTableModel
clientModel	src/qt/rpcconsole.h	/^    ClientModel *clientModel = nullptr;$/;"	m	class:RPCConsole
clientModel	src/qt/sendcoinsdialog.h	/^    ClientModel *clientModel;$/;"	m	class:SendCoinsDialog
clientModel	src/qt/trafficgraphwidget.h	/^    ClientModel *clientModel;$/;"	m	class:TrafficGraphWidget
clientModel	src/qt/walletframe.h	/^    ClientModel *clientModel;$/;"	m	class:WalletFrame
clientModel	src/qt/walletview.h	/^    ClientModel *clientModel;$/;"	m	class:WalletView
clientNonce	src/torcontrol.cpp	/^    std::vector<uint8_t> clientNonce;$/;"	m	class:TorController	file:
clipboardAfterFee	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardAfterFee()$/;"	f	class:CoinControlDialog
clipboardAmount	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardAmount()$/;"	f	class:CoinControlDialog
clipboardBytes	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardBytes()$/;"	f	class:CoinControlDialog
clipboardChange	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardChange()$/;"	f	class:CoinControlDialog
clipboardFee	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardFee()$/;"	f	class:CoinControlDialog
clipboardLowOutput	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardLowOutput()$/;"	f	class:CoinControlDialog
clipboardQuantity	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardQuantity()$/;"	f	class:CoinControlDialog
cloneContext	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static long cloneContext() {$/;"	m	class:NativeSecp256k1
close	contrib/devtools/symbol-check.py	/^    def close(self):$/;"	m	class:CPPFilt
close	src/fs.cpp	/^void ifstream::close()$/;"	f	class:fsbridge::ifstream
close	src/fs.cpp	/^void ofstream::close()$/;"	f	class:fsbridge::ofstream
close	src/leveldb/port/port_win.h	/^#define close /;"	d
close	test/functional/test_framework/mininode.py	/^    def close(self, timeout=10):$/;"	m	class:NetworkThread
closeClicked	src/qt/modaloverlay.cpp	/^void ModalOverlay::closeClicked()$/;"	f	class:ModalOverlay
closeEvent	src/qt/bitcoingui.cpp	/^void BitcoinGUI::closeEvent(QCloseEvent *event)$/;"	f	class:BitcoinGUI
closeEvent	src/qt/splashscreen.cpp	/^void SplashScreen::closeEvent(QCloseEvent *event)$/;"	f	class:SplashScreen
closeEvent	src/qt/utilitydialog.cpp	/^void ShutdownWindow::closeEvent(QCloseEvent *event)$/;"	f	class:ShutdownWindow
closeWallet	src/qt/walletcontroller.cpp	/^void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)$/;"	f	class:WalletController
closed	src/leveldb/table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
closure	contrib/devtools/circular-dependencies.py	/^        closure = dict()$/;"	v
cltv_invalidate	test/functional/feature_cltv.py	/^def cltv_invalidate(tx):$/;"	f
cltv_validate	test/functional/feature_cltv.py	/^def cltv_validate(node, tx, height):$/;"	f
cmdBeforeBrowsing	src/qt/rpcconsole.h	/^    QString cmdBeforeBrowsing;$/;"	m	class:RPCConsole
cmp	src/leveldb/table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon16::STLLessThan	file:
code	src/leveldb/include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
code	src/torcontrol.cpp	/^    int code;$/;"	m	class:TorControlReply	file:
codecs	contrib/devtools/github-merge.py	/^import codecs$/;"	i
codepoint	src/univalue/lib/univalue_utffilter.h	/^    unsigned int codepoint;$/;"	m	class:JSONUTF8StringFilter
coerce_iterable	test/functional/test_framework/script.py	/^            def coerce_iterable(iterable):$/;"	f	function:CScript.__new__
coin	src/coins.h	/^    Coin coin; \/\/ The actual cached data.$/;"	m	struct:CCoinsCacheEntry
coinControl	src/qt/coincontroldialog.cpp	/^CCoinControl* CoinControlDialog::coinControl()$/;"	f	class:CoinControlDialog
coinControlButtonClicked	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlButtonClicked()$/;"	f	class:SendCoinsDialog
coinControlChangeChecked	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlChangeChecked(int state)$/;"	f	class:SendCoinsDialog
coinControlChangeEdited	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlChangeEdited(const QString& text)$/;"	f	class:SendCoinsDialog
coinControlClipboardAfterFee	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardAfterFee()$/;"	f	class:SendCoinsDialog
coinControlClipboardAmount	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardAmount()$/;"	f	class:SendCoinsDialog
coinControlClipboardBytes	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardBytes()$/;"	f	class:SendCoinsDialog
coinControlClipboardChange	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardChange()$/;"	f	class:SendCoinsDialog
coinControlClipboardFee	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardFee()$/;"	f	class:SendCoinsDialog
coinControlClipboardLowOutput	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardLowOutput()$/;"	f	class:SendCoinsDialog
coinControlClipboardQuantity	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardQuantity()$/;"	f	class:SendCoinsDialog
coinControlFeatureChanged	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlFeatureChanged(bool checked)$/;"	f	class:SendCoinsDialog
coinControlUpdateLabels	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlUpdateLabels()$/;"	f	class:SendCoinsDialog
coinEmpty	src/coins.cpp	/^static const Coin coinEmpty;$/;"	v	file:
coinbaseKey	src/test/setup_common.h	/^    CKey coinbaseKey; \/\/ private\/public key needed to spend coinbase transactions$/;"	m	struct:TestChain100Setup
collection_flags	src/cuckoocache.h	/^    mutable bit_packed_atomic_flags collection_flags;$/;"	m	class:CuckooCache::cache
collections	contrib/seeds/makeseeds.py	/^import collections$/;"	i
collections	test/functional/test_framework/test_node.py	/^import collections$/;"	i
collections	test/functional/wallet_import_rescan.py	/^import collections$/;"	i
color	src/memusage.h	/^    int color;$/;"	m	struct:memusage::stl_tree_node
colorizeIcons	src/qt/platformstyle.cpp	/^    const bool colorizeIcons;$/;"	m	struct:__anon66	file:
colorizeIcons	src/qt/platformstyle.h	/^    bool colorizeIcons;$/;"	m	class:PlatformStyle
column	src/qt/bantablemodel.h	/^    int column;$/;"	m	class:BannedNodeLessThan
column	src/qt/csvmodelwriter.h	/^        int column;$/;"	m	struct:CSVModelWriter::Column
column	src/qt/peertablemodel.h	/^    int column;$/;"	m	class:NodeLessThan
column	src/qt/recentrequeststablemodel.h	/^    int column;$/;"	m	class:RecentRequestEntryLessThan
columnCount	src/qt/addresstablemodel.cpp	/^int AddressTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
columnCount	src/qt/bantablemodel.cpp	/^int BanTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:BanTableModel
columnCount	src/qt/guiutil.h	/^            int columnCount;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
columnCount	src/qt/peertablemodel.cpp	/^int PeerTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:PeerTableModel
columnCount	src/qt/recentrequeststablemodel.cpp	/^int RecentRequestsTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
columnCount	src/qt/transactiontablemodel.cpp	/^int TransactionTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
columnResizingFixer	src/qt/receivecoinsdialog.h	/^    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;$/;"	m	class:ReceiveCoinsDialog
columnResizingFixer	src/qt/transactionview.h	/^    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;$/;"	m	class:TransactionView
column_alignments	src/qt/transactiontablemodel.cpp	/^static int column_alignments[] = {$/;"	v	file:
columns	src/qt/addresstablemodel.h	/^    QStringList columns;$/;"	m	class:AddressTableModel
columns	src/qt/bantablemodel.h	/^    QStringList columns;$/;"	m	class:BanTableModel
columns	src/qt/csvmodelwriter.h	/^    QList<Column> columns;$/;"	m	class:CSVModelWriter
columns	src/qt/peertablemodel.h	/^    QStringList columns;$/;"	m	class:PeerTableModel
columns	src/qt/recentrequeststablemodel.h	/^    QStringList columns;$/;"	m	class:RecentRequestsTableModel
columns	src/qt/transactiontablemodel.h	/^    QStringList columns;$/;"	m	class:TransactionTableModel
combinepsbt	src/rpc/rawtransaction.cpp	/^UniValue combinepsbt(const JSONRPCRequest& request)$/;"	f
combinerawtransaction	src/rpc/rawtransaction.cpp	/^static UniValue combinerawtransaction(const JSONRPCRequest& request)$/;"	f	file:
command	src/net.h	/^    std::string command;$/;"	m	struct:CSerializedNetMsg
command	test/functional/p2p_invalid_messages.py	/^    command = b'badmsg'$/;"	v	class:msg_unrecognized
command	test/functional/test_framework/messages.py	/^    command = b"addr"$/;"	v	class:msg_addr
command	test/functional/test_framework/messages.py	/^    command = b"block"$/;"	v	class:msg_block
command	test/functional/test_framework/messages.py	/^    command = b"blocktxn"$/;"	v	class:msg_blocktxn
command	test/functional/test_framework/messages.py	/^    command = b"cmpctblock"$/;"	v	class:msg_cmpctblock
command	test/functional/test_framework/messages.py	/^    command = b"feefilter"$/;"	v	class:msg_feefilter
command	test/functional/test_framework/messages.py	/^    command = b"getaddr"$/;"	v	class:msg_getaddr
command	test/functional/test_framework/messages.py	/^    command = b"getblocks"$/;"	v	class:msg_getblocks
command	test/functional/test_framework/messages.py	/^    command = b"getblocktxn"$/;"	v	class:msg_getblocktxn
command	test/functional/test_framework/messages.py	/^    command = b"getdata"$/;"	v	class:msg_getdata
command	test/functional/test_framework/messages.py	/^    command = b"getheaders"$/;"	v	class:msg_getheaders
command	test/functional/test_framework/messages.py	/^    command = b"headers"$/;"	v	class:msg_headers
command	test/functional/test_framework/messages.py	/^    command = b"inv"$/;"	v	class:msg_inv
command	test/functional/test_framework/messages.py	/^    command = b"mempool"$/;"	v	class:msg_mempool
command	test/functional/test_framework/messages.py	/^    command = b"notfound"$/;"	v	class:msg_notfound
command	test/functional/test_framework/messages.py	/^    command = b"ping"$/;"	v	class:msg_ping
command	test/functional/test_framework/messages.py	/^    command = b"pong"$/;"	v	class:msg_pong
command	test/functional/test_framework/messages.py	/^    command = b"reject"$/;"	v	class:msg_reject
command	test/functional/test_framework/messages.py	/^    command = b"sendcmpct"$/;"	v	class:msg_sendcmpct
command	test/functional/test_framework/messages.py	/^    command = b"sendheaders"$/;"	v	class:msg_sendheaders
command	test/functional/test_framework/messages.py	/^    command = b"tx"$/;"	v	class:msg_tx
command	test/functional/test_framework/messages.py	/^    command = b"verack"$/;"	v	class:msg_verack
command	test/functional/test_framework/messages.py	/^    command = b"version"$/;"	v	class:msg_version
commands	src/rpc/blockchain.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	src/rpc/mining.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	src/rpc/misc.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	src/rpc/net.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	src/rpc/rawtransaction.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	src/wallet/rpcwallet.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	src/zmq/zmqrpc.cpp	/^const CRPCCommand commands[] =$/;"	m	namespace:__anon127	file:
comment	src/test/script_tests.cpp	/^    std::string comment;$/;"	m	class:__anon58::TestBuilder	file:
comp_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark	file:
compact_pointer_	src/leveldb/db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	src/leveldb/db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	src/leveldb/db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_level_	src/leveldb/db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	src/leveldb/db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	src/leveldb/db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	src/leveldb/include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	src/leveldb/db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	src/leveldb/db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	src/leveldb/table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	src/leveldb/table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
comparator_	src/leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	src/leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	src/leveldb/include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	src/leveldb/db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t	file:
compare_	src/leveldb/db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
compile_copyright_regex	contrib/devtools/copyright_header.py	/^def compile_copyright_regex(copyright_style, year_style, name):$/;"	f
complete	src/net.h	/^    bool complete() const$/;"	f	class:CNetMessage
complete	src/script/sign.h	/^    bool complete = false; \/\/\/< Stores whether the scriptSig and scriptWitness are complete$/;"	m	struct:SignatureData
compressed_output	src/leveldb/table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	src/leveldb/include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
computePubkey	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] computePubkey(byte[] seckey) throws AssertFailException{$/;"	m	class:NativeSecp256k1
compute_hashes	src/cuckoocache.h	/^    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const$/;"	f	class:CuckooCache::cache
cond	src/httpserver.cpp	/^    std::condition_variable cond;$/;"	m	class:WorkQueue	file:
cond	src/threadinterrupt.h	/^    std::condition_variable cond;$/;"	m	class:CThreadInterrupt
condMaster	src/checkqueue.h	/^    boost::condition_variable condMaster;$/;"	m	class:CCheckQueue
condMsgProc	src/net.h	/^    std::condition_variable condMsgProc;$/;"	m	class:CConnman
condWorker	src/checkqueue.h	/^    boost::condition_variable condWorker;$/;"	m	class:CCheckQueue
cond_blockchange	src/rpc/blockchain.cpp	/^static std::condition_variable cond_blockchange;$/;"	v	file:
condition	src/sync.h	/^    std::condition_variable condition;$/;"	m	class:CSemaphore
confAvg	src/policy/fees.cpp	/^    std::vector<std::vector<double>> confAvg; \/\/ confAvg[Y][X]$/;"	m	class:TxConfirmStats	file:
confTargets	src/qt/sendcoinsdialog.cpp	/^static const std::array<int, 9> confTargets = { {2, 4, 6, 12, 24, 48, 144, 504, 1008} };$/;"	v	file:
conf_mine	src/wallet/coinselection.h	/^    const int conf_mine;$/;"	m	struct:CoinEligibilityFilter
conf_theirs	src/wallet/coinselection.h	/^    const int conf_theirs;$/;"	m	struct:CoinEligibilityFilter
config	src/leveldb/db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
configparser	test/functional/rpc_users.py	/^import configparser$/;"	i
configparser	test/functional/test_framework/test_framework.py	/^import configparser$/;"	i
configparser	test/functional/test_runner.py	/^import configparser$/;"	i
configparser	test/fuzz/test_runner.py	/^import configparser$/;"	i
configparser	test/util/bitcoin-util-test.py	/^import configparser$/;"	i
configparser	test/util/rpcauth-test.py	/^import configparser$/;"	i
conflictedTxs	src/validation.cpp	/^    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;$/;"	m	struct:PerBlockConnectTrace	file:
conn	src/torcontrol.cpp	/^    TorControlConnection conn;$/;"	m	class:TorController	file:
connectViewHeadersSignals	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::connectViewHeadersSignals()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
connect_nodes	test/functional/feature_minchainwork.py	/^from test_framework.util import connect_nodes, assert_equal$/;"	i
connect_nodes	test/functional/rpc_txoutproof.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes$/;"	i
connect_nodes	test/functional/test_framework/util.py	/^def connect_nodes(from_connection, node_num):$/;"	f
connect_nodes_bi	test/functional/feature_notifications.py	/^from test_framework.util import assert_equal, wait_until, connect_nodes_bi$/;"	i
connect_nodes_bi	test/functional/rpc_rawtransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes$/;"	i
connect_nodes_bi	test/functional/test_framework/util.py	/^def connect_nodes_bi(nodes, a, b):$/;"	f
connected	src/torcontrol.cpp	/^    std::function<void(TorControlConnection&)> connected;$/;"	m	class:TorControlConnection	file:
connected_cb	src/torcontrol.cpp	/^void TorController::connected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
connection_lost	test/functional/test_framework/mininode.py	/^    def connection_lost(self, exc):$/;"	m	class:P2PConnection
connection_made	test/functional/test_framework/mininode.py	/^    def connection_made(self, transport):$/;"	m	class:P2PConnection
connectionsControl	src/qt/bitcoingui.h	/^    GUIUtil::ClickableLabel* connectionsControl = nullptr;$/;"	m	class:BitcoinGUI
connman	src/net_processing.h	/^    CConnman* const connman;$/;"	m	class:final
consensus	src/chainparams.h	/^    Consensus::Params consensus;$/;"	m	class:CChainParams
consoleCtrlHandler	src/init.cpp	/^static BOOL WINAPI consoleCtrlHandler(DWORD dwCtrlType)$/;"	f	file:
consoleFontSize	src/qt/rpcconsole.h	/^    int consoleFontSize = 0;$/;"	m	class:RPCConsole
consoleTests	src/qt/test/apptests.cpp	/^void AppTests::consoleTests(RPCConsole* console)$/;"	f	class:AppTests
const_iterator	src/indirectmap.h	/^    typedef typename base::const_iterator const_iterator;$/;"	t	class:indirectmap
const_iterator	src/limitedmap.h	/^    typedef typename std::map<K, V>::const_iterator const_iterator;$/;"	t	class:limitedmap
const_iterator	src/prevector.h	/^        const_iterator(const T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_iterator
const_iterator	src/prevector.h	/^        const_iterator(iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_iterator
const_iterator	src/prevector.h	/^    class const_iterator {$/;"	c	class:prevector
const_iterator	src/streams.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	src/prevector.h	/^    typedef const value_type* const_pointer;$/;"	t	class:prevector
const_pointer	src/support/allocators/secure.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_pointer	src/support/allocators/zeroafterfree.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:zero_after_free_allocator
const_reference	src/prevector.h	/^    typedef const value_type& const_reference;$/;"	t	class:prevector
const_reference	src/streams.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
const_reference	src/support/allocators/secure.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	src/support/allocators/zeroafterfree.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:zero_after_free_allocator
const_reverse_iterator	src/prevector.h	/^        const_reverse_iterator(const T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	src/prevector.h	/^        const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	src/prevector.h	/^    class const_reverse_iterator {$/;"	c	class:prevector
constructor_	src/leveldb/table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
contains	src/bloom.cpp	/^bool CBloomFilter::contains(const COutPoint& outpoint) const$/;"	f	class:CBloomFilter
contains	src/bloom.cpp	/^bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CBloomFilter
contains	src/bloom.cpp	/^bool CBloomFilter::contains(const uint256& hash) const$/;"	f	class:CBloomFilter
contains	src/bloom.cpp	/^bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CRollingBloomFilter
contains	src/bloom.cpp	/^bool CRollingBloomFilter::contains(const uint256& hash) const$/;"	f	class:CRollingBloomFilter
contains	src/cuckoocache.h	/^    inline bool contains(const Element& e, const bool erase) const$/;"	f	class:CuckooCache::cache
contains_bitcoin_addr	contrib/devtools/update-translations.py	/^def contains_bitcoin_addr(text, errors):$/;"	f
content_hash	contrib/devtools/optimize-pngs.py	/^def content_hash(filename):$/;"	f
contents	src/leveldb/table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	src/leveldb/db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	src/leveldb/db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	src/leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	src/leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
context	src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  private static final long context; \/\/ref to pointer to context obj$/;"	f	class:Secp256k1Context	file:
contextMenu	src/qt/addressbookpage.h	/^    QMenu *contextMenu;$/;"	m	class:AddressBookPage
contextMenu	src/qt/coincontroldialog.h	/^    QMenu *contextMenu;$/;"	m	class:CoinControlDialog
contextMenu	src/qt/qrimagewidget.h	/^    QMenu *contextMenu;$/;"	m	class:QRImageWidget
contextMenu	src/qt/receivecoinsdialog.h	/^    QMenu *contextMenu;$/;"	m	class:ReceiveCoinsDialog
contextMenu	src/qt/transactionview.h	/^    QMenu *contextMenu;$/;"	m	class:TransactionView
contextMenuEvent	src/qt/qrimagewidget.cpp	/^void QRImageWidget::contextMenuEvent(QContextMenuEvent *event)$/;"	f	class:QRImageWidget
contextMenuItem	src/qt/coincontroldialog.h	/^    QTreeWidgetItem *contextMenuItem;$/;"	m	class:CoinControlDialog
contextlib	test/functional/test_framework/test_node.py	/^import contextlib$/;"	i
contextualMenu	src/qt/addressbookpage.cpp	/^void AddressBookPage::contextualMenu(const QPoint &point)$/;"	f	class:AddressBookPage
contextualMenu	src/qt/transactionview.cpp	/^void TransactionView::contextualMenu(const QPoint &point)$/;"	f	class:TransactionView
convert	src/rpc/client.cpp	/^    bool convert(const std::string& method, const std::string& name) {$/;"	f	class:CRPCConvertTable
convert	src/rpc/client.cpp	/^    bool convert(const std::string& method, int idx) {$/;"	f	class:CRPCConvertTable
convertSeed6	src/net.cpp	/^static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn)$/;"	f	file:
convertToInt	src/tinyformat.h	/^struct convertToInt$/;"	s	namespace:tinyformat::detail
convertToInt	src/tinyformat.h	/^struct convertToInt<T,true>$/;"	s	namespace:tinyformat::detail
convertbits	contrib/testgen/gen_key_io_test_vectors.py	/^from segwit_addr import bech32_encode, decode, convertbits, CHARSET$/;"	i
convertbits	test/functional/test_framework/segwit_addr.py	/^def convertbits(data, frombits, tobits, pad=True):$/;"	f
converttopsbt	src/rpc/rawtransaction.cpp	/^UniValue converttopsbt(const JSONRPCRequest& request)$/;"	f
cookie	src/torcontrol.cpp	/^    std::vector<uint8_t> cookie;$/;"	m	class:TorController	file:
copy	src/test/prevector_tests.cpp	/^    void copy() {$/;"	f	class:prevector_tester
copy	test/functional/feature_block.py	/^import copy$/;"	i
copy	test/functional/mining_basic.py	/^import copy$/;"	i
copy	test/functional/p2p_invalid_block.py	/^import copy$/;"	i
copy	test/functional/test_framework/messages.py	/^import copy$/;"	i
copyAddress	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::copyAddress()$/;"	f	class:CoinControlDialog
copyAddress	src/qt/transactionview.cpp	/^void TransactionView::copyAddress()$/;"	f	class:TransactionView
copyAmount	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::copyAmount()$/;"	f	class:CoinControlDialog
copyAmount	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyAmount()$/;"	f	class:ReceiveCoinsDialog
copyAmount	src/qt/transactionview.cpp	/^void TransactionView::copyAmount()$/;"	f	class:TransactionView
copyColumnToClipboard	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyColumnToClipboard(int column)$/;"	f	class:ReceiveCoinsDialog
copyEntryData	src/qt/guiutil.cpp	/^void copyEntryData(QAbstractItemView *view, int column, int role)$/;"	f	namespace:GUIUtil
copyImage	src/qt/qrimagewidget.cpp	/^void QRImageWidget::copyImage()$/;"	f	class:QRImageWidget
copyLabel	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::copyLabel()$/;"	f	class:CoinControlDialog
copyLabel	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyLabel()$/;"	f	class:ReceiveCoinsDialog
copyLabel	src/qt/transactionview.cpp	/^void TransactionView::copyLabel()$/;"	f	class:TransactionView
copyMessage	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyMessage()$/;"	f	class:ReceiveCoinsDialog
copyOneBlock	contrib/linearize/linearize-data.py	/^    def copyOneBlock(self):$/;"	m	class:BlockDataCopier
copyStats	src/net.cpp	/^void CNode::copyStats(CNodeStats &stats)$/;"	f	class:CNode
copyTransactionHash	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::copyTransactionHash()$/;"	f	class:CoinControlDialog
copyTransactionHashAction	src/qt/coincontroldialog.h	/^    QAction *copyTransactionHashAction;$/;"	m	class:CoinControlDialog
copyTxHex	src/qt/transactionview.cpp	/^void TransactionView::copyTxHex()$/;"	f	class:TransactionView
copyTxID	src/qt/transactionview.cpp	/^void TransactionView::copyTxID()$/;"	f	class:TransactionView
copyTxPlainText	src/qt/transactionview.cpp	/^void TransactionView::copyTxPlainText()$/;"	f	class:TransactionView
copyURI	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyURI()$/;"	f	class:ReceiveCoinsDialog
coreThread	src/qt/bitcoin.h	/^    QThread *coreThread;$/;"	m	class:BitcoinApplication
count	contrib/testgen/gen_key_io_test_vectors.py	/^        count = 0$/;"	v
count	contrib/testgen/gen_key_io_test_vectors.py	/^        count = int(sys.argv[2])$/;"	v
count	src/crypto/siphash.h	/^    int count;$/;"	m	class:CSipHasher
count	src/indirectmap.h	/^    size_type count(const K& key) const             { return m.count(&key); }$/;"	f	class:indirectmap
count	src/limitedmap.h	/^    size_type count(const key_type& k) const { return map.count(k); }$/;"	f	class:limitedmap
count	src/secp256k1/src/tests.c	/^static int count = 64;$/;"	v	file:
count	src/test/allocator_tests.cpp	/^    int count;$/;"	m	class:TestLockedPageAllocator	file:
count	src/versionbits.h	/^    int count;$/;"	m	struct:BIP9Stats
countDown	src/qt/sendcoinsdialog.cpp	/^void SendConfirmationDialog::countDown()$/;"	f	class:SendConfirmationDialog
countDownTimer	src/qt/sendcoinsdialog.h	/^    QTimer countDownTimer;$/;"	m	class:SendConfirmationDialog
count_	src/leveldb/db/db_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon23::AtomicCounter	file:
count_bytes	test/functional/test_framework/util.py	/^def count_bytes(hex_string):$/;"	f
count_format_specifiers	test/lint/lint-format-strings.py	/^def count_format_specifiers(format_string):$/;"	f
count_random_reads_	src/leveldb/db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv	file:
counter	src/leveldb/db/db_test.cc	/^  port::AtomicPointer counter[kNumThreads];$/;"	m	struct:leveldb::__anon24::MTState	file:
counter_	src/leveldb/table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
counting_illegal_callback_fn	src/secp256k1/src/tests.c	/^static void counting_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
countsForBalance	src/qt/transactionrecord.h	/^    bool countsForBalance;$/;"	m	class:TransactionStatus
coverage	test/functional/test_framework/test_framework.py	/^from . import coverage$/;"	i
coverage	test/functional/test_framework/util.py	/^from . import coverage$/;"	i
cppfilt	contrib/devtools/symbol-check.py	/^    cppfilt = CPPFilt()$/;"	v
cpuid	src/crypto/sha256.cpp	/^void inline cpuid(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)$/;"	f	namespace:__anon40
crc32c	src/leveldb/util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	src/leveldb/util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	src/leveldb/util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
createActions	src/qt/bitcoingui.cpp	/^void BitcoinGUI::createActions()$/;"	f	class:BitcoinGUI
createContextMenu	src/qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::createContextMenu()$/;"	f	class:UnitDisplayStatusBarControl
createDateRangeWidget	src/qt/transactionview.cpp	/^QWidget *TransactionView::createDateRangeWidget()$/;"	f	class:TransactionView
createECDHSecret	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] createECDHSecret(byte[] seckey, byte[] pubkey) throws AssertFailException{$/;"	m	class:NativeSecp256k1
createMenuBar	src/qt/bitcoingui.cpp	/^void BitcoinGUI::createMenuBar()$/;"	f	class:BitcoinGUI
createOptionsModel	src/qt/bitcoin.cpp	/^void BitcoinApplication::createOptionsModel(bool resetSettings)$/;"	f	class:BitcoinApplication
createPaymentServer	src/qt/bitcoin.cpp	/^void BitcoinApplication::createPaymentServer()$/;"	f	class:BitcoinApplication
createSplashScreen	src/qt/bitcoin.cpp	/^void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)$/;"	f	class:BitcoinApplication
createToolBars	src/qt/bitcoingui.cpp	/^void BitcoinGUI::createToolBars()$/;"	f	class:BitcoinGUI
createTrayIcon	src/qt/bitcoingui.cpp	/^void BitcoinGUI::createTrayIcon()$/;"	f	class:BitcoinGUI
createTrayIconMenu	src/qt/bitcoingui.cpp	/^void BitcoinGUI::createTrayIconMenu()$/;"	f	class:BitcoinGUI
createWindow	src/qt/bitcoin.cpp	/^void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)$/;"	f	class:BitcoinApplication
create_	src/leveldb/db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t	file:
create_and_mine_tx_from_txids	test/functional/feature_segwit.py	/^    def create_and_mine_tx_from_txids(self, txids, success=True):$/;"	m	class:SegWitTest
create_and_sign_transaction	test/functional/feature_block.py	/^    def create_and_sign_transaction(self, spend_tx, value, script=CScript([OP_TRUE])):$/;"	m	class:FullBlockTest
create_big_chain	test/functional/feature_pruning.py	/^    def create_big_chain(self):$/;"	m	class:PruneTest
create_bip112special	test/functional/feature_csv_activation.py	/^def create_bip112special(node, input, txversion, address):$/;"	f
create_bip112txs	test/functional/feature_csv_activation.py	/^def create_bip112txs(node, bip112inputs, varyOP_CSV, txversion, address, locktime_delta=0):$/;"	f
create_bip68txs	test/functional/feature_csv_activation.py	/^def create_bip68txs(node, bip68inputs, txversion, address, locktime_delta=0):$/;"	f
create_block	test/functional/example_test.py	/^from test_framework.blocktools import (create_block, create_coinbase)$/;"	i
create_block	test/functional/feature_assumevalid.py	/^from test_framework.blocktools import (create_block, create_coinbase)$/;"	i
create_block	test/functional/feature_bip68_sequence.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment$/;"	i
create_block	test/functional/feature_cltv.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_block	test/functional/feature_csv_activation.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_block	test/functional/feature_dersig.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_block	test/functional/feature_nulldummy.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction, add_witness_commitment$/;"	i
create_block	test/functional/feature_versionbits_warning.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_block	test/functional/p2p_compactblocks.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment$/;"	i
create_block	test/functional/p2p_fingerprint.py	/^from test_framework.blocktools import (create_block, create_coinbase)$/;"	i
create_block	test/functional/p2p_invalid_block.py	/^from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script$/;"	i
create_block	test/functional/p2p_invalid_tx.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_block	test/functional/p2p_segwit.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER$/;"	i
create_block	test/functional/p2p_sendheaders.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_block	test/functional/p2p_unrequested_blocks.py	/^from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script$/;"	i
create_block	test/functional/test_framework/blocktools.py	/^def create_block(hashprev, coinbase, ntime=None, *, version=1):$/;"	f
create_block	test/functional/wallet_bumpfee.py	/^from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness$/;"	i
create_block	test/functional/wallet_resendwallettransactions.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_chain_with_staleblocks	test/functional/feature_pruning.py	/^    def create_chain_with_staleblocks(self):$/;"	m	class:PruneTest
create_coinbase	test/functional/example_test.py	/^from test_framework.blocktools import (create_block, create_coinbase)$/;"	i
create_coinbase	test/functional/feature_assumevalid.py	/^from test_framework.blocktools import (create_block, create_coinbase)$/;"	i
create_coinbase	test/functional/feature_bip68_sequence.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment$/;"	i
create_coinbase	test/functional/feature_cltv.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_coinbase	test/functional/feature_csv_activation.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_coinbase	test/functional/feature_dersig.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_coinbase	test/functional/feature_nulldummy.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction, add_witness_commitment$/;"	i
create_coinbase	test/functional/feature_pruning.py	/^from test_framework.blocktools import create_coinbase$/;"	i
create_coinbase	test/functional/feature_versionbits_warning.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_coinbase	test/functional/p2p_compactblocks.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment$/;"	i
create_coinbase	test/functional/p2p_fingerprint.py	/^from test_framework.blocktools import (create_block, create_coinbase)$/;"	i
create_coinbase	test/functional/p2p_invalid_block.py	/^from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script$/;"	i
create_coinbase	test/functional/p2p_invalid_tx.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_coinbase	test/functional/p2p_segwit.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER$/;"	i
create_coinbase	test/functional/p2p_sendheaders.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_coinbase	test/functional/p2p_unrequested_blocks.py	/^from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script$/;"	i
create_coinbase	test/functional/test_framework/blocktools.py	/^def create_coinbase(height, pubkey=None):$/;"	f
create_coinbase	test/functional/wallet_bumpfee.py	/^from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness$/;"	i
create_coinbase	test/functional/wallet_resendwallettransactions.py	/^from test_framework.blocktools import create_block, create_coinbase$/;"	i
create_confirmed_utxos	test/functional/feature_dbcrash.py	/^from test_framework.util import assert_equal, create_confirmed_utxos, hex_str_to_bytes$/;"	i
create_confirmed_utxos	test/functional/mempool_limit.py	/^from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
create_confirmed_utxos	test/functional/mining_prioritisetransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
create_confirmed_utxos	test/functional/test_framework/util.py	/^def create_confirmed_utxos(fee, node, count):$/;"	f
create_if_missing	src/leveldb/include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
create_lots_of_big_transactions	test/functional/mempool_limit.py	/^from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
create_lots_of_big_transactions	test/functional/mining_prioritisetransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
create_lots_of_big_transactions	test/functional/test_framework/util.py	/^def create_lots_of_big_transactions(node, txouts, utxos, num, fee):$/;"	f
create_raw_transaction	test/functional/mempool_reorg.py	/^from test_framework.blocktools import create_raw_transaction$/;"	i
create_raw_transaction	test/functional/mempool_resurrect.py	/^from test_framework.blocktools import create_raw_transaction$/;"	i
create_raw_transaction	test/functional/mempool_spend_coinbase.py	/^from test_framework.blocktools import create_raw_transaction$/;"	i
create_raw_transaction	test/functional/test_framework/blocktools.py	/^def create_raw_transaction(node, txid, to_address, *, amount):$/;"	f
create_test_block	test/functional/feature_csv_activation.py	/^    def create_test_block(self, txs, version=536870912):$/;"	m	class:BIP68_112_113Test
create_transaction	test/functional/feature_cltv.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_transaction	test/functional/feature_csv_activation.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_transaction	test/functional/feature_dersig.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction$/;"	i
create_transaction	test/functional/feature_nulldummy.py	/^from test_framework.blocktools import create_coinbase, create_block, create_transaction, add_witness_commitment$/;"	i
create_transaction	test/functional/test_framework/blocktools.py	/^def create_transaction(node, txid, to_address, *, amount):$/;"	f
create_transactions	test/functional/wallet_balance.py	/^def create_transactions(node, address, amt, fees):$/;"	f
create_tx	test/functional/feature_block.py	/^    def create_tx(self, spend_tx, n, value, script=CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])):$/;"	m	class:FullBlockTest
create_tx_with_script	test/functional/data/invalid_txs.py	/^from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS$/;"	i
create_tx_with_script	test/functional/p2p_invalid_block.py	/^from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script$/;"	i
create_tx_with_script	test/functional/p2p_unrequested_blocks.py	/^from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script$/;"	i
create_tx_with_script	test/functional/test_framework/blocktools.py	/^def create_tx_with_script(prevtx, n, script_sig=b"", *, amount, script_pub_key=CScript()):$/;"	f
create_updated_copyright_line	contrib/devtools/copyright_header.py	/^def create_updated_copyright_line(line, last_git_change_year):$/;"	f
create_witness_tx	test/functional/test_framework/blocktools.py	/^def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):$/;"	f
createmultisig	src/rpc/misc.cpp	/^static UniValue createmultisig(const JSONRPCRequest& request)$/;"	f	file:
createpsbt	src/rpc/rawtransaction.cpp	/^UniValue createpsbt(const JSONRPCRequest& request)$/;"	f
createrawtransaction	src/rpc/rawtransaction.cpp	/^static UniValue createrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
createwallet	src/wallet/rpcwallet.cpp	/^static UniValue createwallet(const JSONRPCRequest& request)$/;"	f	file:
credit	src/interfaces/wallet.h	/^    CAmount credit;$/;"	m	struct:interfaces::WalletTx
credit	src/qt/transactionrecord.h	/^    CAmount credit;$/;"	m	class:TransactionRecord
creditTx	src/test/script_tests.cpp	/^    CTransactionRef creditTx;$/;"	m	class:__anon58::TestBuilder	file:
crypto_libbitcoin_crypto_avx2_a_AR	src/Makefile	/^crypto_libbitcoin_crypto_avx2_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_avx2_a_CPPFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_avx2_a_CPPFLAGS = $(AM_CPPFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_avx2_a_CXXFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_avx2_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) \\$/;"	m
crypto_libbitcoin_crypto_avx2_a_LIBADD	src/Makefile	/^crypto_libbitcoin_crypto_avx2_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_avx2_a_OBJECTS	src/Makefile	/^crypto_libbitcoin_crypto_avx2_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_avx2_a_SOURCES	src/Makefile	/^crypto_libbitcoin_crypto_avx2_a_SOURCES = crypto\/sha256_avx2.cpp$/;"	m
crypto_libbitcoin_crypto_base_a_AR	src/Makefile	/^crypto_libbitcoin_crypto_base_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_base_a_CPPFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_base_a_CPPFLAGS = $(AM_CPPFLAGS)$/;"	m
crypto_libbitcoin_crypto_base_a_CXXFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
crypto_libbitcoin_crypto_base_a_LIBADD	src/Makefile	/^crypto_libbitcoin_crypto_base_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_base_a_OBJECTS	src/Makefile	/^crypto_libbitcoin_crypto_base_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_base_a_SOURCES	src/Makefile	/^crypto_libbitcoin_crypto_base_a_SOURCES = crypto\/aes.cpp crypto\/aes.h \\$/;"	m
crypto_libbitcoin_crypto_shani_a_AR	src/Makefile	/^crypto_libbitcoin_crypto_shani_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_shani_a_CPPFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_shani_a_CPPFLAGS = $(AM_CPPFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_shani_a_CXXFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_shani_a_CXXFLAGS = $(AM_CXXFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_shani_a_LIBADD	src/Makefile	/^crypto_libbitcoin_crypto_shani_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_shani_a_OBJECTS	src/Makefile	/^crypto_libbitcoin_crypto_shani_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_shani_a_SOURCES	src/Makefile	/^crypto_libbitcoin_crypto_shani_a_SOURCES = crypto\/sha256_shani.cpp$/;"	m
crypto_libbitcoin_crypto_sse41_a_AR	src/Makefile	/^crypto_libbitcoin_crypto_sse41_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_sse41_a_CPPFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_sse41_a_CPPFLAGS = $(AM_CPPFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_sse41_a_CXXFLAGS	src/Makefile	/^crypto_libbitcoin_crypto_sse41_a_CXXFLAGS = $(AM_CXXFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_sse41_a_LIBADD	src/Makefile	/^crypto_libbitcoin_crypto_sse41_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_sse41_a_OBJECTS	src/Makefile	/^crypto_libbitcoin_crypto_sse41_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_sse41_a_SOURCES	src/Makefile	/^crypto_libbitcoin_crypto_sse41_a_SOURCES = crypto\/sha256_sse41.cpp$/;"	m
cs	src/addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
cs	src/httpserver.cpp	/^    Mutex cs;$/;"	m	class:WorkQueue	file:
cs	src/sync.h	/^void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs);$/;"	v
cs	src/txmempool.h	/^    mutable RecursiveMutex cs;$/;"	m	class:CTxMemPool
csPathCached	src/util/system.cpp	/^static CCriticalSection csPathCached;$/;"	v	file:
cs_	src/leveldb/port/port_win.h	/^  void * cs_;$/;"	m	class:leveldb::port::Mutex
cs_KeyStore	src/keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CBasicKeyStore
cs_LastBlockFile	src/validation.cpp	/^    CCriticalSection cs_LastBlockFile;$/;"	m	namespace:__anon50	file:
cs_SubVer	src/net.h	/^    RecursiveMutex cs_SubVer;$/;"	m	class:CNode
cs_addrLocal	src/net.h	/^    mutable CCriticalSection cs_addrLocal;$/;"	m	class:CNode
cs_addrName	src/net.h	/^    mutable CCriticalSection cs_addrName;$/;"	m	class:CNode
cs_args	src/util/system.h	/^    mutable CCriticalSection cs_args;$/;"	m	class:ArgsManager
cs_blockchange	src/rpc/blockchain.cpp	/^static Mutex cs_blockchange;$/;"	v	file:
cs_db	src/wallet/db.cpp	/^CCriticalSection cs_db;$/;"	m	namespace:__anon117	file:
cs_dir_locks	src/util/system.cpp	/^static std::mutex cs_dir_locks;$/;"	v	file:
cs_feeFilter	src/net.h	/^    CCriticalSection cs_feeFilter;$/;"	m	class:CNode
cs_filter	src/net.h	/^    mutable CCriticalSection cs_filter;$/;"	m	class:CNode
cs_hSocket	src/net.h	/^    CCriticalSection cs_hSocket;$/;"	m	class:CNode
cs_inventory	src/net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_main	src/net_processing.cpp	/^    int g_outbound_peers_with_protect_from_disconnect GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	src/net_processing.cpp	/^    int nPeersWithValidatedDownloads GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	src/net_processing.cpp	/^    int nPreferredDownload GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	src/net_processing.cpp	/^    int nSyncStarted GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	src/net_processing.cpp	/^void Misbehaving(NodeId nodeid, int howmuch, const std::string& message="") EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/rpc/blockchain.h	/^UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	src/rpc/blockchain.h	/^UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	src/validation.cpp	/^RecursiveMutex cs_main;$/;"	v
cs_main	src/validation.h	/^                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validation.h	/^void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	src/validationinterface.h	/^void SyncWithValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main);$/;"	v
cs_mapLocalHost	src/net.cpp	/^CCriticalSection cs_mapLocalHost;$/;"	v
cs_mapLocalHost	src/net.cpp	/^static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};$/;"	v	file:
cs_most_recent_block	src/net_processing.cpp	/^static CCriticalSection cs_most_recent_block;$/;"	v	file:
cs_nBlockSequenceId	src/validation.cpp	/^    CCriticalSection cs_nBlockSequenceId;$/;"	m	class:CChainState	file:
cs_nTimeOffset	src/timedata.cpp	/^static CCriticalSection cs_nTimeOffset;$/;"	v	file:
cs_nTimeOffset	src/timedata.cpp	/^static int64_t nTimeOffset GUARDED_BY(cs_nTimeOffset) = 0;$/;"	v	file:
cs_proxyInfos	src/netbase.cpp	/^static CCriticalSection cs_proxyInfos;$/;"	v	file:
cs_rpcWarmup	src/rpc/server.cpp	/^static CCriticalSection cs_rpcWarmup;$/;"	v	file:
cs_rpcWarmup	src/rpc/server.cpp	/^static bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;$/;"	v	file:
cs_rpcWarmup	src/rpc/server.cpp	/^static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = "RPC server started";$/;"	v	file:
cs_sendProcessing	src/net.h	/^    CCriticalSection cs_sendProcessing;$/;"	m	class:CNode
cs_sigcache	src/script/sigcache.cpp	/^    boost::shared_mutex cs_sigcache;$/;"	m	class:__anon84::CSignatureCache	file:
cs_totalBytesRecv	src/net.h	/^    CCriticalSection cs_totalBytesRecv;$/;"	m	class:CConnman
cs_totalBytesSent	src/net.h	/^    CCriticalSection cs_totalBytesSent;$/;"	m	class:CConnman
cs_vAddedNodes	src/net.h	/^    CCriticalSection cs_vAddedNodes;$/;"	m	class:CConnman
cs_vNodes	src/net.h	/^    mutable CCriticalSection cs_vNodes;$/;"	m	class:CConnman
cs_vOneShots	src/net.h	/^    CCriticalSection cs_vOneShots;$/;"	m	class:CConnman
cs_vProcessMsg	src/net.h	/^    CCriticalSection cs_vProcessMsg;$/;"	m	class:CNode
cs_vRecv	src/net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	src/net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_wallet	src/wallet/wallet.h	/^    WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;$/;"	m	class:final
cs_wallet	src/wallet/wallet.h	/^    int nWalletMaxVersion GUARDED_BY(cs_wallet) = FEATURE_BASE;$/;"	m	class:final
cs_wallet	src/wallet/wallet.h	/^    int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;$/;"	m	class:final
cs_wallet	src/wallet/wallet.h	/^    int64_t nOrderPosNext GUARDED_BY(cs_wallet) = 0;$/;"	m	class:final
cs_wallet	src/wallet/wallet.h	/^    int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;$/;"	m	class:final
cs_wallet	src/wallet/wallet.h	/^    mutable CCriticalSection cs_wallet;$/;"	m	class:final
cs_wallets	src/wallet/wallet.cpp	/^static CCriticalSection cs_wallets;$/;"	v	file:
cs_warnings	src/warnings.cpp	/^CCriticalSection cs_warnings;$/;"	v
cs_warnings	src/warnings.cpp	/^bool fLargeWorkForkFound GUARDED_BY(cs_warnings) = false;$/;"	v
cs_warnings	src/warnings.cpp	/^bool fLargeWorkInvalidChainFound GUARDED_BY(cs_warnings) = false;$/;"	v
ctaes_test	src/crypto/ctaes/test.c	/^} ctaes_test;$/;"	t	typeref:struct:__anon44	file:
ctaes_tests	src/crypto/ctaes/test.c	/^static const ctaes_test ctaes_tests[] = {$/;"	v	file:
ctx	src/crypto/aes.h	/^    AES256_ctx ctx;$/;"	m	class:AES256Decrypt
ctx	src/crypto/aes.h	/^    AES256_ctx ctx;$/;"	m	class:AES256Encrypt
ctx	src/hash.h	/^    CHash256 ctx;$/;"	m	class:CHashWriter
ctx	src/secp256k1/src/bench_ecdh.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon108	file:
ctx	src/secp256k1/src/bench_recover.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon98	file:
ctx	src/secp256k1/src/bench_sign.c	/^    secp256k1_context* ctx;$/;"	m	struct:__anon102	file:
ctx	src/secp256k1/src/bench_verify.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon106	file:
ctx	src/secp256k1/src/tests.c	/^static secp256k1_context *ctx = NULL;$/;"	v	file:
ctypes	test/functional/test_runner.py	/^        import ctypes$/;"	i
ctz	src/test/merkle_tests.cpp	/^static inline int ctz(uint32_t i) {$/;"	f	file:
cuckoocache_tests	src/test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_SUITE(cuckoocache_tests);$/;"	v
cumulative_bytes_locked	src/support/lockedpool.h	/^    size_t cumulative_bytes_locked;$/;"	m	class:LockedPool
curAlignment	src/qt/splashscreen.h	/^    int curAlignment;$/;"	m	class:SplashScreen
curColor	src/qt/splashscreen.h	/^    QColor curColor;$/;"	m	class:SplashScreen
curMessage	src/qt/splashscreen.h	/^    QString curMessage;$/;"	m	class:SplashScreen
cur_num_blocks	src/qt/transactionrecord.h	/^    int cur_num_blocks;$/;"	m	class:TransactionStatus
current	src/leveldb/db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
currentWalletModel	src/qt/walletframe.cpp	/^WalletModel* WalletFrame::currentWalletModel() const$/;"	f	class:WalletFrame
currentWalletView	src/qt/walletframe.cpp	/^WalletView* WalletFrame::currentWalletView() const$/;"	f	class:WalletFrame
current_	src/leveldb/db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	src/leveldb/db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	src/leveldb/table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	src/leveldb/table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
current_	src/leveldb/util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	src/leveldb/util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	src/leveldb/db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
custom_function	test/functional/example_test.py	/^def custom_function():$/;"	f
custom_method	test/functional/example_test.py	/^    def custom_method(self):$/;"	m	class:ExampleTest
cv	src/leveldb/db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon19::SharedState	file:
cv	src/leveldb/db/db_impl.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::DBImpl::Writer	file:
cv	src/test/checkqueue_tests.cpp	/^    static std::condition_variable cv;$/;"	m	struct:FrozenCleanupCheck	file:
cv_	src/leveldb/port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
d	src/secp256k1/src/scalar_4x64.h	/^    uint64_t d[4];$/;"	m	struct:__anon99
d	src/secp256k1/src/scalar_8x32.h	/^    uint32_t d[8];$/;"	m	struct:__anon114
dMinPing	src/net.h	/^    double dMinPing;$/;"	m	class:CNodeStats
dPingTime	src/net.h	/^    double dPingTime;$/;"	m	class:CNodeStats
dPingWait	src/net.h	/^    double dPingWait;$/;"	m	class:CNodeStats
dTxRate	src/chainparams.h	/^    double dTxRate;   \/\/!< estimated number of transactions per second after that timestamp$/;"	m	struct:ChainTxData
d_assert	src/univalue/test/unitester.cpp	/^#define d_assert(/;"	d	file:
daemon	contrib/zmq/zmq_sub.py	/^daemon = ZMQHandler()$/;"	v
damage_array	src/secp256k1/src/tests.c	/^static void damage_array(unsigned char *sig, size_t *len) {$/;"	f	file:
darwin_AR	depends/builders/darwin.mk	/^darwin_AR:=$(shell xcrun -f ar)$/;"	m
darwin_CC	depends/builders/darwin.mk	/^darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)$/;"	m
darwin_CC	depends/hosts/darwin.mk	/^darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)$/;"	m
darwin_CFLAGS	depends/hosts/darwin.mk	/^darwin_CFLAGS=-pipe$/;"	m
darwin_CXX	depends/builders/darwin.mk	/^darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION) -stdlib=libc++$/;"	m
darwin_CXX	depends/hosts/darwin.mk	/^darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION) -stdlib=libc++$/;"	m
darwin_CXXFLAGS	depends/hosts/darwin.mk	/^darwin_CXXFLAGS=$(darwin_CFLAGS)$/;"	m
darwin_INSTALL_NAME_TOOL	depends/builders/darwin.mk	/^darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)$/;"	m
darwin_LIBTOOL	depends/builders/darwin.mk	/^darwin_LIBTOOL:=$(shell xcrun -f libtool)$/;"	m
darwin_NM	depends/builders/darwin.mk	/^darwin_NM:=$(shell xcrun -f nm)$/;"	m
darwin_OTOOL	depends/builders/darwin.mk	/^darwin_OTOOL:=$(shell xcrun -f otool)$/;"	m
darwin_RANLIB	depends/builders/darwin.mk	/^darwin_RANLIB:=$(shell xcrun -f ranlib)$/;"	m
darwin_STRIP	depends/builders/darwin.mk	/^darwin_STRIP:=$(shell xcrun -f strip)$/;"	m
darwin_debug_CFLAGS	depends/hosts/darwin.mk	/^darwin_debug_CFLAGS=-O1$/;"	m
darwin_debug_CXXFLAGS	depends/hosts/darwin.mk	/^darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)$/;"	m
darwin_native_packages	depends/packages/packages.mk	/^darwin_native_packages = native_biplist native_ds_store native_mac_alias$/;"	m
darwin_native_toolchain	depends/builders/darwin.mk	/^darwin_native_toolchain=$/;"	m
darwin_native_toolchain	depends/hosts/darwin.mk	/^darwin_native_toolchain=native_cctools$/;"	m
darwin_release_CFLAGS	depends/hosts/darwin.mk	/^darwin_release_CFLAGS=-O2$/;"	m
darwin_release_CXXFLAGS	depends/hosts/darwin.mk	/^darwin_release_CXXFLAGS=$(darwin_release_CFLAGS)$/;"	m
data	contrib/testgen/gen_key_io_test_vectors.py	/^    data = list(islice(uiter(), count))$/;"	v
data	src/bech32.cpp	/^typedef std::vector<uint8_t> data;$/;"	t	namespace:__anon116	file:
data	src/bloom.h	/^    std::vector<uint64_t> data;$/;"	m	class:CRollingBloomFilter
data	src/leveldb/include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	src/leveldb/table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	src/leveldb/table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data	src/net.h	/^    std::vector<unsigned char> data;$/;"	m	struct:CSerializedNetMsg
data	src/prevector.h	/^    const value_type* data() const {$/;"	f	class:prevector
data	src/prevector.h	/^    value_type* data() {$/;"	f	class:prevector
data	src/pubkey.h	/^    const unsigned char* data() const { return vch; }$/;"	f	class:CPubKey
data	src/qt/addresstablemodel.cpp	/^QVariant AddressTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:AddressTableModel
data	src/qt/bantablemodel.cpp	/^QVariant BanTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:BanTableModel
data	src/qt/bitcoinunits.cpp	/^QVariant BitcoinUnits::data(const QModelIndex &index, int role) const$/;"	f	class:BitcoinUnits
data	src/qt/optionsmodel.cpp	/^QVariant OptionsModel::data(const QModelIndex & index, int role) const$/;"	f	class:OptionsModel
data	src/qt/peertablemodel.cpp	/^QVariant PeerTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:PeerTableModel
data	src/qt/recentrequeststablemodel.cpp	/^QVariant RecentRequestsTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:RecentRequestsTableModel
data	src/qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:TransactionTableModel
data	src/secp256k1/include/secp256k1.h	/^    unsigned char data[64];$/;"	m	struct:__anon92
data	src/secp256k1/include/secp256k1.h	/^    unsigned char data[64];$/;"	m	struct:__anon93
data	src/secp256k1/include/secp256k1_recovery.h	/^    unsigned char data[65];$/;"	m	struct:__anon91
data	src/secp256k1/src/bench_internal.c	/^    unsigned char data[64];$/;"	m	struct:__anon109	file:
data	src/secp256k1/src/num_gmp.h	/^    mp_limb_t data[2*NUM_LIMBS];$/;"	m	struct:__anon110
data	src/secp256k1/src/util.h	/^    const void* data;$/;"	m	struct:__anon107
data	src/streams.h	/^    const value_type* data() const                   { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	src/streams.h	/^    value_type* data()                               { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	src/uint256.h	/^    uint8_t data[WIDTH];$/;"	m	class:base_blob
dataDir	src/qt/clientmodel.cpp	/^QString ClientModel::dataDir() const$/;"	f	class:ClientModel
data_	src/leveldb/db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon19::RandomGenerator	file:
data_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon32::RandomGenerator	file:
data_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon33::RandomGenerator	file:
data_	src/leveldb/include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	src/leveldb/table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	src/leveldb/table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	src/leveldb/table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	src/leveldb/table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_	src/leveldb/table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor	file:
data_block	src/leveldb/table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	src/leveldb/table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
data_hash	src/net.h	/^    mutable uint256 data_hash;$/;"	m	class:CNetMessage
data_iter_	src/leveldb/table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
data_received	test/functional/test_framework/mininode.py	/^    def data_received(self, t):$/;"	m	class:P2PConnection
data_sync_error_	src/leveldb/db/db_test.cc	/^  port::AtomicPointer data_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
database	src/wallet/wallet.h	/^    std::unique_ptr<WalletDatabase> database;$/;"	m	class:final
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	doc/man/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	src/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	src/secp256k1/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	src/univalue/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	doc/man/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/secp256k1/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/univalue/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
date	src/qt/recentrequeststablemodel.h	/^    QDateTime date;$/;"	m	class:RecentRequestEntry
dateFrom	src/qt/transactionfilterproxy.h	/^    QDateTime dateFrom;$/;"	m	class:TransactionFilterProxy
dateFrom	src/qt/transactionview.h	/^    QDateTimeEdit *dateFrom;$/;"	m	class:TransactionView
dateRangeChanged	src/qt/transactionview.cpp	/^void TransactionView::dateRangeChanged()$/;"	f	class:TransactionView
dateRangeWidget	src/qt/transactionview.h	/^    QFrame *dateRangeWidget;$/;"	m	class:TransactionView
dateTimeStr	src/qt/guiutil.cpp	/^QString dateTimeStr(const QDateTime &date)$/;"	f	namespace:GUIUtil
dateTimeStr	src/qt/guiutil.cpp	/^QString dateTimeStr(qint64 nTime)$/;"	f	namespace:GUIUtil
dateTo	src/qt/transactionfilterproxy.h	/^    QDateTime dateTo;$/;"	m	class:TransactionFilterProxy
dateTo	src/qt/transactionview.h	/^    QDateTimeEdit *dateTo;$/;"	m	class:TransactionView
dateWidget	src/qt/transactionview.h	/^    QComboBox *dateWidget;$/;"	m	class:TransactionView
datetime	contrib/devtools/copyright_header.py	/^import datetime$/;"	i
datetime	contrib/linearize/linearize-data.py	/^import datetime$/;"	i
datetime	test/functional/test_runner.py	/^import datetime$/;"	i
db	src/leveldb/table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	src/leveldb/table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	src/leveldb/table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db	src/txdb.h	/^    CDBWrapper db;$/;"	m	class:final
db_	src/leveldb/db/autocompact_test.cc	/^  DB* db_;$/;"	m	class:leveldb::AutoCompactTest	file:
db_	src/leveldb/db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	src/leveldb/db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	src/leveldb/db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon29::DBIter	file:
db_	src/leveldb/db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	src/leveldb/db/fault_injection_test.cc	/^  DB* db_;$/;"	m	class:leveldb::FaultInjectionTest	file:
db_	src/leveldb/db/recovery_test.cc	/^  DB* db_;$/;"	m	class:leveldb::RecoveryTest	file:
db_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	src/leveldb/table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_file_state_	src/leveldb/db/fault_injection_test.cc	/^  std::map<std::string, FileState> db_file_state_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
db_lock_	src/leveldb/db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_num_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
dbenv	src/wallet/db.h	/^    std::unique_ptr<DbEnv> dbenv;$/;"	m	class:BerkeleyEnvironment
dbfull	src/leveldb/db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbfull	src/leveldb/db/recovery_test.cc	/^  DBImpl* dbfull() const { return reinterpret_cast<DBImpl*>(db_); }$/;"	f	class:leveldb::RecoveryTest
dbname	src/leveldb/db/c_test.c	/^static char dbname[200];$/;"	v	file:
dbname_	src/leveldb/db/autocompact_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::AutoCompactTest	file:
dbname_	src/leveldb/db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	src/leveldb/db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	src/leveldb/db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	src/leveldb/db/fault_injection_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::FaultInjectionTest	file:
dbname_	src/leveldb/db/recovery_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::RecoveryTest	file:
dbname_	src/leveldb/db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon30::Repairer::std	file:
dbname_	src/leveldb/db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	src/leveldb/db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
dbwrapper_error	src/dbwrapper.h	/^    explicit dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}$/;"	f	class:dbwrapper_error
dbwrapper_error	src/dbwrapper.h	/^class dbwrapper_error : public std::runtime_error$/;"	c
dbwrapper_private	src/dbwrapper.cpp	/^namespace dbwrapper_private {$/;"	n	file:
dbwrapper_private	src/dbwrapper.h	/^namespace dbwrapper_private {$/;"	n
dd_mutex	src/sync.cpp	/^    std::mutex dd_mutex;$/;"	m	struct:LockData	file:
deadlineTimers	src/rpc/server.cpp	/^static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;$/;"	v	file:
deallocate	src/support/allocators/secure.h	/^    void deallocate(T* p, std::size_t n)$/;"	f
deallocate	src/support/allocators/zeroafterfree.h	/^    void deallocate(T* p, std::size_t n)$/;"	f
debit	src/interfaces/wallet.h	/^    CAmount debit;$/;"	m	struct:interfaces::WalletTx
debit	src/qt/transactionrecord.h	/^    CAmount debit;$/;"	m	class:TransactionRecord
dec	src/crypto/aes.h	/^    const AES256Decrypt dec;$/;"	m	class:AES256CBCDecrypt
decay	src/policy/fees.cpp	/^    double decay;$/;"	m	class:TxConfirmStats	file:
decay	src/policy/fees.h	/^    double decay = 0;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
decimal	test/functional/rpc_createmultisig.py	/^import decimal$/;"	i
decimal	test/functional/test_framework/authproxy.py	/^import decimal$/;"	i
decimal	test/functional/test_framework/test_node.py	/^import decimal$/;"	i
decimals	src/qt/bitcoinunits.cpp	/^int BitcoinUnits::decimals(int unit)$/;"	f	class:BitcoinUnits
decltype	src/reverse_iterator.h	/^    auto begin() const -> decltype(this->m_x.rbegin())$/;"	f	class:reverse_range
decltype	src/reverse_iterator.h	/^    auto end() const -> decltype(this->m_x.rend())$/;"	f	class:reverse_range
decode	contrib/testgen/gen_key_io_test_vectors.py	/^from segwit_addr import bech32_encode, decode, convertbits, CHARSET$/;"	i
decode	test/functional/test_framework/script.py	/^    def decode(vch):$/;"	m	class:CScriptNum
decode	test/functional/test_framework/segwit_addr.py	/^def decode(hrp, addr):$/;"	f
decode_op_n	test/functional/test_framework/script.py	/^    def decode_op_n(self):$/;"	m	class:CScriptOp
decodepsbt	src/rpc/rawtransaction.cpp	/^UniValue decodepsbt(const JSONRPCRequest& request)$/;"	f
decoderawtransaction	src/rpc/rawtransaction.cpp	/^static UniValue decoderawtransaction(const JSONRPCRequest& request)$/;"	f	file:
decoderawtransaction_asm_sighashtype	test/functional/rpc_decodescript.py	/^    def decoderawtransaction_asm_sighashtype(self):$/;"	m	class:DecodeScriptTest
decodescript	src/rpc/rawtransaction.cpp	/^static UniValue decodescript(const JSONRPCRequest& request)$/;"	f	file:
decodescript_script_pub_key	test/functional/rpc_decodescript.py	/^    def decodescript_script_pub_key(self):$/;"	m	class:DecodeScriptTest
decodescript_script_sig	test/functional/rpc_decodescript.py	/^    def decodescript_script_sig(self):$/;"	m	class:DecodeScriptTest
decomposeTransaction	src/qt/transactionrecord.cpp	/^QList<TransactionRecord> TransactionRecord::decomposeTransaction(const interfaces::WalletTx& wtx)$/;"	f	class:TransactionRecord
defaultAssumeValid	src/consensus/params.h	/^    uint256 defaultAssumeValid;$/;"	m	struct:Consensus::Params
default_build_AR	depends/builders/default.mk	/^default_build_AR = ar$/;"	m
default_build_CC	depends/builders/default.mk	/^default_build_CC = gcc$/;"	m
default_build_CXX	depends/builders/default.mk	/^default_build_CXX = g++$/;"	m
default_build_INSTALL_NAME_TOOL	depends/builders/default.mk	/^default_build_INSTALL_NAME_TOOL = install_name_tool$/;"	m
default_build_NM	depends/builders/default.mk	/^default_build_NM = nm$/;"	m
default_build_OTOOL	depends/builders/default.mk	/^default_build_OTOOL = otool$/;"	m
default_build_RANLIB	depends/builders/default.mk	/^default_build_RANLIB = ranlib$/;"	m
default_build_STRIP	depends/builders/default.mk	/^default_build_STRIP = strip$/;"	m
default_env	src/leveldb/util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
default_env	src/leveldb/util/env_win.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
default_error_callback	src/secp256k1/src/gen_context.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback	src/secp256k1/src/secp256k1.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback_fn	src/secp256k1/src/gen_context.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_error_callback_fn	src/secp256k1/src/secp256k1.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_host_AR	depends/hosts/default.mk	/^default_host_AR = $(host_toolchain)ar$/;"	m
default_host_CC	depends/hosts/default.mk	/^default_host_CC = $(host_toolchain)gcc$/;"	m
default_host_CXX	depends/hosts/default.mk	/^default_host_CXX = $(host_toolchain)g++$/;"	m
default_host_INSTALL_NAME_TOOL	depends/hosts/default.mk	/^default_host_INSTALL_NAME_TOOL = $(host_toolchain)install_name_tool$/;"	m
default_host_LIBTOOL	depends/hosts/default.mk	/^default_host_LIBTOOL = $(host_toolchain)libtool$/;"	m
default_host_NM	depends/hosts/default.mk	/^default_host_NM = $(host_toolchain)nm$/;"	m
default_host_OTOOL	depends/hosts/default.mk	/^default_host_OTOOL = $(host_toolchain)otool$/;"	m
default_host_RANLIB	depends/hosts/default.mk	/^default_host_RANLIB = $(host_toolchain)ranlib$/;"	m
default_host_STRIP	depends/hosts/default.mk	/^default_host_STRIP = $(host_toolchain)strip$/;"	m
default_illegal_callback	src/secp256k1/src/secp256k1.c	/^static const secp256k1_callback default_illegal_callback = {$/;"	v	file:
default_illegal_callback_fn	src/secp256k1/src/secp256k1.c	/^static void default_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
defaultdict	test/functional/combine_logs.py	/^from collections import defaultdict, namedtuple$/;"	i
defaultdict	test/functional/example_test.py	/^from collections import defaultdict$/;"	i
defaultdict	test/functional/feature_maxuploadtarget.py	/^from collections import defaultdict$/;"	i
defaultdict	test/functional/test_framework/mininode.py	/^from collections import defaultdict$/;"	i
defaultdict	test/functional/wallet_labels.py	/^from collections import defaultdict$/;"	i
defaultdict	test/functional/wallet_resendwallettransactions.py	/^from collections import defaultdict$/;"	i
defaultdict	test/lint/check-rpc-mappings.py	/^from collections import defaultdict$/;"	i
delay_data_sync_	src/leveldb/db/db_test.cc	/^  port::AtomicPointer delay_data_sync_;$/;"	m	class:leveldb::SpecialEnv	file:
deleteAction	src/qt/addressbookpage.h	/^    QAction *deleteAction; \/\/ to be able to explicitly disable it$/;"	m	class:AddressBookPage
deleteClicked	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::deleteClicked()$/;"	f	class:SendCoinsEntry
deleteWhenTriggered	src/httpserver.h	/^    bool deleteWhenTriggered;$/;"	m	class:HTTPEvent
delete_cookie_file	test/functional/test_framework/util.py	/^def delete_cookie_file(datadir):$/;"	f
deleted_files	src/leveldb/db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	src/leveldb/db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	src/leveldb/util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_values_	src/leveldb/util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	src/leveldb/util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
depcomp	src/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	src/secp256k1/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	src/univalue/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
deps	contrib/devtools/circular-dependencies.py	/^deps = dict()$/;"	v
depth	src/qt/transactionrecord.h	/^    qint64 depth;$/;"	m	class:TransactionStatus
depth_in_main_chain	src/interfaces/wallet.h	/^    int depth_in_main_chain = -1;$/;"	m	struct:interfaces::WalletTxOut
depth_in_main_chain	src/interfaces/wallet.h	/^    int depth_in_main_chain;$/;"	m	struct:interfaces::WalletTxStatus
depth_limit	src/cuckoocache.h	/^    uint8_t depth_limit;$/;"	m	class:CuckooCache::cache
deque	test/functional/test_runner.py	/^from collections import deque$/;"	i
deriveaddresses	src/rpc/misc.cpp	/^UniValue deriveaddresses(const JSONRPCRequest& request)$/;"	f
descendant_score	src/txmempool.h	/^struct descendant_score {};$/;"	s
descending	src/wallet/coinselection.cpp	/^} descending;$/;"	v	typeref:struct:__anon119
describe	src/qt/transactiontablemodel.cpp	/^    QString describe(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)$/;"	f	class:TransactionTablePriv
description	src/qt/bitcoinunits.cpp	/^QString BitcoinUnits::description(int unit)$/;"	f	class:BitcoinUnits
descriptor	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a 1-of-2 bare multisig from descriptor")$/;"	i
descriptor	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2pkh address from descriptor")$/;"	i
descriptor	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
descriptor	test/functional/wallet_importmulti.py	/^        self.log.info("Should import the ranged descriptor with specified range as solvable")$/;"	i
descriptor	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
descriptor_file_	src/leveldb/db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	src/leveldb/db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
descriptors	test/functional/rpc_scantxoutset.py	/^def descriptors(out):$/;"	f
descsum_check	test/functional/test_framework/descriptors.py	/^def descsum_check(s, require=True):$/;"	f
descsum_create	test/functional/rpc_deriveaddresses.py	/^from test_framework.descriptors import descsum_create$/;"	i
descsum_create	test/functional/test_framework/descriptors.py	/^def descsum_create(s):$/;"	f
descsum_create	test/functional/wallet_importmulti.py	/^from test_framework.descriptors import descsum_create$/;"	i
descsum_expand	test/functional/test_framework/descriptors.py	/^def descsum_expand(s):$/;"	f
descsum_polymod	test/functional/test_framework/descriptors.py	/^def descsum_polymod(symbols):$/;"	f
deser_compact_size	test/functional/test_framework/messages.py	/^def deser_compact_size(f):$/;"	f
deser_string	test/functional/test_framework/messages.py	/^def deser_string(f):$/;"	f
deser_string_vector	test/functional/test_framework/messages.py	/^def deser_string_vector(f):$/;"	f
deser_uint256	test/functional/test_framework/messages.py	/^def deser_uint256(f):$/;"	f
deser_uint256_vector	test/functional/test_framework/messages.py	/^def deser_uint256_vector(f):$/;"	f
deser_vector	test/functional/test_framework/messages.py	/^def deser_vector(f, c):$/;"	f
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:BlockTransactions
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:BlockTransactionsRequest
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CBlock
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CBlockHeader
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CBlockLocator
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CInv
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CMerkleBlock
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:COutPoint
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CPartialMerkleTree
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CTransaction
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CTxIn
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CTxInWitness
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CTxOut
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:CTxWitness
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:P2PHeaderAndShortIDs
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:PrefilledTransaction
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_addr
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_block
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_blocktxn
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_cmpctblock
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_feefilter
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_getaddr
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_getblocks
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_getblocktxn
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_getdata
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_getheaders
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_headers
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_inv
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_mempool
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_notfound
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_ping
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_pong
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_reject
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_sendcmpct
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_sendheaders
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_tx
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_verack
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f):$/;"	m	class:msg_version
deserialize	test/functional/test_framework/messages.py	/^    def deserialize(self, f, with_time=True):$/;"	m	class:CAddress
deserialize_type	src/serialize.h	/^struct deserialize_type {};$/;"	s
desiredTarget	src/policy/fees.h	/^    int desiredTarget = 0;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
dest	src/interfaces/wallet.h	/^    CTxDestination dest;$/;"	m	struct:interfaces::WalletAddress
destChange	src/wallet/coincontrol.h	/^    CTxDestination destChange;$/;"	m	class:CCoinControl
dest_	src/leveldb/db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	src/leveldb/db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destdata	src/wallet/wallet.h	/^    StringMap destdata;$/;"	m	class:CAddressBookData
destination	src/wallet/wallet.h	/^    CTxDestination destination;$/;"	m	struct:COutputEntry
destructor_	src/leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	src/leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
detail	src/tinyformat.h	/^namespace detail {$/;"	n	namespace:tinyformat
details	src/qt/paymentrequestplus.h	/^    payments::PaymentDetails details;$/;"	m	class:PaymentRequestPlus
detectShutdown	src/qt/bitcoingui.cpp	/^void BitcoinGUI::detectShutdown()$/;"	f	class:BitcoinGUI
difference_type	src/prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_iterator
difference_type	src/prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_reverse_iterator
difference_type	src/prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::iterator
difference_type	src/prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::reverse_iterator
difference_type	src/prevector.h	/^    typedef Diff difference_type;$/;"	t	class:prevector
difference_type	src/streams.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
difference_type	src/support/allocators/secure.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:secure_allocator
difference_type	src/support/allocators/zeroafterfree.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:zero_after_free_allocator
difflib	contrib/devtools/clang-format-diff.py	/^import difflib$/;"	i
difflib	test/util/bitcoin-util-test.py	/^import difflib$/;"	i
dir_locks	src/util/system.cpp	/^static std::map<std::string, std::unique_ptr<fsbridge::FileLock>> dir_locks;$/;"	v	file:
direct	src/prevector.h	/^        char direct[sizeof(T) * N];$/;"	m	union:prevector::direct_or_indirect
direct_or_indirect	src/prevector.h	/^    union direct_or_indirect {$/;"	u	class:prevector
direct_ptr	src/prevector.h	/^    T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }$/;"	f	class:prevector
direct_ptr	src/prevector.h	/^    const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }$/;"	f	class:prevector
direction_	src/leveldb/db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon29::DBIter	file:
direction_	src/leveldb/table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
disabled	test/functional/wallet_createwallet.py	/^        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')$/;"	i
disabled	test/functional/wallet_createwallet.py	/^        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)$/;"	i
disconnectSelectedNode	src/qt/rpcconsole.cpp	/^void RPCConsole::disconnectSelectedNode()$/;"	f	class:RPCConsole
disconnectViewHeadersSignals	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
disconnect_all	test/functional/p2p_node_network_limited.py	/^    def disconnect_all(self):$/;"	m	class:NodeNetworkLimitedTest
disconnect_nodes	test/functional/test_framework/util.py	/^def disconnect_nodes(from_connection, node_num):$/;"	f
disconnect_p2ps	test/functional/test_framework/test_node.py	/^    def disconnect_p2ps(self):$/;"	m	class:TestNode
disconnected	src/torcontrol.cpp	/^    std::function<void(TorControlConnection&)> disconnected;$/;"	m	class:TorControlConnection	file:
disconnected_cb	src/torcontrol.cpp	/^void TorController::disconnected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
disconnectnode	src/rpc/net.cpp	/^static UniValue disconnectnode(const JSONRPCRequest& request)$/;"	f	file:
disjoint_sorted_files_	src/leveldb/db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest	file:
dist_man1_MANS	doc/man/Makefile	/^dist_man1_MANS = $(am__append_1) $(am__append_2) $(am__append_3) \\$/;"	m
dist_noinst_SCRIPTS	Makefile	/^dist_noinst_SCRIPTS = autogen.sh$/;"	m
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcleancheck_listfiles	src/secp256k1/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcleancheck_listfiles	src/univalue/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	src/secp256k1/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	src/univalue/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
distuninstallcheck_listfiles	src/secp256k1/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
distuninstallcheck_listfiles	src/univalue/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
dns	contrib/seeds/makeseeds.py	/^import dns.resolver$/;"	i
do_import	test/functional/wallet_import_rescan.py	/^    def do_import(self, timestamp):$/;"	m	class:Variant
do_multisig	test/functional/rpc_createmultisig.py	/^    def do_multisig(self):$/;"	m	class:RpcCreateMultiSigTest
do_one_round	test/functional/wallet_backup.py	/^    def do_one_round(self):$/;"	m	class:WalletBackupTest
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	doc/man/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/secp256k1/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/univalue/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
done	src/leveldb/db/db_impl.cc	/^  bool done;$/;"	m	struct:leveldb::DBImpl::Writer	file:
done	src/leveldb/db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done	src/qt/addressbookpage.cpp	/^void AddressBookPage::done(int retval)$/;"	f	class:AddressBookPage
done_	src/leveldb/db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon19::Stats	file:
done_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
double	test/functional/test_framework/key.py	/^    def double(self, p1):$/;"	m	class:EllipticCurve
dragEnterEvent	src/qt/bitcoingui.cpp	/^void BitcoinGUI::dragEnterEvent(QDragEnterEvent *event)$/;"	f	class:BitcoinGUI
dropEvent	src/qt/bitcoingui.cpp	/^void BitcoinGUI::dropEvent(QDropEvent *event)$/;"	f	class:BitcoinGUI
dropped_bytes_	src/leveldb/db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
ds	contrib/macdeploy/custom_dsstore.py	/^ds = DSStore.open(output_file, 'w+')$/;"	v
dst_	src/leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon27::CorruptionReporter	file:
dst_	src/leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon27::WriteBatchItemPrinter	file:
dummy	src/tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	m	struct:tinyformat::detail::is_convertible::fail
dummy	src/tinyformat.h	/^        struct succeed { char dummy; };$/;"	m	struct:tinyformat::detail::is_convertible::succeed
dummy_versions_	src/leveldb/db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
dummydata	src/qt/guiutil.cpp	/^static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};$/;"	m	namespace:GUIUtil	file:
dump_help	test/functional/rpc_help.py	/^    def dump_help(self):$/;"	m	class:HelpRpcTest
dumpprivkey	src/wallet/rpcdump.cpp	/^UniValue dumpprivkey(const JSONRPCRequest& request)$/;"	f
dumpwallet	src/wallet/rpcdump.cpp	/^UniValue dumpwallet(const JSONRPCRequest& request)$/;"	f
dustRelayFee	src/policy/settings.cpp	/^CFeeRate dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);$/;"	v
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	doc/man/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	src/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	src/secp256k1/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	src/univalue/Makefile	/^dvidir = ${docdir}$/;"	m
ec_group	src/secp256k1/src/bench_verify.c	/^    EC_GROUP* ec_group;$/;"	m	struct:__anon106	file:
ec_privkey_export_der	src/key.cpp	/^static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, bool compressed) {$/;"	f	file:
ec_privkey_export_der	src/secp256k1/contrib/lax_der_privatekey_parsing.c	/^int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {$/;"	f
ec_privkey_import_der	src/key.cpp	/^static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {$/;"	f	file:
ec_privkey_import_der	src/secp256k1/contrib/lax_der_privatekey_parsing.c	/^int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {$/;"	f
ec_pubkey_parse_pointtest	src/secp256k1/src/tests.c	/^void ec_pubkey_parse_pointtest(const unsigned char *input, int xvalid, int yvalid) {$/;"	f
ecdsa_signature_parse_der_lax	src/pubkey.cpp	/^static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f	file:
ecdsa_signature_parse_der_lax	src/secp256k1/contrib/lax_der_parsing.c	/^int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f
echo	src/rpc/misc.cpp	/^static UniValue echo(const JSONRPCRequest& request)$/;"	f	file:
ecmult_const_chain_multiply	src/secp256k1/src/tests.c	/^void ecmult_const_chain_multiply(void) {$/;"	f
ecmult_const_commutativity	src/secp256k1/src/tests.c	/^void ecmult_const_commutativity(void) {$/;"	f
ecmult_const_mult_zero_one	src/secp256k1/src/tests.c	/^void ecmult_const_mult_zero_one(void) {$/;"	f
ecmult_const_random_mult	src/secp256k1/src/tests.c	/^void ecmult_const_random_mult(void) {$/;"	f
ecmult_ctx	src/secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_context ecmult_ctx;$/;"	m	struct:secp256k1_context_struct	file:
ecmult_gen_ctx	src/secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_gen_context ecmult_gen_ctx;$/;"	m	struct:secp256k1_context_struct	file:
edit	src/leveldb/db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
editLabel	src/qt/transactionview.cpp	/^void TransactionView::editLabel()$/;"	f	class:TransactionView
editStatus	src/qt/addresstablemodel.h	/^    EditStatus editStatus = OK;$/;"	m	class:AddressTableModel
edit_	src/leveldb/db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon30::Repairer	file:
edit_	src/leveldb/db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
effective_fee	src/wallet/wallet.h	/^    CFeeRate effective_fee = CFeeRate(0);$/;"	m	struct:CoinSelectionParams
effective_value	src/wallet/coinselection.h	/^    CAmount effective_value;$/;"	m	class:CInputCoin
elapsed	src/versionbits.h	/^    int elapsed;$/;"	m	struct:BIP9Stats
elems_	src/leveldb/util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon4::HandleTable	file:
emitDataChanged	src/qt/addresstablemodel.cpp	/^void AddressTableModel::emitDataChanged(int idx)$/;"	f	class:AddressTableModel
empty	Makefile	/^empty := $/;"	m
empty	src/indirectmap.h	/^    bool empty() const              { return m.empty(); }$/;"	f	class:indirectmap
empty	src/leveldb/db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	src/leveldb/include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	src/leveldb/table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
empty	src/limitedmap.h	/^    bool empty() const { return map.empty(); }$/;"	f	class:limitedmap
empty	src/prevector.h	/^    bool empty() const {$/;"	f	class:prevector
empty	src/streams.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
empty	src/streams.h	/^    bool empty() const { return m_data.size() == m_pos; }$/;"	f	class:VectorReader
empty	src/univalue/include/univalue.h	/^    bool empty() const { return (values.size() == 0); }$/;"	f	class:UniValue
empty_string	src/util/threadnames.cpp	/^static const std::string empty_string;$/;"	v	file:
empty_wallet	src/wallet/test/coinselector_tests.cpp	/^static void empty_wallet(void)$/;"	f	file:
enableWallet	src/qt/bitcoingui.h	/^    bool enableWallet = false;$/;"	m	class:BitcoinGUI
enabled	src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  private static final boolean enabled; \/\/true if the library is loaded$/;"	f	class:Secp256k1Context	file:
enc	src/crypto/aes.h	/^    const AES256Encrypt enc;$/;"	m	class:AES256CBCEncrypt
encode	test/functional/test_framework/messages.py	/^from codecs import encode$/;"	i
encode	test/functional/test_framework/script.py	/^    def encode(obj):$/;"	m	class:CScriptNum
encode	test/functional/test_framework/segwit_addr.py	/^def encode(hrp, witver, witprog):$/;"	f
encode_op_n	test/functional/test_framework/script.py	/^    def encode_op_n(n):$/;"	m	class:CScriptOp
encode_op_pushdata	test/functional/test_framework/script.py	/^    def encode_op_pushdata(d):$/;"	m	class:CScriptOp
encryptWallet	src/qt/walletframe.cpp	/^void WalletFrame::encryptWallet(bool status)$/;"	f	class:WalletFrame
encryptWallet	src/qt/walletview.cpp	/^void WalletView::encryptWallet(bool status)$/;"	f	class:WalletView
encryptWalletAction	src/qt/bitcoingui.h	/^    QAction* encryptWalletAction = nullptr;$/;"	m	class:BitcoinGUI
encryptwallet	src/wallet/rpcwallet.cpp	/^static UniValue encryptwallet(const JSONRPCRequest& request)$/;"	f	file:
end	src/indirectmap.h	/^    const_iterator end() const      { return m.end(); }$/;"	f	class:indirectmap
end	src/indirectmap.h	/^    iterator end()                  { return m.end(); }$/;"	f	class:indirectmap
end	src/key.h	/^    const unsigned char* end() const { return keydata.data() + size(); }$/;"	f	class:CKey
end	src/leveldb/db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end	src/limitedmap.h	/^    const_iterator end() const { return map.end(); }$/;"	f	class:limitedmap
end	src/policy/fees.h	/^    double end = -1;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
end	src/prevector.h	/^    const_iterator end() const { return const_iterator(item_ptr(size())); }$/;"	f	class:prevector
end	src/prevector.h	/^    iterator end() { return iterator(item_ptr(size())); }$/;"	f	class:prevector
end	src/pubkey.h	/^    const unsigned char* end() const { return vch + size(); }$/;"	f	class:CPubKey
end	src/streams.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	src/streams.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	src/support/lockedpool.h	/^    char* end;$/;"	m	class:Arena
end	src/uint256.h	/^    const unsigned char* end() const$/;"	f	class:base_blob
end	src/uint256.h	/^    unsigned char* end()$/;"	f	class:base_blob
end_	src/leveldb/db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	src/leveldb/db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
entries_per_batch_	src/leveldb/db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
entry	src/qt/recentrequeststablemodel.h	/^    const RecentRequestEntry &entry(int row) const { return list[row]; }$/;"	f	class:RecentRequestsTableModel
entryHeight	src/txmempool.h	/^    const unsigned int entryHeight; \/\/!< Chain height when entering the mempool$/;"	m	class:CTxMemPoolEntry
entry_time	src/txmempool.h	/^struct entry_time {};$/;"	s
enum	test/functional/wallet_import_rescan.py	/^import enum$/;"	i
env	src/leveldb/db/recovery_test.cc	/^  Env* env() const { return env_; }$/;"	f	class:leveldb::RecoveryTest
env	src/leveldb/include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env	src/wallet/db.h	/^    BerkeleyEnvironment *env;$/;"	m	class:BerkeleyBatch
env	src/wallet/db.h	/^    std::shared_ptr<BerkeleyEnvironment> env;$/;"	m	class:BerkeleyDatabase
env_	src/leveldb/db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	src/leveldb/db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	src/leveldb/db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest	file:
env_	src/leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::FaultInjectionTest	file:
env_	src/leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::TestWritableFile	file:
env_	src/leveldb/db/recovery_test.cc	/^  Env* env_;$/;"	m	class:leveldb::RecoveryTest	file:
env_	src/leveldb/db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon30::Repairer	file:
env_	src/leveldb/db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	src/leveldb/db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	src/leveldb/helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest	file:
env_	src/leveldb/util/env_posix_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
env_	src/leveldb/util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvTest	file:
eof	src/streams.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
eof	src/streams.h	/^    bool eof() const {$/;"	f	class:CBufferedFile
eof_	src/leveldb/db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
epoch_check	src/cuckoocache.h	/^    void epoch_check()$/;"	f	class:CuckooCache::cache
epoch_flags	src/cuckoocache.h	/^    mutable std::vector<bool> epoch_flags;$/;"	m	class:CuckooCache::cache
epoch_heuristic_counter	src/cuckoocache.h	/^    uint32_t epoch_heuristic_counter;$/;"	m	class:CuckooCache::cache
epoch_size	src/cuckoocache.h	/^    uint32_t epoch_size;$/;"	m	class:CuckooCache::cache
equal_sets	src/wallet/test/coinselector_tests.cpp	/^static bool equal_sets(CoinSet a, CoinSet b)$/;"	f	file:
erase	src/indirectmap.h	/^    size_type erase(const K& key)                   { return m.erase(&key); }$/;"	f	class:indirectmap
erase	src/limitedmap.h	/^    void erase(const key_type& k)$/;"	f	class:limitedmap
erase	src/prevector.h	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:prevector
erase	src/prevector.h	/^    iterator erase(iterator pos) {$/;"	f	class:prevector
erase	src/streams.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	src/streams.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
erase	src/test/prevector_tests.cpp	/^    void erase(Size first, Size last) {$/;"	f	class:prevector_tester
erase	src/test/prevector_tests.cpp	/^    void erase(Size position) {$/;"	f	class:prevector_tester
erase_three	test/functional/wallet_backup.py	/^    def erase_three(self):$/;"	m	class:WalletBackupTest
err	src/test/script_tests.cpp	/^    ScriptError_t err;$/;"	m	struct:ScriptErrorDesc	file:
errno	test/functional/feature_dbcrash.py	/^import errno$/;"	i
errno	test/functional/test_framework/test_node.py	/^import errno$/;"	i
error	src/bitcoin-cli.cpp	/^    int error;$/;"	m	struct:HTTPReply	file:
error	src/util/system.h	/^bool error(const char* fmt, const Args&... args)$/;"	f
error	src/validation.h	/^    ScriptError error;$/;"	m	class:CScriptCheck
error_callback	src/secp256k1/src/secp256k1.c	/^    secp256k1_callback error_callback;$/;"	m	struct:secp256k1_context_struct	file:
error_if_exists	src/leveldb/include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
escape	test/lint/lint-format-strings.py	/^def escape(s):$/;"	f
escape_cdata	contrib/devtools/update-translations.py	/^def escape_cdata(text):$/;"	f
escapes	src/univalue/gen/gen.cpp	/^static std::string escapes[256];$/;"	v	file:
escapes	src/univalue/lib/univalue_escapes.h	/^static const char *escapes[256] = {$/;"	v
est	src/policy/fees.h	/^    EstimationResult est;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
estimateCombinedFee	src/policy/fees.cpp	/^double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const$/;"	f	class:CBlockPolicyEstimator
estimateConservativeFee	src/policy/fees.cpp	/^double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const$/;"	f	class:CBlockPolicyEstimator
estimateFee	src/policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const$/;"	f	class:CBlockPolicyEstimator
estimateRawFee	src/policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const$/;"	f	class:CBlockPolicyEstimator
estimateSmartFee	src/policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const$/;"	f	class:CBlockPolicyEstimator
estimated_feerate	src/node/psbt.h	/^    Optional<CFeeRate> estimated_feerate;  \/\/!< Estimated feerate (fee \/ weight) of the transaction$/;"	m	struct:PSBTAnalysis
estimated_vsize	src/node/psbt.h	/^    Optional<size_t> estimated_vsize;      \/\/!< Estimated weight of the transaction$/;"	m	struct:PSBTAnalysis
estimaterawfee	src/rpc/mining.cpp	/^static UniValue estimaterawfee(const JSONRPCRequest& request)$/;"	f	file:
estimatesmartfee	src/rpc/mining.cpp	/^static UniValue estimatesmartfee(const JSONRPCRequest& request)$/;"	f	file:
etree	contrib/devtools/update-translations.py	/^import xml.etree.ElementTree as ET$/;"	i
etree	test/functional/rpc_misc.py	/^import xml.etree.ElementTree as ET$/;"	i
etype	contrib/devtools/security-check.py	/^            etype = identify_executable(filename)$/;"	v
ev	src/httprpc.cpp	/^    HTTPEvent ev;$/;"	m	class:HTTPRPCTimer	file:
ev	src/httpserver.h	/^    struct event* ev;$/;"	m	class:HTTPEvent	typeref:struct:HTTPEvent::event
event	src/qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::event(QEvent *event)$/;"	f	class:AskPassphraseDialog
event	src/qt/bitcoinamountfield.cpp	/^    bool event(QEvent *event)$/;"	f	class:AmountSpinBox
event	src/qt/modaloverlay.cpp	/^bool ModalOverlay::event(QEvent* ev) {$/;"	f	class:ModalOverlay
event	src/support/events.h	/^MAKE_RAII(event);$/;"	v
eventBase	src/httpserver.cpp	/^static struct event_base* eventBase = nullptr;$/;"	v	typeref:struct:event_base	file:
eventFilter	src/qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:AskPassphraseDialog
eventFilter	src/qt/bitcoinamountfield.cpp	/^bool BitcoinAmountField::eventFilter(QObject *object, QEvent *event)$/;"	f	class:BitcoinAmountField
eventFilter	src/qt/bitcoingui.cpp	/^bool BitcoinGUI::eventFilter(QObject *object, QEvent *event)$/;"	f	class:BitcoinGUI
eventFilter	src/qt/guiutil.cpp	/^bool ItemDelegate::eventFilter(QObject *object, QEvent *event)$/;"	f	class:GUIUtil::ItemDelegate
eventFilter	src/qt/guiutil.cpp	/^bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
eventFilter	src/qt/modaloverlay.cpp	/^bool ModalOverlay::eventFilter(QObject * obj, QEvent * ev) {$/;"	f	class:ModalOverlay
eventFilter	src/qt/paymentserver.cpp	/^bool PaymentServer::eventFilter(QObject *object, QEvent *event)$/;"	f	class:PaymentServer
eventFilter	src/qt/rpcconsole.cpp	/^bool RPCConsole::eventFilter(QObject* obj, QEvent *event)$/;"	f	class:RPCConsole
eventFilter	src/qt/signverifymessagedialog.cpp	/^bool SignVerifyMessageDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:SignVerifyMessageDialog
eventFilter	src/qt/splashscreen.cpp	/^bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {$/;"	f	class:SplashScreen
eventFilter	src/qt/transactionview.cpp	/^bool TransactionView::eventFilter(QObject *obj, QEvent *event)$/;"	f	class:TransactionView
eventHTTP	src/httpserver.cpp	/^struct evhttp* eventHTTP = nullptr;$/;"	v	typeref:struct:evhttp
event_base	src/support/events.h	/^MAKE_RAII(event_base);$/;"	v
eventcb	src/torcontrol.cpp	/^void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ctx)$/;"	f	class:TorControlConnection
events_	src/leveldb/util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvTest	file:
evhttp	src/support/events.h	/^MAKE_RAII(evhttp);$/;"	v
evhttp_connection	src/support/events.h	/^MAKE_RAII(evhttp_connection);$/;"	v
evhttp_request	src/support/events.h	/^MAKE_RAII(evhttp_request);$/;"	v
exactMatch	src/httpserver.cpp	/^    bool exactMatch;$/;"	m	struct:HTTPPathHandler	file:
exec	src/qt/sendcoinsdialog.cpp	/^int SendConfirmationDialog::exec()$/;"	f	class:SendConfirmationDialog
exec_insert_header	contrib/devtools/copyright_header.py	/^def exec_insert_header(filename, style):$/;"	f
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	doc/man/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/secp256k1/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/univalue/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_report	contrib/devtools/copyright_header.py	/^def exec_report(base_directory, verbose):$/;"	f
exec_update_header_year	contrib/devtools/copyright_header.py	/^def exec_update_header_year(base_directory):$/;"	f
execute	contrib/linearize/linearize-hashes.py	/^    def execute(self, obj):$/;"	m	class:BitcoinRPC
execute	src/rpc/server.cpp	/^UniValue CRPCTable::execute(const JSONRPCRequest &request) const$/;"	f	class:CRPCTable
exhaustive_tests_CPPFLAGS	src/secp256k1/Makefile	/^exhaustive_tests_CPPFLAGS =  \\$/;"	m
exhaustive_tests_DEPENDENCIES	src/secp256k1/Makefile	/^exhaustive_tests_DEPENDENCIES =  \\$/;"	m
exhaustive_tests_LDADD	src/secp256k1/Makefile	/^exhaustive_tests_LDADD = $(SECP_LIBS)$/;"	m
exhaustive_tests_LDFLAGS	src/secp256k1/Makefile	/^exhaustive_tests_LDFLAGS = -static$/;"	m
exhaustive_tests_LINK	src/secp256k1/Makefile	/^exhaustive_tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\$/;"	m
exhaustive_tests_OBJECTS	src/secp256k1/Makefile	/^exhaustive_tests_OBJECTS = $(am_exhaustive_tests_OBJECTS)$/;"	m
exhaustive_tests_SOURCES	src/secp256k1/Makefile	/^exhaustive_tests_SOURCES = src\/tests_exhaustive.c$/;"	m
exists	src/txmempool.h	/^    bool exists(const uint256& hash) const$/;"	f	class:CTxMemPool
exists	src/univalue/include/univalue.h	/^    bool exists(const std::string& key) const { size_t i; return findKey(key, i); }$/;"	f	class:UniValue
expand_path	contrib/install_db4.sh	/^expand_path() {$/;"	f
expect	src/univalue/lib/univalue_read.cpp	/^#define expect(/;"	d	file:
expectCallback	src/qt/test/apptests.h	/^    void expectCallback(std::string callback) { m_callbacks.emplace(std::move(callback)); }$/;"	f	class:AppTests
expect_bits	src/univalue/lib/univalue_read.cpp	/^enum expect_bits {$/;"	g	file:
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = False$/;"	v	class:BadInputOutpointIndex
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = False$/;"	v	class:BadTxTemplate
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = False$/;"	v	class:NonexistentInput
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = False$/;"	v	class:SizeTooSmall
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = False$/;"	v	class:TooManySigops
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = True$/;"	v	class:DuplicateInput
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = True$/;"	v	class:InputMissing
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = True$/;"	v	class:InvalidOPIFConstruction
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = True$/;"	v	class:OutputMissing
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = True$/;"	v	class:SpendNegative
expect_disconnect	test/functional/data/invalid_txs.py	/^    expect_disconnect = True$/;"	v	class:SpendTooMuch
expect_http_status	test/functional/interface_rpc.py	/^def expect_http_status(expected_http_status, expected_rpc_code,$/;"	f
exportClicked	src/qt/transactionview.cpp	/^void TransactionView::exportClicked()$/;"	f	class:TransactionView
exportImage	src/qt/qrimagewidget.cpp	/^QImage QRImageWidget::exportImage()$/;"	f	class:QRImageWidget
ext_add_stages	depends/funcs.mk	/^define ext_add_stages$/;"	m
extension	contrib/devtools/optimize-pngs.py	/^        extension = os.path.splitext(file)[1]$/;"	v
extra_count	src/blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
extra_txn	src/test/blockencodings_tests.cpp	/^std::vector<std::pair<uint256, CTransactionRef>> extra_txn;$/;"	v
extract	src/secp256k1/src/scalar_4x64_impl.h	/^#define extract(/;"	d
extract	src/secp256k1/src/scalar_4x64_impl.h	/^#undef extract$/;"	d
extract	src/secp256k1/src/scalar_8x32_impl.h	/^#define extract(/;"	d
extract	src/secp256k1/src/scalar_8x32_impl.h	/^#undef extract$/;"	d
extract_fast	src/secp256k1/src/scalar_4x64_impl.h	/^#define extract_fast(/;"	d
extract_fast	src/secp256k1/src/scalar_4x64_impl.h	/^#undef extract_fast$/;"	d
extract_fast	src/secp256k1/src/scalar_8x32_impl.h	/^#define extract_fast(/;"	d
extract_fast	src/secp256k1/src/scalar_8x32_impl.h	/^#undef extract_fast$/;"	d
extranonce	src/test/miner_tests.cpp	/^    unsigned char extranonce;$/;"	m	struct:__anon59	file:
f	configure	/^    f()$/;"	f
f	contrib/linearize/linearize-data.py	/^    f = open(sys.argv[1], encoding="utf8")$/;"	v	class:BlockDataCopier
f	contrib/linearize/linearize-hashes.py	/^    f = open(sys.argv[1], encoding="utf8")$/;"	v
f	share/qt/extract_strings_qt.py	/^f = open(OUT_CPP, 'w', encoding="utf8")$/;"	v
f1	src/crypto/ripemd160.cpp	/^uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }$/;"	f	namespace:__anon42::ripemd160
f1	src/crypto/sha1.cpp	/^uint32_t inline f1(uint32_t b, uint32_t c, uint32_t d) { return d ^ (b & (c ^ d)); }$/;"	f	namespace:__anon38::sha1
f2	src/crypto/ripemd160.cpp	/^uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }$/;"	f	namespace:__anon42::ripemd160
f2	src/crypto/sha1.cpp	/^uint32_t inline f2(uint32_t b, uint32_t c, uint32_t d) { return b ^ c ^ d; }$/;"	f	namespace:__anon38::sha1
f3	src/crypto/ripemd160.cpp	/^uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }$/;"	f	namespace:__anon42::ripemd160
f3	src/crypto/sha1.cpp	/^uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (b | c)); }$/;"	f	namespace:__anon38::sha1
f4	src/crypto/ripemd160.cpp	/^uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }$/;"	f	namespace:__anon42::ripemd160
f5	src/crypto/ripemd160.cpp	/^uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }$/;"	f	namespace:__anon42::ripemd160
fAcceptDatacarrier	src/script/standard.cpp	/^bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;$/;"	v
fAllOk	src/checkqueue.h	/^    bool fAllOk;$/;"	m	class:CCheckQueue
fAllowOtherInputs	src/wallet/coincontrol.h	/^    bool fAllowOtherInputs;$/;"	m	class:CCoinControl
fAllowWatchOnly	src/wallet/coincontrol.h	/^    bool fAllowWatchOnly;$/;"	m	class:CCoinControl
fAnyoneCanPay	src/script/interpreter.cpp	/^    const bool fAnyoneCanPay;  \/\/!< whether the hashtype has the SIGHASH_ANYONECANPAY flag set$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
fBad	src/merkleblock.h	/^    bool fBad;$/;"	m	class:CPartialMerkleTree
fBloomFilter	src/net.cpp	/^    bool fBloomFilter;$/;"	m	struct:NodeEvictionCandidate	file:
fBroadcastTransactions	src/wallet/wallet.h	/^    bool fBroadcastTransactions = false;$/;"	m	class:final
fCapsLock	src/qt/askpassphrasedialog.h	/^    bool fCapsLock;$/;"	m	class:AskPassphraseDialog
fChangeCached	src/wallet/wallet.h	/^    mutable bool fChangeCached;$/;"	m	class:CWalletTx
fCheckBlockIndex	src/validation.cpp	/^bool fCheckBlockIndex = false;$/;"	v
fCheckForPruning	src/validation.cpp	/^    bool fCheckForPruning = false;$/;"	m	namespace:__anon50	file:
fChecked	src/primitives/block.h	/^    mutable bool fChecked;$/;"	m	class:CBlock
fCheckpointsEnabled	src/validation.cpp	/^bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;$/;"	v
fCoinBase	src/txdb.cpp	/^    bool fCoinBase;$/;"	m	class:__anon122::CCoins	file:
fCoinControlFeatures	src/qt/optionsmodel.h	/^    bool fCoinControlFeatures;$/;"	m	class:OptionsModel
fCompressed	src/key.h	/^    bool fCompressed;$/;"	m	class:CKey
fConnected	src/net.h	/^    bool fConnected;$/;"	m	struct:AddedNodeInfo
fCreateBlank	src/bitcoin-tx.cpp	/^static bool fCreateBlank;$/;"	v	file:
fCurrentlyConnected	src/net_processing.cpp	/^    bool fCurrentlyConnected;$/;"	m	struct:__anon89::CNodeState	file:
fDbEnvInit	src/wallet/db.h	/^    bool fDbEnvInit;$/;"	m	class:BerkeleyEnvironment
fDecryptionThoroughlyChecked	src/wallet/crypter.h	/^    bool fDecryptionThoroughlyChecked;$/;"	m	class:CCryptoKeyStore
fDefaultConsistencyChecks	src/chainparams.h	/^    bool fDefaultConsistencyChecks;$/;"	m	class:CChainParams
fDiscover	src/net.cpp	/^bool fDiscover = true;$/;"	v
fDone	src/checkqueue.h	/^    bool fDone;$/;"	m	class:CCheckQueueControl
fEnableReplacement	src/validation.cpp	/^bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;$/;"	v
fFeeEstimatesInitialized	src/init.cpp	/^bool fFeeEstimatesInitialized = false;$/;"	v
fFeeMinimized	src/qt/sendcoinsdialog.h	/^    bool fFeeMinimized;$/;"	m	class:SendCoinsDialog
fFlushOnClose	src/wallet/db.h	/^    bool fFlushOnClose;$/;"	m	class:BerkeleyBatch
fFromMe	src/wallet/wallet.h	/^    char fFromMe;$/;"	m	class:CWalletTx
fHashNone	src/script/interpreter.cpp	/^    const bool fHashNone;      \/\/!< whether the hashtype is SIGHASH_NONE$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
fHashSingle	src/script/interpreter.cpp	/^    const bool fHashSingle;    \/\/!< whether the hashtype is SIGHASH_SINGLE$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
fHaveGenesis	src/init.cpp	/^static bool fHaveGenesis = false;$/;"	v	file:
fHaveGrant	src/sync.h	/^    bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fHavePruned	src/validation.cpp	/^bool fHavePruned = false;$/;"	v
fHaveWatchOnly	src/qt/walletmodel.h	/^    bool fHaveWatchOnly;$/;"	m	class:WalletModel
fHaveWitness	src/net_processing.cpp	/^    bool fHaveWitness;$/;"	m	struct:__anon89::CNodeState	file:
fHelp	src/rpc/server.h	/^    bool fHelp;$/;"	m	class:JSONRPCRequest
fHideTrayIcon	src/qt/optionsmodel.h	/^    bool fHideTrayIcon;$/;"	m	class:OptionsModel
fInMempool	src/wallet/wallet.h	/^    mutable bool fInMempool;$/;"	m	class:CWalletTx
fInbound	src/net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fInbound	src/net.h	/^    bool fInbound;$/;"	m	struct:AddedNodeInfo
fInbound	src/net.h	/^    const bool fInbound;$/;"	m	class:CNode
fIncludeWitness	src/miner.h	/^    bool fIncludeWitness;$/;"	m	class:BlockAssembler
fInternal	src/wallet/wallet.h	/^    bool fInternal;$/;"	m	class:CKeyPool
fIsBareMultisigStd	src/policy/settings.cpp	/^bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;$/;"	v
fKeySet	src/wallet/crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fListen	src/net.cpp	/^bool fListen = true;$/;"	v
fLogIPs	src/logging.cpp	/^bool fLogIPs = DEFAULT_LOGIPS;$/;"	v
fMax	src/qt/trafficgraphwidget.h	/^    float fMax;$/;"	m	class:TrafficGraphWidget
fMineBlocksOnDemand	src/chainparams.h	/^    bool fMineBlocksOnDemand;$/;"	m	class:CChainParams
fMinimizeOnClose	src/qt/optionsmodel.h	/^    bool fMinimizeOnClose;$/;"	m	class:OptionsModel
fMinimizeToTray	src/qt/optionsmodel.h	/^    bool fMinimizeToTray;$/;"	m	class:OptionsModel
fMockDb	src/wallet/db.h	/^    bool fMockDb;$/;"	m	class:BerkeleyEnvironment
fMsgProcWake	src/net.h	/^    bool fMsgProcWake;$/;"	m	class:CConnman
fNameLookup	src/netbase.cpp	/^bool fNameLookup = DEFAULT_NAME_LOOKUP;$/;"	v
fNewRecipientAllowed	src/qt/sendcoinsdialog.h	/^    bool fNewRecipientAllowed;$/;"	m	class:SendCoinsDialog
fNodeStateStatsAvailable	src/qt/peertablemodel.h	/^    bool fNodeStateStatsAvailable;$/;"	m	struct:CNodeCombinedStats
fOverrideFeeRate	src/wallet/coincontrol.h	/^    bool fOverrideFeeRate;$/;"	m	class:CCoinControl
fPowAllowMinDifficultyBlocks	src/consensus/params.h	/^    bool fPowAllowMinDifficultyBlocks;$/;"	m	struct:Consensus::Params
fPowNoRetargeting	src/consensus/params.h	/^    bool fPowNoRetargeting;$/;"	m	struct:Consensus::Params
fPreferHeaderAndIDs	src/net_processing.cpp	/^    bool fPreferHeaderAndIDs;$/;"	m	struct:__anon89::CNodeState	file:
fPreferHeaders	src/net_processing.cpp	/^    bool fPreferHeaders;$/;"	m	struct:__anon89::CNodeState	file:
fPreferredDownload	src/net_processing.cpp	/^    bool fPreferredDownload;$/;"	m	struct:__anon89::CNodeState	file:
fProcessingQueuedTransactions	src/qt/transactiontablemodel.h	/^    bool fProcessingQueuedTransactions;$/;"	m	class:TransactionTableModel
fProvidesHeaderAndIDs	src/net_processing.cpp	/^    bool fProvidesHeaderAndIDs;$/;"	m	struct:__anon89::CNodeState	file:
fPruneMode	src/validation.cpp	/^bool fPruneMode = false;$/;"	v
fQueueNotifications	src/qt/transactiontablemodel.cpp	/^static bool fQueueNotifications = false;$/;"	v	file:
fReadOnly	src/wallet/db.h	/^    bool fReadOnly;$/;"	m	class:BerkeleyBatch
fRelayTxes	src/net.cpp	/^    bool fRelayTxes;$/;"	m	struct:NodeEvictionCandidate	file:
fRelayTxes	src/net.h	/^    bool fRelayTxes;$/;"	m	class:CNodeStats
fRelevantServices	src/net.cpp	/^    bool fRelevantServices;$/;"	m	struct:NodeEvictionCandidate	file:
fRequireStandard	src/chainparams.h	/^    bool fRequireStandard;$/;"	m	class:CChainParams
fRequireStandard	src/validation.cpp	/^bool fRequireStandard = true;$/;"	v
fSafe	src/wallet/wallet.h	/^    bool fSafe;$/;"	m	class:COutput
fShouldBan	src/net_processing.cpp	/^    bool fShouldBan;$/;"	m	struct:__anon89::CNodeState	file:
fSolvable	src/wallet/wallet.h	/^    bool fSolvable;$/;"	m	class:COutput
fSpendable	src/wallet/wallet.h	/^    bool fSpendable;$/;"	m	class:COutput
fSubtractFeeFromAmount	src/qt/coincontroldialog.cpp	/^bool CoinControlDialog::fSubtractFeeFromAmount = false;$/;"	m	class:CoinControlDialog	file:
fSubtractFeeFromAmount	src/qt/coincontroldialog.h	/^    static bool fSubtractFeeFromAmount;$/;"	m	class:CoinControlDialog
fSubtractFeeFromAmount	src/qt/walletmodel.h	/^    bool fSubtractFeeFromAmount; \/\/ memory only$/;"	m	class:SendCoinsRecipient
fSubtractFeeFromAmount	src/wallet/wallet.h	/^    bool fSubtractFeeFromAmount;$/;"	m	struct:CRecipient
fSupportsDesiredCmpctVersion	src/net_processing.cpp	/^    bool fSupportsDesiredCmpctVersion;$/;"	m	struct:__anon89::CNodeState	file:
fSyncStarted	src/net_processing.cpp	/^    bool fSyncStarted;$/;"	m	struct:__anon89::CNodeState	file:
fTimeReceivedIsTxTime	src/wallet/wallet.h	/^    unsigned int fTimeReceivedIsTxTime;$/;"	m	class:CWalletTx
fTry	src/sync.cpp	/^    bool fTry;$/;"	m	struct:CLockLocation	file:
fUseCrypto	src/wallet/crypter.h	/^    std::atomic<bool> fUseCrypto;$/;"	m	class:CCryptoKeyStore
fValid	src/key.h	/^    bool fValid;$/;"	m	class:CKey
fValidatedHeaders	src/net_processing.cpp	/^        bool fValidatedHeaders;                                  \/\/!< Whether this block has validated headers at the time of request.$/;"	m	struct:__anon88::QueuedBlock	file:
fWantsCmpctWitness	src/net_processing.cpp	/^    bool fWantsCmpctWitness;$/;"	m	struct:__anon89::CNodeState	file:
fWhitelisted	src/net.h	/^    bool fWhitelisted;$/;"	m	class:CNodeStats
f_assert	src/univalue/test/unitester.cpp	/^#define f_assert(/;"	d	file:
factor	src/qt/bitcoinunits.cpp	/^qint64 BitcoinUnits::factor(int unit)$/;"	f	class:BitcoinUnits
fail	src/policy/fees.h	/^    EstimatorBucket fail;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
fail	src/tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	s	struct:tinyformat::detail::is_convertible
fail	test/functional/wallet_importmulti.py	/^        self.log.info("Ranged descriptor import should fail without a specified range")$/;"	i
failAvg	src/policy/fees.cpp	/^    std::vector<std::vector<double>> failAvg; \/\/ failAvg[Y][X]$/;"	m	class:TxConfirmStats	file:
fail_accept	test/functional/feature_segwit.py	/^    def fail_accept(self, node, error_msg, txid, sign, redeem_script=""):$/;"	m	class:SegWitTest
failed	contrib/devtools/security-check.py	/^            failed = []$/;"	v
fails	src/test/checkqueue_tests.cpp	/^    bool fails;$/;"	m	struct:FailingCheck	file:
fake_allocated_memory	src/test/checkqueue_tests.cpp	/^    static std::atomic<size_t> fake_allocated_memory;$/;"	m	struct:MemoryCheck	file:
fake_filter_result	src/leveldb/db/c_test.c	/^static unsigned char fake_filter_result = 1;$/;"	v	file:
fclose	src/streams.h	/^    void fclose()$/;"	f	class:CAutoFile
fclose	src/streams.h	/^    void fclose()$/;"	f	class:CBufferedFile
fcntl	test/functional/test_framework/netutil.py	/^    import fcntl  # Linux only, so only import when required$/;"	i
fd	src/fs.h	/^        int fd = -1;$/;"	m	class:fsbridge::FileLock
fd_	src/leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon8::PosixFileLock	file:
fd_	src/leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
fd_limit_	src/leveldb/util/env_posix.cc	/^  Limiter fd_limit_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
fdatasync	src/leveldb/port/port_posix.h	/^#define fdatasync /;"	d
fdatasync	src/leveldb/port/port_posix.h	/^#define fdatasync(/;"	d
fe_memcmp	src/secp256k1/src/tests.c	/^int fe_memcmp(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
fe_x	src/secp256k1/src/bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon109	file:
fe_y	src/secp256k1/src/bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon109	file:
fee	src/node/psbt.h	/^    Optional<CAmount> fee;                 \/\/!< Amount of fee being paid by the transaction$/;"	m	struct:PSBTAnalysis
fee	src/qt/walletmodeltransaction.h	/^    CAmount fee;$/;"	m	class:WalletModelTransaction
feeDelta	src/txmempool.h	/^    int64_t feeDelta;          \/\/!< Used for determining the priority of the transaction for mining in a block$/;"	m	class:CTxMemPoolEntry
feeDelta	src/txmempool.h	/^    int64_t feeDelta;$/;"	m	struct:update_fee_delta
feeEstimator	src/validation.cpp	/^CBlockPolicyEstimator feeEstimator;$/;"	v
feeEstimator	src/validation.cpp	/^CTxMemPool mempool(&feeEstimator);$/;"	v
feeRate	src/txmempool.h	/^    CFeeRate feeRate;$/;"	m	struct:TxMempoolInfo
feebumper	src/wallet/feebumper.cpp	/^namespace feebumper {$/;"	n	file:
feebumper	src/wallet/feebumper.h	/^namespace feebumper {$/;"	n
feeset	src/policy/fees.h	/^    std::set<double> feeset;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
fetchBlock	contrib/linearize/linearize-data.py	/^    def fetchBlock(self, extent):$/;"	m	class:BlockDataCopier
fetchPaymentACK	src/qt/paymentserver.cpp	/^void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction)$/;"	f	class:PaymentServer
fetchRequest	src/qt/paymentserver.cpp	/^void PaymentServer::fetchRequest(const QUrl& url)$/;"	f	class:PaymentServer
fetch_all_translations	contrib/devtools/update-translations.py	/^def fetch_all_translations():$/;"	f
fetch_file	depends/funcs.mk	/^define fetch_file$/;"	m
fetch_file_inner	depends/funcs.mk	/^define fetch_file_inner$/;"	m
fflush_unlocked	src/leveldb/port/port_posix.h	/^#define fflush_unlocked /;"	d
file	src/leveldb/db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	src/leveldb/table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	src/leveldb/table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file	src/streams.h	/^    FILE* file;$/;"	m	class:CAutoFile
fileMetaMap	contrib/devtools/optimize-pngs.py	/^            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}$/;"	v
file_	src/leveldb/db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	src/leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon35::RandomAccessFileImpl	file:
file_	src/leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon35::SequentialFileImpl	file:
file_	src/leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon35::WritableFileImpl	file:
file_	src/leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon8::PosixSequentialFile	file:
file_	src/leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon8::PosixWritableFile	file:
file_	src/leveldb/util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_already_has_core_copyright	contrib/devtools/copyright_header.py	/^def file_already_has_core_copyright(file_lines):$/;"	f
file_has_dominant_style_copyright_for_holder	contrib/devtools/copyright_header.py	/^def file_has_dominant_style_copyright_for_holder(contents, holder_name):$/;"	f
file_has_hashbang	contrib/devtools/copyright_header.py	/^def file_has_hashbang(file_lines):$/;"	f
file_has_without_c_style_copyright_for_holder	contrib/devtools/copyright_header.py	/^def file_has_without_c_style_copyright_for_holder(contents, holder_name):$/;"	f
file_has_year_list_style_copyright_for_holder	contrib/devtools/copyright_header.py	/^def file_has_year_list_style_copyright_for_holder(contents, holder_name):$/;"	f
file_hash	contrib/devtools/optimize-pngs.py	/^def file_hash(filename):$/;"	f
file_map_	src/leveldb/helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon35::InMemoryEnv	file:
file_path	contrib/devtools/optimize-pngs.py	/^            file_path = os.path.join(absFolder, file)$/;"	v
file_size	src/leveldb/db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	src/leveldb/db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	src/leveldb/db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	src/leveldb/db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename	src/qt/csvmodelwriter.h	/^    QString filename;$/;"	m	class:CSVModelWriter
filename_	src/leveldb/db/fault_injection_test.cc	/^  std::string filename_;$/;"	m	struct:leveldb::__anon20::FileState	file:
filename_	src/leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
filename_	src/leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
filename_	src/leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixSequentialFile	file:
filename_	src/leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixWritableFile	file:
filename_	src/leveldb/util/env_win.cc	/^    std::string filename_;$/;"	m	class:leveldb::Win32::Win32WritableFile	file:
filenames	src/univalue/test/unitester.cpp	/^static const char *filenames[] = {$/;"	v	file:
files	contrib/devtools/circular-dependencies.py	/^files = dict()$/;"	v
files	share/qt/extract_strings_qt.py	/^files = sys.argv[1:]$/;"	v
files_	src/leveldb/db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	src/leveldb/db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest	file:
filesystem_active_	src/leveldb/db/fault_injection_test.cc	/^  bool filesystem_active_;  \/\/ Record flushes, syncs, writes$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
fill	src/prevector.h	/^    void fill(T* dst, InputIterator first, InputIterator last) {$/;"	f	class:prevector
fill	src/prevector.h	/^    void fill(T* dst, ptrdiff_t count, const T& value = T{}) {$/;"	f	class:prevector
fill_cache	src/leveldb/include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
filter	src/leveldb/table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter	src/qt/overviewpage.h	/^    std::unique_ptr<TransactionFilterProxy> filter;$/;"	m	class:OverviewPage
filterAcceptsRow	src/qt/addressbookpage.cpp	/^    bool filterAcceptsRow(int row, const QModelIndex& parent) const$/;"	f	class:final
filterAcceptsRow	src/qt/transactionfilterproxy.cpp	/^bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &sourceParent) const$/;"	f	class:TransactionFilterProxy
filter_	src/leveldb/util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest	file:
filter_block	src/leveldb/table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_data	src/leveldb/table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	src/leveldb/table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_output_indices_by_value	test/functional/interface_rest.py	/^def filter_output_indices_by_value(vouts, value):$/;"	f
filter_policy	src/leveldb/include/leveldb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	src/leveldb/db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
filter_policy_	src/leveldb/db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest	file:
filter_suffix	test/lint/lint-includes.sh	/^filter_suffix() {$/;"	f
filterbyasn	contrib/seeds/makeseeds.py	/^def filterbyasn(ips, max_per_asn, max_total):$/;"	f
filtermultiport	contrib/seeds/makeseeds.py	/^def filtermultiport(ips):$/;"	f
final	src/httpserver.cpp	/^class HTTPWorkItem final : public HTTPClosure$/;"	c	file:
final	src/index/blockfilterindex.h	/^class BlockFilterIndex final : public BaseIndex$/;"	c
final	src/index/txindex.h	/^class TxIndex final : public BaseIndex$/;"	c
final	src/init.cpp	/^class CCoinsViewErrorCatcher final : public CCoinsViewBacked$/;"	c	file:
final	src/net_processing.h	/^class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {$/;"	c
final	src/qt/addressbookpage.cpp	/^class AddressBookSortFilterProxyModel final : public QSortFilterProxyModel$/;"	c	file:
final	src/qt/macos_appnap.h	/^class CAppNapInhibitor final$/;"	c
final	src/script/descriptor.cpp	/^class AddressDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class BIP32PubkeyProvider final : public PubkeyProvider$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class ComboDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class ConstPubkeyProvider final : public PubkeyProvider$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class MultisigDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class OriginPubkeyProvider final : public PubkeyProvider$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class PKDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class PKHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class RawDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class SHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class WPKHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/descriptor.cpp	/^class WSHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	src/script/sign.cpp	/^class DummySignatureChecker final : public BaseSignatureChecker$/;"	c	namespace:__anon83	file:
final	src/script/sign.cpp	/^class DummySignatureCreator final : public BaseSignatureCreator {$/;"	c	namespace:__anon83	file:
final	src/script/sign.cpp	/^class SignatureExtractorChecker final : public BaseSignatureChecker$/;"	c	file:
final	src/script/sign.h	/^struct FlatSigningProvider final : public SigningProvider$/;"	s
final	src/txdb.h	/^class CCoinsViewDB final : public CCoinsView$/;"	c
final	src/util/bytevectorhash.h	/^class ByteVectorHash final$/;"	c
final	src/wallet/db.h	/^    class SafeDbt final$/;"	c	class:BerkeleyBatch
final	src/wallet/wallet.h	/^class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notifications$/;"	c
final	src/wallet/walletutil.h	/^class WalletLocation final$/;"	c
final	src/zmq/zmqnotificationinterface.h	/^class CZMQNotificationInterface final : public CValidationInterface$/;"	c
final_script_sig	src/psbt.h	/^    CScript final_script_sig;$/;"	m	struct:PSBTInput
final_script_witness	src/psbt.h	/^    CScriptWitness final_script_witness;$/;"	m	struct:PSBTInput
finalize	src/univalue/lib/univalue_utffilter.h	/^    bool finalize()$/;"	f	class:JSONUTF8StringFilter
finalizepsbt	src/rpc/rawtransaction.cpp	/^UniValue finalizepsbt(const JSONRPCRequest& request)$/;"	f
find	src/indirectmap.h	/^    const_iterator find(const K& key) const         { return m.find(&key); }$/;"	f	class:indirectmap
find	src/indirectmap.h	/^    iterator find(const K& key)                     { return m.find(&key); }$/;"	f	class:indirectmap
find	src/limitedmap.h	/^    const_iterator find(const key_type& k) const { return map.find(k); }$/;"	f	class:limitedmap
findKey	src/univalue/lib/univalue.cpp	/^bool UniValue::findKey(const std::string& key, size_t& retIdx) const$/;"	f	class:UniValue
findSighashFlags	src/bitcoin-tx.cpp	/^static bool findSighashFlags(int& flags, const std::string& flagStr)$/;"	f	file:
findStartupItemInList	src/qt/guiutil.cpp	/^LSSharedFileListItemRef findStartupItemInList(CFArrayRef listSnapshot, LSSharedFileListRef list, CFURLRef findUrl)$/;"	f	namespace:GUIUtil
find_format_specifiers	contrib/devtools/update-translations.py	/^def find_format_specifiers(s):$/;"	f
find_latest_squash	test/lint/git-subtree-check.sh	/^find_latest_squash()$/;"	f
find_latest_test_dir	test/functional/combine_logs.py	/^def find_latest_test_dir():$/;"	f
find_output	test/functional/test_framework/util.py	/^def find_output(node, txid, amount, *, blockhash=None):$/;"	f
find_spendable_utxo	test/functional/feature_segwit.py	/^def find_spendable_utxo(node, min_value):$/;"	f
find_value	src/univalue/lib/univalue.cpp	/^const UniValue& find_value(const UniValue& obj, const std::string& name)$/;"	f
find_vout_for_address	test/functional/test_framework/util.py	/^def find_vout_for_address(node, txid, addr):$/;"	f
fingerprint	src/script/sign.h	/^    unsigned char fingerprint[4]; \/\/!< First 32 bits of the Hash160 of the public key at the root of the path$/;"	m	struct:KeyOriginInfo
finish	src/qt/splashscreen.cpp	/^void SplashScreen::finish()$/;"	f	class:SplashScreen
finish_	src/leveldb/db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon19::Stats	file:
finished_	src/leveldb/table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
firstAddrnServices	test/functional/p2p_node_network_limited.py	/^    firstAddrnServices = 0$/;"	v	class:P2PIgnoreInv
fixedPitchFont	src/qt/guiutil.cpp	/^QFont fixedPitchFont()$/;"	f	namespace:GUIUtil
fixup	src/qt/bitcoinamountfield.cpp	/^    void fixup(QString &input) const$/;"	f	class:AmountSpinBox
flag	src/logging.cpp	/^    BCLog::LogFlags flag;$/;"	m	struct:CLogCategoryDesc	file:
flag	src/threadinterrupt.h	/^    std::atomic<bool> flag;$/;"	m	class:CThreadInterrupt
flag	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal flag")$/;"	i
flag	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal flag")$/;"	i
flagStr	src/bitcoin-tx.cpp	/^    const char *flagStr;$/;"	m	struct:__anon87	file:
flags	src/bitcoin-tx.cpp	/^    int flags;$/;"	m	struct:__anon87	file:
flags	src/coins.h	/^    unsigned char flags;$/;"	m	struct:CCoinsCacheEntry
flags	src/qt/addresstablemodel.cpp	/^Qt::ItemFlags AddressTableModel::flags(const QModelIndex &index) const$/;"	f	class:AddressTableModel
flags	src/qt/bantablemodel.cpp	/^Qt::ItemFlags BanTableModel::flags(const QModelIndex &index) const$/;"	f	class:BanTableModel
flags	src/qt/peertablemodel.cpp	/^Qt::ItemFlags PeerTableModel::flags(const QModelIndex &index) const$/;"	f	class:PeerTableModel
flags	src/qt/recentrequeststablemodel.cpp	/^Qt::ItemFlags RecentRequestsTableModel::flags(const QModelIndex &index) const$/;"	f	class:RecentRequestsTableModel
flags	src/test/script_tests.cpp	/^    int flags;$/;"	m	class:__anon58::TestBuilder	file:
flist_	src/leveldb/db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
fn	src/secp256k1/src/util.h	/^    void (*fn)(const char *text, void* data);$/;"	m	struct:__anon107
fname_	src/leveldb/util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
fnmatch	contrib/devtools/copyright_header.py	/^import fnmatch$/;"	i
focusInEvent	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::focusInEvent(QFocusEvent *evt)$/;"	f	class:QValidatedLineEdit
focusOutEvent	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::focusOutEvent(QFocusEvent *evt)$/;"	f	class:QValidatedLineEdit
focusTransaction	src/qt/transactionview.cpp	/^void TransactionView::focusTransaction(const QModelIndex &idx)$/;"	f	class:TransactionView
focusTransaction	src/qt/transactionview.cpp	/^void TransactionView::focusTransaction(const uint256& txid)$/;"	f	class:TransactionView
folders	contrib/devtools/optimize-pngs.py	/^folders = ["src\/qt\/res\/movies", "src\/qt\/res\/icons", "share\/pixmaps"]$/;"	v
fontBigger	src/qt/rpcconsole.cpp	/^void RPCConsole::fontBigger()$/;"	f	class:RPCConsole
fontSizeSettingsKey	src/qt/rpcconsole.cpp	/^const char fontSizeSettingsKey[] = "consoleFontSize";$/;"	v
fontSmaller	src/qt/rpcconsole.cpp	/^void RPCConsole::fontSmaller()$/;"	f	class:RPCConsole
footer	src/bench/bench.cpp	/^void benchmark::ConsolePrinter::footer() {}$/;"	f	class:benchmark::ConsolePrinter
footer	src/bench/bench.cpp	/^void benchmark::PlotlyPrinter::footer()$/;"	f	class:benchmark::PlotlyPrinter
fopen	src/fs.cpp	/^FILE *fopen(const fs::path& p, const char *mode)$/;"	f	namespace:fsbridge
for	test/functional/wallet_import_rescan.py	/^            self.log.info('Run import for variant {}'.format(variant))$/;"	i
force_error_	src/leveldb/db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
format	src/qt/bitcoinunits.cpp	/^QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators)$/;"	f	class:BitcoinUnits
format	src/tinyformat.h	/^        void format(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
format	src/tinyformat.h	/^inline std::string format(const char* fmt)$/;"	f	namespace:tinyformat
format	src/tinyformat.h	/^inline void format(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat
format	src/tinyformat.h	/^std::string format(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	src/tinyformat.h	/^std::string format(const std::string &fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	src/tinyformat.h	/^void format(std::ostream& out, const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
formatBitcoinURI	src/qt/guiutil.cpp	/^QString formatBitcoinURI(const SendCoinsRecipient &info)$/;"	f	namespace:GUIUtil
formatBytes	src/qt/guiutil.cpp	/^QString formatBytes(uint64_t bytes)$/;"	f	namespace:GUIUtil
formatClientStartupTime	src/qt/clientmodel.cpp	/^QString ClientModel::formatClientStartupTime() const$/;"	f	class:ClientModel
formatDurationStr	src/qt/guiutil.cpp	/^QString formatDurationStr(int secs)$/;"	f	namespace:GUIUtil
formatFullVersion	src/qt/clientmodel.cpp	/^QString ClientModel::formatFullVersion() const$/;"	f	class:ClientModel
formatHtmlWithUnit	src/qt/bitcoinunits.cpp	/^QString BitcoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)$/;"	f	class:BitcoinUnits
formatImpl	src/tinyformat.h	/^        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
formatImpl	src/tinyformat.h	/^inline void formatImpl(std::ostream& out, const char* fmt,$/;"	f	namespace:tinyformat::detail
formatNiceTimeOffset	src/qt/guiutil.cpp	/^QString formatNiceTimeOffset(qint64 secs)$/;"	f	namespace:GUIUtil
formatPingTime	src/qt/guiutil.cpp	/^QString formatPingTime(double dPingTime)$/;"	f	namespace:GUIUtil
formatServicesStr	src/qt/guiutil.cpp	/^QString formatServicesStr(quint64 mask)$/;"	f	namespace:GUIUtil
formatSubVersion	src/qt/clientmodel.cpp	/^QString ClientModel::formatSubVersion() const$/;"	f	class:ClientModel
formatTimeOffset	src/qt/guiutil.cpp	/^QString formatTimeOffset(int64_t nTimeOffset)$/;"	f	namespace:GUIUtil
formatTooltip	src/qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTooltip(const TransactionRecord *rec) const$/;"	f	class:TransactionTableModel
formatTruncated	src/tinyformat.h	/^inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)$/;"	f	namespace:tinyformat::detail
formatTxAmount	src/qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxAmount(const TransactionRecord *wtx, bool showUnconfirmed, BitcoinUnits::SeparatorStyle separators) const$/;"	f	class:TransactionTableModel
formatTxDate	src/qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxDate(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxStatus	src/qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxToAddress	src/qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const$/;"	f	class:TransactionTableModel
formatTxType	src/qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatValue	src/tinyformat.h	/^inline void formatValue(std::ostream& out, const char* \/*fmtBegin*\/,$/;"	f	namespace:tinyformat
formatValueAsType	src/tinyformat.h	/^struct formatValueAsType$/;"	s	namespace:tinyformat::detail
formatValueAsType	src/tinyformat.h	/^struct formatValueAsType<T,fmtT,true>$/;"	s	namespace:tinyformat::detail
formatWithUnit	src/qt/bitcoinunits.cpp	/^QString BitcoinUnits::formatWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)$/;"	f	class:BitcoinUnits
formatZeroIntegerWorkaround	src/tinyformat.h	/^struct formatZeroIntegerWorkaround$/;"	s	namespace:tinyformat::detail
formatZeroIntegerWorkaround	src/tinyformat.h	/^struct formatZeroIntegerWorkaround<T,true>$/;"	s	namespace:tinyformat::detail
format_error	src/tinyformat.h	/^    explicit format_error(const std::string &what): std::runtime_error(what) {$/;"	f	class:tinyformat::format_error
format_error	src/tinyformat.h	/^class format_error: public std::runtime_error$/;"	c	namespace:tinyformat
found	src/rpc/mining.cpp	/^    bool found;$/;"	m	class:submitblock_StateCatcher	file:
fread_unlocked	src/leveldb/port/port_posix.h	/^#define fread_unlocked /;"	d
fread_unlocked	src/leveldb/port/port_win.h	/^#define fread_unlocked /;"	d
free	src/support/lockedpool.cpp	/^void Arena::free(void *ptr)$/;"	f	class:Arena
free	src/support/lockedpool.cpp	/^void LockedPool::free(void *ptr)$/;"	f	class:LockedPool
free	src/support/lockedpool.h	/^        size_t free;$/;"	m	struct:Arena::Stats
free	src/support/lockedpool.h	/^        size_t free;$/;"	m	struct:LockedPool::Stats
from	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a 1-of-2 bare multisig from descriptor")$/;"	i
from	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2pkh address from descriptor")$/;"	i
from	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
from	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
fromPeer	src/net_processing.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
fromPeer	src/test/denialofservice_tests.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
from_absolute	test/functional/test_framework/messages.py	/^    def from_absolute(self, absolute_indexes):$/;"	m	class:BlockTransactionsRequest
from_hex	src/crypto/ctaes/test.c	/^static void from_hex(unsigned char* data, int len, const char* hex) {$/;"	f	file:
front	src/prevector.h	/^    T& front() {$/;"	f	class:prevector
front	src/prevector.h	/^    const T& front() const {$/;"	f	class:prevector
fsbridge	src/fs.cpp	/^namespace fsbridge {$/;"	n	file:
fsbridge	src/fs.h	/^namespace fsbridge {$/;"	n
full_build_os	depends/Makefile	/^full_build_os:=$(subst $(build_arch)-$(build_vendor)-,,$(build))$/;"	m
full_host_os	depends/Makefile	/^full_host_os:=$(subst $(host_arch)-$(host_vendor)-,,$(canonical_host))$/;"	m
func	src/bench/bench.h	/^        BenchFunction func;$/;"	m	struct:benchmark::BenchRunner::Bench
func	src/httpserver.cpp	/^    HTTPRequestHandler func;$/;"	m	class:final	file:
func	src/leveldb/util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon5::Test	file:
func	src/qt/rpcconsole.cpp	/^    std::function<void()> func;$/;"	m	class:QtRPCTimerBase	file:
func_add_hook	build-aux/ltmain.sh	/^func_add_hook ()$/;"	f
func_add_hook	libtool	/^func_add_hook ()$/;"	f
func_add_hook	src/secp256k1/build-aux/ltmain.sh	/^func_add_hook ()$/;"	f
func_add_hook	src/secp256k1/libtool	/^func_add_hook ()$/;"	f
func_add_hook	src/univalue/build-aux/ltmain.sh	/^func_add_hook ()$/;"	f
func_add_hook	src/univalue/libtool	/^func_add_hook ()$/;"	f
func_append	build-aux/ltmain.sh	/^  func_append ()$/;"	f
func_append	libtool	/^  func_append ()$/;"	f
func_append	src/secp256k1/build-aux/ltmain.sh	/^  func_append ()$/;"	f
func_append	src/secp256k1/libtool	/^  func_append ()$/;"	f
func_append	src/univalue/build-aux/ltmain.sh	/^  func_append ()$/;"	f
func_append	src/univalue/libtool	/^  func_append ()$/;"	f
func_append_quoted	build-aux/ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_quoted	libtool	/^  func_append_quoted ()$/;"	f
func_append_quoted	src/secp256k1/build-aux/ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_quoted	src/secp256k1/libtool	/^  func_append_quoted ()$/;"	f
func_append_quoted	src/univalue/build-aux/ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_quoted	src/univalue/libtool	/^  func_append_quoted ()$/;"	f
func_append_uniq	build-aux/ltmain.sh	/^func_append_uniq ()$/;"	f
func_append_uniq	libtool	/^func_append_uniq ()$/;"	f
func_append_uniq	src/secp256k1/build-aux/ltmain.sh	/^func_append_uniq ()$/;"	f
func_append_uniq	src/secp256k1/libtool	/^func_append_uniq ()$/;"	f
func_append_uniq	src/univalue/build-aux/ltmain.sh	/^func_append_uniq ()$/;"	f
func_append_uniq	src/univalue/libtool	/^func_append_uniq ()$/;"	f
func_arith	build-aux/ltmain.sh	/^  func_arith ()$/;"	f
func_arith	libtool	/^  func_arith ()$/;"	f
func_arith	src/secp256k1/build-aux/ltmain.sh	/^  func_arith ()$/;"	f
func_arith	src/secp256k1/libtool	/^  func_arith ()$/;"	f
func_arith	src/univalue/build-aux/ltmain.sh	/^  func_arith ()$/;"	f
func_arith	src/univalue/libtool	/^  func_arith ()$/;"	f
func_cc_basename	config.status	/^func_cc_basename ()$/;"	f
func_cc_basename	configure	/^func_cc_basename ()$/;"	f
func_cc_basename	libtool	/^func_cc_basename ()$/;"	f
func_cc_basename	src/secp256k1/config.status	/^func_cc_basename ()$/;"	f
func_cc_basename	src/secp256k1/configure	/^func_cc_basename ()$/;"	f
func_cc_basename	src/secp256k1/libtool	/^func_cc_basename ()$/;"	f
func_cc_basename	src/univalue/config.status	/^func_cc_basename ()$/;"	f
func_cc_basename	src/univalue/configure	/^func_cc_basename ()$/;"	f
func_cc_basename	src/univalue/libtool	/^func_cc_basename ()$/;"	f
func_check_prog_grep	build-aux/ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	libtool	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	src/secp256k1/build-aux/ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	src/secp256k1/libtool	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	src/univalue/build-aux/ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	src/univalue/libtool	/^  func_check_prog_grep ()$/;"	f
func_check_prog_sed	build-aux/ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	libtool	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	src/secp256k1/build-aux/ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	src/secp256k1/libtool	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	src/univalue/build-aux/ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	src/univalue/libtool	/^  func_check_prog_sed ()$/;"	f
func_check_version_match	build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	src/secp256k1/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	src/secp256k1/libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	src/univalue/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	src/univalue/libtool	/^func_check_version_match ()$/;"	f
func_cl_dashL	build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashL	src/secp256k1/build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashL	src/univalue/build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_dashl	src/secp256k1/build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_dashl	src/univalue/build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_cl_wrapper	src/secp256k1/build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_cl_wrapper	src/univalue/build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_config	build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	libtool	/^func_config ()$/;"	f
func_config	src/secp256k1/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	src/secp256k1/libtool	/^func_config ()$/;"	f
func_config	src/univalue/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	src/univalue/libtool	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	src/secp256k1/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	src/univalue/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	src/secp256k1/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	src/univalue/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	src/secp256k1/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	src/univalue/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	src/secp256k1/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	src/secp256k1/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	src/univalue/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	src/univalue/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	src/secp256k1/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	src/univalue/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	src/secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	src/secp256k1/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	src/univalue/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	src/univalue/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	src/secp256k1/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	src/univalue/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	src/secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	src/secp256k1/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	src/univalue/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	src/univalue/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	src/secp256k1/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	src/univalue/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	src/secp256k1/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	src/secp256k1/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	src/univalue/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	src/univalue/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	src/secp256k1/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	src/univalue/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	src/univalue/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	src/secp256k1/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	src/univalue/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	src/secp256k1/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	src/univalue/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	src/univalue/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	src/secp256k1/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	src/univalue/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	src/univalue/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	src/secp256k1/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	src/univalue/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	src/secp256k1/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	src/univalue/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	src/univalue/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	src/secp256k1/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	src/univalue/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	src/univalue/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	src/secp256k1/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	src/secp256k1/libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	src/univalue/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	src/univalue/libtool	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	src/secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	src/secp256k1/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	src/univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	src/univalue/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	src/secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	src/secp256k1/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	src/univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	src/univalue/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	src/secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	src/secp256k1/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	src/univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	src/univalue/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	src/secp256k1/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	src/secp256k1/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	src/univalue/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	src/univalue/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	src/secp256k1/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	src/secp256k1/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	src/univalue/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	src/univalue/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	libtool	/^func_cygpath ()$/;"	f
func_cygpath	src/secp256k1/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	src/secp256k1/libtool	/^func_cygpath ()$/;"	f
func_cygpath	src/univalue/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	src/univalue/libtool	/^func_cygpath ()$/;"	f
func_dll_def_p	build-aux/ltmain.sh	/^func_dll_def_p ()$/;"	f
func_dll_def_p	libtool	/^func_dll_def_p ()$/;"	f
func_dll_def_p	src/secp256k1/build-aux/ltmain.sh	/^func_dll_def_p ()$/;"	f
func_dll_def_p	src/secp256k1/libtool	/^func_dll_def_p ()$/;"	f
func_dll_def_p	src/univalue/build-aux/ltmain.sh	/^func_dll_def_p ()$/;"	f
func_dll_def_p	src/univalue/libtool	/^func_dll_def_p ()$/;"	f
func_echo	build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	libtool	/^func_echo ()$/;"	f
func_echo	src/secp256k1/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	src/secp256k1/libtool	/^func_echo ()$/;"	f
func_echo	src/univalue/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	src/univalue/libtool	/^func_echo ()$/;"	f
func_echo_all	build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_echo_all	libtool	/^func_echo_all ()$/;"	f
func_echo_all	src/secp256k1/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	src/secp256k1/configure	/^func_echo_all ()$/;"	f
func_echo_all	src/secp256k1/libtool	/^func_echo_all ()$/;"	f
func_echo_all	src/univalue/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	src/univalue/configure	/^func_echo_all ()$/;"	f
func_echo_all	src/univalue/libtool	/^func_echo_all ()$/;"	f
func_echo_infix_1	build-aux/ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	libtool	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	src/secp256k1/build-aux/ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	src/secp256k1/libtool	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	src/univalue/build-aux/ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	src/univalue/libtool	/^func_echo_infix_1 ()$/;"	f
func_emit_cwrapperexe_src	build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	src/secp256k1/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	src/secp256k1/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	src/univalue/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	src/univalue/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	src/secp256k1/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	src/secp256k1/libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	src/univalue/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	src/univalue/libtool	/^func_emit_wrapper ()$/;"	f
func_enable_tag	build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	src/secp256k1/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	src/secp256k1/libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	src/univalue/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	src/univalue/libtool	/^func_enable_tag ()$/;"	f
func_error	build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	libtool	/^func_error ()$/;"	f
func_error	src/secp256k1/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	src/secp256k1/libtool	/^func_error ()$/;"	f
func_error	src/univalue/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	src/univalue/libtool	/^func_error ()$/;"	f
func_exec_program	build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	libtool	/^func_exec_program ()$/;"	f
func_exec_program	src/secp256k1/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	src/secp256k1/libtool	/^func_exec_program ()$/;"	f
func_exec_program	src/univalue/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	src/univalue/libtool	/^func_exec_program ()$/;"	f
func_exec_program_core	build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	src/secp256k1/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	src/secp256k1/libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	src/univalue/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	src/univalue/libtool	/^func_exec_program_core ()$/;"	f
func_executable_p	build-aux/ltmain.sh	/^func_executable_p ()$/;"	f
func_executable_p	libtool	/^func_executable_p ()$/;"	f
func_executable_p	src/secp256k1/build-aux/ltmain.sh	/^func_executable_p ()$/;"	f
func_executable_p	src/secp256k1/libtool	/^func_executable_p ()$/;"	f
func_executable_p	src/univalue/build-aux/ltmain.sh	/^func_executable_p ()$/;"	f
func_executable_p	src/univalue/libtool	/^func_executable_p ()$/;"	f
func_execute_cmds	build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	src/secp256k1/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	src/secp256k1/libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	src/univalue/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	src/univalue/libtool	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	src/secp256k1/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	src/secp256k1/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	src/univalue/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	src/univalue/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	src/secp256k1/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	src/secp256k1/libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	src/univalue/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	src/univalue/libtool	/^func_extract_archives ()$/;"	f
func_fallback_echo	build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/secp256k1/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/secp256k1/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/secp256k1/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	src/secp256k1/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/secp256k1/libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/univalue/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/univalue/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/univalue/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	src/univalue/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	src/univalue/libtool	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	src/secp256k1/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	src/secp256k1/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	src/univalue/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	src/univalue/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_error	build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	src/secp256k1/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	src/secp256k1/libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	src/univalue/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	src/univalue/libtool	/^func_fatal_error ()$/;"	f
func_fatal_help	build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	src/secp256k1/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	src/secp256k1/libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	src/univalue/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	src/univalue/libtool	/^func_fatal_help ()$/;"	f
func_features	build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	libtool	/^func_features ()$/;"	f
func_features	src/secp256k1/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	src/secp256k1/libtool	/^func_features ()$/;"	f
func_features	src/univalue/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	src/univalue/libtool	/^func_features ()$/;"	f
func_file_conv	build-aux/compile	/^func_file_conv ()$/;"	f
func_file_conv	src/secp256k1/build-aux/compile	/^func_file_conv ()$/;"	f
func_file_conv	src/univalue/build-aux/compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	src/secp256k1/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	src/secp256k1/libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	src/univalue/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	src/univalue/libtool	/^func_generate_dlsyms ()$/;"	f
func_generated_by_libtool_p	build-aux/ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	libtool	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	src/secp256k1/build-aux/ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	src/secp256k1/libtool	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	src/univalue/build-aux/ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	src/univalue/libtool	/^func_generated_by_libtool_p ()$/;"	f
func_grep	build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	libtool	/^func_grep ()$/;"	f
func_grep	src/secp256k1/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	src/secp256k1/libtool	/^func_grep ()$/;"	f
func_grep	src/univalue/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	src/univalue/libtool	/^func_grep ()$/;"	f
func_help	build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	libtool	/^func_help ()$/;"	f
func_help	src/secp256k1/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	src/secp256k1/libtool	/^func_help ()$/;"	f
func_help	src/univalue/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	src/univalue/libtool	/^func_help ()$/;"	f
func_hookable	build-aux/ltmain.sh	/^func_hookable ()$/;"	f
func_hookable	libtool	/^func_hookable ()$/;"	f
func_hookable	src/secp256k1/build-aux/ltmain.sh	/^func_hookable ()$/;"	f
func_hookable	src/secp256k1/libtool	/^func_hookable ()$/;"	f
func_hookable	src/univalue/build-aux/ltmain.sh	/^func_hookable ()$/;"	f
func_hookable	src/univalue/libtool	/^func_hookable ()$/;"	f
func_infer_tag	build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	src/secp256k1/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	src/secp256k1/libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	src/univalue/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	src/univalue/libtool	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	src/secp256k1/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	src/secp256k1/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	src/univalue/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	src/univalue/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	src/secp256k1/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	src/secp256k1/libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	src/univalue/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	src/univalue/libtool	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	src/secp256k1/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	src/secp256k1/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	src/univalue/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	src/univalue/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_len	build-aux/ltmain.sh	/^  func_len ()$/;"	f
func_len	libtool	/^  func_len ()$/;"	f
func_len	src/secp256k1/build-aux/ltmain.sh	/^  func_len ()$/;"	f
func_len	src/secp256k1/libtool	/^  func_len ()$/;"	f
func_len	src/univalue/build-aux/ltmain.sh	/^  func_len ()$/;"	f
func_len	src/univalue/libtool	/^  func_len ()$/;"	f
func_lo2o	build-aux/ltmain.sh	/^  func_lo2o ()$/;"	f
func_lo2o	libtool	/^  func_lo2o ()$/;"	f
func_lo2o	src/secp256k1/build-aux/ltmain.sh	/^  func_lo2o ()$/;"	f
func_lo2o	src/secp256k1/libtool	/^  func_lo2o ()$/;"	f
func_lo2o	src/univalue/build-aux/ltmain.sh	/^  func_lo2o ()$/;"	f
func_lo2o	src/univalue/libtool	/^  func_lo2o ()$/;"	f
func_lt_dump_args	build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	src/secp256k1/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	src/secp256k1/libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	src/univalue/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	src/univalue/libtool	/^func_lt_dump_args ()$/;"	f
func_lt_ver	build-aux/ltmain.sh	/^func_lt_ver ()$/;"	f
func_lt_ver	libtool	/^func_lt_ver ()$/;"	f
func_lt_ver	src/secp256k1/build-aux/ltmain.sh	/^func_lt_ver ()$/;"	f
func_lt_ver	src/secp256k1/libtool	/^func_lt_ver ()$/;"	f
func_lt_ver	src/univalue/build-aux/ltmain.sh	/^func_lt_ver ()$/;"	f
func_lt_ver	src/univalue/libtool	/^func_lt_ver ()$/;"	f
func_ltwrapper_executable_p	build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	src/secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	src/secp256k1/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	src/univalue/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	src/univalue/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	src/secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	src/secp256k1/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	src/univalue/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	src/univalue/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	src/secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	src/secp256k1/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	src/univalue/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	src/univalue/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	src/secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	src/secp256k1/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	src/univalue/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	src/univalue/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	src/secp256k1/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	src/secp256k1/libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	src/univalue/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	src/univalue/libtool	/^func_missing_arg ()$/;"	f
func_mkdir_p	build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	src/secp256k1/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	src/secp256k1/libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	src/univalue/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	src/univalue/libtool	/^func_mkdir_p ()$/;"	f
func_mktempdir	build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	src/secp256k1/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	src/secp256k1/libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	src/univalue/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	src/univalue/libtool	/^func_mktempdir ()$/;"	f
func_mode_compile	build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	src/secp256k1/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	src/secp256k1/libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	src/univalue/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	src/univalue/libtool	/^func_mode_compile ()$/;"	f
func_mode_execute	build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	src/secp256k1/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	src/secp256k1/libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	src/univalue/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	src/univalue/libtool	/^func_mode_execute ()$/;"	f
func_mode_finish	build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	src/secp256k1/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	src/secp256k1/libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	src/univalue/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	src/univalue/libtool	/^func_mode_finish ()$/;"	f
func_mode_help	build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	libtool	/^func_mode_help ()$/;"	f
func_mode_help	src/secp256k1/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	src/secp256k1/libtool	/^func_mode_help ()$/;"	f
func_mode_help	src/univalue/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	src/univalue/libtool	/^func_mode_help ()$/;"	f
func_mode_install	build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	libtool	/^func_mode_install ()$/;"	f
func_mode_install	src/secp256k1/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	src/secp256k1/libtool	/^func_mode_install ()$/;"	f
func_mode_install	src/univalue/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	src/univalue/libtool	/^func_mode_install ()$/;"	f
func_mode_link	build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	libtool	/^func_mode_link ()$/;"	f
func_mode_link	src/secp256k1/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	src/secp256k1/libtool	/^func_mode_link ()$/;"	f
func_mode_link	src/univalue/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	src/univalue/libtool	/^func_mode_link ()$/;"	f
func_mode_uninstall	build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	src/secp256k1/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	src/secp256k1/libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	src/univalue/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	src/univalue/libtool	/^func_mode_uninstall ()$/;"	f
func_munge_path_list	config.status	/^func_munge_path_list ()$/;"	f
func_munge_path_list	configure	/^func_munge_path_list ()$/;"	f
func_munge_path_list	libtool	/^func_munge_path_list ()$/;"	f
func_munge_path_list	src/secp256k1/config.status	/^func_munge_path_list ()$/;"	f
func_munge_path_list	src/secp256k1/configure	/^func_munge_path_list ()$/;"	f
func_munge_path_list	src/secp256k1/libtool	/^func_munge_path_list ()$/;"	f
func_munge_path_list	src/univalue/config.status	/^func_munge_path_list ()$/;"	f
func_munge_path_list	src/univalue/configure	/^func_munge_path_list ()$/;"	f
func_munge_path_list	src/univalue/libtool	/^func_munge_path_list ()$/;"	f
func_normal_abspath	build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	src/secp256k1/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	src/secp256k1/libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	src/univalue/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	src/univalue/libtool	/^func_normal_abspath ()$/;"	f
func_notquiet	build-aux/ltmain.sh	/^func_notquiet ()$/;"	f
func_notquiet	libtool	/^func_notquiet ()$/;"	f
func_notquiet	src/secp256k1/build-aux/ltmain.sh	/^func_notquiet ()$/;"	f
func_notquiet	src/secp256k1/libtool	/^func_notquiet ()$/;"	f
func_notquiet	src/univalue/build-aux/ltmain.sh	/^func_notquiet ()$/;"	f
func_notquiet	src/univalue/libtool	/^func_notquiet ()$/;"	f
func_options	build-aux/ltmain.sh	/^func_options ()$/;"	f
func_options	libtool	/^func_options ()$/;"	f
func_options	src/secp256k1/build-aux/ltmain.sh	/^func_options ()$/;"	f
func_options	src/secp256k1/libtool	/^func_options ()$/;"	f
func_options	src/univalue/build-aux/ltmain.sh	/^func_options ()$/;"	f
func_options	src/univalue/libtool	/^func_options ()$/;"	f
func_options_prep	build-aux/ltmain.sh	/^func_options_prep ()$/;"	f
func_options_prep	libtool	/^func_options_prep ()$/;"	f
func_options_prep	src/secp256k1/build-aux/ltmain.sh	/^func_options_prep ()$/;"	f
func_options_prep	src/secp256k1/libtool	/^func_options_prep ()$/;"	f
func_options_prep	src/univalue/build-aux/ltmain.sh	/^func_options_prep ()$/;"	f
func_options_prep	src/univalue/libtool	/^func_options_prep ()$/;"	f
func_parse_lt_options	build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	src/secp256k1/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	src/secp256k1/libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	src/univalue/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	src/univalue/libtool	/^func_parse_lt_options ()$/;"	f
func_parse_options	build-aux/ltmain.sh	/^func_parse_options ()$/;"	f
func_parse_options	libtool	/^func_parse_options ()$/;"	f
func_parse_options	src/secp256k1/build-aux/ltmain.sh	/^func_parse_options ()$/;"	f
func_parse_options	src/secp256k1/libtool	/^func_parse_options ()$/;"	f
func_parse_options	src/univalue/build-aux/ltmain.sh	/^func_parse_options ()$/;"	f
func_parse_options	src/univalue/libtool	/^func_parse_options ()$/;"	f
func_path_progs	build-aux/ltmain.sh	/^func_path_progs ()$/;"	f
func_path_progs	libtool	/^func_path_progs ()$/;"	f
func_path_progs	src/secp256k1/build-aux/ltmain.sh	/^func_path_progs ()$/;"	f
func_path_progs	src/secp256k1/libtool	/^func_path_progs ()$/;"	f
func_path_progs	src/univalue/build-aux/ltmain.sh	/^func_path_progs ()$/;"	f
func_path_progs	src/univalue/libtool	/^func_path_progs ()$/;"	f
func_quote_for_eval	build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	src/secp256k1/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	src/secp256k1/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	src/univalue/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	src/univalue/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	src/secp256k1/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	src/secp256k1/libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	src/univalue/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	src/univalue/libtool	/^func_quote_for_expand ()$/;"	f
func_relative_path	build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	libtool	/^func_relative_path ()$/;"	f
func_relative_path	src/secp256k1/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	src/secp256k1/libtool	/^func_relative_path ()$/;"	f
func_relative_path	src/univalue/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	src/univalue/libtool	/^func_relative_path ()$/;"	f
func_remove_hook	build-aux/ltmain.sh	/^func_remove_hook ()$/;"	f
func_remove_hook	libtool	/^func_remove_hook ()$/;"	f
func_remove_hook	src/secp256k1/build-aux/ltmain.sh	/^func_remove_hook ()$/;"	f
func_remove_hook	src/secp256k1/libtool	/^func_remove_hook ()$/;"	f
func_remove_hook	src/univalue/build-aux/ltmain.sh	/^func_remove_hook ()$/;"	f
func_remove_hook	src/univalue/libtool	/^func_remove_hook ()$/;"	f
func_replace_sysroot	build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	src/secp256k1/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	src/secp256k1/libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	src/univalue/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	src/univalue/libtool	/^func_replace_sysroot ()$/;"	f
func_require_term_colors	build-aux/ltmain.sh	/^func_require_term_colors ()$/;"	f
func_require_term_colors	libtool	/^func_require_term_colors ()$/;"	f
func_require_term_colors	src/secp256k1/build-aux/ltmain.sh	/^func_require_term_colors ()$/;"	f
func_require_term_colors	src/secp256k1/libtool	/^func_require_term_colors ()$/;"	f
func_require_term_colors	src/univalue/build-aux/ltmain.sh	/^func_require_term_colors ()$/;"	f
func_require_term_colors	src/univalue/libtool	/^func_require_term_colors ()$/;"	f
func_resolve_sysroot	build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	src/secp256k1/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	src/secp256k1/libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	src/univalue/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	src/univalue/libtool	/^func_resolve_sysroot ()$/;"	f
func_run_hooks	build-aux/ltmain.sh	/^func_run_hooks ()$/;"	f
func_run_hooks	libtool	/^func_run_hooks ()$/;"	f
func_run_hooks	src/secp256k1/build-aux/ltmain.sh	/^func_run_hooks ()$/;"	f
func_run_hooks	src/secp256k1/libtool	/^func_run_hooks ()$/;"	f
func_run_hooks	src/univalue/build-aux/ltmain.sh	/^func_run_hooks ()$/;"	f
func_run_hooks	src/univalue/libtool	/^func_run_hooks ()$/;"	f
func_show_eval	build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	libtool	/^func_show_eval ()$/;"	f
func_show_eval	src/secp256k1/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	src/secp256k1/libtool	/^func_show_eval ()$/;"	f
func_show_eval	src/univalue/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	src/univalue/libtool	/^func_show_eval ()$/;"	f
func_show_eval_locale	build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	src/secp256k1/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	src/secp256k1/libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	src/univalue/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	src/univalue/libtool	/^func_show_eval_locale ()$/;"	f
func_sort_ver	build-aux/ltmain.sh	/^func_sort_ver ()$/;"	f
func_sort_ver	libtool	/^func_sort_ver ()$/;"	f
func_sort_ver	src/secp256k1/build-aux/ltmain.sh	/^func_sort_ver ()$/;"	f
func_sort_ver	src/secp256k1/libtool	/^func_sort_ver ()$/;"	f
func_sort_ver	src/univalue/build-aux/ltmain.sh	/^func_sort_ver ()$/;"	f
func_sort_ver	src/univalue/libtool	/^func_sort_ver ()$/;"	f
func_source	build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	libtool	/^func_source ()$/;"	f
func_source	src/secp256k1/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	src/secp256k1/libtool	/^func_source ()$/;"	f
func_source	src/univalue/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	src/univalue/libtool	/^func_source ()$/;"	f
func_split_equals	build-aux/ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_equals	libtool	/^  func_split_equals ()$/;"	f
func_split_equals	src/secp256k1/build-aux/ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_equals	src/secp256k1/libtool	/^  func_split_equals ()$/;"	f
func_split_equals	src/univalue/build-aux/ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_equals	src/univalue/libtool	/^  func_split_equals ()$/;"	f
func_split_short_opt	build-aux/ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	libtool	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	src/secp256k1/build-aux/ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	src/secp256k1/libtool	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	src/univalue/build-aux/ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	src/univalue/libtool	/^  func_split_short_opt ()$/;"	f
func_stripname	build-aux/ltmain.sh	/^  func_stripname ()$/;"	f
func_stripname	libtool	/^  func_stripname ()$/;"	f
func_stripname	src/secp256k1/build-aux/ltmain.sh	/^  func_stripname ()$/;"	f
func_stripname	src/secp256k1/libtool	/^  func_stripname ()$/;"	f
func_stripname	src/univalue/build-aux/ltmain.sh	/^  func_stripname ()$/;"	f
func_stripname	src/univalue/libtool	/^  func_stripname ()$/;"	f
func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
func_stripname_cnf	src/univalue/configure	/^func_stripname_cnf ()$/;"	f
func_suncc_cstd_abi	build-aux/ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	libtool	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	src/secp256k1/build-aux/ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	src/secp256k1/libtool	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	src/univalue/build-aux/ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	src/univalue/libtool	/^func_suncc_cstd_abi ()$/;"	f
func_to_host_file	build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	src/secp256k1/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	src/secp256k1/libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	src/univalue/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	src/univalue/libtool	/^func_to_host_file ()$/;"	f
func_to_host_path	build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	src/secp256k1/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	src/secp256k1/libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	src/univalue/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	src/univalue/libtool	/^func_to_host_path ()$/;"	f
func_to_tool_file	build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	src/secp256k1/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	src/secp256k1/libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	src/univalue/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	src/univalue/libtool	/^func_to_tool_file ()$/;"	f
func_tr_sh	build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	src/secp256k1/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	src/secp256k1/libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	src/univalue/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	src/univalue/libtool	/^func_tr_sh ()$/;"	f
func_usage	build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	libtool	/^func_usage ()$/;"	f
func_usage	src/secp256k1/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	src/secp256k1/libtool	/^func_usage ()$/;"	f
func_usage	src/univalue/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	src/univalue/libtool	/^func_usage ()$/;"	f
func_usage_message	build-aux/ltmain.sh	/^func_usage_message ()$/;"	f
func_usage_message	libtool	/^func_usage_message ()$/;"	f
func_usage_message	src/secp256k1/build-aux/ltmain.sh	/^func_usage_message ()$/;"	f
func_usage_message	src/secp256k1/libtool	/^func_usage_message ()$/;"	f
func_usage_message	src/univalue/build-aux/ltmain.sh	/^func_usage_message ()$/;"	f
func_usage_message	src/univalue/libtool	/^func_usage_message ()$/;"	f
func_validate_options	build-aux/ltmain.sh	/^func_validate_options ()$/;"	f
func_validate_options	libtool	/^func_validate_options ()$/;"	f
func_validate_options	src/secp256k1/build-aux/ltmain.sh	/^func_validate_options ()$/;"	f
func_validate_options	src/secp256k1/libtool	/^func_validate_options ()$/;"	f
func_validate_options	src/univalue/build-aux/ltmain.sh	/^func_validate_options ()$/;"	f
func_validate_options	src/univalue/libtool	/^func_validate_options ()$/;"	f
func_verbose	build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	libtool	/^func_verbose ()$/;"	f
func_verbose	src/secp256k1/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	src/secp256k1/libtool	/^func_verbose ()$/;"	f
func_verbose	src/univalue/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	src/univalue/libtool	/^func_verbose ()$/;"	f
func_version	build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	libtool	/^func_version ()$/;"	f
func_version	src/secp256k1/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	src/secp256k1/libtool	/^func_version ()$/;"	f
func_version	src/univalue/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	src/univalue/libtool	/^func_version ()$/;"	f
func_warn_and_continue	build-aux/ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	libtool	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	src/secp256k1/build-aux/ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	src/secp256k1/libtool	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	src/univalue/build-aux/ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	src/univalue/libtool	/^func_warn_and_continue ()$/;"	f
func_warning	build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	libtool	/^func_warning ()$/;"	f
func_warning	src/secp256k1/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	src/secp256k1/libtool	/^func_warning ()$/;"	f
func_warning	src/univalue/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	src/univalue/libtool	/^func_warning ()$/;"	f
func_win32_import_lib_p	build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	src/secp256k1/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	src/secp256k1/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	src/univalue/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	src/univalue/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	src/secp256k1/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	src/secp256k1/libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	src/univalue/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	src/univalue/libtool	/^func_win32_libid ()$/;"	f
func_wrapper	test/functional/p2p_segwit.py	/^        def func_wrapper(self, *args, **kwargs):$/;"	f	function:SegWitTest.subtest
func_write_libtool_object	build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	src/secp256k1/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	src/secp256k1/libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	src/univalue/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	src/univalue/libtool	/^func_write_libtool_object ()$/;"	f
func_xform	build-aux/ltmain.sh	/^  func_xform ()$/;"	f
func_xform	libtool	/^  func_xform ()$/;"	f
func_xform	src/secp256k1/build-aux/ltmain.sh	/^  func_xform ()$/;"	f
func_xform	src/secp256k1/libtool	/^  func_xform ()$/;"	f
func_xform	src/univalue/build-aux/ltmain.sh	/^  func_xform ()$/;"	f
func_xform	src/univalue/libtool	/^  func_xform ()$/;"	f
function	src/leveldb/include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	src/leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon8::PosixEnv::BGItem	file:
fundrawtransaction	src/wallet/rpcwallet.cpp	/^static UniValue fundrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
fwrite_unlocked	src/leveldb/port/port_posix.h	/^#define fwrite_unlocked /;"	d
gArgs	src/util/system.cpp	/^ArgsManager gArgs;$/;"	v
gBase	src/torcontrol.cpp	/^static struct event_base *gBase;$/;"	v	typeref:struct:event_base	file:
gFlags	src/test/script_tests.cpp	/^static const unsigned int gFlags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;$/;"	v	file:
g_PageSize	src/leveldb/util/env_win.cc	/^const size_t g_PageSize = GetPageSize();$/;"	m	namespace:leveldb::Win32	file:
g_banman	src/init.cpp	/^std::unique_ptr<BanMan> g_banman;$/;"	v
g_best_block	src/validation.cpp	/^uint256 g_best_block;$/;"	v
g_best_block_cv	src/validation.cpp	/^std::condition_variable g_best_block_cv;$/;"	v
g_best_block_mutex	src/validation.cpp	/^Mutex g_best_block_mutex;$/;"	v
g_blocks_path_cache_net_specific	src/util/system.cpp	/^static fs::path g_blocks_path_cache_net_specific;$/;"	v	file:
g_chainstate	src/validation.cpp	/^} g_chainstate;$/;"	v	typeref:class:CChainState
g_connNotifyEntryRemoved	src/validationinterface.cpp	/^static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_connNotifyEntryRemoved;$/;"	v	file:
g_connman	src/init.cpp	/^std::unique_ptr<CConnman> g_connman;$/;"	v
g_cs_orphans	src/net_processing.cpp	/^    static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;$/;"	m	namespace:__anon88	file:
g_cs_orphans	src/net_processing.cpp	/^CCriticalSection g_cs_orphans;$/;"	v
g_debug_lockorder_abort	src/sync.cpp	/^bool g_debug_lockorder_abort = true;$/;"	v
g_enabled_filter_types	src/init.cpp	/^std::vector<BlockFilterType> g_enabled_filter_types;$/;"	m	namespace:__anon123	file:
g_env	src/leveldb/db/db_bench.cc	/^leveldb::Env* g_env = NULL;$/;"	m	namespace:leveldb::__anon19	file:
g_filter_indexes	src/index/blockfilterindex.cpp	/^static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;$/;"	v	file:
g_filter_types	src/blockfilter.cpp	/^static const std::map<BlockFilterType, std::string> g_filter_types = {$/;"	v	file:
g_genesis_wait_cv	src/init.cpp	/^static std::condition_variable g_genesis_wait_cv;$/;"	v	file:
g_genesis_wait_mutex	src/init.cpp	/^static Mutex g_genesis_wait_mutex;$/;"	v	file:
g_insecure_rand_ctx	src/test/setup_common.cpp	/^FastRandomContext g_insecure_rand_ctx;$/;"	v
g_internal_prefix	src/netaddress.cpp	/^static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };$/;"	v	file:
g_known_wallet_flags	src/wallet/wallet.h	/^static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;$/;"	v
g_lockstack	src/sync.cpp	/^static thread_local LockStack g_lockstack;$/;"	v	file:
g_rdrand_supported	src/random.cpp	/^static bool g_rdrand_supported = false;$/;"	v	file:
g_rdseed_supported	src/random.cpp	/^static bool g_rdseed_supported = false;$/;"	v	file:
g_relay_txes	src/net.cpp	/^bool g_relay_txes = !DEFAULT_BLOCKSONLY;$/;"	v
g_rpcSignals	src/rpc/server.cpp	/^} g_rpcSignals;$/;"	v	typeref:struct:CRPCSignals	file:
g_rpc_interfaces	src/rpc/util.cpp	/^InitInterfaces* g_rpc_interfaces = nullptr;$/;"	v
g_rpc_server_info	src/rpc/server.cpp	/^static RPCServerInfo g_rpc_server_info;$/;"	v	file:
g_scan_in_progress	src/rpc/blockchain.cpp	/^static std::atomic<bool> g_scan_in_progress;$/;"	v	file:
g_scan_progress	src/rpc/blockchain.cpp	/^static std::atomic<int> g_scan_progress;$/;"	v	file:
g_should_abort_scan	src/rpc/blockchain.cpp	/^static std::atomic<bool> g_should_abort_scan;$/;"	v	file:
g_signals	src/validationinterface.cpp	/^static CMainSignals g_signals;$/;"	v	file:
g_thread_http_workers	src/httpserver.cpp	/^static std::vector<std::thread> g_thread_http_workers;$/;"	v	file:
g_thread_name	src/util/threadnames.cpp	/^static thread_local std::string g_thread_name;$/;"	v	file:
g_txindex	src/index/txindex.cpp	/^std::unique_ptr<TxIndex> g_txindex;$/;"	v
g_ui_signals	src/ui_interface.cpp	/^} g_ui_signals;$/;"	v	typeref:struct:UISignals
g_unloading_wallet_set	src/wallet/wallet.cpp	/^static std::set<CWallet*> g_unloading_wallet_set;$/;"	v	file:
g_upnp_interrupt	src/net.cpp	/^static CThreadInterrupt g_upnp_interrupt;$/;"	v	file:
g_upnp_thread	src/net.cpp	/^static std::thread g_upnp_thread;$/;"	v	file:
g_utxosetscan	src/rpc/blockchain.cpp	/^static std::mutex g_utxosetscan;$/;"	v	file:
g_wallet_init_interface	src/dummywallet.cpp	/^const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();$/;"	v
g_wallet_init_interface	src/wallet/init.cpp	/^const WalletInitInterface& g_wallet_init_interface = WalletInit();$/;"	v
g_wallet_release_cv	src/wallet/wallet.cpp	/^static std::condition_variable g_wallet_release_cv;$/;"	v	file:
g_wallet_release_mutex	src/wallet/wallet.cpp	/^static Mutex g_wallet_release_mutex;$/;"	v	file:
g_zmq_notification_interface	src/zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface* g_zmq_notification_interface = nullptr;$/;"	v
gather_file_info	contrib/devtools/copyright_header.py	/^def gather_file_info(filename):$/;"	f
gather_inputs	test/functional/test_framework/util.py	/^def gather_inputs(from_node, amount_needed, confirmations_required=1):$/;"	f
gbt_force	src/versionbitsinfo.h	/^    bool gbt_force;$/;"	m	struct:VBDeploymentInfo
gbt_vb_name	src/rpc/mining.cpp	/^static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {$/;"	f	file:
ge_equals_ge	src/secp256k1/src/tests.c	/^void ge_equals_ge(const secp256k1_ge *a, const secp256k1_ge *b) {$/;"	f
ge_equals_ge	src/secp256k1/src/tests_exhaustive.c	/^void ge_equals_ge(const secp256k1_ge *a, const secp256k1_ge *b) {$/;"	f
ge_equals_gej	src/secp256k1/src/tests.c	/^void ge_equals_gej(const secp256k1_ge *a, const secp256k1_gej *b) {$/;"	f
ge_equals_gej	src/secp256k1/src/tests_exhaustive.c	/^void ge_equals_gej(const secp256k1_ge *a, const secp256k1_gej *b) {$/;"	f
ge_x	src/secp256k1/src/bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon109	file:
ge_y	src/secp256k1/src/bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon109	file:
gej_x	src/secp256k1/src/bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon109	file:
gej_xyz_equals_gej	src/secp256k1/src/tests.c	/^int gej_xyz_equals_gej(const secp256k1_gej *a, const secp256k1_gej *b) {$/;"	f
gej_y	src/secp256k1/src/bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon109	file:
gen	src/leveldb/db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_context_BIN	src/secp256k1/Makefile	/^gen_context_BIN = gen_context$(BUILD_EXEEXT)$/;"	m
gen_context_OBJECTS	src/secp256k1/Makefile	/^gen_context_OBJECTS = gen_context.o$/;"	m
gen_invalid_base58_vector	contrib/testgen/gen_key_io_test_vectors.py	/^def gen_invalid_base58_vector(template):$/;"	f
gen_invalid_bech32_vector	contrib/testgen/gen_key_io_test_vectors.py	/^def gen_invalid_bech32_vector(template):$/;"	f
gen_invalid_vectors	contrib/testgen/gen_key_io_test_vectors.py	/^def gen_invalid_vectors():$/;"	f
gen_return_txouts	test/functional/mempool_limit.py	/^from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
gen_return_txouts	test/functional/mining_prioritisetransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts$/;"	i
gen_return_txouts	test/functional/test_framework/util.py	/^def gen_return_txouts():$/;"	f
gen_valid_base58_vector	contrib/testgen/gen_key_io_test_vectors.py	/^def gen_valid_base58_vector(template):$/;"	f
gen_valid_bech32_vector	contrib/testgen/gen_key_io_test_vectors.py	/^def gen_valid_bech32_vector(template):$/;"	f
gen_valid_vectors	contrib/testgen/gen_key_io_test_vectors.py	/^def gen_valid_vectors():$/;"	f
generate	test/functional/test_framework/key.py	/^    def generate(self, compressed=True):$/;"	m	class:ECKey
generate	test/functional/test_framework/test_node.py	/^    def generate(self, nblocks, maxtries=1000000):$/;"	m	class:TestNode
generateBlocks	src/rpc/mining.cpp	/^static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)$/;"	f	file:
generate_blocks	test/functional/feature_csv_activation.py	/^    def generate_blocks(self, number, version, test_blocks=None):$/;"	m	class:BIP68_112_113Test
generate_password	share/rpcauth/rpcauth.py	/^def generate_password():$/;"	f
generate_salt	share/rpcauth/rpcauth.py	/^def generate_salt(size):$/;"	f
generate_small_transactions	test/functional/feature_dbcrash.py	/^    def generate_small_transactions(self, node, count, utxo_list):$/;"	m	class:ChainstateWriteCrashTest
generate_test_data	test/functional/rpc_getblockstats.py	/^    def generate_test_data(self, filename):$/;"	m	class:GetblockstatsTest
generatetoaddress	src/rpc/mining.cpp	/^static UniValue generatetoaddress(const JSONRPCRequest& request)$/;"	f	file:
generatetoaddress	src/test/util.cpp	/^CTxIn generatetoaddress(const std::string& address)$/;"	f
generation	src/leveldb/db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
genesis	src/chainparams.h	/^    CBlock genesis;$/;"	m	class:CChainParams
get	src/txmempool.cpp	/^CTransactionRef CTxMemPool::get(const uint256& hash) const$/;"	f	class:CTxMemPool
get	src/util/system.cpp	/^std::pair<int, char**> WinCmdLineArgs::get()$/;"	f	class:util::WinCmdLineArgs
getAddress	src/qt/editaddressdialog.cpp	/^QString EditAddressDialog::getAddress() const$/;"	f	class:EditAddressDialog
getAddressData	src/qt/addresstablemodel.cpp	/^bool AddressTableModel::getAddressData(const QString &address,$/;"	f	class:AddressTableModel
getAddressTableModel	src/qt/walletmodel.cpp	/^AddressTableModel *WalletModel::getAddressTableModel()$/;"	f	class:WalletModel
getAddressTableModel	src/qt/walletmodel.h	/^    AddressTableModel* getAddressTableModel() const { return addressTableModel; }$/;"	f	class:WalletModel
getAllNetMessageTypes	src/protocol.cpp	/^const std::vector<std::string> &getAllNetMessageTypes()$/;"	f
getAmountColumnTitle	src/qt/bitcoinunits.cpp	/^QString BitcoinUnits::getAmountColumnTitle(int unit)$/;"	f	class:BitcoinUnits
getAmountTitle	src/qt/recentrequeststablemodel.cpp	/^QString RecentRequestsTableModel::getAmountTitle()$/;"	f	class:RecentRequestsTableModel
getAppIcon	src/qt/networkstyle.h	/^    const QIcon &getAppIcon() const { return appIcon; }$/;"	f	class:NetworkStyle
getAppName	src/qt/networkstyle.h	/^    const QString &getAppName() const { return appName; }$/;"	f	class:NetworkStyle
getAvailableWidthForColumn	src/qt/guiutil.cpp	/^int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
getBanTableModel	src/qt/clientmodel.cpp	/^BanTableModel *ClientModel::getBanTableModel()$/;"	f	class:ClientModel
getBlock13b8a	src/test/setup_common.cpp	/^CBlock getBlock13b8a()$/;"	f
getBlockSource	src/qt/clientmodel.cpp	/^enum BlockSource ClientModel::getBlockSource() const$/;"	f	class:ClientModel
getBool	src/univalue/include/univalue.h	/^    bool getBool() const { return isTrue(); }$/;"	f	class:UniValue
getCertStore	src/qt/paymentserver.cpp	/^X509_STORE* PaymentServer::getCertStore()$/;"	f	class:PaymentServer
getCoinControlFeatures	src/qt/optionsmodel.h	/^    bool getCoinControlFeatures() const { return fCoinControlFeatures; }$/;"	f	class:OptionsModel
getColumnsWidth	src/qt/guiutil.cpp	/^int TableViewLastColumnResizingFixer::getColumnsWidth()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
getConfTargetForIndex	src/qt/sendcoinsdialog.cpp	/^int getConfTargetForIndex(int index) {$/;"	f
getContext	src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  public static long getContext() {$/;"	m	class:Secp256k1Context
getDataDirectory	src/qt/intro.cpp	/^QString Intro::getDataDirectory()$/;"	f	class:Intro
getDefaultDataDirectory	src/qt/guiutil.cpp	/^QString getDefaultDataDirectory()$/;"	f	namespace:GUIUtil
getDetails	src/qt/paymentrequestplus.h	/^    const payments::PaymentDetails& getDetails() const { return details; }$/;"	f	class:PaymentRequestPlus
getDisplayName	src/qt/walletmodel.cpp	/^QString WalletModel::getDisplayName() const$/;"	f	class:WalletModel
getDisplayUnit	src/qt/optionsmodel.h	/^    int getDisplayUnit() const { return nDisplayUnit; }$/;"	f	class:OptionsModel
getDuplicateAddressWarning	src/qt/editaddressdialog.cpp	/^QString EditAddressDialog::getDuplicateAddressWarning() const$/;"	f	class:EditAddressDialog
getEditStatus	src/qt/addresstablemodel.h	/^    EditStatus getEditStatus() const { return editStatus; }$/;"	f	class:AddressTableModel
getEncryptionStatus	src/qt/walletmodel.cpp	/^WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const$/;"	f	class:WalletModel
getEntryData	src/qt/guiutil.cpp	/^QList<QModelIndex> getEntryData(QAbstractItemView *view, int column)$/;"	f	namespace:GUIUtil
getGraphRangeMins	src/qt/trafficgraphwidget.cpp	/^int TrafficGraphWidget::getGraphRangeMins() const$/;"	f	class:TrafficGraphWidget
getHeaderTipHeight	src/qt/clientmodel.cpp	/^int ClientModel::getHeaderTipHeight() const$/;"	f	class:ClientModel
getHeaderTipTime	src/qt/clientmodel.cpp	/^int64_t ClientModel::getHeaderTipTime() const$/;"	f	class:ClientModel
getHideTrayIcon	src/qt/optionsmodel.h	/^    bool getHideTrayIcon() const { return fHideTrayIcon; }$/;"	f	class:OptionsModel
getImagesOnButtons	src/qt/platformstyle.h	/^    bool getImagesOnButtons() const { return imagesOnButtons; }$/;"	f	class:PlatformStyle
getIndexForConfTarget	src/qt/sendcoinsdialog.cpp	/^int getIndexForConfTarget(int target) {$/;"	f
getJsonToken	src/univalue/lib/univalue_read.cpp	/^enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,$/;"	f
getKeys	src/univalue/lib/univalue_get.cpp	/^const std::vector<std::string>& UniValue::getKeys() const$/;"	f	class:UniValue
getMainWinId	src/qt/bitcoin.cpp	/^WId BitcoinApplication::getMainWinId() const$/;"	f	class:BitcoinApplication
getMerchant	src/qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) const$/;"	f	class:PaymentRequestPlus
getMinimizeOnClose	src/qt/optionsmodel.h	/^    bool getMinimizeOnClose() const { return fMinimizeOnClose; }$/;"	f	class:OptionsModel
getMinimizeToTray	src/qt/optionsmodel.h	/^    bool getMinimizeToTray() const { return fMinimizeToTray; }$/;"	f	class:OptionsModel
getName	src/qt/platformstyle.h	/^    const QString &getName() const { return name; }$/;"	f	class:PlatformStyle
getNodeStats	src/qt/peertablemodel.cpp	/^const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)$/;"	f	class:PeerTableModel
getNumConnections	src/qt/clientmodel.cpp	/^int ClientModel::getNumConnections(unsigned int flags) const$/;"	f	class:ClientModel
getObjMap	src/univalue/lib/univalue.cpp	/^void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const$/;"	f	class:UniValue
getOpenFileName	src/qt/guiutil.cpp	/^QString getOpenFileName(QWidget *parent, const QString &caption, const QString &dir,$/;"	f	namespace:GUIUtil
getOptionsModel	src/qt/clientmodel.cpp	/^OptionsModel *ClientModel::getOptionsModel()$/;"	f	class:ClientModel
getOptionsModel	src/qt/walletmodel.cpp	/^OptionsModel *WalletModel::getOptionsModel()$/;"	f	class:WalletModel
getOrCreateWallet	src/qt/walletcontroller.cpp	/^WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet)$/;"	f	class:WalletController
getOutputIndex	src/qt/transactionrecord.cpp	/^int TransactionRecord::getOutputIndex() const$/;"	f	class:TransactionRecord
getOverriddenByCommandLine	src/qt/optionsmodel.h	/^    const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }$/;"	f	class:OptionsModel
getPathToCheck	src/qt/intro.cpp	/^QString Intro::getPathToCheck()$/;"	f	class:Intro
getPayTo	src/qt/paymentrequestplus.cpp	/^QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const$/;"	f	class:PaymentRequestPlus
getPeerTableModel	src/qt/clientmodel.cpp	/^PeerTableModel *ClientModel::getPeerTableModel()$/;"	f	class:ClientModel
getProxyInfo	src/qt/clientmodel.cpp	/^bool ClientModel::getProxyInfo(std::string& ip_port) const$/;"	f	class:ClientModel
getProxySettings	src/qt/optionsmodel.cpp	/^bool OptionsModel::getProxySettings(QNetworkProxy& proxy) const$/;"	f	class:OptionsModel
getQueueInfo	src/scheduler.cpp	/^size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,$/;"	f	class:CScheduler
getRecentRequestsTableModel	src/qt/walletmodel.cpp	/^RecentRequestsTableModel *WalletModel::getRecentRequestsTableModel()$/;"	f	class:WalletModel
getRecipient	src/qt/test/paymentservertests.cpp	/^void RecipientCatcher::getRecipient(const SendCoinsRecipient& r)$/;"	f	class:RecipientCatcher
getRecipients	src/qt/walletmodeltransaction.cpp	/^QList<SendCoinsRecipient> WalletModelTransaction::getRecipients() const$/;"	f	class:WalletModelTransaction
getReturnValue	src/qt/addressbookpage.h	/^    const QString &getReturnValue() const { return returnValue; }$/;"	f	class:AddressBookPage
getReturnValue	src/qt/bitcoin.h	/^    int getReturnValue() const { return returnValue; }$/;"	f	class:BitcoinApplication
getRowByNodeId	src/qt/peertablemodel.cpp	/^int PeerTableModel::getRowByNodeId(NodeId nodeid)$/;"	f	class:PeerTableModel
getSaveFileName	src/qt/guiutil.cpp	/^QString getSaveFileName(QWidget *parent, const QString &caption, const QString &dir,$/;"	f	namespace:GUIUtil
getStatusBarWarnings	src/qt/clientmodel.cpp	/^QString ClientModel::getStatusBarWarnings() const$/;"	f	class:ClientModel
getThirdPartyTxUrls	src/qt/optionsmodel.h	/^    QString getThirdPartyTxUrls() const { return strThirdPartyTxUrls; }$/;"	f	class:OptionsModel
getTitleAddText	src/qt/networkstyle.h	/^    const QString &getTitleAddText() const { return titleAddText; }$/;"	f	class:NetworkStyle
getTotalTransactionAmount	src/qt/walletmodeltransaction.cpp	/^CAmount WalletModelTransaction::getTotalTransactionAmount() const$/;"	f	class:WalletModelTransaction
getTransactionFee	src/qt/walletmodeltransaction.cpp	/^CAmount WalletModelTransaction::getTransactionFee() const$/;"	f	class:WalletModelTransaction
getTransactionSize	src/qt/walletmodeltransaction.cpp	/^unsigned int WalletModelTransaction::getTransactionSize()$/;"	f	class:WalletModelTransaction
getTransactionTableModel	src/qt/walletmodel.cpp	/^TransactionTableModel *WalletModel::getTransactionTableModel()$/;"	f	class:WalletModel
getTrayAndWindowIcon	src/qt/networkstyle.h	/^    const QIcon &getTrayAndWindowIcon() const { return trayAndWindowIcon; }$/;"	f	class:NetworkStyle
getTxHash	src/qt/transactionrecord.cpp	/^QString TransactionRecord::getTxHash() const$/;"	f	class:TransactionRecord
getTxHex	src/qt/transactiontablemodel.cpp	/^    QString getTxHex(interfaces::Wallet& wallet, TransactionRecord *rec)$/;"	f	class:TransactionTablePriv
getType	src/univalue/include/univalue.h	/^    enum VType getType() const { return typ; }$/;"	f	class:UniValue
getURI	src/qt/openuridialog.cpp	/^QString OpenURIDialog::getURI()$/;"	f	class:OpenURIDialog
getUseExtraSpacing	src/qt/platformstyle.h	/^    bool getUseExtraSpacing() const { return useExtraSpacing; }$/;"	f	class:PlatformStyle
getValStr	src/univalue/include/univalue.h	/^    const std::string& getValStr() const { return val; }$/;"	f	class:UniValue
getValue	src/qt/sendcoinsentry.cpp	/^SendCoinsRecipient SendCoinsEntry::getValue()$/;"	f	class:SendCoinsEntry
getValues	src/univalue/lib/univalue_get.cpp	/^const std::vector<UniValue>& UniValue::getValues() const$/;"	f	class:UniValue
getWalletModel	src/qt/walletview.h	/^    WalletModel *getWalletModel() { return walletModel; }$/;"	f	class:WalletView
getWalletName	src/qt/walletmodel.cpp	/^QString WalletModel::getWalletName() const$/;"	f	class:WalletModel
getWallets	src/qt/walletcontroller.cpp	/^std::vector<WalletModel*> WalletController::getWallets() const$/;"	f	class:WalletController
getWalletsAvailableToOpen	src/qt/walletcontroller.cpp	/^std::vector<std::string> WalletController::getWalletsAvailableToOpen() const$/;"	f	class:WalletController
getWtx	src/qt/walletmodeltransaction.cpp	/^std::unique_ptr<interfaces::PendingWalletTx>& WalletModelTransaction::getWtx()$/;"	f	class:WalletModelTransaction
get_ELF_program_headers	contrib/devtools/security-check.py	/^def get_ELF_program_headers(executable):$/;"	f
get_PE_dll_characteristics	contrib/devtools/security-check.py	/^def get_PE_dll_characteristics(executable):$/;"	f
get_acks_from_comments	contrib/devtools/github-merge.py	/^def get_acks_from_comments(head_commit, comments):$/;"	f
get_array	src/univalue/lib/univalue_get.cpp	/^const UniValue& UniValue::get_array() const$/;"	f	class:UniValue
get_auth_cookie	test/functional/interface_bitcoin_cli.py	/^from test_framework.util import assert_equal, assert_raises_process_error, get_auth_cookie$/;"	i
get_auth_cookie	test/functional/test_framework/util.py	/^def get_auth_cookie(datadir):$/;"	f
get_balances	test/functional/wallet_address_types.py	/^    def get_balances(self, confirmed=True):$/;"	m	class:AddressTypeTest
get_bcaddress_version	contrib/testgen/base58.py	/^def get_bcaddress_version(strAddress):$/;"	f
get_bind_addrs	test/functional/rpc_bind.py	/^from test_framework.netutil import all_interfaces, addr_to_hex, get_bind_addrs, test_ipv6_local$/;"	i
get_bind_addrs	test/functional/test_framework/netutil.py	/^def get_bind_addrs(pid):$/;"	f
get_blk_dt	contrib/linearize/linearize-data.py	/^def get_blk_dt(blk_hdr):$/;"	f
get_block_hashes	contrib/linearize/linearize-data.py	/^def get_block_hashes(settings):$/;"	f
get_block_hashes	contrib/linearize/linearize-hashes.py	/^def get_block_hashes(settings, max_blocks_per_call=10000):$/;"	f
get_bool	src/univalue/lib/univalue_get.cpp	/^bool UniValue::get_bool() const$/;"	f	class:UniValue
get_bytes	test/functional/test_framework/key.py	/^    def get_bytes(self):$/;"	m	class:ECKey
get_bytes	test/functional/test_framework/key.py	/^    def get_bytes(self):$/;"	m	class:ECPubKey
get_change_address	test/functional/wallet_bumpfee.py	/^    def get_change_address(tx):$/;"	f	function:test_change_script_match
get_count_of_copyrights_of_any_style_any_holder	contrib/devtools/copyright_header.py	/^def get_count_of_copyrights_of_any_style_any_holder(contents):$/;"	f
get_covr_filename	contrib/devtools/test_deterministic_coverage.sh	/^get_covr_filename() {$/;"	f
get_cpp_header_lines_to_insert	contrib/devtools/copyright_header.py	/^def get_cpp_header_lines_to_insert(start_year, end_year):$/;"	f
get_data	src/wallet/db.cpp	/^const void* BerkeleyBatch::SafeDbt::get_data() const$/;"	f	class:BerkeleyBatch::SafeDbt
get_datadir_path	test/functional/test_framework/util.py	/^def get_datadir_path(dirname, n):$/;"	f
get_deterministic_priv_key	test/functional/test_framework/test_node.py	/^    def get_deterministic_priv_key(self):$/;"	m	class:TestNode
get_file_suffix_count	contrib/devtools/test_deterministic_coverage.sh	/^get_file_suffix_count() {$/;"	f
get_filename	test/functional/test_framework/coverage.py	/^def get_filename(dirname, n_node):$/;"	f
get_filenames_to_examine	contrib/devtools/copyright_header.py	/^def get_filenames_to_examine(base_directory):$/;"	f
get_filesystem_error_message	src/fs.cpp	/^std::string get_filesystem_error_message(const fs::filesystem_error& e)$/;"	f	namespace:fsbridge
get_git_change_year_range	contrib/devtools/copyright_header.py	/^def get_git_change_year_range(filename):$/;"	f
get_git_change_years	contrib/devtools/copyright_header.py	/^def get_git_change_years(filename):$/;"	f
get_header_lines	contrib/devtools/copyright_header.py	/^def get_header_lines(header, start_year, end_year):$/;"	f
get_headers	test/functional/p2p_compactblocks.py	/^    def get_headers(self, locator, hashstop):$/;"	m	class:TestP2PConn
get_int	src/univalue/lib/univalue_get.cpp	/^int UniValue::get_int() const$/;"	f	class:UniValue
get_int64	src/univalue/lib/univalue_get.cpp	/^int64_t UniValue::get_int64() const$/;"	f	class:UniValue
get_key	test/functional/test_framework/wallet_util.py	/^def get_key(node):$/;"	f
get_keys	test/functional/rpc_createmultisig.py	/^    def get_keys(self):$/;"	m	class:RpcCreateMultiSigTest
get_legacy_sigopcount_block	test/functional/test_framework/blocktools.py	/^def get_legacy_sigopcount_block(block, accurate=True):$/;"	f
get_legacy_sigopcount_tx	test/functional/test_framework/blocktools.py	/^def get_legacy_sigopcount_tx(tx, accurate=True):$/;"	f
get_log_events	test/functional/combine_logs.py	/^def get_log_events(source, logfile):$/;"	f
get_median_time_past	test/functional/feature_bip68_sequence.py	/^    def get_median_time_past(self, confirmations):$/;"	m	class:BIP68Test
get_mem_rss_kilobytes	test/functional/test_framework/test_node.py	/^    def get_mem_rss_kilobytes(self):$/;"	m	class:TestNode
get_merkle_root	test/functional/test_framework/messages.py	/^    def get_merkle_root(cls, hashes):$/;"	m	class:CBlock
get_most_recent_git_change_year	contrib/devtools/copyright_header.py	/^def get_most_recent_git_change_year(filename):$/;"	f
get_multisig	test/functional/test_framework/wallet_util.py	/^def get_multisig(node):$/;"	f
get_next	test/functional/test_runner.py	/^    def get_next(self):$/;"	m	class:TestHandler
get_node_output	test/functional/feature_help.py	/^    def get_node_output(self, *, ret_code_expected):$/;"	m	class:HelpTest
get_obj	src/univalue/lib/univalue_get.cpp	/^const UniValue& UniValue::get_obj() const$/;"	f	class:UniValue
get_openssl_key	src/secp256k1/src/tests.c	/^EC_KEY *get_openssl_key(const unsigned char *key32) {$/;"	f
get_p2pkh_script	test/functional/p2p_segwit.py	/^def get_p2pkh_script(pubkeyhash):$/;"	f
get_pubkey	test/functional/test_framework/key.py	/^    def get_pubkey(self):$/;"	m	class:ECKey
get_python_header_lines_to_insert	contrib/devtools/copyright_header.py	/^def get_python_header_lines_to_insert(start_year, end_year):$/;"	f
get_real	src/univalue/lib/univalue_get.cpp	/^double UniValue::get_real() const$/;"	f	class:UniValue
get_request	test/functional/test_framework/authproxy.py	/^    def get_request(self, *args, **argsn):$/;"	m	class:AuthServiceProxy
get_request	test/functional/test_framework/coverage.py	/^    def get_request(self, *args, **kwargs):$/;"	m	class:AuthServiceProxyWrapper
get_request	test/functional/test_framework/test_node.py	/^    def get_request(self, *args, **kwargs):$/;"	m	class:TestNodeCLIAttr
get_response	contrib/devtools/github-merge.py	/^def get_response(req_url, ghtoken):$/;"	f
get_rpc_cookie	contrib/linearize/linearize-hashes.py	/^def get_rpc_cookie():$/;"	f
get_rpc_proxy	test/functional/feature_shutdown.py	/^from test_framework.util import assert_equal, get_rpc_proxy, wait_until$/;"	i
get_rpc_proxy	test/functional/mining_getblocktemplate_longpoll.py	/^from test_framework.util import get_rpc_proxy, random_transaction$/;"	i
get_rpc_proxy	test/functional/rpc_bind.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, get_rpc_proxy, rpc_port, rpc_url$/;"	i
get_rpc_proxy	test/functional/test_framework/util.py	/^def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):$/;"	f
get_siphash_keys	test/functional/test_framework/messages.py	/^    def get_siphash_keys(self):$/;"	m	class:HeaderAndShortIDs
get_size	src/wallet/db.cpp	/^u_int32_t BerkeleyBatch::SafeDbt::get_size() const$/;"	f	class:BerkeleyBatch::SafeDbt
get_socket_inodes	test/functional/test_framework/netutil.py	/^def get_socket_inodes(pid):$/;"	f
get_spendable_output	test/functional/feature_block.py	/^    def get_spendable_output(self):$/;"	m	class:FullBlockTest
get_stats	test/functional/rpc_getblockstats.py	/^    def get_stats(self):$/;"	m	class:GetblockstatsTest
get_str	src/univalue/lib/univalue_get.cpp	/^const std::string& UniValue::get_str() const$/;"	f	class:UniValue
get_symlink_files	contrib/devtools/github-merge.py	/^def get_symlink_files():$/;"	f
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:BadInputOutpointIndex
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:DuplicateInput
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:InputMissing
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:InvalidOPIFConstruction
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:NonexistentInput
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:OutputMissing
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:SizeTooSmall
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:SpendNegative
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:SpendTooMuch
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self):$/;"	m	class:TooManySigops
get_tx	test/functional/data/invalid_txs.py	/^    def get_tx(self, *args, **kwargs):$/;"	m	class:BadTxTemplate
get_unconfirmed_utxo_entry	test/functional/wallet_listtransactions.py	/^        def get_unconfirmed_utxo_entry(node, txid_to_match):$/;"	f	function:ListTransactionsTest.run_rbf_opt_in_test
get_unspent	test/functional/rpc_fundrawtransaction.py	/^def get_unspent(listunspent, amount):$/;"	f
get_updatable_copyright_line	contrib/devtools/copyright_header.py	/^def get_updatable_copyright_line(file_lines):$/;"	f
get_virtual_size	test/functional/p2p_segwit.py	/^def get_virtual_size(witness_block):$/;"	f
get_vsize	test/functional/wallet_basic.py	/^    def get_vsize(self, txn):$/;"	m	class:WalletTest
get_wallet_rpc	test/functional/test_framework/test_node.py	/^    def get_wallet_rpc(self, wallet_name):$/;"	m	class:TestNode
get_witness_script	test/functional/p2p_segwit.py	/^from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER$/;"	i
get_witness_script	test/functional/test_framework/blocktools.py	/^def get_witness_script(witness_root, witness_nonce):$/;"	f
getaddednodeinfo	src/rpc/net.cpp	/^static UniValue getaddednodeinfo(const JSONRPCRequest& request)$/;"	f	file:
getaddressesbylabel	src/wallet/rpcwallet.cpp	/^static UniValue getaddressesbylabel(const JSONRPCRequest& request)$/;"	f	file:
getaddressinfo	src/wallet/rpcwallet.cpp	/^UniValue getaddressinfo(const JSONRPCRequest& request)$/;"	f
getbalance	src/wallet/rpcwallet.cpp	/^static UniValue getbalance(const JSONRPCRequest& request)$/;"	f	file:
getbalances	src/wallet/rpcwallet.cpp	/^static UniValue getbalances(const JSONRPCRequest& request)$/;"	f	file:
getbestblockhash	src/rpc/blockchain.cpp	/^static UniValue getbestblockhash(const JSONRPCRequest& request)$/;"	f	file:
getblock	src/rpc/blockchain.cpp	/^static UniValue getblock(const JSONRPCRequest& request)$/;"	f	file:
getblockchaininfo	src/rpc/blockchain.cpp	/^UniValue getblockchaininfo(const JSONRPCRequest& request)$/;"	f
getblockcount	src/rpc/blockchain.cpp	/^static UniValue getblockcount(const JSONRPCRequest& request)$/;"	f	file:
getblockfilter	src/rpc/blockchain.cpp	/^static UniValue getblockfilter(const JSONRPCRequest& request)$/;"	f	file:
getblockhash	src/rpc/blockchain.cpp	/^static UniValue getblockhash(const JSONRPCRequest& request)$/;"	f	file:
getblockheader	src/rpc/blockchain.cpp	/^static UniValue getblockheader(const JSONRPCRequest& request)$/;"	f	file:
getblockstats	src/rpc/blockchain.cpp	/^static UniValue getblockstats(const JSONRPCRequest& request)$/;"	f	file:
getblocktemplate	src/rpc/mining.cpp	/^static UniValue getblocktemplate(const JSONRPCRequest& request)$/;"	f	file:
getchaintips	src/rpc/blockchain.cpp	/^static UniValue getchaintips(const JSONRPCRequest& request)$/;"	f	file:
getchaintxstats	src/rpc/blockchain.cpp	/^static UniValue getchaintxstats(const JSONRPCRequest& request)$/;"	f	file:
getconnectioncount	src/rpc/net.cpp	/^static UniValue getconnectioncount(const JSONRPCRequest& request)$/;"	f	file:
getdescriptorinfo	src/rpc/misc.cpp	/^UniValue getdescriptorinfo(const JSONRPCRequest& request)$/;"	f
getdifficulty	src/rpc/blockchain.cpp	/^static UniValue getdifficulty(const JSONRPCRequest& request)$/;"	f	file:
getdouble	src/arith_uint256.cpp	/^double base_uint<BITS>::getdouble() const$/;"	f	class:base_uint
getint	src/script/script.h	/^    int getint() const$/;"	f	class:CScriptNum
getint	src/test/scriptnum10.h	/^    int getint() const$/;"	f	class:CScriptNum10
getmemoryinfo	src/rpc/misc.cpp	/^static UniValue getmemoryinfo(const JSONRPCRequest& request)$/;"	f	file:
getmempoolancestors	src/rpc/blockchain.cpp	/^static UniValue getmempoolancestors(const JSONRPCRequest& request)$/;"	f	file:
getmempooldescendants	src/rpc/blockchain.cpp	/^static UniValue getmempooldescendants(const JSONRPCRequest& request)$/;"	f	file:
getmempoolentry	src/rpc/blockchain.cpp	/^static UniValue getmempoolentry(const JSONRPCRequest& request)$/;"	f	file:
getmempoolinfo	src/rpc/blockchain.cpp	/^static UniValue getmempoolinfo(const JSONRPCRequest& request)$/;"	f	file:
getmininginfo	src/rpc/mining.cpp	/^static UniValue getmininginfo(const JSONRPCRequest& request)$/;"	f	file:
getnettotals	src/rpc/net.cpp	/^static UniValue getnettotals(const JSONRPCRequest& request)$/;"	f	file:
getnetworkhashps	src/rpc/mining.cpp	/^static UniValue getnetworkhashps(const JSONRPCRequest& request)$/;"	f	file:
getnetworkinfo	src/rpc/net.cpp	/^static UniValue getnetworkinfo(const JSONRPCRequest& request)$/;"	f	file:
getnewaddress	src/test/util.cpp	/^std::string getnewaddress(CWallet& w)$/;"	f
getnewaddress	src/wallet/rpcwallet.cpp	/^static UniValue getnewaddress(const JSONRPCRequest& request)$/;"	f	file:
getnodeaddresses	src/rpc/net.cpp	/^static UniValue getnodeaddresses(const JSONRPCRequest& request)$/;"	f	file:
getpass	share/rpcauth/rpcauth.py	/^from getpass import getpass$/;"	i
getpeerinfo	src/rpc/net.cpp	/^static UniValue getpeerinfo(const JSONRPCRequest& request)$/;"	f	file:
getrawchangeaddress	src/wallet/rpcwallet.cpp	/^static UniValue getrawchangeaddress(const JSONRPCRequest& request)$/;"	f	file:
getrawmempool	src/rpc/blockchain.cpp	/^static UniValue getrawmempool(const JSONRPCRequest& request)$/;"	f	file:
getrawtransaction	src/rpc/rawtransaction.cpp	/^static UniValue getrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
getreceivedbyaddress	src/wallet/rpcwallet.cpp	/^static UniValue getreceivedbyaddress(const JSONRPCRequest& request)$/;"	f	file:
getreceivedbylabel	src/wallet/rpcwallet.cpp	/^static UniValue getreceivedbylabel(const JSONRPCRequest& request)$/;"	f	file:
getrpcinfo	src/rpc/server.cpp	/^static UniValue getrpcinfo(const JSONRPCRequest& request)$/;"	f	file:
gettid	src/leveldb/util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon8::PosixEnv
gettid_	src/leveldb/util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
gettimedouble	src/crypto/ctaes/bench.c	/^static double gettimedouble(void) {$/;"	f	file:
gettimedouble	src/secp256k1/src/bench.h	/^static double gettimedouble(void) {$/;"	f
gettransaction	src/wallet/rpcwallet.cpp	/^static UniValue gettransaction(const JSONRPCRequest& request)$/;"	f	file:
gettxout	src/rpc/blockchain.cpp	/^UniValue gettxout(const JSONRPCRequest& request)$/;"	f
gettxoutproof	src/rpc/rawtransaction.cpp	/^static UniValue gettxoutproof(const JSONRPCRequest& request)$/;"	f	file:
gettxoutsetinfo	src/rpc/blockchain.cpp	/^static UniValue gettxoutsetinfo(const JSONRPCRequest& request)$/;"	f	file:
getunconfirmedbalance	src/wallet/rpcwallet.cpp	/^static UniValue getunconfirmedbalance(const JSONRPCRequest &request)$/;"	f	file:
getutxo	test/functional/feature_segwit.py	/^def getutxo(txid):$/;"	f
getvch	src/script/script.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum
getvch	src/test/scriptnum10.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum10
getwalletinfo	src/wallet/rpcwallet.cpp	/^static UniValue getwalletinfo(const JSONRPCRequest& request)$/;"	f	file:
getzmqnotifications	src/zmq/zmqrpc.cpp	/^UniValue getzmqnotifications(const JSONRPCRequest& request)$/;"	f	namespace:__anon127
git	contrib/devtools/optimize-pngs.py	/^git = 'git'$/;"	v
git_check_in_repo	share/genbuild.sh	/^git_check_in_repo() {$/;"	f
git_config_get	contrib/devtools/github-merge.py	/^def git_config_get(option, default=None):$/;"	f
give_advice	build-aux/missing	/^give_advice ()$/;"	f
give_advice	src/secp256k1/build-aux/missing	/^give_advice ()$/;"	f
give_advice	src/univalue/build-aux/missing	/^give_advice ()$/;"	f
glibc_sanity_test	src/compat/glibc_sanity.cpp	/^bool glibc_sanity_test()$/;"	f
glibcxx_sanity_test	src/compat/glibcxx_sanity.cpp	/^bool glibcxx_sanity_test()$/;"	f
globalChainBaseParams	src/chainparamsbase.cpp	/^static std::unique_ptr<CBaseChainParams> globalChainBaseParams;$/;"	v	file:
globalChainParams	src/chainparams.cpp	/^static std::unique_ptr<const CChainParams> globalChainParams;$/;"	v	file:
globalVerifyHandle	src/bitcoin-tx.cpp	/^    ECCVerifyHandle globalVerifyHandle;$/;"	m	class:Secp256k1Init	file:
globalVerifyHandle	src/init.cpp	/^static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;$/;"	v	file:
globalVerifyHandle	src/test/setup_common.h	/^    ECCVerifyHandle globalVerifyHandle;$/;"	m	struct:BasicTestingSetup
gotoHistoryPage	src/qt/bitcoingui.cpp	/^void BitcoinGUI::gotoHistoryPage()$/;"	f	class:BitcoinGUI
gotoHistoryPage	src/qt/walletframe.cpp	/^void WalletFrame::gotoHistoryPage()$/;"	f	class:WalletFrame
gotoHistoryPage	src/qt/walletview.cpp	/^void WalletView::gotoHistoryPage()$/;"	f	class:WalletView
gotoOverviewPage	src/qt/bitcoingui.cpp	/^void BitcoinGUI::gotoOverviewPage()$/;"	f	class:BitcoinGUI
gotoOverviewPage	src/qt/walletframe.cpp	/^void WalletFrame::gotoOverviewPage()$/;"	f	class:WalletFrame
gotoOverviewPage	src/qt/walletview.cpp	/^void WalletView::gotoOverviewPage()$/;"	f	class:WalletView
gotoReceiveCoinsPage	src/qt/bitcoingui.cpp	/^void BitcoinGUI::gotoReceiveCoinsPage()$/;"	f	class:BitcoinGUI
gotoReceiveCoinsPage	src/qt/walletframe.cpp	/^void WalletFrame::gotoReceiveCoinsPage()$/;"	f	class:WalletFrame
gotoReceiveCoinsPage	src/qt/walletview.cpp	/^void WalletView::gotoReceiveCoinsPage()$/;"	f	class:WalletView
gotoSendCoinsPage	src/qt/bitcoingui.cpp	/^void BitcoinGUI::gotoSendCoinsPage(QString addr)$/;"	f	class:BitcoinGUI
gotoSendCoinsPage	src/qt/walletframe.cpp	/^void WalletFrame::gotoSendCoinsPage(QString addr)$/;"	f	class:WalletFrame
gotoSendCoinsPage	src/qt/walletview.cpp	/^void WalletView::gotoSendCoinsPage(QString addr)$/;"	f	class:WalletView
gotoSignMessageTab	src/qt/bitcoingui.cpp	/^void BitcoinGUI::gotoSignMessageTab(QString addr)$/;"	f	class:BitcoinGUI
gotoSignMessageTab	src/qt/walletframe.cpp	/^void WalletFrame::gotoSignMessageTab(QString addr)$/;"	f	class:WalletFrame
gotoSignMessageTab	src/qt/walletview.cpp	/^void WalletView::gotoSignMessageTab(QString addr)$/;"	f	class:WalletView
gotoVerifyMessageTab	src/qt/bitcoingui.cpp	/^void BitcoinGUI::gotoVerifyMessageTab(QString addr)$/;"	f	class:BitcoinGUI
gotoVerifyMessageTab	src/qt/walletframe.cpp	/^void WalletFrame::gotoVerifyMessageTab(QString addr)$/;"	f	class:WalletFrame
gotoVerifyMessageTab	src/qt/walletview.cpp	/^void WalletView::gotoVerifyMessageTab(QString addr)$/;"	f	class:WalletView
grandparent_index_	src/leveldb/db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	src/leveldb/db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
grantOutbound	src/net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
gui	src/qt/walletframe.h	/^    BitcoinGUI *gui;$/;"	m	class:WalletFrame
guiTests	src/qt/test/apptests.cpp	/^void AppTests::guiTests(BitcoinGUI* window)$/;"	f	class:AppTests
hFile	src/fs.h	/^        void* hFile = (void*)-1; \/\/ INVALID_HANDLE_VALUE$/;"	m	class:fsbridge::FileLock
handle	contrib/zmq/zmq_sub.py	/^    async def handle(self) :$/;"	m	class:ZMQHandler
handle	src/script/bitcoinconsensus.cpp	/^    ECCVerifyHandle handle;$/;"	m	struct:__anon81::ECCryptoClosure	file:
handle	test/functional/test_framework/socks5.py	/^    def handle(self):$/;"	m	class:Socks5Connection
handleNotifications	src/wallet/wallet.cpp	/^void CWallet::handleNotifications()$/;"	f	class:CWallet
handleOutOfSyncWarningClicks	src/qt/overviewpage.cpp	/^void OverviewPage::handleOutOfSyncWarningClicks()$/;"	f	class:OverviewPage
handlePaymentACK	src/qt/paymentserver.cpp	/^void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)$/;"	f	class:PaymentServer
handlePaymentRequest	src/qt/bitcoingui.cpp	/^bool BitcoinGUI::handlePaymentRequest(const SendCoinsRecipient& recipient)$/;"	f	class:BitcoinGUI
handlePaymentRequest	src/qt/sendcoinsdialog.cpp	/^bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)$/;"	f	class:SendCoinsDialog
handlePaymentRequest	src/qt/walletframe.cpp	/^bool WalletFrame::handlePaymentRequest(const SendCoinsRecipient &recipient)$/;"	f	class:WalletFrame
handlePaymentRequest	src/qt/walletview.cpp	/^bool WalletView::handlePaymentRequest(const SendCoinsRecipient& recipient)$/;"	f	class:WalletView
handleRequest	src/qt/test/paymentservertests.cpp	/^static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsigned char>& data)$/;"	f	file:
handleRunawayException	src/qt/bitcoin.cpp	/^void BitcoinApplication::handleRunawayException(const QString &message)$/;"	f	class:BitcoinApplication
handleRunawayException	src/qt/bitcoin.cpp	/^void BitcoinCore::handleRunawayException(const std::exception *e)$/;"	f	class:BitcoinCore
handleSelectionChanged	src/qt/qvaluecombobox.cpp	/^void QValueComboBox::handleSelectionChanged(int idx)$/;"	f	class:QValueComboBox
handleTransactionClicked	src/qt/overviewpage.cpp	/^void OverviewPage::handleTransactionClicked(const QModelIndex &index)$/;"	f	class:OverviewPage
handleURIConnection	src/qt/paymentserver.cpp	/^void PaymentServer::handleURIConnection()$/;"	f	class:PaymentServer
handleURIOrFile	src/qt/paymentserver.cpp	/^void PaymentServer::handleURIOrFile(const QString& s)$/;"	f	class:PaymentServer
handler	src/httpserver.cpp	/^    HTTPRequestHandler handler;$/;"	m	struct:HTTPPathHandler	file:
handler	src/httpserver.h	/^    std::function<void()> handler;$/;"	m	class:HTTPEvent
handler	src/rest.cpp	/^    bool (*handler)(HTTPRequest* req, const std::string& strReq);$/;"	m	struct:__anon2	file:
hasAlpha	src/qt/notificator.cpp	/^    bool hasAlpha;$/;"	m	class:FreedesktopImage	file:
hasTrayIcon	src/qt/bitcoingui.h	/^    bool hasTrayIcon() const { return trayIcon; }$/;"	f	class:BitcoinGUI
has_block	test/functional/feature_pruning.py	/^        def has_block(index):$/;"	f	function:PruneTest.manual_test
has_comparator_	src/leveldb/db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	src/leveldb/db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_key_origin	src/wallet/walletdb.h	/^    bool has_key_origin = false; \/\/< Whether the key_origin is useful$/;"	m	class:CKeyMetadata
has_last_sequence_	src/leveldb/db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	src/leveldb/db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	src/leveldb/db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	src/leveldb/db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
has_utxo	src/node/psbt.h	/^    bool has_utxo; \/\/!< Whether we have UTXO information for this input$/;"	m	struct:PSBTInputAnalysis
hash	src/index/blockfilterindex.cpp	/^    uint256 hash;$/;"	m	struct:__anon120::DBHashKey	file:
hash	src/index/blockfilterindex.cpp	/^    uint256 hash;$/;"	m	struct:__anon120::DBVal	file:
hash	src/leveldb/db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
hash	src/leveldb/util/cache.cc	/^  uint32_t hash;      \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
hash	src/net_processing.cpp	/^        uint256 hash;$/;"	m	struct:__anon88::QueuedBlock	file:
hash	src/primitives/transaction.h	/^    const uint256 hash;$/;"	m	class:CTransaction
hash	src/primitives/transaction.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	src/protocol.h	/^    uint256 hash;$/;"	m	class:CInv
hash	src/qt/transactionrecord.h	/^    uint256 hash;$/;"	m	class:TransactionRecord
hash	src/qt/transactiontablemodel.cpp	/^    uint256 hash;$/;"	m	struct:TransactionNotification	file:
hash	src/rpc/blockchain.cpp	/^    uint256 hash;$/;"	m	struct:CUpdatedBlock	file:
hash	src/rpc/mining.cpp	/^    uint256 hash;$/;"	m	class:submitblock_StateCatcher	file:
hash160	test/functional/feature_fee_estimation.py	/^from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE$/;"	i
hash160	test/functional/feature_segwit.py	/^from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP$/;"	i
hash160	test/functional/test_framework/address.py	/^from .script import hash256, hash160, sha256, CScript, OP_0$/;"	i
hash160	test/functional/test_framework/script.py	/^def hash160(s):$/;"	f
hash256	test/functional/test_framework/address.py	/^from .script import hash256, hash160, sha256, CScript, OP_0$/;"	i
hash256	test/functional/test_framework/messages.py	/^def hash256(s):$/;"	f
hash256	test/functional/test_framework/script.py	/^from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string$/;"	i
hash256	test/functional/test_framework/util.py	/^def hash256(byte_str):$/;"	f
hashAssumeValid	src/validation.cpp	/^uint256 hashAssumeValid;$/;"	v
hashBestBlock_	src/test/coins_tests.cpp	/^    uint256 hashBestBlock_;$/;"	m	class:__anon60::CCoinsViewTest	file:
hashBlock	src/coins.h	/^    mutable uint256 hashBlock;$/;"	m	class:CCoinsViewCache
hashBlock	src/coins.h	/^    uint256 hashBlock;$/;"	m	class:CCoinsViewCursor
hashBlock	src/net_processing.cpp	/^    uint256 hashBlock;$/;"	m	struct:__anon89::CBlockReject	file:
hashBlock	src/rpc/blockchain.cpp	/^    uint256 hashBlock;$/;"	m	struct:CCoinsStats	file:
hashBlock	src/wallet/wallet.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	src/net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashGenesisBlock	src/consensus/params.h	/^    uint256 hashGenesisBlock;$/;"	m	struct:Consensus::Params
hashLastUnknownBlock	src/net_processing.cpp	/^    uint256 hashLastUnknownBlock;$/;"	m	struct:__anon89::CNodeState	file:
hashMerkleRoot	src/chain.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashMerkleRoot	src/primitives/block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockHeader
hashOutputs	src/script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashPrev	src/chain.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	src/primitives/block.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlockHeader
hashPrevouts	src/script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashSequence	src/script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashSerialized	src/rpc/blockchain.cpp	/^    uint256 hashSerialized;$/;"	m	struct:CCoinsStats	file:
hashToHex	test/functional/p2p_feefilter.py	/^def hashToHex(hash):$/;"	f
hashUnset	src/wallet/wallet.h	/^    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }$/;"	f	class:CMerkleTx
hash_function	src/cuckoocache.h	/^    const Hash hash_function;$/;"	m	class:CuckooCache::cache
hasher	src/net.h	/^    mutable CHash256 hasher;$/;"	m	class:CNetMessage
hashlib	contrib/devtools/github-merge.py	/^import hashlib$/;"	i
hashlib	contrib/devtools/optimize-pngs.py	/^import hashlib$/;"	i
hashlib	contrib/linearize/linearize-data.py	/^import hashlib$/;"	i
hashlib	contrib/testgen/base58.py	/^import hashlib$/;"	i
hashlib	contrib/verify-commits/verify-commits.py	/^import hashlib$/;"	i
hashlib	test/functional/test_framework/messages.py	/^import hashlib$/;"	i
hashlib	test/functional/test_framework/script.py	/^import hashlib$/;"	i
hashlib	test/functional/test_framework/util.py	/^import hashlib$/;"	i
hatoui	src/univalue/lib/univalue_read.cpp	/^static const char *hatoui(const char *first, const char *last,$/;"	f	file:
havePush	src/test/script_tests.cpp	/^    bool havePush;$/;"	m	class:__anon58::TestBuilder	file:
have_cycle	contrib/devtools/circular-dependencies.py	/^    have_cycle = True$/;"	v
have_cycle	contrib/devtools/circular-dependencies.py	/^have_cycle = False$/;"	v
have_flag	src/secp256k1/src/bench_internal.c	/^int have_flag(int argc, char** argv, char *flag) {$/;"	f
have_watch_only	src/interfaces/wallet.h	/^    bool have_watch_only = false;$/;"	m	struct:interfaces::WalletBalances
hdChain	src/wallet/wallet.h	/^    CHDChain hdChain;$/;"	m	class:final
hdKeypath	src/wallet/walletdb.h	/^    std::string hdKeypath; \/\/optional HD\/bip32 keypath. Still used to determine whether a key is a seed. Also kept for backwards compatibility$/;"	m	class:CKeyMetadata
hd_keypaths	src/psbt.h	/^    std::map<CPubKey, KeyOriginInfo> hd_keypaths;$/;"	m	struct:PSBTInput
hd_keypaths	src/psbt.h	/^    std::map<CPubKey, KeyOriginInfo> hd_keypaths;$/;"	m	struct:PSBTOutput
hd_seed_id	src/wallet/walletdb.h	/^    CKeyID hd_seed_id; \/\/id of the HD seed used to derive this key$/;"	m	class:CKeyMetadata
hdr	src/net.h	/^    CMessageHeader hdr;             \/\/ complete header$/;"	m	class:CNetMessage
hdrbuf	src/net.h	/^    CDataStream hdrbuf;             \/\/ partially received header$/;"	m	class:CNetMessage
head_	src/leveldb/db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
header	src/bench/bench.cpp	/^void benchmark::ConsolePrinter::header()$/;"	f	class:benchmark::ConsolePrinter
header	src/bench/bench.cpp	/^void benchmark::PlotlyPrinter::header()$/;"	f	class:benchmark::PlotlyPrinter
header	src/blockencodings.h	/^    CBlockHeader header;$/;"	m	class:CBlockHeaderAndShortTxIDs
header	src/blockencodings.h	/^    CBlockHeader header;$/;"	m	class:PartiallyDownloadedBlock
header	src/index/blockfilterindex.cpp	/^    uint256 header;$/;"	m	struct:__anon120::DBVal	file:
header	src/merkleblock.h	/^    CBlockHeader header;$/;"	m	class:CMerkleBlock
header	src/test/blockencodings_tests.cpp	/^    CBlockHeader header;$/;"	m	class:TestHeaderAndShortIDs	file:
headerData	src/qt/addresstablemodel.cpp	/^QVariant AddressTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:AddressTableModel
headerData	src/qt/bantablemodel.cpp	/^QVariant BanTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:BanTableModel
headerData	src/qt/peertablemodel.cpp	/^QVariant PeerTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:PeerTableModel
headerData	src/qt/recentrequeststablemodel.cpp	/^QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:RecentRequestsTableModel
headerData	src/qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:TransactionTableModel
headerSectionClicked	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::headerSectionClicked(int logicalIndex)$/;"	f	class:CoinControlDialog
heap_allocated	src/leveldb/table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	src/leveldb/db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
heapq	test/functional/combine_logs.py	/^import heapq$/;"	i
height	src/index/blockfilterindex.cpp	/^    int height;$/;"	m	struct:__anon120::DBHeightKey	file:
height	src/qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
height	src/rpc/blockchain.cpp	/^    int height;$/;"	m	struct:CUpdatedBlock	file:
height	src/txmempool.h	/^    int height;$/;"	m	struct:LockPoints
height	test/functional/feature_pruning.py	/^        def height(index):$/;"	f	function:PruneTest.manual_test
help	src/rpc/server.cpp	/^UniValue help(const JSONRPCRequest& jsonRequest)$/;"	f
help	src/rpc/server.cpp	/^std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const$/;"	f	class:CRPCTable
helpMessageDialog	src/qt/bitcoingui.h	/^    HelpMessageDialog* helpMessageDialog = nullptr;$/;"	m	class:BitcoinGUI
hex_str_to_bytes	test/functional/feature_dbcrash.py	/^from test_framework.util import assert_equal, create_confirmed_utxos, hex_str_to_bytes$/;"	i
hex_str_to_bytes	test/functional/rpc_decodescript.py	/^from test_framework.util import assert_equal, hex_str_to_bytes$/;"	i
hex_str_to_bytes	test/functional/rpc_rawtransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes$/;"	i
hex_str_to_bytes	test/functional/rpc_signrawtransaction.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, hex_str_to_bytes$/;"	i
hex_str_to_bytes	test/functional/test_framework/address.py	/^from .util import hex_str_to_bytes$/;"	i
hex_str_to_bytes	test/functional/test_framework/messages.py	/^from test_framework.util import hex_str_to_bytes, assert_equal$/;"	i
hex_str_to_bytes	test/functional/test_framework/util.py	/^def hex_str_to_bytes(hex_str):$/;"	f
hex_str_to_bytes	test/functional/test_framework/wallet_util.py	/^from test_framework.util import hex_str_to_bytes$/;"	i
hex_switchEndian	contrib/linearize/linearize-data.py	/^def hex_switchEndian(s):$/;"	f
hex_switchEndian	contrib/linearize/linearize-hashes.py	/^def hex_switchEndian(s):$/;"	f
hexlify	share/rpcauth/rpcauth.py	/^from binascii import hexlify$/;"	i
hideEvent	src/qt/rpcconsole.cpp	/^void RPCConsole::hideEvent(QHideEvent *event)$/;"	f	class:RPCConsole
hist_	src/leveldb/db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon19::Stats	file:
hist_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hist_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
history	src/qt/rpcconsole.h	/^    QStringList history;$/;"	m	class:RPCConsole
historyAction	src/qt/bitcoingui.h	/^    QAction* historyAction = nullptr;$/;"	m	class:BitcoinGUI
historyFilter	src/qt/rpcconsole.cpp	/^const QStringList historyFilter = QStringList()$/;"	m	namespace:__anon69	file:
historyPtr	src/qt/rpcconsole.h	/^    int historyPtr = 0;$/;"	m	class:RPCConsole
hmac	share/rpcauth/rpcauth.py	/^import hmac$/;"	i
hmac	test/util/rpcauth-test.py	/^import hmac$/;"	i
host	Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host	depends/Makefile	/^host:=$(BUILD)$/;"	m
host	depends/Makefile	/^host:=$(HOST)$/;"	m
host	doc/man/Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host	src/Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host	src/secp256k1/Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host	src/univalue/Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_alias	doc/man/Makefile	/^host_alias = $/;"	m
host_alias	src/Makefile	/^host_alias = $/;"	m
host_alias	src/secp256k1/Makefile	/^host_alias = $/;"	m
host_alias	src/univalue/Makefile	/^host_alias = $/;"	m
host_arch	depends/Makefile	/^host_arch=$(firstword $(subst -, ,$(canonical_host)))$/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	doc/man/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	src/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	src/secp256k1/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	src/univalue/Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = darwin17.7.0$/;"	m
host_os	depends/Makefile	/^host_os:=$(findstring linux,$(full_host_os))$/;"	m
host_os	depends/Makefile	/^host_os:=$(strip $(host_os))$/;"	m
host_os	depends/Makefile	/^host_os=$(full_host_os)$/;"	m
host_os	doc/man/Makefile	/^host_os = darwin17.7.0$/;"	m
host_os	src/Makefile	/^host_os = darwin17.7.0$/;"	m
host_os	src/secp256k1/Makefile	/^host_os = darwin17.7.0$/;"	m
host_os	src/univalue/Makefile	/^host_os = darwin17.7.0$/;"	m
host_prefix	depends/Makefile	/^host_prefix=$($(host_arch)_$(host_os)_prefix)$/;"	m
host_toolchain	depends/hosts/default.mk	/^host_toolchain:=$(host)-$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_triplet	doc/man/Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_triplet	src/Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_triplet	src/secp256k1/Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_triplet	src/univalue/Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_vendor	Makefile	/^host_vendor = apple$/;"	m
host_vendor	depends/Makefile	/^host_vendor=$(word 2,$(subst -, ,$(canonical_host)))$/;"	m
host_vendor	doc/man/Makefile	/^host_vendor = apple$/;"	m
host_vendor	src/Makefile	/^host_vendor = apple$/;"	m
host_vendor	src/secp256k1/Makefile	/^host_vendor = apple$/;"	m
host_vendor	src/univalue/Makefile	/^host_vendor = apple$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	doc/man/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	src/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	src/secp256k1/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	src/univalue/Makefile	/^htmldir = ${docdir}$/;"	m
htobe16	src/compat/endian.h	/^inline uint16_t htobe16(uint16_t host_16bits)$/;"	f
htobe32	src/compat/endian.h	/^inline uint32_t htobe32(uint32_t host_32bits)$/;"	f
htobe64	src/compat/endian.h	/^inline uint64_t htobe64(uint64_t host_64bits)$/;"	f
htole16	src/compat/endian.h	/^inline uint16_t htole16(uint16_t host_16bits)$/;"	f
htole32	src/compat/endian.h	/^inline uint32_t htole32(uint32_t host_32bits)$/;"	f
htole64	src/compat/endian.h	/^inline uint64_t htole64(uint64_t host_64bits)$/;"	f
http	test/functional/feature_dbcrash.py	/^import http.client$/;"	i
http	test/functional/interface_http.py	/^import http.client$/;"	i
http	test/functional/interface_rest.py	/^import http.client$/;"	i
http	test/functional/rpc_blockchain.py	/^import http.client$/;"	i
http	test/functional/rpc_users.py	/^import http.client$/;"	i
http	test/functional/test_framework/authproxy.py	/^import http.client$/;"	i
http	test/functional/test_framework/test_node.py	/^import http.client$/;"	i
httpRPCTimerInterface	src/httprpc.cpp	/^static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;$/;"	v	file:
http_error_cb	src/bitcoin-cli.cpp	/^static void http_error_cb(enum evhttp_request_error err, void *ctx)$/;"	f	file:
http_errorstring	src/bitcoin-cli.cpp	/^static const char *http_errorstring(int code)$/;"	f	file:
http_get	contrib/install_db4.sh	/^http_get() {$/;"	f
http_reject_request_cb	src/httpserver.cpp	/^static void http_reject_request_cb(struct evhttp_request* req, void*)$/;"	f	file:
http_request_cb	src/httpserver.cpp	/^static void http_request_cb(struct evhttp_request* req, void* arg)$/;"	f	file:
http_request_done	src/bitcoin-cli.cpp	/^static void http_request_done(struct evhttp_request *req, void *ctx)$/;"	f	file:
httpevent_callback_fn	src/httpserver.cpp	/^static void httpevent_callback_fn(evutil_socket_t, short, void* data)$/;"	f	file:
i	src/wallet/wallet.h	/^    int i;$/;"	m	class:COutput
i64tostr	src/util/strencodings.cpp	/^std::string i64tostr(int64_t n)$/;"	f
i686_linux_AR	depends/hosts/linux.mk	/^i686_linux_AR=ar$/;"	m
i686_linux_CC	depends/hosts/linux.mk	/^i686_linux_CC=$(default_host_CC) -m32$/;"	m
i686_linux_CC	depends/hosts/linux.mk	/^i686_linux_CC=gcc -m32$/;"	m
i686_linux_CXX	depends/hosts/linux.mk	/^i686_linux_CXX=$(default_host_CXX) -m32$/;"	m
i686_linux_CXX	depends/hosts/linux.mk	/^i686_linux_CXX=g++ -m32$/;"	m
i686_linux_NM	depends/hosts/linux.mk	/^i686_linux_NM=nm$/;"	m
i686_linux_RANLIB	depends/hosts/linux.mk	/^i686_linux_RANLIB=ranlib$/;"	m
i686_linux_STRIP	depends/hosts/linux.mk	/^i686_linux_STRIP=strip$/;"	m
icmp_	src/leveldb/db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon30::Repairer	file:
icmp_	src/leveldb/db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	src/leveldb/db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
iconColorHueShift	src/qt/networkstyle.cpp	/^    const int iconColorHueShift;$/;"	m	struct:__anon65	file:
iconColorSaturationReduction	src/qt/networkstyle.cpp	/^    const int iconColorSaturationReduction;$/;"	m	struct:__anon65	file:
icvp	contrib/macdeploy/custom_dsstore.py	/^icvp = {$/;"	v
id	src/leveldb/db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon24::MTThread	file:
id	src/net.cpp	/^    NodeId id;$/;"	m	struct:NodeEvictionCandidate	file:
id	src/net.h	/^    const NodeId id;$/;"	m	class:CNode
id	src/qt/recentrequeststablemodel.h	/^    int64_t id;$/;"	m	class:RecentRequestEntry
id	src/rpc/server.h	/^    UniValue id;$/;"	m	class:JSONRPCRequest
id	src/test/denialofservice_tests.cpp	/^static NodeId id = 0;$/;"	v	file:
id	src/versionbits.cpp	/^    const Consensus::DeploymentPos id;$/;"	m	class:__anon126::VersionBitsConditionChecker	file:
id_mutex_	src/leveldb/util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon4::ShardedLRUCache	file:
identify_executable	contrib/devtools/security-check.py	/^def identify_executable(executable):$/;"	f
idx	src/qt/transactionrecord.h	/^    int idx;$/;"	m	class:TransactionRecord
if	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
ifstream	src/fs.h	/^        explicit ifstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in) { open(p, mode); }$/;"	f	class:fsbridge::ifstream
ifstream	src/fs.h	/^    class ifstream : public std::istream$/;"	c	namespace:fsbridge
ifstream	src/fs.h	/^    typedef fs::ifstream ifstream;$/;"	t	namespace:fsbridge
ignore	src/hash.h	/^    void ignore(size_t nSize)$/;"	f	class:CHashVerifier
ignore	src/streams.h	/^    void ignore(int nSize)$/;"	f	class:CDataStream
ignore	src/streams.h	/^    void ignore(size_t nSize)$/;"	f	class:CAutoFile
ignore_list	build_msvc/msvc-autogen.py	/^ignore_list = [$/;"	v
illegal_callback	src/secp256k1/src/secp256k1.c	/^    secp256k1_callback illegal_callback;$/;"	m	struct:secp256k1_context_struct	file:
image	src/qt/notificator.cpp	/^    QByteArray image;$/;"	m	class:FreedesktopImage	file:
imagesOnButtons	src/qt/platformstyle.cpp	/^    const bool imagesOnButtons;$/;"	m	struct:__anon66	file:
imagesOnButtons	src/qt/platformstyle.h	/^    bool imagesOnButtons;$/;"	m	class:PlatformStyle
imm	src/leveldb/db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon18::IterState	file:
imm_	src/leveldb/db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
immature_balance	src/interfaces/wallet.h	/^    CAmount immature_balance = 0;$/;"	m	struct:interfaces::WalletBalances
immature_watch_only_balance	src/interfaces/wallet.h	/^    CAmount immature_watch_only_balance = 0;$/;"	m	struct:interfaces::WalletBalances
impl	src/qt/macos_appnap.h	/^    std::unique_ptr<CAppNapImpl> impl;$/;"	m	class:final
import	test/functional/test_framework/netutil.py	/^    import fcntl  # Linux only, so only import when required$/;"	i
import_deterministic_coinbase_privkeys	test/functional/test_framework/test_framework.py	/^    def import_deterministic_coinbase_privkeys(self):$/;"	m	class:BitcoinTestFramework
import_scripts	src/wallet/rpcdump.cpp	/^    std::set<CScript> import_scripts;$/;"	m	struct:ImportData	file:
importaddress	src/test/util.cpp	/^void importaddress(CWallet& wallet, const std::string& address)$/;"	f
importaddress	src/wallet/rpcdump.cpp	/^UniValue importaddress(const JSONRPCRequest& request)$/;"	f
imported	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
importlib	test/util/rpcauth-test.py	/^import importlib$/;"	i
importmulti	src/wallet/rpcdump.cpp	/^UniValue importmulti(const JSONRPCRequest& mainRequest)$/;"	f
importprivkey	src/wallet/rpcdump.cpp	/^UniValue importprivkey(const JSONRPCRequest& request)$/;"	f
importprunedfunds	src/wallet/rpcdump.cpp	/^UniValue importprunedfunds(const JSONRPCRequest& request)$/;"	f
importpubkey	src/wallet/rpcdump.cpp	/^UniValue importpubkey(const JSONRPCRequest& request)$/;"	f
imports	contrib/devtools/symbol-check.py	/^            if is_import == imports:$/;"	i
importwallet	src/wallet/rpcdump.cpp	/^UniValue importwallet(const JSONRPCRequest& request)$/;"	f
inBlock	src/miner.h	/^    CTxMemPool::setEntries inBlock;$/;"	m	class:BlockAssembler
inFileName	contrib/linearize/linearize-data.py	/^    def inFileName(self, fn):$/;"	m	class:BlockDataCopier
inMempool	src/policy/fees.h	/^    double inMempool = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
in_avail	src/streams.h	/^    int in_avail() const         { return size(); }$/;"	f	class:CDataStream
in_cache	src/leveldb/util/cache.cc	/^  bool in_cache;      \/\/ Whether entry is in the cache.$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
in_data	src/net.h	/^    bool in_data;                   \/\/ parsing header (false) or data (true)$/;"	m	class:CNetMessage
in_remove	contrib/filter-lcov.py	/^                    in_remove = True$/;"	v
in_remove	contrib/filter-lcov.py	/^                in_remove = False$/;"	v
in_remove	contrib/filter-lcov.py	/^in_remove = False$/;"	v
in_use_	src/leveldb/util/cache.cc	/^  LRUHandle in_use_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
include	contrib/devtools/circular-dependencies.py	/^                include = match.group(1)$/;"	v
include_HEADERS	src/Makefile	/^include_HEADERS = script\/bitcoinconsensus.h$/;"	m
include_HEADERS	src/secp256k1/Makefile	/^include_HEADERS = include\/secp256k1.h $(am__append_10) \\$/;"	m
include_HEADERS	src/univalue/Makefile	/^include_HEADERS = include\/univalue.h$/;"	m
included_module	contrib/devtools/circular-dependencies.py	/^                included_module = module_name(include)$/;"	v
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	doc/man/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	src/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	src/secp256k1/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	src/univalue/Makefile	/^includedir = ${prefix}\/include$/;"	m
incomingTransaction	src/qt/bitcoingui.cpp	/^void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName)$/;"	f	class:BitcoinGUI
incrementalRelayFee	src/policy/settings.cpp	/^CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);$/;"	v
indentStr	src/univalue/lib/univalue_write.cpp	/^static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, std::string& s)$/;"	f	file:
index	src/blockencodings.h	/^    uint16_t index;$/;"	m	struct:PrefilledTransaction
index	src/qt/addresstablemodel.cpp	/^    AddressTableEntry *index(int idx)$/;"	f	class:AddressTablePriv
index	src/qt/addresstablemodel.cpp	/^QModelIndex AddressTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:AddressTableModel
index	src/qt/bantablemodel.cpp	/^    CCombinedBan *index(int idx)$/;"	f	class:BanTablePriv
index	src/qt/bantablemodel.cpp	/^QModelIndex BanTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:BanTableModel
index	src/qt/peertablemodel.cpp	/^    CNodeCombinedStats *index(int idx)$/;"	f	class:PeerTablePriv
index	src/qt/peertablemodel.cpp	/^QModelIndex PeerTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:PeerTableModel
index	src/qt/recentrequeststablemodel.cpp	/^QModelIndex RecentRequestsTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
index	src/qt/transactiontablemodel.cpp	/^    TransactionRecord *index(interfaces::Wallet& wallet, int idx)$/;"	f	class:TransactionTablePriv
index	src/qt/transactiontablemodel.cpp	/^QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
index_	src/leveldb/db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	src/leveldb/table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	src/leveldb/table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	src/leveldb/table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	src/leveldb/table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	src/leveldb/table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	src/leveldb/table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
indexed_disconnected_transactions	src/txmempool.h	/^    > indexed_disconnected_transactions;$/;"	t	struct:DisconnectedBlockTransactions
indexed_modified_transaction_set	src/miner.h	/^> indexed_modified_transaction_set;$/;"	t
indexed_transaction_set	src/txmempool.h	/^    > indexed_transaction_set;$/;"	t	class:CTxMemPool
indexes	src/blockencodings.h	/^    std::vector<uint16_t> indexes;$/;"	m	class:BlockTransactionsRequest
indirect	src/prevector.h	/^            char* indirect;$/;"	m	struct:prevector::direct_or_indirect::__anon73
indirect_ptr	src/prevector.h	/^    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirect_ptr	src/prevector.h	/^    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirectmap	src/indirectmap.h	/^class indirectmap {$/;"	c
infinity	src/secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon103
infinity	src/secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon104
info	src/qt/receiverequestdialog.h	/^    SendCoinsRecipient info;$/;"	m	class:ReceiveRequestDialog
info	src/txmempool.cpp	/^TxMempoolInfo CTxMemPool::info(const uint256& hash) const$/;"	f	class:CTxMemPool
infoAll	src/txmempool.cpp	/^std::vector<TxMempoolInfo> CTxMemPool::infoAll() const$/;"	f	class:CTxMemPool
info_log	src/leveldb/include/leveldb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	doc/man/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	src/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	src/secp256k1/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	src/univalue/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
initEscapes	src/univalue/gen/gen.cpp	/^static bool initEscapes;$/;"	v	file:
initJsonEscape	src/univalue/gen/gen.cpp	/^static void initJsonEscape()$/;"	f	file:
initNetManager	src/qt/paymentserver.cpp	/^void PaymentServer::initNetManager()$/;"	f	class:PaymentServer
initTranslations	src/qt/bitcoin.cpp	/^static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)$/;"	f	file:
init_	src/leveldb/port/port_win.h	/^    bool init_;$/;"	m	class:leveldb::port::OnceType
init_flag	src/support/lockedpool.cpp	/^std::once_flag LockedPoolManager::init_flag;$/;"	m	class:LockedPoolManager	file:
init_flag	src/support/lockedpool.h	/^    static std::once_flag init_flag;$/;"	m	class:LockedPoolManager
initial	src/secp256k1/src/ecmult_gen.h	/^    secp256k1_gej initial;$/;"	m	struct:__anon100
initial_offset_	src/leveldb/db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	src/leveldb/db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_last_record_offsets_	src/leveldb/db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] =$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	src/leveldb/db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	src/leveldb/db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] =$/;"	m	class:leveldb::log::LogTest	file:
initialize	src/qt/bitcoin.cpp	/^void BitcoinCore::initialize()$/;"	f	class:BitcoinCore
initialize	src/test/fuzz/fuzz.cpp	/^static void initialize()$/;"	f	file:
initialize	test/functional/feature_block.py	/^    def initialize(self, base_block):$/;"	m	class:CBrokenBlock
initializeResult	src/qt/bitcoin.cpp	/^void BitcoinApplication::initializeResult(bool success)$/;"	f	class:BitcoinApplication
initialize_datadir	test/functional/feature_blocksdir.py	/^from test_framework.test_framework import BitcoinTestFramework, initialize_datadir$/;"	i
initialize_datadir	test/functional/test_framework/util.py	/^def initialize_datadir(dirname, n):$/;"	f
initialize_from_block	test/functional/test_framework/messages.py	/^    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):$/;"	m	class:HeaderAndShortIDs
inner	src/crypto/hmac_sha256.h	/^    CSHA256 inner;$/;"	m	class:CHMAC_SHA256
inner	src/crypto/hmac_sha512.h	/^    CSHA512 inner;$/;"	m	class:CHMAC_SHA512
inner	src/secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon112
input	src/crypto/chacha20.h	/^    uint32_t input[16];$/;"	m	class:ChaCha20
input	src/leveldb/db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input	src/timedata.h	/^    void input(T value)$/;"	f	class:CMedianFilter
input_version_	src/leveldb/db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs	src/node/psbt.h	/^    std::vector<PSBTInputAnalysis> inputs; \/\/!< More information about the individual inputs of the transaction$/;"	m	struct:PSBTAnalysis
inputs	src/psbt.h	/^    std::vector<PSBTInput> inputs;$/;"	m	struct:PartiallySignedTransaction
inputs_	src/leveldb/db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
insecure_rand	src/addrman.h	/^    FastRandomContext insecure_rand;$/;"	m	class:CAddrMan
insecure_rand	src/policy/fees.h	/^    FastRandomContext insecure_rand;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
insert	src/bloom.cpp	/^void CBloomFilter::insert(const COutPoint& outpoint)$/;"	f	class:CBloomFilter
insert	src/bloom.cpp	/^void CBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CBloomFilter
insert	src/bloom.cpp	/^void CBloomFilter::insert(const uint256& hash)$/;"	f	class:CBloomFilter
insert	src/bloom.cpp	/^void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CRollingBloomFilter
insert	src/bloom.cpp	/^void CRollingBloomFilter::insert(const uint256& hash)$/;"	f	class:CRollingBloomFilter
insert	src/cuckoocache.h	/^    inline void insert(Element e)$/;"	f	class:CuckooCache::cache
insert	src/indirectmap.h	/^    std::pair<iterator, bool> insert(const value_type& value) { return m.insert(value); }$/;"	f	class:indirectmap
insert	src/limitedmap.h	/^    void insert(const value_type& x)$/;"	f	class:limitedmap
insert	src/prevector.h	/^    iterator insert(iterator pos, const T& value) {$/;"	f	class:prevector
insert	src/prevector.h	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:prevector
insert	src/prevector.h	/^    void insert(iterator pos, size_type count, const T& value) {$/;"	f	class:prevector
insert	src/streams.h	/^    iterator insert(iterator it, const char x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	src/streams.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	src/streams.h	/^    void insert(iterator it, size_type n, const char x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	src/streams.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
insert	src/test/prevector_tests.cpp	/^    void insert(Size position, Size count, const T& value) {$/;"	f	class:prevector_tester
insert	src/test/prevector_tests.cpp	/^    void insert(Size position, const T& value) {$/;"	f	class:prevector_tester
insert	src/util/system.h	/^inline void insert(Tdst& dst, const Tsrc& src) {$/;"	f	namespace:util
insert	src/util/system.h	/^inline void insert(std::set<TsetT>& dst, const Tsrc& src) {$/;"	f	namespace:util
insert_cmd	contrib/devtools/copyright_header.py	/^def insert_cmd(argv):$/;"	f
insert_cpp_header	contrib/devtools/copyright_header.py	/^def insert_cpp_header(filename, file_lines, start_year, end_year):$/;"	f
insert_python_header	contrib/devtools/copyright_header.py	/^def insert_python_header(filename, file_lines, start_year, end_year):$/;"	f
insert_range	src/test/prevector_tests.cpp	/^    void insert_range(Size position, I first, I last) {$/;"	f	class:prevector_tester
insertion_order	src/txmempool.h	/^struct insertion_order {};$/;"	s
inspect	test/functional/test_framework/util.py	/^import inspect$/;"	i
install	contrib/devtools/optimize-pngs.py	/^from PIL import Image  # pip3 install Pillow$/;"	i
install_sh	Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/install-sh$/;"	m
install_sh	doc/man/Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/install-sh$/;"	m
install_sh	src/Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/install-sh$/;"	m
install_sh	src/secp256k1/Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/install-sh$/;"	m
install_sh	src/univalue/Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	doc/man/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	src/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	src/secp256k1/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	src/univalue/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	doc/man/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	src/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	src/secp256k1/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	src/univalue/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	doc/man/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	src/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	src/secp256k1/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	src/univalue/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance_of_cmaincleanup	src/validation.cpp	/^} instance_of_cmaincleanup;$/;"	v	typeref:class:CMainCleanup
instance_of_cnetcleanup	src/net.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
instance_of_cnetprocessingcleanup	src/net_processing.cpp	/^} instance_of_cnetprocessingcleanup;$/;"	v	typeref:class:CNetProcessingCleanup
instance_of_eccryptoclosure	src/script/bitcoinconsensus.cpp	/^ECCryptoClosure instance_of_eccryptoclosure;$/;"	m	namespace:__anon81	file:
instantiate	src/qt/networkstyle.cpp	/^const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)$/;"	f	class:NetworkStyle
instantiate	src/qt/platformstyle.cpp	/^const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)$/;"	f	class:PlatformStyle
int16_t	src/leveldb/port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	src/leveldb/port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_t	src/leveldb/port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	src/leveldb/port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
int_add_cmds	depends/funcs.mk	/^define int_add_cmds$/;"	m
int_config_attach_build_config	depends/funcs.mk	/^define int_config_attach_build_config$/;"	m
int_get_all_dependencies	depends/funcs.mk	/^define int_get_all_dependencies$/;"	m
int_get_build_id	depends/funcs.mk	/^define int_get_build_id$/;"	m
int_get_build_recipe_hash	depends/funcs.mk	/^define int_get_build_recipe_hash$/;"	m
int_vars	depends/funcs.mk	/^define int_vars$/;"	m
interface	src/qt/notificator.h	/^    QDBusInterface *interface;$/;"	m	class:Notificator
interfaces	src/dummywallet.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	src/init.h	/^namespace interfaces {$/;"	n
interfaces	src/interfaces/chain.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	src/interfaces/chain.h	/^namespace interfaces {$/;"	n
interfaces	src/interfaces/handler.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	src/interfaces/handler.h	/^namespace interfaces {$/;"	n
interfaces	src/interfaces/node.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	src/interfaces/node.h	/^namespace interfaces {$/;"	n
interfaces	src/interfaces/wallet.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	src/interfaces/wallet.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/addresstablemodel.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/bantablemodel.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/bitcoin.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/bitcoingui.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/clientmodel.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/guiutil.h	/^namespace interfaces$/;"	n
interfaces	src/qt/intro.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/optionsmodel.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/peertablemodel.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/rpcconsole.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/splashscreen.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/transactiondesc.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/transactionrecord.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/transactiontablemodel.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/utilitydialog.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/walletcontroller.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/walletmodel.h	/^namespace interfaces {$/;"	n
interfaces	src/qt/walletmodeltransaction.h	/^namespace interfaces {$/;"	n
interfaces	src/ui_interface.h	/^namespace interfaces {$/;"	n
interfaces	src/wallet/load.h	/^namespace interfaces {$/;"	n
interfaces	src/wallet/rpcwallet.h	/^namespace interfaces {$/;"	n
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with private key")$/;"	i
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with public key")$/;"	i
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal flag")$/;"	i
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
internal	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal flag")$/;"	i
internal_comparator	src/leveldb/db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator_	src/leveldb/db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	src/leveldb/table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
internal_filter_policy_	src/leveldb/db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	src/leveldb/db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
interruptNet	src/net.h	/^    CThreadInterrupt interruptNet;$/;"	m	class:CConnman
intro	src/qt/intro.cpp	/^    Intro *intro;$/;"	m	class:FreespaceChecker	file:
intval	src/test/serialize_tests.cpp	/^    int intval;$/;"	m	class:CSerializeMethodsTestSingle	file:
invalid	src/cuckoocache.h	/^    constexpr uint32_t invalid() const$/;"	f	class:CuckooCache::cache
invalid	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an invalid address")$/;"	i
invalid_txs	test/functional/feature_block.py	/^from data import invalid_txs$/;"	i
invalid_txs	test/functional/p2p_invalid_tx.py	/^from data import invalid_txs$/;"	i
invalidateblock	src/rpc/blockchain.cpp	/^static UniValue invalidateblock(const JSONRPCRequest& request)$/;"	f	file:
invlockorders	src/sync.cpp	/^    InvLockOrders invlockorders;$/;"	m	struct:LockData	file:
invoke	src/qt/transactiontablemodel.cpp	/^    void invoke(QObject *ttm)$/;"	f	struct:TransactionNotification
invoke	src/tinyformat.h	/^    static bool invoke(std::ostream& \/**\/, const T& \/**\/) { return false; }$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	src/tinyformat.h	/^    static bool invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	src/tinyformat.h	/^    static int invoke(const T& \/*value*\/)$/;"	f	struct:tinyformat::detail::convertToInt
invoke	src/tinyformat.h	/^    static int invoke(const T& value) { return static_cast<int>(value); }$/;"	f	struct:tinyformat::detail::convertToInt
invoke	src/tinyformat.h	/^    static void invoke(std::ostream& \/*out*\/, const T& \/*value*\/) { assert(0); }$/;"	f	struct:tinyformat::detail::formatValueAsType
invoke	src/tinyformat.h	/^    static void invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatValueAsType
involvesWatchAddress	src/qt/transactionrecord.h	/^    bool involvesWatchAddress;$/;"	m	class:TransactionRecord
io	contrib/devtools/clang-format-diff.py	/^import io$/;"	i
io	contrib/devtools/update-translations.py	/^import io$/;"	i
io	test/functional/wallet_bumpfee.py	/^import io$/;"	i
io	test/functional/wallet_txn_clone.py	/^import io$/;"	i
ip	src/netaddress.h	/^        unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
ip	src/qt/optionsmodel.cpp	/^    QString ip;$/;"	m	struct:ProxySetting	file:
ip	src/test/denialofservice_tests.cpp	/^static CService ip(uint32_t i)$/;"	f	file:
ipcParseCommandLine	src/qt/paymentserver.cpp	/^void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char* argv[])$/;"	f	class:PaymentServer
ipcSendCommandLine	src/qt/paymentserver.cpp	/^bool PaymentServer::ipcSendCommandLine()$/;"	f	class:PaymentServer
ipcServerName	src/qt/paymentserver.cpp	/^static QString ipcServerName()$/;"	f	file:
ipolicy_	src/leveldb/db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon30::Repairer	file:
is	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
isAbandoned	src/wallet/wallet.h	/^    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }$/;"	f	class:CMerkleTx
isArray	src/univalue/include/univalue.h	/^    bool isArray() const { return (typ == VARR); }$/;"	f	class:UniValue
isBool	src/univalue/include/univalue.h	/^    bool isBool() const { return (typ == VBOOL); }$/;"	f	class:UniValue
isCanonicalException	src/test/serialize_tests.cpp	/^static bool isCanonicalException(const std::ios_base::failure& ex)$/;"	f	file:
isClear	src/qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::isClear()$/;"	f	class:SendCoinsEntry
isDust	src/qt/guiutil.cpp	/^bool isDust(interfaces::Node& node, const QString& address, const CAmount& amount)$/;"	f	namespace:GUIUtil
isEmpty	src/bloom.h	/^    bool isEmpty;$/;"	m	class:CBloomFilter
isEnable	src/leveldb/util/env_win.cc	/^BOOL Win32FileLock::isEnable()$/;"	f	class:leveldb::Win32::Win32FileLock
isEnable	src/leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::isEnable()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
isEnable	src/leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::isEnable()$/;"	f	class:leveldb::Win32::Win32SequentialFile
isEnable	src/leveldb/util/env_win.cc	/^BOOL Win32WritableFile::isEnable()$/;"	f	class:leveldb::Win32::Win32WritableFile
isEnabled	src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  public static boolean isEnabled() {$/;"	m	class:Secp256k1Context
isFalse	src/univalue/include/univalue.h	/^    bool isFalse() const { return (typ == VBOOL) && (val != "1"); }$/;"	f	class:UniValue
isFull	src/bloom.h	/^    bool isFull;$/;"	m	class:CBloomFilter
isLayerVisible	src/qt/modaloverlay.h	/^    bool isLayerVisible() const { return layerIsVisible; }$/;"	f	class:ModalOverlay
isMultiwallet	src/qt/walletmodel.cpp	/^bool WalletModel::isMultiwallet()$/;"	f	class:WalletModel
isNull	src/univalue/include/univalue.h	/^    bool isNull() const { return (typ == VNULL); }$/;"	f	class:UniValue
isNum	src/univalue/include/univalue.h	/^    bool isNum() const { return (typ == VNUM); }$/;"	f	class:UniValue
isObject	src/univalue/include/univalue.h	/^    bool isObject() const { return (typ == VOBJ); }$/;"	f	class:UniValue
isObscured	src/qt/guiutil.cpp	/^bool isObscured(QWidget *w)$/;"	f	namespace:GUIUtil
isReleaseVersion	src/qt/clientmodel.cpp	/^bool ClientModel::isReleaseVersion() const$/;"	f	class:ClientModel
isReserved	src/wallet/wallet.h	/^    bool isReserved() const$/;"	f	class:WalletRescanReserver
isRestartRequired	src/qt/optionsmodel.cpp	/^bool OptionsModel::isRestartRequired() const$/;"	f	class:OptionsModel
isSpent	src/txmempool.cpp	/^bool CTxMemPool::isSpent(const COutPoint& outpoint) const$/;"	f	class:CTxMemPool
isStr	src/univalue/include/univalue.h	/^    bool isStr() const { return (typ == VSTR); }$/;"	f	class:UniValue
isTrue	src/univalue/include/univalue.h	/^    bool isTrue() const { return (typ == VBOOL) && (val == "1"); }$/;"	f	class:UniValue
isValid	src/qt/qvalidatedlineedit.cpp	/^bool QValidatedLineEdit::isValid()$/;"	f	class:QValidatedLineEdit
isValid	src/qt/walletmodel.h	/^        bool isValid() const { return valid; }$/;"	f	class:WalletModel::UnlockContext
isWalletEnabled	src/qt/walletmodel.cpp	/^bool WalletModel::isWalletEnabled()$/;"	f	class:WalletModel
is_abandoned	src/interfaces/wallet.h	/^    bool is_abandoned;$/;"	m	struct:interfaces::WalletTxStatus
is_cli_compiled	test/functional/test_framework/test_framework.py	/^    def is_cli_compiled(self):$/;"	m	class:BitcoinTestFramework
is_coinbase	src/interfaces/wallet.h	/^    bool is_coinbase;$/;"	m	struct:interfaces::WalletTx
is_coinbase	src/interfaces/wallet.h	/^    bool is_coinbase;$/;"	m	struct:interfaces::WalletTxStatus
is_compressed	test/functional/test_framework/key.py	/^    def is_compressed(self):$/;"	m	class:ECKey
is_compressed	test/functional/test_framework/key.py	/^    def is_compressed(self):$/;"	m	class:ECPubKey
is_connected	test/functional/test_framework/mininode.py	/^    def is_connected(self):$/;"	m	class:P2PConnection
is_convertible	src/tinyformat.h	/^struct is_convertible$/;"	s	namespace:tinyformat::detail
is_default	src/leveldb/db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
is_direct	src/prevector.h	/^    bool is_direct() const { return _size <= N; }$/;"	f	class:prevector
is_empty_signature	src/secp256k1/src/tests.c	/^int is_empty_signature(const secp256k1_ecdsa_signature *sig) {$/;"	f
is_final	src/interfaces/wallet.h	/^    bool is_final;$/;"	m	struct:interfaces::WalletTxStatus
is_final	src/node/psbt.h	/^    bool is_final; \/\/!< Whether the input has all required information including signatures$/;"	m	struct:PSBTInputAnalysis
is_in_main_chain	src/interfaces/wallet.h	/^    bool is_in_main_chain;$/;"	m	struct:interfaces::WalletTxStatus
is_mine	src/interfaces/wallet.h	/^    isminetype is_mine;$/;"	m	struct:interfaces::WalletAddress
is_node_stopped	test/functional/test_framework/test_node.py	/^    def is_node_stopped(self):$/;"	m	class:TestNode
is_null	test/functional/test_framework/messages.py	/^    def is_null(self):$/;"	m	class:CScriptWitness
is_null	test/functional/test_framework/messages.py	/^    def is_null(self):$/;"	m	class:CTxInWitness
is_null	test/functional/test_framework/messages.py	/^    def is_null(self):$/;"	m	class:CTxWitness
is_null_key	src/test/dbwrapper_tests.cpp	/^static bool is_null_key(const std::vector<unsigned char>& key) {$/;"	f	file:
is_open	src/fs.h	/^        bool is_open() { return m_filebuf.is_open(); }$/;"	f	class:fsbridge::ifstream
is_open	src/fs.h	/^        bool is_open() { return m_filebuf.is_open(); }$/;"	f	class:fsbridge::ofstream
is_opt_in	test/functional/wallet_listtransactions.py	/^        def is_opt_in(node, txid):$/;"	f	function:ListTransactionsTest.run_rbf_opt_in_test
is_set	src/qt/optionsmodel.cpp	/^    bool is_set;$/;"	m	struct:ProxySetting	file:
is_small_int	test/functional/test_framework/script.py	/^    def is_small_int(self):$/;"	m	class:CScriptOp
is_spent	src/interfaces/wallet.h	/^    bool is_spent = false;$/;"	m	struct:interfaces::WalletTxOut
is_trusted	src/interfaces/wallet.h	/^    bool is_trusted;$/;"	m	struct:interfaces::WalletTxStatus
is_valid	contrib/testgen/gen_key_io_test_vectors.py	/^def is_valid(v):$/;"	f
is_valid	src/univalue/lib/univalue_utffilter.h	/^    bool is_valid;$/;"	m	class:JSONUTF8StringFilter
is_valid	test/functional/test_framework/key.py	/^    def is_valid(self):$/;"	m	class:ECKey
is_valid	test/functional/test_framework/key.py	/^    def is_valid(self):$/;"	m	class:ECPubKey
is_valid	test/functional/test_framework/messages.py	/^    def is_valid(self):$/;"	m	class:CBlock
is_valid	test/functional/test_framework/messages.py	/^    def is_valid(self):$/;"	m	class:CTransaction
is_valid_bech32	contrib/testgen/gen_key_io_test_vectors.py	/^def is_valid_bech32(v):$/;"	f
is_valid_test_tmpdir	test/functional/combine_logs.py	/^    def is_valid_test_tmpdir(basename):$/;"	f	function:find_latest_test_dir
is_wallet_compiled	test/functional/test_framework/test_framework.py	/^    def is_wallet_compiled(self):$/;"	m	class:BitcoinTestFramework
is_wchar	src/tinyformat.h	/^template<> struct is_wchar<const wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	src/tinyformat.h	/^template<> struct is_wchar<wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	src/tinyformat.h	/^template<int n> struct is_wchar<const wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	src/tinyformat.h	/^template<int n> struct is_wchar<wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	src/tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	s	namespace:tinyformat::detail
is_x_coord	test/functional/test_framework/key.py	/^    def is_x_coord(self, x):$/;"	m	class:EllipticCurve
is_zmq_compiled	test/functional/test_framework/test_framework.py	/^    def is_zmq_compiled(self):$/;"	m	class:BitcoinTestFramework
islice	contrib/testgen/gen_key_io_test_vectors.py	/^from itertools import islice$/;"	i
isminefilter	src/script/ismine.h	/^typedef uint8_t isminefilter;$/;"	t
isminetype	src/script/ismine.h	/^enum isminetype$/;"	g
it	src/rpc/server.cpp	/^    std::list<RPCCommandExecutionInfo>::iterator it;$/;"	m	struct:RPCCommandExecution	file:
item_ptr	src/prevector.h	/^    T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
item_ptr	src/prevector.h	/^    const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
items	test/functional/rpc_rawtransaction.py	/^    def items(self):$/;"	m	class:multidict
iter	src/leveldb/table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter	src/miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:CTxMemPoolModifiedEntry
iter	src/miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:update_for_parent_inclusion
iter_	src/leveldb/db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon29::DBIter	file:
iter_	src/leveldb/db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	src/leveldb/db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	src/leveldb/table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	src/leveldb/table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
iter_all_templates	test/functional/data/invalid_txs.py	/^def iter_all_templates():$/;"	f
iterator	src/indirectmap.h	/^    typedef typename base::iterator iterator;$/;"	t	class:indirectmap
iterator	src/limitedmap.h	/^    typedef typename std::map<K, V>::iterator iterator;$/;"	t	class:limitedmap
iterator	src/prevector.h	/^        iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::iterator
iterator	src/prevector.h	/^    class iterator {$/;"	c	class:prevector
iterator	src/streams.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iterator_category	src/prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::const_reverse_iterator
iterator_category	src/prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::reverse_iterator
iterator_category	src/prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::const_iterator
iterator_category	src/prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::iterator
iteroptions	src/dbwrapper.h	/^    leveldb::ReadOptions iteroptions;$/;"	m	class:CDBWrapper
iters	contrib/testgen/gen_key_io_test_vectors.py	/^    iters = {'valid':gen_valid_vectors, 'invalid':gen_invalid_vectors}$/;"	v
itertools	test/functional/combine_logs.py	/^import itertools$/;"	i
itertools	test/functional/wallet_address_types.py	/^import itertools$/;"	i
itertools	test/functional/wallet_import_rescan.py	/^import itertools$/;"	i
itostr	src/util/strencodings.cpp	/^std::string itostr(int n)$/;"	f
iv	src/crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES256CBCDecrypt
iv	src/crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES256CBCEncrypt
jacobi_symbol	test/functional/test_framework/key.py	/^def jacobi_symbol(n, k):$/;"	f
jinja2	test/functional/combine_logs.py	/^            import jinja2$/;"	i
join	test/functional/test_framework/script.py	/^    def join(self, iterable):$/;"	m	class:CScript
join_array	test/lint/lint-locale-dependence.sh	/^function join_array {$/;"	f
join_network	test/functional/test_framework/test_framework.py	/^    def join_network(self):$/;"	m	class:BitcoinTestFramework
join_tmp	test/functional/combine_logs.py	/^    def join_tmp(basename):$/;"	f	function:find_latest_test_dir
joinpsbts	src/rpc/rawtransaction.cpp	/^UniValue joinpsbts(const JSONRPCRequest& request)$/;"	f
json	contrib/devtools/github-merge.py	/^import json$/;"	i
json	contrib/linearize/linearize-hashes.py	/^import json$/;"	i
json	contrib/testgen/gen_key_io_test_vectors.py	/^    import json$/;"	i
json	test/functional/interface_rest.py	/^import json$/;"	i
json	test/functional/rpc_getblockstats.py	/^import json$/;"	i
json	test/functional/rpc_psbt.py	/^import json$/;"	i
json	test/functional/test_framework/authproxy.py	/^import json$/;"	i
json	test/functional/test_framework/test_node.py	/^import json$/;"	i
json	test/functional/test_framework/util.py	/^import json$/;"	i
json	test/util/bitcoin-util-test.py	/^import json$/;"	i
json1	src/univalue/test/object.cpp	/^static const char *json1 =$/;"	v	file:
jsonTokenIsValue	src/univalue/include/univalue.h	/^static inline bool jsonTokenIsValue(enum jtokentype jtt)$/;"	f
json_escape	src/univalue/lib/univalue_write.cpp	/^static std::string json_escape(const std::string& inS)$/;"	f	file:
json_isdigit	src/univalue/lib/univalue_read.cpp	/^static bool json_isdigit(int ch)$/;"	f	file:
json_isspace	src/univalue/include/univalue.h	/^static inline bool json_isspace(int ch)$/;"	f
json_tests	src/test/data/base58_encode_decode.json.h	/^namespace json_tests{$/;"	n
json_tests	src/test/data/blockfilters.json.h	/^namespace json_tests{$/;"	n
json_tests	src/test/data/key_io_invalid.json.h	/^namespace json_tests{$/;"	n
json_tests	src/test/data/key_io_valid.json.h	/^namespace json_tests{$/;"	n
json_tests	src/test/data/script_tests.json.h	/^namespace json_tests{$/;"	n
json_tests	src/test/data/sighash.json.h	/^namespace json_tests{$/;"	n
json_tests	src/test/data/tx_invalid.json.h	/^namespace json_tests{$/;"	n
json_tests	src/test/data/tx_valid.json.h	/^namespace json_tests{$/;"	n
jtokentype	src/univalue/include/univalue.h	/^enum jtokentype {$/;"	g
k	src/secp256k1/src/hash.h	/^    unsigned char k[32];$/;"	m	struct:__anon113
k0	src/coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedOutpointHasher
k0	src/txmempool.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
k1	src/coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedOutpointHasher
k1	src/crypto/sha1.cpp	/^const uint32_t k1 = 0x5A827999ul;$/;"	m	namespace:__anon38::sha1	file:
k1	src/txmempool.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
k2	src/crypto/sha1.cpp	/^const uint32_t k2 = 0x6ED9EBA1ul;$/;"	m	namespace:__anon38::sha1	file:
k3	src/crypto/sha1.cpp	/^const uint32_t k3 = 0x8F1BBCDCul;$/;"	m	namespace:__anon38::sha1	file:
k4	src/crypto/sha1.cpp	/^const uint32_t k4 = 0xCA62C1D6ul;$/;"	m	namespace:__anon38::sha1	file:
kBadRecord	src/leveldb/db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon28
kBlockSize	src/leveldb/db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	src/leveldb/helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon35::FileState::__anon36	file:
kBlockSize	src/leveldb/util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	src/leveldb/table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	src/leveldb/util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	src/leveldb/util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	src/leveldb/util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	src/leveldb/db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	src/leveldb/db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	src/leveldb/db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kCorruption	src/leveldb/include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCount	src/leveldb/db/autocompact_test.cc	/^static const int kCount = kTotalSize \/ kValueSize;$/;"	m	namespace:leveldb	file:
kCurrentFile	src/leveldb/db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	src/leveldb/db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	src/leveldb/db/db_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kDelayMicros	src/leveldb/util/env_posix_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDelayMicros	src/leveldb/util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeleted	src/leveldb/db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kDeletedFile	src/leveldb/db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	src/leveldb/db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	src/leveldb/table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon14
kEnd	src/leveldb/db/db_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kEof	src/leveldb/db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon28
kFilter	src/leveldb/db/db_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kFilterBase	src/leveldb/table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	src/leveldb/table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	src/leveldb/db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	src/leveldb/db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon29::DBIter::Direction	file:
kForward	src/leveldb/table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon11::MergingIterator::Direction	file:
kFound	src/leveldb/db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kFullType	src/leveldb/db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	src/leveldb/db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	src/leveldb/db/log_format.h	/^static const int kHeaderSize = 4 + 2 + 1;$/;"	m	namespace:leveldb::log
kIOError	src/leveldb/include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	src/leveldb/db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	src/leveldb/include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	src/leveldb/db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	src/leveldb/db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	src/leveldb/db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	src/leveldb/db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	src/leveldb/db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	src/leveldb/port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	src/leveldb/port/port_posix.h	/^static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLittleEndian	src/leveldb/port/port_win.h	/^static const bool kLittleEndian = true;$/;"	m	namespace:leveldb::port
kLogFile	src/leveldb/db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	src/leveldb/db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMMapLimit	src/leveldb/util/env_posix_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMMapLimit	src/leveldb/util/env_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMajorVersion	src/leveldb/include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	src/leveldb/util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	src/leveldb/table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon13
kMaxHeight	src/leveldb/db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon21
kMaxMemCompactLevel	src/leveldb/db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxNumValues	src/leveldb/db/fault_injection_test.cc	/^static const int kMaxNumValues = 2000;$/;"	m	namespace:leveldb	file:
kMaxRecordType	src/leveldb/db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	src/leveldb/db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	src/leveldb/db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	src/leveldb/include/leveldb/db.h	/^static const int kMinorVersion = 20;$/;"	m	namespace:leveldb
kNewFile	src/leveldb/db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	src/leveldb/db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	src/leveldb/include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	src/leveldb/db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kNotFound	src/leveldb/include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	src/leveldb/include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	src/leveldb/util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon6
kNumIterations	src/leveldb/db/fault_injection_test.cc	/^static const size_t kNumIterations = 3;$/;"	m	namespace:leveldb	file:
kNumKeys	src/leveldb/db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon24	file:
kNumKeys	src/leveldb/issues/issue178_test.cc	/^const int kNumKeys = 1100000;$/;"	m	namespace:__anon34	file:
kNumLevels	src/leveldb/db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	src/leveldb/db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	src/leveldb/util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon4	file:
kNumShards	src/leveldb/util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon4	file:
kNumTestArgs	src/leveldb/table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kNumThreads	src/leveldb/db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon24	file:
kOk	src/leveldb/include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	src/leveldb/db/version_edit.cc	/^  kPrevLogNumber        = 9$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	src/leveldb/db/dbformat.h	/^static const int kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReadOnlyFileLimit	src/leveldb/util/env_posix_test.cc	/^static const int kReadOnlyFileLimit = 4;$/;"	m	namespace:leveldb	file:
kReadOnlyFileLimit	src/leveldb/util/env_test.cc	/^static const int kReadOnlyFileLimit = 4;$/;"	m	namespace:leveldb	file:
kReuse	src/leveldb/db/db_test.cc	/^    kReuse,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kReverse	src/leveldb/db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon29::DBIter::Direction	file:
kReverse	src/leveldb/table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon11::MergingIterator::Direction	file:
kSnappyCompression	src/leveldb/include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kTableFile	src/leveldb/db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	src/leveldb/table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTempFile	src/leveldb/db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	src/leveldb/table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTestSeconds	src/leveldb/db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon24	file:
kTotalSize	src/leveldb/db/autocompact_test.cc	/^static const int kTotalSize = 100 * 1024 * 1024;$/;"	m	namespace:leveldb	file:
kTypeDeletion	src/leveldb/db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	src/leveldb/db/dbformat.h	/^  kTypeValue = 0x1$/;"	e	enum:leveldb::ValueType
kUncompressed	src/leveldb/db/db_test.cc	/^    kUncompressed,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kValueSize	src/leveldb/db/autocompact_test.cc	/^static const int kValueSize = 200 * 1024;$/;"	m	namespace:leveldb	file:
kValueSize	src/leveldb/db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueSize	src/leveldb/db/fault_injection_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	src/leveldb/db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	src/leveldb/util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb	file:
kZeroType	src/leveldb/db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	src/leveldb/util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon3::BloomFilterPolicy	file:
kernel32	test/functional/test_runner.py	/^        kernel32 = ctypes.windll.kernel32$/;"	v
key	src/crypto/ctaes/test.c	/^    const char* key;$/;"	m	struct:__anon44	file:
key	src/key.h	/^    CKey key;$/;"	m	struct:CExtKey
key	src/leveldb/db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon29::DBIter
key	src/leveldb/db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	src/leveldb/db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	src/leveldb/db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	src/leveldb/db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	src/leveldb/db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	src/leveldb/db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	src/leveldb/table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	src/leveldb/table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon12::EmptyIterator
key	src/leveldb/table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	src/leveldb/table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon11::MergingIterator
key	src/leveldb/table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	src/leveldb/table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
key	src/leveldb/util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon4::LRUHandle
key	src/secp256k1/src/bench_sign.c	/^    unsigned char key[32];$/;"	m	struct:__anon102	file:
key	src/secp256k1/src/bench_verify.c	/^    unsigned char key[32];$/;"	m	struct:__anon106	file:
key	src/txdb.cpp	/^    char key;$/;"	m	struct:__anon121::CoinEntry	file:
key	test/functional/wallet_importmulti.py	/^        self.log.info("Addresses should have hd keypath and master key id after import with key origin")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address with key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with private key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with public key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key and with watchonly")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with public key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
key	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
key0	src/test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key0C	src/test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key1	src/test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key1C	src/test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key2	src/test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key2C	src/test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
keyPressEvent	src/qt/coincontroltreewidget.cpp	/^void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)$/;"	f	class:CoinControlTreeWidget
keyPressEvent	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)$/;"	f	class:ReceiveCoinsDialog
keyPressEvent	src/qt/rpcconsole.cpp	/^void RPCConsole::keyPressEvent(QKeyEvent *event)$/;"	f	class:RPCConsole
keyTmp	src/txdb.h	/^    std::pair<char, COutPoint> keyTmp;$/;"	m	class:CCoinsViewDBCursor
key_	src/leveldb/table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	src/leveldb/table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	src/leveldb/util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
key_io_invalid	src/test/data/key_io_invalid.json.h	/^static unsigned const char key_io_invalid[] = {$/;"	m	namespace:json_tests
key_io_valid	src/test/data/key_io_valid.json.h	/^static unsigned const char key_io_valid[] = {$/;"	m	namespace:json_tests
key_length	src/leveldb/util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
key_match_	src/leveldb/db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t	file:
key_origin	src/wallet/walletdb.h	/^    KeyOriginInfo key_origin; \/\/ Key origin info with path and fingerprint$/;"	m	class:CKeyMetadata
key_origins	src/wallet/rpcdump.cpp	/^    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> key_origins;$/;"	m	struct:ImportData	file:
key_to_p2pkh	test/functional/test_framework/address.py	/^def key_to_p2pkh(key, main = False):$/;"	f
key_to_p2sh_p2wpkh	test/functional/test_framework/address.py	/^def key_to_p2sh_p2wpkh(key, main = False):$/;"	f
key_to_p2wpkh	test/functional/test_framework/address.py	/^def key_to_p2wpkh(key, main = False):$/;"	f
key_type	src/limitedmap.h	/^    typedef K key_type;$/;"	t	class:limitedmap
keydata	src/key.h	/^    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;$/;"	m	class:CKey
keyhash_to_p2pkh	test/functional/test_framework/address.py	/^def keyhash_to_p2pkh(hash, main = False):$/;"	f
keypoolrefill	src/wallet/rpcwallet.cpp	/^static UniValue keypoolrefill(const JSONRPCRequest& request)$/;"	f	file:
keys	src/script/sign.h	/^    std::map<CKeyID, CKey> keys;$/;"	m	struct:final
keys	src/univalue/include/univalue.h	/^    std::vector<std::string> keys;$/;"	m	class:UniValue
keys	test/functional/wallet_createwallet.py	/^        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')$/;"	i
keys	test/functional/wallet_createwallet.py	/^        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)$/;"	i
keys	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
keys	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
keys	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
keys	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
keys	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
keys_	src/leveldb/table/filter_block.h	/^  std::string keys_;              \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	src/leveldb/util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest	file:
keysize	src/crypto/ctaes/test.c	/^    int keysize;$/;"	m	struct:__anon44	file:
kill_and_join	test/functional/test_runner.py	/^    def kill_and_join(self):$/;"	m	class:TestHandler
kstart_	src/leveldb/db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
label	src/qt/addresstablemodel.cpp	/^    QString label;$/;"	m	struct:AddressTableEntry	file:
label	src/qt/walletmodel.h	/^    QString label;$/;"	m	class:SendCoinsRecipient
labelBlocksIcon	src/qt/bitcoingui.h	/^    GUIUtil::ClickableLabel* labelBlocksIcon = nullptr;$/;"	m	class:BitcoinGUI
labelForAddress	src/qt/addresstablemodel.cpp	/^QString AddressTableModel::labelForAddress(const QString &address) const$/;"	f	class:AddressTableModel
labelProxyIcon	src/qt/bitcoingui.h	/^    GUIUtil::ClickableLabel* labelProxyIcon = nullptr;$/;"	m	class:BitcoinGUI
labelWalletEncryptionIcon	src/qt/bitcoingui.h	/^    QLabel* labelWalletEncryptionIcon = nullptr;$/;"	m	class:BitcoinGUI
labelWalletHDStatusIcon	src/qt/bitcoingui.h	/^    QLabel* labelWalletHDStatusIcon = nullptr;$/;"	m	class:BitcoinGUI
lambda1	configure	/^      lambda1();$/;"	f
lambda2	configure	/^      lambda2();$/;"	f
language	src/qt/optionsmodel.h	/^    QString language;$/;"	m	class:OptionsModel
largest	src/leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	src/leveldb/db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
lastColumnIndex	src/qt/guiutil.h	/^            int lastColumnIndex;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
lastColumnMinimumWidth	src/qt/guiutil.h	/^            int lastColumnMinimumWidth;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
lastRollingFeeUpdate	src/txmempool.h	/^    mutable int64_t lastRollingFeeUpdate;$/;"	m	class:CTxMemPool
last_block_equals	test/functional/p2p_fingerprint.py	/^    def last_block_equals(self, expected_hash, node):$/;"	m	class:P2PFingerprintTest
last_failed_block	src/wallet/wallet.h	/^        uint256 last_failed_block;$/;"	m	struct:final::ScanResult
last_header_equals	test/functional/p2p_fingerprint.py	/^    def last_header_equals(self, expected_hash, node):$/;"	m	class:P2PFingerprintTest
last_id_	src/leveldb/util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon4::ShardedLRUCache	file:
last_key	src/leveldb/table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	src/leveldb/table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	src/leveldb/db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon19::Stats	file:
last_op_finish_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_op_finish_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	src/leveldb/db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_record_offset_	src/leveldb/db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_scanned_block	src/wallet/wallet.h	/^        uint256 last_scanned_block;$/;"	m	struct:final::ScanResult
last_scanned_height	src/wallet/wallet.h	/^        Optional<int> last_scanned_height;$/;"	m	struct:final::ScanResult
last_sequence_	src/leveldb/db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	src/leveldb/db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
latestblock	src/rpc/blockchain.cpp	/^static CUpdatedBlock latestblock;$/;"	v	file:
layerIsVisible	src/qt/modaloverlay.h	/^    bool layerIsVisible;$/;"	m	class:ModalOverlay
le16toh	src/compat/endian.h	/^inline uint16_t le16toh(uint16_t little_endian_16bits)$/;"	f
le32toh	src/compat/endian.h	/^inline uint32_t le32toh(uint32_t little_endian_32bits)$/;"	f
le64toh	src/compat/endian.h	/^inline uint64_t le64toh(uint64_t little_endian_64bits)$/;"	f
left	src/crypto/sha1.cpp	/^uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }$/;"	f	namespace:__anon38::sha1
left	src/memusage.h	/^    void* left;$/;"	m	struct:memusage::stl_tree_node
leftMempool	src/policy/fees.h	/^    double leftMempool = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
length	src/script/standard.h	/^    unsigned int length;$/;"	m	struct:WitnessUnknown
length_	src/leveldb/util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon4::HandleTable	file:
length_	src/leveldb/util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
level	src/leveldb/db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	src/leveldb/db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	src/leveldb/db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	src/leveldb/db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	src/leveldb/db/autocompact_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/builder.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/corruption_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/dumpfile.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/fault_injection_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/filename.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/leveldbutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/recovery_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/version_set_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/doc/bench/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/dumpfile.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/issues/issue200_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/port/port_posix_sse.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/port/port_win.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/port/port_win.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/block.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/table/filter_block_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/format.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/merger.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/arena.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/bloom_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/coding.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/env_posix_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/env_posix_test_helper.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/env_win.cc	/^namespace leveldb$/;"	n	file:
leveldb	src/leveldb/util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/hash.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/hash_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/logging.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/random.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	src/leveldb/util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	src/leveldb/util/testutil.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	src/leveldb/db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_cache_create_lru	src/leveldb/db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	src/leveldb/db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	src/leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s	file:
leveldb_cache_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	src/leveldb/db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	src/leveldb/db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	src/leveldb/db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	src/leveldb/db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	src/leveldb/db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	src/leveldb/db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	src/leveldb/db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	src/leveldb/db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	src/leveldb/db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	src/leveldb/db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_env_destroy	src/leveldb/db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	src/leveldb/db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	src/leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s	file:
leveldb_filelock_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	src/leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	src/leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	src/leveldb/db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	src/leveldb/db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	src/leveldb/db/c.cc	/^void leveldb_free(void* ptr) {$/;"	f
leveldb_get	src/leveldb/db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	src/leveldb/db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	src/leveldb/db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	src/leveldb/db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	src/leveldb/db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	src/leveldb/db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	src/leveldb/db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	src/leveldb/db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	src/leveldb/db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	src/leveldb/db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	src/leveldb/db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	src/leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s	file:
leveldb_iterator_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_libleveldb_a_AR	src/Makefile	/^leveldb_libleveldb_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_a_CPPFLAGS	src/Makefile	/^leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)$/;"	m
leveldb_libleveldb_a_CXXFLAGS	src/Makefile	/^leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
leveldb_libleveldb_a_LIBADD	src/Makefile	/^leveldb_libleveldb_a_LIBADD =$/;"	m
leveldb_libleveldb_a_OBJECTS	src/Makefile	/^leveldb_libleveldb_a_OBJECTS = $(am_leveldb_libleveldb_a_OBJECTS)$/;"	m
leveldb_libleveldb_a_SOURCES	src/Makefile	/^leveldb_libleveldb_a_SOURCES =  \\$/;"	m
leveldb_libleveldb_sse42_a_AR	src/Makefile	/^leveldb_libleveldb_sse42_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_sse42_a_CPPFLAGS	src/Makefile	/^leveldb_libleveldb_sse42_a_CPPFLAGS =  \\$/;"	m
leveldb_libleveldb_sse42_a_CXXFLAGS	src/Makefile	/^leveldb_libleveldb_sse42_a_CXXFLAGS =  \\$/;"	m
leveldb_libleveldb_sse42_a_LIBADD	src/Makefile	/^leveldb_libleveldb_sse42_a_LIBADD =$/;"	m
leveldb_libleveldb_sse42_a_OBJECTS	src/Makefile	/^leveldb_libleveldb_sse42_a_OBJECTS =  \\$/;"	m
leveldb_libleveldb_sse42_a_SOURCES	src/Makefile	/^leveldb_libleveldb_sse42_a_SOURCES = leveldb\/port\/port_posix_sse.cc$/;"	m
leveldb_libmemenv_a_AR	src/Makefile	/^leveldb_libmemenv_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libmemenv_a_CPPFLAGS	src/Makefile	/^leveldb_libmemenv_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)$/;"	m
leveldb_libmemenv_a_CXXFLAGS	src/Makefile	/^leveldb_libmemenv_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)$/;"	m
leveldb_libmemenv_a_LIBADD	src/Makefile	/^leveldb_libmemenv_a_LIBADD =$/;"	m
leveldb_libmemenv_a_OBJECTS	src/Makefile	/^leveldb_libmemenv_a_OBJECTS = $(am_leveldb_libmemenv_a_OBJECTS)$/;"	m
leveldb_libmemenv_a_SOURCES	src/Makefile	/^leveldb_libmemenv_a_SOURCES =  \\$/;"	m
leveldb_logger_t	src/leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s	file:
leveldb_logger_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	src/leveldb/db/c.cc	/^int leveldb_major_version() {$/;"	f
leveldb_minor_version	src/leveldb/db/c.cc	/^int leveldb_minor_version() {$/;"	f
leveldb_no_compression	src/leveldb/include/leveldb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon10
leveldb_open	src/leveldb/db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	src/leveldb/db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	src/leveldb/db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	src/leveldb/db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	src/leveldb/db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	src/leveldb/db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	src/leveldb/db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	src/leveldb/db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	src/leveldb/db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	src/leveldb/db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	src/leveldb/db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	src/leveldb/db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	src/leveldb/db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	src/leveldb/db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	src/leveldb/db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	src/leveldb/db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	src/leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s	file:
leveldb_options_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	src/leveldb/db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	src/leveldb/db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	src/leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s	file:
leveldb_randomfile_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	src/leveldb/db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	src/leveldb/db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	src/leveldb/db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	src/leveldb/db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	src/leveldb/db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	src/leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s	file:
leveldb_readoptions_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	src/leveldb/db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	src/leveldb/db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	src/leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s	file:
leveldb_seqfile_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	src/leveldb/include/leveldb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon10
leveldb_snapshot_t	src/leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s	file:
leveldb_snapshot_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	src/leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s	file:
leveldb_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	src/leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s	file:
leveldb_writablefile_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	src/leveldb/db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	src/leveldb/db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	src/leveldb/db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	src/leveldb/db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	src/leveldb/db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	src/leveldb/db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	src/leveldb/db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	src/leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s	file:
leveldb_writebatch_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	src/leveldb/db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	src/leveldb/db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	src/leveldb/db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	src/leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s	file:
leveldb_writeoptions_t	src/leveldb/include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	src/leveldb/db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
lf_cb	src/support/lockedpool.h	/^    LockingFailed_Callback lf_cb;$/;"	m	class:LockedPool
lib_LTLIBRARIES	src/Makefile	/^lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)$/;"	m
lib_LTLIBRARIES	src/secp256k1/Makefile	/^lib_LTLIBRARIES = libsecp256k1.la$/;"	m
lib_LTLIBRARIES	src/univalue/Makefile	/^lib_LTLIBRARIES = libunivalue.la$/;"	m
lib_sources	build_msvc/msvc-autogen.py	/^lib_sources = {}$/;"	v
libbitcoin_cli_a_AR	src/Makefile	/^libbitcoin_cli_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_cli_a_CPPFLAGS	src/Makefile	/^libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_cli_a_CXXFLAGS	src/Makefile	/^libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_cli_a_LIBADD	src/Makefile	/^libbitcoin_cli_a_LIBADD =$/;"	m
libbitcoin_cli_a_OBJECTS	src/Makefile	/^libbitcoin_cli_a_OBJECTS = $(am_libbitcoin_cli_a_OBJECTS)$/;"	m
libbitcoin_cli_a_SOURCES	src/Makefile	/^libbitcoin_cli_a_SOURCES = \\$/;"	m
libbitcoin_common_a_AR	src/Makefile	/^libbitcoin_common_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_common_a_CPPFLAGS	src/Makefile	/^libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_common_a_CXXFLAGS	src/Makefile	/^libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_common_a_LIBADD	src/Makefile	/^libbitcoin_common_a_LIBADD =$/;"	m
libbitcoin_common_a_OBJECTS	src/Makefile	/^libbitcoin_common_a_OBJECTS = $(am_libbitcoin_common_a_OBJECTS)$/;"	m
libbitcoin_common_a_SOURCES	src/Makefile	/^libbitcoin_common_a_SOURCES = \\$/;"	m
libbitcoin_consensus_a_AR	src/Makefile	/^libbitcoin_consensus_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_consensus_a_CPPFLAGS	src/Makefile	/^libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_consensus_a_CXXFLAGS	src/Makefile	/^libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_consensus_a_LIBADD	src/Makefile	/^libbitcoin_consensus_a_LIBADD =$/;"	m
libbitcoin_consensus_a_OBJECTS	src/Makefile	/^libbitcoin_consensus_a_OBJECTS = $(am_libbitcoin_consensus_a_OBJECTS)$/;"	m
libbitcoin_consensus_a_SOURCES	src/Makefile	/^libbitcoin_consensus_a_SOURCES = \\$/;"	m
libbitcoin_server_a_AR	src/Makefile	/^libbitcoin_server_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_server_a_CPPFLAGS	src/Makefile	/^libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)$/;"	m
libbitcoin_server_a_CXXFLAGS	src/Makefile	/^libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_server_a_LIBADD	src/Makefile	/^libbitcoin_server_a_LIBADD =$/;"	m
libbitcoin_server_a_OBJECTS	src/Makefile	/^libbitcoin_server_a_OBJECTS = $(am_libbitcoin_server_a_OBJECTS)$/;"	m
libbitcoin_server_a_SOURCES	src/Makefile	/^libbitcoin_server_a_SOURCES = addrdb.cpp addrman.cpp banman.cpp \\$/;"	m
libbitcoin_util_a_AR	src/Makefile	/^libbitcoin_util_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_util_a_CPPFLAGS	src/Makefile	/^libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_util_a_CXXFLAGS	src/Makefile	/^libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_util_a_LIBADD	src/Makefile	/^libbitcoin_util_a_LIBADD =$/;"	m
libbitcoin_util_a_OBJECTS	src/Makefile	/^libbitcoin_util_a_OBJECTS = $(am_libbitcoin_util_a_OBJECTS) \\$/;"	m
libbitcoin_util_a_SOURCES	src/Makefile	/^libbitcoin_util_a_SOURCES = support\/lockedpool.cpp chainparamsbase.cpp \\$/;"	m
libbitcoin_wallet_a_AR	src/Makefile	/^libbitcoin_wallet_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_wallet_a_CPPFLAGS	src/Makefile	/^libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_wallet_a_CXXFLAGS	src/Makefile	/^libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_wallet_a_LIBADD	src/Makefile	/^libbitcoin_wallet_a_LIBADD =$/;"	m
libbitcoin_wallet_a_OBJECTS	src/Makefile	/^libbitcoin_wallet_a_OBJECTS = $(am_libbitcoin_wallet_a_OBJECTS)$/;"	m
libbitcoin_wallet_a_SOURCES	src/Makefile	/^libbitcoin_wallet_a_SOURCES = \\$/;"	m
libbitcoin_wallet_tool_a_AR	src/Makefile	/^libbitcoin_wallet_tool_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_wallet_tool_a_CPPFLAGS	src/Makefile	/^libbitcoin_wallet_tool_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_wallet_tool_a_CXXFLAGS	src/Makefile	/^libbitcoin_wallet_tool_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_wallet_tool_a_LIBADD	src/Makefile	/^libbitcoin_wallet_tool_a_LIBADD =$/;"	m
libbitcoin_wallet_tool_a_OBJECTS	src/Makefile	/^libbitcoin_wallet_tool_a_OBJECTS =  \\$/;"	m
libbitcoin_wallet_tool_a_SOURCES	src/Makefile	/^libbitcoin_wallet_tool_a_SOURCES = \\$/;"	m
libbitcoin_zmq_a_AR	src/Makefile	/^libbitcoin_zmq_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_zmq_a_CPPFLAGS	src/Makefile	/^libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)$/;"	m
libbitcoin_zmq_a_CXXFLAGS	src/Makefile	/^libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_zmq_a_LIBADD	src/Makefile	/^libbitcoin_zmq_a_LIBADD =$/;"	m
libbitcoin_zmq_a_OBJECTS	src/Makefile	/^libbitcoin_zmq_a_OBJECTS = $(am_libbitcoin_zmq_a_OBJECTS)$/;"	m
libbitcoin_zmq_a_SOURCES	src/Makefile	/^libbitcoin_zmq_a_SOURCES = \\$/;"	m
libbitcoinconsensus_la_CPPFLAGS	src/Makefile	/^libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)\/obj -I$(srcdir)\/secp256k1\/include -DBUILD_BITCOIN_INTERNAL$/;"	m
libbitcoinconsensus_la_CXXFLAGS	src/Makefile	/^libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoinconsensus_la_DEPENDENCIES	src/Makefile	/^libbitcoinconsensus_la_DEPENDENCIES =  \\$/;"	m
libbitcoinconsensus_la_LDFLAGS	src/Makefile	/^libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)$/;"	m
libbitcoinconsensus_la_LIBADD	src/Makefile	/^libbitcoinconsensus_la_LIBADD = $(LIBSECP256K1)$/;"	m
libbitcoinconsensus_la_LINK	src/Makefile	/^libbitcoinconsensus_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libbitcoinconsensus_la_OBJECTS	src/Makefile	/^libbitcoinconsensus_la_OBJECTS = $(am_libbitcoinconsensus_la_OBJECTS)$/;"	m
libbitcoinconsensus_la_SOURCES	src/Makefile	/^libbitcoinconsensus_la_SOURCES = $(crypto_libbitcoin_crypto_base_a_SOURCES) \\$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	doc/man/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	src/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	src/secp256k1/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	src/univalue/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libevent_log_cb	src/bitcoin-cli.cpp	/^static void libevent_log_cb(int severity, const char *msg)$/;"	f	file:
libevent_log_cb	src/httpserver.cpp	/^static void libevent_log_cb(int severity, const char *msg)$/;"	f	file:
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	doc/man/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	src/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	src/secp256k1/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	src/univalue/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libs	build_msvc/msvc-autogen.py	/^libs = [$/;"	v
libsecp256k1_common_la_LIBADD	src/secp256k1/Makefile	/^libsecp256k1_common_la_LIBADD =$/;"	m
libsecp256k1_common_la_OBJECTS	src/secp256k1/Makefile	/^libsecp256k1_common_la_OBJECTS = $(am_libsecp256k1_common_la_OBJECTS)$/;"	m
libsecp256k1_jni_la_CPPFLAGS	src/secp256k1/Makefile	/^libsecp256k1_jni_la_CPPFLAGS = -DSECP256K1_BUILD $(JNI_INCLUDES)$/;"	m
libsecp256k1_jni_la_LIBADD	src/secp256k1/Makefile	/^libsecp256k1_jni_la_LIBADD =$/;"	m
libsecp256k1_jni_la_OBJECTS	src/secp256k1/Makefile	/^libsecp256k1_jni_la_OBJECTS = $(am_libsecp256k1_jni_la_OBJECTS)$/;"	m
libsecp256k1_jni_la_SOURCES	src/secp256k1/Makefile	/^libsecp256k1_jni_la_SOURCES = src\/java\/org_bitcoin_NativeSecp256k1.c src\/java\/org_bitcoin_Secp256k1Context.c$/;"	m
libsecp256k1_la_CPPFLAGS	src/secp256k1/Makefile	/^libsecp256k1_la_CPPFLAGS = -DSECP256K1_BUILD -I$(top_srcdir)\/include -I$(top_srcdir)\/src $(SECP_INCLUDES)$/;"	m
libsecp256k1_la_DEPENDENCIES	src/secp256k1/Makefile	/^libsecp256k1_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
libsecp256k1_la_LIBADD	src/secp256k1/Makefile	/^libsecp256k1_la_LIBADD = $(JNI_LIB) $(SECP_LIBS) $(COMMON_LIB)$/;"	m
libsecp256k1_la_OBJECTS	src/secp256k1/Makefile	/^libsecp256k1_la_OBJECTS = $(am_libsecp256k1_la_OBJECTS)$/;"	m
libsecp256k1_la_SOURCES	src/secp256k1/Makefile	/^libsecp256k1_la_SOURCES = src\/secp256k1.c$/;"	m
libtool_options_prep	build-aux/ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_options_prep	libtool	/^libtool_options_prep ()$/;"	f
libtool_options_prep	src/secp256k1/build-aux/ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_options_prep	src/secp256k1/libtool	/^libtool_options_prep ()$/;"	f
libtool_options_prep	src/univalue/build-aux/ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_options_prep	src/univalue/libtool	/^libtool_options_prep ()$/;"	f
libtool_parse_options	build-aux/ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_parse_options	libtool	/^libtool_parse_options ()$/;"	f
libtool_parse_options	src/secp256k1/build-aux/ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_parse_options	src/secp256k1/libtool	/^libtool_parse_options ()$/;"	f
libtool_parse_options	src/univalue/build-aux/ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_parse_options	src/univalue/libtool	/^libtool_parse_options ()$/;"	f
libtool_validate_options	build-aux/ltmain.sh	/^libtool_validate_options ()$/;"	f
libtool_validate_options	libtool	/^libtool_validate_options ()$/;"	f
libtool_validate_options	src/secp256k1/build-aux/ltmain.sh	/^libtool_validate_options ()$/;"	f
libtool_validate_options	src/secp256k1/libtool	/^libtool_validate_options ()$/;"	f
libtool_validate_options	src/univalue/build-aux/ltmain.sh	/^libtool_validate_options ()$/;"	f
libtool_validate_options	src/univalue/libtool	/^libtool_validate_options ()$/;"	f
libunivalue_la_CXXFLAGS	src/univalue/Makefile	/^libunivalue_la_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
libunivalue_la_LDFLAGS	src/univalue/Makefile	/^libunivalue_la_LDFLAGS = \\$/;"	m
libunivalue_la_LIBADD	src/univalue/Makefile	/^libunivalue_la_LIBADD =$/;"	m
libunivalue_la_LINK	src/univalue/Makefile	/^libunivalue_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libunivalue_la_OBJECTS	src/univalue/Makefile	/^libunivalue_la_OBJECTS = $(am_libunivalue_la_OBJECTS)$/;"	m
libunivalue_la_SOURCES	src/univalue/Makefile	/^libunivalue_la_SOURCES = \\$/;"	m
lift_x	test/functional/test_framework/key.py	/^    def lift_x(self, x):$/;"	m	class:EllipticCurve
limbs	src/secp256k1/src/num_gmp.h	/^    int limbs;$/;"	m	struct:__anon110
limit	src/leveldb/include/leveldb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limitRows	src/qt/transactionfilterproxy.h	/^    int limitRows;$/;"	m	class:TransactionFilterProxy
limitedmap	src/limitedmap.h	/^    explicit limitedmap(size_type nMaxSizeIn)$/;"	f	class:limitedmap
limitedmap	src/limitedmap.h	/^class limitedmap$/;"	c
limiter_	src/leveldb/util/env_posix.cc	/^  Limiter* limiter_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
limiter_	src/leveldb/util/env_posix.cc	/^  Limiter* limiter_;$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
line	contrib/devtools/symbol-check.py	/^            is_import = line[6] == 'UND'$/;"	i
line_	src/leveldb/util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
lines	src/torcontrol.cpp	/^    std::vector<std::string> lines;$/;"	m	class:TorControlReply	file:
lint_missing_argument_documentation	test/lint/check-doc.py	/^def lint_missing_argument_documentation():$/;"	f
lint_missing_hidden_wallet_args	test/lint/check-doc.py	/^def lint_missing_hidden_wallet_args():$/;"	f
linux_CFLAGS	depends/hosts/linux.mk	/^linux_CFLAGS=-pipe$/;"	m
linux_CXXFLAGS	depends/hosts/linux.mk	/^linux_CXXFLAGS=$(linux_CFLAGS)$/;"	m
linux_debug_CFLAGS	depends/hosts/linux.mk	/^linux_debug_CFLAGS=-O1$/;"	m
linux_debug_CPPFLAGS	depends/hosts/linux.mk	/^linux_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC$/;"	m
linux_debug_CXXFLAGS	depends/hosts/linux.mk	/^linux_debug_CXXFLAGS=$(linux_debug_CFLAGS)$/;"	m
linux_release_CFLAGS	depends/hosts/linux.mk	/^linux_release_CFLAGS=-O2$/;"	m
linux_release_CXXFLAGS	depends/hosts/linux.mk	/^linux_release_CXXFLAGS=$(linux_release_CFLAGS)$/;"	m
list	src/qt/recentrequeststablemodel.h	/^    QList<RecentRequestEntry> list;$/;"	m	class:RecentRequestsTableModel
listCommands	src/rpc/server.cpp	/^std::vector<std::string> CRPCTable::listCommands() const$/;"	f	class:CRPCTable
list_	src/leveldb/db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	src/leveldb/db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	src/leveldb/db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	src/leveldb/db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	src/leveldb/util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon4::HandleTable	file:
list_pos	src/net_processing.cpp	/^    size_t list_pos;$/;"	m	struct:COrphanTx	file:
listaddressgroupings	src/wallet/rpcwallet.cpp	/^static UniValue listaddressgroupings(const JSONRPCRequest& request)$/;"	f	file:
listbanned	src/rpc/net.cpp	/^static UniValue listbanned(const JSONRPCRequest& request)$/;"	f	file:
listlabels	src/wallet/rpcwallet.cpp	/^static UniValue listlabels(const JSONRPCRequest& request)$/;"	f	file:
listlockunspent	src/wallet/rpcwallet.cpp	/^static UniValue listlockunspent(const JSONRPCRequest& request)$/;"	f	file:
listreceivedbyaddress	src/wallet/rpcwallet.cpp	/^static UniValue listreceivedbyaddress(const JSONRPCRequest& request)$/;"	f	file:
listreceivedbylabel	src/wallet/rpcwallet.cpp	/^static UniValue listreceivedbylabel(const JSONRPCRequest& request)$/;"	f	file:
listsinceblock	src/wallet/rpcwallet.cpp	/^static UniValue listsinceblock(const JSONRPCRequest& request)$/;"	f	file:
listtransactions	src/wallet/rpcwallet.cpp	/^UniValue listtransactions(const JSONRPCRequest& request)$/;"	f
listunspent	src/wallet/rpcwallet.cpp	/^static UniValue listunspent(const JSONRPCRequest& request)$/;"	f	file:
listwalletdir	src/wallet/rpcwallet.cpp	/^static UniValue listwalletdir(const JSONRPCRequest& request)$/;"	f	file:
listwallets	src/wallet/rpcwallet.cpp	/^static UniValue listwallets(const JSONRPCRequest& request)$/;"	f	file:
loadReceiveRequests	src/qt/walletmodel.cpp	/^void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)$/;"	f	class:WalletModel
loadRow	src/qt/editaddressdialog.cpp	/^void EditAddressDialog::loadRow(int row)$/;"	f	class:EditAddressDialog
load_test_data	test/functional/rpc_getblockstats.py	/^    def load_test_data(self, filename):$/;"	m	class:GetblockstatsTest
loadwallet	src/wallet/rpcwallet.cpp	/^static UniValue loadwallet(const JSONRPCRequest& request)$/;"	f	file:
local_check	src/test/prevector_tests.cpp	/^    void local_check(bool b)$/;"	f	class:prevector_tester	file:
local_check_equal	src/test/prevector_tests.cpp	/^        void local_check_equal(A a, B b)$/;"	f	class:prevector_tester	file:
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	doc/man/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	src/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	src/secp256k1/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	src/univalue/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	doc/man/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	src/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	src/secp256k1/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	src/univalue/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	src/reverselock.h	/^    Lock& lock;$/;"	m	class:reverse_lock
lockAction	src/qt/coincontroldialog.h	/^    QAction *lockAction;$/;"	m	class:CoinControlDialog
lockCoin	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::lockCoin()$/;"	f	class:CoinControlDialog
lockPoints	src/txmempool.h	/^    LockPoints lockPoints;     \/\/!< Track the height and time at which tx was final$/;"	m	class:CTxMemPoolEntry
lock_time	src/interfaces/wallet.h	/^    uint32_t lock_time;$/;"	m	struct:interfaces::WalletTxStatus
locked	src/support/lockedpool.h	/^        size_t locked;$/;"	m	struct:LockedPool::Stats
locked_files_	src/leveldb/util/env_posix.cc	/^  std::set<std::string> locked_files_;$/;"	m	class:leveldb::__anon8::PosixLockTable	file:
lockedcount	src/test/allocator_tests.cpp	/^    int lockedcount;$/;"	m	class:TestLockedPageAllocator	file:
lockorders	src/sync.cpp	/^    LockOrders lockorders;$/;"	m	struct:LockData	file:
locks_	src/leveldb/util/env_posix.cc	/^  PosixLockTable locks_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
lockunspent	src/wallet/rpcwallet.cpp	/^static UniValue lockunspent(const JSONRPCRequest& request)$/;"	f	file:
log	src/leveldb/db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	src/leveldb/db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	src/leveldb/db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	src/leveldb/db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	src/leveldb/db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	src/leveldb/db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	src/leveldb/db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log	test/functional/test_framework/authproxy.py	/^log = logging.getLogger("BitcoinRPC")$/;"	v
log_	src/leveldb/db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	src/leveldb/db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	src/leveldb/db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	src/leveldb/db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	src/leveldb/db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logger	test/functional/test_framework/mininode.py	/^logger = logging.getLogger("TestFramework.mininode")$/;"	v
logger	test/functional/test_framework/socks5.py	/^logger = logging.getLogger("TestFramework.socks5")$/;"	v
logger	test/functional/test_framework/util.py	/^logger = logging.getLogger("TestFramework.utils")$/;"	v
logging	contrib/verify-commits/verify-commits.py	/^import logging$/;"	i
logging	src/rpc/misc.cpp	/^UniValue logging(const JSONRPCRequest& request)$/;"	f
logging	test/functional/test_framework/authproxy.py	/^import logging$/;"	i
logging	test/functional/test_framework/mininode.py	/^import logging$/;"	i
logging	test/functional/test_framework/socks5.py	/^import logging$/;"	i
logging	test/functional/test_framework/test_framework.py	/^import logging$/;"	i
logging	test/functional/test_framework/test_node.py	/^import logging$/;"	i
logging	test/functional/test_framework/util.py	/^import logging$/;"	i
logging	test/functional/test_runner.py	/^import logging$/;"	i
logging	test/fuzz/test_runner.py	/^import logging$/;"	i
logging	test/util/bitcoin-util-test.py	/^import logging$/;"	i
logs_	src/leveldb/db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon30::Repairer	file:
longName	src/qt/bitcoinunits.cpp	/^QString BitcoinUnits::longName(int unit)$/;"	f	class:BitcoinUnits
lookupAddress	src/qt/addresstablemodel.cpp	/^int AddressTableModel::lookupAddress(const QString &address) const$/;"	f	class:AddressTableModel
lookupAddress	src/qt/transactiontablemodel.cpp	/^QString TransactionTableModel::lookupAddress(const std::string &address, bool tooltip) const$/;"	f	class:TransactionTableModel
lower_bound	src/indirectmap.h	/^    const_iterator lower_bound(const K& key) const  { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lower_bound	src/indirectmap.h	/^    iterator lower_bound(const K& key)              { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lp	src/test/setup_common.h	/^    LockPoints lp;$/;"	m	struct:TestMemPoolEntryHelper
lp	src/txmempool.h	/^    const LockPoints& lp;$/;"	m	struct:update_lock_points
lru_	src/leveldb/util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
m	contrib/linearize/linearize-hashes.py	/^        m = re.search('^(\\w+)\\s*=\\s*(\\S.*)$', line)$/;"	v
m	contrib/linearize/linearize-hashes.py	/^        m = re.search('^\\s*#', line)$/;"	v
m	src/indirectmap.h	/^    base m;$/;"	m	class:indirectmap
m	src/test/checkqueue_tests.cpp	/^    static std::mutex m;$/;"	m	struct:FrozenCleanupCheck	file:
m	src/test/checkqueue_tests.cpp	/^    static std::mutex m;$/;"	m	struct:UniqueCheck	file:
m	src/test/checkqueue_tests.cpp	/^std::mutex UniqueCheck::m;$/;"	m	class:UniqueCheck	file:
mBTC	src/qt/bitcoinunits.h	/^        mBTC,$/;"	e	enum:BitcoinUnits::Unit
m_F	src/blockfilter.h	/^    uint64_t m_F;  \/\/!< Range of element hashes, F = N * M$/;"	m	class:GCSFilter
m_M	src/blockfilter.h	/^        uint32_t m_M;  \/\/!< Inverse false positive rate$/;"	m	struct:GCSFilter::Params
m_N	src/blockfilter.h	/^    uint32_t m_N;  \/\/!< Number of elements in the filter$/;"	m	class:GCSFilter
m_N	src/tinyformat.h	/^        int m_N;$/;"	m	class:tinyformat::FormatList
m_P	src/blockfilter.h	/^        uint8_t m_P;  \/\/!< Golomb-Rice coding parameter$/;"	m	struct:GCSFilter::Params
m_activity_thread	src/qt/walletcontroller.h	/^    QThread m_activity_thread;$/;"	m	class:WalletController
m_added_nodes	src/net.h	/^        std::vector<std::string> m_added_nodes;$/;"	m	struct:CConnman::Options
m_amounts	src/wallet/wallet.h	/^    mutable CachableAmount m_amounts[AMOUNTTYPE_ENUM_ELEMENTS];$/;"	m	class:CWalletTx
m_app	src/qt/test/apptests.h	/^    BitcoinApplication& m_app;$/;"	m	class:AppTests
m_app_nap_inhibitor	src/qt/bitcoingui.h	/^    CAppNapInhibitor* m_app_nap_inhibitor = nullptr;$/;"	m	class:BitcoinGUI
m_app_tests	src/qt/test/apptests.h	/^        AppTests& m_app_tests;$/;"	m	struct:AppTests::HandleCallback
m_args	src/rpc/util.h	/^    const std::vector<RPCArg> m_args;$/;"	m	class:RPCHelpMan
m_assumed_blockchain_size	src/chainparams.h	/^    uint64_t m_assumed_blockchain_size;$/;"	m	class:CChainParams
m_assumed_chain_state_size	src/chainparams.h	/^    uint64_t m_assumed_chain_state_size;$/;"	m	class:CChainParams
m_avoid_partial_spends	src/wallet/coincontrol.h	/^    bool m_avoid_partial_spends;$/;"	m	class:CCoinControl
m_balances	src/qt/overviewpage.h	/^    interfaces::WalletBalances m_balances;$/;"	m	class:OverviewPage
m_ban_db	src/banman.h	/^    CBanDB m_ban_db;$/;"	m	class:BanMan
m_ban_list_path	src/addrdb.h	/^    const fs::path m_ban_list_path;$/;"	m	class:CBanDB
m_banman	src/net.h	/^        BanMan* m_banman = nullptr;$/;"	m	struct:CConnman::Options
m_banman	src/net.h	/^    BanMan* m_banman;$/;"	m	class:CConnman
m_banman	src/net_processing.h	/^    BanMan* const m_banman;$/;"	m	class:final
m_batch	src/wallet/walletdb.h	/^    BerkeleyBatch m_batch;$/;"	m	class:WalletBatch
m_block_hash	src/blockfilter.h	/^    uint256 m_block_hash;$/;"	m	class:BlockFilter
m_blockchain_size	src/qt/intro.h	/^    uint64_t m_blockchain_size;$/;"	m	class:Intro
m_cached	src/script/ismine.h	/^    std::bitset<ISMINE_ENUM_ELEMENTS> m_cached;$/;"	m	struct:CachableAmount
m_cached_balances	src/qt/walletmodel.h	/^    interfaces::WalletBalances m_cached_balances;$/;"	m	class:WalletModel
m_callback	src/qt/test/apptests.h	/^        std::string m_callback;$/;"	m	struct:AppTests::HandleCallback
m_callbacks	src/qt/test/apptests.h	/^    std::multiset<std::string> m_callbacks;$/;"	m	class:AppTests
m_chain	src/interfaces/chain.cpp	/^    Chain& m_chain;$/;"	m	class:interfaces::__anon129::NotificationsHandlerImpl	file:
m_chain	src/interfaces/wallet.cpp	/^    Chain& m_chain;$/;"	m	class:interfaces::__anon130::WalletClientImpl	file:
m_chain	src/validation.cpp	/^    CChain m_chain;$/;"	m	class:CChainState	file:
m_chain	src/wallet/test/init_test_fixture.h	/^    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();$/;"	m	struct:InitWalletDirTestingSetup
m_chain	src/wallet/test/wallet_test_fixture.h	/^    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();$/;"	m	struct:WalletTestingSetup
m_chain	src/wallet/test/wallet_tests.cpp	/^    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();$/;"	m	class:ListCoinsTestingSetup	file:
m_chain	src/wallet/wallet.h	/^    interfaces::Chain* m_chain;$/;"	m	class:final
m_chain_client	src/wallet/test/init_test_fixture.h	/^    std::unique_ptr<interfaces::ChainClient> m_chain_client;$/;"	m	struct:InitWalletDirTestingSetup
m_chain_client	src/wallet/test/wallet_test_fixture.h	/^    std::unique_ptr<interfaces::ChainClient> m_chain_client = interfaces::MakeWalletClient(*m_chain, {});$/;"	m	struct:WalletTestingSetup
m_chain_notifications_handler	src/wallet/wallet.h	/^    std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;$/;"	m	class:final
m_chain_state_size	src/qt/intro.h	/^    uint64_t m_chain_state_size;$/;"	m	class:Intro
m_chain_sync	src/net_processing.cpp	/^    ChainSyncTimeoutState m_chain_sync;$/;"	m	struct:__anon89::CNodeState	file:
m_change_type	src/wallet/coincontrol.h	/^    boost::optional<OutputType> m_change_type;$/;"	m	class:CCoinControl
m_chunk_size	src/flatfile.h	/^    const size_t m_chunk_size;$/;"	m	class:FlatFileSeq
m_client_interface	src/banman.h	/^    CClientUIInterface* m_client_interface = nullptr;$/;"	m	class:BanMan
m_coinbase_txns	src/test/setup_common.h	/^    std::vector<CTransactionRef> m_coinbase_txns; \/\/ For convenience, coinbase transactions$/;"	m	struct:TestChain100Setup
m_command	src/interfaces/chain.cpp	/^    CRPCCommand m_command;$/;"	m	class:interfaces::__anon129::RpcHandlerImpl	file:
m_cond	src/rpc/util.h	/^    const std::string m_cond;$/;"	m	struct:RPCResult
m_confirm_target	src/wallet/coincontrol.h	/^    boost::optional<unsigned int> m_confirm_target;$/;"	m	class:CCoinControl
m_connMainSignals	src/validationinterface.cpp	/^    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;$/;"	m	struct:MainSignalsInstance	file:
m_connNotifyEntryRemoved	src/validation.cpp	/^    boost::signals2::scoped_connection m_connNotifyEntryRemoved;$/;"	m	class:ConnectTrace	file:
m_connected_wallet_handlers	src/qt/splashscreen.h	/^    std::list<std::unique_ptr<interfaces::Handler>> m_connected_wallet_handlers;$/;"	m	class:SplashScreen
m_connected_wallets	src/qt/splashscreen.h	/^    std::list<std::unique_ptr<interfaces::Wallet>> m_connected_wallets;$/;"	m	class:SplashScreen
m_connection	src/interfaces/handler.cpp	/^    boost::signals2::scoped_connection m_connection;$/;"	m	class:interfaces::__anon131::HandlerImpl	file:
m_could_reserve	src/rpc/blockchain.cpp	/^    bool m_could_reserve;$/;"	m	class:CoinsViewScanReserver	file:
m_could_reserve	src/wallet/wallet.h	/^    bool m_could_reserve;$/;"	m	class:WalletRescanReserver
m_cs_banned	src/banman.h	/^    CCriticalSection m_cs_banned;$/;"	m	class:BanMan
m_cs_callbacks_pending	src/scheduler.h	/^    CCriticalSection m_cs_callbacks_pending;$/;"	m	class:SingleThreadedSchedulerClient
m_cs_callbacks_pending	src/scheduler.h	/^    bool m_are_callbacks_running GUARDED_BY(m_cs_callbacks_pending) = false;$/;"	m	class:SingleThreadedSchedulerClient
m_cs_chainstate	src/validation.cpp	/^    CCriticalSection m_cs_chainstate;$/;"	m	class:CChainState	file:
m_cs_fee_estimator	src/policy/fees.h	/^    mutable CCriticalSection m_cs_fee_estimator;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
m_cwd	src/wallet/test/init_test_fixture.h	/^    fs::path m_cwd;$/;"	m	struct:InitWalletDirTestingSetup
m_data	src/script/bitcoinconsensus.cpp	/^    const unsigned char* m_data;$/;"	m	class:__anon81::TxInputStream	file:
m_data	src/span.h	/^    C* m_data;$/;"	m	class:Span
m_data	src/streams.h	/^    const std::vector<unsigned char>& m_data;$/;"	m	class:VectorReader
m_database	src/wallet/walletdb.h	/^    WalletDatabase& m_database;$/;"	m	class:WalletBatch
m_databases	src/wallet/db.h	/^    std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;$/;"	m	class:BerkeleyEnvironment
m_datadir	src/wallet/test/init_test_fixture.h	/^    fs::path m_datadir;$/;"	m	struct:InitWalletDirTestingSetup
m_db	src/index/blockfilterindex.h	/^    std::unique_ptr<BaseIndex::DB> m_db;$/;"	m	class:final
m_db	src/index/txindex.h	/^    const std::unique_ptr<DB> m_db;$/;"	m	class:final
m_db	src/wallet/db.h	/^    std::unique_ptr<Db> m_db;$/;"	m	class:BerkeleyDatabase
m_db_in_use	src/wallet/db.h	/^    std::condition_variable_any m_db_in_use;$/;"	m	class:BerkeleyEnvironment
m_dbt	src/wallet/db.h	/^        Dbt m_dbt;$/;"	m	class:BerkeleyBatch::final
m_debug_only	src/util/system.h	/^        bool m_debug_only;$/;"	m	struct:ArgsManager::Arg
m_default_ban_time	src/banman.h	/^    const int64_t m_default_ban_time;$/;"	m	class:BanMan
m_derive	src/script/descriptor.cpp	/^    DeriveType m_derive;$/;"	m	class:__anon75::final	file:
m_description	src/rpc/util.h	/^    const std::string m_description;$/;"	m	class:RPCHelpMan
m_description	src/rpc/util.h	/^    const std::string m_description;$/;"	m	struct:RPCArg
m_destination	src/script/descriptor.cpp	/^    const CTxDestination m_destination;$/;"	m	class:__anon75::final	file:
m_dir	src/flatfile.h	/^    const fs::path m_dir;$/;"	m	class:FlatFileSeq
m_elapsed_results	src/bench/bench.h	/^    std::vector<double> m_elapsed_results;$/;"	m	class:benchmark::State
m_enable_bip61	src/net_processing.h	/^    const bool m_enable_bip61;$/;"	m	class:final
m_encoded	src/blockfilter.h	/^    std::vector<unsigned char> m_encoded;$/;"	m	class:GCSFilter
m_examples	src/rpc/util.h	/^    const RPCExamples m_examples;$/;"	m	class:RPCHelpMan
m_examples	src/rpc/util.h	/^    const std::string m_examples;$/;"	m	struct:RPCExamples
m_expected_tip	src/test/validation_block_tests.cpp	/^    uint256 m_expected_tip;$/;"	m	struct:TestSubscriber	file:
m_extkey	src/script/descriptor.cpp	/^    CExtPubKey m_extkey;$/;"	m	class:__anon75::final	file:
m_failed_blocks	src/validation.cpp	/^    std::set<CBlockIndex*> m_failed_blocks;$/;"	m	class:CChainState	file:
m_fallback	src/rpc/util.h	/^    const Fallback m_fallback;$/;"	m	struct:RPCArg
m_fallback_fee_enabled	src/chainparams.h	/^    bool m_fallback_fee_enabled;$/;"	m	class:CChainParams
m_fee_mode	src/wallet/coincontrol.h	/^    FeeEstimateMode m_fee_mode;$/;"	m	class:CCoinControl
m_feerate	src/wallet/coincontrol.h	/^    boost::optional<CFeeRate> m_feerate;$/;"	m	class:CCoinControl
m_file	src/fs.h	/^        FILE* m_file = nullptr;$/;"	m	class:fsbridge::ifstream
m_file	src/fs.h	/^        FILE* m_file = nullptr;$/;"	m	class:fsbridge::ofstream
m_file	src/util/system.h	/^    std::string m_file;$/;"	m	struct:SectionInfo
m_file_mutex	src/logging.h	/^        std::mutex m_file_mutex;$/;"	m	class:BCLog::Logger
m_file_path	src/logging.h	/^        fs::path m_file_path;$/;"	m	class:BCLog::Logger
m_filebuf	src/fs.h	/^        __gnu_cxx::stdio_filebuf<char> m_filebuf;$/;"	m	class:fsbridge::ifstream
m_filebuf	src/fs.h	/^        __gnu_cxx::stdio_filebuf<char> m_filebuf;$/;"	m	class:fsbridge::ofstream
m_fileids	src/wallet/db.h	/^    std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;$/;"	m	class:BerkeleyEnvironment
m_fileout	src/logging.h	/^        FILE* m_fileout = nullptr;$/;"	m	class:BCLog::Logger
m_filter	src/blockfilter.h	/^    GCSFilter m_filter;$/;"	m	class:BlockFilter
m_filter_fileseq	src/index/blockfilterindex.h	/^    std::unique_ptr<FlatFileSeq> m_filter_fileseq;$/;"	m	class:final
m_filter_type	src/blockfilter.h	/^    BlockFilterType m_filter_type = BlockFilterType::INVALID;$/;"	m	class:BlockFilter
m_filter_type	src/index/blockfilterindex.h	/^    BlockFilterType m_filter_type;$/;"	m	class:final
m_formatImpl	src/tinyformat.h	/^        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,$/;"	m	class:tinyformat::detail::FormatArg
m_formatterStore	src/tinyformat.h	/^        FormatArg m_formatterStore[N];$/;"	m	class:tinyformat::detail::FormatListN
m_formatters	src/tinyformat.h	/^        const detail::FormatArg* m_formatters;$/;"	m	class:tinyformat::FormatList
m_handler_address_book_changed	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_address_book_changed;$/;"	m	class:WalletModel
m_handler_banned_list_changed	src/qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_banned_list_changed;$/;"	m	class:ClientModel
m_handler_can_get_addrs_changed	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_can_get_addrs_changed;$/;"	m	class:WalletModel
m_handler_init_message	src/qt/splashscreen.h	/^    std::unique_ptr<interfaces::Handler> m_handler_init_message;$/;"	m	class:SplashScreen
m_handler_load_wallet	src/qt/splashscreen.h	/^    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;$/;"	m	class:SplashScreen
m_handler_load_wallet	src/qt/walletcontroller.h	/^    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;$/;"	m	class:WalletController
m_handler_message_box	src/qt/bitcoingui.h	/^    std::unique_ptr<interfaces::Handler> m_handler_message_box;$/;"	m	class:BitcoinGUI
m_handler_notify_alert_changed	src/qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_alert_changed;$/;"	m	class:ClientModel
m_handler_notify_block_tip	src/qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_block_tip;$/;"	m	class:ClientModel
m_handler_notify_header_tip	src/qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_header_tip;$/;"	m	class:ClientModel
m_handler_notify_network_active_changed	src/qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_network_active_changed;$/;"	m	class:ClientModel
m_handler_notify_num_connections_changed	src/qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_num_connections_changed;$/;"	m	class:ClientModel
m_handler_question	src/qt/bitcoingui.h	/^    std::unique_ptr<interfaces::Handler> m_handler_question;$/;"	m	class:BitcoinGUI
m_handler_show_progress	src/qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:ClientModel
m_handler_show_progress	src/qt/splashscreen.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:SplashScreen
m_handler_show_progress	src/qt/transactiontablemodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:TransactionTableModel
m_handler_show_progress	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:WalletModel
m_handler_status_changed	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_status_changed;$/;"	m	class:WalletModel
m_handler_transaction_changed	src/qt/transactiontablemodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_transaction_changed;$/;"	m	class:TransactionTableModel
m_handler_transaction_changed	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_transaction_changed;$/;"	m	class:WalletModel
m_handler_unload	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_unload;$/;"	m	class:WalletModel
m_handler_watch_only_changed	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_watch_only_changed;$/;"	m	class:WalletModel
m_height	src/bench/bench.h	/^    int64_t m_height;$/;"	m	class:benchmark::PlotlyPrinter
m_help_param	src/util/system.h	/^        std::string m_help_param;$/;"	m	struct:ArgsManager::Arg
m_help_text	src/util/system.h	/^        std::string m_help_text;$/;"	m	struct:ArgsManager::Arg
m_hide_origin	src/script/sign.h	/^    const bool m_hide_origin;$/;"	m	class:HidingSigningProvider
m_hide_secret	src/script/sign.h	/^    const bool m_hide_secret;$/;"	m	class:HidingSigningProvider
m_inner	src/rpc/util.h	/^    const std::vector<RPCArg> m_inner; \/\/!< Only used for arrays or dicts$/;"	m	struct:RPCArg
m_interfaces	src/interfaces/node.cpp	/^    InitInterfaces m_interfaces;$/;"	m	class:interfaces::__anon128::NodeImpl	file:
m_internals	src/validationinterface.h	/^    std::unique_ptr<MainSignalsInstance> m_internals;$/;"	m	class:CMainSignals
m_interrupt	src/index/base.h	/^    CThreadInterrupt m_interrupt;$/;"	m	class:BaseIndex
m_is_inbound	src/net_processing.cpp	/^    bool m_is_inbound;$/;"	m	struct:__anon89::CNodeState	file:
m_is_manual_connection	src/net_processing.cpp	/^    bool m_is_manual_connection;$/;"	m	struct:__anon89::CNodeState	file:
m_istream	src/streams.h	/^    IStream& m_istream;$/;"	m	class:BitStreamReader
m_it_wtxOrdered	src/wallet/wallet.h	/^    std::multimap<int64_t, CWalletTx*>::const_iterator m_it_wtxOrdered;$/;"	m	class:CWalletTx
m_k0	src/util/bytevectorhash.h	/^    uint64_t m_k0, m_k1;$/;"	m	class:final
m_k1	src/util/bytevectorhash.h	/^    uint64_t m_k0, m_k1;$/;"	m	class:final
m_key	src/interfaces/wallet.cpp	/^    CReserveKey m_key;$/;"	m	class:interfaces::__anon130::PendingWalletTxImpl	file:
m_last_block_announcement	src/net_processing.cpp	/^    int64_t m_last_block_announcement;$/;"	m	struct:__anon89::CNodeState	file:
m_last_block_num_txs	src/miner.h	/^    static Optional<int64_t> m_last_block_num_txs;$/;"	m	class:BlockAssembler
m_last_block_weight	src/miner.h	/^    static Optional<int64_t> m_last_block_weight;$/;"	m	class:BlockAssembler
m_left	src/rpc/util.cpp	/^    const std::string m_left;$/;"	m	struct:Section	file:
m_line	src/util/system.h	/^    int m_line;$/;"	m	struct:SectionInfo
m_location	src/wallet/wallet.h	/^    WalletLocation m_location;$/;"	m	class:final
m_log_threadnames	src/logging.h	/^        bool m_log_threadnames = DEFAULT_LOGTHREADNAMES;$/;"	m	class:BCLog::Logger
m_log_time_micros	src/logging.h	/^        bool m_log_time_micros = DEFAULT_LOGTIMEMICROS;$/;"	m	class:BCLog::Logger
m_log_timestamps	src/logging.h	/^        bool m_log_timestamps = DEFAULT_LOGTIMESTAMPS;$/;"	m	class:BCLog::Logger
m_manual_connection	src/net.h	/^    bool m_manual_connection;$/;"	m	class:CNodeStats
m_msgproc	src/net.h	/^        NetEventsInterface* m_msgproc = nullptr;$/;"	m	struct:CConnman::Options
m_msgproc	src/net.h	/^    NetEventsInterface* m_msgproc;$/;"	m	class:CConnman
m_msgs_before_open	src/logging.h	/^        std::list<std::string> m_msgs_before_open;$/;"	m	class:BCLog::Logger
m_mutex	src/qt/walletcontroller.h	/^    mutable QMutex m_mutex;$/;"	m	class:WalletController
m_mutex	src/random.cpp	/^    Mutex m_mutex;$/;"	m	class:__anon61::RNGState	file:
m_mutex	src/random.cpp	/^    bool m_strongly_seeded GUARDED_BY(m_mutex) = false;$/;"	m	class:__anon61::RNGState	file:
m_mutex	src/random.cpp	/^    uint64_t m_counter GUARDED_BY(m_mutex) = 0;$/;"	m	class:__anon61::RNGState	file:
m_mutex	src/random.cpp	/^    unsigned char m_state[32] GUARDED_BY(m_mutex) = {0};$/;"	m	class:__anon61::RNGState	file:
m_mutex_openssl	src/random.cpp	/^    std::unique_ptr<Mutex[]> m_mutex_openssl;$/;"	m	class:__anon61::RNGState	file:
m_name	src/bench/bench.h	/^    std::string m_name;$/;"	m	class:benchmark::State
m_name	src/dbwrapper.h	/^    std::string m_name;$/;"	m	class:CDBWrapper
m_name	src/index/blockfilterindex.h	/^    std::string m_name;$/;"	m	class:final
m_name	src/qt/walletcontroller.h	/^    std::string const m_name;$/;"	m	class:OpenWalletActivity::std
m_name	src/rpc/util.h	/^    const std::string m_name; \/\/!< The name of the arg (can be empty for inner args)$/;"	m	struct:RPCArg
m_name	src/rpc/util.h	/^    const std::string m_name;$/;"	m	class:RPCHelpMan
m_name	src/script/descriptor.cpp	/^    const std::string m_name;$/;"	m	class:__anon75::DescriptorImpl	file:
m_name	src/util/system.h	/^    std::string m_name;$/;"	m	struct:SectionInfo
m_name	src/wallet/walletutil.h	/^    std::string m_name;$/;"	m	class:final
m_network_style	src/qt/bitcoingui.cpp	/^    m_network_style(networkStyle)$/;"	f
m_network_style	src/qt/bitcoingui.h	/^    const NetworkStyle* const m_network_style;$/;"	m	class:BitcoinGUI
m_next_filter_pos	src/index/blockfilterindex.h	/^    FlatFilePos m_next_filter_pos;$/;"	m	class:final
m_node	src/qt/bantablemodel.h	/^    interfaces::Node& m_node;$/;"	m	class:BanTableModel
m_node	src/qt/bitcoin.h	/^    interfaces::Node& m_node;$/;"	m	class:BitcoinApplication
m_node	src/qt/bitcoin.h	/^    interfaces::Node& m_node;$/;"	m	class:BitcoinCore
m_node	src/qt/bitcoingui.h	/^    interfaces::Node& m_node;$/;"	m	class:BitcoinGUI
m_node	src/qt/clientmodel.h	/^    interfaces::Node& m_node;$/;"	m	class:ClientModel
m_node	src/qt/optionsmodel.h	/^    interfaces::Node& m_node;$/;"	m	class:OptionsModel
m_node	src/qt/peertablemodel.h	/^    interfaces::Node& m_node;$/;"	m	class:PeerTableModel
m_node	src/qt/rpcconsole.cpp	/^    interfaces::Node& m_node;$/;"	m	class:RPCExecutor	file:
m_node	src/qt/rpcconsole.h	/^    interfaces::Node& m_node;$/;"	m	class:RPCConsole
m_node	src/qt/splashscreen.h	/^    interfaces::Node& m_node;$/;"	m	class:SplashScreen
m_node	src/qt/walletcontroller.h	/^    interfaces::Node& m_node;$/;"	m	class:WalletController
m_node	src/qt/walletmodel.h	/^    interfaces::Node& m_node;$/;"	m	class:WalletModel
m_notifications	src/interfaces/chain.cpp	/^    Chain::Notifications* m_notifications;$/;"	m	class:interfaces::__anon129::NotificationsHandlerImpl	file:
m_num_evals	src/bench/bench.h	/^    const uint64_t m_num_evals;$/;"	m	class:benchmark::State
m_num_iters	src/bench/bench.h	/^    const uint64_t m_num_iters;$/;"	m	class:benchmark::State
m_num_iters_left	src/bench/bench.h	/^    uint64_t m_num_iters_left;$/;"	m	class:benchmark::State
m_oneline_description	src/rpc/util.h	/^    const std::string m_oneline_description; \/\/!< Should be empty unless it is supposed to override the auto-generated summary line$/;"	m	struct:RPCArg
m_options_model	src/qt/walletcontroller.h	/^    OptionsModel* const m_options_model;$/;"	m	class:WalletController
m_origin	src/script/descriptor.cpp	/^    KeyOriginInfo m_origin;$/;"	m	class:__anon75::final	file:
m_ostream	src/streams.h	/^    OStream& m_ostream;$/;"	m	class:BitStreamWriter
m_outputs	src/wallet/coinselection.h	/^    std::vector<CInputCoin> m_outputs;$/;"	m	struct:OutputGroup
m_params	src/blockfilter.h	/^    Params m_params;$/;"	m	class:GCSFilter
m_params	src/key_io.cpp	/^    const CChainParams& m_params;$/;"	m	class:__anon54::DestinationEncoder	file:
m_path	src/script/descriptor.cpp	/^    KeyPath m_path;$/;"	m	class:__anon75::final	file:
m_path	src/wallet/walletutil.h	/^    fs::path m_path;$/;"	m	class:final
m_path_root	src/test/setup_common.h	/^    const fs::path m_path_root;$/;"	m	struct:BasicTestingSetup
m_peer_connect_timeout	src/net.h	/^        int64_t m_peer_connect_timeout = DEFAULT_PEER_CONNECT_TIMEOUT;$/;"	m	struct:CConnman::Options
m_peer_connect_timeout	src/net.h	/^    int64_t m_peer_connect_timeout;$/;"	m	class:CConnman
m_platform_style	src/qt/walletcontroller.h	/^    const PlatformStyle* const m_platform_style;$/;"	m	class:WalletController
m_plotly_url	src/bench/bench.h	/^    std::string m_plotly_url;$/;"	m	class:benchmark::PlotlyPrinter
m_pool_key_to_index	src/wallet/wallet.h	/^    std::map<CKeyID, int64_t> m_pool_key_to_index;$/;"	m	class:final
m_pos	src/streams.h	/^    size_t m_pos = 0;$/;"	m	class:VectorReader
m_pre_split	src/wallet/wallet.h	/^    bool m_pre_split;$/;"	m	class:CKeyPool
m_prefix	src/flatfile.h	/^    const char* const m_prefix;$/;"	m	class:FlatFileSeq
m_print_to_console	src/logging.h	/^        bool m_print_to_console = false;$/;"	m	class:BCLog::Logger
m_print_to_file	src/logging.h	/^        bool m_print_to_file = false;$/;"	m	class:BCLog::Logger
m_prk	src/crypto/hkdf_sha256_32.h	/^    unsigned char m_prk[32];$/;"	m	class:CHKDF_HMAC_SHA256_L32
m_protect	src/net_processing.cpp	/^        bool m_protect;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_provider	src/script/descriptor.cpp	/^    std::unique_ptr<PubkeyProvider> m_provider;$/;"	m	class:__anon75::final	file:
m_provider	src/script/sign.h	/^    const SigningProvider* m_provider;$/;"	m	class:HidingSigningProvider
m_pscheduler	src/scheduler.h	/^    CScheduler *m_pscheduler;$/;"	m	class:SingleThreadedSchedulerClient
m_pubkey	src/script/descriptor.cpp	/^    CPubKey m_pubkey;$/;"	m	class:__anon75::final	file:
m_pubkey_args	src/script/descriptor.cpp	/^    const std::vector<std::unique_ptr<PubkeyProvider>> m_pubkey_args;$/;"	m	class:__anon75::DescriptorImpl	file:
m_r_len	src/script/sign.cpp	/^    char m_r_len = 32;$/;"	m	class:__anon83::final	file:
m_reason	src/consensus/validation.h	/^    ValidationInvalidReason m_reason;$/;"	m	class:CValidationState
m_reason	src/test/miner_tests.cpp	/^    const std::string m_reason;$/;"	m	class:HasReason	file:
m_remaining	src/script/bitcoinconsensus.cpp	/^    size_t m_remaining;$/;"	m	class:__anon81::TxInputStream	file:
m_result	src/rpc/util.h	/^    const std::string m_result;$/;"	m	struct:RPCResult
m_results	src/rpc/util.h	/^    const RPCResults m_results;$/;"	m	class:RPCHelpMan
m_results	src/rpc/util.h	/^    const std::vector<RPCResult> m_results;$/;"	m	struct:RPCResults
m_right	src/rpc/util.cpp	/^    const std::string m_right;$/;"	m	struct:Section	file:
m_rpc_handlers	src/interfaces/wallet.cpp	/^    std::vector<std::unique_ptr<Handler>> m_rpc_handlers;$/;"	m	class:interfaces::__anon130::WalletClientImpl	file:
m_s_len	src/script/sign.cpp	/^    char m_s_len = 32;$/;"	m	class:__anon83::final	file:
m_schedulerClient	src/validationinterface.cpp	/^    SingleThreadedSchedulerClient m_schedulerClient;$/;"	m	struct:MainSignalsInstance	file:
m_script	src/script/descriptor.cpp	/^    const CScript m_script;$/;"	m	class:__anon75::final	file:
m_script_arg	src/script/descriptor.cpp	/^    const std::unique_ptr<DescriptorImpl> m_script_arg;$/;"	m	class:__anon75::DescriptorImpl	file:
m_search_string	src/qt/transactionfilterproxy.h	/^    QString m_search_string;$/;"	m	class:TransactionFilterProxy
m_sections	src/rpc/util.cpp	/^    std::vector<Section> m_sections;$/;"	m	struct:Sections	file:
m_sent_getheaders	src/net_processing.cpp	/^        bool m_sent_getheaders;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_signal_bip125_rbf	src/wallet/coincontrol.h	/^    boost::optional<bool> m_signal_bip125_rbf;$/;"	m	class:CCoinControl
m_siphash_k0	src/blockfilter.h	/^        uint64_t m_siphash_k0;$/;"	m	struct:GCSFilter::Params
m_siphash_k1	src/blockfilter.h	/^        uint64_t m_siphash_k1;$/;"	m	struct:GCSFilter::Params
m_size	src/span.h	/^    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}$/;"	f	class:Span
m_size	src/span.h	/^    std::ptrdiff_t m_size;$/;"	m	class:Span
m_specified_outgoing	src/net.h	/^        std::vector<std::string> m_specified_outgoing;$/;"	m	struct:CConnman::Options
m_stale_tip_check_time	src/net_processing.h	/^    int64_t m_stale_tip_check_time; \/\/!< Next time to check for stale tip$/;"	m	class:final
m_start_time	src/bench/bench.h	/^    time_point m_start_time;$/;"	m	class:benchmark::State
m_thread_name	src/sync.cpp	/^    const std::string& m_thread_name;$/;"	m	struct:CLockLocation	file:
m_thread_sync	src/index/base.h	/^    std::thread m_thread_sync;$/;"	m	class:BaseIndex
m_threshold	src/script/descriptor.cpp	/^    const int m_threshold;$/;"	m	class:__anon75::final	file:
m_timeout	src/net_processing.cpp	/^        int64_t m_timeout;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_toIntImpl	src/tinyformat.h	/^        int (*m_toIntImpl)(const void* value);$/;"	m	class:tinyformat::detail::FormatArg
m_tried_collisions	src/addrman.h	/^    std::set<int> m_tried_collisions;$/;"	m	class:CAddrMan
m_try_another_outbound_peer	src/net.h	/^    std::atomic_bool m_try_another_outbound_peer;$/;"	m	class:CConnman
m_tx	src/interfaces/wallet.cpp	/^    CTransactionRef m_tx;$/;"	m	class:interfaces::__anon130::PendingWalletTxImpl	file:
m_tx_announced	src/net_processing.cpp	/^        std::set<uint256> m_tx_announced;$/;"	m	struct:__anon89::CNodeState::TxDownloadState	file:
m_tx_download	src/net_processing.cpp	/^    TxDownloadState m_tx_download;$/;"	m	struct:__anon89::CNodeState	file:
m_tx_in_flight	src/net_processing.cpp	/^        std::set<uint256> m_tx_in_flight;$/;"	m	struct:__anon89::CNodeState::TxDownloadState	file:
m_tx_out	src/validation.h	/^    CTxOut m_tx_out;$/;"	m	class:CScriptCheck
m_tx_process_time	src/net_processing.cpp	/^        std::multimap<int64_t, uint256> m_tx_process_time;$/;"	m	struct:__anon89::CNodeState::TxDownloadState	file:
m_type	src/qt/addressbookpage.cpp	/^    const QString m_type;$/;"	m	class:final	file:
m_type	src/rpc/util.h	/^    const Type m_type;$/;"	m	struct:RPCArg
m_type	src/script/bitcoinconsensus.cpp	/^    const int m_type;$/;"	m	class:__anon81::TxInputStream	file:
m_type	src/streams.h	/^    const int m_type;$/;"	m	class:VectorReader
m_type_str	src/rpc/util.h	/^    const std::vector<std::string> m_type_str; \/\/!< Should be empty unless it is supposed to override the auto-generated type strings. Vector length is either 0 or 2, m_type_str.at(0) will override the type of the value in a key-value pair, m_type_str.at(1) will override the type in the argument description.$/;"	m	struct:RPCArg
m_use_addrman_outgoing	src/net.h	/^        bool m_use_addrman_outgoing = true;$/;"	m	struct:CConnman::Options
m_use_addrman_outgoing	src/net.h	/^    bool m_use_addrman_outgoing;$/;"	m	class:CConnman
m_val	src/serialize.h	/^    I& m_val;$/;"	m	class:BigEndian
m_value	src/script/ismine.h	/^    CAmount m_value[ISMINE_ENUM_ELEMENTS];$/;"	m	struct:CachableAmount
m_value	src/script/script.h	/^    int64_t m_value;$/;"	m	class:CScriptNum
m_value	src/test/scriptnum10.h	/^    int64_t m_value;$/;"	m	class:CScriptNum10
m_value	src/tinyformat.h	/^        const void* m_value;$/;"	m	class:tinyformat::detail::FormatArg
m_version	src/script/bitcoinconsensus.cpp	/^    const int m_version;$/;"	m	class:__anon81::TxInputStream	file:
m_version	src/streams.h	/^    const int m_version;$/;"	m	class:VectorReader
m_wallet	src/interfaces/wallet.cpp	/^    CWallet& m_wallet;$/;"	m	class:interfaces::__anon130::PendingWalletTxImpl	file:
m_wallet	src/interfaces/wallet.cpp	/^    std::shared_ptr<CWallet> m_wallet;$/;"	m	class:interfaces::__anon130::WalletImpl	file:
m_wallet	src/qt/walletmodel.h	/^    std::unique_ptr<interfaces::Wallet> m_wallet;$/;"	m	class:WalletModel
m_wallet	src/wallet/test/wallet_test_fixture.h	/^    CWallet m_wallet;$/;"	m	struct:WalletTestingSetup
m_wallet	src/wallet/wallet.h	/^    CWallet* m_wallet;$/;"	m	class:WalletRescanReserver
m_wallet_controller	src/qt/walletcontroller.h	/^    WalletController* const m_wallet_controller;$/;"	m	class:OpenWalletActivity
m_wallet_filenames	src/interfaces/wallet.cpp	/^    std::vector<std::string> m_wallet_filenames;$/;"	m	class:interfaces::__anon130::WalletClientImpl	file:
m_wallet_selector	src/qt/bitcoingui.h	/^    QComboBox* m_wallet_selector = nullptr;$/;"	m	class:BitcoinGUI
m_wallet_selector_action	src/qt/bitcoingui.h	/^    QAction* m_wallet_selector_action = nullptr;$/;"	m	class:BitcoinGUI
m_wallet_selector_label	src/qt/bitcoingui.h	/^    QLabel *m_wallet_selector_label = nullptr;$/;"	m	class:BitcoinGUI
m_wallet_selector_label_action	src/qt/bitcoingui.h	/^    QAction* m_wallet_selector_label_action = nullptr;$/;"	m	class:BitcoinGUI
m_walletdir_path_cases	src/wallet/test/init_test_fixture.h	/^    std::map<std::string, fs::path> m_walletdir_path_cases;$/;"	m	struct:InitWalletDirTestingSetup
m_wallets	src/qt/walletcontroller.h	/^    std::vector<WalletModel*> m_wallets;$/;"	m	class:WalletController
m_width	src/bench/bench.h	/^    int64_t m_width;$/;"	m	class:benchmark::PlotlyPrinter
m_witness_hash	src/primitives/transaction.h	/^    const uint256 m_witness_hash;$/;"	m	class:CTransaction
m_work_header	src/net_processing.cpp	/^        const CBlockIndex * m_work_header;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_wrapped_command	src/interfaces/chain.cpp	/^    const CRPCCommand* m_wrapped_command;$/;"	m	class:interfaces::__anon129::RpcHandlerImpl	file:
m_x	src/reverse_iterator.h	/^    T &m_x;$/;"	m	class:reverse_range
macosDockIconActivated	src/qt/bitcoingui.cpp	/^void BitcoinGUI::macosDockIconActivated()$/;"	f	class:BitcoinGUI
magnitude	src/secp256k1/src/field_10x26.h	/^    int magnitude;$/;"	m	struct:__anon94
magnitude	src/secp256k1/src/field_5x52.h	/^    int magnitude;$/;"	m	struct:__anon96
main	build-aux/config.guess	/^		main()$/;"	f
main	build-aux/config.guess	/^	main ()$/;"	f
main	build_msvc/msvc-autogen.py	/^def main():$/;"	f
main	build_msvc/testconsensus/testconsensus.cpp	/^int main()$/;"	f
main	contrib/devtools/clang-format-diff.py	/^def main():$/;"	f
main	contrib/devtools/github-merge.py	/^def main():$/;"	f
main	contrib/gitian-build.py	/^def main():$/;"	f
main	contrib/seeds/generate-seeds.py	/^def main():$/;"	f
main	contrib/seeds/makeseeds.py	/^def main():$/;"	f
main	contrib/verify-commits/verify-commits.py	/^def main():$/;"	f
main	depends/config.guess	/^		main()$/;"	f
main	depends/config.guess	/^	main ()$/;"	f
main	share/rpcauth/rpcauth.py	/^def main():$/;"	f
main	src/bench/bench_bitcoin.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/bitcoin-cli.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/bitcoin-tx.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/bitcoin-wallet.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/bitcoind.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/crypto/ctaes/bench.c	/^int main(void) {$/;"	f
main	src/crypto/ctaes/test.c	/^int main(void) {$/;"	f
main	src/leveldb/db/autocompact_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/corruption_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/fault_injection_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/leveldbutil.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/recovery_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/version_set_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/doc/bench/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/issues/issue178_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/issues/issue200_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/table/filter_block_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/bloom_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/env_posix_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/leveldb/util/hash_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/qt/main.cpp	/^int main(int argc, char* argv[]) { return GuiMain(argc, argv); }$/;"	f
main	src/qt/test/test_main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/secp256k1/build-aux/config.guess	/^		main()$/;"	f
main	src/secp256k1/build-aux/config.guess	/^	main ()$/;"	f
main	src/secp256k1/src/bench_ecdh.c	/^int main(void) {$/;"	f
main	src/secp256k1/src/bench_internal.c	/^int main(int argc, char **argv) {$/;"	f
main	src/secp256k1/src/bench_recover.c	/^int main(void) {$/;"	f
main	src/secp256k1/src/bench_sign.c	/^int main(void) {$/;"	f
main	src/secp256k1/src/bench_verify.c	/^int main(void) {$/;"	f
main	src/secp256k1/src/gen_context.c	/^int main(int argc, char **argv) {$/;"	f
main	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void main(String[] args) throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
main	src/secp256k1/src/tests.c	/^int main(int argc, char **argv) {$/;"	f
main	src/secp256k1/src/tests_exhaustive.c	/^int main(void) {$/;"	f
main	src/test/fuzz/fuzz.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/univalue/build-aux/config.guess	/^		main()$/;"	f
main	src/univalue/build-aux/config.guess	/^	main ()$/;"	f
main	src/univalue/gen/gen.cpp	/^int main (int argc, char *argv[])$/;"	f
main	src/univalue/test/no_nul.cpp	/^int main (int argc, char *argv[])$/;"	f
main	src/univalue/test/object.cpp	/^int main (int argc, char *argv[])$/;"	f
main	src/univalue/test/test_json.cpp	/^int main (int argc, char *argv[])$/;"	f
main	src/univalue/test/unitester.cpp	/^int main (int argc, char *argv[])$/;"	f
main	test/functional/combine_logs.py	/^def main():$/;"	f
main	test/functional/test_framework/test_framework.py	/^    def main(self):$/;"	m	class:BitcoinTestFramework
main	test/functional/test_runner.py	/^def main():$/;"	f
main	test/fuzz/test_runner.py	/^def main():$/;"	f
main	test/lint/check-doc.py	/^def main():$/;"	f
main	test/lint/check-rpc-mappings.py	/^def main():$/;"	f
main	test/lint/lint-format-strings.py	/^def main():$/;"	f
main	test/util/bitcoin-util-test.py	/^def main():$/;"	f
makeFormatList	src/tinyformat.h	/^detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)$/;"	f	namespace:tinyformat
make_change	test/functional/test_framework/util.py	/^def make_change(from_node, amount_in, amount_out, fee):$/;"	f
make_dummy_depfile	build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_dummy_depfile	src/secp256k1/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_dummy_depfile	src/univalue/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_hard_case	src/bench/coin_selection.cpp	/^static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)$/;"	f	file:
make_hard_case	src/wallet/test/coinselector_tests.cpp	/^static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)$/;"	f	file:
make_tx	src/test/mempool_tests.cpp	/^inline CTransactionRef make_tx(std::vector<CAmount>&& output_values, std::vector<CTransactionRef>&& inputs=std::vector<CTransactionRef>(), std::vector<uint32_t>&& input_indices=std::vector<uint32_t>())$/;"	f
make_utxo	test/functional/feature_rbf.py	/^def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):$/;"	f
make_utxos	test/functional/p2p_compactblocks.py	/^    def make_utxos(self):$/;"	m	class:CompactBlocksTest
man1dir	doc/man/Makefile	/^man1dir = $(mandir)\/man1$/;"	m
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	doc/man/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	src/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	src/secp256k1/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	src/univalue/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
manifest_file_number_	src/leveldb/db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifest_sync_error_	src/leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifest_write_error_	src/leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_write_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifests_	src/leveldb/db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon30::Repairer	file:
manual_compaction_	src/leveldb/db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
manual_test	test/functional/feature_pruning.py	/^    def manual_test(self, node_number, use_timestamp):$/;"	m	class:PruneTest
map	src/limitedmap.h	/^    std::map<K, V> map;$/;"	m	class:limitedmap
map	src/test/coins_tests.cpp	/^    CCoinsMap& map() const { return cacheCoins; }$/;"	f	class:__anon60::CCoinsViewCacheTest
mapBase58	src/base58.cpp	/^static const int8_t mapBase58[256] = {$/;"	v	file:
mapBlockIndex	src/validation.cpp	/^BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;$/;"	v
mapBlocksUnlinked	src/validation.cpp	/^    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;$/;"	m	class:CChainState	file:
mapBlocksUnlinked	src/validation.cpp	/^    std::multimap<CBlockIndex*, CBlockIndex*>& mapBlocksUnlinked = g_chainstate.mapBlocksUnlinked;$/;"	m	namespace:__anon50	file:
mapCheckpoints	src/chainparams.h	/^    MapCheckpoints mapCheckpoints;$/;"	m	struct:CCheckpointData
mapCommands	src/rpc/server.h	/^    std::map<std::string, std::vector<const CRPCCommand*>> mapCommands;$/;"	m	class:CRPCTable
mapDeltas	src/txmempool.h	/^    std::map<uint256, CAmount> mapDeltas;$/;"	m	class:CTxMemPool
mapFileUseCount	src/wallet/db.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:BerkeleyEnvironment
mapFlagNames	src/test/transaction_tests.cpp	/^static std::map<std::string, unsigned int> mapFlagNames = {$/;"	v	file:
mapLinks	src/txmempool.h	/^    txlinksMap mapLinks;$/;"	m	class:CTxMemPool
mapMasterKeys	src/wallet/wallet.h	/^    MasterKeyMap mapMasterKeys;$/;"	m	class:final
mapMsgCmdSize	src/net.h	/^typedef std::map<std::string, uint64_t> mapMsgCmdSize; \/\/command, total bytes$/;"	t
mapNodeRows	src/qt/peertablemodel.cpp	/^    std::map<NodeId, int> mapNodeRows;$/;"	m	class:PeerTablePriv	file:
mapPublishNotifiers	src/zmq/zmqpublishnotifier.cpp	/^static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;$/;"	v	file:
mapRecvBytesPerMsgCmd	src/net.h	/^    mapMsgCmdSize mapRecvBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapSendBytesPerMsgCmd	src/net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNode
mapSendBytesPerMsgCmd	src/net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapSigHashTypes	src/core_write.cpp	/^const std::map<unsigned char, std::string> mapSigHashTypes = {$/;"	v
mapValue	src/wallet/wallet.h	/^    mapValue_t mapValue;$/;"	m	class:CWalletTx
mapValue_t	src/wallet/wallet.h	/^typedef std::map<std::string, std::string> mapValue_t;$/;"	t
mapWalletViews	src/qt/walletframe.h	/^    QMap<WalletModel*, WalletView*> mapWalletViews;$/;"	m	class:WalletFrame
map_	src/leveldb/db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot	file:
map_	src/leveldb/db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	src/leveldb/db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
map_	src/test/coins_tests.cpp	/^    std::map<COutPoint, Coin> map_;$/;"	m	class:__anon60::CCoinsViewTest	file:
map_type	src/script/sigcache.cpp	/^    typedef CuckooCache::cache<uint256, SignatureCacheHasher> map_type;$/;"	t	class:__anon84::CSignatureCache	file:
mapped_type	src/limitedmap.h	/^    typedef V mapped_type;$/;"	t	class:limitedmap
mapper	src/qt/editaddressdialog.h	/^    QDataWidgetMapper *mapper;$/;"	m	class:EditAddressDialog
mapper	src/qt/optionsdialog.h	/^    QDataWidgetMapper *mapper;$/;"	m	class:OptionsDialog
mapperThirdPartyTxUrls	src/qt/transactionview.h	/^    QSignalMapper *mapperThirdPartyTxUrls;$/;"	m	class:TransactionView
markValid	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::markValid()$/;"	f	class:QValidatedLineEdit
match	contrib/devtools/circular-dependencies.py	/^            match = RE.match(line)$/;"	v
math	test/functional/mempool_accept.py	/^import math$/;"	i
math	test/functional/p2p_segwit.py	/^import math$/;"	i
matures_in	src/qt/transactionrecord.h	/^    int matures_in;$/;"	m	class:TransactionStatus
max	src/leveldb/util/env_win.cc	/^#undef max$/;"	d	file:
max	src/random.h	/^    static constexpr uint64_t max() { return std::numeric_limits<uint64_t>::max(); }$/;"	f	class:FastRandomContext
maxDepth	src/httpserver.cpp	/^    size_t maxDepth;$/;"	m	class:WorkQueue	file:
maxInputBlock	src/txmempool.h	/^    CBlockIndex* maxInputBlock;$/;"	m	struct:LockPoints
maxMoney	src/qt/bitcoinunits.cpp	/^CAmount BitcoinUnits::maxMoney()$/;"	f	class:BitcoinUnits
max_	src/leveldb/util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_ancestors	src/wallet/coinselection.h	/^    const uint64_t max_ancestors;$/;"	m	struct:CoinEligibilityFilter
max_char	src/test/util.h	/^void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {$/;"	v
max_descendants	src/wallet/coinselection.h	/^    const uint64_t max_descendants;$/;"	m	struct:CoinEligibilityFilter
max_file_size	src/leveldb/include/leveldb/options.h	/^  size_t max_file_size;$/;"	m	struct:leveldb::Options
max_filter_index_cache	src/txdb.h	/^static const int64_t max_filter_index_cache = 1024;$/;"	v
max_height_	src/leveldb/db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	src/leveldb/include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	src/leveldb/db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	src/leveldb/db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon30::Repairer::TableInfo	file:
max_size	src/indirectmap.h	/^    size_type max_size() const      { return m.max_size(); }$/;"	f	class:indirectmap
max_size	src/limitedmap.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:limitedmap
max_size	src/limitedmap.h	/^    size_type max_size(size_type s)$/;"	f	class:limitedmap
max_stat_pos	test/functional/rpc_getblockstats.py	/^    max_stat_pos = 2$/;"	v	class:GetblockstatsTest
maybe_write	test/functional/test_framework/mininode.py	/^        def maybe_write():$/;"	f	function:P2PConnection.send_raw_message
median	src/timedata.h	/^    T median() const$/;"	f	class:CMedianFilter
mem	src/cuckoocache.h	/^    std::unique_ptr<std::atomic<uint8_t>[]> mem;$/;"	m	class:CuckooCache::bit_packed_atomic_flags
mem	src/leveldb/db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon18::IterState	file:
mem_	src/leveldb/db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	src/leveldb/db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon22::MemTableInserter	file:
members	src/rpc/client.cpp	/^    std::set<std::pair<std::string, int>> members;$/;"	m	class:CRPCConvertTable	file:
membersByName	src/rpc/client.cpp	/^    std::set<std::pair<std::string, std::string>> membersByName;$/;"	m	class:CRPCConvertTable	file:
memcpy	src/compat/glibc_compat.cpp	/^extern "C" void* memcpy(void* a, const void* b, size_t c)$/;"	f
memcpy_int	src/compat/glibc_sanity.cpp	/^void* memcpy_int(void* a, const void* b, size_t c)$/;"	f
memory_cleanse	src/support/cleanse.cpp	/^void memory_cleanse(void *ptr, size_t len)$/;"	f
memory_usage_	src/leveldb/util/arena.h	/^  port::AtomicPointer memory_usage_;$/;"	m	class:leveldb::Arena
mempool	src/txmempool.h	/^    const CTxMemPool& mempool;$/;"	m	class:CCoinsViewMemPool
mempool_count	src/blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
mempoolentry_txid	src/txmempool.h	/^struct mempoolentry_txid$/;"	s
memtable_	src/leveldb/table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
memtable_key	src/leveldb/db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
memusage	src/memusage.h	/^namespace memusage$/;"	n
menu	src/qt/bitcoingui.h	/^    QMenu* menu;$/;"	m	class:UnitDisplayStatusBarControl
message	src/qt/bitcoingui.cpp	/^void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)$/;"	f	class:BitcoinGUI
message	src/qt/rpcconsole.cpp	/^void RPCConsole::message(int category, const QString &message, bool html)$/;"	f	class:RPCConsole
message	src/qt/rpcconsole.h	/^    void message(int category, const QString &msg) { message(category, msg, false); }$/;"	f	class:RPCConsole
message	src/qt/walletmodel.h	/^    QString message;$/;"	m	class:SendCoinsRecipient
message	src/torcontrol.cpp	/^    TorControlReply message;$/;"	m	class:TorControlConnection	file:
message_	src/leveldb/db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon19::Stats	file:
message_	src/leveldb/db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
message_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
messages	share/qt/extract_strings_qt.py	/^messages = parse_po(out.decode('utf-8'))$/;"	v
messages	test/functional/p2p_invalid_messages.py	/^from test_framework import messages$/;"	i
meta	src/leveldb/db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon30::Repairer::TableInfo	file:
metaType	src/qt/notificator.cpp	/^int FreedesktopImage::metaType()$/;"	f	class:FreedesktopImage
meta_depends	depends/Makefile	/^meta_depends = Makefile funcs.mk builders\/default.mk hosts\/default.mk hosts\/$(host_os).mk builders\/$(build_os).mk$/;"	m
metadata_keys	contrib/testgen/gen_key_io_test_vectors.py	/^metadata_keys = ['isPrivkey', 'chain', 'isCompressed', 'tryCaseFlip']$/;"	v
metaindex_handle	src/leveldb/table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	src/leveldb/table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	src/leveldb/table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	src/leveldb/db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
method	src/rpc/server.cpp	/^    std::string method;$/;"	m	struct:RPCCommandExecutionInfo	file:
methodName	src/rpc/client.cpp	/^    std::string methodName; \/\/!< method whose params want conversion$/;"	m	class:CRPCConvertParam	file:
microTask	src/test/scheduler_tests.cpp	/^static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, boost::chrono::system_clock::time_point rescheduleTime)$/;"	f	file:
micros	src/leveldb/db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
min	src/random.h	/^    static constexpr uint64_t min() { return 0; }$/;"	f	class:FastRandomContext
minAmount	src/qt/transactionfilterproxy.h	/^    CAmount minAmount;$/;"	m	class:TransactionFilterProxy
minFeeFilter	src/net.h	/^    CAmount minFeeFilter;$/;"	m	class:CNodeStats
minRelayTxFee	src/validation.cpp	/^CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);$/;"	v
min_	src/leveldb/util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
min_char	src/test/util.h	/^bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)$/;"	v
min_char	src/test/util.h	/^void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {$/;"	v
mine_and_test_listunspent	test/functional/feature_segwit.py	/^    def mine_and_test_listunspent(self, script_list, ismine):$/;"	m	class:SegWitTest
mine_blocks	test/functional/p2p_sendheaders.py	/^    def mine_blocks(self, count):$/;"	m	class:SendHeadersTest
mine_chain	test/functional/mining_basic.py	/^    def mine_chain(self):$/;"	m	class:MiningTest
mine_chain	test/functional/rpc_blockchain.py	/^    def mine_chain(self):$/;"	m	class:BlockchainTest
mine_large_block	test/functional/feature_maxuploadtarget.py	/^from test_framework.util import assert_equal, mine_large_block$/;"	i
mine_large_block	test/functional/test_framework/util.py	/^def mine_large_block(node, utxos=None):$/;"	f
mine_large_blocks	test/functional/feature_pruning.py	/^def mine_large_blocks(node, n):$/;"	f
mine_reorg	test/functional/p2p_sendheaders.py	/^    def mine_reorg(self, length):$/;"	m	class:SendHeadersTest
minerPolicyEstimator	src/txmempool.h	/^    CBlockPolicyEstimator* minerPolicyEstimator;$/;"	m	class:CTxMemPool
mingw32_CFLAGS	depends/hosts/mingw32.mk	/^mingw32_CFLAGS=-pipe$/;"	m
mingw32_CXXFLAGS	depends/hosts/mingw32.mk	/^mingw32_CXXFLAGS=$(mingw32_CFLAGS)$/;"	m
mingw32_debug_CFLAGS	depends/hosts/mingw32.mk	/^mingw32_debug_CFLAGS=-O1$/;"	m
mingw32_debug_CPPFLAGS	depends/hosts/mingw32.mk	/^mingw32_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC$/;"	m
mingw32_debug_CXXFLAGS	depends/hosts/mingw32.mk	/^mingw32_debug_CXXFLAGS=$(mingw32_debug_CFLAGS)$/;"	m
mingw32_release_CFLAGS	depends/hosts/mingw32.mk	/^mingw32_release_CFLAGS=-O2$/;"	m
mingw32_release_CXXFLAGS	depends/hosts/mingw32.mk	/^mingw32_release_CXXFLAGS=$(mingw32_release_CFLAGS)$/;"	m
minimizeFeeSection	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::minimizeFeeSection(bool fMinimize)$/;"	f	class:SendCoinsDialog
minimumSizeHint	src/qt/bitcoinamountfield.cpp	/^    QSize minimumSizeHint() const$/;"	f	class:AmountSpinBox
mininode_lock	test/functional/feature_dersig.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
mininode_lock	test/functional/feature_versionbits_warning.py	/^from test_framework.mininode import P2PInterface, mininode_lock$/;"	i
mininode_lock	test/functional/p2p_compactblocks.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
mininode_lock	test/functional/p2p_feefilter.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
mininode_lock	test/functional/p2p_leak.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
mininode_lock	test/functional/p2p_node_network_limited.py	/^from test_framework.mininode import P2PInterface, mininode_lock$/;"	i
mininode_lock	test/functional/p2p_unrequested_blocks.py	/^from test_framework.mininode import mininode_lock, P2PInterface$/;"	i
mininode_lock	test/functional/test_framework/mininode.py	/^mininode_lock = threading.RLock()$/;"	v
mininode_lock	test/functional/wallet_resendwallettransactions.py	/^from test_framework.mininode import P2PInterface, mininode_lock$/;"	i
misc_pubkeys	src/script/sign.h	/^    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;$/;"	m	struct:SignatureData
missing_pubkeys	src/node/psbt.h	/^    std::vector<CKeyID> missing_pubkeys; \/\/!< Pubkeys whose BIP32 derivation path is missing$/;"	m	struct:PSBTInputAnalysis
missing_pubkeys	src/script/sign.h	/^    std::vector<CKeyID> missing_pubkeys; \/\/\/< KeyIDs of pubkeys which could not be found$/;"	m	struct:SignatureData
missing_redeem_script	src/node/psbt.h	/^    uint160 missing_redeem_script;       \/\/!< Hash160 of redeem script, if missing$/;"	m	struct:PSBTInputAnalysis
missing_redeem_script	src/script/sign.h	/^    uint160 missing_redeem_script; \/\/\/< ScriptID of the missing redeemScript (if any)$/;"	m	struct:SignatureData
missing_sigs	src/node/psbt.h	/^    std::vector<CKeyID> missing_sigs;    \/\/!< Pubkeys whose signatures are missing$/;"	m	struct:PSBTInputAnalysis
missing_sigs	src/script/sign.h	/^    std::vector<CKeyID> missing_sigs; \/\/\/< KeyIDs of pubkeys for signatures which could not be found$/;"	m	struct:SignatureData
missing_witness_script	src/node/psbt.h	/^    uint256 missing_witness_script;      \/\/!< SHA256 of witness script, if missing$/;"	m	struct:PSBTInputAnalysis
missing_witness_script	src/script/sign.h	/^    uint256 missing_witness_script; \/\/\/< SHA256 of the missing witnessScript (if any)$/;"	m	struct:SignatureData
mkblockmap	contrib/linearize/linearize-data.py	/^def mkblockmap(blkindex):$/;"	f
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	doc/man/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	src/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	src/secp256k1/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	src/univalue/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	doc/man/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	src/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	src/secp256k1/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	src/univalue/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmap_limit	src/leveldb/util/env_posix.cc	/^static int mmap_limit = -1;$/;"	m	namespace:leveldb::__anon8	file:
mmap_limit_	src/leveldb/util/env_posix.cc	/^  Limiter mmap_limit_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
mmapped_region_	src/leveldb/util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
modalOverlay	src/qt/bitcoingui.h	/^    ModalOverlay* modalOverlay = nullptr;$/;"	m	class:BitcoinGUI
mode	src/consensus/validation.h	/^    } mode;$/;"	m	class:CValidationState	typeref:enum:CValidationState::mode_state
mode	src/qt/addressbookpage.h	/^    Mode mode;$/;"	m	class:AddressBookPage
mode	src/qt/askpassphrasedialog.h	/^    Mode mode;$/;"	m	class:AskPassphraseDialog
mode	src/qt/editaddressdialog.h	/^    Mode mode;$/;"	m	class:EditAddressDialog
mode	src/qt/notificator.h	/^    Mode mode;$/;"	m	class:Notificator
mode_state	src/consensus/validation.h	/^    enum mode_state {$/;"	g	class:CValidationState
model	src/qt/addressbookpage.h	/^    AddressTableModel *model;$/;"	m	class:AddressBookPage
model	src/qt/askpassphrasedialog.h	/^    WalletModel *model;$/;"	m	class:AskPassphraseDialog
model	src/qt/coincontroldialog.h	/^    WalletModel *model;$/;"	m	class:CoinControlDialog
model	src/qt/csvmodelwriter.h	/^    const QAbstractItemModel *model;$/;"	m	class:CSVModelWriter
model	src/qt/editaddressdialog.h	/^    AddressTableModel *model;$/;"	m	class:EditAddressDialog
model	src/qt/optionsdialog.h	/^    OptionsModel *model;$/;"	m	class:OptionsDialog
model	src/qt/receivecoinsdialog.h	/^    WalletModel *model;$/;"	m	class:ReceiveCoinsDialog
model	src/qt/receiverequestdialog.h	/^    WalletModel *model;$/;"	m	class:ReceiveRequestDialog
model	src/qt/sendcoinsdialog.h	/^    WalletModel *model;$/;"	m	class:SendCoinsDialog
model	src/qt/sendcoinsentry.h	/^    WalletModel *model;$/;"	m	class:SendCoinsEntry
model	src/qt/signverifymessagedialog.h	/^    WalletModel *model;$/;"	m	class:SignVerifyMessageDialog
model	src/qt/transactionview.h	/^    WalletModel *model;$/;"	m	class:TransactionView
modifiedentry_iter	src/miner.h	/^struct modifiedentry_iter {$/;"	s
modifyCount	src/txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_ancestor_state
modifyCount	src/txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_descendant_state
modifyFee	src/txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_ancestor_state
modifyFee	src/txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_descendant_state
modifySigOpsCost	src/txmempool.h	/^        int64_t modifySigOpsCost;$/;"	m	struct:update_ancestor_state
modifySize	src/txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_ancestor_state
modifySize	src/txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_descendant_state
modinv	test/functional/test_framework/key.py	/^def modinv(a, n):$/;"	f
modsqrt	test/functional/test_framework/key.py	/^def modsqrt(a, p):$/;"	f
modtxiter	src/miner.h	/^typedef indexed_modified_transaction_set::nth_index<0>::type::iterator modtxiter;$/;"	t
modtxscoreiter	src/miner.h	/^typedef indexed_modified_transaction_set::index<ancestor_score>::type::iterator modtxscoreiter;$/;"	t
module	contrib/devtools/circular-dependencies.py	/^    module = files[arg]$/;"	v
module	contrib/devtools/circular-dependencies.py	/^    module = module_name(arg)$/;"	v
module	contrib/devtools/circular-dependencies.py	/^    module = shortest_cycle[0]$/;"	v
module_name	contrib/devtools/circular-dependencies.py	/^def module_name(path):$/;"	f
mousePressEvent	src/qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)$/;"	f	class:UnitDisplayStatusBarControl
mousePressEvent	src/qt/qrimagewidget.cpp	/^void QRImageWidget::mousePressEvent(QMouseEvent *event)$/;"	f	class:QRImageWidget
mouseReleaseEvent	src/qt/guiutil.cpp	/^void ClickableLabel::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:GUIUtil::ClickableLabel
mouseReleaseEvent	src/qt/guiutil.cpp	/^void ClickableProgressBar::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:GUIUtil::ClickableProgressBar
move	src/test/prevector_tests.cpp	/^    void move() {$/;"	f	class:prevector_tester
move_tip	test/functional/feature_block.py	/^    def move_tip(self, number):$/;"	m	class:FullBlockTest
mp	src/net_processing.cpp	/^    CTxMemPool *mp;$/;"	m	class:__anon90::CompareInvMempoolOrder	file:
mpi2vch	test/functional/test_framework/bignum.py	/^def mpi2vch(s):$/;"	f
msg	src/net.h	/^    CSerializedNetMsg(const CSerializedNetMsg& msg) = delete;$/;"	m	struct:CSerializedNetMsg
msg	src/secp256k1/src/bench_recover.c	/^    unsigned char msg[32];$/;"	m	struct:__anon98	file:
msg	src/secp256k1/src/bench_sign.c	/^    unsigned char msg[32];$/;"	m	struct:__anon102	file:
msg	src/secp256k1/src/bench_verify.c	/^    unsigned char msg[32];$/;"	m	struct:__anon106	file:
msgIndent	src/util/system.cpp	/^static const int msgIndent = 7;$/;"	v	file:
msg_addr	test/functional/rpc_net.py	/^from test_framework.messages import CAddress, msg_addr, NODE_NETWORK, NODE_WITNESS$/;"	i
msg_addr	test/functional/test_framework/messages.py	/^class msg_addr:$/;"	c
msg_block	test/functional/feature_cltv.py	/^from test_framework.messages import CTransaction, msg_block, ToHex$/;"	i
msg_block	test/functional/feature_dersig.py	/^from test_framework.messages import msg_block$/;"	i
msg_block	test/functional/feature_versionbits_warning.py	/^from test_framework.messages import msg_block$/;"	i
msg_block	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_block	test/functional/p2p_unrequested_blocks.py	/^from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv$/;"	i
msg_block	test/functional/test_framework/messages.py	/^class msg_block:$/;"	c
msg_blocktxn	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_blocktxn	test/functional/test_framework/messages.py	/^class msg_blocktxn:$/;"	c
msg_cmpctblock	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_cmpctblock	test/functional/test_framework/messages.py	/^class msg_cmpctblock:$/;"	c
msg_feefilter	test/functional/p2p_feefilter.py	/^from test_framework.messages import msg_feefilter$/;"	i
msg_feefilter	test/functional/test_framework/messages.py	/^class msg_feefilter:$/;"	c
msg_generic	test/functional/test_framework/messages.py	/^class msg_generic:$/;"	c
msg_getaddr	test/functional/p2p_leak.py	/^from test_framework.messages import msg_getaddr, msg_ping, msg_verack$/;"	i
msg_getaddr	test/functional/test_framework/messages.py	/^class msg_getaddr:$/;"	c
msg_getblocks	test/functional/p2p_invalid_locator.py	/^from test_framework.messages import msg_getheaders, msg_getblocks, MAX_LOCATOR_SZ$/;"	i
msg_getblocks	test/functional/test_framework/messages.py	/^class msg_getblocks:$/;"	c
msg_getblocktxn	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_getblocktxn	test/functional/test_framework/messages.py	/^class msg_getblocktxn:$/;"	c
msg_getdata	test/functional/feature_maxuploadtarget.py	/^from test_framework.messages import CInv, msg_getdata$/;"	i
msg_getdata	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_getdata	test/functional/p2p_leak_tx.py	/^from test_framework.messages import msg_getdata, CInv$/;"	i
msg_getdata	test/functional/p2p_node_network_limited.py	/^from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS$/;"	i
msg_getdata	test/functional/test_framework/messages.py	/^class msg_getdata:$/;"	c
msg_getheaders	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_getheaders	test/functional/p2p_invalid_locator.py	/^from test_framework.messages import msg_getheaders, msg_getblocks, MAX_LOCATOR_SZ$/;"	i
msg_getheaders	test/functional/test_framework/messages.py	/^class msg_getheaders:$/;"	c
msg_headers	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_headers	test/functional/p2p_unrequested_blocks.py	/^from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv$/;"	i
msg_headers	test/functional/test_framework/messages.py	/^class msg_headers:$/;"	c
msg_inv	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_inv	test/functional/p2p_unrequested_blocks.py	/^from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv$/;"	i
msg_inv	test/functional/test_framework/messages.py	/^class msg_inv:$/;"	c
msg_mempool	test/functional/p2p_mempool.py	/^from test_framework.messages import msg_mempool$/;"	i
msg_mempool	test/functional/test_framework/messages.py	/^class msg_mempool:$/;"	c
msg_notfound	test/functional/test_framework/messages.py	/^class msg_notfound:$/;"	c
msg_ping	test/functional/p2p_leak.py	/^from test_framework.messages import msg_getaddr, msg_ping, msg_verack$/;"	i
msg_ping	test/functional/p2p_timeouts.py	/^from test_framework.messages import msg_ping$/;"	i
msg_ping	test/functional/test_framework/messages.py	/^class msg_ping:$/;"	c
msg_pong	test/functional/test_framework/messages.py	/^class msg_pong:$/;"	c
msg_reject	test/functional/test_framework/messages.py	/^class msg_reject:$/;"	c
msg_sendcmpct	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_sendcmpct	test/functional/test_framework/messages.py	/^class msg_sendcmpct:$/;"	c
msg_sendheaders	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_sendheaders	test/functional/test_framework/messages.py	/^class msg_sendheaders:$/;"	c
msg_tx	test/functional/p2p_blocksonly.py	/^from test_framework.messages import msg_tx, CTransaction, FromHex$/;"	i
msg_tx	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_tx	test/functional/test_framework/messages.py	/^class msg_tx:$/;"	c
msg_unrecognized	test/functional/p2p_invalid_messages.py	/^class msg_unrecognized:$/;"	c
msg_verack	test/functional/p2p_leak.py	/^from test_framework.messages import msg_getaddr, msg_ping, msg_verack$/;"	i
msg_verack	test/functional/p2p_node_network_limited.py	/^from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS$/;"	i
msg_verack	test/functional/test_framework/messages.py	/^class msg_verack:$/;"	c
msg_version	test/functional/test_framework/messages.py	/^class msg_version:$/;"	c
msg_witness_block	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_witness_block	test/functional/test_framework/messages.py	/^class msg_witness_block(msg_block):$/;"	c
msg_witness_blocktxn	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
msg_witness_blocktxn	test/functional/test_framework/messages.py	/^class msg_witness_blocktxn(msg_blocktxn):$/;"	c
msg_witness_tx	test/functional/test_framework/messages.py	/^class msg_witness_tx(msg_tx):$/;"	c
mu	src/leveldb/db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon19::SharedState	file:
mu	src/leveldb/db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon18::IterState	file:
mu	src/leveldb/util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State	file:
mu_	src/leveldb/db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon23::AtomicCounter	file:
mu_	src/leveldb/db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	src/leveldb/port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	src/leveldb/port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	src/leveldb/port/port_win.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	src/leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon8::Limiter	file:
mu_	src/leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon8::PosixLockTable	file:
mu_	src/leveldb/util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
mu_	src/leveldb/util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvTest	file:
mu_	src/leveldb/util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
mul	test/functional/test_framework/key.py	/^    def mul(self, ps):$/;"	m	class:EllipticCurve
mul32x32_64	src/crypto/poly1305.cpp	/^#define mul32x32_64(/;"	d	file:
muladd	src/secp256k1/src/scalar_4x64_impl.h	/^#define muladd(/;"	d
muladd	src/secp256k1/src/scalar_4x64_impl.h	/^#undef muladd$/;"	d
muladd	src/secp256k1/src/scalar_8x32_impl.h	/^#define muladd(/;"	d
muladd	src/secp256k1/src/scalar_8x32_impl.h	/^#undef muladd$/;"	d
muladd2	src/secp256k1/src/scalar_4x64_impl.h	/^#define muladd2(/;"	d
muladd2	src/secp256k1/src/scalar_4x64_impl.h	/^#undef muladd2$/;"	d
muladd2	src/secp256k1/src/scalar_8x32_impl.h	/^#define muladd2(/;"	d
muladd2	src/secp256k1/src/scalar_8x32_impl.h	/^#undef muladd2$/;"	d
muladd_fast	src/secp256k1/src/scalar_4x64_impl.h	/^#define muladd_fast(/;"	d
muladd_fast	src/secp256k1/src/scalar_4x64_impl.h	/^#undef muladd_fast$/;"	d
muladd_fast	src/secp256k1/src/scalar_8x32_impl.h	/^#define muladd_fast(/;"	d
muladd_fast	src/secp256k1/src/scalar_8x32_impl.h	/^#undef muladd_fast$/;"	d
multiUserAuthorized	src/httprpc.cpp	/^static bool multiUserAuthorized(std::string strUserPass)$/;"	f	file:
multidict	test/functional/rpc_rawtransaction.py	/^class multidict(dict):$/;"	c
multisig	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a 1-of-2 bare multisig from descriptor")$/;"	i
mut	src/threadinterrupt.h	/^    Mutex mut;$/;"	m	class:CThreadInterrupt
mutex	src/checkqueue.h	/^    boost::mutex mutex;$/;"	m	class:CCheckQueue
mutex	src/qt/intro.h	/^    QMutex mutex;$/;"	m	class:Intro
mutex	src/rpc/server.cpp	/^    Mutex mutex;$/;"	m	struct:RPCServerInfo	file:
mutex	src/support/lockedpool.h	/^    mutable std::mutex mutex;$/;"	m	class:LockedPool
mutex	src/sync.h	/^    std::mutex mutex;$/;"	m	class:CSemaphore
mutexMsgProc	src/net.h	/^    Mutex mutexMsgProc;$/;"	m	class:CConnman
mutexName	src/sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
mutexScanning	src/wallet/wallet.h	/^    std::mutex mutexScanning;$/;"	m	class:final
mutex_	src/leveldb/db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	src/leveldb/db/fault_injection_test.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
mutex_	src/leveldb/helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon35::InMemoryEnv	file:
mutex_	src/leveldb/port/port_win.h	/^    Mutex mutex_;$/;"	m	class:leveldb::port::OnceType
mutex_	src/leveldb/util/cache.cc	/^  mutable port::Mutex mutex_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
n	src/primitives/transaction.h	/^    uint32_t n;$/;"	m	class:COutPoint
n	src/secp256k1/src/field_10x26.h	/^    uint32_t n[10];$/;"	m	struct:__anon94
n	src/secp256k1/src/field_10x26.h	/^    uint32_t n[8];$/;"	m	struct:__anon95
n	src/secp256k1/src/field_5x52.h	/^    uint64_t n[4];$/;"	m	struct:__anon97
n	src/secp256k1/src/field_5x52.h	/^    uint64_t n[5];$/;"	m	struct:__anon96
n	src/serialize.h	/^    I &n;$/;"	m	class:CVarInt
n	src/serialize.h	/^    uint64_t &n;$/;"	m	class:CCompactSize
n	test/functional/test_framework/util.py	/^    n = None$/;"	v	class:PortSeed
nAccountingEntryNumber	src/wallet/wallet.h	/^    uint64_t nAccountingEntryNumber = 0;$/;"	m	class:final
nAmount	src/wallet/wallet.h	/^    CAmount nAmount;$/;"	m	struct:CRecipient
nBanUntil	src/addrdb.h	/^    int64_t nBanUntil;$/;"	m	class:CBanEntry
nBatchSize	src/checkqueue.h	/^    unsigned int nBatchSize;$/;"	m	class:CCheckQueue
nBestHeight	src/net.h	/^        int nBestHeight = 0;$/;"	m	struct:CConnman::Options
nBestHeight	src/net.h	/^    std::atomic<int> nBestHeight;$/;"	m	class:CConnman
nBits	src/chain.h	/^    uint32_t nBits;$/;"	m	class:CBlockIndex
nBits	src/primitives/block.h	/^    uint32_t nBits;$/;"	m	class:CBlockHeader
nBlockMaxWeight	src/miner.h	/^        size_t nBlockMaxWeight;$/;"	m	struct:BlockAssembler::Options
nBlockMaxWeight	src/miner.h	/^    unsigned int nBlockMaxWeight;$/;"	m	class:BlockAssembler
nBlockReverseSequenceId	src/validation.cpp	/^    int32_t nBlockReverseSequenceId = -1;$/;"	m	class:CChainState	file:
nBlockSequenceId	src/validation.cpp	/^    int32_t nBlockSequenceId = 1;$/;"	m	class:CChainState	file:
nBlockSigOpsCost	src/miner.h	/^    uint64_t nBlockSigOpsCost;$/;"	m	class:BlockAssembler
nBlockTx	src/miner.h	/^    uint64_t nBlockTx;$/;"	m	class:BlockAssembler
nBlockWeight	src/miner.h	/^    uint64_t nBlockWeight;$/;"	m	class:BlockAssembler
nBlocks	src/chain.h	/^    unsigned int nBlocks;      \/\/!< number of blocks stored in file$/;"	m	class:CBlockFileInfo
nBlocksInFlight	src/net_processing.cpp	/^    int nBlocksInFlight;$/;"	m	struct:__anon89::CNodeState	file:
nBlocksInFlightValidHeaders	src/net_processing.cpp	/^    int nBlocksInFlightValidHeaders;$/;"	m	struct:__anon89::CNodeState	file:
nBlocksTotal	src/validation.cpp	/^static int64_t nBlocksTotal = 0;$/;"	v	file:
nBogoSize	src/rpc/blockchain.cpp	/^    uint64_t nBogoSize;$/;"	m	struct:CCoinsStats	file:
nBytesPerSigOp	src/policy/settings.cpp	/^unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;$/;"	v
nChainTx	src/chain.h	/^    unsigned int nChainTx;$/;"	m	class:CBlockIndex
nChainWork	src/chain.h	/^    arith_uint256 nChainWork;$/;"	m	class:CBlockIndex
nChangeCached	src/wallet/wallet.h	/^    mutable CAmount nChangeCached;$/;"	m	class:CWalletTx
nChild	src/key.h	/^    unsigned int nChild;$/;"	m	struct:CExtKey
nChild	src/pubkey.h	/^    unsigned int nChild;$/;"	m	struct:CExtPubKey
nChild	src/test/bip32_tests.cpp	/^    unsigned int nChild;$/;"	m	struct:TestDerivation	file:
nCoinCacheUsage	src/validation.cpp	/^size_t nCoinCacheUsage = 5000 * 300;$/;"	v
nCommonHeight	src/net_processing.h	/^    int nCommonHeight = -1;$/;"	m	struct:CNodeStateStats
nConnectTimeout	src/netbase.cpp	/^int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;$/;"	v
nCountWithAncestors	src/txmempool.h	/^    uint64_t nCountWithAncestors;$/;"	m	class:CTxMemPoolEntry
nCountWithDescendants	src/txmempool.h	/^    uint64_t nCountWithDescendants;  \/\/!< number of descendant transactions$/;"	m	class:CTxMemPoolEntry
nCreateTime	src/addrdb.h	/^    int64_t nCreateTime;$/;"	m	class:CBanEntry
nCreateTime	src/wallet/walletdb.h	/^    int64_t nCreateTime; \/\/ 0 means unknown$/;"	m	class:CKeyMetadata
nDataPos	src/chain.h	/^    unsigned int nDataPos;$/;"	m	class:CBlockIndex
nDataPos	src/net.h	/^    unsigned int nDataPos;$/;"	m	class:CNetMessage
nDefaultDbBatchSize	src/txdb.h	/^static const int64_t nDefaultDbBatchSize = 16 << 20;$/;"	v
nDefaultDbCache	src/txdb.h	/^static const int64_t nDefaultDbCache = 450;$/;"	v
nDefaultMaxNumSize	src/script/script.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum
nDefaultMaxNumSize	src/test/scriptnum10.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum10
nDefaultPort	src/chainparams.h	/^    int nDefaultPort;$/;"	m	class:CChainParams
nDepth	src/key.h	/^    unsigned char nDepth;$/;"	m	struct:CExtKey
nDepth	src/pubkey.h	/^    unsigned char nDepth;$/;"	m	struct:CExtPubKey
nDepth	src/wallet/wallet.h	/^    int nDepth;$/;"	m	class:COutput
nDerivationMethod	src/wallet/crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	src/wallet/crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nDiskSize	src/rpc/blockchain.cpp	/^    uint64_t nDiskSize;$/;"	m	struct:CCoinsStats	file:
nDisplayUnit	src/qt/optionsmodel.h	/^    int nDisplayUnit;$/;"	m	class:OptionsModel
nDownloadingSince	src/net_processing.cpp	/^    int64_t nDownloadingSince;$/;"	m	struct:__anon89::CNodeState	file:
nEntriesPerGeneration	src/bloom.h	/^    int nEntriesPerGeneration;$/;"	m	class:CRollingBloomFilter
nEntriesThisGeneration	src/bloom.h	/^    int nEntriesThisGeneration;$/;"	m	class:CRollingBloomFilter
nExternalChainCounter	src/wallet/walletdb.h	/^    uint32_t nExternalChainCounter;$/;"	m	class:CHDChain
nFD	src/init.cpp	/^int nFD;$/;"	m	namespace:__anon123	file:
nFee	src/test/setup_common.h	/^    CAmount nFee;$/;"	m	struct:TestMemPoolEntryHelper
nFee	src/txmempool.h	/^    const CAmount nFee;             \/\/!< Cached to avoid expensive parent-transaction lookups$/;"	m	class:CTxMemPoolEntry
nFeeDelta	src/txmempool.h	/^    int64_t nFeeDelta;$/;"	m	struct:TxMempoolInfo
nFees	src/miner.h	/^    CAmount nFees;$/;"	m	class:BlockAssembler
nFile	src/chain.h	/^    int nFile;$/;"	m	class:CBlockIndex
nFile	src/flatfile.h	/^    int nFile;$/;"	m	struct:FlatFilePos
nFlags	src/bloom.h	/^    unsigned char nFlags;$/;"	m	class:CBloomFilter
nFlags	src/validation.h	/^    unsigned int nFlags;$/;"	m	class:CScriptCheck
nFrozen	src/test/checkqueue_tests.cpp	/^    static std::atomic<uint64_t> nFrozen;$/;"	m	struct:FrozenCleanupCheck	file:
nGeneration	src/bloom.h	/^    int nGeneration;$/;"	m	class:CRollingBloomFilter
nHashFuncs	src/bloom.h	/^    int nHashFuncs;$/;"	m	class:CRollingBloomFilter
nHashFuncs	src/bloom.h	/^    unsigned int nHashFuncs;$/;"	m	class:CBloomFilter
nHashType	src/script/sign.h	/^    int nHashType;$/;"	m	class:MutableTransactionSignatureCreator
nHdrPos	src/net.h	/^    unsigned int nHdrPos;$/;"	m	class:CNetMessage
nHeadersSyncTimeout	src/net_processing.cpp	/^    int64_t nHeadersSyncTimeout;$/;"	m	struct:__anon89::CNodeState	file:
nHeight	src/chain.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nHeight	src/miner.h	/^    int nHeight;$/;"	m	class:BlockAssembler
nHeight	src/rest.cpp	/^    uint32_t nHeight;$/;"	m	struct:CCoin	file:
nHeight	src/rpc/blockchain.cpp	/^    int nHeight;$/;"	m	struct:CCoinsStats	file:
nHeight	src/test/setup_common.h	/^    unsigned int nHeight;$/;"	m	struct:TestMemPoolEntryHelper
nHeight	src/txdb.cpp	/^    int nHeight;$/;"	m	class:__anon122::CCoins	file:
nHeightFirst	src/chain.h	/^    unsigned int nHeightFirst; \/\/!< lowest height of block in file$/;"	m	class:CBlockFileInfo
nHeightLast	src/chain.h	/^    unsigned int nHeightLast;  \/\/!< highest height of block in file$/;"	m	class:CBlockFileInfo
nIdle	src/checkqueue.h	/^    int nIdle;$/;"	m	class:CCheckQueue
nIn	src/script/interpreter.cpp	/^    const unsigned int nIn;    \/\/!< input index of txTo being signed$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
nIn	src/script/interpreter.h	/^    unsigned int nIn;$/;"	m	class:GenericTransactionSignatureChecker
nIn	src/script/sign.h	/^    unsigned int nIn;$/;"	m	class:MutableTransactionSignatureCreator
nIn	src/validation.h	/^    unsigned int nIn;$/;"	m	class:CScriptCheck
nIndex	src/wallet/wallet.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nInputBytes	src/wallet/wallet.h	/^    int nInputBytes;$/;"	m	class:COutput
nInternalChainCounter	src/wallet/walletdb.h	/^    uint32_t nInternalChainCounter;$/;"	m	class:CHDChain
nKey	src/addrman.h	/^    uint256 nKey;$/;"	m	class:CAddrMan
nKeyedNetGroup	src/net.cpp	/^    uint64_t nKeyedNetGroup;$/;"	m	struct:NodeEvictionCandidate	file:
nKeyedNetGroup	src/net.h	/^    const uint64_t nKeyedNetGroup;$/;"	m	class:CNode
nLastBlockFile	src/validation.cpp	/^    int nLastBlockFile = 0;$/;"	m	namespace:__anon50	file:
nLastBlockTime	src/net.cpp	/^    int64_t nLastBlockTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastBlockTipUpdateNotification	src/qt/clientmodel.cpp	/^static int64_t nLastBlockTipUpdateNotification = 0;$/;"	v	file:
nLastBytesIn	src/qt/trafficgraphwidget.h	/^    quint64 nLastBytesIn;$/;"	m	class:TrafficGraphWidget
nLastBytesOut	src/qt/trafficgraphwidget.h	/^    quint64 nLastBytesOut;$/;"	m	class:TrafficGraphWidget
nLastFlushed	src/wallet/db.h	/^    unsigned int nLastFlushed;$/;"	m	class:BerkeleyDatabase
nLastHeaderTipUpdateNotification	src/qt/clientmodel.cpp	/^static int64_t nLastHeaderTipUpdateNotification = 0;$/;"	v	file:
nLastPreciousChainwork	src/validation.cpp	/^    arith_uint256 nLastPreciousChainwork = 0;$/;"	m	class:CChainState	file:
nLastRecv	src/net.h	/^    int64_t nLastRecv;$/;"	m	class:CNodeStats
nLastResend	src/wallet/wallet.h	/^    int64_t nLastResend = 0;$/;"	m	class:final
nLastSeen	src/wallet/db.h	/^    unsigned int nLastSeen;$/;"	m	class:BerkeleyDatabase
nLastSend	src/net.h	/^    int64_t nLastSend;$/;"	m	class:CNodeStats
nLastTXTime	src/net.cpp	/^    int64_t nLastTXTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastWalletUpdate	src/wallet/db.h	/^    int64_t nLastWalletUpdate;$/;"	m	class:BerkeleyDatabase
nLocalHostNonce	src/net.h	/^    const uint64_t nLocalHostNonce;$/;"	m	class:CNode
nLocalServices	src/init.cpp	/^ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);$/;"	m	namespace:__anon123	file:
nLocalServices	src/net.h	/^        ServiceFlags nLocalServices = NODE_NONE;$/;"	m	struct:CConnman::Options
nLocalServices	src/net.h	/^    ServiceFlags nLocalServices;$/;"	m	class:CConnman
nLocalServices	src/net.h	/^    const ServiceFlags nLocalServices;$/;"	m	class:CNode
nLockTime	src/primitives/transaction.h	/^    const uint32_t nLockTime;$/;"	m	class:CTransaction
nLockTime	src/primitives/transaction.h	/^    uint32_t nLockTime;$/;"	m	struct:CMutableTransaction
nLockTimeCutoff	src/miner.h	/^    int64_t nLockTimeCutoff;$/;"	m	class:BlockAssembler
nMasterKeyMaxID	src/wallet/wallet.h	/^    unsigned int nMasterKeyMaxID = 0;$/;"	m	class:final
nMaxAddnode	src/net.h	/^        int nMaxAddnode = 0;$/;"	m	struct:CConnman::Options
nMaxAddnode	src/net.h	/^    int nMaxAddnode;$/;"	m	class:CConnman
nMaxBlockDBCache	src/txdb.h	/^static const int64_t nMaxBlockDBCache = 2;$/;"	v
nMaxCoinsDBCache	src/txdb.h	/^static const int64_t nMaxCoinsDBCache = 8;$/;"	v
nMaxConnections	src/init.cpp	/^int nMaxConnections;$/;"	m	namespace:__anon123	file:
nMaxConnections	src/net.h	/^        int nMaxConnections = 0;$/;"	m	struct:CConnman::Options
nMaxConnections	src/net.h	/^    int nMaxConnections;$/;"	m	class:CConnman
nMaxDatacarrierBytes	src/script/standard.cpp	/^unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;$/;"	v
nMaxDbCache	src/txdb.h	/^static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;$/;"	v
nMaxFeeler	src/net.h	/^        int nMaxFeeler = 0;$/;"	m	struct:CConnman::Options
nMaxFeeler	src/net.h	/^    int nMaxFeeler;$/;"	m	class:CConnman
nMaxOutbound	src/net.h	/^        int nMaxOutbound = 0;$/;"	m	struct:CConnman::Options
nMaxOutbound	src/net.h	/^    int nMaxOutbound;$/;"	m	class:CConnman
nMaxOutboundLimit	src/net.h	/^        uint64_t nMaxOutboundLimit = 0;$/;"	m	struct:CConnman::Options
nMaxOutboundTimeframe	src/net.h	/^        uint64_t nMaxOutboundTimeframe = 0;$/;"	m	struct:CConnman::Options
nMaxSize	src/limitedmap.h	/^    size_type nMaxSize;$/;"	m	class:limitedmap
nMaxTipAge	src/validation.cpp	/^int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;$/;"	v
nMaxTxIndexCache	src/txdb.h	/^static const int64_t nMaxTxIndexCache = 1024;$/;"	v
nMedianTimeSpan	src/chain.h	/^    static constexpr int nMedianTimeSpan = 11;$/;"	m	class:CBlockIndex
nMessageSize	src/protocol.h	/^    uint32_t nMessageSize;$/;"	m	class:CMessageHeader
nMinDbCache	src/txdb.h	/^static const int64_t nMinDbCache = 4;$/;"	v
nMinPingUsecTime	src/net.cpp	/^    int64_t nMinPingUsecTime;$/;"	m	struct:NodeEvictionCandidate	file:
nMinerConfirmationWindow	src/consensus/params.h	/^    uint32_t nMinerConfirmationWindow;$/;"	m	struct:Consensus::Params
nMinimumChainWork	src/consensus/params.h	/^    uint256 nMinimumChainWork;$/;"	m	struct:Consensus::Params
nMinimumChainWork	src/validation.cpp	/^arith_uint256 nMinimumChainWork;$/;"	v
nMins	src/qt/trafficgraphwidget.h	/^    int nMins;$/;"	m	class:TrafficGraphWidget
nMisbehavior	src/net_processing.cpp	/^    int nMisbehavior;$/;"	m	struct:__anon89::CNodeState	file:
nMisbehavior	src/net_processing.h	/^    int nMisbehavior = 0;$/;"	m	struct:CNodeStateStats
nModFeesWithAncestors	src/miner.h	/^    CAmount nModFeesWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nModFeesWithAncestors	src/txmempool.h	/^    CAmount nModFeesWithAncestors;$/;"	m	class:CTxMemPoolEntry
nModFeesWithDescendants	src/txmempool.h	/^    CAmount nModFeesWithDescendants; \/\/!< ... and total fees (all including us)$/;"	m	class:CTxMemPoolEntry
nMyStartingHeight	src/net.h	/^    const int nMyStartingHeight;$/;"	m	class:CNode
nNextResend	src/wallet/wallet.h	/^    int64_t nNextResend = 0;$/;"	m	class:final
nNonce	src/chain.h	/^    uint32_t nNonce;$/;"	m	class:CBlockIndex
nNonce	src/primitives/block.h	/^    uint32_t nNonce;$/;"	m	class:CBlockHeader
nOrderPos	src/wallet/wallet.h	/^    int64_t nOrderPos; \/\/!< position in ordered transaction list$/;"	m	class:CWalletTx
nPort	src/net.h	/^    int nPort;$/;"	m	struct:LocalServiceInfo
nPos	src/flatfile.h	/^    unsigned int nPos;$/;"	m	struct:FlatFilePos
nPos	src/streams.h	/^    size_t nPos;$/;"	m	class:CVectorWriter
nPowTargetSpacing	src/consensus/params.h	/^    int64_t nPowTargetSpacing;$/;"	m	struct:Consensus::Params
nPowTargetTimespan	src/consensus/params.h	/^    int64_t nPowTargetTimespan;$/;"	m	struct:Consensus::Params
nPruneAfterHeight	src/chainparams.h	/^    uint64_t nPruneAfterHeight;$/;"	m	class:CChainParams
nPruneTarget	src/validation.cpp	/^uint64_t nPruneTarget = 0;$/;"	v
nRPCPort	src/chainparamsbase.h	/^    int nRPCPort;$/;"	m	class:CBaseChainParams
nReadLimit	src/streams.h	/^    uint64_t nReadLimit;  \/\/!< up to which position we're allowed to read$/;"	m	class:CBufferedFile
nReadPos	src/streams.h	/^    uint64_t nReadPos;    \/\/!< how many bytes have been read from this$/;"	m	class:CBufferedFile
nReadPos	src/streams.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nReceiveFloodSize	src/net.h	/^        unsigned int nReceiveFloodSize = 0;$/;"	m	struct:CConnman::Options
nRecvBytes	src/net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNodeStats
nRelockTime	src/wallet/wallet.h	/^    int64_t nRelockTime = 0;$/;"	m	class:final
nRewind	src/streams.h	/^    uint64_t nRewind;     \/\/!< how many bytes we guarantee to rewind$/;"	m	class:CBufferedFile
nRuleChangeActivationThreshold	src/consensus/params.h	/^    uint32_t nRuleChangeActivationThreshold;$/;"	m	struct:Consensus::Params
nSatoshisPerK	src/policy/feerate.h	/^    CAmount nSatoshisPerK; \/\/ unit is satoshis-per-1,000-bytes$/;"	m	class:CFeeRate
nScore	src/net.h	/^    int nScore;$/;"	m	struct:LocalServiceInfo
nScriptCheckThreads	src/validation.cpp	/^int nScriptCheckThreads = 0;$/;"	v
nSeed0	src/net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSeed1	src/net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSendBufferMaxSize	src/net.h	/^        unsigned int nSendBufferMaxSize = 0;$/;"	m	struct:CConnman::Options
nSendBytes	src/net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNodeStats
nSequence	src/primitives/transaction.h	/^    uint32_t nSequence;$/;"	m	class:CTxIn
nSequenceId	src/chain.h	/^    int32_t nSequenceId;$/;"	m	class:CBlockIndex
nServices	src/net.h	/^    ServiceFlags nServices;$/;"	m	class:CNodeStats
nServices	src/protocol.h	/^    ServiceFlags nServices;$/;"	m	class:CAddress
nSigOpCostWithAncestors	src/miner.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSigOpCostWithAncestors	src/txmempool.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSize	src/chain.h	/^    unsigned int nSize;        \/\/!< number of used bytes of block file$/;"	m	class:CBlockFileInfo
nSize	src/serialize.h	/^    size_t nSize;$/;"	m	class:CSizeComputer
nSize	src/timedata.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nSizeWithAncestors	src/miner.h	/^    uint64_t nSizeWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSizeWithAncestors	src/txmempool.h	/^    uint64_t nSizeWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSizeWithDescendants	src/txmempool.h	/^    uint64_t nSizeWithDescendants;   \/\/!< ... and size$/;"	m	class:CTxMemPoolEntry
nSpecialScripts	src/compressor.h	/^    static const unsigned int nSpecialScripts = 6;$/;"	m	class:CScriptCompressor
nSrcPos	src/streams.h	/^    uint64_t nSrcPos;     \/\/!< how many bytes have been read from source$/;"	m	class:CBufferedFile
nStallingSince	src/net_processing.cpp	/^    int64_t nStallingSince;$/;"	m	struct:__anon89::CNodeState	file:
nStartTime	src/consensus/params.h	/^    int64_t nStartTime;$/;"	m	struct:Consensus::BIP9Deployment
nStartingHeight	src/net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nStartupTime	src/util/system.cpp	/^const int64_t nStartupTime = GetTime();$/;"	v
nStatus	src/chain.h	/^    uint32_t nStatus;$/;"	m	class:CBlockIndex
nSubsidyHalvingInterval	src/consensus/params.h	/^    int nSubsidyHalvingInterval;$/;"	m	struct:Consensus::Params
nSyncHeight	src/net_processing.h	/^    int nSyncHeight = -1;$/;"	m	struct:CNodeStateStats
nThreadsServicingQueue	src/scheduler.h	/^    int nThreadsServicingQueue;$/;"	m	class:CScheduler
nTime	src/chain.h	/^    uint32_t nTime;$/;"	m	class:CBlockIndex
nTime	src/chainparams.h	/^    int64_t nTime;    \/\/!< UNIX timestamp of last known number of transactions$/;"	m	struct:ChainTxData
nTime	src/net.h	/^    int64_t nTime;                  \/\/ time (in microseconds) of message receipt.$/;"	m	class:CNetMessage
nTime	src/primitives/block.h	/^    uint32_t nTime;$/;"	m	class:CBlockHeader
nTime	src/protocol.h	/^    unsigned int nTime;$/;"	m	class:CAddress
nTime	src/test/setup_common.h	/^    int64_t nTime;$/;"	m	struct:TestMemPoolEntryHelper
nTime	src/txmempool.h	/^    const int64_t nTime;            \/\/!< Local time when entering the mempool$/;"	m	class:CTxMemPoolEntry
nTime	src/txmempool.h	/^    int64_t nTime;$/;"	m	struct:TxMempoolInfo
nTime	src/wallet/wallet.h	/^    int64_t nTime;$/;"	m	class:CKeyPool
nTimeCallbacks	src/validation.cpp	/^static int64_t nTimeCallbacks = 0;$/;"	v	file:
nTimeChainState	src/validation.cpp	/^static int64_t nTimeChainState = 0;$/;"	v	file:
nTimeCheck	src/validation.cpp	/^static int64_t nTimeCheck = 0;$/;"	v	file:
nTimeConnect	src/validation.cpp	/^static int64_t nTimeConnect = 0;$/;"	v	file:
nTimeConnectTotal	src/validation.cpp	/^static int64_t nTimeConnectTotal = 0;$/;"	v	file:
nTimeConnected	src/net.cpp	/^    int64_t nTimeConnected;$/;"	m	struct:NodeEvictionCandidate	file:
nTimeConnected	src/net.h	/^    const int64_t nTimeConnected;$/;"	m	class:CNode
nTimeConnected	src/net.h	/^    int64_t nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	src/wallet/wallet.h	/^    int64_t nTimeCreated;$/;"	m	class:CWalletKey
nTimeExpire	src/net_processing.cpp	/^    int64_t nTimeExpire;$/;"	m	struct:COrphanTx	file:
nTimeExpire	src/test/denialofservice_tests.cpp	/^    int64_t nTimeExpire;$/;"	m	struct:COrphanTx	file:
nTimeExpires	src/wallet/wallet.h	/^    int64_t nTimeExpires;$/;"	m	class:CWalletKey
nTimeFirst	src/chain.h	/^    uint64_t nTimeFirst;       \/\/!< earliest time of block in file$/;"	m	class:CBlockFileInfo
nTimeFlush	src/validation.cpp	/^static int64_t nTimeFlush = 0;$/;"	v	file:
nTimeForks	src/validation.cpp	/^static int64_t nTimeForks = 0;$/;"	v	file:
nTimeIndex	src/validation.cpp	/^static int64_t nTimeIndex = 0;$/;"	v	file:
nTimeLast	src/chain.h	/^    uint64_t nTimeLast;        \/\/!< latest time of block in file$/;"	m	class:CBlockFileInfo
nTimeMax	src/chain.h	/^    unsigned int nTimeMax;$/;"	m	class:CBlockIndex
nTimeOffset	src/net.h	/^    int64_t nTimeOffset;$/;"	m	class:CNodeStats
nTimePostConnect	src/validation.cpp	/^static int64_t nTimePostConnect = 0;$/;"	v	file:
nTimeReadFromDisk	src/validation.cpp	/^static int64_t nTimeReadFromDisk = 0;$/;"	v	file:
nTimeReceived	src/wallet/wallet.h	/^    unsigned int nTimeReceived; \/\/!< time received by this node$/;"	m	class:CWalletTx
nTimeSmart	src/wallet/wallet.h	/^    unsigned int nTimeSmart;$/;"	m	class:CWalletTx
nTimeTotal	src/validation.cpp	/^static int64_t nTimeTotal = 0;$/;"	v	file:
nTimeVerify	src/validation.cpp	/^static int64_t nTimeVerify = 0;$/;"	v	file:
nTimeout	src/consensus/params.h	/^    int64_t nTimeout;$/;"	m	struct:Consensus::BIP9Deployment
nTodo	src/checkqueue.h	/^    unsigned int nTodo;$/;"	m	class:CCheckQueue
nTotal	src/checkqueue.h	/^    int nTotal;$/;"	m	class:CCheckQueue
nTotalAmount	src/rpc/blockchain.cpp	/^    CAmount nTotalAmount;$/;"	m	struct:CCoinsStats	file:
nTransactionOutputs	src/rpc/blockchain.cpp	/^    uint64_t nTransactionOutputs;$/;"	m	struct:CCoinsStats	file:
nTransactions	src/merkleblock.h	/^    unsigned int nTransactions;$/;"	m	class:CPartialMerkleTree
nTransactions	src/rpc/blockchain.cpp	/^    uint64_t nTransactions;$/;"	m	struct:CCoinsStats	file:
nTransactionsUpdated	src/txmempool.h	/^    unsigned int nTransactionsUpdated; \/\/!< Used by getblocktemplate to trigger CreateNewBlock() invocation$/;"	m	class:CTxMemPool
nTweak	src/bloom.h	/^    unsigned int nTweak;$/;"	m	class:CBloomFilter
nTweak	src/bloom.h	/^    unsigned int nTweak;$/;"	m	class:CRollingBloomFilter
nTx	src/chain.h	/^    unsigned int nTx;$/;"	m	class:CBlockIndex
nTxCount	src/chainparams.h	/^    int64_t nTxCount; \/\/!< total number of transactions between genesis and that timestamp$/;"	m	struct:ChainTxData
nTxOffset	src/index/txindex.cpp	/^    unsigned int nTxOffset; \/\/ after header$/;"	m	struct:CDiskTxPos	file:
nTxWeight	src/txmempool.h	/^    const size_t nTxWeight;         \/\/!< ... and avoid recomputing tx weight (also used for GetTxSize())$/;"	m	class:CTxMemPoolEntry
nType	src/hash.h	/^    const int nType;$/;"	m	class:CHashWriter
nType	src/streams.h	/^    const int nType;$/;"	m	class:CAutoFile
nType	src/streams.h	/^    const int nType;$/;"	m	class:CBufferedFile
nType	src/streams.h	/^    const int nType;$/;"	m	class:CVectorWriter
nType	src/streams.h	/^    const int nType;$/;"	m	class:OverrideStream
nType	src/streams.h	/^    int nType;$/;"	m	class:CDataStream
nUnconnectingHeaders	src/net_processing.cpp	/^    int nUnconnectingHeaders;$/;"	m	struct:__anon89::CNodeState	file:
nUndoPos	src/chain.h	/^    unsigned int nUndoPos;$/;"	m	class:CBlockIndex
nUndoSize	src/chain.h	/^    unsigned int nUndoSize;    \/\/!< number of used bytes in the undo file$/;"	m	class:CBlockFileInfo
nUpdateCounter	src/wallet/db.h	/^    std::atomic<unsigned int> nUpdateCounter;$/;"	m	class:BerkeleyDatabase
nUsageSize	src/txmempool.h	/^    const size_t nUsageSize;        \/\/!< ... and total memory usage$/;"	m	class:CTxMemPoolEntry
nUserMaxConnections	src/init.cpp	/^int nUserMaxConnections;$/;"	m	namespace:__anon123	file:
nValue	src/primitives/transaction.h	/^    CAmount nValue;$/;"	m	class:CTxOut
nValue	src/test/script_tests.cpp	/^    CAmount nValue;$/;"	m	class:__anon58::TestBuilder	file:
nVersion	src/addrdb.h	/^    int nVersion;$/;"	m	class:CBanEntry
nVersion	src/chain.h	/^    int32_t nVersion;$/;"	m	class:CBlockIndex
nVersion	src/hash.h	/^    const int nVersion;$/;"	m	class:CHashWriter
nVersion	src/net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nVersion	src/netmessagemaker.h	/^    const int nVersion;$/;"	m	class:CNetMsgMaker
nVersion	src/primitives/block.h	/^    int32_t nVersion;$/;"	m	class:CBlockHeader
nVersion	src/primitives/transaction.h	/^    const int32_t nVersion;$/;"	m	class:CTransaction
nVersion	src/primitives/transaction.h	/^    int32_t nVersion;$/;"	m	struct:CMutableTransaction
nVersion	src/qt/recentrequeststablemodel.h	/^    int nVersion;$/;"	m	class:RecentRequestEntry
nVersion	src/qt/walletmodel.h	/^    int nVersion;$/;"	m	class:SendCoinsRecipient
nVersion	src/serialize.h	/^    const int nVersion;$/;"	m	class:CSizeComputer
nVersion	src/streams.h	/^    const int nVersion;$/;"	m	class:CAutoFile
nVersion	src/streams.h	/^    const int nVersion;$/;"	m	class:CBufferedFile
nVersion	src/streams.h	/^    const int nVersion;$/;"	m	class:CVectorWriter
nVersion	src/streams.h	/^    const int nVersion;$/;"	m	class:OverrideStream
nVersion	src/streams.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	src/wallet/walletdb.h	/^    int nVersion;$/;"	m	class:CHDChain
nVersion	src/wallet/walletdb.h	/^    int nVersion;$/;"	m	class:CKeyMetadata
n_	src/leveldb/table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
n_calls	src/test/checkqueue_tests.cpp	/^    static std::atomic<size_t> n_calls;$/;"	m	struct:FakeCheckCheckCompletion	file:
name	src/interfaces/wallet.h	/^    std::string name;$/;"	m	struct:interfaces::WalletAddress
name	src/leveldb/util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon5::Test	file:
name	src/net_processing.cpp	/^    const std::string name;$/;"	m	struct:__anon89::CNodeState	file:
name	src/qt/platformstyle.h	/^    QString name;$/;"	m	class:PlatformStyle
name	src/rest.cpp	/^    const char* name;$/;"	m	struct:__anon1	file:
name	src/rpc/server.h	/^    std::string name;$/;"	m	class:CRPCCommand
name	src/test/script_tests.cpp	/^    const char *name;$/;"	m	struct:ScriptErrorDesc	file:
name	src/versionbitsinfo.h	/^    const char *name;$/;"	m	struct:VBDeploymentInfo
name	src/wallet/wallet.h	/^    std::string name;$/;"	m	class:CAddressBookData
name_	src/leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	src/leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	src/leveldb/util/env_posix.cc	/^  std::string name_;$/;"	m	class:leveldb::__anon8::PosixFileLock	file:
name_to_ipv6	contrib/seeds/generate-seeds.py	/^def name_to_ipv6(addr):$/;"	f
namedtuple	contrib/linearize/linearize-data.py	/^from collections import namedtuple$/;"	i
namedtuple	test/functional/combine_logs.py	/^from collections import defaultdict, namedtuple$/;"	i
namedtuple	test/functional/test_framework/wallet_util.py	/^from collections import namedtuple$/;"	i
nativeECDSABuffer	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static ThreadLocal<ByteBuffer> nativeECDSABuffer = new ThreadLocal<ByteBuffer>();$/;"	f	class:NativeSecp256k1	file:
nativeEventFilter	src/qt/winshutdownmonitor.cpp	/^bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pMessage, long *pnResult)$/;"	f	class:WinShutdownMonitor
needsUpdate	src/qt/transactionrecord.h	/^    bool needsUpdate;$/;"	m	class:TransactionStatus
neg	src/secp256k1/src/num_gmp.h	/^    int neg;$/;"	m	struct:__anon110
negate	test/functional/test_framework/key.py	/^    def negate(self, p1):$/;"	m	class:EllipticCurve
netManager	src/qt/paymentserver.h	/^    QNetworkAccessManager* netManager;  \/\/ Used to fetch payment requests$/;"	m	class:PaymentServer
netRequestFinished	src/qt/paymentserver.cpp	/^void PaymentServer::netRequestFinished(QNetworkReply* reply)$/;"	f	class:PaymentServer
netmask	src/netaddress.h	/^        uint8_t netmask[16];$/;"	m	class:CSubNet
netstat	test/functional/test_framework/netutil.py	/^def netstat(typ='tcp'):$/;"	f
network	src/netaddress.h	/^        CNetAddr network;$/;"	m	class:CSubNet
networkId	src/qt/networkstyle.cpp	/^    const char *networkId;$/;"	m	struct:__anon65	file:
network_event_loop	test/functional/test_framework/mininode.py	/^    network_event_loop = None$/;"	v	class:NetworkThread
network_styles	src/qt/networkstyle.cpp	/^} network_styles[] = {$/;"	v	typeref:struct:__anon65	file:
network_styles_count	src/qt/networkstyle.cpp	/^static const unsigned network_styles_count = sizeof(network_styles)\/sizeof(*network_styles);$/;"	v	file:
networks_dict	test/functional/feature_proxy.py	/^        def networks_dict(d):$/;"	f	function:ProxyTest.run_test
new	contrib/testgen/base58.py	/^    new = hashlib.sha256$/;"	v	class:SHA256
newAddressToSelect	src/qt/addressbookpage.h	/^    QString newAddressToSelect;$/;"	m	class:AddressBookPage
newHash	contrib/devtools/optimize-pngs.py	/^    newHash = fileDict['sha256New']$/;"	v
newTaskMutex	src/scheduler.h	/^    mutable boost::mutex newTaskMutex;$/;"	m	class:CScheduler
newTaskScheduled	src/scheduler.h	/^    boost::condition_variable newTaskScheduled;$/;"	m	class:CScheduler
new_arena	src/support/lockedpool.cpp	/^bool LockedPool::new_arena(size_t size, size_t align)$/;"	f	class:LockedPool
new_files_	src/leveldb/db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
new_files_since_last_dir_sync_	src/leveldb/db/fault_injection_test.cc	/^  std::set<std::string> new_files_since_last_dir_sync_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
new_handler_terminate	src/init.cpp	/^[[noreturn]] static void new_handler_terminate()$/;"	f	file:
newest	src/leveldb/db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	src/leveldb/include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	src/leveldb/util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
next	src/node/psbt.h	/^    PSBTRole next;                         \/\/!< Which of the BIP 174 roles needs to handle the transaction next$/;"	m	struct:PSBTAnalysis
next	src/node/psbt.h	/^    PSBTRole next; \/\/!< Which of the BIP 174 roles needs to handle this input next$/;"	m	struct:PSBTInputAnalysis
next_	src/leveldb/db/skiplist.h	/^  port::AtomicPointer next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	src/leveldb/db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	src/leveldb/db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_block	test/functional/feature_block.py	/^    def next_block(self, number, spend=None, additional_coinbase_value=0, script=CScript([OP_TRUE]), solve=True, *, version=1):$/;"	m	class:FullBlockTest
next_file_number_	src/leveldb/db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon30::Repairer	file:
next_file_number_	src/leveldb/db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	src/leveldb/db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	src/leveldb/util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
next_report_	src/leveldb/db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon19::Stats	file:
next_report_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_report_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
no	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
noHashChange	contrib/devtools/optimize-pngs.py	/^    noHashChange = noHashChange and (oldHash == newHash)$/;"	v
noHashChange	contrib/devtools/optimize-pngs.py	/^noHashChange = True$/;"	v
no_space_	src/leveldb/db/db_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv	file:
node	src/qt/clientmodel.h	/^    interfaces::Node& node() const { return m_node; }$/;"	f	class:ClientModel
node	src/qt/optionsmodel.h	/^    interfaces::Node& node() const { return m_node; }$/;"	f	class:OptionsModel
node	src/qt/walletmodel.h	/^    interfaces::Node& node() const { return m_node; }$/;"	f	class:WalletModel
nodeStateStats	src/qt/peertablemodel.h	/^    CNodeStateStats nodeStateStats;$/;"	m	struct:CNodeCombinedStats
nodeStats	src/qt/peertablemodel.h	/^    CNodeStats nodeStats;$/;"	m	struct:CNodeCombinedStats
node_	src/leveldb/db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
node_sync_via_rpc	test/functional/rpc_preciousblock.py	/^def node_sync_via_rpc(nodes):$/;"	f
node_test	test/functional/feature_proxy.py	/^    def node_test(self, node, proxies, auth, test_onion=True):$/;"	m	class:ProxyTest
nodeid	src/net.h	/^    NodeId nodeid;$/;"	m	class:CNodeStats
nodist_libbitcoin_util_a_OBJECTS	src/Makefile	/^nodist_libbitcoin_util_a_OBJECTS =$/;"	m
nodist_libbitcoin_util_a_SOURCES	src/Makefile	/^nodist_libbitcoin_util_a_SOURCES = $(srcdir)\/obj\/build.h$/;"	m
nodist_test_test_bitcoin_OBJECTS	src/Makefile	/^nodist_test_test_bitcoin_OBJECTS =  \\$/;"	m
nodist_test_test_bitcoin_SOURCES	src/Makefile	/^nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)$/;"	m
noexcept	src/random.h	/^    FastRandomContext& operator=(FastRandomContext&& from) noexcept;$/;"	m	class:FastRandomContext
noexcept	src/random.h	/^    explicit FastRandomContext(bool fDeterministic = false) noexcept;$/;"	m	class:FastRandomContext
noexcept	src/random.h	/^    explicit FastRandomContext(const uint256& seed) noexcept;$/;"	m	class:FastRandomContext
noexcept	src/random.h	/^    uint256 rand256() noexcept;$/;"	m	class:FastRandomContext
noexcept	src/support/allocators/secure.h	/^    secure_allocator(const secure_allocator& a) noexcept : base(a) {}$/;"	m	struct:secure_allocator
noexcept	src/support/allocators/zeroafterfree.h	/^    zero_after_free_allocator(const zero_after_free_allocator& a) noexcept : base(a) {}$/;"	m	struct:zero_after_free_allocator
noinst_HEADERS	src/secp256k1/Makefile	/^noinst_HEADERS = src\/scalar.h src\/scalar_4x64.h src\/scalar_8x32.h \\$/;"	m
noinst_HEADERS	src/univalue/Makefile	/^noinst_HEADERS = lib\/univalue_escapes.h lib\/univalue_utffilter.h$/;"	m
noinst_PROGRAMS	src/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_10)$/;"	m
noinst_PROGRAMS	src/secp256k1/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
noinst_PROGRAMS	src/univalue/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1) test\/test_json$(EXEEXT)$/;"	m
non	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
non	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
non	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
non	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
non_witness_utxo	src/psbt.h	/^    CTransactionRef non_witness_utxo;$/;"	m	struct:PSBTInput
non_writable_	src/leveldb/db/db_test.cc	/^  port::AtomicPointer non_writable_;$/;"	m	class:leveldb::SpecialEnv	file:
nonce	src/blockencodings.h	/^    uint64_t nonce;$/;"	m	class:CBlockHeaderAndShortTxIDs
nonce	src/script/sigcache.cpp	/^    uint256 nonce;$/;"	m	class:__anon84::CSignatureCache	file:
nonce	src/test/blockencodings_tests.cpp	/^    uint64_t nonce;$/;"	m	class:TestHeaderAndShortIDs	file:
nonce	src/test/miner_tests.cpp	/^    unsigned int nonce;$/;"	m	struct:__anon59	file:
nonce_function_rfc6979	src/secp256k1/src/secp256k1.c	/^static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nonce_function_test_fail	src/secp256k1/src/tests.c	/^static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nonce_function_test_retry	src/secp256k1/src/tests.c	/^static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nonstandard	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
nonstandard	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
nonstandard	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal flag")$/;"	i
nontrivial_t	src/bench/prevector.cpp	/^    nontrivial_t() :x(-1) {}$/;"	f	struct:nontrivial_t
nontrivial_t	src/bench/prevector.cpp	/^struct nontrivial_t {$/;"	s	file:
noqa	test/functional/test_framework/test_framework.py	/^            import zmq  # noqa$/;"	i
normal_serialize	test/functional/feature_block.py	/^    def normal_serialize(self):$/;"	m	class:CBrokenBlock
normalize	test/lint/lint-format-strings.py	/^def normalize(s):$/;"	f
normalize_hit_rate	src/test/cuckoocache_tests.cpp	/^static double normalize_hit_rate(double hits, double load)$/;"	f	file:
normalized	src/secp256k1/src/field_10x26.h	/^    int normalized;$/;"	m	struct:__anon94
normalized	src/secp256k1/src/field_5x52.h	/^    int normalized;$/;"	m	struct:__anon96
not	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
notificator	src/qt/bitcoingui.h	/^    Notificator* notificator = nullptr;$/;"	m	class:BitcoinGUI
notifiers	src/zmq/zmqnotificationinterface.h	/^    std::list<CZMQAbstractNotifier*> notifiers;$/;"	m	class:final
notify	src/qt/notificator.cpp	/^void Notificator::notify(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyDBus	src/qt/notificator.cpp	/^void Notificator::notifyDBus(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyMacUserNotificationCenter	src/qt/notificator.cpp	/^void Notificator::notifyMacUserNotificationCenter(const QString &title, const QString &text)$/;"	f	class:Notificator
notifySystray	src/qt/notificator.cpp	/^void Notificator::notifySystray(Class cls, const QString &title, const QString &text, int millisTimeout)$/;"	f	class:Notificator
noui_InitMessage	src/noui.cpp	/^void noui_InitMessage(const std::string& message)$/;"	f
noui_ThreadSafeMessageBox	src/noui.cpp	/^bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)$/;"	f
noui_ThreadSafeQuestion	src/noui.cpp	/^bool noui_ThreadSafeQuestion(const std::string& \/* ignored interactive message *\/, const std::string& message, const std::string& caption, unsigned int style)$/;"	f
noui_connect	src/noui.cpp	/^void noui_connect()$/;"	f
nullopt	src/optional.h	/^static auto& nullopt = boost::none;$/;"	v
num	src/test/versionbits_tests.cpp	/^    int num;$/;"	m	class:VersionBitsTester	file:
num_	src/leveldb/db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	src/leveldb/table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	src/leveldb/util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_done	src/leveldb/db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon19::SharedState	file:
num_entries	src/leveldb/table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_initial_offset_records_	src/leveldb/db/log_test.cc	/^  static int num_initial_offset_records_;$/;"	m	class:leveldb::log::LogTest	file:
num_initial_offset_records_	src/leveldb/db/log_test.cc	/^int LogTest::num_initial_offset_records_ =$/;"	m	class:leveldb::log::LogTest	file:
num_initialized	src/leveldb/db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon19::SharedState	file:
num_input_files	src/leveldb/db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_iters_for_one_second	src/bench/bench.h	/^        uint64_t num_iters_for_one_second;$/;"	m	struct:benchmark::BenchRunner::Bench
num_restarts_	src/leveldb/table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_running	src/leveldb/util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State	file:
num_writable_file_errors_	src/leveldb/util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	src/leveldb/db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	src/leveldb/db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	src/leveldb/db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
obfuscate_key	src/dbwrapper.h	/^    std::vector<unsigned char> obfuscate_key;$/;"	m	class:CDBWrapper
obtain_event	src/support/events.h	/^inline raii_event obtain_event(struct event_base* base, evutil_socket_t s, short events, event_callback_fn cb, void* arg) {$/;"	f
obtain_event_base	src/support/events.h	/^inline raii_event_base obtain_event_base() {$/;"	f
obtain_evhttp	src/support/events.h	/^inline raii_evhttp obtain_evhttp(struct event_base* base) {$/;"	f
obtain_evhttp_connection_base	src/support/events.h	/^inline raii_evhttp_connection obtain_evhttp_connection_base(struct event_base* base, std::string host, uint16_t port) {$/;"	f
obtain_evhttp_request	src/support/events.h	/^inline raii_evhttp_request obtain_evhttp_request(void(*cb)(struct evhttp_request *, void *), void *arg) {$/;"	f
of	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a 1-of-2 bare multisig from descriptor")$/;"	i
offset	src/leveldb/table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	src/leveldb/table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	src/leveldb/table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	src/leveldb/table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
offsets	src/test/scriptnum_tests.cpp	/^static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};$/;"	v	file:
ofstream	src/fs.h	/^        explicit ofstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out) { open(p, mode); }$/;"	f	class:fsbridge::ofstream
ofstream	src/fs.h	/^    class ofstream : public std::ostream$/;"	c	namespace:fsbridge
ofstream	src/fs.h	/^    typedef fs::ofstream ofstream;$/;"	t	namespace:fsbridge
ok	src/leveldb/include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	src/leveldb/include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
ok_	src/leveldb/util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldHash	contrib/devtools/optimize-pngs.py	/^    oldHash = fileDict['sha256Old']$/;"	v
oldUnconfTxs	src/policy/fees.cpp	/^    std::vector<int> oldUnconfTxs;$/;"	m	class:TxConfirmStats	file:
old_closure_keys	contrib/devtools/circular-dependencies.py	/^            old_closure_keys = sorted(closure.keys())$/;"	v
old_size	contrib/devtools/circular-dependencies.py	/^            old_size = len(closure)$/;"	v
oldest	src/leveldb/db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	doc/man/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	src/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	src/secp256k1/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	src/univalue/Makefile	/^oldincludedir = \/usr\/include$/;"	m
onCopyLabelAction	src/qt/addressbookpage.cpp	/^void AddressBookPage::onCopyLabelAction()$/;"	f	class:AddressBookPage
onDisplayUnitsClicked	src/qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::onDisplayUnitsClicked(const QPoint& point)$/;"	f	class:UnitDisplayStatusBarControl
onEditAction	src/qt/addressbookpage.cpp	/^void AddressBookPage::onEditAction()$/;"	f	class:AddressBookPage
onMenuSelection	src/qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::onMenuSelection(QAction* action)$/;"	f	class:UnitDisplayStatusBarControl
on_addr	test/functional/p2p_leak.py	/^    def on_addr(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_addr	test/functional/p2p_node_network_limited.py	/^    def on_addr(self, message):$/;"	m	class:P2PIgnoreInv
on_addr	test/functional/test_framework/mininode.py	/^    def on_addr(self, message): pass$/;"	m	class:P2PInterface
on_addressBookButton_SM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_VM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_clicked	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_addressBookButton_clicked()$/;"	f	class:SendCoinsEntry
on_block	test/functional/example_test.py	/^    def on_block(self, message):$/;"	m	class:BaseNode
on_block	test/functional/feature_maxuploadtarget.py	/^    def on_block(self, message):$/;"	m	class:TestP2PConn
on_block	test/functional/p2p_leak.py	/^    def on_block(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_block	test/functional/test_framework/mininode.py	/^    def on_block(self, message): pass$/;"	m	class:P2PInterface
on_blocktxn	test/functional/p2p_leak.py	/^    def on_blocktxn(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_blocktxn	test/functional/test_framework/mininode.py	/^    def on_blocktxn(self, message): pass$/;"	m	class:P2PInterface
on_btnCopyAddress_clicked	src/qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::on_btnCopyAddress_clicked()$/;"	f	class:ReceiveRequestDialog
on_btnCopyURI_clicked	src/qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::on_btnCopyURI_clicked()$/;"	f	class:ReceiveRequestDialog
on_buttonChooseFee_clicked	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_buttonChooseFee_clicked()$/;"	f	class:SendCoinsDialog
on_buttonMinimizeFee_clicked	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_buttonMinimizeFee_clicked()$/;"	f	class:SendCoinsDialog
on_cancelButton_clicked	src/qt/optionsdialog.cpp	/^void OptionsDialog::on_cancelButton_clicked()$/;"	f	class:OptionsDialog
on_clearButton_SM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_clearButton_VM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_close	test/functional/test_framework/mininode.py	/^    def on_close(self):$/;"	m	class:P2PInterface
on_cmpctblock	test/functional/p2p_compactblocks.py	/^    def on_cmpctblock(self, message):$/;"	m	class:TestP2PConn
on_cmpctblock	test/functional/p2p_leak.py	/^    def on_cmpctblock(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_cmpctblock	test/functional/test_framework/mininode.py	/^    def on_cmpctblock(self, message): pass$/;"	m	class:P2PInterface
on_copyAddress_clicked	src/qt/addressbookpage.cpp	/^void AddressBookPage::on_copyAddress_clicked()$/;"	f	class:AddressBookPage
on_copySignatureButton_SM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_curve	test/functional/test_framework/key.py	/^    def on_curve(self, p1):$/;"	m	class:EllipticCurve
on_dataDirCustom_clicked	src/qt/intro.cpp	/^void Intro::on_dataDirCustom_clicked()$/;"	f	class:Intro
on_dataDirDefault_clicked	src/qt/intro.cpp	/^void Intro::on_dataDirDefault_clicked()$/;"	f	class:Intro
on_dataDirectory_textChanged	src/qt/intro.cpp	/^void Intro::on_dataDirectory_textChanged(const QString &dataDirStr)$/;"	f	class:Intro
on_deleteAddress_clicked	src/qt/addressbookpage.cpp	/^void AddressBookPage::on_deleteAddress_clicked()$/;"	f	class:AddressBookPage
on_ellipsisButton_clicked	src/qt/intro.cpp	/^void Intro::on_ellipsisButton_clicked()$/;"	f	class:Intro
on_exportButton_clicked	src/qt/addressbookpage.cpp	/^void AddressBookPage::on_exportButton_clicked()$/;"	f	class:AddressBookPage
on_feefilter	test/functional/p2p_leak.py	/^    def on_feefilter(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_feefilter	test/functional/test_framework/mininode.py	/^    def on_feefilter(self, message): pass$/;"	m	class:P2PInterface
on_geometriesChanged	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::on_geometriesChanged()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
on_getaddr	test/functional/p2p_leak.py	/^    def on_getaddr(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_getaddr	test/functional/test_framework/mininode.py	/^    def on_getaddr(self, message): pass$/;"	m	class:P2PInterface
on_getblocks	test/functional/p2p_leak.py	/^    def on_getblocks(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_getblocks	test/functional/test_framework/mininode.py	/^    def on_getblocks(self, message): pass$/;"	m	class:P2PInterface
on_getblocktxn	test/functional/p2p_leak.py	/^    def on_getblocktxn(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_getblocktxn	test/functional/test_framework/mininode.py	/^    def on_getblocktxn(self, message): pass$/;"	m	class:P2PInterface
on_getdata	test/functional/p2p_leak.py	/^    def on_getdata(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_getdata	test/functional/p2p_segwit.py	/^    def on_getdata(self, message):$/;"	m	class:TestP2PConn
on_getdata	test/functional/test_framework/mininode.py	/^    def on_getdata(self, message): pass$/;"	m	class:P2PInterface
on_getdata	test/functional/test_framework/mininode.py	/^    def on_getdata(self, message):$/;"	m	class:P2PDataStore
on_getheaders	test/functional/p2p_leak.py	/^    def on_getheaders(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_getheaders	test/functional/test_framework/mininode.py	/^    def on_getheaders(self, message): pass$/;"	m	class:P2PInterface
on_getheaders	test/functional/test_framework/mininode.py	/^    def on_getheaders(self, message):$/;"	m	class:P2PDataStore
on_headers	test/functional/p2p_compactblocks.py	/^    def on_headers(self, message):$/;"	m	class:TestP2PConn
on_headers	test/functional/p2p_leak.py	/^    def on_headers(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_headers	test/functional/p2p_sendheaders.py	/^    def on_headers(self, message):$/;"	m	class:BaseNode
on_headers	test/functional/test_framework/mininode.py	/^    def on_headers(self, message): pass$/;"	m	class:P2PInterface
on_hideTrayIcon_stateChanged	src/qt/optionsdialog.cpp	/^void OptionsDialog::on_hideTrayIcon_stateChanged(int fState)$/;"	f	class:OptionsDialog
on_inv	test/functional/example_test.py	/^    def on_inv(self, message):$/;"	m	class:BaseNode
on_inv	test/functional/feature_maxuploadtarget.py	/^    def on_inv(self, message):$/;"	m	class:TestP2PConn
on_inv	test/functional/p2p_compactblocks.py	/^    def on_inv(self, message):$/;"	m	class:TestP2PConn
on_inv	test/functional/p2p_feefilter.py	/^    def on_inv(self, message):$/;"	m	class:TestP2PConn
on_inv	test/functional/p2p_leak.py	/^    def on_inv(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_inv	test/functional/p2p_leak_tx.py	/^    def on_inv(self, msg):$/;"	m	class:P2PNode
on_inv	test/functional/p2p_node_network_limited.py	/^    def on_inv(self, message):$/;"	m	class:P2PIgnoreInv
on_inv	test/functional/p2p_sendheaders.py	/^    def on_inv(self, message):$/;"	m	class:BaseNode
on_inv	test/functional/test_framework/mininode.py	/^    def on_inv(self, message):$/;"	m	class:P2PInterface
on_inv	test/functional/wallet_resendwallettransactions.py	/^    def on_inv(self, message):$/;"	m	class:P2PStoreTxInvs
on_lineEdit_returnPressed	src/qt/rpcconsole.cpp	/^void RPCConsole::on_lineEdit_returnPressed()$/;"	f	class:RPCConsole
on_mempool	test/functional/p2p_leak.py	/^    def on_mempool(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_mempool	test/functional/test_framework/mininode.py	/^    def on_mempool(self, message): pass$/;"	m	class:P2PInterface
on_message	test/functional/test_framework/mininode.py	/^    def on_message(self, message):$/;"	m	class:P2PConnection
on_message	test/functional/test_framework/mininode.py	/^    def on_message(self, message):$/;"	m	class:P2PInterface
on_newAddress_clicked	src/qt/addressbookpage.cpp	/^void AddressBookPage::on_newAddress_clicked()$/;"	f	class:AddressBookPage
on_notfound	test/functional/test_framework/mininode.py	/^    def on_notfound(self, message): pass$/;"	m	class:P2PInterface
on_okButton_accepted	src/qt/utilitydialog.cpp	/^void HelpMessageDialog::on_okButton_accepted()$/;"	f	class:HelpMessageDialog
on_okButton_clicked	src/qt/optionsdialog.cpp	/^void OptionsDialog::on_okButton_clicked()$/;"	f	class:OptionsDialog
on_open	test/functional/p2p_leak.py	/^    def on_open(self):$/;"	m	class:CLazyNode
on_open	test/functional/p2p_leak.py	/^    def on_open(self):$/;"	m	class:CNodeNoVersionBan
on_open	test/functional/test_framework/mininode.py	/^    def on_open(self):$/;"	m	class:P2PInterface
on_openBitcoinConfButton_clicked	src/qt/optionsdialog.cpp	/^void OptionsDialog::on_openBitcoinConfButton_clicked()$/;"	f	class:OptionsDialog
on_openDebugLogfileButton_clicked	src/qt/rpcconsole.cpp	/^void RPCConsole::on_openDebugLogfileButton_clicked()$/;"	f	class:RPCConsole
on_pasteButton_SM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_pasteButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_pasteButton_clicked	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_pasteButton_clicked()$/;"	f	class:SendCoinsEntry
on_payTo_textChanged	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_payTo_textChanged(const QString &address)$/;"	f	class:SendCoinsEntry
on_ping	test/functional/p2p_leak.py	/^    def on_ping(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_ping	test/functional/test_framework/mininode.py	/^    def on_ping(self, message):$/;"	m	class:P2PInterface
on_pong	test/functional/p2p_leak.py	/^    def on_pong(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_pong	test/functional/test_framework/mininode.py	/^    def on_pong(self, message): pass$/;"	m	class:P2PInterface
on_receiveButton_clicked	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_receiveButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_recentRequestsView_doubleClicked	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_recentRequestsView_doubleClicked(const QModelIndex &index)$/;"	f	class:ReceiveCoinsDialog
on_reject	test/functional/p2p_leak.py	/^    def on_reject(self, message): pass$/;"	m	class:CNodeNoVerackIdle
on_reject	test/functional/p2p_leak.py	/^    def on_reject(self, message): pass$/;"	m	class:CNodeNoVersionBan
on_reject	test/functional/p2p_leak.py	/^    def on_reject(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_reject	test/functional/test_framework/mininode.py	/^    def on_reject(self, message): pass$/;"	m	class:P2PInterface
on_removeRequestButton_clicked	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_removeRequestButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_resetButton_clicked	src/qt/optionsdialog.cpp	/^void OptionsDialog::on_resetButton_clicked()$/;"	f	class:OptionsDialog
on_sectionResized	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int oldSize, int newSize)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
on_selectFileButton_clicked	src/qt/openuridialog.cpp	/^void OpenURIDialog::on_selectFileButton_clicked()$/;"	f	class:OpenURIDialog
on_sendButton_clicked	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_sendButton_clicked()$/;"	f	class:SendCoinsDialog
on_sendcmpct	test/functional/p2p_compactblocks.py	/^    def on_sendcmpct(self, message):$/;"	m	class:TestP2PConn
on_sendcmpct	test/functional/p2p_leak.py	/^    def on_sendcmpct(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_sendcmpct	test/functional/test_framework/mininode.py	/^    def on_sendcmpct(self, message): pass$/;"	m	class:P2PInterface
on_sendheaders	test/functional/p2p_leak.py	/^    def on_sendheaders(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_sendheaders	test/functional/test_framework/mininode.py	/^    def on_sendheaders(self, message): pass$/;"	m	class:P2PInterface
on_showRequestButton_clicked	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_showRequestButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_signMessageButton_SM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_sldGraphRange_valueChanged	src/qt/rpcconsole.cpp	/^void RPCConsole::on_sldGraphRange_valueChanged(int value)$/;"	f	class:RPCConsole
on_tabWidget_currentChanged	src/qt/rpcconsole.cpp	/^void RPCConsole::on_tabWidget_currentChanged(int index)$/;"	f	class:RPCConsole
on_tx	test/functional/p2p_leak.py	/^    def on_tx(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_tx	test/functional/test_framework/mininode.py	/^    def on_tx(self, message): pass$/;"	m	class:P2PInterface
on_verack	test/functional/p2p_leak.py	/^    def on_verack(self, message): pass$/;"	m	class:CNodeNoVerackIdle
on_verack	test/functional/p2p_leak.py	/^    def on_verack(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_verack	test/functional/test_framework/mininode.py	/^    def on_verack(self, message):$/;"	m	class:P2PInterface
on_verifyMessageButton_VM_clicked	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_version	test/functional/p2p_leak.py	/^    def on_version(self, message): self.bad_message(message)$/;"	m	class:CLazyNode
on_version	test/functional/p2p_leak.py	/^    def on_version(self, message):$/;"	m	class:CNodeNoVerackIdle
on_version	test/functional/p2p_timeouts.py	/^    def on_version(self, message):$/;"	m	class:TestP2PConn
on_version	test/functional/test_framework/mininode.py	/^    def on_version(self, message):$/;"	m	class:P2PInterface
once	src/leveldb/util/comparator.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	src/leveldb/util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	src/leveldb/util/env_win.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
one_send	test/functional/wallet_backup.py	/^    def one_send(self, from_node, to_address):$/;"	m	class:WalletBackupTest
only	test/functional/test_framework/netutil.py	/^    import fcntl  # Linux only, so only import when required$/;"	i
only	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address as watch only")$/;"	i
only	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
onlyUnconfirmed	src/miner.cpp	/^void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)$/;"	f	class:BlockAssembler
opcodetype	src/script/script.h	/^enum opcodetype$/;"	g
open	src/fs.cpp	/^void ifstream::open(const fs::path& p, std::ios_base::openmode mode)$/;"	f	class:fsbridge::ifstream
open	src/fs.cpp	/^void ofstream::open(const fs::path& p, std::ios_base::openmode mode)$/;"	f	class:fsbridge::ofstream
open	src/qt/walletcontroller.cpp	/^void OpenWalletActivity::open()$/;"	f	class:OpenWalletActivity
openAction	src/qt/bitcoingui.h	/^    QAction* openAction = nullptr;$/;"	m	class:BitcoinGUI
openBitcoinConf	src/qt/guiutil.cpp	/^bool openBitcoinConf()$/;"	f	namespace:GUIUtil
openClicked	src/qt/bitcoingui.cpp	/^void BitcoinGUI::openClicked()$/;"	f	class:BitcoinGUI
openDebugLogfile	src/qt/guiutil.cpp	/^void openDebugLogfile()$/;"	f	namespace:GUIUtil
openOptionsDialogWithTab	src/qt/bitcoingui.cpp	/^void BitcoinGUI::openOptionsDialogWithTab(OptionsDialog::Tab tab)$/;"	f	class:BitcoinGUI
openRPCConsoleAction	src/qt/bitcoingui.h	/^    QAction* openRPCConsoleAction = nullptr;$/;"	m	class:BitcoinGUI
openThirdPartyTxUrl	src/qt/transactionview.cpp	/^void TransactionView::openThirdPartyTxUrl(QString url)$/;"	f	class:TransactionView
openWallet	src/qt/walletcontroller.cpp	/^OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidget* parent)$/;"	f	class:WalletController
open_for	src/qt/transactionrecord.h	/^    qint64 open_for; \/**< Timestamp if status==OpenUntilDate, otherwise number$/;"	m	class:TransactionStatus
open_read_only_file_limit	src/leveldb/util/env_posix.cc	/^static int open_read_only_file_limit = -1;$/;"	m	namespace:leveldb::__anon8	file:
openmodeToStr	src/fs.cpp	/^static std::string openmodeToStr(std::ios_base::openmode mode)$/;"	f	namespace:fsbridge
operator	share/qt/extract_strings_qt.py	/^import operator$/;"	i
operator !=	src/arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }$/;"	f	class:base_uint
operator !=	src/arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }$/;"	f	class:base_uint
operator !=	src/flatfile.h	/^    friend bool operator!=(const FlatFilePos &a, const FlatFilePos &b) {$/;"	f	struct:FlatFilePos
operator !=	src/leveldb/include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator !=	src/netaddress.h	/^        friend bool operator!=(const CNetAddr& a, const CNetAddr& b) { return !(a == b); }$/;"	f	class:CNetAddr
operator !=	src/netaddress.h	/^        friend bool operator!=(const CService& a, const CService& b) { return !(a == b); }$/;"	f	class:CService
operator !=	src/netaddress.h	/^        friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }$/;"	f	class:CSubNet
operator !=	src/policy/feerate.h	/^    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator !=	src/prevector.h	/^        bool operator!=(const_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_iterator
operator !=	src/prevector.h	/^        bool operator!=(const_reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator !=	src/prevector.h	/^        bool operator!=(iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::iterator
operator !=	src/prevector.h	/^        bool operator!=(reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator !=	src/prevector.h	/^    bool operator!=(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator !=	src/primitives/transaction.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	src/primitives/transaction.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	src/primitives/transaction.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	src/primitives/transaction.h	/^    friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	src/pubkey.h	/^    friend bool operator!=(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator !=	src/script/script.h	/^    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum
operator !=	src/script/script.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum
operator !=	src/test/scriptnum10.h	/^    inline bool operator!=(const CScriptNum10& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator !=	src/test/scriptnum10.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum10
operator !=	src/uint256.h	/^    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }$/;"	f	class:base_blob
operator !=	src/wallet/coinselection.h	/^    bool operator!=(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator &	src/arith_uint256.h	/^    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }$/;"	f	class:base_uint
operator &	src/script/script.h	/^    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }$/;"	f	class:CScriptNum
operator &	src/script/script.h	/^    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}$/;"	f	class:CScriptNum
operator &=	src/arith_uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator &=	src/script/script.h	/^    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator &=	src/script/script.h	/^    inline CScriptNum& operator&=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ()	src/coins.h	/^    size_t operator()(const COutPoint& id) const {$/;"	f	class:SaltedOutpointHasher
operator ()	src/indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	f	struct:DereferencingComparator
operator ()	src/key_io.cpp	/^    std::string operator()(const CNoDestination& no) const { return {}; }$/;"	f	class:__anon54::DestinationEncoder
operator ()	src/key_io.cpp	/^    std::string operator()(const PKHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	src/key_io.cpp	/^    std::string operator()(const ScriptHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	src/key_io.cpp	/^    std::string operator()(const WitnessUnknown& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	src/key_io.cpp	/^    std::string operator()(const WitnessV0KeyHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	src/key_io.cpp	/^    std::string operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	src/leveldb/db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	src/leveldb/db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	src/leveldb/db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	src/leveldb/table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon16::STLLessThan
operator ()	src/miner.h	/^    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b) const$/;"	f	struct:CompareTxIterByAncestorCount
operator ()	src/miner.h	/^    bool operator()(const CTxMemPool::txiter& a, const CTxMemPool::txiter& b) const$/;"	f	struct:CompareCTxMemPoolIter
operator ()	src/miner.h	/^    result_type operator() (const CTxMemPoolModifiedEntry &entry) const$/;"	f	struct:modifiedentry_iter
operator ()	src/miner.h	/^    void operator() (CTxMemPoolModifiedEntry &e)$/;"	f	struct:update_for_parent_inclusion
operator ()	src/net.h	/^    bool operator()(I first, I last) const$/;"	f	struct:CombinerAll
operator ()	src/net_processing.cpp	/^        bool operator()(const I& a, const I& b) const$/;"	f	struct:__anon88::IteratorComparator
operator ()	src/net_processing.cpp	/^    bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)$/;"	f	class:__anon90::CompareInvMempoolOrder
operator ()	src/qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	src/qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const QString &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	src/qt/addresstablemodel.cpp	/^    bool operator()(const QString &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	src/qt/bantablemodel.cpp	/^bool BannedNodeLessThan::operator()(const CCombinedBan& left, const CCombinedBan& right) const$/;"	f	class:BannedNodeLessThan
operator ()	src/qt/paymentserver.cpp	/^      void operator()(X509* b) { X509_free(b); }$/;"	f	struct:X509Deleter
operator ()	src/qt/paymentserver.cpp	/^      void operator()(X509_STORE* b) {$/;"	f	struct:X509StoreDeleter
operator ()	src/qt/peertablemodel.cpp	/^bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombinedStats &right) const$/;"	f	class:NodeLessThan
operator ()	src/qt/recentrequeststablemodel.cpp	/^bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const$/;"	f	class:RecentRequestEntryLessThan
operator ()	src/qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	src/qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const uint256 &b) const$/;"	f	struct:TxLessThan
operator ()	src/qt/transactiontablemodel.cpp	/^    bool operator()(const uint256 &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	src/rpc/blockchain.cpp	/^    bool operator()(const CBlockIndex* a, const CBlockIndex* b) const$/;"	f	struct:CompareBlocksByHeight
operator ()	src/rpc/util.cpp	/^    UniValue operator()(const CNoDestination& dest) const$/;"	f	class:DescribeAddressVisitor
operator ()	src/rpc/util.cpp	/^    UniValue operator()(const PKHash& keyID) const$/;"	f	class:DescribeAddressVisitor
operator ()	src/rpc/util.cpp	/^    UniValue operator()(const ScriptHash& scriptID) const$/;"	f	class:DescribeAddressVisitor
operator ()	src/rpc/util.cpp	/^    UniValue operator()(const WitnessUnknown& id) const$/;"	f	class:DescribeAddressVisitor
operator ()	src/rpc/util.cpp	/^    UniValue operator()(const WitnessV0KeyHash& id) const$/;"	f	class:DescribeAddressVisitor
operator ()	src/rpc/util.cpp	/^    UniValue operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:DescribeAddressVisitor
operator ()	src/script/sigcache.h	/^    uint32_t operator()(const uint256& key) const$/;"	f	class:SignatureCacheHasher
operator ()	src/script/standard.cpp	/^    bool operator()(const CNoDestination &dest) const {$/;"	f	class:__anon86::CScriptVisitor
operator ()	src/script/standard.cpp	/^    bool operator()(const PKHash &keyID) const {$/;"	f	class:__anon86::CScriptVisitor
operator ()	src/script/standard.cpp	/^    bool operator()(const ScriptHash &scriptID) const {$/;"	f	class:__anon86::CScriptVisitor
operator ()	src/script/standard.cpp	/^    bool operator()(const WitnessUnknown& id) const$/;"	f	class:__anon86::CScriptVisitor
operator ()	src/script/standard.cpp	/^    bool operator()(const WitnessV0KeyHash& id) const$/;"	f	class:__anon86::CScriptVisitor
operator ()	src/script/standard.cpp	/^    bool operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:__anon86::CScriptVisitor
operator ()	src/test/bip32_tests.cpp	/^    TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {$/;"	f	struct:TestVector
operator ()	src/test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FailingCheck
operator ()	src/test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FakeCheck
operator ()	src/test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FakeCheckCheckCompletion
operator ()	src/test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FrozenCleanupCheck
operator ()	src/test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:MemoryCheck
operator ()	src/test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:UniqueCheck
operator ()	src/test/miner_tests.cpp	/^    bool operator() (const std::runtime_error& e) const {$/;"	f	class:HasReason
operator ()	src/threadinterrupt.cpp	/^void CThreadInterrupt::operator()()$/;"	f	class:CThreadInterrupt
operator ()	src/txmempool.cpp	/^    bool operator()(const CTxMemPool::indexed_transaction_set::const_iterator& a, const CTxMemPool::indexed_transaction_set::const_iterator& b)$/;"	f	class:__anon74::DepthAndScoreComparator
operator ()	src/txmempool.h	/^        bool operator()(const txiter &a, const txiter &b) const {$/;"	f	struct:CTxMemPool::CompareIteratorByHash
operator ()	src/txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
operator ()	src/txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const$/;"	f	class:CompareTxMemPoolEntryByEntryTime
operator ()	src/txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const$/;"	f	class:CompareTxMemPoolEntryByScore
operator ()	src/txmempool.h	/^    bool operator()(const T& a, const T& b) const$/;"	f	class:CompareTxMemPoolEntryByAncestorFee
operator ()	src/txmempool.h	/^    result_type operator() (const CTransactionRef& tx) const$/;"	f	struct:mempoolentry_txid
operator ()	src/txmempool.h	/^    result_type operator() (const CTxMemPoolEntry &entry) const$/;"	f	struct:mempoolentry_txid
operator ()	src/txmempool.h	/^    size_t operator()(const uint256& txid) const {$/;"	f	class:SaltedTxidHasher
operator ()	src/txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }$/;"	f	struct:update_fee_delta
operator ()	src/txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateLockPoints(lp); }$/;"	f	struct:update_lock_points
operator ()	src/txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_ancestor_state
operator ()	src/txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_descendant_state
operator ()	src/util/bytevectorhash.cpp	/^size_t ByteVectorHash::operator()(const std::vector<unsigned char>& input) const$/;"	f	class:ByteVectorHash
operator ()	src/validation.cpp	/^        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {$/;"	f	struct:__anon49::CBlockIndexWorkComparator
operator ()	src/validation.cpp	/^bool CScriptCheck::operator()() {$/;"	f	class:CScriptCheck
operator ()	src/validation.h	/^    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }$/;"	f	struct:BlockHasher
operator ()	src/wallet/coinselection.cpp	/^    bool operator()(const OutputGroup& a, const OutputGroup& b) const$/;"	f	struct:__anon119
operator ()	src/wallet/rpcwallet.cpp	/^    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }$/;"	f	class:DescribeWalletAddressVisitor
operator ()	src/wallet/rpcwallet.cpp	/^    UniValue operator()(const PKHash& pkhash) const$/;"	f	class:DescribeWalletAddressVisitor
operator ()	src/wallet/rpcwallet.cpp	/^    UniValue operator()(const ScriptHash& scripthash) const$/;"	f	class:DescribeWalletAddressVisitor
operator ()	src/wallet/rpcwallet.cpp	/^    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }$/;"	f	class:DescribeWalletAddressVisitor
operator ()	src/wallet/rpcwallet.cpp	/^    UniValue operator()(const WitnessV0KeyHash& id) const$/;"	f	class:DescribeWalletAddressVisitor
operator ()	src/wallet/rpcwallet.cpp	/^    UniValue operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:DescribeWalletAddressVisitor
operator *	src/arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	src/arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	src/prevector.h	/^        T& operator*() const { return *ptr; }$/;"	f	class:prevector::iterator
operator *	src/prevector.h	/^        T& operator*() { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *	src/prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_iterator
operator *	src/prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator *	src/prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *=	src/arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)$/;"	f	class:base_uint
operator *=	src/arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)$/;"	f	class:base_uint
operator +	src/arith_uint256.h	/^    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }$/;"	f	class:base_uint
operator +	src/prevector.h	/^        const_iterator operator+(size_type n) { return const_iterator(ptr + n); }$/;"	f	class:prevector::const_iterator
operator +	src/prevector.h	/^        iterator operator+(size_type n) { return iterator(ptr + n); }$/;"	f	class:prevector::iterator
operator +	src/script/script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	src/script/script.h	/^    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum
operator +	src/script/script.h	/^    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}$/;"	f	class:CScriptNum
operator +	src/streams.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	src/test/scriptnum10.h	/^    inline CScriptNum10 operator+(   const CScriptNum10& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum10
operator +	src/test/scriptnum10.h	/^    inline CScriptNum10 operator+(   const int64_t& rhs)    const { return CScriptNum10(m_value + rhs);}$/;"	f	class:CScriptNum10
operator ++	src/arith_uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	src/arith_uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator ++	src/prevector.h	/^        const_iterator operator++(int) { const_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator ++	src/prevector.h	/^        const_iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::const_iterator
operator ++	src/prevector.h	/^        const_reverse_iterator operator++(int) { const_reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	src/prevector.h	/^        const_reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	src/prevector.h	/^        iterator operator++(int) { iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::iterator
operator ++	src/prevector.h	/^        iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::iterator
operator ++	src/prevector.h	/^        reverse_iterator operator++(int) { reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator ++	src/prevector.h	/^        reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::reverse_iterator
operator +=	src/arith_uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	src/arith_uint256.h	/^    base_uint& operator+=(uint64_t b64)$/;"	f	class:base_uint
operator +=	src/policy/feerate.h	/^    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }$/;"	f	class:CFeeRate
operator +=	src/prevector.h	/^        const_iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::const_iterator
operator +=	src/prevector.h	/^        iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::iterator
operator +=	src/script/script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	src/script/script.h	/^    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator +=	src/script/script.h	/^    inline CScriptNum& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator +=	src/streams.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator +=	src/test/dbwrapper_tests.cpp	/^    StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }$/;"	f	struct:StringContentsSerializer
operator +=	src/test/dbwrapper_tests.cpp	/^    StringContentsSerializer& operator+=(const std::string& s) {$/;"	f	struct:StringContentsSerializer
operator +=	src/test/scriptnum10.h	/^    inline CScriptNum10& operator+=( const CScriptNum10& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum10
operator +=	src/test/scriptnum10.h	/^    inline CScriptNum10& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator -	src/arith_uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	src/arith_uint256.h	/^    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }$/;"	f	class:base_uint
operator -	src/prevector.h	/^        const_iterator operator-(size_type n) { return const_iterator(ptr - n); }$/;"	f	class:prevector::const_iterator
operator -	src/prevector.h	/^        difference_type friend operator-(const_iterator a, const_iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::const_iterator
operator -	src/prevector.h	/^        difference_type friend operator-(iterator a, iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::iterator
operator -	src/prevector.h	/^        iterator operator-(size_type n) { return iterator(ptr - n); }$/;"	f	class:prevector::iterator
operator -	src/script/script.h	/^    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum
operator -	src/script/script.h	/^    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}$/;"	f	class:CScriptNum
operator -	src/script/script.h	/^    inline CScriptNum operator-()                         const$/;"	f	class:CScriptNum
operator -	src/test/scriptnum10.h	/^    inline CScriptNum10 operator-(   const CScriptNum10& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum10
operator -	src/test/scriptnum10.h	/^    inline CScriptNum10 operator-(   const int64_t& rhs)    const { return CScriptNum10(m_value - rhs);}$/;"	f	class:CScriptNum10
operator -	src/test/scriptnum10.h	/^    inline CScriptNum10 operator-()                         const$/;"	f	class:CScriptNum10
operator --	src/arith_uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	src/arith_uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator --	src/prevector.h	/^        const_iterator operator--(int) { const_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator --	src/prevector.h	/^        const_iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::const_iterator
operator --	src/prevector.h	/^        const_reverse_iterator operator--(int) { const_reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator --	src/prevector.h	/^        const_reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator --	src/prevector.h	/^        iterator operator--(int) { iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::iterator
operator --	src/prevector.h	/^        iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::iterator
operator --	src/prevector.h	/^        reverse_iterator operator--(int) { reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator --	src/prevector.h	/^        reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::reverse_iterator
operator -=	src/arith_uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	src/arith_uint256.h	/^    base_uint& operator-=(uint64_t b64)$/;"	f	class:base_uint
operator -=	src/prevector.h	/^        const_iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::const_iterator
operator -=	src/prevector.h	/^        iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::iterator
operator -=	src/script/script.h	/^    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator -=	src/script/script.h	/^    inline CScriptNum& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator -=	src/test/scriptnum10.h	/^    inline CScriptNum10& operator-=( const CScriptNum10& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum10
operator -=	src/test/scriptnum10.h	/^    inline CScriptNum10& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator ->	src/prevector.h	/^        T* operator->() const { return ptr; }$/;"	f	class:prevector::iterator
operator ->	src/prevector.h	/^        T* operator->() { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator ->	src/prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_iterator
operator ->	src/prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ->	src/prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator /	src/arith_uint256.h	/^    friend inline const base_uint operator\/(const base_uint& a, const base_uint& b) { return base_uint(a) \/= b; }$/;"	f	class:base_uint
operator /=	src/arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator\/=(const base_uint& b)$/;"	f	class:base_uint
operator <	src/arith_uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }$/;"	f	class:base_uint
operator <	src/netaddress.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	src/netaddress.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	src/netaddress.cpp	/^bool operator<(const CSubNet& a, const CSubNet& b)$/;"	f
operator <	src/policy/feerate.h	/^    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <	src/prevector.h	/^        bool operator<(const_iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::const_iterator
operator <	src/prevector.h	/^        bool operator<(iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::iterator
operator <	src/prevector.h	/^    bool operator<(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator <	src/primitives/transaction.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	src/protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	src/pubkey.h	/^    friend bool operator<(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator <	src/qt/coincontroldialog.cpp	/^bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {$/;"	f	class:CCoinControlWidgetItem
operator <	src/script/script.h	/^    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum
operator <	src/script/script.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum
operator <	src/script/standard.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	src/script/standard.h	/^    friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator <	src/test/scriptnum10.h	/^    inline bool operator< (const CScriptNum10& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum10
operator <	src/test/scriptnum10.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum10
operator <	src/uint256.h	/^    friend inline bool operator<(const base_blob& a, const base_blob& b) { return a.Compare(b) < 0; }$/;"	f	class:base_blob
operator <	src/wallet/coinselection.h	/^    bool operator<(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator <<	src/arith_uint256.h	/^    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }$/;"	f	class:base_uint
operator <<	src/hash.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<	src/leveldb/util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator <<	src/qt/notificator.cpp	/^QDBusArgument &operator<<(QDBusArgument &a, const FreedesktopImage &i)$/;"	f
operator <<	src/script/script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	src/script/script.h	/^    CScript& operator<<(const CScriptNum& b)$/;"	f	class:CScript
operator <<	src/script/script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	src/script/script.h	/^    CScript& operator<<(int64_t b) { return push_int64(b); }$/;"	f	class:CScript
operator <<	src/script/script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	src/serialize.h	/^    CSizeComputer& operator<<(const T& obj)$/;"	f	class:CSizeComputer
operator <<	src/streams.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	src/streams.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	src/streams.h	/^    CVectorWriter& operator<<(const T& obj)$/;"	f	class:CVectorWriter
operator <<	src/streams.h	/^    OverrideStream<Stream>& operator<<(const T& obj)$/;"	f	class:OverrideStream
operator <<	src/test/setup_common.cpp	/^std::ostream& operator<<(std::ostream& os, const uint256& num)$/;"	f
operator <<	src/test/setup_common.h	/^std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::ostream>::type& stream, const T& e)$/;"	f
operator <<=	src/arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	src/arith_uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }$/;"	f	class:base_uint
operator <=	src/policy/feerate.h	/^    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <=	src/prevector.h	/^        bool operator<=(const_iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::const_iterator
operator <=	src/prevector.h	/^        bool operator<=(iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::iterator
operator <=	src/script/script.h	/^    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum
operator <=	src/script/script.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum
operator <=	src/test/scriptnum10.h	/^    inline bool operator<=(const CScriptNum10& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator <=	src/test/scriptnum10.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum10
operator =	src/arith_uint256.h	/^    base_uint& operator=(const base_uint& b)$/;"	f	class:base_uint
operator =	src/arith_uint256.h	/^    base_uint& operator=(uint64_t b)$/;"	f	class:base_uint
operator =	src/leveldb/include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator =	src/prevector.h	/^    prevector& operator=(const prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
operator =	src/prevector.h	/^    prevector& operator=(prevector<N, T, Size, Diff>&& other) {$/;"	f	class:prevector
operator =	src/qt/walletmodel.h	/^        UnlockContext& operator=(UnlockContext&& rhs) { CopyFrom(std::move(rhs)); return *this; }$/;"	f	class:WalletModel::UnlockContext
operator =	src/script/script.h	/^    inline CScriptNum& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator =	src/test/scriptnum10.h	/^    inline CScriptNum10& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator ==	src/arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }$/;"	f	class:base_uint
operator ==	src/arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }$/;"	f	class:base_uint
operator ==	src/chain.h	/^    friend bool operator==(const CChain &a, const CChain &b) {$/;"	f	class:CChain
operator ==	src/flatfile.h	/^    friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {$/;"	f	struct:FlatFilePos
operator ==	src/key.h	/^    friend bool operator==(const CExtKey& a, const CExtKey& b)$/;"	f	struct:CExtKey
operator ==	src/key.h	/^    friend bool operator==(const CKey& a, const CKey& b)$/;"	f	class:CKey
operator ==	src/leveldb/include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ==	src/netaddress.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	src/netaddress.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	src/netaddress.cpp	/^bool operator==(const CSubNet& a, const CSubNet& b)$/;"	f
operator ==	src/policy/feerate.h	/^    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator ==	src/prevector.h	/^        bool operator==(const_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_iterator
operator ==	src/prevector.h	/^        bool operator==(const_reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ==	src/prevector.h	/^        bool operator==(iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::iterator
operator ==	src/prevector.h	/^        bool operator==(reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator ==	src/prevector.h	/^    bool operator==(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator ==	src/primitives/transaction.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	src/primitives/transaction.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	src/primitives/transaction.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	src/primitives/transaction.h	/^    friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	src/pubkey.h	/^    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)$/;"	f	struct:CExtPubKey
operator ==	src/pubkey.h	/^    friend bool operator==(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator ==	src/script/script.h	/^    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum
operator ==	src/script/script.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum
operator ==	src/script/sign.h	/^    friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)$/;"	f	struct:KeyOriginInfo
operator ==	src/script/standard.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	src/script/standard.h	/^    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator ==	src/test/coins_tests.cpp	/^bool operator==(const Coin &a, const Coin &b) {$/;"	f	namespace:__anon60
operator ==	src/test/scriptnum10.h	/^    inline bool operator==(const CScriptNum10& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum10
operator ==	src/test/scriptnum10.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum10
operator ==	src/test/serialize_tests.cpp	/^    bool operator==(const CSerializeMethodsTestSingle& rhs)$/;"	f	class:CSerializeMethodsTestSingle
operator ==	src/uint256.h	/^    friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }$/;"	f	class:base_blob
operator ==	src/wallet/coinselection.h	/^    bool operator==(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator ==	src/wallet/db.cpp	/^bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const$/;"	f	class:WalletDatabaseFileId
operator >	src/arith_uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }$/;"	f	class:base_uint
operator >	src/policy/feerate.h	/^    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >	src/prevector.h	/^        bool operator>(const_iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::const_iterator
operator >	src/prevector.h	/^        bool operator>(iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::iterator
operator >	src/script/script.h	/^    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum
operator >	src/script/script.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum
operator >	src/test/scriptnum10.h	/^    inline bool operator> (const CScriptNum10& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum10
operator >	src/test/scriptnum10.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum10
operator >=	src/arith_uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }$/;"	f	class:base_uint
operator >=	src/policy/feerate.h	/^    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >=	src/prevector.h	/^        bool operator>=(const_iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::const_iterator
operator >=	src/prevector.h	/^        bool operator>=(iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::iterator
operator >=	src/script/script.h	/^    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum
operator >=	src/script/script.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum
operator >=	src/test/scriptnum10.h	/^    inline bool operator>=(const CScriptNum10& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator >=	src/test/scriptnum10.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum10
operator >>	src/arith_uint256.h	/^    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }$/;"	f	class:base_uint
operator >>	src/hash.h	/^    CHashVerifier<Source>& operator>>(T&& obj)$/;"	f	class:CHashVerifier
operator >>	src/qt/notificator.cpp	/^const QDBusArgument &operator>>(const QDBusArgument &a, FreedesktopImage &i)$/;"	f
operator >>	src/script/bitcoinconsensus.cpp	/^    TxInputStream& operator>>(T&& obj)$/;"	f	class:__anon81::TxInputStream
operator >>	src/streams.h	/^    CAutoFile& operator>>(T&& obj)$/;"	f	class:CAutoFile
operator >>	src/streams.h	/^    CBufferedFile& operator>>(T&& obj) {$/;"	f	class:CBufferedFile
operator >>	src/streams.h	/^    CDataStream& operator>>(T&& obj)$/;"	f	class:CDataStream
operator >>	src/streams.h	/^    OverrideStream<Stream>& operator>>(T&& obj)$/;"	f	class:OverrideStream
operator >>	src/streams.h	/^    VectorReader& operator>>(T& obj)$/;"	f	class:VectorReader
operator >>=	src/arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator Dbt*	src/wallet/db.cpp	/^BerkeleyBatch::SafeDbt::operator Dbt*()$/;"	f	class:BerkeleyBatch::SafeDbt
operator []	src/chain.h	/^    CBlockIndex *operator[](int nHeight) const {$/;"	f	class:CChain
operator []	src/leveldb/include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
operator []	src/prevector.h	/^        T& operator[](size_type pos) { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	src/prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::const_iterator
operator []	src/prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	src/prevector.h	/^    T& operator[](size_type pos) {$/;"	f	class:prevector
operator []	src/prevector.h	/^    const T& operator[](size_type pos) const {$/;"	f	class:prevector
operator []	src/pubkey.h	/^    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }$/;"	f	class:CPubKey
operator []	src/streams.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	src/streams.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	src/univalue/lib/univalue.cpp	/^const UniValue& UniValue::operator[](const std::string& key) const$/;"	f	class:UniValue
operator []	src/univalue/lib/univalue.cpp	/^const UniValue& UniValue::operator[](size_t index) const$/;"	f	class:UniValue
operator ^	src/arith_uint256.h	/^    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }$/;"	f	class:base_uint
operator ^=	src/arith_uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	src/arith_uint256.h	/^    base_uint& operator^=(uint64_t b)$/;"	f	class:base_uint
operator bool	src/sync.h	/^    operator bool() const$/;"	f	class:CSemaphoreGrant
operator bool	src/sync.h	/^    operator bool()$/;"	f	class:UniqueLock
operator bool	src/threadinterrupt.cpp	/^CThreadInterrupt::operator bool() const$/;"	f	class:CThreadInterrupt
operator |	src/arith_uint256.h	/^    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }$/;"	f	class:base_uint
operator |=	src/arith_uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	src/arith_uint256.h	/^    base_uint& operator|=(uint64_t b)$/;"	f	class:base_uint
operator ~	src/arith_uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
optIndent	src/util/system.cpp	/^static const int optIndent = 2;$/;"	v	file:
option_config_	src/leveldb/db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest	file:
options	src/dbwrapper.h	/^    leveldb::Options options;$/;"	m	class:CDBWrapper
options	src/leveldb/table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	src/leveldb/table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
optionsAction	src/qt/bitcoingui.h	/^    QAction* optionsAction = nullptr;$/;"	m	class:BitcoinGUI
optionsClicked	src/qt/bitcoingui.cpp	/^void BitcoinGUI::optionsClicked()$/;"	f	class:BitcoinGUI
optionsModel	src/qt/bitcoin.h	/^    OptionsModel *optionsModel;$/;"	m	class:BitcoinApplication
optionsModel	src/qt/bitcoingui.h	/^    OptionsModel *optionsModel;$/;"	m	class:UnitDisplayStatusBarControl
optionsModel	src/qt/clientmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:ClientModel
optionsModel	src/qt/paymentserver.h	/^    OptionsModel *optionsModel;$/;"	m	class:PaymentServer
optionsModel	src/qt/walletmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:WalletModel
options_	src/leveldb/db/autocompact_test.cc	/^  Options options_;$/;"	m	class:leveldb::AutoCompactTest	file:
options_	src/leveldb/db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	src/leveldb/db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	src/leveldb/db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	src/leveldb/db/fault_injection_test.cc	/^  Options options_;$/;"	m	class:leveldb::FaultInjectionTest	file:
options_	src/leveldb/db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon30::Repairer	file:
options_	src/leveldb/db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	src/leveldb/db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	src/leveldb/table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	src/leveldb/table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	src/leveldb/table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
or	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
ord	contrib/testgen/base58.py	/^    def ord(c):$/;"	f
order	src/qt/bantablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:BannedNodeLessThan
order	src/qt/peertablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:NodeLessThan
order	src/qt/recentrequeststablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:RecentRequestEntryLessThan
orders	src/test/raii_event_tests.cpp	/^static std::map<void*, uint16_t> orders;$/;"	v	file:
org.bitcoin	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^package org.bitcoin;$/;"	p
org.bitcoin	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^package org.bitcoin;$/;"	p
org.bitcoin	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^package org.bitcoin;$/;"	p
org.bitcoin	src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^package org.bitcoin;$/;"	p
origin	test/functional/wallet_importmulti.py	/^        self.log.info("Addresses should have hd keypath and master key id after import with key origin")$/;"	i
origins	src/script/sign.h	/^    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;$/;"	m	struct:final
orphan_work_set	src/net.h	/^    std::set<uint256> orphan_work_set;$/;"	m	class:CNode
os	build_msvc/msvc-autogen.py	/^import os$/;"	i
os	contrib/devtools/copyright_header.py	/^import os$/;"	i
os	contrib/devtools/github-merge.py	/^import os$/;"	i
os	contrib/devtools/optimize-pngs.py	/^import os$/;"	i
os	contrib/devtools/security-check.py	/^import os$/;"	i
os	contrib/devtools/symbol-check.py	/^import os$/;"	i
os	contrib/devtools/update-translations.py	/^import os$/;"	i
os	contrib/gitian-build.py	/^import os$/;"	i
os	contrib/linearize/linearize-data.py	/^import os$/;"	i
os	contrib/linearize/linearize-data.py	/^import os.path$/;"	i
os	contrib/linearize/linearize-hashes.py	/^import os$/;"	i
os	contrib/linearize/linearize-hashes.py	/^import os.path$/;"	i
os	contrib/seeds/generate-seeds.py	/^import os$/;"	i
os	contrib/testgen/gen_key_io_test_vectors.py	/^import os$/;"	i
os	contrib/verify-commits/verify-commits.py	/^import os$/;"	i
os	share/qt/extract_strings_qt.py	/^import os$/;"	i
os	test/functional/combine_logs.py	/^import os$/;"	i
os	test/functional/feature_blocksdir.py	/^import os$/;"	i
os	test/functional/feature_config_args.py	/^import os$/;"	i
os	test/functional/feature_filelock.py	/^import os$/;"	i
os	test/functional/feature_includeconf.py	/^import os$/;"	i
os	test/functional/feature_logging.py	/^import os$/;"	i
os	test/functional/feature_notifications.py	/^import os$/;"	i
os	test/functional/feature_proxy.py	/^import os$/;"	i
os	test/functional/feature_pruning.py	/^import os$/;"	i
os	test/functional/feature_versionbits_warning.py	/^import os$/;"	i
os	test/functional/mempool_persist.py	/^import os$/;"	i
os	test/functional/p2p_invalid_messages.py	/^import os$/;"	i
os	test/functional/rpc_getblockstats.py	/^import os$/;"	i
os	test/functional/rpc_help.py	/^import os$/;"	i
os	test/functional/rpc_psbt.py	/^import os$/;"	i
os	test/functional/rpc_scantxoutset.py	/^import os$/;"	i
os	test/functional/rpc_users.py	/^import os$/;"	i
os	test/functional/test_framework/authproxy.py	/^import os$/;"	i
os	test/functional/test_framework/coverage.py	/^import os$/;"	i
os	test/functional/test_framework/netutil.py	/^import os$/;"	i
os	test/functional/test_framework/test_framework.py	/^import os$/;"	i
os	test/functional/test_framework/test_node.py	/^import os$/;"	i
os	test/functional/test_framework/util.py	/^import os$/;"	i
os	test/functional/test_runner.py	/^import os$/;"	i
os	test/functional/wallet_backup.py	/^import os$/;"	i
os	test/functional/wallet_dump.py	/^import os$/;"	i
os	test/functional/wallet_hd.py	/^import os$/;"	i
os	test/functional/wallet_keypool_topup.py	/^import os$/;"	i
os	test/functional/wallet_multiwallet.py	/^import os$/;"	i
os	test/fuzz/test_runner.py	/^import os$/;"	i
os	test/lint/check-rpc-mappings.py	/^import os$/;"	i
os	test/util/bitcoin-util-test.py	/^import os$/;"	i
os	test/util/rpcauth-test.py	/^import os$/;"	i
other	src/support/lockedpool.h	/^    Arena(const Arena& other) = delete; \/\/ non construction-copyable$/;"	m	class:Arena
other	src/support/lockedpool.h	/^    LockedPool(const LockedPool& other) = delete; \/\/ non construction-copyable$/;"	m	class:LockedPool
out	src/coins.h	/^    CTxOut out;$/;"	m	class:Coin
out	src/rest.cpp	/^    CTxOut out;$/;"	m	struct:CCoin	file:
outOfSyncWarningClicked	src/qt/walletframe.cpp	/^void WalletFrame::outOfSyncWarningClicked()$/;"	f	class:WalletFrame
outbound_message_high_water_mark	src/zmq/zmqabstractnotifier.h	/^    int outbound_message_high_water_mark; \/\/ aka SNDHWM$/;"	m	class:CZMQAbstractNotifier
outer	src/crypto/hmac_sha256.h	/^    CSHA256 outer;$/;"	m	class:CHMAC_SHA256
outer	src/crypto/hmac_sha512.h	/^    CSHA512 outer;$/;"	m	class:CHMAC_SHA512
outer	src/secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon112
outfile	contrib/filter-lcov.py	/^outfile = args.outfile$/;"	v
outfile	src/leveldb/db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outpoint	src/txdb.cpp	/^    COutPoint* outpoint;$/;"	m	struct:__anon121::CoinEntry	file:
outpoint	src/wallet/coinselection.h	/^    COutPoint outpoint;$/;"	m	class:CInputCoin
outputArray	contrib/devtools/optimize-pngs.py	/^outputArray = []$/;"	v
outputEscape	src/univalue/gen/gen.cpp	/^static void outputEscape()$/;"	f	file:
output_file	contrib/macdeploy/custom_dsstore.py	/^output_file = sys.argv[1]$/;"	v
outputs	src/leveldb/db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outputs	src/psbt.h	/^    std::vector<PSBTOutput> outputs;$/;"	m	struct:PartiallySignedTransaction
overlapped_bytes_	src/leveldb/db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
override	src/bench/bench.h	/^    void footer() override;$/;"	m	class:benchmark::ConsolePrinter
override	src/bench/bench.h	/^    void footer() override;$/;"	m	class:benchmark::PlotlyPrinter
override	src/bench/bench.h	/^    void header() override;$/;"	m	class:benchmark::ConsolePrinter
override	src/bench/bench.h	/^    void header() override;$/;"	m	class:benchmark::PlotlyPrinter
override	src/bench/bench.h	/^    void result(const State& state) override;$/;"	m	class:benchmark::ConsolePrinter
override	src/bench/bench.h	/^    void result(const State& state) override;$/;"	m	class:benchmark::PlotlyPrinter
override	src/coins.h	/^    CCoinsViewCursor *Cursor() const override;$/;"	m	class:CCoinsViewBacked
override	src/coins.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:CCoinsViewBacked
override	src/coins.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:CCoinsViewCache
override	src/coins.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewBacked
override	src/coins.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewCache
override	src/coins.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:CCoinsViewBacked
override	src/coins.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:CCoinsViewCache
override	src/coins.h	/^    size_t EstimateSize() const override;$/;"	m	class:CCoinsViewBacked
override	src/coins.h	/^    std::vector<uint256> GetHeadBlocks() const override;$/;"	m	class:CCoinsViewBacked
override	src/coins.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:CCoinsViewBacked
override	src/coins.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:CCoinsViewCache
override	src/dummywallet.cpp	/^    void AddWalletOptions() const override;$/;"	m	class:DummyWalletInit	file:
override	src/index/base.h	/^                        const std::vector<CTransactionRef>& txn_conflicted) override;$/;"	m	class:BaseIndex
override	src/index/base.h	/^    void ChainStateFlushed(const CBlockLocator& locator) override;$/;"	m	class:BaseIndex
override	src/index/blockfilterindex.h	/^    bool CommitInternal(CDBBatch& batch) override;$/;"	m	class:final
override	src/index/blockfilterindex.h	/^    bool Init() override;$/;"	m	class:final
override	src/index/blockfilterindex.h	/^    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;$/;"	m	class:final
override	src/index/blockfilterindex.h	/^    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;$/;"	m	class:final
override	src/index/txindex.h	/^    BaseIndex::DB& GetDB() const override;$/;"	m	class:final
override	src/index/txindex.h	/^    bool Init() override;$/;"	m	class:final
override	src/index/txindex.h	/^    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;$/;"	m	class:final
override	src/index/txindex.h	/^    virtual ~TxIndex() override;$/;"	m	class:final
override	src/keystore.h	/^    bool AddCScript(const CScript& redeemScript) override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool AddWatchOnly(const CScript &dest) override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool GetKey(const CKeyID &address, CKey &keyOut) const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool HaveCScript(const CScriptID &hash) const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool HaveKey(const CKeyID &address) const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool HaveWatchOnly() const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool HaveWatchOnly(const CScript &dest) const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    bool RemoveWatchOnly(const CScript &dest) override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    std::set<CKeyID> GetKeys() const override;$/;"	m	class:CBasicKeyStore
override	src/keystore.h	/^    std::set<CScriptID> GetCScripts() const override;$/;"	m	class:CBasicKeyStore
override	src/net_processing.h	/^    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;$/;"	m	class:final
override	src/net_processing.h	/^    void BlockChecked(const CBlock& block, const CValidationState& state) override;$/;"	m	class:final
override	src/net_processing.h	/^    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:final
override	src/net_processing.h	/^    void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;$/;"	m	class:final
override	src/net_processing.h	/^    void InitializeNode(CNode* pnode) override;$/;"	m	class:final
override	src/net_processing.h	/^    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;$/;"	m	class:final
override	src/net_processing.h	/^    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;$/;"	m	class:final
override	src/script/interpreter.h	/^    bool CheckLockTime(const CScriptNum& nLockTime) const override;$/;"	m	class:GenericTransactionSignatureChecker
override	src/script/interpreter.h	/^    bool CheckSequence(const CScriptNum& nSequence) const override;$/;"	m	class:GenericTransactionSignatureChecker
override	src/script/interpreter.h	/^    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:GenericTransactionSignatureChecker
override	src/script/sigcache.h	/^    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const override;$/;"	m	class:CachingTransactionSignatureChecker
override	src/script/sign.cpp	/^    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:final	file:
override	src/script/sign.h	/^    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:MutableTransactionSignatureCreator
override	src/script/sign.h	/^    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;$/;"	m	class:HidingSigningProvider
override	src/script/sign.h	/^    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;$/;"	m	struct:final
override	src/script/sign.h	/^    bool GetKey(const CKeyID& keyid, CKey& key) const override;$/;"	m	class:HidingSigningProvider
override	src/script/sign.h	/^    bool GetKey(const CKeyID& keyid, CKey& key) const override;$/;"	m	struct:final
override	src/script/sign.h	/^    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;$/;"	m	class:HidingSigningProvider
override	src/script/sign.h	/^    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;$/;"	m	struct:final
override	src/script/sign.h	/^    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;$/;"	m	class:HidingSigningProvider
override	src/script/sign.h	/^    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;$/;"	m	struct:final
override	src/support/lockedpool.cpp	/^    size_t GetLimit() override;$/;"	m	class:PosixLockedPageAllocator	file:
override	src/support/lockedpool.cpp	/^    size_t GetLimit() override;$/;"	m	class:Win32LockedPageAllocator	file:
override	src/support/lockedpool.cpp	/^    void FreeLocked(void* addr, size_t len) override;$/;"	m	class:PosixLockedPageAllocator	file:
override	src/support/lockedpool.cpp	/^    void FreeLocked(void* addr, size_t len) override;$/;"	m	class:Win32LockedPageAllocator	file:
override	src/support/lockedpool.cpp	/^    void* AllocateLocked(size_t len, bool *lockingSuccess) override;$/;"	m	class:PosixLockedPageAllocator	file:
override	src/support/lockedpool.cpp	/^    void* AllocateLocked(size_t len, bool *lockingSuccess) override;$/;"	m	class:Win32LockedPageAllocator	file:
override	src/txdb.h	/^    CCoinsViewCursor *Cursor() const override;$/;"	m	class:final
override	src/txdb.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:final
override	src/txdb.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:final
override	src/txdb.h	/^    bool GetKey(COutPoint &key) const override;$/;"	m	class:CCoinsViewDBCursor
override	src/txdb.h	/^    bool GetValue(Coin &coin) const override;$/;"	m	class:CCoinsViewDBCursor
override	src/txdb.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:final
override	src/txdb.h	/^    bool Valid() const override;$/;"	m	class:CCoinsViewDBCursor
override	src/txdb.h	/^    size_t EstimateSize() const override;$/;"	m	class:final
override	src/txdb.h	/^    std::vector<uint256> GetHeadBlocks() const override;$/;"	m	class:final
override	src/txdb.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:final
override	src/txdb.h	/^    unsigned int GetValueSize() const override;$/;"	m	class:CCoinsViewDBCursor
override	src/txdb.h	/^    void Next() override;$/;"	m	class:CCoinsViewDBCursor
override	src/txmempool.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewMemPool
override	src/wallet/crypter.h	/^    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;$/;"	m	class:CCryptoKeyStore
override	src/wallet/crypter.h	/^    bool GetKey(const CKeyID &address, CKey& keyOut) const override;$/;"	m	class:CCryptoKeyStore
override	src/wallet/crypter.h	/^    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;$/;"	m	class:CCryptoKeyStore
override	src/wallet/crypter.h	/^    bool HaveKey(const CKeyID &address) const override;$/;"	m	class:CCryptoKeyStore
override	src/wallet/crypter.h	/^    std::set<CKeyID> GetKeys() const override;$/;"	m	class:CCryptoKeyStore
override	src/wallet/init.cpp	/^    bool ParameterInteraction() const override;$/;"	m	class:WalletInit	file:
override	src/wallet/init.cpp	/^    void AddWalletOptions() const override;$/;"	m	class:WalletInit	file:
override	src/wallet/init.cpp	/^    void Construct(InitInterfaces& interfaces) const override;$/;"	m	class:WalletInit	file:
override	src/wallet/wallet.h	/^    bool AddCScript(const CScript& redeemScript) override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    void BlockDisconnected(const CBlock& block) override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    void ChainStateFlushed(const CBlockLocator& loc) override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    void TransactionAddedToMempool(const CTransactionRef& tx) override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;$/;"	m	class:final
override	src/wallet/wallet.h	/^    void UpdatedBlockTip() override;$/;"	m	class:final
override	src/zmq/zmqnotificationinterface.h	/^    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:final
override	src/zmq/zmqnotificationinterface.h	/^    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;$/;"	m	class:final
override	src/zmq/zmqnotificationinterface.h	/^    void TransactionAddedToMempool(const CTransactionRef& tx) override;$/;"	m	class:final
override	src/zmq/zmqnotificationinterface.h	/^    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;$/;"	m	class:final
override	src/zmq/zmqpublishnotifier.h	/^    bool Initialize(void *pcontext) override;$/;"	m	class:CZMQAbstractPublishNotifier
override	src/zmq/zmqpublishnotifier.h	/^    bool NotifyBlock(const CBlockIndex *pindex) override;$/;"	m	class:CZMQPublishHashBlockNotifier
override	src/zmq/zmqpublishnotifier.h	/^    bool NotifyBlock(const CBlockIndex *pindex) override;$/;"	m	class:CZMQPublishRawBlockNotifier
override	src/zmq/zmqpublishnotifier.h	/^    bool NotifyTransaction(const CTransaction &transaction) override;$/;"	m	class:CZMQPublishHashTransactionNotifier
override	src/zmq/zmqpublishnotifier.h	/^    bool NotifyTransaction(const CTransaction &transaction) override;$/;"	m	class:CZMQPublishRawTransactionNotifier
override	src/zmq/zmqpublishnotifier.h	/^    void Shutdown() override;$/;"	m	class:CZMQAbstractPublishNotifier
overviewAction	src/qt/bitcoingui.h	/^    QAction* overviewAction = nullptr;$/;"	m	class:BitcoinGUI
overviewPage	src/qt/walletview.h	/^    OverviewPage *overviewPage;$/;"	m	class:WalletView
owned_	src/leveldb/db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owned_	src/leveldb/table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	src/leveldb/db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	src/leveldb/db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon30::Repairer	file:
owns_info_log_	src/leveldb/db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	src/leveldb/db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon30::Repairer	file:
p2p	test/functional/test_framework/test_node.py	/^    def p2p(self):$/;"	m	class:TestNode
p2p_port	test/functional/test_framework/util.py	/^def p2p_port(n):$/;"	f
p2pkh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2pkh address from descriptor")$/;"	i
p2pkh_address_to_script	test/functional/feature_segwit.py	/^    def p2pkh_address_to_script(self, v):$/;"	m	class:SegWitTest
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
p2sh	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
p2sh_address_to_script	test/functional/feature_segwit.py	/^    def p2sh_address_to_script(self, v):$/;"	m	class:SegWitTest
p2wpkh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
p2wpkh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
p2wpkh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
p2wpkh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
p2wpkh	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
p2wpkh_prefix	contrib/testgen/gen_key_io_test_vectors.py	/^p2wpkh_prefix = (OP_0, 20)$/;"	v
p2wsh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
p2wsh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
p2wsh	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
p2wsh_prefix	contrib/testgen/gen_key_io_test_vectors.py	/^p2wsh_prefix = (OP_0, 32)$/;"	v
pContent	src/leveldb/util/env_win.cc	/^    void* pContent;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
p_util_hexdigit	src/util/strencodings.cpp	/^const signed char p_util_hexdigit[256] =$/;"	v
pack	test/functional/interface_rest.py	/^from struct import pack, unpack$/;"	i
package	depends/packages/bdb.mk	/^package=bdb$/;"	m
package	depends/packages/boost.mk	/^package=boost$/;"	m
package	depends/packages/dbus.mk	/^package=dbus$/;"	m
package	depends/packages/expat.mk	/^package=expat$/;"	m
package	depends/packages/fontconfig.mk	/^package=fontconfig$/;"	m
package	depends/packages/freetype.mk	/^package=freetype$/;"	m
package	depends/packages/libX11.mk	/^package=libX11$/;"	m
package	depends/packages/libXau.mk	/^package=libXau$/;"	m
package	depends/packages/libXext.mk	/^package=libXext$/;"	m
package	depends/packages/libevent.mk	/^package=libevent$/;"	m
package	depends/packages/libxcb.mk	/^package=libxcb$/;"	m
package	depends/packages/miniupnpc.mk	/^package=miniupnpc$/;"	m
package	depends/packages/native_biplist.mk	/^package=native_biplist$/;"	m
package	depends/packages/native_cctools.mk	/^package=native_cctools$/;"	m
package	depends/packages/native_cdrkit.mk	/^package=native_cdrkit$/;"	m
package	depends/packages/native_ds_store.mk	/^package=native_ds_store$/;"	m
package	depends/packages/native_libdmg-hfsplus.mk	/^package=native_libdmg-hfsplus$/;"	m
package	depends/packages/native_mac_alias.mk	/^package=native_mac_alias$/;"	m
package	depends/packages/native_protobuf.mk	/^package=native_protobuf$/;"	m
package	depends/packages/openssl.mk	/^package=openssl$/;"	m
package	depends/packages/protobuf.mk	/^package=protobuf$/;"	m
package	depends/packages/qrencode.mk	/^package=qrencode$/;"	m
package	depends/packages/rapidcheck.mk	/^package=rapidcheck$/;"	m
package	depends/packages/xcb_proto.mk	/^package=xcb_proto$/;"	m
package	depends/packages/xextproto.mk	/^package=xextproto$/;"	m
package	depends/packages/xproto.mk	/^package=xproto$/;"	m
package	depends/packages/xtrans.mk	/^package=xtrans$/;"	m
package	depends/packages/zeromq.mk	/^package=zeromq$/;"	m
package	depends/packages/zlib.mk	/^package=zlib$/;"	m
package_name_ns	contrib/macdeploy/custom_dsstore.py	/^package_name_ns = sys.argv[2]$/;"	v
packages	depends/packages/packages.mk	/^packages:=boost openssl libevent zeromq$/;"	m
pad	src/crypto/aes.h	/^    const bool pad;$/;"	m	class:AES256CBCDecrypt
pad	src/crypto/aes.h	/^    const bool pad;$/;"	m	class:AES256CBCEncrypt
page_size	src/support/lockedpool.cpp	/^    size_t page_size;$/;"	m	class:PosixLockedPageAllocator	file:
page_size	src/support/lockedpool.cpp	/^    size_t page_size;$/;"	m	class:Win32LockedPageAllocator	file:
paint	src/qt/overviewpage.cpp	/^    inline void paint(QPainter *painter, const QStyleOptionViewItem &option,$/;"	f	class:TxViewDelegate
paintEvent	src/qt/splashscreen.cpp	/^void SplashScreen::paintEvent(QPaintEvent *event)$/;"	f	class:SplashScreen
paintEvent	src/qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::paintEvent(QPaintEvent *)$/;"	f	class:TrafficGraphWidget
paintPath	src/qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::paintPath(QPainterPath &path, QQueue<float> &samples)$/;"	f	class:TrafficGraphWidget
paramIdx	src/rpc/client.cpp	/^    int paramIdx;           \/\/!< 0-based idx of param to convert$/;"	m	class:CRPCConvertParam	file:
paramName	src/rpc/client.cpp	/^    std::string paramName;  \/\/!< parameter name$/;"	m	class:CRPCConvertParam	file:
parameterSetup	src/qt/bitcoin.cpp	/^void BitcoinApplication::parameterSetup()$/;"	f	class:BitcoinApplication
params	src/rpc/server.h	/^    UniValue params;$/;"	m	class:JSONRPCRequest
paramsDummy	src/test/versionbits_tests.cpp	/^static const Consensus::Params paramsDummy = Consensus::Params();$/;"	v	file:
paranoid_checks	src/leveldb/include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
parent	src/dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBBatch
parent	src/dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBIterator
parent	src/memusage.h	/^    void* parent;$/;"	m	struct:memusage::stl_tree_node
parent	src/qt/addresstablemodel.cpp	/^    AddressTableModel *parent;$/;"	m	class:AddressTablePriv	file:
parent	src/qt/notificator.h	/^    QWidget *parent;$/;"	m	class:Notificator
parent	src/qt/transactiontablemodel.cpp	/^    TransactionTableModel *parent;$/;"	m	class:TransactionTablePriv	file:
parents	src/txmempool.h	/^        setEntries parents;$/;"	m	struct:CTxMemPool::TxLinks
parse	src/qt/bitcoinamountfield.cpp	/^    CAmount parse(const QString &text, bool *valid_out=nullptr) const$/;"	f	class:AmountSpinBox	file:
parse	src/qt/bitcoinunits.cpp	/^bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)$/;"	f	class:BitcoinUnits
parse	src/qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::parse(const QByteArray& data)$/;"	f	class:PaymentRequestPlus
parse	src/rpc/server.cpp	/^void JSONRPCRequest::parse(const UniValue& valRequest)$/;"	f	class:JSONRPCRequest
parse	test/functional/interface_http.py	/^import urllib.parse$/;"	i
parse	test/functional/interface_rest.py	/^import urllib.parse$/;"	i
parse	test/functional/rpc_users.py	/^import urllib.parse$/;"	i
parse	test/functional/test_framework/authproxy.py	/^import urllib.parse$/;"	i
parse	test/functional/test_framework/test_node.py	/^import urllib.parse$/;"	i
parseBitcoinURI	src/qt/guiutil.cpp	/^bool parseBitcoinURI(QString uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
parseBitcoinURI	src/qt/guiutil.cpp	/^bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
parseIntAndAdvance	src/tinyformat.h	/^inline int parseIntAndAdvance(const char*& c)$/;"	f	namespace:tinyformat::detail
parse_arguments	contrib/devtools/github-merge.py	/^def parse_arguments():$/;"	f
parse_b64der_cert	src/qt/test/paymentservertests.cpp	/^X509 *parse_b64der_cert(const char* cert_data)$/;"	f
parse_function_call_and_arguments	test/lint/lint-format-strings.py	/^def parse_function_call_and_arguments(function_name, function_call):$/;"	f
parse_function_calls	test/lint/lint-format-strings.py	/^def parse_function_calls(function_name, source_code):$/;"	f
parse_makefile	build_msvc/msvc-autogen.py	/^def parse_makefile(makefile):$/;"	f
parse_output	test/util/bitcoin-util-test.py	/^def parse_output(a, fmt):$/;"	f
parse_po	share/qt/extract_strings_qt.py	/^def parse_po(text):$/;"	f
parse_spec	contrib/seeds/generate-seeds.py	/^def parse_spec(s, defaultport):$/;"	f
parse_string	test/lint/check-rpc-mappings.py	/^def parse_string(s):$/;"	f
parse_string_content	test/lint/lint-format-strings.py	/^def parse_string_content(argument):$/;"	f
parse_test_list	test/fuzz/test_runner.py	/^def parse_test_list(makefile):$/;"	f
parse_year_range	contrib/devtools/copyright_header.py	/^def parse_year_range(year_range):$/;"	f
parseline	contrib/seeds/makeseeds.py	/^def parseline(line):$/;"	f
parser	contrib/filter-lcov.py	/^parser = argparse.ArgumentParser(description='Remove the coverage data from a tracefile for all files matching the pattern.')$/;"	v
partialBlock	src/net_processing.cpp	/^        std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  \/\/!< Optional, used for CMPCTBLOCK downloads$/;"	m	struct:__anon88::QueuedBlock	file:
partial_sigs	src/psbt.h	/^    std::map<CKeyID, SigPair> partial_sigs;$/;"	m	struct:PSBTInput
pass	src/policy/fees.h	/^    EstimatorBucket pass;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
passed	src/test/prevector_tests.cpp	/^    bool passed = true;$/;"	m	class:prevector_tester	file:
password	src/netbase.cpp	/^    std::string password;$/;"	m	struct:ProxyCredentials	file:
password_to_hmac	share/rpcauth/rpcauth.py	/^def password_to_hmac(salt, password):$/;"	f
pasteEntry	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)$/;"	f	class:SendCoinsDialog
path	contrib/linearize/linearize-data.py	/^import os.path$/;"	i
path	contrib/linearize/linearize-hashes.py	/^import os.path$/;"	i
path	src/httpserver.cpp	/^    std::string path;$/;"	m	class:final	file:
path	src/script/sign.h	/^    std::vector<uint32_t> path;$/;"	m	struct:KeyOriginInfo
pathAddr	src/addrdb.h	/^    fs::path pathAddr;$/;"	m	class:CAddrDB
pathCached	src/util/system.cpp	/^static fs::path pathCached;$/;"	v	file:
pathCachedNetSpecific	src/util/system.cpp	/^static fs::path pathCachedNetSpecific;$/;"	v	file:
pathHandlers	src/httpserver.cpp	/^std::vector<HTTPPathHandler> pathHandlers;$/;"	v
pathToCheck	src/qt/intro.h	/^    QString pathToCheck;$/;"	m	class:Intro
pathlib	test/functional/combine_logs.py	/^import pathlib$/;"	i
pattern	contrib/filter-lcov.py	/^pattern = args.pattern$/;"	v
payAmounts	src/qt/coincontroldialog.cpp	/^QList<CAmount> CoinControlDialog::payAmounts;$/;"	m	class:CoinControlDialog	file:
payAmounts	src/qt/coincontroldialog.h	/^    static QList<CAmount> payAmounts;$/;"	m	class:CoinControlDialog
paymentRequest	src/qt/paymentrequestplus.h	/^    payments::PaymentRequest paymentRequest;$/;"	m	class:PaymentRequestPlus
paymentRequest	src/qt/walletmodel.h	/^    PaymentRequestPlus paymentRequest;$/;"	m	class:SendCoinsRecipient
paymentServerTests	src/qt/test/paymentservertests.cpp	/^void PaymentServerTests::paymentServerTests()$/;"	f	class:PaymentServerTests
paymentrequest1_cert1_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest1_cert1_BASE64 =$/;"	v
paymentrequest1_cert2_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest1_cert2_BASE64 =$/;"	v
paymentrequest2_cert1_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest2_cert1_BASE64 =$/;"	v
paymentrequest2_cert2_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest2_cert2_BASE64 =$/;"	v
paymentrequest3_cert1_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest3_cert1_BASE64 =$/;"	v
paymentrequest3_cert2_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest3_cert2_BASE64 =$/;"	v
paymentrequest4_cert1_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest4_cert1_BASE64 =$/;"	v
paymentrequest4_cert2_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest4_cert2_BASE64 =$/;"	v
paymentrequest5_cert1_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest5_cert1_BASE64 =$/;"	v
paymentrequest5_cert2_BASE64	src/qt/test/paymentrequestdata.h	/^const char* paymentrequest5_cert2_BASE64 =$/;"	v
pblock	src/miner.h	/^    CBlock* pblock;$/;"	m	class:BlockAssembler
pblock	src/validation.cpp	/^    std::shared_ptr<const CBlock> pblock;$/;"	m	struct:PerBlockConnectTrace	file:
pblocktemplate	src/miner.h	/^    std::unique_ptr<CBlockTemplate> pblocktemplate;$/;"	m	class:BlockAssembler
pblocktree	src/validation.cpp	/^std::unique_ptr<CBlockTreeDB> pblocktree;$/;"	v
pchChecksum	src/protocol.h	/^    uint8_t pchChecksum[CHECKSUM_SIZE];$/;"	m	class:CMessageHeader
pchCommand	src/protocol.h	/^    char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchIPv4	contrib/seeds/generate-seeds.py	/^pchIPv4 = bytearray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff])$/;"	v
pchIPv4	src/netaddress.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	src/chainparams.h	/^    CMessageHeader::MessageStartChars pchMessageStart;$/;"	m	class:CChainParams
pchMessageStart	src/protocol.h	/^    char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	contrib/seeds/generate-seeds.py	/^pchOnionCat = bytearray([0xFD,0x87,0xD8,0x7E,0xEB,0x43])$/;"	v
pchOnionCat	src/netaddress.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pcoinsTip	src/validation.cpp	/^std::unique_ptr<CCoinsViewCache> pcoinsTip;$/;"	v
pcoinscatcher	src/init.cpp	/^static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;$/;"	v	file:
pcoinsdbview	src/validation.cpp	/^std::unique_ptr<CCoinsViewDB> pcoinsdbview;$/;"	v
pcontext	src/zmq/zmqnotificationinterface.h	/^    void *pcontext;$/;"	m	class:final
pcursor	src/txdb.h	/^    std::unique_ptr<CDBIterator> pcursor;$/;"	m	class:CCoinsViewDBCursor
pdb	src/dbwrapper.h	/^    leveldb::DB* pdb;$/;"	m	class:CDBWrapper
pdb	src/wallet/db.h	/^    Db* pdb;$/;"	m	class:BerkeleyBatch
pdb	test/functional/test_framework/test_framework.py	/^import pdb$/;"	i
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	doc/man/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	src/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	src/secp256k1/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	src/univalue/Makefile	/^pdfdir = ${docdir}$/;"	m
peerAddr	src/rpc/server.h	/^    std::string peerAddr;$/;"	m	class:JSONRPCRequest
peerLayoutAboutToChange	src/qt/rpcconsole.cpp	/^void RPCConsole::peerLayoutAboutToChange()$/;"	f	class:RPCConsole
peerLayoutChanged	src/qt/rpcconsole.cpp	/^void RPCConsole::peerLayoutChanged()$/;"	f	class:RPCConsole
peerLogic	src/init.cpp	/^std::unique_ptr<PeerLogicValidation> peerLogic;$/;"	v
peerSelected	src/qt/rpcconsole.cpp	/^void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelection &deselected)$/;"	f	class:RPCConsole
peerTableModel	src/qt/clientmodel.h	/^    PeerTableModel *peerTableModel;$/;"	m	class:ClientModel
peer_connect	test/functional/test_framework/mininode.py	/^    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):$/;"	m	class:P2PInterface
peer_connect	test/functional/test_framework/mininode.py	/^    def peer_connect(self, dstaddr, dstport, net="regtest"):$/;"	m	class:P2PConnection
peer_connect_timeout	src/init.cpp	/^int64_t peer_connect_timeout;$/;"	m	namespace:__anon123	file:
peer_disconnect	test/functional/test_framework/mininode.py	/^    def peer_disconnect(self):$/;"	m	class:P2PConnection
peersTableContextMenu	src/qt/rpcconsole.h	/^    QMenu *peersTableContextMenu = nullptr;$/;"	m	class:RPCConsole
pending_handle	src/leveldb/table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	src/leveldb/table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	src/leveldb/db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
penv	src/dbwrapper.h	/^    leveldb::Env* penv;$/;"	m	class:CDBWrapper
period	src/versionbits.h	/^    int period;$/;"	m	struct:BIP9Stats
phase	src/leveldb/db/c_test.c	/^const char* phase = "";$/;"	v
phashBlock	src/chain.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
pickDataDirectory	src/qt/intro.cpp	/^bool Intro::pickDataDirectory(interfaces::Node& node)$/;"	f	class:Intro
pindex	src/net_processing.cpp	/^        const CBlockIndex* pindex;                               \/\/!< Optional.$/;"	m	struct:__anon88::QueuedBlock	file:
pindex	src/validation.cpp	/^    CBlockIndex* pindex = nullptr;$/;"	m	struct:PerBlockConnectTrace	file:
pindexBestForkBase	src/validation.cpp	/^CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;$/;"	v
pindexBestForkTip	src/validation.cpp	/^CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;$/;"	v
pindexBestHeader	src/validation.cpp	/^CBlockIndex *pindexBestHeader = nullptr;$/;"	v
pindexBestHeaderSent	src/net_processing.cpp	/^    const CBlockIndex *pindexBestHeaderSent;$/;"	m	struct:__anon89::CNodeState	file:
pindexBestInvalid	src/validation.cpp	/^    CBlockIndex *&pindexBestInvalid = g_chainstate.pindexBestInvalid;$/;"	m	namespace:__anon50	file:
pindexBestInvalid	src/validation.cpp	/^    CBlockIndex *pindexBestInvalid = nullptr;$/;"	m	class:CChainState	file:
pindexBestKnownBlock	src/net_processing.cpp	/^    const CBlockIndex *pindexBestKnownBlock;$/;"	m	struct:__anon89::CNodeState	file:
pindexLastCommonBlock	src/net_processing.cpp	/^    const CBlockIndex *pindexLastCommonBlock;$/;"	m	struct:__anon89::CNodeState	file:
ping	src/rpc/net.cpp	/^static UniValue ping(const JSONRPCRequest& request)$/;"	f	file:
pip3	contrib/devtools/optimize-pngs.py	/^from PIL import Image  # pip3 install Pillow$/;"	i
piter	src/dbwrapper.h	/^    leveldb::Iterator *piter;$/;"	m	class:CDBIterator
pixmap	src/qt/splashscreen.h	/^    QPixmap pixmap;$/;"	m	class:SplashScreen
pkgconfig_DATA	Makefile	/^pkgconfig_DATA = libbitcoinconsensus.pc$/;"	m
pkgconfig_DATA	src/secp256k1/Makefile	/^pkgconfig_DATA = libsecp256k1.pc$/;"	m
pkgconfig_DATA	src/univalue/Makefile	/^pkgconfig_DATA = pc\/libunivalue.pc$/;"	m
pkgconfigdir	Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgconfigdir	src/secp256k1/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgconfigdir	src/univalue/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/bitcoin$/;"	m
pkgdatadir	doc/man/Makefile	/^pkgdatadir = $(datadir)\/bitcoin$/;"	m
pkgdatadir	src/Makefile	/^pkgdatadir = $(datadir)\/bitcoin$/;"	m
pkgdatadir	src/secp256k1/Makefile	/^pkgdatadir = $(datadir)\/libsecp256k1$/;"	m
pkgdatadir	src/univalue/Makefile	/^pkgdatadir = $(datadir)\/univalue$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/bitcoin$/;"	m
pkgincludedir	doc/man/Makefile	/^pkgincludedir = $(includedir)\/bitcoin$/;"	m
pkgincludedir	src/Makefile	/^pkgincludedir = $(includedir)\/bitcoin$/;"	m
pkgincludedir	src/secp256k1/Makefile	/^pkgincludedir = $(includedir)\/libsecp256k1$/;"	m
pkgincludedir	src/univalue/Makefile	/^pkgincludedir = $(includedir)\/univalue$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/bitcoin$/;"	m
pkglibdir	doc/man/Makefile	/^pkglibdir = $(libdir)\/bitcoin$/;"	m
pkglibdir	src/Makefile	/^pkglibdir = $(libdir)\/bitcoin$/;"	m
pkglibdir	src/secp256k1/Makefile	/^pkglibdir = $(libdir)\/libsecp256k1$/;"	m
pkglibdir	src/univalue/Makefile	/^pkglibdir = $(libdir)\/univalue$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/bitcoin$/;"	m
pkglibexecdir	doc/man/Makefile	/^pkglibexecdir = $(libexecdir)\/bitcoin$/;"	m
pkglibexecdir	src/Makefile	/^pkglibexecdir = $(libexecdir)\/bitcoin$/;"	m
pkglibexecdir	src/secp256k1/Makefile	/^pkglibexecdir = $(libexecdir)\/libsecp256k1$/;"	m
pkglibexecdir	src/univalue/Makefile	/^pkglibexecdir = $(libexecdir)\/univalue$/;"	m
plain	src/crypto/ctaes/test.c	/^    const char* plain;$/;"	m	struct:__anon44	file:
platformId	src/qt/platformstyle.cpp	/^    const char *platformId;$/;"	m	struct:__anon66	file:
platformStyle	src/qt/bitcoin.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:BitcoinApplication
platformStyle	src/qt/bitcoingui.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:BitcoinGUI
platformStyle	src/qt/coincontroldialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:CoinControlDialog
platformStyle	src/qt/overviewpage.cpp	/^    const PlatformStyle *platformStyle;$/;"	m	class:TxViewDelegate	file:
platformStyle	src/qt/receivecoinsdialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:ReceiveCoinsDialog
platformStyle	src/qt/rpcconsole.h	/^    const PlatformStyle* const platformStyle;$/;"	m	class:RPCConsole
platformStyle	src/qt/sendcoinsdialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SendCoinsDialog
platformStyle	src/qt/sendcoinsentry.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SendCoinsEntry
platformStyle	src/qt/signverifymessagedialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SignVerifyMessageDialog
platformStyle	src/qt/transactiontablemodel.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:TransactionTableModel
platformStyle	src/qt/walletframe.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:WalletFrame
platformStyle	src/qt/walletview.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:WalletView
platform_styles	src/qt/platformstyle.cpp	/^} platform_styles[] = {$/;"	v	typeref:struct:__anon66	file:
platform_styles_count	src/qt/platformstyle.cpp	/^static const unsigned platform_styles_count = sizeof(platform_styles)\/sizeof(*platform_styles);$/;"	v	file:
please_keep	src/cuckoocache.h	/^    inline void please_keep(uint32_t n) const$/;"	f	class:CuckooCache::cache
pn	src/arith_uint256.h	/^    uint32_t pn[WIDTH];$/;"	m	class:base_uint
pnSeed6_main	src/chainparamsseeds.h	/^static SeedSpec6 pnSeed6_main[] = {$/;"	v
pnSeed6_test	src/chainparamsseeds.h	/^static SeedSpec6 pnSeed6_test[] = {$/;"	v
pngcrush	contrib/devtools/optimize-pngs.py	/^pngcrush = 'pngcrush'$/;"	v
point	src/secp256k1/src/bench_ecdh.c	/^    secp256k1_pubkey point;$/;"	m	struct:__anon108	file:
pointer	src/prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::iterator
pointer	src/prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::reverse_iterator
pointer	src/prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_iterator
pointer	src/prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_reverse_iterator
pointer	src/prevector.h	/^    typedef value_type* pointer;$/;"	t	class:prevector
pointer	src/support/allocators/secure.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pointer	src/support/allocators/zeroafterfree.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:zero_after_free_allocator
policy_	src/leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	src/leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	src/leveldb/table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest	file:
policy_	src/leveldb/util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest	file:
pollBalanceChanged	src/qt/walletmodel.cpp	/^void WalletModel::pollBalanceChanged()$/;"	f	class:WalletModel
pollShutdownTimer	src/qt/bitcoin.h	/^    QTimer *pollShutdownTimer;$/;"	m	class:BitcoinApplication
pollTimer	src/qt/clientmodel.h	/^    QTimer *pollTimer;$/;"	m	class:ClientModel
pollTimer	src/qt/walletmodel.h	/^    QTimer *pollTimer;$/;"	m	class:WalletModel
poly1305_auth	src/crypto/poly1305.cpp	/^void poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m, size_t inlen, const unsigned char key[POLY1305_KEYLEN]) {$/;"	f
pool	src/blockencodings.h	/^    CTxMemPool* pool;$/;"	m	class:PartiallyDownloadedBlock
pool	src/validation.cpp	/^    CTxMemPool &pool;$/;"	m	class:ConnectTrace	file:
pop_back	src/prevector.h	/^    void pop_back() {$/;"	f	class:prevector
pop_back	src/test/prevector_tests.cpp	/^    void pop_back() {$/;"	f	class:prevector_tester
pop_lock	src/sync.cpp	/^static void pop_lock()$/;"	f	file:
popstack	src/script/interpreter.cpp	/^static inline void popstack(std::vector<valtype>& stack)$/;"	f	file:
port	contrib/zmq/zmq_sub.py	/^port = 28332$/;"	v
port	src/chainparams.h	/^    uint16_t port;$/;"	m	struct:SeedSpec6
port	src/leveldb/port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	src/leveldb/port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	src/leveldb/port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	src/leveldb/port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
port	src/leveldb/port/port_posix_sse.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	src/leveldb/port/port_win.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	src/leveldb/port/port_win.h	/^namespace port {$/;"	n	namespace:leveldb
port	src/netaddress.h	/^        uint16_t port; \/\/ host order$/;"	m	class:CService
port	src/qt/optionsmodel.cpp	/^    QString port;$/;"	m	struct:ProxySetting	file:
pos	src/index/blockfilterindex.cpp	/^    FlatFilePos pos;$/;"	m	struct:__anon120::DBVal	file:
pos_	src/leveldb/db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon19::RandomGenerator	file:
pos_	src/leveldb/db/fault_injection_test.cc	/^  ssize_t pos_;$/;"	m	struct:leveldb::__anon20::FileState	file:
pos_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon32::RandomGenerator	file:
pos_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon33::RandomGenerator	file:
pos_	src/leveldb/helpers/memenv/memenv.cc	/^  uint64_t pos_;$/;"	m	class:leveldb::__anon35::SequentialFileImpl	file:
pos_at_last_flush_	src/leveldb/db/fault_injection_test.cc	/^  ssize_t pos_at_last_flush_;$/;"	m	struct:leveldb::__anon20::FileState	file:
pos_at_last_sync_	src/leveldb/db/fault_injection_test.cc	/^  ssize_t pos_at_last_sync_;$/;"	m	struct:leveldb::__anon20::FileState	file:
possible	src/versionbits.h	/^    bool possible;$/;"	m	struct:BIP9Stats
post	src/sync.h	/^    void post()$/;"	f	class:CSemaphore
postInitProcess	src/wallet/wallet.cpp	/^void CWallet::postInitProcess()$/;"	f	class:CWallet
postprocess_translations	contrib/devtools/update-translations.py	/^def postprocess_translations(reduce_diff_hacks=False):$/;"	f
potential_deadlock_detected	src/sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
powLimit	src/consensus/params.h	/^    uint256 powLimit;$/;"	m	struct:Consensus::Params
pprev	src/chain.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
pprint	test/util/bitcoin-util-test.py	/^import pprint$/;"	i
pqueue	src/checkqueue.h	/^    CCheckQueue<T> * const pqueue;$/;"	m	class:CCheckQueueControl
pre_g	src/secp256k1/src/ecmult.h	/^    secp256k1_ge_storage (*pre_g)[];    \/* odd multiples of the generator *\/$/;"	m	struct:__anon101
pre_g_128	src/secp256k1/src/ecmult.h	/^    secp256k1_ge_storage (*pre_g_128)[]; \/* odd multiples of 2^128*generator *\/$/;"	m	struct:__anon101
pre_vector	src/test/prevector_tests.cpp	/^    pretype pre_vector;$/;"	m	class:prevector_tester	file:
pre_vector_alt	src/test/prevector_tests.cpp	/^    pretype pre_vector_alt;$/;"	m	class:prevector_tester	file:
prec	src/secp256k1/src/ecmult_gen.h	/^    secp256k1_ge_storage (*prec)[64][16]; \/* prec[j][i] = 16^j * i * G + U_i *\/$/;"	m	struct:__anon100
preciousblock	src/rpc/blockchain.cpp	/^static UniValue preciousblock(const JSONRPCRequest& request)$/;"	f	file:
precomputed_nonce_function	src/secp256k1/src/tests.c	/^static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
prefer_evict	src/net.cpp	/^    bool prefer_evict;$/;"	m	struct:NodeEvictionCandidate	file:
prefilled_count	src/blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
prefilledtxn	src/blockencodings.h	/^    std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:CBlockHeaderAndShortTxIDs
prefilledtxn	src/test/blockencodings_tests.cpp	/^    std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:TestHeaderAndShortIDs	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	doc/man/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	src/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	src/httpserver.cpp	/^    std::string prefix;$/;"	m	struct:HTTPPathHandler	file:
prefix	src/rest.cpp	/^    const char* prefix;$/;"	m	struct:__anon2	file:
prefix	src/secp256k1/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	src/univalue/Makefile	/^prefix = \/usr\/local$/;"	m
prepareTransaction	src/qt/walletmodel.cpp	/^WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)$/;"	f	class:WalletModel
pretype	src/test/prevector_tests.cpp	/^    typedef prevector<N, T> pretype;$/;"	t	class:prevector_tester	file:
prev	src/leveldb/util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
prevBlocks	src/qt/bitcoingui.h	/^    int prevBlocks = 0;$/;"	m	class:BitcoinGUI
prev_	src/leveldb/db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	src/leveldb/db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	src/leveldb/db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	src/leveldb/db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
prevector	src/prevector.h	/^    explicit prevector(size_type n) {$/;"	f	class:prevector
prevector	src/prevector.h	/^    explicit prevector(size_type n, const T& val) {$/;"	f	class:prevector
prevector	src/prevector.h	/^    prevector() {}$/;"	f	class:prevector
prevector	src/prevector.h	/^    prevector(InputIterator first, InputIterator last) {$/;"	f	class:prevector
prevector	src/prevector.h	/^    prevector(const prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
prevector	src/prevector.h	/^    prevector(prevector<N, T, Size, Diff>&& other) {$/;"	f	class:prevector
prevector	src/prevector.h	/^class prevector {$/;"	c
prevector_tester	src/test/prevector_tests.cpp	/^    prevector_tester() {$/;"	f	class:prevector_tester
prevector_tester	src/test/prevector_tests.cpp	/^class prevector_tester {$/;"	c	file:
prevout	src/primitives/transaction.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
printFormatStringLiteral	src/tinyformat.h	/^inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat::detail
printToConsole	src/qt/utilitydialog.cpp	/^void HelpMessageDialog::printToConsole()$/;"	f	class:HelpMessageDialog
print_file_action_message	contrib/devtools/copyright_header.py	/^def print_file_action_message(filename, action):$/;"	f
print_filenames	contrib/devtools/copyright_header.py	/^def print_filenames(filenames, verbose):$/;"	f
print_logs_html	test/functional/combine_logs.py	/^def print_logs_html(log_events):$/;"	f
print_logs_plain	test/functional/combine_logs.py	/^def print_logs_plain(log_events, colors):$/;"	f
print_merge_details	contrib/devtools/github-merge.py	/^def print_merge_details(pull, title, branch, base_branch, head_branch):$/;"	f
print_node_warnings	test/functional/combine_logs.py	/^def print_node_warnings(tmp_dir, colors):$/;"	f
print_number	src/crypto/ctaes/bench.c	/^static void print_number(double x) {$/;"	f	file:
print_number	src/secp256k1/src/bench.h	/^void print_number(double x) {$/;"	f
print_report	contrib/devtools/copyright_header.py	/^def print_report(file_infos, verbose):$/;"	f
print_results	test/functional/test_runner.py	/^def print_results(test_results, max_len_name, runtime):$/;"	f
print_usage	build-aux/test-driver	/^print_usage ()$/;"	f
print_usage	contrib/devtools/test_deterministic_coverage.sh	/^print_usage() {$/;"	f
print_usage	src/secp256k1/build-aux/test-driver	/^print_usage ()$/;"	f
print_usage	src/univalue/build-aux/test-driver	/^print_usage ()$/;"	f
printchunk	src/support/lockedpool.cpp	/^static void printchunk(char* base, size_t sz, bool used) {$/;"	f	file:
printf	src/tinyformat.h	/^inline void printf(const char* fmt)$/;"	f	namespace:tinyformat
printf	src/tinyformat.h	/^void printf(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
printfln	src/tinyformat.h	/^inline void printfln(const char* fmt)$/;"	f	namespace:tinyformat
printfln	src/tinyformat.h	/^void printfln(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
prioritisetransaction	src/rpc/mining.cpp	/^static UniValue prioritisetransaction(const JSONRPCRequest& request)$/;"	f	file:
priv	src/qt/addresstablemodel.h	/^    AddressTablePriv *priv = nullptr;$/;"	m	class:AddressTableModel
priv	src/qt/bantablemodel.h	/^    std::unique_ptr<BanTablePriv> priv;$/;"	m	class:BanTableModel
priv	src/qt/peertablemodel.h	/^    std::unique_ptr<PeerTablePriv> priv;$/;"	m	class:PeerTableModel
priv	src/qt/transactiontablemodel.h	/^    TransactionTablePriv *priv;$/;"	m	class:TransactionTableModel
privKeyTweakAdd	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] privKeyTweakAdd(byte[] privkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
privKeyTweakMul	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] privKeyTweakMul(byte[] privkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
private	test/functional/wallet_createwallet.py	/^        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')$/;"	i
private	test/functional/wallet_createwallet.py	/^        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh address from descriptor and private key")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with private key")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key and with watchonly")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
private	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
privateKeysDisabled	src/qt/walletmodel.cpp	/^bool WalletModel::privateKeysDisabled() const$/;"	f	class:WalletModel
private_key	src/torcontrol.cpp	/^    std::string private_key;$/;"	m	class:TorController	file:
proc	src/leveldb/util/env_win.cc	/^    ScheduleProc proc;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
processBlock	src/policy/fees.cpp	/^void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,$/;"	f	class:CBlockPolicyEstimator
processBlockTx	src/policy/fees.cpp	/^bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)$/;"	f	class:CBlockPolicyEstimator
processNewTransaction	src/qt/walletview.cpp	/^void WalletView::processNewTransaction(const QModelIndex& parent, int start, int \/*end*\/)$/;"	f	class:WalletView
processPaymentRequest	src/qt/paymentserver.cpp	/^bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient)$/;"	f	class:PaymentServer
processSendCoinsReturn	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg)$/;"	f	class:SendCoinsDialog
processTransaction	src/policy/fees.cpp	/^void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)$/;"	f	class:CBlockPolicyEstimator
process_commands	test/lint/check-rpc-mappings.py	/^def process_commands(fname):$/;"	f
process_mapping	test/lint/check-rpc-mappings.py	/^def process_mapping(fname):$/;"	f
process_nodes	contrib/seeds/generate-seeds.py	/^def process_nodes(g, f, structname, defaultport):$/;"	f
processingQueuedTransactions	src/qt/transactiontablemodel.h	/^    bool processingQueuedTransactions() const { return fProcessingQueuedTransactions; }$/;"	f	class:TransactionTableModel
product	test/functional/feature_csv_activation.py	/^from itertools import product$/;"	i
profile_with_perf	test/functional/test_framework/test_node.py	/^    def profile_with_perf(self, profile_name):$/;"	m	class:TestNode
program	src/script/standard.h	/^    unsigned char program[40];$/;"	m	struct:WitnessUnknown
programName	src/qt/notificator.h	/^    QString programName;$/;"	m	class:Notificator
program_details	build-aux/missing	/^program_details ()$/;"	f
program_details	src/secp256k1/build-aux/missing	/^program_details ()$/;"	f
program_details	src/univalue/build-aux/missing	/^program_details ()$/;"	f
program_to_witness	test/functional/test_framework/address.py	/^def program_to_witness(version, program, main = False):$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	doc/man/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	src/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	src/secp256k1/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	src/univalue/Makefile	/^program_transform_name = s,x,x,$/;"	m
progressBar	src/qt/bitcoingui.h	/^    GUIUtil::ClickableProgressBar* progressBar = nullptr;$/;"	m	class:BitcoinGUI
progressBarLabel	src/qt/bitcoingui.h	/^    QLabel* progressBarLabel = nullptr;$/;"	m	class:BitcoinGUI
progressDialog	src/qt/bitcoingui.h	/^    QProgressDialog* progressDialog = nullptr;$/;"	m	class:BitcoinGUI
progressDialog	src/qt/walletview.h	/^    QProgressDialog *progressDialog;$/;"	m	class:WalletView
protocolinfo_cb	src/torcontrol.cpp	/^void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	src/secp256k1/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	src/univalue/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxy	src/netbase.h	/^    CService proxy;$/;"	m	class:proxyType
proxyModel	src/qt/addressbookpage.h	/^    AddressBookSortFilterProxyModel *proxyModel;$/;"	m	class:AddressBookPage
proxyType	src/netbase.h	/^    explicit proxyType(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}$/;"	f	class:proxyType
proxyType	src/netbase.h	/^    proxyType(): randomize_credentials(false) {}$/;"	f	class:proxyType
proxyType	src/netbase.h	/^class proxyType$/;"	c
prune	test/functional/feature_pruning.py	/^        def prune(index, expected_ret=None):$/;"	f	function:PruneTest.manual_test
pruneblockchain	src/rpc/blockchain.cpp	/^static UniValue pruneblockchain(const JSONRPCRequest& request)$/;"	f	file:
prv	src/test/bip32_tests.cpp	/^    std::string prv;$/;"	m	struct:TestDerivation	file:
psdir	Makefile	/^psdir = ${docdir}$/;"	m
psdir	doc/man/Makefile	/^psdir = ${docdir}$/;"	m
psdir	src/Makefile	/^psdir = ${docdir}$/;"	m
psdir	src/secp256k1/Makefile	/^psdir = ${docdir}$/;"	m
psdir	src/univalue/Makefile	/^psdir = ${docdir}$/;"	m
pskip	src/chain.h	/^    CBlockIndex* pskip;$/;"	m	class:CBlockIndex
psocket	src/zmq/zmqabstractnotifier.h	/^    void *psocket;$/;"	m	class:CZMQAbstractNotifier
pszBase58	src/base58.cpp	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v	file:
ptr	src/memusage.h	/^    void* ptr;$/;"	m	struct:memusage::unordered_node
ptr	src/prevector.h	/^        T* ptr;$/;"	m	class:prevector::iterator
ptr	src/prevector.h	/^        T* ptr;$/;"	m	class:prevector::reverse_iterator
ptr	src/prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_iterator
ptr	src/prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_reverse_iterator
ptxTo	src/validation.h	/^    const CTransaction *ptxTo;$/;"	m	class:CScriptCheck
pub	src/test/bip32_tests.cpp	/^    std::string pub;$/;"	m	struct:TestDerivation	file:
pubKeyTweakAdd	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] pubKeyTweakAdd(byte[] pubkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
pubKeyTweakMul	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] pubKeyTweakMul(byte[] pubkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
pubkey	src/pubkey.h	/^    CPubKey pubkey;$/;"	m	struct:CExtPubKey
pubkey	src/secp256k1/src/bench_verify.c	/^    unsigned char pubkey[33];$/;"	m	struct:__anon106	file:
pubkey0	src/test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon58::KeyData	file:
pubkey0C	src/test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon58::KeyData	file:
pubkey0H	src/test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon58::KeyData	file:
pubkey1	src/test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon58::KeyData	file:
pubkey1C	src/test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon58::KeyData	file:
pubkey2	src/test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon58::KeyData	file:
pubkey2C	src/test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon58::KeyData	file:
pubkey_prefix	contrib/testgen/gen_key_io_test_vectors.py	/^pubkey_prefix = (OP_DUP, OP_HASH160, 20)$/;"	v
pubkey_suffix	contrib/testgen/gen_key_io_test_vectors.py	/^pubkey_suffix = (OP_EQUALVERIFY, OP_CHECKSIG)$/;"	v
pubkeylen	src/secp256k1/src/bench_verify.c	/^    size_t pubkeylen;$/;"	m	struct:__anon106	file:
pubkeys	src/script/sign.h	/^    std::map<CKeyID, CPubKey> pubkeys;$/;"	m	struct:final
public	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
public	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
public	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with public key")$/;"	i
public	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with public key")$/;"	i
public	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
public	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
purpose	src/interfaces/wallet.h	/^    std::string purpose;$/;"	m	struct:interfaces::WalletAddress
purpose	src/wallet/wallet.h	/^    std::string purpose;$/;"	m	class:CAddressBookData
purposeForAddress	src/qt/addresstablemodel.cpp	/^QString AddressTableModel::purposeForAddress(const QString &address) const$/;"	f	class:AddressTableModel
push	src/test/script_tests.cpp	/^    std::vector<unsigned char> push;$/;"	m	class:__anon58::TestBuilder	file:
pushKV	src/univalue/include/univalue.h	/^    bool pushKV(const std::string& key, bool val_) {$/;"	f	class:UniValue
pushKV	src/univalue/include/univalue.h	/^    bool pushKV(const std::string& key, const char *val_) {$/;"	f	class:UniValue
pushKV	src/univalue/include/univalue.h	/^    bool pushKV(const std::string& key, const std::string& val_) {$/;"	f	class:UniValue
pushKV	src/univalue/include/univalue.h	/^    bool pushKV(const std::string& key, double val_) {$/;"	f	class:UniValue
pushKV	src/univalue/include/univalue.h	/^    bool pushKV(const std::string& key, int val_) {$/;"	f	class:UniValue
pushKV	src/univalue/include/univalue.h	/^    bool pushKV(const std::string& key, int64_t val_) {$/;"	f	class:UniValue
pushKV	src/univalue/include/univalue.h	/^    bool pushKV(const std::string& key, uint64_t val_) {$/;"	f	class:UniValue
pushKV	src/univalue/lib/univalue.cpp	/^bool UniValue::pushKV(const std::string& key, const UniValue& val_)$/;"	f	class:UniValue
pushKVs	src/univalue/lib/univalue.cpp	/^bool UniValue::pushKVs(const UniValue& obj)$/;"	f	class:UniValue
push_back	src/prevector.h	/^    void push_back(const T& value) {$/;"	f	class:prevector
push_back	src/test/prevector_tests.cpp	/^    void push_back(const T& value) {$/;"	f	class:prevector_tester
push_back	src/univalue/include/univalue.h	/^    bool push_back(const char *val_) {$/;"	f	class:UniValue
push_back	src/univalue/include/univalue.h	/^    bool push_back(const std::string& val_) {$/;"	f	class:UniValue
push_back	src/univalue/include/univalue.h	/^    bool push_back(double val_) {$/;"	f	class:UniValue
push_back	src/univalue/include/univalue.h	/^    bool push_back(int val_) {$/;"	f	class:UniValue
push_back	src/univalue/include/univalue.h	/^    bool push_back(int64_t val_) {$/;"	f	class:UniValue
push_back	src/univalue/include/univalue.h	/^    bool push_back(uint64_t val_) {$/;"	f	class:UniValue
push_back	src/univalue/lib/univalue.cpp	/^bool UniValue::push_back(const UniValue& val_)$/;"	f	class:UniValue
push_back	src/univalue/lib/univalue_utffilter.h	/^    void push_back(unsigned char ch)$/;"	f	class:JSONUTF8StringFilter
push_backV	src/univalue/lib/univalue.cpp	/^bool UniValue::push_backV(const std::vector<UniValue>& vec)$/;"	f	class:UniValue
push_back_u	src/univalue/lib/univalue_utffilter.h	/^    void push_back_u(unsigned int codepoint_)$/;"	f	class:JSONUTF8StringFilter
push_int64	src/script/script.h	/^    CScript& push_int64(int64_t n)$/;"	f	class:CScript
push_lock	src/sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation)$/;"	f	file:
pwallet	src/wallet/rpcwallet.cpp	/^    CWallet * const pwallet;$/;"	m	class:DescribeWalletAddressVisitor	file:
pwallet	src/wallet/wallet.h	/^    CWallet* pwallet;$/;"	m	class:CReserveKey
pwallet	src/wallet/wallet.h	/^    const CWallet* pwallet;$/;"	m	class:CWalletTx
qstringToBoostPath	src/qt/guiutil.cpp	/^fs::path qstringToBoostPath(const QString &path)$/;"	f	namespace:GUIUtil
qt_bitcoin_qt_LINK	src/Makefile	/^qt_bitcoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
qt_bitcoin_qt_OBJECTS	src/Makefile	/^qt_bitcoin_qt_OBJECTS = $(am_qt_bitcoin_qt_OBJECTS)$/;"	m
qt_darwin_packages	depends/packages/packages.mk	/^qt_darwin_packages=qt$/;"	m
qt_libbitcoinqt_a_AR	src/Makefile	/^qt_libbitcoinqt_a_AR = $(AR) $(ARFLAGS)$/;"	m
qt_libbitcoinqt_a_LIBADD	src/Makefile	/^qt_libbitcoinqt_a_LIBADD =$/;"	m
qt_libbitcoinqt_a_OBJECTS	src/Makefile	/^qt_libbitcoinqt_a_OBJECTS = $(am_qt_libbitcoinqt_a_OBJECTS) \\$/;"	m
qt_linux_packages	depends/packages/packages.mk	/^qt_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans$/;"	m
qt_mingw32_packages	depends/packages/packages.mk	/^qt_mingw32_packages=qt$/;"	m
qt_native_packages	depends/packages/packages.mk	/^qt_native_packages = native_protobuf$/;"	m
qt_packages	depends/packages/packages.mk	/^qt_packages = qrencode protobuf zlib$/;"	m
qt_test_test_bitcoin_qt_LINK	src/Makefile	/^qt_test_test_bitcoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
qt_test_test_bitcoin_qt_OBJECTS	src/Makefile	/^qt_test_test_bitcoin_qt_OBJECTS =  \\$/;"	m
queryHashes	src/txmempool.cpp	/^void CTxMemPool::queryHashes(std::vector<uint256>& vtxid) const$/;"	f	class:CTxMemPool
queue	src/checkqueue.h	/^    std::vector<T> queue;$/;"	m	class:CCheckQueue
queue	src/httpserver.cpp	/^    std::deque<std::unique_ptr<WorkItem>> queue;$/;"	m	class:WorkQueue	file:
queue	test/functional/test_framework/socks5.py	/^import queue$/;"	i
queue_	src/leveldb/util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
queuedTx	src/txmempool.h	/^    indexed_disconnected_transactions queuedTx;$/;"	m	struct:DisconnectedBlockTransactions
quitAction	src/qt/bitcoingui.h	/^    QAction* quitAction = nullptr;$/;"	m	class:BitcoinGUI
quit_flag_	src/leveldb/db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState	file:
r	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static final Lock r = rwl.readLock();$/;"	f	class:NativeSecp256k1	file:
r_from_k	src/secp256k1/src/tests_exhaustive.c	/^void r_from_k(secp256k1_scalar *r, const secp256k1_ge *group, int k) {$/;"	f
radioListMode	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::radioListMode(bool checked)$/;"	f	class:CoinControlDialog
radioTreeMode	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::radioTreeMode(bool checked)$/;"	f	class:CoinControlDialog
rand	src/leveldb/db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon19::ThreadState	file:
rand_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_cache	src/test/prevector_tests.cpp	/^    FastRandomContext rand_cache;$/;"	m	class:prevector_tester	file:
rand_seed	src/test/prevector_tests.cpp	/^    uint256 rand_seed;$/;"	m	class:prevector_tester	file:
randbool	contrib/testgen/gen_key_io_test_vectors.py	/^def randbool(p = 0.5):$/;"	f
randbytes	src/random.cpp	/^std::vector<unsigned char> FastRandomContext::randbytes(size_t len)$/;"	f	class:FastRandomContext
randint	test/functional/wallet_backup.py	/^from random import randint$/;"	i
random	contrib/testgen/gen_key_io_test_vectors.py	/^import random$/;"	i
random	test/functional/feature_bip68_sequence.py	/^            import random$/;"	i
random	test/functional/feature_dbcrash.py	/^import random$/;"	i
random	test/functional/feature_fee_estimation.py	/^import random$/;"	i
random	test/functional/p2p_compactblocks.py	/^import random$/;"	i
random	test/functional/p2p_segwit.py	/^import random$/;"	i
random	test/functional/test_framework/key.py	/^import random$/;"	i
random	test/functional/test_framework/messages.py	/^import random$/;"	i
random	test/functional/test_framework/test_framework.py	/^import random$/;"	i
random	test/functional/test_framework/util.py	/^import random$/;"	i
random_ber_signature	src/secp256k1/src/tests.c	/^static void random_ber_signature(unsigned char *sig, size_t *len, int* certainly_der, int* certainly_not_der) {$/;"	f	file:
random_fe	src/secp256k1/src/tests.c	/^void random_fe(secp256k1_fe *x) {$/;"	f
random_fe	src/secp256k1/src/tests_exhaustive.c	/^void random_fe(secp256k1_fe *x) {$/;"	f
random_fe_non_square	src/secp256k1/src/tests.c	/^void random_fe_non_square(secp256k1_fe *ns) {$/;"	f
random_fe_non_zero	src/secp256k1/src/tests.c	/^void random_fe_non_zero(secp256k1_fe *nz) {$/;"	f
random_fe_test	src/secp256k1/src/tests.c	/^void random_fe_test(secp256k1_fe *x) {$/;"	f
random_field_element_magnitude	src/secp256k1/src/tests.c	/^void random_field_element_magnitude(secp256k1_fe *fe) {$/;"	f
random_field_element_test	src/secp256k1/src/tests.c	/^void random_field_element_test(secp256k1_fe *fe) {$/;"	f
random_group_element_jacobian_test	src/secp256k1/src/tests.c	/^void random_group_element_jacobian_test(secp256k1_gej *gej, const secp256k1_ge *ge) {$/;"	f
random_group_element_test	src/secp256k1/src/tests.c	/^void random_group_element_test(secp256k1_ge *ge) {$/;"	f
random_num_negate	src/secp256k1/src/tests.c	/^void random_num_negate(secp256k1_num *num) {$/;"	f
random_num_order	src/secp256k1/src/tests.c	/^void random_num_order(secp256k1_num *num) {$/;"	f
random_num_order_test	src/secp256k1/src/tests.c	/^void random_num_order_test(secp256k1_num *num) {$/;"	f
random_read_counter_	src/leveldb/db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv	file:
random_scalar_order	src/secp256k1/src/tests.c	/^void random_scalar_order(secp256k1_scalar *num) {$/;"	f
random_scalar_order_test	src/secp256k1/src/tests.c	/^void random_scalar_order_test(secp256k1_scalar *num) {$/;"	f
random_sign	src/secp256k1/src/tests.c	/^void random_sign(secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *key, const secp256k1_scalar *msg, int *recid) {$/;"	f
random_transaction	test/functional/mining_getblocktemplate_longpoll.py	/^from test_framework.util import get_rpc_proxy, random_transaction$/;"	i
random_transaction	test/functional/test_framework/util.py	/^def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):$/;"	f
randomize	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static synchronized boolean randomize(byte[] seed) throws AssertFailException{$/;"	m	class:NativeSecp256k1
randomize_credentials	src/netbase.h	/^    bool randomize_credentials;$/;"	m	class:proxyType
range	test/functional/wallet_importmulti.py	/^        self.log.info("Ranged descriptor import should fail without a specified range")$/;"	i
ranged	test/functional/wallet_importmulti.py	/^        self.log.info("Should import the ranged descriptor with specified range as solvable")$/;"	i
rapidcheck_packages	depends/packages/packages.mk	/^rapidcheck_packages = rapidcheck$/;"	m
raw_iter	test/functional/test_framework/script.py	/^    def raw_iter(self):$/;"	m	class:CScript
rbegin	src/prevector.h	/^    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rbegin	src/prevector.h	/^    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rc	src/test/gen/crypto_gen.h	/^namespace rc$/;"	n
rdbuf	src/streams.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
re	build_msvc/msvc-autogen.py	/^import re$/;"	i
re	contrib/devtools/circular-dependencies.py	/^import re$/;"	i
re	contrib/devtools/clang-format-diff.py	/^import re$/;"	i
re	contrib/devtools/copyright_header.py	/^import re$/;"	i
re	contrib/devtools/symbol-check.py	/^import re$/;"	i
re	contrib/devtools/update-translations.py	/^import re$/;"	i
re	contrib/linearize/linearize-data.py	/^import re$/;"	i
re	contrib/linearize/linearize-hashes.py	/^import re$/;"	i
re	contrib/seeds/generate-seeds.py	/^import re$/;"	i
re	contrib/seeds/makeseeds.py	/^import re$/;"	i
re	test/functional/combine_logs.py	/^import re$/;"	i
re	test/functional/feature_uacomment.py	/^import re$/;"	i
re	test/functional/feature_versionbits_warning.py	/^import re$/;"	i
re	test/functional/test_framework/test_node.py	/^import re$/;"	i
re	test/functional/test_framework/util.py	/^import re$/;"	i
re	test/functional/test_runner.py	/^import re$/;"	i
re	test/lint/check-doc.py	/^import re$/;"	i
re	test/lint/check-rpc-mappings.py	/^import re$/;"	i
re	test/lint/lint-format-strings.py	/^import re$/;"	i
read	src/hash.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CHashVerifier
read	src/script/bitcoinconsensus.cpp	/^    void read(char* pch, size_t nSize)$/;"	f	class:__anon81::TxInputStream
read	src/streams.h	/^    void read(char *pch, size_t nSize) {$/;"	f	class:CBufferedFile
read	src/streams.h	/^    void read(char* dst, size_t n)$/;"	f	class:VectorReader
read	src/streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	src/streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CDataStream
read	src/streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:OverrideStream
read	src/univalue/include/univalue.h	/^    bool read(const char *raw) { return read(raw, strlen(raw)); }$/;"	f	class:UniValue
read	src/univalue/include/univalue.h	/^    bool read(const std::string& rawStr) {$/;"	f	class:UniValue
read	src/univalue/lib/univalue_read.cpp	/^bool UniValue::read(const char *raw, size_t size)$/;"	f	class:UniValue
readData	src/net.cpp	/^int CNetMessage::readData(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readHeader	src/net.cpp	/^int CNetMessage::readHeader(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readPaymentRequestFromFile	src/qt/paymentserver.cpp	/^bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)$/;"	f	class:PaymentServer
readStdin	src/bitcoin-tx.cpp	/^static std::string readStdin()$/;"	f	file:
read_dump	test/functional/wallet_dump.py	/^def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):$/;"	f
read_file	contrib/devtools/copyright_header.py	/^def read_file(filename):$/;"	f
read_file_lines	contrib/devtools/copyright_header.py	/^def read_file_lines(filename):$/;"	f
read_json	src/test/script_tests.cpp	/^read_json(const std::string& jsondata)$/;"	f
read_libraries	contrib/devtools/symbol-check.py	/^def read_libraries(filename):$/;"	f
read_logs	test/functional/combine_logs.py	/^def read_logs(tmp_dir):$/;"	f
read_stdin	src/test/fuzz/fuzz.cpp	/^static bool read_stdin(std::vector<uint8_t>& data)$/;"	f	file:
read_symbols	contrib/devtools/symbol-check.py	/^def read_symbols(executable, imports=True):$/;"	f
readcb	src/torcontrol.cpp	/^void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)$/;"	f	class:TorControlConnection
reader_	src/leveldb/db/log_test.cc	/^  Reader* reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	src/leveldb/db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
readoptions	src/dbwrapper.h	/^    leveldb::ReadOptions readoptions;$/;"	m	class:CDBWrapper
reads_	src/leveldb/db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
ready	src/script/interpreter.h	/^    bool ready = false;$/;"	m	struct:PrecomputedTransactionData
real_vector	src/test/prevector_tests.cpp	/^    realtype real_vector;$/;"	m	class:prevector_tester	file:
real_vector_alt	src/test/prevector_tests.cpp	/^    realtype real_vector_alt;$/;"	m	class:prevector_tester	file:
realtype	src/test/prevector_tests.cpp	/^    typedef std::vector<T> realtype;$/;"	t	class:prevector_tester	file:
reason	src/fs.h	/^        std::string reason;$/;"	m	class:fsbridge::FileLock
reason	src/policy/fees.h	/^    FeeReason reason = FeeReason::NONE;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
reasonCommitFailed	src/qt/walletmodel.h	/^        QString reasonCommitFailed;$/;"	m	struct:WalletModel::SendCoinsReturn
reassignAmounts	src/qt/walletmodeltransaction.cpp	/^void WalletModelTransaction::reassignAmounts(int nChangePosRet)$/;"	f	class:WalletModelTransaction
receive	test/functional/interface_zmq.py	/^    def receive(self):$/;"	m	class:ZMQSubscriber
receiveCoinsAction	src/qt/bitcoingui.h	/^    QAction* receiveCoinsAction = nullptr;$/;"	m	class:BitcoinGUI
receiveCoinsMenuAction	src/qt/bitcoingui.h	/^    QAction* receiveCoinsMenuAction = nullptr;$/;"	m	class:BitcoinGUI
receiveCoinsPage	src/qt/walletview.h	/^    ReceiveCoinsDialog *receiveCoinsPage;$/;"	m	class:WalletView
received_block_announcement	test/functional/p2p_compactblocks.py	/^    def received_block_announcement(self):$/;"	m	class:TestP2PConn
received_hash	test/functional/p2p_compactblocks.py	/^        def received_hash():$/;"	f	function:TestP2PConn.wait_for_block_announcement
received_sendcmpct	test/functional/p2p_compactblocks.py	/^        def received_sendcmpct():$/;"	f	function:CompactBlocksTest.test_sendcmpct
recentRequestsTableModel	src/qt/walletmodel.h	/^    RecentRequestsTableModel *recentRequestsTableModel;$/;"	m	class:WalletModel
recentRequestsView_selectionChanged	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::recentRequestsView_selectionChanged(const QItemSelection &selected, const QItemSelection &deselected)$/;"	f	class:ReceiveCoinsDialog
recipient	src/qt/recentrequeststablemodel.h	/^    SendCoinsRecipient recipient;$/;"	m	class:RecentRequestEntry
recipient	src/qt/sendcoinsentry.h	/^    SendCoinsRecipient recipient;$/;"	m	class:SendCoinsEntry
recipient	src/qt/test/paymentservertests.h	/^    SendCoinsRecipient recipient;$/;"	m	class:RecipientCatcher
recipients	src/qt/walletmodeltransaction.h	/^    QList<SendCoinsRecipient> recipients;$/;"	m	class:WalletModelTransaction
reconnect	src/torcontrol.cpp	/^    bool reconnect;$/;"	m	class:TorController	file:
reconnect_cb	src/torcontrol.cpp	/^void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	class:TorController
reconnect_ev	src/torcontrol.cpp	/^    struct event *reconnect_ev;$/;"	m	class:TorController	typeref:struct:TorController::event	file:
reconnect_p2p	test/functional/feature_block.py	/^    def reconnect_p2p(self, timeout=60):$/;"	m	class:FullBlockTest
reconnect_p2p	test/functional/p2p_invalid_tx.py	/^    def reconnect_p2p(self, **kwargs):$/;"	m	class:InvalidTxRequestTest
reconnect_timeout	src/torcontrol.cpp	/^    float reconnect_timeout;$/;"	m	class:TorController	file:
reconsiderblock	src/rpc/blockchain.cpp	/^static UniValue reconsiderblock(const JSONRPCRequest& request)$/;"	f	file:
recoverFunc_type	src/wallet/db.h	/^    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);$/;"	t	class:BerkeleyEnvironment
recovery_test_nonce_function	src/secp256k1/src/modules/recovery/tests_impl.h	/^static int recovery_test_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f
recvall	test/functional/test_framework/socks5.py	/^def recvall(s, n):$/;"	f
redeem	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
redeem	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script")$/;"	i
redeem	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
redeem	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
redeem	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
redeem	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
redeem	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
redeem_script	src/psbt.h	/^    CScript redeem_script;$/;"	m	struct:PSBTInput
redeem_script	src/psbt.h	/^    CScript redeem_script;$/;"	m	struct:PSBTOutput
redeem_script	src/script/sign.h	/^    CScript redeem_script; \/\/\/< The redeemScript (if any) for the input$/;"	m	struct:SignatureData
redeemscript	src/test/script_tests.cpp	/^    CScript redeemscript;$/;"	m	class:__anon58::TestBuilder	file:
redeemscript	src/wallet/rpcdump.cpp	/^    std::unique_ptr<CScript> redeemscript; \/\/!< Provided redeemScript; will be moved to `import_scripts` if relevant.$/;"	m	struct:ImportData	file:
refcount	src/pubkey.cpp	/^\/* static *\/ int ECCVerifyHandle::refcount = 0;$/;"	m	class:ECCVerifyHandle	file:
refcount	src/pubkey.h	/^    static int refcount;$/;"	m	class:ECCVerifyHandle
reference	src/prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::iterator
reference	src/prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::reverse_iterator
reference	src/prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_iterator
reference	src/prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_reverse_iterator
reference	src/prevector.h	/^    typedef value_type& reference;$/;"	t	class:prevector
reference	src/streams.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
reference	src/support/allocators/secure.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	src/support/allocators/zeroafterfree.h	/^    typedef typename base::reference reference;$/;"	t	struct:zero_after_free_allocator
refresh	src/qt/bantablemodel.cpp	/^void BanTableModel::refresh()$/;"	f	class:BanTableModel
refresh	src/qt/peertablemodel.cpp	/^void PeerTableModel::refresh()$/;"	f	class:PeerTableModel
refreshAddressTable	src/qt/addresstablemodel.cpp	/^    void refreshAddressTable(interfaces::Wallet& wallet)$/;"	f	class:AddressTablePriv
refreshBanlist	src/qt/bantablemodel.cpp	/^    void refreshBanlist(interfaces::Node& node)$/;"	f	class:BanTablePriv
refreshPeers	src/qt/peertablemodel.cpp	/^    void refreshPeers(interfaces::Node& node)$/;"	f	class:PeerTablePriv
refreshWallet	src/qt/transactiontablemodel.cpp	/^    void refreshWallet(interfaces::Wallet& wallet)$/;"	f	class:TransactionTablePriv
refs	src/leveldb/db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	src/leveldb/util/cache.cc	/^  uint32_t refs;      \/\/ References, including cache reference, if present.$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
refs_	src/leveldb/db/memtable.h	/^  int refs_;$/;"	m	class:leveldb::MemTable
refs_	src/leveldb/db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	src/leveldb/helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon35::FileState	file:
refs_mutex_	src/leveldb/helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon35::FileState	file:
registerShutdownBlockReason	src/qt/winshutdownmonitor.cpp	/^void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)$/;"	f	class:WinShutdownMonitor
registerSignalHandler	src/init.cpp	/^static void registerSignalHandler(int signal, void(*handler)(int))$/;"	f	file:
registers	src/bitcoin-tx.cpp	/^static std::map<std::string,UniValue> registers;$/;"	v	file:
rehash	test/functional/test_framework/messages.py	/^    def rehash(self):$/;"	m	class:CBlockHeader
rehash	test/functional/test_framework/messages.py	/^    def rehash(self):$/;"	m	class:CTransaction
reindex	test/functional/feature_reindex.py	/^    def reindex(self, justchainstate=False):$/;"	m	class:ReindexTest
reject	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::reject()$/;"	f	class:ReceiveCoinsDialog
reject	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::reject()$/;"	f	class:SendCoinsDialog
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = ""$/;"	v	class:BadTxTemplate
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = "bad-txns-too-many-sigops"$/;"	v	class:TooManySigops
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = "bad-txns-vin-empty"$/;"	v	class:InputMissing
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = "bad-txns-vout-empty"$/;"	v	class:OutputMissing
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = "mandatory-script-verify-flag-failed (Invalid OP_IF construction)"$/;"	v	class:InvalidOPIFConstruction
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = "tx-size-small"$/;"	v	class:SizeTooSmall
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = 'bad-txns-in-belowout'$/;"	v	class:SpendTooMuch
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = 'bad-txns-inputs-duplicate'$/;"	v	class:DuplicateInput
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = 'bad-txns-vout-negative'$/;"	v	class:SpendNegative
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = None  # Added as an orphan tx.$/;"	v	class:NonexistentInput
reject_reason	test/functional/data/invalid_txs.py	/^    reject_reason = None$/;"	v	class:BadInputOutpointIndex
rejects	src/net_processing.cpp	/^    std::vector<CBlockReject> rejects;$/;"	m	struct:__anon89::CNodeState	file:
relative_locktime	test/functional/feature_csv_activation.py	/^def relative_locktime(sdf, srhb, stf, srlb):$/;"	f
relative_log_path	test/functional/feature_logging.py	/^    def relative_log_path(self, name):$/;"	m	class:LoggingTest
release	src/streams.h	/^    FILE* release()             { FILE* ret = file; file = nullptr; return ret; }$/;"	f	class:CAutoFile
release_type	depends/Makefile	/^release_type=debug$/;"	m
release_type	depends/Makefile	/^release_type=release$/;"	m
relock	src/qt/walletmodel.h	/^        mutable bool relock; \/\/ mutable, as it can be set to false by copying$/;"	m	class:WalletModel::UnlockContext
removeAllWallets	src/qt/bitcoingui.cpp	/^void BitcoinGUI::removeAllWallets()$/;"	f	class:BitcoinGUI
removeAllWallets	src/qt/walletframe.cpp	/^void WalletFrame::removeAllWallets()$/;"	f	class:WalletFrame
removeAndDeleteWallet	src/qt/walletcontroller.cpp	/^void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)$/;"	f	class:WalletController
removeCommand	src/rpc/server.cpp	/^bool CRPCTable::removeCommand(const std::string& name, const CRPCCommand* pcmd)$/;"	f	class:CRPCTable
removeConflicts	src/txmempool.cpp	/^void CTxMemPool::removeConflicts(const CTransaction &tx)$/;"	f	class:CTxMemPool
removeEntry	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::removeEntry(SendCoinsEntry* entry)$/;"	f	class:SendCoinsDialog
removeEntry	src/txmempool.h	/^    void removeEntry(indexed_disconnected_transactions::index<insertion_order>::type::iterator entry)$/;"	f	struct:DisconnectedBlockTransactions
removeForBlock	src/txmempool.cpp	/^void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)$/;"	f	class:CTxMemPool
removeForBlock	src/txmempool.h	/^    void removeForBlock(const std::vector<CTransactionRef>& vtx)$/;"	f	struct:DisconnectedBlockTransactions
removeForReorg	src/txmempool.cpp	/^void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)$/;"	f	class:CTxMemPool
removeRecursive	src/txmempool.cpp	/^void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
removeRows	src/qt/addresstablemodel.cpp	/^bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent)$/;"	f	class:AddressTableModel
removeRows	src/qt/recentrequeststablemodel.cpp	/^bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex &parent)$/;"	f	class:RecentRequestsTableModel
removeSpaces	src/qt/bitcoinunits.h	/^    static QString removeSpaces(QString text)$/;"	f	class:BitcoinUnits
removeTx	src/policy/fees.cpp	/^bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)$/;"	f	class:CBlockPolicyEstimator
removeTx	src/policy/fees.cpp	/^void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex, bool inBlock)$/;"	f	class:TxConfirmStats
removeUnchecked	src/txmempool.cpp	/^void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
removeWallet	src/qt/bitcoingui.cpp	/^void BitcoinGUI::removeWallet(WalletModel* walletModel)$/;"	f	class:BitcoinGUI
removeWallet	src/qt/rpcconsole.cpp	/^void RPCConsole::removeWallet(WalletModel * const walletModel)$/;"	f	class:RPCConsole
removeWallet	src/qt/walletframe.cpp	/^void WalletFrame::removeWallet(WalletModel* wallet_model)$/;"	f	class:WalletFrame
remove_invalid_characters	contrib/devtools/update-translations.py	/^def remove_invalid_characters(s):$/;"	f
remove_prefix	src/leveldb/include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
removeprunedfunds	src/wallet/rpcdump.cpp	/^UniValue removeprunedfunds(const JSONRPCRequest& request)$/;"	f
rend	src/prevector.h	/^    const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
rend	src/prevector.h	/^    reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
reorg_back	test/functional/feature_pruning.py	/^    def reorg_back(self):$/;"	m	class:PruneTest
reorg_test	test/functional/feature_pruning.py	/^    def reorg_test(self):$/;"	m	class:PruneTest
rep	src/leveldb/db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t	file:
rep	src/leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t	file:
rep_	src/leveldb/db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	src/leveldb/include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	src/leveldb/include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	src/leveldb/include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	src/leveldb/include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	src/leveldb/port/atomic_pointer.h	/^  std::atomic<void*> rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	src/leveldb/port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	src/leveldb/port/port_win.h	/^  void * rep_;$/;"	m	class:leveldb::port::AtomicPointer
replySent	src/httpserver.h	/^    bool replySent;$/;"	m	class:HTTPRequest
reply_handlers	src/torcontrol.cpp	/^    std::deque<ReplyHandlerCB> reply_handlers;$/;"	m	class:TorControlConnection	file:
reportSslErrors	src/qt/paymentserver.cpp	/^void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError> &errs)$/;"	f	class:PaymentServer
report_	src/leveldb/db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
report_cmd	contrib/devtools/copyright_header.py	/^def report_cmd(argv):$/;"	f
report_rpc_coverage	test/functional/test_runner.py	/^    def report_rpc_coverage(self):$/;"	m	class:RPCCoverage
reporter_	src/leveldb/db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
req	src/httpserver.cpp	/^    std::unique_ptr<HTTPRequest> req;$/;"	m	class:final	file:
req	src/httpserver.h	/^    struct evhttp_request* req;$/;"	m	class:HTTPRequest	typeref:struct:HTTPRequest::evhttp_request
request	src/qt/rpcconsole.cpp	/^void RPCExecutor::request(const QString &command, const WalletModel* wallet_model)$/;"	f	class:RPCExecutor
requestInitialize	src/qt/bitcoin.cpp	/^void BitcoinApplication::requestInitialize()$/;"	f	class:BitcoinApplication
requestShutdown	src/qt/bitcoin.cpp	/^void BitcoinApplication::requestShutdown()$/;"	f	class:BitcoinApplication
requestUnlock	src/qt/walletmodel.cpp	/^WalletModel::UnlockContext WalletModel::requestUnlock()$/;"	f	class:WalletModel
request_block	test/functional/p2p_segwit.py	/^    def request_block(self, blockhash, inv_type, timeout=60):$/;"	m	class:TestP2PConn
request_cb_announcements	test/functional/p2p_compactblocks.py	/^    def request_cb_announcements(self, peer):$/;"	m	class:CompactBlocksTest
request_headers_and_sync	test/functional/p2p_compactblocks.py	/^    def request_headers_and_sync(self, locator, hashstop=0):$/;"	m	class:TestP2PConn
requestedSyncWarningInfo	src/qt/walletview.cpp	/^void WalletView::requestedSyncWarningInfo()$/;"	f	class:WalletView
required	test/functional/test_framework/netutil.py	/^    import fcntl  # Linux only, so only import when required$/;"	i
requiredSpace	src/qt/intro.cpp	/^static uint64_t requiredSpace;$/;"	v	file:
requires_seed	src/random.h	/^    bool requires_seed;$/;"	m	class:FastRandomContext
rescanblockchain	src/wallet/rpcwallet.cpp	/^UniValue rescanblockchain(const JSONRPCRequest& request)$/;"	f
reserve	src/prevector.h	/^    void reserve(size_type new_capacity) {$/;"	f	class:prevector
reserve	src/rpc/blockchain.cpp	/^    bool reserve() {$/;"	f	class:CoinsViewScanReserver
reserve	src/streams.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
reserve	src/test/prevector_tests.cpp	/^    void reserve(Size s) {$/;"	f	class:prevector_tester
reserve	src/wallet/wallet.h	/^    bool reserve()$/;"	f	class:WalletRescanReserver
reset	src/bloom.cpp	/^void CBloomFilter::reset(const unsigned int nNewTweak)$/;"	f	class:CBloomFilter
reset	src/bloom.cpp	/^void CRollingBloomFilter::reset()$/;"	f	class:CRollingBloomFilter
reset	src/threadinterrupt.cpp	/^void CThreadInterrupt::reset()$/;"	f	class:CThreadInterrupt
resetBlock	src/miner.cpp	/^void BlockAssembler::resetBlock()$/;"	f	class:BlockAssembler
resize	src/prevector.h	/^    void resize(size_type new_size) {$/;"	f	class:prevector
resize	src/streams.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
resize	src/test/prevector_tests.cpp	/^    void resize(Size s) {$/;"	f	class:prevector_tester
resizeColumn	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::resizeColumn(int nColumnIndex, int width)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
resizeEvent	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::resizeEvent(QResizeEvent *event)$/;"	f	class:ReceiveCoinsDialog
resizeEvent	src/qt/rpcconsole.cpp	/^void RPCConsole::resizeEvent(QResizeEvent *event)$/;"	f	class:RPCConsole
resizeEvent	src/qt/transactionview.cpp	/^void TransactionView::resizeEvent(QResizeEvent* event)$/;"	f	class:TransactionView
resizeInMemoryCounters	src/policy/fees.cpp	/^void TxConfirmStats::resizeInMemoryCounters(size_t newbuckets) {$/;"	f	class:TxConfirmStats
resolvedAddress	src/net.h	/^    CService resolvedAddress;$/;"	m	struct:AddedNodeInfo
resolver	contrib/seeds/makeseeds.py	/^import dns.resolver$/;"	i
respective	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
respective	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script")$/;"	i
respective	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
respective	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
respective	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
respective	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
respective	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
response_is_error	contrib/linearize/linearize-hashes.py	/^    def response_is_error(resp_obj):$/;"	m	class:BitcoinRPC
rest_block	src/rest.cpp	/^static bool rest_block(HTTPRequest* req,$/;"	f	file:
rest_block_extended	src/rest.cpp	/^static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_block_notxdetails	src/rest.cpp	/^static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_blockhash_by_height	src/rest.cpp	/^static bool rest_blockhash_by_height(HTTPRequest* req,$/;"	f	file:
rest_chaininfo	src/rest.cpp	/^static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_getutxos	src/rest.cpp	/^static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_headers	src/rest.cpp	/^static bool rest_headers(HTTPRequest* req,$/;"	f	file:
rest_mempool_contents	src/rest.cpp	/^static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_mempool_info	src/rest.cpp	/^static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_tx	src/rest.cpp	/^static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
restart_index_	src/leveldb/table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	src/leveldb/table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_node	test/functional/feature_dbcrash.py	/^    def restart_node(self, node_index, expected_tip):$/;"	m	class:ChainstateWriteCrashTest
restart_node	test/functional/test_framework/test_framework.py	/^    def restart_node(self, i, extra_args=None):$/;"	m	class:BitcoinTestFramework
restart_offset_	src/leveldb/table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	src/leveldb/table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	src/leveldb/table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result	src/bench/bench.cpp	/^void benchmark::ConsolePrinter::result(const State& state)$/;"	f	class:benchmark::ConsolePrinter
result	src/bench/bench.cpp	/^void benchmark::PlotlyPrinter::result(const State& state)$/;"	f	class:benchmark::PlotlyPrinter
result_	src/leveldb/table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
result_type	src/miner.h	/^    typedef CTxMemPool::txiter result_type;$/;"	t	struct:modifiedentry_iter
result_type	src/net.h	/^    typedef bool result_type;$/;"	t	struct:CombinerAll
result_type	src/random.h	/^    typedef uint64_t result_type;$/;"	t	class:FastRandomContext
result_type	src/txmempool.h	/^    typedef uint256 result_type;$/;"	t	struct:mempoolentry_txid
results	src/test/checkqueue_tests.cpp	/^    static std::unordered_multiset<size_t> results;$/;"	m	struct:UniqueCheck	file:
results	src/test/checkqueue_tests.cpp	/^std::unordered_multiset<size_t> UniqueCheck::results;$/;"	m	class:UniqueCheck	file:
resyncing_	src/leveldb/db/log_reader.h	/^  bool resyncing_;$/;"	m	class:leveldb::log::Reader
retrieve_json	contrib/devtools/github-merge.py	/^def retrieve_json(req_url, ghtoken, use_pagination=False):$/;"	f
retrieve_pr_comments	contrib/devtools/github-merge.py	/^def retrieve_pr_comments(repo,pull,ghtoken):$/;"	f
retrieve_pr_info	contrib/devtools/github-merge.py	/^def retrieve_pr_info(repo,pull,ghtoken):$/;"	f
retrieve_pr_reviews	contrib/devtools/github-merge.py	/^def retrieve_pr_reviews(repo,pull,ghtoken):$/;"	f
retry	src/secp256k1/src/hash.h	/^    int retry;$/;"	m	struct:__anon113
returnValue	src/qt/addressbookpage.h	/^    QString returnValue;$/;"	m	class:AddressBookPage
returnValue	src/qt/bitcoin.h	/^    int returnValue;$/;"	m	class:BitcoinApplication
returnedTarget	src/policy/fees.h	/^    int returnedTarget = 0;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
returned_partial_	src/leveldb/db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
retval	contrib/devtools/security-check.py	/^                retval = 1$/;"	v
retval	contrib/devtools/security-check.py	/^            retval = 1$/;"	v
retval	contrib/devtools/security-check.py	/^    retval = 0$/;"	v
retval	contrib/devtools/symbol-check.py	/^                retval = 1$/;"	v
retval	contrib/devtools/symbol-check.py	/^    retval = 0$/;"	v
reuse_logs	src/leveldb/include/leveldb/options.h	/^  bool reuse_logs;$/;"	m	struct:leveldb::Options
reverse_compare	src/leveldb/table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_iterate	src/reverse_iterator.h	/^reverse_range<T> reverse_iterate(T &x)$/;"	f
reverse_iterator	src/prevector.h	/^        reverse_iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::reverse_iterator
reverse_iterator	src/prevector.h	/^    class reverse_iterator {$/;"	c	class:prevector
reverse_iterator	src/streams.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
reverse_key_comparator	src/leveldb/table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
reverse_lock	src/reverselock.h	/^    explicit reverse_lock(Lock& _lock) : lock(_lock) {$/;"	f	class:reverse_lock
reverse_lock	src/reverselock.h	/^class reverse_lock$/;"	c
reverse_range	src/reverse_iterator.h	/^    explicit reverse_range(T &x) : m_x(x) {}$/;"	f	class:reverse_range
reverse_range	src/reverse_iterator.h	/^class reverse_range$/;"	c
rf	src/rest.cpp	/^    RetFormat rf;$/;"	m	struct:__anon1	file:
rf_names	src/rest.cpp	/^} rf_names[] = {$/;"	v	typeref:struct:__anon1	file:
right	src/memusage.h	/^    void* right;$/;"	m	struct:memusage::stl_tree_node
ripemd160	src/crypto/ripemd160.cpp	/^namespace ripemd160$/;"	n	namespace:__anon42	file:
rk	src/crypto/ctaes/ctaes.h	/^    AES_state rk[11];$/;"	m	struct:__anon46
rk	src/crypto/ctaes/ctaes.h	/^    AES_state rk[13];$/;"	m	struct:__anon47
rk	src/crypto/ctaes/ctaes.h	/^    AES_state rk[15];$/;"	m	struct:__anon48
rmap	src/limitedmap.h	/^    std::multimap<V, iterator> rmap;$/;"	m	class:limitedmap
rmap_iterator	src/limitedmap.h	/^    typedef typename std::multimap<V, iterator>::iterator rmap_iterator;$/;"	t	class:limitedmap
rnd_	src/leveldb/db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon29::DBIter	file:
rnd_	src/leveldb/db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
rng	src/random.h	/^    ChaCha20 rng;$/;"	m	class:FastRandomContext
rol	src/crypto/ripemd160.cpp	/^uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }$/;"	f	namespace:__anon42::ripemd160
role	src/qt/csvmodelwriter.h	/^        int role;$/;"	m	struct:CSVModelWriter::Column
role	src/qt/qvaluecombobox.h	/^    int role;$/;"	m	class:QValueComboBox
rollingMinimumFeeRate	src/txmempool.h	/^    mutable double rollingMinimumFeeRate; \/\/!< minimum fee to get into the pool, decreases exponentially$/;"	m	class:CTxMemPool
root	src/test/coins_tests.cpp	/^    CCoinsView root;$/;"	m	class:SingleEntryCacheTest	file:
rotl32	src/crypto/chacha20.cpp	/^constexpr static inline uint32_t rotl32(uint32_t v, int c) { return (v << c) | (v >> (32 - c)); }$/;"	f	file:
rotl64	test/functional/test_framework/siphash.py	/^def rotl64(n, b):$/;"	f
round	src/policy/fees.cpp	/^CAmount FeeFilterRounder::round(CAmount currentMinFee)$/;"	f	class:FeeFilterRounder
rowCount	src/qt/addresstablemodel.cpp	/^int AddressTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
rowCount	src/qt/bantablemodel.cpp	/^int BanTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:BanTableModel
rowCount	src/qt/bitcoinunits.cpp	/^int BitcoinUnits::rowCount(const QModelIndex &parent) const$/;"	f	class:BitcoinUnits
rowCount	src/qt/optionsmodel.cpp	/^int OptionsModel::rowCount(const QModelIndex & parent) const$/;"	f	class:OptionsModel
rowCount	src/qt/peertablemodel.cpp	/^int PeerTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:PeerTableModel
rowCount	src/qt/recentrequeststablemodel.cpp	/^int RecentRequestsTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
rowCount	src/qt/transactionfilterproxy.cpp	/^int TransactionFilterProxy::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionFilterProxy
rowCount	src/qt/transactiontablemodel.cpp	/^int TransactionTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
rpcConsole	src/qt/bitcoingui.h	/^    RPCConsole* rpcConsole = nullptr;$/;"	m	class:BitcoinGUI
rpcCvtTable	src/rpc/client.cpp	/^static CRPCConvertTable rpcCvtTable;$/;"	v	file:
rpcNestedTest_rpc	src/qt/test/rpcnestedtests.cpp	/^static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)$/;"	f	file:
rpcNestedTests	src/qt/test/rpcnestedtests.cpp	/^void RPCNestedTests::rpcNestedTests()$/;"	f	class:RPCNestedTests
rpcTimerInterface	src/qt/rpcconsole.h	/^    RPCTimerInterface *rpcTimerInterface = nullptr;$/;"	m	class:RPCConsole
rpc_allow_subnets	src/httpserver.cpp	/^static std::vector<CSubNet> rpc_allow_subnets;$/;"	v	file:
rpc_notify_block_change_connection	src/init.cpp	/^static boost::signals2::connection rpc_notify_block_change_connection;$/;"	v	file:
rpc_port	test/functional/rpc_bind.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, get_rpc_proxy, rpc_port, rpc_url$/;"	i
rpc_port	test/functional/test_framework/util.py	/^def rpc_port(n):$/;"	f
rpc_url	test/functional/rpc_bind.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, get_rpc_proxy, rpc_port, rpc_url$/;"	i
rpc_url	test/functional/test_framework/util.py	/^def rpc_url(datadir, i, rpchost=None):$/;"	f
rpcfn_type	src/rpc/server.h	/^typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);$/;"	t
rtrim	src/univalue/test/unitester.cpp	/^static std::string rtrim(std::string s)$/;"	f	file:
run	contrib/linearize/linearize-data.py	/^    def run(self):$/;"	m	class:BlockDataCopier
run	test/functional/mining_getblocktemplate_longpoll.py	/^    def run(self):$/;"	m	class:LongpollThread
run	test/functional/test_framework/mininode.py	/^    def run(self):$/;"	m	class:NetworkThread
run	test/functional/test_framework/socks5.py	/^    def run(self):$/;"	m	class:Socks5Server
runCommand	src/util/system.cpp	/^void runCommand(const std::string& strCommand)$/;"	f
run_allowip_test	test/functional/rpc_bind.py	/^    def run_allowip_test(self, allow_ips, rpchost, rpcport):$/;"	m	class:RPCBindTest
run_benchmark	src/crypto/ctaes/bench.c	/^static void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f	file:
run_benchmark	src/secp256k1/src/bench.h	/^void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f
run_bind_test	test/functional/rpc_bind.py	/^    def run_bind_test(self, allow_ips, connect_to, addresses, expected):$/;"	m	class:RPCBindTest
run_context_tests	src/secp256k1/src/tests.c	/^void run_context_tests(void) {$/;"	f
run_ec_combine	src/secp256k1/src/tests.c	/^void run_ec_combine(void) {$/;"	f
run_ec_pubkey_parse_test	src/secp256k1/src/tests.c	/^void run_ec_pubkey_parse_test(void) {$/;"	f
run_ecdh_tests	src/secp256k1/src/modules/ecdh/tests_impl.h	/^void run_ecdh_tests(void) {$/;"	f
run_ecdsa_der_parse	src/secp256k1/src/tests.c	/^void run_ecdsa_der_parse(void) {$/;"	f
run_ecdsa_edge_cases	src/secp256k1/src/tests.c	/^void run_ecdsa_edge_cases(void) {$/;"	f
run_ecdsa_end_to_end	src/secp256k1/src/tests.c	/^void run_ecdsa_end_to_end(void) {$/;"	f
run_ecdsa_openssl	src/secp256k1/src/tests.c	/^void run_ecdsa_openssl(void) {$/;"	f
run_ecdsa_sign_verify	src/secp256k1/src/tests.c	/^void run_ecdsa_sign_verify(void) {$/;"	f
run_eckey_edge_case_test	src/secp256k1/src/tests.c	/^void run_eckey_edge_case_test(void) {$/;"	f
run_ecmult_chain	src/secp256k1/src/tests.c	/^void run_ecmult_chain(void) {$/;"	f
run_ecmult_const_tests	src/secp256k1/src/tests.c	/^void run_ecmult_const_tests(void) {$/;"	f
run_ecmult_constants	src/secp256k1/src/tests.c	/^void run_ecmult_constants(void) {$/;"	f
run_ecmult_gen_blind	src/secp256k1/src/tests.c	/^void run_ecmult_gen_blind(void) {$/;"	f
run_endomorphism_tests	src/secp256k1/src/tests.c	/^void run_endomorphism_tests(void) {$/;"	f
run_field_convert	src/secp256k1/src/tests.c	/^void run_field_convert(void) {$/;"	f
run_field_inv	src/secp256k1/src/tests.c	/^void run_field_inv(void) {$/;"	f
run_field_inv_all_var	src/secp256k1/src/tests.c	/^void run_field_inv_all_var(void) {$/;"	f
run_field_inv_var	src/secp256k1/src/tests.c	/^void run_field_inv_var(void) {$/;"	f
run_field_misc	src/secp256k1/src/tests.c	/^void run_field_misc(void) {$/;"	f
run_ge	src/secp256k1/src/tests.c	/^void run_ge(void) {$/;"	f
run_group_decompress	src/secp256k1/src/tests.c	/^void run_group_decompress(void) {$/;"	f
run_hmac_sha256_tests	src/secp256k1/src/tests.c	/^void run_hmac_sha256_tests(void) {$/;"	f
run_num_smalltests	src/secp256k1/src/tests.c	/^void run_num_smalltests(void) {$/;"	f
run_once	test/fuzz/test_runner.py	/^def run_once(*, corpus, test_list, build_dir, export_coverage):$/;"	f
run_point_times_order	src/secp256k1/src/tests.c	/^void run_point_times_order(void) {$/;"	f
run_rand_bits	src/secp256k1/src/tests.c	/^void run_rand_bits(void) {$/;"	f
run_rand_int	src/secp256k1/src/tests.c	/^void run_rand_int(void) {$/;"	f
run_random_pubkeys	src/secp256k1/src/tests.c	/^void run_random_pubkeys(void) {$/;"	f
run_rbf_opt_in_test	test/functional/wallet_listtransactions.py	/^    def run_rbf_opt_in_test(self):$/;"	m	class:ListTransactionsTest
run_recovery_tests	src/secp256k1/src/modules/recovery/tests_impl.h	/^void run_recovery_tests(void) {$/;"	f
run_rfc6979_hmac_sha256_tests	src/secp256k1/src/tests.c	/^void run_rfc6979_hmac_sha256_tests(void) {$/;"	f
run_scalar_tests	src/secp256k1/src/tests.c	/^void run_scalar_tests(void) {$/;"	f
run_sha256_tests	src/secp256k1/src/tests.c	/^void run_sha256_tests(void) {$/;"	f
run_sqr	src/secp256k1/src/tests.c	/^void run_sqr(void) {$/;"	f
run_sqrt	src/secp256k1/src/tests.c	/^void run_sqrt(void) {$/;"	f
run_test	test/functional/create_cache.py	/^    def run_test(self):$/;"	m	class:CreateCache
run_test	test/functional/example_test.py	/^    def run_test(self):$/;"	m	class:ExampleTest
run_test	test/functional/feature_assumevalid.py	/^    def run_test(self):$/;"	m	class:AssumeValidTest
run_test	test/functional/feature_bip68_sequence.py	/^    def run_test(self):$/;"	m	class:BIP68Test
run_test	test/functional/feature_block.py	/^    def run_test(self):$/;"	m	class:FullBlockTest
run_test	test/functional/feature_blocksdir.py	/^    def run_test(self):$/;"	m	class:BlocksdirTest
run_test	test/functional/feature_cltv.py	/^    def run_test(self):$/;"	m	class:BIP65Test
run_test	test/functional/feature_config_args.py	/^    def run_test(self):$/;"	m	class:ConfArgsTest
run_test	test/functional/feature_csv_activation.py	/^    def run_test(self):$/;"	m	class:BIP68_112_113Test
run_test	test/functional/feature_dbcrash.py	/^    def run_test(self):$/;"	m	class:ChainstateWriteCrashTest
run_test	test/functional/feature_dersig.py	/^    def run_test(self):$/;"	m	class:BIP66Test
run_test	test/functional/feature_fee_estimation.py	/^    def run_test(self):$/;"	m	class:EstimateFeeTest
run_test	test/functional/feature_filelock.py	/^    def run_test(self):$/;"	m	class:FilelockTest
run_test	test/functional/feature_help.py	/^    def run_test(self):$/;"	m	class:HelpTest
run_test	test/functional/feature_includeconf.py	/^    def run_test(self):$/;"	m	class:IncludeConfTest
run_test	test/functional/feature_logging.py	/^    def run_test(self):$/;"	m	class:LoggingTest
run_test	test/functional/feature_maxuploadtarget.py	/^    def run_test(self):$/;"	m	class:MaxUploadTest
run_test	test/functional/feature_minchainwork.py	/^    def run_test(self):$/;"	m	class:MinimumChainWorkTest
run_test	test/functional/feature_notifications.py	/^    def run_test(self):$/;"	m	class:NotificationsTest
run_test	test/functional/feature_nulldummy.py	/^    def run_test(self):$/;"	m	class:NULLDUMMYTest
run_test	test/functional/feature_proxy.py	/^    def run_test(self):$/;"	m	class:ProxyTest
run_test	test/functional/feature_pruning.py	/^    def run_test(self):$/;"	m	class:PruneTest
run_test	test/functional/feature_rbf.py	/^    def run_test(self):$/;"	m	class:ReplaceByFeeTest
run_test	test/functional/feature_reindex.py	/^    def run_test(self):$/;"	m	class:ReindexTest
run_test	test/functional/feature_segwit.py	/^    def run_test(self):$/;"	m	class:SegWitTest
run_test	test/functional/feature_shutdown.py	/^    def run_test(self):$/;"	m	class:ShutdownTest
run_test	test/functional/feature_uacomment.py	/^    def run_test(self):$/;"	m	class:UacommentTest
run_test	test/functional/feature_versionbits_warning.py	/^    def run_test(self):$/;"	m	class:VersionBitsWarningTest
run_test	test/functional/interface_bitcoin_cli.py	/^    def run_test(self):$/;"	m	class:TestBitcoinCli
run_test	test/functional/interface_http.py	/^    def run_test(self):$/;"	m	class:HTTPBasicsTest
run_test	test/functional/interface_rest.py	/^    def run_test(self):$/;"	m	class:RESTTest
run_test	test/functional/interface_rpc.py	/^    def run_test(self):$/;"	m	class:RPCInterfaceTest
run_test	test/functional/interface_zmq.py	/^    def run_test(self):$/;"	m	class:ZMQTest
run_test	test/functional/mempool_accept.py	/^    def run_test(self):$/;"	m	class:MempoolAcceptanceTest
run_test	test/functional/mempool_limit.py	/^    def run_test(self):$/;"	m	class:MempoolLimitTest
run_test	test/functional/mempool_packages.py	/^    def run_test(self):$/;"	m	class:MempoolPackagesTest
run_test	test/functional/mempool_persist.py	/^    def run_test(self):$/;"	m	class:MempoolPersistTest
run_test	test/functional/mempool_reorg.py	/^    def run_test(self):$/;"	m	class:MempoolCoinbaseTest
run_test	test/functional/mempool_resurrect.py	/^    def run_test(self):$/;"	m	class:MempoolCoinbaseTest
run_test	test/functional/mempool_spend_coinbase.py	/^    def run_test(self):$/;"	m	class:MempoolSpendCoinbaseTest
run_test	test/functional/mining_basic.py	/^    def run_test(self):$/;"	m	class:MiningTest
run_test	test/functional/mining_getblocktemplate_longpoll.py	/^    def run_test(self):$/;"	m	class:GetBlockTemplateLPTest
run_test	test/functional/mining_prioritisetransaction.py	/^    def run_test(self):$/;"	m	class:PrioritiseTransactionTest
run_test	test/functional/p2p_blocksonly.py	/^    def run_test(self):$/;"	m	class:P2PBlocksOnly
run_test	test/functional/p2p_compactblocks.py	/^    def run_test(self):$/;"	m	class:CompactBlocksTest
run_test	test/functional/p2p_disconnect_ban.py	/^    def run_test(self):$/;"	m	class:DisconnectBanTest
run_test	test/functional/p2p_feefilter.py	/^    def run_test(self):$/;"	m	class:FeeFilterTest
run_test	test/functional/p2p_fingerprint.py	/^    def run_test(self):$/;"	m	class:P2PFingerprintTest
run_test	test/functional/p2p_invalid_block.py	/^    def run_test(self):$/;"	m	class:InvalidBlockRequestTest
run_test	test/functional/p2p_invalid_locator.py	/^    def run_test(self):$/;"	m	class:InvalidLocatorTest
run_test	test/functional/p2p_invalid_messages.py	/^    def run_test(self):$/;"	m	class:InvalidMessagesTest
run_test	test/functional/p2p_invalid_tx.py	/^    def run_test(self):$/;"	m	class:InvalidTxRequestTest
run_test	test/functional/p2p_leak.py	/^    def run_test(self):$/;"	m	class:P2PLeakTest
run_test	test/functional/p2p_leak_tx.py	/^    def run_test(self):$/;"	m	class:P2PLeakTxTest
run_test	test/functional/p2p_mempool.py	/^    def run_test(self):$/;"	m	class:P2PMempoolTests
run_test	test/functional/p2p_node_network_limited.py	/^    def run_test(self):$/;"	m	class:NodeNetworkLimitedTest
run_test	test/functional/p2p_segwit.py	/^    def run_test(self):$/;"	m	class:SegWitTest
run_test	test/functional/p2p_sendheaders.py	/^    def run_test(self):$/;"	m	class:SendHeadersTest
run_test	test/functional/p2p_timeouts.py	/^    def run_test(self):$/;"	m	class:TimeoutsTest
run_test	test/functional/p2p_unrequested_blocks.py	/^    def run_test(self):$/;"	m	class:AcceptBlockTest
run_test	test/functional/rpc_bind.py	/^    def run_test(self):$/;"	m	class:RPCBindTest
run_test	test/functional/rpc_blockchain.py	/^    def run_test(self):$/;"	m	class:BlockchainTest
run_test	test/functional/rpc_createmultisig.py	/^    def run_test(self):$/;"	m	class:RpcCreateMultiSigTest
run_test	test/functional/rpc_decodescript.py	/^    def run_test(self):$/;"	m	class:DecodeScriptTest
run_test	test/functional/rpc_deprecated.py	/^    def run_test(self):$/;"	m	class:DeprecatedRpcTest
run_test	test/functional/rpc_deriveaddresses.py	/^    def run_test(self):$/;"	m	class:DeriveaddressesTest
run_test	test/functional/rpc_fundrawtransaction.py	/^    def run_test(self):$/;"	m	class:RawTransactionsTest
run_test	test/functional/rpc_getblockfilter.py	/^    def run_test(self):$/;"	m	class:GetBlockFilterTest
run_test	test/functional/rpc_getblockstats.py	/^    def run_test(self):$/;"	m	class:GetblockstatsTest
run_test	test/functional/rpc_getchaintips.py	/^    def run_test(self):$/;"	m	class:GetChainTipsTest
run_test	test/functional/rpc_help.py	/^    def run_test(self):$/;"	m	class:HelpRpcTest
run_test	test/functional/rpc_invalidateblock.py	/^    def run_test(self):$/;"	m	class:InvalidateTest
run_test	test/functional/rpc_misc.py	/^    def run_test(self):$/;"	m	class:RpcMiscTest
run_test	test/functional/rpc_named_arguments.py	/^    def run_test(self):$/;"	m	class:NamedArgumentTest
run_test	test/functional/rpc_net.py	/^    def run_test(self):$/;"	m	class:NetTest
run_test	test/functional/rpc_preciousblock.py	/^    def run_test(self):$/;"	m	class:PreciousTest
run_test	test/functional/rpc_psbt.py	/^    def run_test(self):$/;"	m	class:PSBTTest
run_test	test/functional/rpc_rawtransaction.py	/^    def run_test(self):$/;"	m	class:RawTransactionsTest
run_test	test/functional/rpc_scantxoutset.py	/^    def run_test(self):$/;"	m	class:ScantxoutsetTest
run_test	test/functional/rpc_signmessage.py	/^    def run_test(self):$/;"	m	class:SignMessagesTest
run_test	test/functional/rpc_signrawtransaction.py	/^    def run_test(self):$/;"	m	class:SignRawTransactionsTest
run_test	test/functional/rpc_txoutproof.py	/^    def run_test(self):$/;"	m	class:MerkleBlockTest
run_test	test/functional/rpc_uptime.py	/^    def run_test(self):$/;"	m	class:UptimeTest
run_test	test/functional/rpc_users.py	/^    def run_test(self):$/;"	m	class:HTTPBasicsTest
run_test	test/functional/test_framework/test_framework.py	/^    def run_test(self):$/;"	m	class:BitcoinTestFramework
run_test	test/functional/tool_wallet.py	/^    def run_test(self):$/;"	m	class:ToolWalletTest
run_test	test/functional/wallet_abandonconflict.py	/^    def run_test(self):$/;"	m	class:AbandonConflictTest
run_test	test/functional/wallet_address_types.py	/^    def run_test(self):$/;"	m	class:AddressTypeTest
run_test	test/functional/wallet_backup.py	/^    def run_test(self):$/;"	m	class:WalletBackupTest
run_test	test/functional/wallet_balance.py	/^    def run_test(self):$/;"	m	class:WalletTest
run_test	test/functional/wallet_basic.py	/^    def run_test(self):$/;"	m	class:WalletTest
run_test	test/functional/wallet_bumpfee.py	/^    def run_test(self):$/;"	m	class:BumpFeeTest
run_test	test/functional/wallet_coinbase_category.py	/^    def run_test(self):$/;"	m	class:CoinbaseCategoryTest
run_test	test/functional/wallet_create_tx.py	/^    def run_test(self):$/;"	m	class:CreateTxWalletTest
run_test	test/functional/wallet_createwallet.py	/^    def run_test(self):$/;"	m	class:CreateWalletTest
run_test	test/functional/wallet_disable.py	/^    def run_test (self):$/;"	m	class:DisableWalletTest
run_test	test/functional/wallet_dump.py	/^    def run_test(self):$/;"	m	class:WalletDumpTest
run_test	test/functional/wallet_encryption.py	/^    def run_test(self):$/;"	m	class:WalletEncryptionTest
run_test	test/functional/wallet_fallbackfee.py	/^    def run_test(self):$/;"	m	class:WalletRBFTest
run_test	test/functional/wallet_groups.py	/^    def run_test(self):$/;"	m	class:WalletGroupTest
run_test	test/functional/wallet_hd.py	/^    def run_test(self):$/;"	m	class:WalletHDTest
run_test	test/functional/wallet_import_rescan.py	/^    def run_test(self):$/;"	m	class:ImportRescanTest
run_test	test/functional/wallet_import_with_label.py	/^    def run_test(self):$/;"	m	class:ImportWithLabel
run_test	test/functional/wallet_importmulti.py	/^    def run_test(self):$/;"	m	class:ImportMultiTest
run_test	test/functional/wallet_importprunedfunds.py	/^    def run_test(self):$/;"	m	class:ImportPrunedFundsTest
run_test	test/functional/wallet_keypool.py	/^    def run_test(self):$/;"	m	class:KeyPoolTest
run_test	test/functional/wallet_keypool_topup.py	/^    def run_test(self):$/;"	m	class:KeypoolRestoreTest
run_test	test/functional/wallet_labels.py	/^    def run_test(self):$/;"	m	class:WalletLabelsTest
run_test	test/functional/wallet_listreceivedby.py	/^    def run_test(self):$/;"	m	class:ReceivedByTest
run_test	test/functional/wallet_listsinceblock.py	/^    def run_test(self):$/;"	m	class:ListSinceBlockTest
run_test	test/functional/wallet_listtransactions.py	/^    def run_test(self):$/;"	m	class:ListTransactionsTest
run_test	test/functional/wallet_multiwallet.py	/^    def run_test(self):$/;"	m	class:MultiWalletTest
run_test	test/functional/wallet_resendwallettransactions.py	/^    def run_test(self):$/;"	m	class:ResendWalletTransactionsTest
run_test	test/functional/wallet_txn_clone.py	/^    def run_test(self):$/;"	m	class:TxnMallTest
run_test	test/functional/wallet_txn_doublespend.py	/^    def run_test(self):$/;"	m	class:TxnMallTest
run_test	test/functional/wallet_zapwallettxes.py	/^    def run_test(self):$/;"	m	class:ZapWalletTXesTest
run_tests	test/functional/test_runner.py	/^def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=None, combined_logs_len=0, failfast=False, runs_ci):$/;"	f
run_wnaf	src/secp256k1/src/tests.c	/^void run_wnaf(void) {$/;"	f
running	src/httpserver.cpp	/^    bool running;$/;"	m	class:WorkQueue	file:
runtest	src/univalue/test/unitester.cpp	/^static void runtest(std::string filename, const std::string& jdata)$/;"	f	file:
runtest_file	src/univalue/test/unitester.cpp	/^static void runtest_file(const char *filename_)$/;"	f	file:
rwl	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();$/;"	f	class:NativeSecp256k1	file:
s	src/crypto/ripemd160.h	/^    uint32_t s[5];$/;"	m	class:CRIPEMD160
s	src/crypto/sha1.h	/^    uint32_t s[5];$/;"	m	class:CSHA1
s	src/crypto/sha256.h	/^    uint32_t s[8];$/;"	m	class:CSHA256
s	src/crypto/sha512.h	/^    uint64_t s[8];$/;"	m	class:CSHA512
s	src/secp256k1/src/hash.h	/^    uint32_t s[8];$/;"	m	struct:__anon111
sPaymentRequest	src/qt/walletmodel.h	/^    std::string sPaymentRequest;$/;"	m	class:SendCoinsRecipient
sanitize_string	contrib/devtools/update-translations.py	/^def sanitize_string(s):$/;"	f
sanity_test_fdelt	src/compat/glibc_sanity.cpp	/^bool sanity_test_fdelt()$/;"	f	namespace:__anon51
sanity_test_list	src/compat/glibcxx_sanity.cpp	/^bool sanity_test_list(unsigned int size)$/;"	f	namespace:__anon52
sanity_test_memcpy	src/compat/glibc_sanity.cpp	/^bool sanity_test_memcpy()$/;"	f	namespace:__anon51
sanity_test_range_fmt	src/compat/glibcxx_sanity.cpp	/^bool sanity_test_range_fmt()$/;"	f
sanity_test_widen	src/compat/glibcxx_sanity.cpp	/^bool sanity_test_widen(char testchar)$/;"	f	namespace:__anon52
satoshi_round	test/functional/feature_rbf.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round$/;"	i
satoshi_round	test/functional/test_framework/util.py	/^def satoshi_round(amount):$/;"	f
saveCurrentRow	src/qt/editaddressdialog.cpp	/^bool EditAddressDialog::saveCurrentRow()$/;"	f	class:EditAddressDialog
saveImage	src/qt/qrimagewidget.cpp	/^void QRImageWidget::saveImage()$/;"	f	class:QRImageWidget
saveReceiveRequest	src/qt/walletmodel.cpp	/^bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)$/;"	f	class:WalletModel
saveURIs	src/qt/paymentserver.h	/^    bool saveURIs;                      \/\/ true during startup$/;"	m	class:PaymentServer
save_spendable_output	test/functional/feature_block.py	/^    def save_spendable_output(self):$/;"	m	class:FullBlockTest
savedPaymentRequests	src/qt/paymentserver.cpp	/^static QList<QString> savedPaymentRequests;$/;"	v	file:
saved_key_	src/leveldb/db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon29::DBIter	file:
saved_value_	src/leveldb/db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon29::DBIter	file:
savemempool	src/rpc/blockchain.cpp	/^static UniValue savemempool(const JSONRPCRequest& request)$/;"	f	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	doc/man/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	src/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	src/secp256k1/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	src/univalue/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sc	test/functional/data/invalid_txs.py	/^from test_framework import script as sc$/;"	i
scalar	src/secp256k1/src/bench_ecdh.c	/^    unsigned char scalar[32];$/;"	m	struct:__anon108	file:
scalar_test	src/secp256k1/src/tests.c	/^void scalar_test(void) {$/;"	f
scalar_x	src/secp256k1/src/bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon109	file:
scalar_y	src/secp256k1/src/bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon109	file:
scale	src/policy/fees.cpp	/^    unsigned int scale;$/;"	m	class:TxConfirmStats	file:
scale	src/policy/fees.h	/^    unsigned int scale = 0;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
scantxoutset	src/rpc/blockchain.cpp	/^UniValue scantxoutset(const JSONRPCRequest& request)$/;"	f
schedule	src/scheduler.cpp	/^void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)$/;"	f	class:CScheduler
scheduleEvery	src/scheduler.cpp	/^void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	class:CScheduler
scheduleFromNow	src/scheduler.cpp	/^void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	class:CScheduler
scheduler	src/init.cpp	/^static CScheduler scheduler;$/;"	v	file:
scheduler	src/test/setup_common.h	/^    CScheduler scheduler;$/;"	m	struct:TestingSetup
screenWidth	src/util/system.cpp	/^static const int screenWidth = 79;$/;"	v	file:
script	src/compressor.h	/^    CScript &script;$/;"	m	class:CScriptCompressor
script	src/script/sign.cpp	/^    std::vector<valtype> script;$/;"	m	struct:__anon82::Stacks	file:
script	src/script/standard.cpp	/^    CScript *script;$/;"	m	class:__anon86::CScriptVisitor	file:
script	src/test/script_tests.cpp	/^    CScript script;$/;"	m	class:__anon58::TestBuilder	file:
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script")$/;"	i
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
script	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
scriptCode	src/script/interpreter.cpp	/^    const CScript& scriptCode; \/\/!< output script being consumed$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
scriptError	src/test/script_tests.cpp	/^    int scriptError;$/;"	m	class:__anon58::TestBuilder	file:
scriptExecutionCache	src/validation.cpp	/^static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;$/;"	v	file:
scriptPubKey	src/primitives/transaction.h	/^    CScript scriptPubKey;$/;"	m	class:CTxOut
scriptPubKey	src/wallet/wallet.h	/^    CScript scriptPubKey;$/;"	m	struct:CRecipient
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with private key")$/;"	i
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with public key")$/;"	i
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal flag")$/;"	i
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
scriptPubKey	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal flag")$/;"	i
scriptSig	src/primitives/transaction.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
scriptSig	src/script/sign.h	/^    CScript scriptSig; \/\/\/< The scriptSig of an input. Contains complete signatures or the traditional partial signatures format$/;"	m	struct:SignatureData
scriptWitness	src/primitives/transaction.h	/^    CScriptWitness scriptWitness; \/\/!< Only serialized through CTransaction$/;"	m	class:CTxIn
scriptWitness	src/script/sign.h	/^    CScriptWitness scriptWitness; \/\/\/< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.$/;"	m	struct:SignatureData
scriptWitness	src/test/script_tests.cpp	/^    CScriptWitness scriptWitness;$/;"	m	class:__anon58::TestBuilder	file:
script_errors	src/test/script_tests.cpp	/^static ScriptErrorDesc script_errors[]={$/;"	v	file:
script_prefix	contrib/testgen/gen_key_io_test_vectors.py	/^script_prefix = (OP_HASH160, 20)$/;"	v
script_suffix	contrib/testgen/gen_key_io_test_vectors.py	/^script_suffix = (OP_EQUAL,)$/;"	v
script_tests	src/test/data/script_tests.json.h	/^static unsigned const char script_tests[] = {$/;"	m	namespace:json_tests
script_to_p2sh	test/functional/test_framework/address.py	/^def script_to_p2sh(script, main = False):$/;"	f
script_to_p2sh_p2wsh	test/functional/test_framework/address.py	/^def script_to_p2sh_p2wsh(script, main = False):$/;"	f
script_to_p2wsh	test/functional/test_framework/address.py	/^def script_to_p2wsh(script, main = False):$/;"	f
script_verification_error_test	test/functional/rpc_signrawtransaction.py	/^    def script_verification_error_test(self):$/;"	m	class:SignRawTransactionsTest
scripthash_to_p2sh	test/functional/test_framework/address.py	/^def scripthash_to_p2sh(hash, main = False):$/;"	f
scriptnum10_error	src/test/scriptnum10.h	/^    explicit scriptnum10_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum10_error
scriptnum10_error	src/test/scriptnum10.h	/^class scriptnum10_error : public std::runtime_error$/;"	c
scriptnum_error	src/script/script.h	/^    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum_error
scriptnum_error	src/script/script.h	/^class scriptnum_error : public std::runtime_error$/;"	c
scripts	src/script/sign.h	/^    std::map<CScriptID, CScript> scripts;$/;"	m	struct:final
scrollToEnd	src/qt/rpcconsole.cpp	/^void RPCConsole::scrollToEnd()$/;"	f	class:RPCConsole
search_widget	src/qt/transactionview.h	/^    QLineEdit *search_widget;$/;"	m	class:TransactionView
secDelay	src/qt/sendcoinsdialog.h	/^    int secDelay;$/;"	m	class:SendConfirmationDialog
secKeyVerify	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static boolean secKeyVerify(byte[] seckey) {$/;"	m	class:NativeSecp256k1
secondToLastColumnIndex	src/qt/guiutil.h	/^            int secondToLastColumnIndex;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
seconds_	src/leveldb/db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon19::Stats	file:
secp256k1_callback	src/secp256k1/src/util.h	/^} secp256k1_callback;$/;"	t	typeref:struct:__anon107
secp256k1_callback_call	src/secp256k1/src/util.h	/^static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {$/;"	f
secp256k1_context	src/secp256k1/include/secp256k1.h	/^typedef struct secp256k1_context_struct secp256k1_context;$/;"	t	typeref:struct:secp256k1_context_struct
secp256k1_context_clone	src/secp256k1/src/secp256k1.c	/^secp256k1_context* secp256k1_context_clone(const secp256k1_context* ctx) {$/;"	f
secp256k1_context_create	src/secp256k1/src/secp256k1.c	/^secp256k1_context* secp256k1_context_create(unsigned int flags) {$/;"	f
secp256k1_context_destroy	src/secp256k1/src/secp256k1.c	/^void secp256k1_context_destroy(secp256k1_context* ctx) {$/;"	f
secp256k1_context_randomize	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native int secp256k1_context_randomize(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_context_randomize	src/secp256k1/src/secp256k1.c	/^int secp256k1_context_randomize(secp256k1_context* ctx, const unsigned char *seed32) {$/;"	f
secp256k1_context_set_error_callback	src/secp256k1/src/secp256k1.c	/^void secp256k1_context_set_error_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_set_illegal_callback	src/secp256k1/src/secp256k1.c	/^void secp256k1_context_set_illegal_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_sign	src/key.cpp	/^static secp256k1_context* secp256k1_context_sign = nullptr;$/;"	v	file:
secp256k1_context_struct	src/secp256k1/src/secp256k1.c	/^struct secp256k1_context_struct {$/;"	s	file:
secp256k1_context_verify	src/pubkey.cpp	/^secp256k1_context* secp256k1_context_verify = nullptr;$/;"	m	namespace:__anon55	file:
secp256k1_ctx_clone	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native long secp256k1_ctx_clone(long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_der_parse_integer	src/secp256k1/src/ecdsa_impl.h	/^static int secp256k1_der_parse_integer(secp256k1_scalar *r, const unsigned char **sig, const unsigned char *sigend) {$/;"	f
secp256k1_der_read_len	src/secp256k1/src/ecdsa_impl.h	/^static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned char *sigend) {$/;"	f
secp256k1_destroy_context	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native void secp256k1_destroy_context(long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_privkey_negate	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_negate(const secp256k1_context* ctx, unsigned char *seckey) {$/;"	f
secp256k1_ec_privkey_tweak_add	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_privkey_tweak_mul	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_mul(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_combine	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, const secp256k1_pubkey * const *pubnonces, size_t n) {$/;"	f
secp256k1_ec_pubkey_create	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ec_pubkey_create(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_pubkey_create	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {$/;"	f
secp256k1_ec_pubkey_negate	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_negate(const secp256k1_context* ctx, secp256k1_pubkey *pubkey) {$/;"	f
secp256k1_ec_pubkey_parse	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ec_pubkey_parse(ByteBuffer byteBuff, long context, int inputLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_pubkey_parse	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_parse(const secp256k1_context* ctx, secp256k1_pubkey* pubkey, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ec_pubkey_serialize	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {$/;"	f
secp256k1_ec_pubkey_tweak_add	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_add(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_tweak_mul	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_seckey_verify	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native int secp256k1_ec_seckey_verify(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_seckey_verify	src/secp256k1/src/secp256k1.c	/^int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {$/;"	f
secp256k1_ecdh	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ecdh(ByteBuffer byteBuff, long context, int inputLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdh	src/secp256k1/src/modules/ecdh/main_impl.h	/^int secp256k1_ecdh(const secp256k1_context* ctx, unsigned char *result, const secp256k1_pubkey *point, const unsigned char *scalar) {$/;"	f
secp256k1_ecdsa_const_order_as_fe	src/secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_const_p_minus_order	src/secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_recover	src/secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32) {$/;"	f
secp256k1_ecdsa_recoverable_signature	src/secp256k1/include/secp256k1_recovery.h	/^} secp256k1_ecdsa_recoverable_signature;$/;"	t	typeref:struct:__anon91
secp256k1_ecdsa_recoverable_signature_convert	src/secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_convert(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const secp256k1_ecdsa_recoverable_signature* sigin) {$/;"	f
secp256k1_ecdsa_recoverable_signature_load	src/secp256k1/src/modules/recovery/main_impl.h	/^static void secp256k1_ecdsa_recoverable_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, int* recid, const secp256k1_ecdsa_recoverable_signature* sig) {$/;"	f
secp256k1_ecdsa_recoverable_signature_parse_compact	src/secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature* sig, const unsigned char *input64, int recid) {$/;"	f
secp256k1_ecdsa_recoverable_signature_save	src/secp256k1/src/modules/recovery/main_impl.h	/^static void secp256k1_ecdsa_recoverable_signature_save(secp256k1_ecdsa_recoverable_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s, int recid) {$/;"	f
secp256k1_ecdsa_recoverable_signature_serialize_compact	src/secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature* sig) {$/;"	f
secp256k1_ecdsa_sig_parse	src/secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *rr, secp256k1_scalar *rs, const unsigned char *sig, size_t size) {$/;"	f
secp256k1_ecdsa_sig_recover	src/secp256k1/src/modules/recovery/main_impl.h	/^static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar* sigs, secp256k1_ge *pubkey, const secp256k1_scalar *message, int recid) {$/;"	f
secp256k1_ecdsa_sig_serialize	src/secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar* ar, const secp256k1_scalar* as) {$/;"	f
secp256k1_ecdsa_sig_sign	src/secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid) {$/;"	f
secp256k1_ecdsa_sig_verify	src/secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, const secp256k1_ge *pubkey, const secp256k1_scalar *message) {$/;"	f
secp256k1_ecdsa_sign	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ecdsa_sign(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdsa_sign	src/secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_sign_recoverable	src/secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_signature	src/secp256k1/include/secp256k1.h	/^} secp256k1_ecdsa_signature;$/;"	t	typeref:struct:__anon93
secp256k1_ecdsa_signature_load	src/secp256k1/src/secp256k1.c	/^static void secp256k1_ecdsa_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_ecdsa_signature* sig) {$/;"	f	file:
secp256k1_ecdsa_signature_normalize	src/secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_normalize(const secp256k1_context* ctx, secp256k1_ecdsa_signature *sigout, const secp256k1_ecdsa_signature *sigin) {$/;"	f
secp256k1_ecdsa_signature_parse_compact	src/secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input64) {$/;"	f
secp256k1_ecdsa_signature_parse_der	src/secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_parse_der(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ecdsa_signature_save	src/secp256k1/src/secp256k1.c	/^static void secp256k1_ecdsa_signature_save(secp256k1_ecdsa_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s) {$/;"	f	file:
secp256k1_ecdsa_signature_serialize_compact	src/secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_signature_serialize_der	src/secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_der(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_verify	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native int secp256k1_ecdsa_verify(ByteBuffer byteBuff, long context, int sigLen, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdsa_verify	src/secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_verify(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {$/;"	f
secp256k1_eckey_privkey_tweak_add	src/secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_privkey_tweak_mul	src/secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_parse	src/secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {$/;"	f
secp256k1_eckey_pubkey_serialize	src/secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {$/;"	f
secp256k1_eckey_pubkey_tweak_add	src/secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_tweak_mul	src/secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_ecmult	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {$/;"	f
secp256k1_ecmult_const	src/secp256k1/src/ecmult_const_impl.h	/^static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *scalar) {$/;"	f
secp256k1_ecmult_context	src/secp256k1/src/ecmult.h	/^} secp256k1_ecmult_context;$/;"	t	typeref:struct:__anon101
secp256k1_ecmult_context_build	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_context_clear	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_clone	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,$/;"	f
secp256k1_ecmult_context_init	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_is_built	src/secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_gen	src/secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {$/;"	f
secp256k1_ecmult_gen_blind	src/secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32) {$/;"	f
secp256k1_ecmult_gen_context	src/secp256k1/src/ecmult_gen.h	/^} secp256k1_ecmult_gen_context;$/;"	t	typeref:struct:__anon100
secp256k1_ecmult_gen_context_build	src/secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback* cb) {$/;"	f
secp256k1_ecmult_gen_context_clear	src/secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_clone	src/secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,$/;"	f
secp256k1_ecmult_gen_context_init	src/secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_is_built	src/secp256k1/src/ecmult_gen_impl.h	/^static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {$/;"	f
secp256k1_ecmult_odd_multiples_table	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_globalz_windowa	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_storage_var	src/secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_static_context	src/secp256k1/src/ecmult_static_context.h	/^static const secp256k1_ge_storage secp256k1_ecmult_static_context[64][16] = {$/;"	v
secp256k1_ecmult_wnaf	src/secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {$/;"	f
secp256k1_fe	src/secp256k1/src/field_10x26.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon94
secp256k1_fe	src/secp256k1/src/field_5x52.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon96
secp256k1_fe_add	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_add	src/secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	src/secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_cmov	src/secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmov	src/secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmp_var	src/secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_cmp_var	src/secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal	src/secp256k1/src/field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal_var	src/secp256k1/src/field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_from_storage	src/secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_from_storage	src/secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_get_b32	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_get_b32	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv	src/secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv_all_var	src/secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_all_var(secp256k1_fe *r, const secp256k1_fe *a, size_t len) {$/;"	f
secp256k1_fe_inv_var	src/secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	src/secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_quad_var	src/secp256k1/src/field_impl.h	/^static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	src/secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_mul	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	src/secp256k1/src/asm/field_10x26_arm.s	/^secp256k1_fe_mul_inner:$/;"	l
secp256k1_fe_mul_inner	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	src/secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	src/secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_int	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_mul_int	src/secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_negate	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_negate	src/secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_normalize	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	src/secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	src/secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	src/secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	src/secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_set_b32	src/secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_b32	src/secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_int	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_set_int	src/secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_sqr	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr_inner	src/secp256k1/src/asm/field_10x26_arm.s	/^secp256k1_fe_sqr_inner:$/;"	l
secp256k1_fe_sqr_inner	src/secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {$/;"	f
secp256k1_fe_sqr_inner	src/secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqr_inner	src/secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqrt	src/secp256k1/src/field_impl.h	/^static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_storage	src/secp256k1/src/field_10x26.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon95
secp256k1_fe_storage	src/secp256k1/src/field_5x52.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon97
secp256k1_fe_storage_cmov	src/secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_storage_cmov	src/secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_to_storage	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_to_storage	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	src/secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	src/secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_ge	src/secp256k1/src/group.h	/^} secp256k1_ge;$/;"	t	typeref:struct:__anon103
secp256k1_ge_clear	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_clear(secp256k1_ge *r) {$/;"	f
secp256k1_ge_const_g	src/secp256k1/src/group_impl.h	/^const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_const_g	src/secp256k1/src/group_impl.h	/^static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_from_storage	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {$/;"	f
secp256k1_ge_globalz_set_table_gej	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr) {$/;"	f
secp256k1_ge_is_infinity	src/secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_is_valid_var	src/secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_valid_var(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_mul_lambda	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_neg	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_set_all_gej_var	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_all_gej_var(secp256k1_ge *r, const secp256k1_gej *a, size_t len, const secp256k1_callback *cb) {$/;"	f
secp256k1_ge_set_gej	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_var	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_zinv	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {$/;"	f
secp256k1_ge_set_table_gej_var	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_table_gej_var(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr, size_t len) {$/;"	f
secp256k1_ge_set_xo_var	src/secp256k1/src/group_impl.h	/^static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {$/;"	f
secp256k1_ge_set_xquad	src/secp256k1/src/group_impl.h	/^static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x) {$/;"	f
secp256k1_ge_set_xy	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {$/;"	f
secp256k1_ge_storage	src/secp256k1/src/group.h	/^} secp256k1_ge_storage;$/;"	t	typeref:struct:__anon105
secp256k1_ge_storage_cmov	src/secp256k1/src/group_impl.h	/^static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {$/;"	f
secp256k1_ge_to_storage	src/secp256k1/src/group_impl.h	/^static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej	src/secp256k1/src/group.h	/^} secp256k1_gej;$/;"	t	typeref:struct:__anon104
secp256k1_gej_add_ge	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {$/;"	f
secp256k1_gej_add_ge_var	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_var	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_zinv_var	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {$/;"	f
secp256k1_gej_clear	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_clear(secp256k1_gej *r) {$/;"	f
secp256k1_gej_double_nonzero	src/secp256k1/src/group_impl.h	/^static SECP256K1_INLINE void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_double_var	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_eq_x_var	src/secp256k1/src/group_impl.h	/^static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_has_quad_y_var	src/secp256k1/src/group_impl.h	/^static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_infinity	src/secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_valid_var	src/secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_valid_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_neg	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_rescale	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {$/;"	f
secp256k1_gej_set_ge	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej_set_infinity	src/secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_infinity(secp256k1_gej *r) {$/;"	f
secp256k1_hmac_sha256_finalize	src/secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_hmac_sha256_initialize	src/secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_hmac_sha256_t	src/secp256k1/src/hash.h	/^} secp256k1_hmac_sha256_t;$/;"	t	typeref:struct:__anon112
secp256k1_hmac_sha256_write	src/secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {$/;"	f
secp256k1_init_context	src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  private static native long secp256k1_init_context();$/;"	m	class:Secp256k1Context	file:
secp256k1_nonce_function	src/secp256k1/include/secp256k1.h	/^typedef int (*secp256k1_nonce_function)($/;"	t
secp256k1_nonce_function_default	src/secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_rfc6979	src/secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_smallint	src/secp256k1/src/tests_exhaustive.c	/^int secp256k1_nonce_function_smallint(unsigned char *nonce32, const unsigned char *msg32,$/;"	f
secp256k1_num	src/secp256k1/src/num_gmp.h	/^} secp256k1_num;$/;"	t	typeref:struct:__anon110
secp256k1_num_add	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_add_abs	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_cmp	src/secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_copy	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a) {$/;"	f
secp256k1_num_eq	src/secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_get_bin	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a) {$/;"	f
secp256k1_num_is_neg	src/secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_neg(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_one	src/secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_one(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_zero	src/secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_zero(const secp256k1_num *a) {$/;"	f
secp256k1_num_jacobi	src/secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_jacobi(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_mod	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m) {$/;"	f
secp256k1_num_mod_inverse	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m) {$/;"	f
secp256k1_num_mul	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_negate	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_negate(secp256k1_num *r) {$/;"	f
secp256k1_num_sanity	src/secp256k1/src/num_gmp_impl.h	/^#define secp256k1_num_sanity(/;"	d
secp256k1_num_sanity	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sanity(const secp256k1_num *a) {$/;"	f
secp256k1_num_set_bin	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen) {$/;"	f
secp256k1_num_shift	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_shift(secp256k1_num *r, int bits) {$/;"	f
secp256k1_num_sub	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_sub_abs	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_subadd	src/secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_subadd(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b, int bneg) {$/;"	f
secp256k1_privkey_tweak_add	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_privkey_tweak_add(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_privkey_tweak_mul	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_privkey_tweak_mul(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_pubkey	src/secp256k1/include/secp256k1.h	/^} secp256k1_pubkey;$/;"	t	typeref:struct:__anon92
secp256k1_pubkey_load	src/secp256k1/src/secp256k1.c	/^static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {$/;"	f	file:
secp256k1_pubkey_save	src/secp256k1/src/secp256k1.c	/^static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {$/;"	f	file:
secp256k1_pubkey_tweak_add	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_pubkey_tweak_add(ByteBuffer byteBuff, long context, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_pubkey_tweak_mul	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_pubkey_tweak_mul(ByteBuffer byteBuff, long context, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_rand256	src/secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256(unsigned char *b32) {$/;"	f
secp256k1_rand256_test	src/secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256_test(unsigned char *b32) {$/;"	f
secp256k1_rand32	src/secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {$/;"	f
secp256k1_rand_bits	src/secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_rand_bits(int bits) {$/;"	f
secp256k1_rand_bytes_test	src/secp256k1/src/testrand_impl.h	/^static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len) {$/;"	f
secp256k1_rand_int	src/secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_rand_int(uint32_t range) {$/;"	f
secp256k1_rand_seed	src/secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16) {$/;"	f
secp256k1_rfc6979_hmac_sha256_finalize	src/secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {$/;"	f
secp256k1_rfc6979_hmac_sha256_generate	src/secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_initialize	src/secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_t	src/secp256k1/src/hash.h	/^} secp256k1_rfc6979_hmac_sha256_t;$/;"	t	typeref:struct:__anon113
secp256k1_scalar	src/secp256k1/src/scalar_4x64.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon99
secp256k1_scalar	src/secp256k1/src/scalar_8x32.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon114
secp256k1_scalar	src/secp256k1/src/scalar_low.h	/^typedef uint32_t secp256k1_scalar;$/;"	t
secp256k1_scalar_add	src/secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	src/secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	src/secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_cadd_bit	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	src/secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_check_overflow	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) { return *a >= EXHAUSTIVE_TEST_ORDER; }$/;"	f
secp256k1_scalar_clear	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) { *r = 0; }$/;"	f
secp256k1_scalar_cond_negate	src/secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	src/secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	src/secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_eq	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_get_b32	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	src/secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_bits	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_num	src/secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_get_num(secp256k1_num *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_inverse	src/secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_inverse_var	src/secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_is_even	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_even(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	src/secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	src/secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	src/secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_mul	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	src/secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_shift_var	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_mul_shift_var	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_negate	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	src/secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_order_get_num	src/secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_order_get_num(secp256k1_num *r) {$/;"	f
secp256k1_scalar_reduce	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {$/;"	f
secp256k1_scalar_reduce	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {$/;"	f
secp256k1_scalar_reduce_512	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l) {$/;"	f
secp256k1_scalar_reduce_512	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint32_t *l) {$/;"	f
secp256k1_scalar_set_b32	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	src/secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_int	src/secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	src/secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	src/secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) { *r = v; }$/;"	f
secp256k1_scalar_shr_int	src/secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	src/secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	src/secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_split_128	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	src/secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_lambda	src/secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	src/secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	src/secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	src/secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar *a) {$/;"	f
secp256k1_sha256_finalize	src/secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_sha256_initialize	src/secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {$/;"	f
secp256k1_sha256_t	src/secp256k1/src/hash.h	/^} secp256k1_sha256_t;$/;"	t	typeref:struct:__anon111
secp256k1_sha256_transform	src/secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {$/;"	f
secp256k1_sha256_write	src/secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {$/;"	f
secp256k1_test_rng	src/secp256k1/src/testrand_impl.h	/^static secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng;$/;"	v
secp256k1_test_rng_integer	src/secp256k1/src/testrand_impl.h	/^static uint64_t secp256k1_test_rng_integer;$/;"	v
secp256k1_test_rng_integer_bits_left	src/secp256k1/src/testrand_impl.h	/^static int secp256k1_test_rng_integer_bits_left = 0;$/;"	v
secp256k1_test_rng_precomputed	src/secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_test_rng_precomputed[8];$/;"	v
secp256k1_test_rng_precomputed_used	src/secp256k1/src/testrand_impl.h	/^static int secp256k1_test_rng_precomputed_used = 8;$/;"	v
secp256k1_wnaf_const	src/secp256k1/src/ecmult_const_impl.h	/^static int secp256k1_wnaf_const(int *wnaf, secp256k1_scalar s, int w) {$/;"	f
secureClearPassFields	src/qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::secureClearPassFields()$/;"	f	class:AskPassphraseDialog
secure_allocator	src/support/allocators/secure.h	/^struct secure_allocator : public std::allocator<T> {$/;"	s
seed_	src/leveldb/db/db_impl.h	/^  uint32_t seed_;                \/\/ For sampling.$/;"	m	class:leveldb::DBImpl
seed_	src/leveldb/db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	src/leveldb/util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seed_id	src/wallet/walletdb.h	/^    CKeyID seed_id; \/\/!< seed hash160$/;"	m	class:CHDChain
seek	src/serialize.h	/^    void seek(size_t _nSize)$/;"	f	class:CSizeComputer
seek_file	src/leveldb/db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	src/leveldb/db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seen_key_	src/leveldb/db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
segwit_addr	test/functional/test_framework/address.py	/^from . import segwit_addr$/;"	i
selectNewAddress	src/qt/addressbookpage.cpp	/^void AddressBookPage::selectNewAddress(const QModelIndex &parent, int begin, int \/*end*\/)$/;"	f	class:AddressBookPage
selectedRow	src/qt/receivecoinsdialog.cpp	/^QModelIndex ReceiveCoinsDialog::selectedRow()$/;"	f	class:ReceiveCoinsDialog
selectionChanged	src/qt/addressbookpage.cpp	/^void AddressBookPage::selectionChanged()$/;"	f	class:AddressBookPage
sem	src/sync.h	/^    CSemaphore* sem;$/;"	m	class:CSemaphoreGrant
sem1_	src/leveldb/port/port_win.h	/^  void * sem1_;$/;"	m	class:leveldb::port::CondVar
sem2_	src/leveldb/port/port_win.h	/^  void * sem2_;$/;"	m	class:leveldb::port::CondVar
semAddnode	src/net.h	/^    std::unique_ptr<CSemaphore> semAddnode;$/;"	m	class:CConnman
semOutbound	src/net.h	/^    std::unique_ptr<CSemaphore> semOutbound;$/;"	m	class:CConnman
sendCoins	src/qt/walletmodel.cpp	/^WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &transaction)$/;"	f	class:WalletModel
sendCoinsAction	src/qt/bitcoingui.h	/^    QAction* sendCoinsAction = nullptr;$/;"	m	class:BitcoinGUI
sendCoinsMenuAction	src/qt/bitcoingui.h	/^    QAction* sendCoinsMenuAction = nullptr;$/;"	m	class:BitcoinGUI
sendCoinsPage	src/qt/walletview.h	/^    SendCoinsDialog *sendCoinsPage;$/;"	m	class:WalletView
send_and_ping	test/functional/test_framework/mininode.py	/^    def send_and_ping(self, message, timeout=60):$/;"	m	class:P2PInterface
send_await_disconnect	test/functional/p2p_compactblocks.py	/^    def send_await_disconnect(self, message, timeout=30):$/;"	m	class:TestP2PConn
send_block_inv	test/functional/p2p_sendheaders.py	/^    def send_block_inv(self, blockhash):$/;"	m	class:BaseNode
send_block_request	test/functional/p2p_fingerprint.py	/^    def send_block_request(self, block_hash, node):$/;"	m	class:P2PFingerprintTest
send_blocks	test/functional/feature_block.py	/^    def send_blocks(self, blocks, success=True, reject_reason=None, force_send=False, reconnect=False, timeout=60):$/;"	m	class:FullBlockTest
send_blocks	test/functional/feature_csv_activation.py	/^    def send_blocks(self, blocks, success=True):$/;"	m	class:BIP68_112_113Test
send_blocks_and_test	test/functional/test_framework/mininode.py	/^    def send_blocks_and_test(self, blocks, node, *, success=True, force_send=False, reject_reason=None, expect_disconnect=False, timeout=60):$/;"	m	class:P2PDataStore
send_blocks_until_disconnected	test/functional/feature_assumevalid.py	/^    def send_blocks_until_disconnected(self, p2p_conn):$/;"	m	class:AssumeValidTest
send_blocks_with_version	test/functional/feature_versionbits_warning.py	/^    def send_blocks_with_version(self, peer, numblocks, version):$/;"	m	class:VersionBitsWarningTest
send_cli	test/functional/test_framework/test_node.py	/^    def send_cli(self, command=None, *args, **kwargs):$/;"	m	class:TestNodeCLI
send_generic_input_tx	test/functional/feature_csv_activation.py	/^def send_generic_input_tx(node, coinbases, address):$/;"	f
send_get_data	test/functional/p2p_sendheaders.py	/^    def send_get_data(self, block_hashes):$/;"	m	class:BaseNode
send_get_headers	test/functional/p2p_sendheaders.py	/^    def send_get_headers(self, locator, hashstop):$/;"	m	class:BaseNode
send_getblocks	test/functional/p2p_sendheaders.py	/^    def send_getblocks(self, locator):$/;"	m	class:BaseNode
send_getdata_for_block	test/functional/p2p_node_network_limited.py	/^    def send_getdata_for_block(self, blockhash):$/;"	m	class:P2PIgnoreInv
send_header_for_blocks	test/functional/feature_assumevalid.py	/^    def send_header_for_blocks(self, new_blocks):$/;"	m	class:BaseNode
send_header_for_blocks	test/functional/p2p_compactblocks.py	/^    def send_header_for_blocks(self, new_blocks):$/;"	m	class:TestP2PConn
send_header_for_blocks	test/functional/p2p_sendheaders.py	/^    def send_header_for_blocks(self, new_blocks):$/;"	m	class:BaseNode
send_header_request	test/functional/p2p_fingerprint.py	/^    def send_header_request(self, block_hash, node):$/;"	m	class:P2PFingerprintTest
send_message	test/functional/test_framework/mininode.py	/^    def send_message(self, message):$/;"	m	class:P2PConnection
send_raw_message	test/functional/test_framework/mininode.py	/^    def send_raw_message(self, raw_message_bytes):$/;"	m	class:P2PConnection
send_to_witness	test/functional/feature_segwit.py	/^from test_framework.blocktools import witness_script, send_to_witness$/;"	i
send_to_witness	test/functional/test_framework/blocktools.py	/^def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=""):$/;"	f
send_to_witness	test/functional/wallet_bumpfee.py	/^from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness$/;"	i
send_txs_and_test	test/functional/test_framework/mininode.py	/^    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_reason=None):$/;"	m	class:P2PDataStore
sendmany	src/wallet/rpcwallet.cpp	/^static UniValue sendmany(const JSONRPCRequest& request)$/;"	f	file:
sendrawtransaction	src/rpc/rawtransaction.cpp	/^static UniValue sendrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
sendtoaddress	src/wallet/rpcwallet.cpp	/^static UniValue sendtoaddress(const JSONRPCRequest& request)$/;"	f	file:
separatorAlways	src/qt/bitcoinunits.h	/^        separatorAlways$/;"	e	enum:BitcoinUnits::SeparatorStyle
separatorNever	src/qt/bitcoinunits.h	/^        separatorNever,$/;"	e	enum:BitcoinUnits::SeparatorStyle
separatorStandard	src/qt/bitcoinunits.h	/^        separatorStandard,$/;"	e	enum:BitcoinUnits::SeparatorStyle
sequence	src/leveldb/db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	src/leveldb/db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon29::DBIter	file:
sequence_	src/leveldb/db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon22::MemTableInserter	file:
ser_compact_size	test/functional/test_framework/messages.py	/^def ser_compact_size(l):$/;"	f
ser_double_to_uint64	src/serialize.h	/^inline uint64_t ser_double_to_uint64(double x)$/;"	f
ser_float_to_uint32	src/serialize.h	/^inline uint32_t ser_float_to_uint32(float x)$/;"	f
ser_readdata16	src/serialize.h	/^template<typename Stream> inline uint16_t ser_readdata16(Stream &s)$/;"	f
ser_readdata16be	src/serialize.h	/^template<typename Stream> inline uint16_t ser_readdata16be(Stream &s)$/;"	f
ser_readdata32	src/serialize.h	/^template<typename Stream> inline uint32_t ser_readdata32(Stream &s)$/;"	f
ser_readdata32be	src/serialize.h	/^template<typename Stream> inline uint32_t ser_readdata32be(Stream &s)$/;"	f
ser_readdata64	src/serialize.h	/^template<typename Stream> inline uint64_t ser_readdata64(Stream &s)$/;"	f
ser_readdata8	src/serialize.h	/^template<typename Stream> inline uint8_t ser_readdata8(Stream &s)$/;"	f
ser_string	test/functional/test_framework/messages.py	/^def ser_string(s):$/;"	f
ser_string	test/functional/test_framework/script.py	/^from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string$/;"	i
ser_string_vector	test/functional/test_framework/messages.py	/^def ser_string_vector(l):$/;"	f
ser_uint256	test/functional/p2p_compactblocks.py	/^from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex$/;"	i
ser_uint256	test/functional/test_framework/messages.py	/^def ser_uint256(u):$/;"	f
ser_uint256	test/functional/test_framework/script.py	/^from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string$/;"	i
ser_uint256_vector	test/functional/test_framework/messages.py	/^def ser_uint256_vector(l):$/;"	f
ser_uint32_to_float	src/serialize.h	/^inline float ser_uint32_to_float(uint32_t y)$/;"	f
ser_uint64_to_double	src/serialize.h	/^inline double ser_uint64_to_double(uint64_t y)$/;"	f
ser_vector	test/functional/test_framework/messages.py	/^def ser_vector(l, ser_function_name=None):$/;"	f
ser_writedata16	src/serialize.h	/^template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)$/;"	f
ser_writedata16be	src/serialize.h	/^template<typename Stream> inline void ser_writedata16be(Stream &s, uint16_t obj)$/;"	f
ser_writedata32	src/serialize.h	/^template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)$/;"	f
ser_writedata32be	src/serialize.h	/^template<typename Stream> inline void ser_writedata32be(Stream &s, uint32_t obj)$/;"	f
ser_writedata64	src/serialize.h	/^template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)$/;"	f
ser_writedata8	src/serialize.h	/^template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)$/;"	f
serialize	src/script/script.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum
serialize	src/test/scriptnum10.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum10
serialize	test/functional/feature_block.py	/^    def serialize(self, with_witness=False):$/;"	m	class:CBrokenBlock
serialize	test/functional/p2p_invalid_messages.py	/^    def serialize(self):$/;"	m	class:msg_unrecognized
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:BlockTransactionsRequest
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CBlockHeader
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CBlockLocator
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CInv
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CMerkleBlock
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:COutPoint
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CPartialMerkleTree
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CTransaction
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CTxIn
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CTxInWitness
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CTxOut
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:CTxWitness
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:P2PHeaderAndShortWitnessIDs
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_addr
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_block
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_blocktxn
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_cmpctblock
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_feefilter
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_generic
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_getaddr
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_getblocks
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_getblocktxn
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_getdata
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_getheaders
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_headers
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_inv
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_mempool
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_notfound
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_ping
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_pong
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_reject
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_sendcmpct
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_sendheaders
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_tx
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_verack
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_version
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_witness_block
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_witness_blocktxn
serialize	test/functional/test_framework/messages.py	/^    def serialize(self):$/;"	m	class:msg_witness_tx
serialize	test/functional/test_framework/messages.py	/^    def serialize(self, with_time=True):$/;"	m	class:CAddress
serialize	test/functional/test_framework/messages.py	/^    def serialize(self, with_witness=False):$/;"	m	class:P2PHeaderAndShortIDs
serialize	test/functional/test_framework/messages.py	/^    def serialize(self, with_witness=True):$/;"	m	class:BlockTransactions
serialize	test/functional/test_framework/messages.py	/^    def serialize(self, with_witness=True):$/;"	m	class:CBlock
serialize	test/functional/test_framework/messages.py	/^    def serialize(self, with_witness=True):$/;"	m	class:PrefilledTransaction
serialize_script_num	test/functional/test_framework/blocktools.py	/^def serialize_script_num(value):$/;"	f
serialize_with_bogus_witness	test/functional/p2p_segwit.py	/^        def serialize_with_bogus_witness(tx):$/;"	f	function:SegWitTest.test_superfluous_witness
serialize_with_witness	test/functional/p2p_segwit.py	/^            def serialize_with_witness(self):$/;"	m	class:SegWitTest.test_witness_input_length.BrokenCTransaction
serialize_with_witness	test/functional/test_framework/messages.py	/^    def serialize_with_witness(self):$/;"	m	class:CTransaction
serialize_with_witness	test/functional/test_framework/messages.py	/^    def serialize_with_witness(self):$/;"	m	class:PrefilledTransaction
serialize_without_witness	test/functional/test_framework/messages.py	/^    def serialize_without_witness(self):$/;"	m	class:CTransaction
serialize_without_witness	test/functional/test_framework/messages.py	/^    def serialize_without_witness(self):$/;"	m	class:PrefilledTransaction
service	src/torcontrol.cpp	/^    CService service;$/;"	m	class:TorController	file:
serviceQueue	src/scheduler.cpp	/^void CScheduler::serviceQueue()$/;"	f	class:CScheduler
service_id	src/torcontrol.cpp	/^    std::string service_id;$/;"	m	class:TorController	file:
set	test/functional/test_framework/key.py	/^    def set(self, data):$/;"	m	class:ECPubKey
set	test/functional/test_framework/key.py	/^    def set(self, secret, compressed):$/;"	m	class:ECKey
setAbandoned	src/wallet/wallet.h	/^    void setAbandoned() { hashBlock = ABANDON_HASH; }$/;"	f	class:CMerkleTx
setAddress	src/qt/editaddressdialog.cpp	/^void EditAddressDialog::setAddress(const QString &_address)$/;"	f	class:EditAddressDialog
setAddress	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setAddress(const QString &address)$/;"	f	class:SendCoinsDialog
setAddress	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setAddress(const QString &address)$/;"	f	class:SendCoinsEntry
setAddress_SM	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_SM(const QString &address)$/;"	f	class:SignVerifyMessageDialog
setAddress_VM	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_VM(const QString &address)$/;"	f	class:SignVerifyMessageDialog
setAmount	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setAmount(const CAmount &amount)$/;"	f	class:SendCoinsEntry
setArray	src/univalue/lib/univalue.cpp	/^bool UniValue::setArray()$/;"	f	class:UniValue
setBalance	src/qt/overviewpage.cpp	/^void OverviewPage::setBalance(const interfaces::WalletBalances& balances)$/;"	f	class:OverviewPage
setBalance	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setBalance(const interfaces::WalletBalances& balances)$/;"	f	class:SendCoinsDialog
setBitcoinGUI	src/qt/walletview.cpp	/^void WalletView::setBitcoinGUI(BitcoinGUI *gui)$/;"	f	class:WalletView
setBlockIndexCandidates	src/validation.cpp	/^    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;$/;"	m	class:CChainState	file:
setBool	src/univalue/lib/univalue.cpp	/^bool UniValue::setBool(bool val_)$/;"	f	class:UniValue
setCheckValidator	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setCheckValidator(const QValidator *v)$/;"	f	class:QValidatedLineEdit
setClientModel	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setClientModel(ClientModel *_clientModel)$/;"	f	class:BitcoinGUI
setClientModel	src/qt/overviewpage.cpp	/^void OverviewPage::setClientModel(ClientModel *model)$/;"	f	class:OverviewPage
setClientModel	src/qt/rpcconsole.cpp	/^void RPCConsole::setClientModel(ClientModel *model)$/;"	f	class:RPCConsole
setClientModel	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setClientModel(ClientModel *_clientModel)$/;"	f	class:SendCoinsDialog
setClientModel	src/qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::setClientModel(ClientModel *model)$/;"	f	class:TrafficGraphWidget
setClientModel	src/qt/walletframe.cpp	/^void WalletFrame::setClientModel(ClientModel *_clientModel)$/;"	f	class:WalletFrame
setClientModel	src/qt/walletview.cpp	/^void WalletView::setClientModel(ClientModel *_clientModel)$/;"	f	class:WalletView
setClipboard	src/qt/guiutil.cpp	/^void setClipboard(const QString& str)$/;"	f	namespace:GUIUtil
setCurrentTab	src/qt/optionsdialog.cpp	/^void OptionsDialog::setCurrentTab(OptionsDialog::Tab tab)$/;"	f	class:OptionsDialog
setCurrentWallet	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setCurrentWallet(WalletModel* wallet_model)$/;"	f	class:BitcoinGUI
setCurrentWallet	src/qt/walletframe.cpp	/^void WalletFrame::setCurrentWallet(WalletModel* wallet_model)$/;"	f	class:WalletFrame
setCurrentWalletBySelectorIndex	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setCurrentWalletBySelectorIndex(int index)$/;"	f	class:BitcoinGUI
setData	src/qt/addresstablemodel.cpp	/^bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value, int role)$/;"	f	class:AddressTableModel
setData	src/qt/optionsmodel.cpp	/^bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)$/;"	f	class:OptionsModel
setData	src/qt/recentrequeststablemodel.cpp	/^bool RecentRequestsTableModel::setData(const QModelIndex &index, const QVariant &value, int role)$/;"	f	class:RecentRequestsTableModel
setDataDirectory	src/qt/intro.cpp	/^void Intro::setDataDirectory(const QString &dataDir)$/;"	f	class:Intro
setDateRange	src/qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setDateRange(const QDateTime &from, const QDateTime &to)$/;"	f	class:TransactionFilterProxy
setDirtyBlockIndex	src/validation.cpp	/^    std::set<CBlockIndex*> setDirtyBlockIndex;$/;"	m	namespace:__anon50	file:
setDirtyFileInfo	src/validation.cpp	/^    std::set<int> setDirtyFileInfo;$/;"	m	namespace:__anon50	file:
setDisplayUnit	src/qt/bitcoinamountfield.cpp	/^    void setDisplayUnit(int unit)$/;"	f	class:AmountSpinBox
setDisplayUnit	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setDisplayUnit(int newUnit)$/;"	f	class:BitcoinAmountField
setDisplayUnit	src/qt/optionsmodel.cpp	/^void OptionsModel::setDisplayUnit(const QVariant &value)$/;"	f	class:OptionsModel
setEnabled	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setEnabled(bool fEnabled)$/;"	f	class:BitcoinAmountField
setEnabled	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setEnabled(bool enabled)$/;"	f	class:QValidatedLineEdit
setEncryptionStatus	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setEncryptionStatus(int status)$/;"	f	class:BitcoinGUI
setEntries	src/txmempool.h	/^    typedef std::set<txiter, CompareIteratorByHash> setEntries;$/;"	t	class:CTxMemPool
setExpect	src/univalue/lib/univalue_read.cpp	/^#define setExpect(/;"	d	file:
setFloat	src/univalue/lib/univalue.cpp	/^bool UniValue::setFloat(double val_)$/;"	f	class:UniValue
setFocus	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setFocus()$/;"	f	class:SendCoinsEntry
setFontSize	src/qt/rpcconsole.cpp	/^void RPCConsole::setFontSize(int newSize)$/;"	f	class:RPCConsole
setGraphRangeMins	src/qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::setGraphRangeMins(int mins)$/;"	f	class:TrafficGraphWidget
setHDStatus	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setHDStatus(bool privkeyDisabled, int hdEnabled)$/;"	f	class:BitcoinGUI
setInfo	src/qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::setInfo(const SendCoinsRecipient &_info)$/;"	f	class:ReceiveRequestDialog
setInt	src/univalue/include/univalue.h	/^    bool setInt(int val_) { return setInt((int64_t)val_); }$/;"	f	class:UniValue
setInt	src/univalue/lib/univalue.cpp	/^bool UniValue::setInt(int64_t val_)$/;"	f	class:UniValue
setInt	src/univalue/lib/univalue.cpp	/^bool UniValue::setInt(uint64_t val_)$/;"	f	class:UniValue
setInventoryTxToSend	src/net.h	/^    std::set<uint256> setInventoryTxToSend;$/;"	m	class:CNode
setKnown	src/net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setKnownBestHeight	src/qt/modaloverlay.cpp	/^void ModalOverlay::setKnownBestHeight(int count, const QDateTime& blockDate)$/;"	f	class:ModalOverlay
setLimit	src/qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setLimit(int limit)$/;"	f	class:TransactionFilterProxy
setMapper	src/qt/optionsdialog.cpp	/^void OptionsDialog::setMapper()$/;"	f	class:OptionsDialog
setMempoolSize	src/qt/rpcconsole.cpp	/^void RPCConsole::setMempoolSize(long numberOfTxs, size_t dynUsage)$/;"	f	class:RPCConsole
setMinAmount	src/qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setMinAmount(const CAmount& minimum)$/;"	f	class:TransactionFilterProxy
setModel	src/qt/addressbookpage.cpp	/^void AddressBookPage::setModel(AddressTableModel *_model)$/;"	f	class:AddressBookPage
setModel	src/qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::setModel(WalletModel *_model)$/;"	f	class:AskPassphraseDialog
setModel	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::setModel(WalletModel *_model)$/;"	f	class:CoinControlDialog
setModel	src/qt/csvmodelwriter.cpp	/^void CSVModelWriter::setModel(const QAbstractItemModel *_model)$/;"	f	class:CSVModelWriter
setModel	src/qt/editaddressdialog.cpp	/^void EditAddressDialog::setModel(AddressTableModel *_model)$/;"	f	class:EditAddressDialog
setModel	src/qt/optionsdialog.cpp	/^void OptionsDialog::setModel(OptionsModel *_model)$/;"	f	class:OptionsDialog
setModel	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::setModel(WalletModel *_model)$/;"	f	class:ReceiveCoinsDialog
setModel	src/qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::setModel(WalletModel *_model)$/;"	f	class:ReceiveRequestDialog
setModel	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setModel(WalletModel *_model)$/;"	f	class:SendCoinsDialog
setModel	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setModel(WalletModel *_model)$/;"	f	class:SendCoinsEntry
setModel	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setModel(WalletModel *_model)$/;"	f	class:SignVerifyMessageDialog
setModel	src/qt/transactionview.cpp	/^void TransactionView::setModel(WalletModel *_model)$/;"	f	class:TransactionView
setNetworkActive	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setNetworkActive(bool networkActive)$/;"	f	class:BitcoinGUI
setNetworkActive	src/qt/rpcconsole.cpp	/^void RPCConsole::setNetworkActive(bool networkActive)$/;"	f	class:RPCConsole
setNull	src/univalue/lib/univalue.cpp	/^bool UniValue::setNull()$/;"	f	class:UniValue
setNumBlocks	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)$/;"	f	class:BitcoinGUI
setNumBlocks	src/qt/rpcconsole.cpp	/^void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers)$/;"	f	class:RPCConsole
setNumConnections	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setNumConnections(int count)$/;"	f	class:BitcoinGUI
setNumConnections	src/qt/rpcconsole.cpp	/^void RPCConsole::setNumConnections(int count)$/;"	f	class:RPCConsole
setNumStr	src/univalue/lib/univalue.cpp	/^bool UniValue::setNumStr(const std::string& val_)$/;"	f	class:UniValue
setObject	src/univalue/lib/univalue.cpp	/^bool UniValue::setObject()$/;"	f	class:UniValue
setOkButtonState	src/qt/optionsdialog.cpp	/^void OptionsDialog::setOkButtonState(bool fState)$/;"	f	class:OptionsDialog
setOptionsModel	src/qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::setOptionsModel(OptionsModel *_optionsModel)$/;"	f	class:UnitDisplayStatusBarControl
setOptionsModel	src/qt/paymentserver.cpp	/^void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)$/;"	f	class:PaymentServer
setProcessingQueuedTransactions	src/qt/transactiontablemodel.h	/^    void setProcessingQueuedTransactions(bool value) { fProcessingQueuedTransactions = value; }$/;"	f	class:TransactionTableModel
setQR	src/qt/qrimagewidget.cpp	/^bool QRImageWidget::setQR(const QString& data, const QString& text)$/;"	f	class:QRImageWidget
setReadOnly	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setReadOnly(bool fReadOnly)$/;"	f	class:BitcoinAmountField
setRestartRequired	src/qt/optionsmodel.cpp	/^void OptionsModel::setRestartRequired(bool fRequired)$/;"	f	class:OptionsModel
setRole	src/qt/qvaluecombobox.cpp	/^void QValueComboBox::setRole(int _role)$/;"	f	class:QValueComboBox
setSanityCheck	src/txmempool.h	/^    void setSanityCheck(double dFrequency = 1.0) { LOCK(cs); nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }$/;"	f	class:CTxMemPool
setSearchString	src/qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setSearchString(const QString &search_string)$/;"	f	class:TransactionFilterProxy
setSelected	src/wallet/coincontrol.h	/^    std::set<COutPoint> setSelected;$/;"	m	class:CCoinControl
setShowInactive	src/qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setShowInactive(bool _showInactive)$/;"	f	class:TransactionFilterProxy
setSingleStep	src/qt/bitcoinamountfield.cpp	/^    void setSingleStep(const CAmount& step)$/;"	f	class:AmountSpinBox
setSingleStep	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setSingleStep(const CAmount& step)$/;"	f	class:BitcoinAmountField
setStatus	src/qt/intro.cpp	/^void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable)$/;"	f	class:Intro
setStr	src/univalue/lib/univalue.cpp	/^bool UniValue::setStr(const std::string& val_)$/;"	f	class:UniValue
setTabFocus	src/qt/rpcconsole.cpp	/^void RPCConsole::setTabFocus(enum TabTypes tabType)$/;"	f	class:RPCConsole
setTrafficGraphRange	src/qt/rpcconsole.cpp	/^void RPCConsole::setTrafficGraphRange(int mins)$/;"	f	class:RPCConsole
setTransactionFee	src/qt/walletmodeltransaction.cpp	/^void WalletModelTransaction::setTransactionFee(const CAmount& newFee)$/;"	f	class:WalletModelTransaction
setTrayIconVisible	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setTrayIconVisible(bool fHideTrayIcon)$/;"	f	class:BitcoinGUI
setTypeFilter	src/qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setTypeFilter(quint32 modes)$/;"	f	class:TransactionFilterProxy
setUp	test/util/rpcauth-test.py	/^    def setUp(self):$/;"	m	class:TestRPCAuth
setValid	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setValid(bool valid)$/;"	f	class:BitcoinAmountField
setValid	src/qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setValid(bool _valid)$/;"	f	class:QValidatedLineEdit
setValid	src/script/sigcache.cpp	/^    map_type setValid;$/;"	m	class:__anon84::CSignatureCache	file:
setValue	src/qt/bitcoinamountfield.cpp	/^    void setValue(const CAmount& value)$/;"	f	class:AmountSpinBox
setValue	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setValue(const CAmount& value)$/;"	f	class:BitcoinAmountField
setValue	src/qt/qvaluecombobox.cpp	/^void QValueComboBox::setValue(const QVariant &value)$/;"	f	class:QValueComboBox
setValue	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setValue(const SendCoinsRecipient &value)$/;"	f	class:SendCoinsEntry
setViewHeaderResizeMode	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
setWalletActionsEnabled	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setWalletActionsEnabled(bool enabled)$/;"	f	class:BitcoinGUI
setWalletController	src/qt/bitcoingui.cpp	/^void BitcoinGUI::setWalletController(WalletController* wallet_controller)$/;"	f	class:BitcoinGUI
setWalletEncrypted	src/qt/walletmodel.cpp	/^bool WalletModel::setWalletEncrypted(bool encrypted, const SecureString &passphrase)$/;"	f	class:WalletModel
setWalletLocked	src/qt/walletmodel.cpp	/^bool WalletModel::setWalletLocked(bool locked, const SecureString &passPhrase)$/;"	f	class:WalletModel
setWalletModel	src/qt/overviewpage.cpp	/^void OverviewPage::setWalletModel(WalletModel *model)$/;"	f	class:OverviewPage
setWalletModel	src/qt/walletview.cpp	/^void WalletView::setWalletModel(WalletModel *_walletModel)$/;"	f	class:WalletView
setWatchOnlyFilter	src/qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setWatchOnlyFilter(WatchOnlyFilter filter)$/;"	f	class:TransactionFilterProxy
set_base_from	build-aux/depcomp	/^set_base_from ()$/;"	f
set_base_from	src/secp256k1/build-aux/depcomp	/^set_base_from ()$/;"	f
set_base_from	src/univalue/build-aux/depcomp	/^set_base_from ()$/;"	f
set_dir_from	build-aux/depcomp	/^set_dir_from ()$/;"	f
set_dir_from	src/secp256k1/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_dir_from	src/univalue/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_error	src/script/bitcoinconsensus.cpp	/^inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)$/;"	f	namespace:__anon81
set_error	src/script/interpreter.cpp	/^inline bool set_error(ScriptError* ret, const ScriptError serror)$/;"	f	namespace:__anon76
set_index_handle	src/leveldb/table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	src/leveldb/table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_node_times	test/functional/test_framework/util.py	/^def set_node_times(nodes, t):$/;"	f
set_null	test/functional/test_framework/messages.py	/^    def set_null(self):$/;"	m	class:CBlockHeader
set_offset	src/leveldb/table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	src/leveldb/table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
set_success	src/script/interpreter.cpp	/^inline bool set_success(ScriptError* ret)$/;"	f	namespace:__anon76
set_test_params	test/functional/create_cache.py	/^    def set_test_params(self):$/;"	m	class:CreateCache
set_test_params	test/functional/example_test.py	/^    def set_test_params(self):$/;"	m	class:ExampleTest
set_test_params	test/functional/feature_assumevalid.py	/^    def set_test_params(self):$/;"	m	class:AssumeValidTest
set_test_params	test/functional/feature_bip68_sequence.py	/^    def set_test_params(self):$/;"	m	class:BIP68Test
set_test_params	test/functional/feature_block.py	/^    def set_test_params(self):$/;"	m	class:FullBlockTest
set_test_params	test/functional/feature_blocksdir.py	/^    def set_test_params(self):$/;"	m	class:BlocksdirTest
set_test_params	test/functional/feature_cltv.py	/^    def set_test_params(self):$/;"	m	class:BIP65Test
set_test_params	test/functional/feature_config_args.py	/^    def set_test_params(self):$/;"	m	class:ConfArgsTest
set_test_params	test/functional/feature_csv_activation.py	/^    def set_test_params(self):$/;"	m	class:BIP68_112_113Test
set_test_params	test/functional/feature_dbcrash.py	/^    def set_test_params(self):$/;"	m	class:ChainstateWriteCrashTest
set_test_params	test/functional/feature_dersig.py	/^    def set_test_params(self):$/;"	m	class:BIP66Test
set_test_params	test/functional/feature_fee_estimation.py	/^    def set_test_params(self):$/;"	m	class:EstimateFeeTest
set_test_params	test/functional/feature_filelock.py	/^    def set_test_params(self):$/;"	m	class:FilelockTest
set_test_params	test/functional/feature_help.py	/^    def set_test_params(self):$/;"	m	class:HelpTest
set_test_params	test/functional/feature_includeconf.py	/^    def set_test_params(self):$/;"	m	class:IncludeConfTest
set_test_params	test/functional/feature_logging.py	/^    def set_test_params(self):$/;"	m	class:LoggingTest
set_test_params	test/functional/feature_maxuploadtarget.py	/^    def set_test_params(self):$/;"	m	class:MaxUploadTest
set_test_params	test/functional/feature_minchainwork.py	/^    def set_test_params(self):$/;"	m	class:MinimumChainWorkTest
set_test_params	test/functional/feature_notifications.py	/^    def set_test_params(self):$/;"	m	class:NotificationsTest
set_test_params	test/functional/feature_nulldummy.py	/^    def set_test_params(self):$/;"	m	class:NULLDUMMYTest
set_test_params	test/functional/feature_proxy.py	/^    def set_test_params(self):$/;"	m	class:ProxyTest
set_test_params	test/functional/feature_pruning.py	/^    def set_test_params(self):$/;"	m	class:PruneTest
set_test_params	test/functional/feature_rbf.py	/^    def set_test_params(self):$/;"	m	class:ReplaceByFeeTest
set_test_params	test/functional/feature_reindex.py	/^    def set_test_params(self):$/;"	m	class:ReindexTest
set_test_params	test/functional/feature_segwit.py	/^    def set_test_params(self):$/;"	m	class:SegWitTest
set_test_params	test/functional/feature_shutdown.py	/^    def set_test_params(self):$/;"	m	class:ShutdownTest
set_test_params	test/functional/feature_uacomment.py	/^    def set_test_params(self):$/;"	m	class:UacommentTest
set_test_params	test/functional/feature_versionbits_warning.py	/^    def set_test_params(self):$/;"	m	class:VersionBitsWarningTest
set_test_params	test/functional/interface_bitcoin_cli.py	/^    def set_test_params(self):$/;"	m	class:TestBitcoinCli
set_test_params	test/functional/interface_http.py	/^    def set_test_params(self):$/;"	m	class:HTTPBasicsTest
set_test_params	test/functional/interface_rest.py	/^    def set_test_params(self):$/;"	m	class:RESTTest
set_test_params	test/functional/interface_rpc.py	/^    def set_test_params(self):$/;"	m	class:RPCInterfaceTest
set_test_params	test/functional/interface_zmq.py	/^    def set_test_params(self):$/;"	m	class:ZMQTest
set_test_params	test/functional/mempool_accept.py	/^    def set_test_params(self):$/;"	m	class:MempoolAcceptanceTest
set_test_params	test/functional/mempool_limit.py	/^    def set_test_params(self):$/;"	m	class:MempoolLimitTest
set_test_params	test/functional/mempool_packages.py	/^    def set_test_params(self):$/;"	m	class:MempoolPackagesTest
set_test_params	test/functional/mempool_persist.py	/^    def set_test_params(self):$/;"	m	class:MempoolPersistTest
set_test_params	test/functional/mempool_reorg.py	/^    def set_test_params(self):$/;"	m	class:MempoolCoinbaseTest
set_test_params	test/functional/mempool_resurrect.py	/^    def set_test_params(self):$/;"	m	class:MempoolCoinbaseTest
set_test_params	test/functional/mempool_spend_coinbase.py	/^    def set_test_params(self):$/;"	m	class:MempoolSpendCoinbaseTest
set_test_params	test/functional/mining_basic.py	/^    def set_test_params(self):$/;"	m	class:MiningTest
set_test_params	test/functional/mining_getblocktemplate_longpoll.py	/^    def set_test_params(self):$/;"	m	class:GetBlockTemplateLPTest
set_test_params	test/functional/mining_prioritisetransaction.py	/^    def set_test_params(self):$/;"	m	class:PrioritiseTransactionTest
set_test_params	test/functional/p2p_blocksonly.py	/^    def set_test_params(self):$/;"	m	class:P2PBlocksOnly
set_test_params	test/functional/p2p_compactblocks.py	/^    def set_test_params(self):$/;"	m	class:CompactBlocksTest
set_test_params	test/functional/p2p_disconnect_ban.py	/^    def set_test_params(self):$/;"	m	class:DisconnectBanTest
set_test_params	test/functional/p2p_feefilter.py	/^    def set_test_params(self):$/;"	m	class:FeeFilterTest
set_test_params	test/functional/p2p_fingerprint.py	/^    def set_test_params(self):$/;"	m	class:P2PFingerprintTest
set_test_params	test/functional/p2p_invalid_block.py	/^    def set_test_params(self):$/;"	m	class:InvalidBlockRequestTest
set_test_params	test/functional/p2p_invalid_locator.py	/^    def set_test_params(self):$/;"	m	class:InvalidLocatorTest
set_test_params	test/functional/p2p_invalid_messages.py	/^    def set_test_params(self):$/;"	m	class:InvalidMessagesTest
set_test_params	test/functional/p2p_invalid_tx.py	/^    def set_test_params(self):$/;"	m	class:InvalidTxRequestTest
set_test_params	test/functional/p2p_leak.py	/^    def set_test_params(self):$/;"	m	class:P2PLeakTest
set_test_params	test/functional/p2p_leak_tx.py	/^    def set_test_params(self):$/;"	m	class:P2PLeakTxTest
set_test_params	test/functional/p2p_mempool.py	/^    def set_test_params(self):$/;"	m	class:P2PMempoolTests
set_test_params	test/functional/p2p_node_network_limited.py	/^    def set_test_params(self):$/;"	m	class:NodeNetworkLimitedTest
set_test_params	test/functional/p2p_segwit.py	/^    def set_test_params(self):$/;"	m	class:SegWitTest
set_test_params	test/functional/p2p_sendheaders.py	/^    def set_test_params(self):$/;"	m	class:SendHeadersTest
set_test_params	test/functional/p2p_timeouts.py	/^    def set_test_params(self):$/;"	m	class:TimeoutsTest
set_test_params	test/functional/p2p_unrequested_blocks.py	/^    def set_test_params(self):$/;"	m	class:AcceptBlockTest
set_test_params	test/functional/rpc_bind.py	/^    def set_test_params(self):$/;"	m	class:RPCBindTest
set_test_params	test/functional/rpc_blockchain.py	/^    def set_test_params(self):$/;"	m	class:BlockchainTest
set_test_params	test/functional/rpc_createmultisig.py	/^    def set_test_params(self):$/;"	m	class:RpcCreateMultiSigTest
set_test_params	test/functional/rpc_decodescript.py	/^    def set_test_params(self):$/;"	m	class:DecodeScriptTest
set_test_params	test/functional/rpc_deprecated.py	/^    def set_test_params(self):$/;"	m	class:DeprecatedRpcTest
set_test_params	test/functional/rpc_deriveaddresses.py	/^    def set_test_params(self):$/;"	m	class:DeriveaddressesTest
set_test_params	test/functional/rpc_fundrawtransaction.py	/^    def set_test_params(self):$/;"	m	class:RawTransactionsTest
set_test_params	test/functional/rpc_getblockfilter.py	/^    def set_test_params(self):$/;"	m	class:GetBlockFilterTest
set_test_params	test/functional/rpc_getblockstats.py	/^    def set_test_params(self):$/;"	m	class:GetblockstatsTest
set_test_params	test/functional/rpc_getchaintips.py	/^    def set_test_params(self):$/;"	m	class:GetChainTipsTest
set_test_params	test/functional/rpc_help.py	/^    def set_test_params(self):$/;"	m	class:HelpRpcTest
set_test_params	test/functional/rpc_invalidateblock.py	/^    def set_test_params(self):$/;"	m	class:InvalidateTest
set_test_params	test/functional/rpc_misc.py	/^    def set_test_params(self):$/;"	m	class:RpcMiscTest
set_test_params	test/functional/rpc_named_arguments.py	/^    def set_test_params(self):$/;"	m	class:NamedArgumentTest
set_test_params	test/functional/rpc_net.py	/^    def set_test_params(self):$/;"	m	class:NetTest
set_test_params	test/functional/rpc_preciousblock.py	/^    def set_test_params(self):$/;"	m	class:PreciousTest
set_test_params	test/functional/rpc_psbt.py	/^    def set_test_params(self):$/;"	m	class:PSBTTest
set_test_params	test/functional/rpc_rawtransaction.py	/^    def set_test_params(self):$/;"	m	class:RawTransactionsTest
set_test_params	test/functional/rpc_scantxoutset.py	/^    def set_test_params(self):$/;"	m	class:ScantxoutsetTest
set_test_params	test/functional/rpc_signmessage.py	/^    def set_test_params(self):$/;"	m	class:SignMessagesTest
set_test_params	test/functional/rpc_signrawtransaction.py	/^    def set_test_params(self):$/;"	m	class:SignRawTransactionsTest
set_test_params	test/functional/rpc_txoutproof.py	/^    def set_test_params(self):$/;"	m	class:MerkleBlockTest
set_test_params	test/functional/rpc_uptime.py	/^    def set_test_params(self):$/;"	m	class:UptimeTest
set_test_params	test/functional/rpc_users.py	/^    def set_test_params(self):$/;"	m	class:HTTPBasicsTest
set_test_params	test/functional/test_framework/test_framework.py	/^    def set_test_params(self):$/;"	m	class:BitcoinTestFramework
set_test_params	test/functional/tool_wallet.py	/^    def set_test_params(self):$/;"	m	class:ToolWalletTest
set_test_params	test/functional/wallet_abandonconflict.py	/^    def set_test_params(self):$/;"	m	class:AbandonConflictTest
set_test_params	test/functional/wallet_address_types.py	/^    def set_test_params(self):$/;"	m	class:AddressTypeTest
set_test_params	test/functional/wallet_backup.py	/^    def set_test_params(self):$/;"	m	class:WalletBackupTest
set_test_params	test/functional/wallet_balance.py	/^    def set_test_params(self):$/;"	m	class:WalletTest
set_test_params	test/functional/wallet_basic.py	/^    def set_test_params(self):$/;"	m	class:WalletTest
set_test_params	test/functional/wallet_bumpfee.py	/^    def set_test_params(self):$/;"	m	class:BumpFeeTest
set_test_params	test/functional/wallet_coinbase_category.py	/^    def set_test_params(self):$/;"	m	class:CoinbaseCategoryTest
set_test_params	test/functional/wallet_create_tx.py	/^    def set_test_params(self):$/;"	m	class:CreateTxWalletTest
set_test_params	test/functional/wallet_createwallet.py	/^    def set_test_params(self):$/;"	m	class:CreateWalletTest
set_test_params	test/functional/wallet_disable.py	/^    def set_test_params(self):$/;"	m	class:DisableWalletTest
set_test_params	test/functional/wallet_dump.py	/^    def set_test_params(self):$/;"	m	class:WalletDumpTest
set_test_params	test/functional/wallet_encryption.py	/^    def set_test_params(self):$/;"	m	class:WalletEncryptionTest
set_test_params	test/functional/wallet_fallbackfee.py	/^    def set_test_params(self):$/;"	m	class:WalletRBFTest
set_test_params	test/functional/wallet_groups.py	/^    def set_test_params(self):$/;"	m	class:WalletGroupTest
set_test_params	test/functional/wallet_hd.py	/^    def set_test_params(self):$/;"	m	class:WalletHDTest
set_test_params	test/functional/wallet_import_rescan.py	/^    def set_test_params(self):$/;"	m	class:ImportRescanTest
set_test_params	test/functional/wallet_import_with_label.py	/^    def set_test_params(self):$/;"	m	class:ImportWithLabel
set_test_params	test/functional/wallet_importmulti.py	/^    def set_test_params(self):$/;"	m	class:ImportMultiTest
set_test_params	test/functional/wallet_importprunedfunds.py	/^    def set_test_params(self):$/;"	m	class:ImportPrunedFundsTest
set_test_params	test/functional/wallet_keypool.py	/^    def set_test_params(self):$/;"	m	class:KeyPoolTest
set_test_params	test/functional/wallet_keypool_topup.py	/^    def set_test_params(self):$/;"	m	class:KeypoolRestoreTest
set_test_params	test/functional/wallet_labels.py	/^    def set_test_params(self):$/;"	m	class:WalletLabelsTest
set_test_params	test/functional/wallet_listreceivedby.py	/^    def set_test_params(self):$/;"	m	class:ReceivedByTest
set_test_params	test/functional/wallet_listsinceblock.py	/^    def set_test_params(self):$/;"	m	class:ListSinceBlockTest
set_test_params	test/functional/wallet_listtransactions.py	/^    def set_test_params(self):$/;"	m	class:ListTransactionsTest
set_test_params	test/functional/wallet_multiwallet.py	/^    def set_test_params(self):$/;"	m	class:MultiWalletTest
set_test_params	test/functional/wallet_resendwallettransactions.py	/^    def set_test_params(self):$/;"	m	class:ResendWalletTransactionsTest
set_test_params	test/functional/wallet_txn_clone.py	/^    def set_test_params(self):$/;"	m	class:TxnMallTest
set_test_params	test/functional/wallet_txn_doublespend.py	/^    def set_test_params(self):$/;"	m	class:TxnMallTest
set_test_params	test/functional/wallet_zapwallettxes.py	/^    def set_test_params(self):$/;"	m	class:ZapWalletTXesTest
set_vch	src/script/script.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum
set_vch	src/test/scriptnum10.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum10
setban	src/rpc/net.cpp	/^static UniValue setban(const JSONRPCRequest& request)$/;"	f	file:
sethdseed	src/wallet/rpcwallet.cpp	/^UniValue sethdseed(const JSONRPCRequest& request)$/;"	f
setlabel	src/wallet/rpcwallet.cpp	/^static UniValue setlabel(const JSONRPCRequest& request)$/;"	f	file:
setmocktime	src/rpc/misc.cpp	/^static UniValue setmocktime(const JSONRPCRequest& request)$/;"	f	file:
setnetworkactive	src/rpc/net.cpp	/^static UniValue setnetworkactive(const JSONRPCRequest& request)$/;"	f	file:
settings	contrib/linearize/linearize-data.py	/^settings = {}$/;"	v
settings	contrib/linearize/linearize-hashes.py	/^settings = {}$/;"	v
settxfee	src/wallet/rpcwallet.cpp	/^static UniValue settxfee(const JSONRPCRequest& request)$/;"	f	file:
setup	contrib/gitian-build.py	/^def setup():$/;"	f
setup	src/cuckoocache.h	/^    inline void setup(uint32_t b)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
setup	src/cuckoocache.h	/^    uint32_t setup(uint32_t new_size)$/;"	f	class:CuckooCache::cache
setupAddressWidget	src/qt/guiutil.cpp	/^void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)$/;"	f	namespace:GUIUtil
setupPlatformStyle	src/qt/bitcoin.cpp	/^void BitcoinApplication::setupPlatformStyle()$/;"	f	class:BitcoinApplication
setupTabChain	src/qt/bitcoinamountfield.cpp	/^QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)$/;"	f	class:BitcoinAmountField
setupTabChain	src/qt/sendcoinsdialog.cpp	/^QWidget *SendCoinsDialog::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsDialog
setupTabChain	src/qt/sendcoinsentry.cpp	/^QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsEntry
setup_bytes	src/cuckoocache.h	/^    uint32_t setup_bytes(size_t bytes)$/;"	f	class:CuckooCache::cache
setup_bytes	src/script/sigcache.cpp	/^    uint32_t setup_bytes(size_t n)$/;"	f	class:__anon84::CSignatureCache
setup_chain	test/functional/feature_includeconf.py	/^    def setup_chain(self):$/;"	m	class:IncludeConfTest
setup_chain	test/functional/rpc_users.py	/^    def setup_chain(self):$/;"	m	class:HTTPBasicsTest
setup_chain	test/functional/test_framework/test_framework.py	/^    def setup_chain(self):$/;"	m	class:BitcoinTestFramework
setup_network	test/functional/create_cache.py	/^    def setup_network(self):$/;"	m	class:CreateCache
setup_network	test/functional/example_test.py	/^    def setup_network(self):$/;"	m	class:ExampleTest
setup_network	test/functional/feature_assumevalid.py	/^    def setup_network(self):$/;"	m	class:AssumeValidTest
setup_network	test/functional/feature_dbcrash.py	/^    def setup_network(self):$/;"	m	class:ChainstateWriteCrashTest
setup_network	test/functional/feature_fee_estimation.py	/^    def setup_network(self):$/;"	m	class:EstimateFeeTest
setup_network	test/functional/feature_filelock.py	/^    def setup_network(self):$/;"	m	class:FilelockTest
setup_network	test/functional/feature_help.py	/^    def setup_network(self):$/;"	m	class:HelpTest
setup_network	test/functional/feature_minchainwork.py	/^    def setup_network(self):$/;"	m	class:MinimumChainWorkTest
setup_network	test/functional/feature_notifications.py	/^    def setup_network(self):$/;"	m	class:NotificationsTest
setup_network	test/functional/feature_pruning.py	/^    def setup_network(self):$/;"	m	class:PruneTest
setup_network	test/functional/feature_segwit.py	/^    def setup_network(self):$/;"	m	class:SegWitTest
setup_network	test/functional/feature_versionbits_warning.py	/^    def setup_network(self):$/;"	m	class:VersionBitsWarningTest
setup_network	test/functional/interface_http.py	/^    def setup_network(self):$/;"	m	class:HTTPBasicsTest
setup_network	test/functional/p2p_node_network_limited.py	/^    def setup_network(self):$/;"	m	class:NodeNetworkLimitedTest
setup_network	test/functional/p2p_segwit.py	/^    def setup_network(self):$/;"	m	class:SegWitTest
setup_network	test/functional/p2p_unrequested_blocks.py	/^    def setup_network(self):$/;"	m	class:AcceptBlockTest
setup_network	test/functional/rpc_bind.py	/^    def setup_network(self):$/;"	m	class:RPCBindTest
setup_network	test/functional/rpc_fundrawtransaction.py	/^    def setup_network(self):$/;"	m	class:RawTransactionsTest
setup_network	test/functional/rpc_invalidateblock.py	/^    def setup_network(self):$/;"	m	class:InvalidateTest
setup_network	test/functional/rpc_preciousblock.py	/^    def setup_network(self):$/;"	m	class:PreciousTest
setup_network	test/functional/rpc_rawtransaction.py	/^    def setup_network(self):$/;"	m	class:RawTransactionsTest
setup_network	test/functional/rpc_txoutproof.py	/^    def setup_network(self):$/;"	m	class:MerkleBlockTest
setup_network	test/functional/test_framework/test_framework.py	/^    def setup_network(self):$/;"	m	class:BitcoinTestFramework
setup_network	test/functional/wallet_address_types.py	/^    def setup_network(self):$/;"	m	class:AddressTypeTest
setup_network	test/functional/wallet_backup.py	/^    def setup_network(self):$/;"	m	class:WalletBackupTest
setup_network	test/functional/wallet_basic.py	/^    def setup_network(self):$/;"	m	class:WalletTest
setup_network	test/functional/wallet_dump.py	/^    def setup_network(self):$/;"	m	class:WalletDumpTest
setup_network	test/functional/wallet_import_rescan.py	/^    def setup_network(self):$/;"	m	class:ImportRescanTest
setup_network	test/functional/wallet_importmulti.py	/^    def setup_network(self):$/;"	m	class:ImportMultiTest
setup_network	test/functional/wallet_txn_clone.py	/^    def setup_network(self):$/;"	m	class:TxnMallTest
setup_network	test/functional/wallet_txn_doublespend.py	/^    def setup_network(self):$/;"	m	class:TxnMallTest
setup_nodes	test/functional/feature_proxy.py	/^    def setup_nodes(self):$/;"	m	class:ProxyTest
setup_nodes	test/functional/feature_pruning.py	/^    def setup_nodes(self):$/;"	m	class:PruneTest
setup_nodes	test/functional/interface_zmq.py	/^    def setup_nodes(self):$/;"	m	class:ZMQTest
setup_nodes	test/functional/test_framework/test_framework.py	/^    def setup_nodes(self):$/;"	m	class:BitcoinTestFramework
sha	src/hash.h	/^    CSHA256 sha;$/;"	m	class:CHash160
sha	src/hash.h	/^    CSHA256 sha;$/;"	m	class:CHash256
sha1	src/crypto/sha1.cpp	/^namespace sha1$/;"	n	namespace:__anon38	file:
sha256	src/crypto/sha256.cpp	/^namespace sha256$/;"	n	namespace:__anon40	file:
sha256	test/functional/feature_segwit.py	/^from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex$/;"	i
sha256	test/functional/rpc_decodescript.py	/^from test_framework.messages import CTransaction, sha256$/;"	i
sha256	test/functional/rpc_signrawtransaction.py	/^from test_framework.messages import sha256$/;"	i
sha256	test/functional/test_framework/address.py	/^from .script import hash256, hash160, sha256, CScript, OP_0$/;"	i
sha256	test/functional/test_framework/messages.py	/^def sha256(s):$/;"	f
sha256	test/functional/test_framework/script.py	/^from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string$/;"	i
sha256_check	contrib/install_db4.sh	/^sha256_check() {$/;"	f
sha256_shani	src/crypto/sha256.cpp	/^namespace sha256_shani$/;"	n	file:
sha256_shani	src/crypto/sha256_shani.cpp	/^namespace sha256_shani {$/;"	n	file:
sha256_sse4	src/crypto/sha256.cpp	/^namespace sha256_sse4$/;"	n	file:
sha256_sse4	src/crypto/sha256_sse4.cpp	/^namespace sha256_sse4$/;"	n	file:
sha256d64_avx2	src/crypto/sha256.cpp	/^namespace sha256d64_avx2$/;"	n	file:
sha256d64_avx2	src/crypto/sha256_avx2.cpp	/^namespace sha256d64_avx2 {$/;"	n	file:
sha256d64_shani	src/crypto/sha256.cpp	/^namespace sha256d64_shani$/;"	n	file:
sha256d64_shani	src/crypto/sha256_shani.cpp	/^namespace sha256d64_shani {$/;"	n	file:
sha256d64_sse41	src/crypto/sha256.cpp	/^namespace sha256d64_sse41$/;"	n	file:
sha256d64_sse41	src/crypto/sha256_sse41.cpp	/^namespace sha256d64_sse41 {$/;"	n	file:
sha512	src/crypto/sha512.cpp	/^namespace sha512$/;"	n	namespace:__anon39	file:
shard_	src/leveldb/util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon4::ShardedLRUCache	file:
shared	src/leveldb/db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	src/leveldb/db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon19::ThreadState	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	doc/man/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	src/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	src/secp256k1/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	src/univalue/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shiftArrayLeft	src/test/arith_uint256_tests.cpp	/^static void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f	file:
shiftArrayRight	src/test/arith_uint256_tests.cpp	/^static void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f	file:
shlex	test/functional/test_framework/test_node.py	/^import shlex$/;"	i
shortName	src/qt/bitcoinunits.cpp	/^QString BitcoinUnits::shortName(int unit)$/;"	f	class:BitcoinUnits
shortest_cycle	contrib/devtools/circular-dependencies.py	/^            shortest_cycle = [module] + closure[module]$/;"	v
shortest_cycle	contrib/devtools/circular-dependencies.py	/^    shortest_cycle = None$/;"	v
shorttxidk0	src/blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxidk1	src/blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	src/blockencodings.h	/^    std::vector<uint64_t> shorttxids;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	src/test/blockencodings_tests.cpp	/^    std::vector<uint64_t> shorttxids;$/;"	m	class:TestHeaderAndShortIDs	file:
should	test/functional/wallet_importmulti.py	/^        self.log.info("Ranged descriptor import should fail without a specified range")$/;"	i
shouldShow	src/qt/bantablemodel.cpp	/^bool BanTableModel::shouldShow()$/;"	f	class:BanTableModel
shouldStop	src/scheduler.h	/^    bool shouldStop() const { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }$/;"	f	class:CScheduler
showBanTableContextMenu	src/qt/rpcconsole.cpp	/^void RPCConsole::showBanTableContextMenu(const QPoint& point)$/;"	f	class:RPCConsole
showDebugWindow	src/qt/bitcoingui.cpp	/^void BitcoinGUI::showDebugWindow()$/;"	f	class:BitcoinGUI
showDebugWindowActivateConsole	src/qt/bitcoingui.cpp	/^void BitcoinGUI::showDebugWindowActivateConsole()$/;"	f	class:BitcoinGUI
showDetails	src/qt/transactionview.cpp	/^void TransactionView::showDetails()$/;"	f	class:TransactionView
showEvent	src/qt/bitcoingui.cpp	/^void BitcoinGUI::showEvent(QShowEvent *event)$/;"	f	class:BitcoinGUI
showEvent	src/qt/rpcconsole.cpp	/^void RPCConsole::showEvent(QShowEvent *event)$/;"	f	class:RPCConsole
showHelpMessageAction	src/qt/bitcoingui.h	/^    QAction* showHelpMessageAction = nullptr;$/;"	m	class:BitcoinGUI
showHelpMessageClicked	src/qt/bitcoingui.cpp	/^void BitcoinGUI::showHelpMessageClicked()$/;"	f	class:BitcoinGUI
showHide	src/qt/modaloverlay.cpp	/^void ModalOverlay::showHide(bool hide, bool userRequested)$/;"	f	class:ModalOverlay
showInactive	src/qt/transactionfilterproxy.h	/^    bool showInactive;$/;"	m	class:TransactionFilterProxy
showMenu	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::showMenu(const QPoint &point)$/;"	f	class:CoinControlDialog
showMenu	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::showMenu(const QPoint &point)$/;"	f	class:ReceiveCoinsDialog
showMessage	src/qt/splashscreen.cpp	/^void SplashScreen::showMessage(const QString &message, int alignment, const QColor &color)$/;"	f	class:SplashScreen
showModalOverlay	src/qt/bitcoingui.cpp	/^void BitcoinGUI::showModalOverlay()$/;"	f	class:BitcoinGUI
showNormalIfMinimized	src/qt/bitcoingui.cpp	/^void BitcoinGUI::showNormalIfMinimized(bool fToggleHidden)$/;"	f	class:BitcoinGUI
showNormalIfMinimized	src/qt/bitcoingui.h	/^    void showNormalIfMinimized() { showNormalIfMinimized(false); }$/;"	f	class:BitcoinGUI
showOrHideBanTableIfRequired	src/qt/rpcconsole.cpp	/^void RPCConsole::showOrHideBanTableIfRequired()$/;"	f	class:RPCConsole
showOrPrint	src/qt/utilitydialog.cpp	/^void HelpMessageDialog::showOrPrint()$/;"	f	class:HelpMessageDialog
showOutOfSyncWarning	src/qt/overviewpage.cpp	/^void OverviewPage::showOutOfSyncWarning(bool fShow)$/;"	f	class:OverviewPage
showOutOfSyncWarning	src/qt/walletframe.cpp	/^void WalletFrame::showOutOfSyncWarning(bool fShow)$/;"	f	class:WalletFrame
showOutOfSyncWarning	src/qt/walletview.cpp	/^void WalletView::showOutOfSyncWarning(bool fShow)$/;"	f	class:WalletView
showPeersTableContextMenu	src/qt/rpcconsole.cpp	/^void RPCConsole::showPeersTableContextMenu(const QPoint& point)$/;"	f	class:RPCConsole
showProgress	src/qt/bitcoingui.cpp	/^void BitcoinGUI::showProgress(const QString &title, int nProgress)$/;"	f	class:BitcoinGUI
showProgress	src/qt/walletview.cpp	/^void WalletView::showProgress(const QString &title, int nProgress)$/;"	f	class:WalletView
showRestartWarning	src/qt/optionsdialog.cpp	/^void OptionsDialog::showRestartWarning(bool fPersistent)$/;"	f	class:OptionsDialog
showShutdownWindow	src/qt/utilitydialog.cpp	/^QWidget *ShutdownWindow::showShutdownWindow(BitcoinGUI *window)$/;"	f	class:ShutdownWindow
showTab_SM	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_SM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTab_VM	src/qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_VM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTransaction	src/qt/transactionrecord.cpp	/^bool TransactionRecord::showTransaction()$/;"	f	class:TransactionRecord
showTransaction	src/qt/transactiontablemodel.cpp	/^    bool showTransaction;$/;"	m	struct:TransactionNotification	file:
showcodediff	test/lint/lint-whitespace.sh	/^showcodediff() {$/;"	f
showdiff	test/lint/lint-whitespace.sh	/^showdiff() {$/;"	f
shrink_to_fit	src/prevector.h	/^    void shrink_to_fit() {$/;"	f	class:prevector
shrink_to_fit	src/test/prevector_tests.cpp	/^    void shrink_to_fit() {$/;"	f	class:prevector_tester
shutdown	src/qt/bitcoin.cpp	/^void BitcoinCore::shutdown()$/;"	f	class:BitcoinCore
shutdownResult	src/qt/bitcoin.cpp	/^void BitcoinApplication::shutdownResult()$/;"	f	class:BitcoinApplication
shutdownWindow	src/qt/bitcoin.h	/^    std::unique_ptr<QWidget> shutdownWindow;$/;"	m	class:BitcoinApplication
shutil	test/functional/feature_blocksdir.py	/^import shutil$/;"	i
shutil	test/functional/rpc_scantxoutset.py	/^import shutil$/;"	i
shutil	test/functional/test_framework/test_framework.py	/^import shutil$/;"	i
shutil	test/functional/test_runner.py	/^import shutil$/;"	i
shutil	test/functional/wallet_backup.py	/^import shutil$/;"	i
shutil	test/functional/wallet_hd.py	/^import shutil$/;"	i
shutil	test/functional/wallet_keypool_topup.py	/^import shutil$/;"	i
shutil	test/functional/wallet_multiwallet.py	/^import shutil$/;"	i
shutting_down_	src/leveldb/db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
sig	src/secp256k1/src/bench_recover.c	/^    unsigned char sig[64];$/;"	m	struct:__anon98	file:
sig	src/secp256k1/src/bench_verify.c	/^    unsigned char sig[72];$/;"	m	struct:__anon106	file:
sigOpCost	src/test/setup_common.h	/^    unsigned int sigOpCost;$/;"	m	struct:TestMemPoolEntryHelper
sigOpCost	src/txmempool.h	/^    const int64_t sigOpCost;        \/\/!< Total sigop cost$/;"	m	class:CTxMemPoolEntry
sigdata	src/script/sign.cpp	/^    SignatureData& sigdata;$/;"	m	class:final	file:
sighash	src/test/data/sighash.json.h	/^static unsigned const char sighash[] = {$/;"	m	namespace:json_tests
sighashOptions	src/bitcoin-tx.cpp	/^} sighashOptions[N_SIGHASH_OPTS] = {$/;"	v	typeref:struct:__anon87	file:
sighash_type	src/psbt.h	/^    int sighash_type = 0;$/;"	m	struct:PSBTInput
siglen	src/secp256k1/src/bench_verify.c	/^    size_t siglen;$/;"	m	struct:__anon106	file:
sigma	src/crypto/chacha20.cpp	/^static const unsigned char sigma[] = "expand 32-byte k";$/;"	v	file:
sigma0	src/crypto/sha256.cpp	/^uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }$/;"	f	namespace:__anon40::sha256
sigma0	src/crypto/sha256_avx2.cpp	/^__m256i inline sigma0(__m256i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }$/;"	f	namespace:sha256d64_avx2::__anon37
sigma0	src/crypto/sha256_sse41.cpp	/^__m128i inline sigma0(__m128i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }$/;"	f	namespace:sha256d64_sse41::__anon41
sigma0	src/crypto/sha512.cpp	/^uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x << 56) ^ (x >> 7); }$/;"	f	namespace:__anon39::sha512
sigma0	src/secp256k1/src/hash_impl.h	/^#define sigma0(/;"	d
sigma0	src/secp256k1/src/hash_impl.h	/^#undef sigma0$/;"	d
sigma1	src/crypto/sha256.cpp	/^uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }$/;"	f	namespace:__anon40::sha256
sigma1	src/crypto/sha256_avx2.cpp	/^__m256i inline sigma1(__m256i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }$/;"	f	namespace:sha256d64_avx2::__anon37
sigma1	src/crypto/sha256_sse41.cpp	/^__m128i inline sigma1(__m128i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }$/;"	f	namespace:sha256d64_sse41::__anon41
sigma1	src/crypto/sha512.cpp	/^uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }$/;"	f	namespace:__anon39::sha512
sigma1	src/secp256k1/src/hash_impl.h	/^#define sigma1(/;"	d
sigma1	src/secp256k1/src/hash_impl.h	/^#undef sigma1$/;"	d
sign	contrib/gitian-build.py	/^def sign():$/;"	f
sign	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] sign(byte[] data, byte[] sec) throws AssertFailException{$/;"	m	class:NativeSecp256k1
signMessageAction	src/qt/bitcoingui.h	/^    QAction* signMessageAction = nullptr;$/;"	m	class:BitcoinGUI
sign_ecdsa	test/functional/test_framework/key.py	/^    def sign_ecdsa(self, msg, low_s=True):$/;"	m	class:ECKey
sign_multisig	src/test/multisig_tests.cpp	/^sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction, int whichIn)$/;"	f	file:
sign_multisig	src/test/script_tests.cpp	/^sign_multisig(const CScript& scriptPubKey, const CKey& key, const CTransaction& transaction)$/;"	f	file:
sign_multisig	src/test/script_tests.cpp	/^sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction)$/;"	f	file:
sign_p2pk_witness_input	test/functional/p2p_segwit.py	/^def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):$/;"	f
sign_transaction	test/functional/feature_csv_activation.py	/^def sign_transaction(node, unsignedtx):$/;"	f
sign_tx	test/functional/feature_block.py	/^    def sign_tx(self, tx, spend_tx):$/;"	m	class:FullBlockTest
signal	contrib/zmq/zmq_sub.py	/^import signal$/;"	i
signal	test/functional/test_runner.py	/^import signal$/;"	i
signalled	src/qt/intro.h	/^    bool signalled;$/;"	m	class:Intro
signals2	src/interfaces/handler.h	/^namespace signals2 {$/;"	n	namespace:boost
signals2	src/ui_interface.h	/^namespace signals2 {$/;"	n	namespace:boost
signatureCache	src/script/sigcache.cpp	/^static CSignatureCache signatureCache;$/;"	m	namespace:__anon84	file:
signatures	src/script/sign.h	/^    std::map<CKeyID, SigPair> signatures; \/\/\/< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.$/;"	m	struct:SignatureData
signmessage	src/wallet/rpcwallet.cpp	/^static UniValue signmessage(const JSONRPCRequest& request)$/;"	f	file:
signmessagewithprivkey	src/rpc/misc.cpp	/^static UniValue signmessagewithprivkey(const JSONRPCRequest& request)$/;"	f	file:
signrawtransactionwithkey	src/rpc/rawtransaction.cpp	/^static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)$/;"	f	file:
signrawtransactionwithwallet	src/wallet/rpcwallet.cpp	/^UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)$/;"	f
singleColor	src/qt/platformstyle.h	/^    QColor singleColor;$/;"	m	class:PlatformStyle
siphash256	test/functional/test_framework/messages.py	/^from test_framework.siphash import siphash256$/;"	i
siphash256	test/functional/test_framework/siphash.py	/^def siphash256(k0, k1, h):$/;"	f
siphash_4_2_testvec	src/test/hash_tests.cpp	/^uint64_t siphash_4_2_testvec[] = {$/;"	v
siphash_round	test/functional/test_framework/siphash.py	/^def siphash_round(v0, v1, v2, v3):$/;"	f
size	src/addrman.h	/^    size_t size() const$/;"	f	class:CAddrMan
size	src/arith_uint256.h	/^    unsigned int size() const$/;"	f	class:base_uint
size	src/cuckoocache.h	/^    uint32_t size;$/;"	m	class:CuckooCache::cache
size	src/indirectmap.h	/^    size_type size() const          { return m.size(); }$/;"	f	class:indirectmap
size	src/key.h	/^    unsigned int size() const { return (fValid ? keydata.size() : 0); }$/;"	f	class:CKey
size	src/leveldb/include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	src/leveldb/table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	src/leveldb/table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size	src/limitedmap.h	/^    size_type size() const { return map.size(); }$/;"	f	class:limitedmap
size	src/prevector.h	/^    size_type size() const {$/;"	f	class:prevector
size	src/pubkey.h	/^    unsigned int size() const { return GetLen(vch[0]); }$/;"	f	class:CPubKey
size	src/qt/addresstablemodel.cpp	/^    int size()$/;"	f	class:AddressTablePriv
size	src/qt/bantablemodel.cpp	/^    int size() const$/;"	f	class:BanTablePriv
size	src/qt/peertablemodel.cpp	/^    int size() const$/;"	f	class:PeerTablePriv
size	src/qt/transactiontablemodel.cpp	/^    int size()$/;"	f	class:TransactionTablePriv
size	src/serialize.h	/^    size_t size() const {$/;"	f	class:CSizeComputer
size	src/streams.h	/^    size_t size() const { return m_data.size() - m_pos; }$/;"	f	class:VectorReader
size	src/streams.h	/^    size_t size() const { return stream->size(); }$/;"	f	class:OverrideStream
size	src/streams.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	src/support/lockedpool.h	/^        size_t size;$/;"	m	class:LockedPool::LockedPageArena
size	src/test/prevector_tests.cpp	/^    Size size() const {$/;"	f	class:prevector_tester
size	src/timedata.h	/^    int size() const$/;"	f	class:CMedianFilter
size	src/txmempool.h	/^    unsigned long size() const$/;"	f	class:CTxMemPool
size	src/uint256.h	/^    unsigned int size() const$/;"	f	class:base_blob
size	src/univalue/include/univalue.h	/^    size_t size() const { return values.size(); }$/;"	f	class:UniValue
sizeHint	src/qt/overviewpage.cpp	/^    inline QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const$/;"	f	class:TxViewDelegate
size_	src/leveldb/helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon35::FileState	file:
size_	src/leveldb/include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	src/leveldb/table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	src/leveldb/table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
size_estimate	src/dbwrapper.h	/^    size_t size_estimate;$/;"	m	class:CDBBatch
size_threshold	src/qt/guiutil.h	/^        int size_threshold;$/;"	m	class:GUIUtil::ToolTipToRichTextFilter
size_to_free_chunk	src/support/lockedpool.h	/^    SizeToChunkSortedMap size_to_free_chunk;$/;"	m	class:Arena
size_type	src/indirectmap.h	/^    typedef typename base::size_type size_type;$/;"	t	class:indirectmap
size_type	src/limitedmap.h	/^    typedef typename std::map<K, V>::size_type size_type;$/;"	t	class:limitedmap
size_type	src/prevector.h	/^    typedef Size size_type;$/;"	t	class:prevector
size_type	src/streams.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
size_type	src/support/allocators/secure.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	src/support/allocators/zeroafterfree.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:zero_after_free_allocator
sizeof	src/compat/assumptions.h	/^static_assert(sizeof(size_t) == 4 || sizeof(size_t) == 8, "size_t assumed to be 32-bit or 64-bit");$/;"	v
sizeof	src/compat/assumptions.h	/^static_assert(sizeof(size_t) == sizeof(void*), "Sizes of size_t and void* assumed to be equal");$/;"	v
skip_if_no_bitcoind_zmq	test/functional/test_framework/test_framework.py	/^    def skip_if_no_bitcoind_zmq(self):$/;"	m	class:BitcoinTestFramework
skip_if_no_cli	test/functional/test_framework/test_framework.py	/^    def skip_if_no_cli(self):$/;"	m	class:BitcoinTestFramework
skip_if_no_py3_zmq	test/functional/test_framework/test_framework.py	/^    def skip_if_no_py3_zmq(self):$/;"	m	class:BitcoinTestFramework
skip_if_no_wallet	test/functional/test_framework/test_framework.py	/^    def skip_if_no_wallet(self):$/;"	m	class:BitcoinTestFramework
skip_mine	test/functional/feature_segwit.py	/^    def skip_mine(self, node, txid, sign, redeem_script=""):$/;"	m	class:SegWitTest
skip_test_if_missing_module	test/functional/example_test.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ExampleTest
skip_test_if_missing_module	test/functional/feature_bip68_sequence.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:BIP68Test
skip_test_if_missing_module	test/functional/feature_cltv.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:BIP65Test
skip_test_if_missing_module	test/functional/feature_csv_activation.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:BIP68_112_113Test
skip_test_if_missing_module	test/functional/feature_dbcrash.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ChainstateWriteCrashTest
skip_test_if_missing_module	test/functional/feature_dersig.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:BIP66Test
skip_test_if_missing_module	test/functional/feature_fee_estimation.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:EstimateFeeTest
skip_test_if_missing_module	test/functional/feature_maxuploadtarget.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MaxUploadTest
skip_test_if_missing_module	test/functional/feature_nulldummy.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:NULLDUMMYTest
skip_test_if_missing_module	test/functional/feature_pruning.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:PruneTest
skip_test_if_missing_module	test/functional/feature_rbf.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ReplaceByFeeTest
skip_test_if_missing_module	test/functional/feature_segwit.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:SegWitTest
skip_test_if_missing_module	test/functional/interface_rest.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:RESTTest
skip_test_if_missing_module	test/functional/interface_zmq.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ZMQTest
skip_test_if_missing_module	test/functional/mempool_accept.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MempoolAcceptanceTest
skip_test_if_missing_module	test/functional/mempool_limit.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MempoolLimitTest
skip_test_if_missing_module	test/functional/mempool_packages.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MempoolPackagesTest
skip_test_if_missing_module	test/functional/mempool_persist.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MempoolPersistTest
skip_test_if_missing_module	test/functional/mempool_reorg.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MempoolCoinbaseTest
skip_test_if_missing_module	test/functional/mempool_resurrect.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MempoolCoinbaseTest
skip_test_if_missing_module	test/functional/mempool_spend_coinbase.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MempoolSpendCoinbaseTest
skip_test_if_missing_module	test/functional/mining_getblocktemplate_longpoll.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:GetBlockTemplateLPTest
skip_test_if_missing_module	test/functional/mining_prioritisetransaction.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:PrioritiseTransactionTest
skip_test_if_missing_module	test/functional/p2p_compactblocks.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:CompactBlocksTest
skip_test_if_missing_module	test/functional/p2p_feefilter.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:FeeFilterTest
skip_test_if_missing_module	test/functional/p2p_leak_tx.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:P2PLeakTxTest
skip_test_if_missing_module	test/functional/p2p_segwit.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:SegWitTest
skip_test_if_missing_module	test/functional/rpc_createmultisig.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:RpcCreateMultiSigTest
skip_test_if_missing_module	test/functional/rpc_fundrawtransaction.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:RawTransactionsTest
skip_test_if_missing_module	test/functional/rpc_psbt.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:PSBTTest
skip_test_if_missing_module	test/functional/rpc_rawtransaction.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:RawTransactionsTest
skip_test_if_missing_module	test/functional/rpc_scantxoutset.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ScantxoutsetTest
skip_test_if_missing_module	test/functional/rpc_signmessage.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:SignMessagesTest
skip_test_if_missing_module	test/functional/rpc_signrawtransaction.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:SignRawTransactionsTest
skip_test_if_missing_module	test/functional/rpc_txoutproof.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MerkleBlockTest
skip_test_if_missing_module	test/functional/test_framework/test_framework.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:BitcoinTestFramework
skip_test_if_missing_module	test/functional/tool_wallet.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ToolWalletTest
skip_test_if_missing_module	test/functional/wallet_abandonconflict.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:AbandonConflictTest
skip_test_if_missing_module	test/functional/wallet_address_types.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:AddressTypeTest
skip_test_if_missing_module	test/functional/wallet_backup.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletBackupTest
skip_test_if_missing_module	test/functional/wallet_balance.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletTest
skip_test_if_missing_module	test/functional/wallet_basic.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletTest
skip_test_if_missing_module	test/functional/wallet_bumpfee.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:BumpFeeTest
skip_test_if_missing_module	test/functional/wallet_coinbase_category.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:CoinbaseCategoryTest
skip_test_if_missing_module	test/functional/wallet_create_tx.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:CreateTxWalletTest
skip_test_if_missing_module	test/functional/wallet_createwallet.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:CreateWalletTest
skip_test_if_missing_module	test/functional/wallet_dump.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletDumpTest
skip_test_if_missing_module	test/functional/wallet_encryption.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletEncryptionTest
skip_test_if_missing_module	test/functional/wallet_fallbackfee.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletRBFTest
skip_test_if_missing_module	test/functional/wallet_groups.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletGroupTest
skip_test_if_missing_module	test/functional/wallet_hd.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletHDTest
skip_test_if_missing_module	test/functional/wallet_import_rescan.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ImportRescanTest
skip_test_if_missing_module	test/functional/wallet_import_with_label.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ImportWithLabel
skip_test_if_missing_module	test/functional/wallet_importmulti.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ImportMultiTest
skip_test_if_missing_module	test/functional/wallet_importprunedfunds.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ImportPrunedFundsTest
skip_test_if_missing_module	test/functional/wallet_keypool.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:KeyPoolTest
skip_test_if_missing_module	test/functional/wallet_keypool_topup.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:KeypoolRestoreTest
skip_test_if_missing_module	test/functional/wallet_labels.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:WalletLabelsTest
skip_test_if_missing_module	test/functional/wallet_listreceivedby.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ReceivedByTest
skip_test_if_missing_module	test/functional/wallet_listsinceblock.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ListSinceBlockTest
skip_test_if_missing_module	test/functional/wallet_listtransactions.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ListTransactionsTest
skip_test_if_missing_module	test/functional/wallet_multiwallet.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:MultiWalletTest
skip_test_if_missing_module	test/functional/wallet_resendwallettransactions.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ResendWalletTransactionsTest
skip_test_if_missing_module	test/functional/wallet_txn_clone.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:TxnMallTest
skip_test_if_missing_module	test/functional/wallet_txn_doublespend.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:TxnMallTest
skip_test_if_missing_module	test/functional/wallet_zapwallettxes.py	/^    def skip_test_if_missing_module(self):$/;"	m	class:ZapWalletTXesTest
sleep	test/functional/p2p_timeouts.py	/^from time import sleep$/;"	i
sleep_for	src/threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::milliseconds rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	src/threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::minutes rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	src/threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::seconds rel_time)$/;"	f	class:CThreadInterrupt
slice	src/crypto/ctaes/ctaes.h	/^    uint16_t slice[8];$/;"	m	struct:__anon45
small_txpuzzle_randfee	test/functional/feature_fee_estimation.py	/^def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):$/;"	f
smallest	src/leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	src/leveldb/db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	src/leveldb/db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	src/leveldb/include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	src/leveldb/db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
snprintf	src/leveldb/port/port_win.h	/^#define snprintf /;"	d
so	test/functional/test_framework/netutil.py	/^    import fcntl  # Linux only, so only import when required$/;"	i
socket	src/net.h	/^        SOCKET socket;$/;"	m	struct:CConnman::ListenSocket
socket	test/functional/feature_proxy.py	/^import socket$/;"	i
socket	test/functional/test_framework/authproxy.py	/^import socket$/;"	i
socket	test/functional/test_framework/messages.py	/^import socket$/;"	i
socket	test/functional/test_framework/netutil.py	/^    import socket$/;"	i
socket	test/functional/test_framework/netutil.py	/^import socket$/;"	i
socket	test/functional/test_framework/socks5.py	/^import socket$/;"	i
sockopt_arg_type	src/compat.h	/^typedef char* sockopt_arg_type;$/;"	t
sockopt_arg_type	src/compat.h	/^typedef void* sockopt_arg_type;$/;"	t
softfork_active	test/functional/p2p_compactblocks.py	/^from test_framework.util import assert_equal, wait_until, softfork_active$/;"	i
softfork_active	test/functional/test_framework/util.py	/^def softfork_active(node, key):$/;"	f
solvable	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
solvable	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
solvable	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
solvable	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
solvable	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
solvable	test/functional/wallet_importmulti.py	/^        self.log.info("Should import the ranged descriptor with specified range as solvable")$/;"	i
solvable	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
solve	test/functional/test_framework/messages.py	/^    def solve(self):$/;"	m	class:CBlock
solve_and_send_block	test/functional/rpc_blockchain.py	/^        def solve_and_send_block(prevhash, height, time):$/;"	f	function:BlockchainTest._test_waitforblockheight
sort	src/qt/bantablemodel.cpp	/^void BanTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:BanTableModel
sort	src/qt/peertablemodel.cpp	/^void PeerTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:PeerTableModel
sort	src/qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:RecentRequestsTableModel
sortColumn	src/qt/coincontroldialog.h	/^    int sortColumn;$/;"	m	class:CoinControlDialog
sortKey	src/qt/transactionrecord.h	/^    std::string sortKey;$/;"	m	class:TransactionStatus
sortOrder	src/qt/bantablemodel.cpp	/^    Qt::SortOrder sortOrder;$/;"	m	class:BanTablePriv	file:
sortOrder	src/qt/coincontroldialog.h	/^    Qt::SortOrder sortOrder;$/;"	m	class:CoinControlDialog
sortOrder	src/qt/peertablemodel.cpp	/^    Qt::SortOrder sortOrder;$/;"	m	class:PeerTablePriv	file:
sortView	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::sortView(int column, Qt::SortOrder order)$/;"	f	class:CoinControlDialog
sort_key	test/functional/test_runner.py	/^    def sort_key(self):$/;"	m	class:TestResult
sorted	src/timedata.h	/^    std::vector<T> sorted() const$/;"	f	class:CMedianFilter
source	src/addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
source	src/hash.h	/^    Source* source;$/;"	m	class:CHashVerifier
source	src/qt/rpcconsole.cpp	/^    const char *source;$/;"	m	struct:__anon68	file:
sourceFile	src/sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	src/sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
source_	src/leveldb/db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	src/leveldb/table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
space	Makefile	/^space := $(empty) $(empty)$/;"	m
space_	src/leveldb/db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
specified	test/functional/wallet_importmulti.py	/^        self.log.info("Ranged descriptor import should fail without a specified range")$/;"	i
specified	test/functional/wallet_importmulti.py	/^        self.log.info("Should import the ranged descriptor with specified range as solvable")$/;"	i
spendTx	src/test/script_tests.cpp	/^    CMutableTransaction spendTx;$/;"	m	class:__anon58::TestBuilder	file:
spend_one_input	test/functional/wallet_bumpfee.py	/^def spend_one_input(node, dest_address, change_size=Decimal("0.00049000")):$/;"	f
spendable	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address and public key as solvable but not spendable")$/;"	i
spendsCoinbase	src/test/setup_common.h	/^    bool spendsCoinbase;$/;"	m	struct:TestMemPoolEntryHelper
spendsCoinbase	src/txmempool.h	/^    const bool spendsCoinbase;      \/\/!< keep track of transactions that spend a coinbase$/;"	m	class:CTxMemPoolEntry
spinnerFrame	src/qt/bitcoingui.h	/^    int spinnerFrame = 0;$/;"	m	class:BitcoinGUI
split_format_specifiers	contrib/devtools/update-translations.py	/^def split_format_specifiers(specifiers):$/;"	f
split_inputs	test/functional/feature_fee_estimation.py	/^def split_inputs(from_node, txins, txouts, initial_split=False):$/;"	f
split_network	test/functional/test_framework/test_framework.py	/^    def split_network(self):$/;"	m	class:BitcoinTestFramework
src	src/streams.h	/^    FILE *src;            \/\/!< source file$/;"	m	class:CBufferedFile
srcdir	Makefile	/^srcdir = .$/;"	m
srcdir	doc/man/Makefile	/^srcdir = .$/;"	m
srcdir	src/Makefile	/^srcdir = .$/;"	m
srcdir	src/secp256k1/Makefile	/^srcdir = .$/;"	m
srcdir	src/univalue/Makefile	/^srcdir = .$/;"	m
ssKey	src/dbwrapper.h	/^    CDataStream ssKey;$/;"	m	class:CDBBatch
ssValue	src/dbwrapper.h	/^    CDataStream ssValue;$/;"	m	class:CDBBatch
ss_	src/leveldb/util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
ssize_t	src/compat.h	/^typedef int32_t ssize_t;$/;"	t
ssize_t	src/compat.h	/^typedef int64_t ssize_t;$/;"	t
ssize_t	src/leveldb/port/port_win.h	/^#define ssize_t /;"	d
stack	src/script/script.h	/^    std::vector<std::vector<unsigned char> > stack;$/;"	m	struct:CScriptWitness
stacktop	src/script/interpreter.cpp	/^#define stacktop(/;"	d	file:
stages	depends/funcs.mk	/^stages = fetched extracted preprocessed configured built staged postprocessed cached cached_checksum$/;"	m
start	contrib/zmq/zmq_sub.py	/^    def start(self):$/;"	m	class:ZMQHandler
start	src/leveldb/db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon19::SharedState	file:
start	src/leveldb/include/leveldb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start	src/policy/fees.h	/^    double start = -1;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
start	src/rpc/server.cpp	/^    int64_t start;$/;"	m	struct:RPCCommandExecutionInfo	file:
start	test/functional/test_framework/socks5.py	/^    def start(self):$/;"	m	class:Socks5Server
start	test/functional/test_framework/test_node.py	/^    def start(self, extra_args=None, *, cwd=None, stdout=None, stderr=None, **kwargs):$/;"	m	class:TestNode
startAutoRefresh	src/qt/peertablemodel.cpp	/^void PeerTableModel::startAutoRefresh()$/;"	f	class:PeerTableModel
startExecutor	src/qt/rpcconsole.cpp	/^void RPCConsole::startExecutor()$/;"	f	class:RPCConsole
startThread	src/qt/bitcoin.cpp	/^void BitcoinApplication::startThread()$/;"	f	class:BitcoinApplication
startThread	src/qt/intro.cpp	/^void Intro::startThread()$/;"	f	class:Intro
start_	src/leveldb/db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon19::Stats	file:
start_	src/leveldb/db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	src/leveldb/table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
start_height	test/functional/rpc_getblockstats.py	/^    start_height = 101$/;"	v	class:GetblockstatsTest
start_node	test/functional/test_framework/test_framework.py	/^    def start_node(self, i, *args, **kwargs):$/;"	m	class:BitcoinTestFramework
start_nodes	test/functional/test_framework/test_framework.py	/^    def start_nodes(self, extra_args=None, *args, **kwargs):$/;"	m	class:BitcoinTestFramework
start_three	test/functional/wallet_backup.py	/^    def start_three(self):$/;"	m	class:WalletBackupTest
started_bgthread_	src/leveldb/util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
starts_with	src/leveldb/include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	src/leveldb/db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon24::MTThread	file:
state	src/leveldb/db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon26::Saver	file:
state	src/rpc/mining.cpp	/^    CValidationState state;$/;"	m	class:submitblock_StateCatcher	file:
state	src/univalue/lib/univalue_utffilter.h	/^    int state; \/\/ Top bit to be filled in for next UTF-8 byte, or 0$/;"	m	class:JSONUTF8StringFilter
state_	src/leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	src/leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	src/leveldb/db/fault_injection_test.cc	/^  FileState state_;$/;"	m	class:leveldb::TestWritableFile	file:
state_	src/leveldb/db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState	file:
state_	src/leveldb/include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
state_cv_	src/leveldb/db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState	file:
stats	src/leveldb/db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon19::ThreadState	file:
stats	src/support/lockedpool.cpp	/^Arena::Stats Arena::stats() const$/;"	f	class:Arena
stats	src/support/lockedpool.cpp	/^LockedPool::Stats LockedPool::stats() const$/;"	f	class:LockedPool
stats_	src/leveldb/db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	src/bitcoin-cli.cpp	/^    int status;$/;"	m	struct:HTTPReply	file:
status	src/leveldb/db/db_impl.cc	/^  Status status;$/;"	m	struct:leveldb::DBImpl::Writer	file:
status	src/leveldb/db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon29::DBIter
status	src/leveldb/db/db_test.cc	/^    virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::ModelDB::ModelIter
status	src/leveldb/db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	src/leveldb/db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	src/leveldb/table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	src/leveldb/table/iterator.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon12::EmptyIterator
status	src/leveldb/table/iterator_wrapper.h	/^  Status status() const     { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	src/leveldb/table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon11::MergingIterator
status	src/leveldb/table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	src/leveldb/table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	src/leveldb/table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	src/leveldb/table/table_test.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	src/leveldb/table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
status	src/qt/transactionrecord.h	/^    Status status;$/;"	m	class:TransactionStatus
status	src/qt/transactionrecord.h	/^    TransactionStatus status;$/;"	m	class:TransactionRecord
status	src/qt/transactiontablemodel.cpp	/^    ChangeType status;$/;"	m	struct:TransactionNotification	file:
status	src/qt/walletmodel.h	/^        StatusCode status;$/;"	m	struct:WalletModel::SendCoinsReturn
status	src/wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	m	struct:final::ScanResult	typeref:enum:final::ScanResult::__anon118
statusUpdateNeeded	src/qt/transactionrecord.cpp	/^bool TransactionRecord::statusUpdateNeeded(int numBlocks) const$/;"	f	class:TransactionRecord
status_	src/leveldb/db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon29::DBIter	file:
status_	src/leveldb/table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	src/leveldb/table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon12::EmptyIterator	file:
status_	src/leveldb/table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	src/leveldb/table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
stderr	contrib/devtools/github-merge.py	/^from sys import stdin,stdout,stderr$/;"	i
stderr	test/functional/test_runner.py	/^        stderr = kernel32.GetStdHandle(STD_ERROR_HANDLE)$/;"	v
stderr_mode	test/functional/test_runner.py	/^        stderr_mode = ctypes.c_int32()$/;"	v
stdin	contrib/devtools/github-merge.py	/^from sys import stdin,stdout,stderr$/;"	i
stdout	contrib/devtools/github-merge.py	/^from sys import stdin,stdout,stderr$/;"	i
stdout	test/functional/test_runner.py	/^        stdout = kernel32.GetStdHandle(STD_OUTPUT_HANDLE)$/;"	v
stdout_mode	test/functional/test_runner.py	/^        stdout_mode = ctypes.c_int32()$/;"	v
stepBy	src/qt/bitcoinamountfield.cpp	/^    void stepBy(int steps)$/;"	f	class:AmountSpinBox
stepEnabled	src/qt/bitcoinamountfield.cpp	/^    StepEnabled stepEnabled() const$/;"	f	class:AmountSpinBox
stl_shared_counter	src/memusage.h	/^struct stl_shared_counter$/;"	s	namespace:memusage
stl_tree_node	src/memusage.h	/^struct stl_tree_node$/;"	s	namespace:memusage
stop	contrib/zmq/zmq_sub.py	/^    def stop(self):$/;"	m	class:ZMQHandler
stop	src/leveldb/db/db_test.cc	/^  port::AtomicPointer stop;$/;"	m	struct:leveldb::__anon24::MTState	file:
stop	src/rpc/server.cpp	/^UniValue stop(const JSONRPCRequest& jsonRequest)$/;"	f
stop	src/scheduler.cpp	/^void CScheduler::stop(bool drain)$/;"	f	class:CScheduler
stop	test/functional/test_framework/socks5.py	/^    def stop(self):$/;"	m	class:Socks5Server
stopAutoRefresh	src/qt/peertablemodel.cpp	/^void PeerTableModel::stopAutoRefresh()$/;"	f	class:PeerTableModel
stopRequested	src/scheduler.h	/^    bool stopRequested;$/;"	m	class:CScheduler
stopWhenEmpty	src/scheduler.h	/^    bool stopWhenEmpty;$/;"	m	class:CScheduler
stop_node	test/functional/test_framework/test_framework.py	/^    def stop_node(self, i, expected_stderr='', wait=0):$/;"	m	class:BitcoinTestFramework
stop_node	test/functional/test_framework/test_node.py	/^    def stop_node(self, expected_stderr='', wait=0):$/;"	m	class:TestNode
stop_nodes	test/functional/test_framework/test_framework.py	/^    def stop_nodes(self, wait=0):$/;"	m	class:BitcoinTestFramework
stop_three	test/functional/wallet_backup.py	/^    def stop_three(self):$/;"	m	class:WalletBackupTest
store	src/script/sigcache.h	/^    bool store;$/;"	m	class:CachingTransactionSignatureChecker
str	src/streams.h	/^    std::string str() const$/;"	f	class:CDataStream
str	src/test/dbwrapper_tests.cpp	/^    std::string str;$/;"	m	struct:StringContentsSerializer	file:
str	src/univalue/lib/univalue_utffilter.h	/^    std::string &str;$/;"	m	class:JSONUTF8StringFilter
strAddedNode	src/net.h	/^    std::string strAddedNode;$/;"	m	struct:AddedNodeInfo
strAddressBad	src/test/key_tests.cpp	/^static const std::string strAddressBad = "1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF";$/;"	v	file:
strComment	src/wallet/wallet.h	/^    std::string strComment;$/;"	m	class:CWalletKey
strDataDir	src/chainparamsbase.h	/^    std::string strDataDir;$/;"	m	class:CBaseChainParams
strDebugMessage	src/consensus/validation.h	/^    std::string strDebugMessage;$/;"	m	class:CValidationState
strFile	src/wallet/db.h	/^    std::string strFile;$/;"	m	class:BerkeleyBatch
strFile	src/wallet/db.h	/^    std::string strFile;$/;"	m	class:BerkeleyDatabase
strHexMaster	src/test/bip32_tests.cpp	/^    std::string strHexMaster;$/;"	m	struct:TestVector	file:
strMessageMagic	src/util/validation.cpp	/^const std::string strMessageMagic = "Bitcoin Signed Message:\\n";$/;"	v
strMethod	src/rpc/server.h	/^    std::string strMethod;$/;"	m	class:JSONRPCRequest
strNetworkID	src/chainparams.h	/^    std::string strNetworkID;$/;"	m	class:CChainParams
strOverriddenByCommandLine	src/qt/optionsmodel.h	/^    QString strOverriddenByCommandLine;$/;"	m	class:OptionsModel
strPath	src/wallet/db.h	/^    std::string strPath;$/;"	m	class:BerkeleyEnvironment
strRPCUserColonPass	src/httprpc.cpp	/^static std::string strRPCUserColonPass;$/;"	v	file:
strRejectReason	src/consensus/validation.h	/^    std::string strRejectReason;$/;"	m	class:CValidationState
strRejectReason	src/net_processing.cpp	/^    std::string strRejectReason;$/;"	m	struct:__anon89::CBlockReject	file:
strSecret1	src/test/key_tests.cpp	/^static const std::string strSecret1 = "5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj";$/;"	v	file:
strSecret1C	src/test/key_tests.cpp	/^static const std::string strSecret1C = "Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw";$/;"	v	file:
strSecret2	src/test/key_tests.cpp	/^static const std::string strSecret2 = "5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3";$/;"	v	file:
strSecret2C	src/test/key_tests.cpp	/^static const std::string strSecret2C = "L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g";$/;"	v	file:
strSubVersion	src/net.cpp	/^std::string strSubVersion;$/;"	v
strThirdPartyTxUrls	src/qt/optionsmodel.h	/^    QString strThirdPartyTxUrls;$/;"	m	class:OptionsModel
str_to_b64str	test/functional/interface_http.py	/^from test_framework.util import assert_equal, str_to_b64str$/;"	i
str_to_b64str	test/functional/test_framework/util.py	/^def str_to_b64str(string):$/;"	f
stream	src/streams.h	/^    Stream* stream;$/;"	m	class:OverrideStream
streamStateFromFormat	src/tinyformat.h	/^inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,$/;"	f	namespace:tinyformat::detail
stretchColumnWidth	src/qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::stretchColumnWidth(int column)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
stride	src/qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
string	src/serialize.h	/^    std::string& string;$/;"	m	class:LimitedString
string	test/functional/rpc_users.py	/^import string$/;"	i
stringval	src/test/serialize_tests.cpp	/^    std::string stringval;$/;"	m	class:CSerializeMethodsTestSingle	file:
strnlen	src/compat/strnlen.cpp	/^size_t strnlen( const char *start, size_t max_len)$/;"	f
strprintf	src/tinyformat.h	/^#define strprintf /;"	d
struct	contrib/linearize/linearize-data.py	/^import struct$/;"	i
struct	contrib/zmq/zmq_sub.py	/^import struct$/;"	i
struct	test/functional/feature_block.py	/^import struct$/;"	i
struct	test/functional/interface_zmq.py	/^import struct$/;"	i
struct	test/functional/p2p_invalid_messages.py	/^import struct$/;"	i
struct	test/functional/p2p_segwit.py	/^import struct$/;"	i
struct	test/functional/test_framework/bignum.py	/^import struct$/;"	i
struct	test/functional/test_framework/messages.py	/^import struct$/;"	i
struct	test/functional/test_framework/mininode.py	/^import struct$/;"	i
struct	test/functional/test_framework/netutil.py	/^import struct$/;"	i
struct	test/functional/test_framework/script.py	/^import struct$/;"	i
struct	test/functional/wallet_balance.py	/^import struct$/;"	i
subcommand	contrib/devtools/copyright_header.py	/^    subcommand = sys.argv[1]$/;"	v
subdir	Makefile	/^subdir = .$/;"	m
subdir	doc/man/Makefile	/^subdir = doc\/man$/;"	m
subdir	src/Makefile	/^subdir = src$/;"	m
subdir	src/secp256k1/Makefile	/^subdir = .$/;"	m
subdir	src/univalue/Makefile	/^subdir = .$/;"	m
subdirs	Makefile	/^subdirs =  src\/univalue src\/secp256k1$/;"	m
subdirs	doc/man/Makefile	/^subdirs =  src\/univalue src\/secp256k1$/;"	m
subdirs	src/Makefile	/^subdirs =  src\/univalue src\/secp256k1$/;"	m
submit_block_catch_error	test/functional/feature_dbcrash.py	/^    def submit_block_catch_error(self, node_index, block):$/;"	m	class:ChainstateWriteCrashTest
submit_block_with_tx	test/functional/wallet_bumpfee.py	/^def submit_block_with_tx(node, tx):$/;"	f
submitblock	src/rpc/mining.cpp	/^static UniValue submitblock(const JSONRPCRequest& request)$/;"	f	file:
submitblock_StateCatcher	src/rpc/mining.cpp	/^    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}$/;"	f	class:submitblock_StateCatcher
submitblock_StateCatcher	src/rpc/mining.cpp	/^class submitblock_StateCatcher : public CValidationInterface$/;"	c	file:
submitheader	src/rpc/mining.cpp	/^static UniValue submitheader(const JSONRPCRequest& request)$/;"	f	file:
subnet	src/qt/bantablemodel.h	/^    CSubNet subnet;$/;"	m	struct:CCombinedBan
subprocess	contrib/devtools/clang-format-diff.py	/^import subprocess$/;"	i
subprocess	contrib/devtools/copyright_header.py	/^import subprocess$/;"	i
subprocess	contrib/devtools/github-merge.py	/^import subprocess$/;"	i
subprocess	contrib/devtools/optimize-pngs.py	/^import subprocess$/;"	i
subprocess	contrib/devtools/security-check.py	/^import subprocess$/;"	i
subprocess	contrib/devtools/symbol-check.py	/^import subprocess$/;"	i
subprocess	contrib/devtools/test-security-check.py	/^import subprocess$/;"	i
subprocess	contrib/devtools/update-translations.py	/^import subprocess$/;"	i
subprocess	contrib/gitian-build.py	/^import subprocess$/;"	i
subprocess	contrib/verify-commits/verify-commits.py	/^import subprocess$/;"	i
subprocess	test/functional/rpc_blockchain.py	/^import subprocess$/;"	i
subprocess	test/functional/rpc_users.py	/^import subprocess$/;"	i
subprocess	test/functional/test_framework/test_node.py	/^import subprocess$/;"	i
subprocess	test/functional/test_runner.py	/^import subprocess$/;"	i
subprocess	test/functional/tool_wallet.py	/^import subprocess$/;"	i
subprocess	test/fuzz/test_runner.py	/^import subprocess$/;"	i
subprocess	test/util/bitcoin-util-test.py	/^import subprocess$/;"	i
subscribeToCoreSignals	src/qt/bitcoingui.cpp	/^void BitcoinGUI::subscribeToCoreSignals()$/;"	f	class:BitcoinGUI
subscribeToCoreSignals	src/qt/clientmodel.cpp	/^void ClientModel::subscribeToCoreSignals()$/;"	f	class:ClientModel
subscribeToCoreSignals	src/qt/splashscreen.cpp	/^void SplashScreen::subscribeToCoreSignals()$/;"	f	class:SplashScreen
subscribeToCoreSignals	src/qt/transactiontablemodel.cpp	/^void TransactionTableModel::subscribeToCoreSignals()$/;"	f	class:TransactionTableModel
subscribeToCoreSignals	src/qt/walletmodel.cpp	/^void WalletModel::subscribeToCoreSignals()$/;"	f	class:WalletModel
subtest	test/functional/p2p_segwit.py	/^    def subtest(func):  # noqa: N805$/;"	m	class:SegWitTest
succeed	src/tinyformat.h	/^        struct succeed { char dummy; };$/;"	s	struct:tinyformat::detail::is_convertible
success_mine	test/functional/feature_segwit.py	/^    def success_mine(self, node, txid, sign, redeem_script=""):$/;"	m	class:SegWitTest
successful_signing_test	test/functional/rpc_signrawtransaction.py	/^    def successful_signing_test(self):$/;"	m	class:SignRawTransactionsTest
sum	src/bench/examples.cpp	/^volatile double sum = 0.0; \/\/ volatile, global so not optimized away$/;"	v
sum_	src/leveldb/util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	src/leveldb/util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sumadd	src/secp256k1/src/scalar_4x64_impl.h	/^#define sumadd(/;"	d
sumadd	src/secp256k1/src/scalar_4x64_impl.h	/^#undef sumadd$/;"	d
sumadd	src/secp256k1/src/scalar_8x32_impl.h	/^#define sumadd(/;"	d
sumadd	src/secp256k1/src/scalar_8x32_impl.h	/^#undef sumadd$/;"	d
sumadd_fast	src/secp256k1/src/scalar_4x64_impl.h	/^#define sumadd_fast(/;"	d
sumadd_fast	src/secp256k1/src/scalar_4x64_impl.h	/^#undef sumadd_fast$/;"	d
sumadd_fast	src/secp256k1/src/scalar_8x32_impl.h	/^#define sumadd_fast(/;"	d
sumadd_fast	src/secp256k1/src/scalar_8x32_impl.h	/^#undef sumadd_fast$/;"	d
surpair	src/univalue/lib/univalue_utffilter.h	/^    unsigned int surpair; \/\/ First half of open UTF-16 surrogate pair, or 0$/;"	m	class:JSONUTF8StringFilter
swap	src/prevector.h	/^    void swap(prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
swap	src/test/checkqueue_tests.cpp	/^    void swap(FailingCheck& x)$/;"	f	struct:FailingCheck
swap	src/test/checkqueue_tests.cpp	/^    void swap(FakeCheck& x){};$/;"	f	struct:FakeCheck
swap	src/test/checkqueue_tests.cpp	/^    void swap(FakeCheckCheckCompletion& x){};$/;"	f	struct:FakeCheckCheckCompletion
swap	src/test/checkqueue_tests.cpp	/^    void swap(FrozenCleanupCheck& x){std::swap(should_freeze, x.should_freeze);};$/;"	f	struct:FrozenCleanupCheck
swap	src/test/checkqueue_tests.cpp	/^    void swap(MemoryCheck& x) { std::swap(b, x.b); };$/;"	f	struct:MemoryCheck
swap	src/test/checkqueue_tests.cpp	/^    void swap(UniqueCheck& x) { std::swap(x.check_id, check_id); };$/;"	f	struct:UniqueCheck
swap	src/test/prevector_tests.cpp	/^    void swap() {$/;"	f	class:prevector_tester
swap	src/validation.h	/^    void swap(CScriptCheck &check) {$/;"	f	class:CScriptCheck
swap_magic_bytes	test/functional/p2p_invalid_messages.py	/^        def swap_magic_bytes():$/;"	f	function:InvalidMessagesTest.test_magic_bytes
sync	src/leveldb/db/db_impl.cc	/^  bool sync;$/;"	m	struct:leveldb::DBImpl::Writer	file:
sync	src/leveldb/include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
sync_all	test/functional/test_framework/test_framework.py	/^    def sync_all(self, nodes=None, **kwargs):$/;"	m	class:BitcoinTestFramework
sync_blocks	test/functional/test_framework/test_framework.py	/^    def sync_blocks(self, nodes=None, **kwargs):$/;"	m	class:BitcoinTestFramework
sync_blocks	test/functional/test_framework/util.py	/^def sync_blocks(rpc_connections, *, wait=1, timeout=60):$/;"	f
sync_mempools	test/functional/test_framework/test_framework.py	/^    def sync_mempools(self, nodes=None, **kwargs):$/;"	m	class:BitcoinTestFramework
sync_mempools	test/functional/test_framework/util.py	/^def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):$/;"	f
sync_node3blocks	test/functional/feature_dbcrash.py	/^    def sync_node3blocks(self, block_hashes):$/;"	m	class:ChainstateWriteCrashTest
sync_with_ping	test/functional/test_framework/mininode.py	/^    def sync_with_ping(self, timeout=60):$/;"	m	class:P2PInterface
syncoptions	src/dbwrapper.h	/^    leveldb::WriteOptions syncoptions;$/;"	m	class:CDBWrapper
syncwithvalidationinterfacequeue	src/rpc/blockchain.cpp	/^static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)$/;"	f	file:
sys	contrib/devtools/circular-dependencies.py	/^import sys$/;"	i
sys	contrib/devtools/clang-format-diff.py	/^import sys$/;"	i
sys	contrib/devtools/copyright_header.py	/^import sys$/;"	i
sys	contrib/devtools/github-merge.py	/^import sys$/;"	i
sys	contrib/devtools/optimize-pngs.py	/^import sys$/;"	i
sys	contrib/devtools/security-check.py	/^import sys$/;"	i
sys	contrib/devtools/symbol-check.py	/^import sys$/;"	i
sys	contrib/devtools/update-translations.py	/^import sys$/;"	i
sys	contrib/gitian-build.py	/^import sys$/;"	i
sys	contrib/linearize/linearize-data.py	/^import sys$/;"	i
sys	contrib/linearize/linearize-hashes.py	/^import sys$/;"	i
sys	contrib/macdeploy/custom_dsstore.py	/^import sys$/;"	i
sys	contrib/seeds/generate-seeds.py	/^import sys$/;"	i
sys	contrib/seeds/makeseeds.py	/^import sys$/;"	i
sys	contrib/testgen/gen_key_io_test_vectors.py	/^    import sys$/;"	i
sys	contrib/verify-commits/verify-commits.py	/^import sys$/;"	i
sys	contrib/zmq/zmq_sub.py	/^import sys$/;"	i
sys	share/qt/extract_strings_qt.py	/^import sys$/;"	i
sys	test/functional/combine_logs.py	/^import sys$/;"	i
sys	test/functional/rpc_bind.py	/^import sys$/;"	i
sys	test/functional/rpc_users.py	/^import sys$/;"	i
sys	test/functional/test_framework/mininode.py	/^import sys$/;"	i
sys	test/functional/test_framework/netutil.py	/^import sys$/;"	i
sys	test/functional/test_framework/test_framework.py	/^import sys$/;"	i
sys	test/functional/test_framework/test_node.py	/^import sys$/;"	i
sys	test/functional/test_runner.py	/^import sys$/;"	i
sys	test/fuzz/test_runner.py	/^import sys$/;"	i
sys	test/lint/check-rpc-mappings.py	/^import sys$/;"	i
sys	test/lint/lint-format-strings.py	/^import sys$/;"	i
sys	test/util/bitcoin-util-test.py	/^import sys$/;"	i
sys	test/util/rpcauth-test.py	/^import sys$/;"	i
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	doc/man/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	src/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	src/secp256k1/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	src/univalue/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t_	src/leveldb/db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
tab	src/qt/addressbookpage.h	/^    Tabs tab;$/;"	m	class:AddressBookPage
tabFocus	src/qt/rpcconsole.cpp	/^RPCConsole::TabTypes RPCConsole::tabFocus() const$/;"	f	class:RPCConsole
tabTitle	src/qt/rpcconsole.cpp	/^QString RPCConsole::tabTitle(TabTypes tab_type) const$/;"	f	class:RPCConsole
table	src/cuckoocache.h	/^    std::vector<Element> table;$/;"	m	class:CuckooCache::cache
table	src/leveldb/db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table0_	src/leveldb/util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table1_	src/leveldb/util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table2_	src/leveldb/util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table3_	src/leveldb/util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
tableRPC	src/rpc/server.cpp	/^CRPCTable tableRPC;$/;"	v
tableView	src/qt/guiutil.h	/^            QTableView* tableView;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
table_	src/leveldb/db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	src/leveldb/table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_	src/leveldb/util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
table_cache_	src/leveldb/db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	src/leveldb/db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon30::Repairer	file:
table_cache_	src/leveldb/db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	src/leveldb/db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon30::Repairer	file:
tables_	src/leveldb/db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon30::Repairer	file:
tabs	src/qt/rpcconsole.h	/^    std::vector<TabTypes> tabs() const { return {TAB_INFO, TAB_CONSOLE, TAB_GRAPH, TAB_PEERS}; }$/;"	f	class:RPCConsole
tagSequence	src/test/raii_event_tests.cpp	/^static uint16_t tagSequence = 0;$/;"	v	file:
tag_free	src/test/raii_event_tests.cpp	/^static void tag_free(void* mem) {$/;"	f	file:
tag_malloc	src/test/raii_event_tests.cpp	/^static void* tag_malloc(size_t sz) {$/;"	f	file:
tags	src/test/raii_event_tests.cpp	/^static std::map<void*, short> tags;$/;"	v	file:
tallyitem	src/wallet/rpcwallet.cpp	/^    tallyitem()$/;"	f	struct:tallyitem
tallyitem	src/wallet/rpcwallet.cpp	/^struct tallyitem$/;"	s	file:
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	src/secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	src/secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	src/secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	src/secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz$/;"	m
tardir	src/secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	src/univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	src/univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	src/univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	src/univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz$/;"	m
tardir	src/univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target	src/leveldb/include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target	src/torcontrol.cpp	/^    std::string target;$/;"	m	class:TorController	file:
target_	src/leveldb/db/fault_injection_test.cc	/^  WritableFile* target_;$/;"	m	class:leveldb::TestWritableFile	file:
target_	src/leveldb/include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
target_alias	Makefile	/^target_alias = $/;"	m
target_alias	doc/man/Makefile	/^target_alias = $/;"	m
target_alias	src/Makefile	/^target_alias = $/;"	m
target_alias	src/secp256k1/Makefile	/^target_alias = $/;"	m
target_alias	src/univalue/Makefile	/^target_alias = $/;"	m
taskQueue	src/scheduler.h	/^    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;$/;"	m	class:CScheduler
tau	src/crypto/chacha20.cpp	/^static const unsigned char tau[] = "expand 16-byte k";$/;"	v	file:
tempfile	test/functional/combine_logs.py	/^import tempfile$/;"	i
tempfile	test/functional/test_framework/test_framework.py	/^import tempfile$/;"	i
tempfile	test/functional/test_framework/test_node.py	/^import tempfile$/;"	i
tempfile	test/functional/test_runner.py	/^import tempfile$/;"	i
templates	contrib/testgen/gen_key_io_test_vectors.py	/^templates = [$/;"	v
templock	src/reverselock.h	/^    Lock templock;$/;"	m	class:reverse_lock
temporary_fd_	src/leveldb/util/env_posix.cc	/^  bool temporary_fd_;  \/\/ If true, fd_ is -1 and we open on every read.$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
test	configure	/^    test()$/;"	f
test	src/leveldb/db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon24::MTState	file:
test	src/leveldb/util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	src/leveldb/util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	src/leveldb/util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	src/leveldb/util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
test	src/test/prevector_tests.cpp	/^    void test() {$/;"	f	class:prevector_tester	file:
test1	configure	/^    test1()$/;"	f
test1	src/test/bip32_tests.cpp	/^TestVector test1 =$/;"	v
test1	src/test/crypto_tests.cpp	/^const std::string test1 = LongTestString();$/;"	v
test2	configure	/^    test2()$/;"	f
test2	src/test/bip32_tests.cpp	/^TestVector test2 =$/;"	v
test3	configure	/^    test3()$/;"	f
test3	src/test/bip32_tests.cpp	/^TestVector test3 =$/;"	v
testChain	src/bench/coin_selection.cpp	/^static auto testChain = interfaces::MakeChain();$/;"	v	file:
testChain	src/wallet/test/coinselector_tests.cpp	/^static auto testChain = interfaces::MakeChain();$/;"	v	file:
testCreateECDHSecret	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testCreateECDHSecret() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakAdd_1	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakAdd_1() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakAdd_2	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakAdd_2() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakMul_1	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakMul_1() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakMul_2	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakMul_2() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPubKeyCreateNeg	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPubKeyCreateNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testPubKeyCreatePos	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPubKeyCreatePos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testRandomize	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testRandomize() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testSecKeyVerifyNeg	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSecKeyVerifyNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSecKeyVerifyPos	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSecKeyVerifyPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSignNeg	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSignNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSignPos	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSignPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testVerifyNeg	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testVerifyNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testVerifyPos	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testVerifyPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
test_64bit_PE	contrib/devtools/test-security-check.py	/^    def test_64bit_PE(self):$/;"	m	class:TestSecurityChecks
test_ELF	contrib/devtools/test-security-check.py	/^    def test_ELF(self):$/;"	m	class:TestSecurityChecks
test_add_neg_y_diff_x	src/secp256k1/src/tests.c	/^void test_add_neg_y_diff_x(void) {$/;"	f
test_address	test/functional/test_framework/wallet_util.py	/^def test_address(node, address, **kwargs):$/;"	f
test_address	test/functional/wallet_address_types.py	/^    def test_address(self, node, address, multisig, typ):$/;"	m	class:AddressTypeTest
test_address	test/functional/wallet_import_with_label.py	/^from test_framework.wallet_util import test_address$/;"	i
test_bad_scalar	src/secp256k1/src/modules/ecdh/tests_impl.h	/^void test_bad_scalar(void) {$/;"	f
test_balances	test/functional/wallet_balance.py	/^        def test_balances(*, fee_node_1=0):$/;"	f	function:WalletTest.run_test
test_batch_request	test/functional/interface_rpc.py	/^    def test_batch_request(self):$/;"	m	class:RPCInterfaceTest
test_bip68_not_consensus	test/functional/feature_bip68_sequence.py	/^    def test_bip68_not_consensus(self):$/;"	m	class:BIP68Test
test_block_malleability	test/functional/p2p_segwit.py	/^    def test_block_malleability(self):$/;"	m	class:SegWitTest
test_block_relay	test/functional/p2p_segwit.py	/^    def test_block_relay(self):$/;"	m	class:SegWitTest
test_bumpfee_metadata	test/functional/wallet_bumpfee.py	/^def test_bumpfee_metadata(rbf_node, dest_address):$/;"	f
test_bumpfee_with_descendant_fails	test/functional/wallet_bumpfee.py	/^def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address):$/;"	f
test_cache	src/test/cuckoocache_tests.cpp	/^static double test_cache(size_t megabytes, double load)$/;"	f	file:
test_cache_erase	src/test/cuckoocache_tests.cpp	/^static void test_cache_erase(size_t megabytes)$/;"	f	file:
test_cache_erase_parallel	src/test/cuckoocache_tests.cpp	/^static void test_cache_erase_parallel(size_t megabytes)$/;"	f	file:
test_cache_generations	src/test/cuckoocache_tests.cpp	/^static void test_cache_generations()$/;"	f	file:
test_categories	test/functional/rpc_help.py	/^    def test_categories(self):$/;"	m	class:HelpRpcTest
test_change_output_type	test/functional/wallet_address_types.py	/^    def test_change_output_type(self, node_sender, destinations, expected_type):$/;"	m	class:AddressTypeTest
test_change_script_match	test/functional/wallet_bumpfee.py	/^def test_change_script_match(rbf_node, dest_address):$/;"	f
test_check_password_hmac	test/util/rpcauth-test.py	/^    def test_check_password_hmac(self):$/;"	m	class:TestRPCAuth
test_checksum	test/functional/p2p_invalid_messages.py	/^    def test_checksum(self):$/;"	m	class:InvalidMessagesTest
test_command	test/functional/p2p_invalid_messages.py	/^    def test_command(self):$/;"	m	class:InvalidMessagesTest
test_compactblock_construction	test/functional/p2p_compactblocks.py	/^    def test_compactblock_construction(self, test_node, use_witness_address=True):$/;"	m	class:CompactBlocksTest
test_compactblock_reconstruction_multiple_peers	test/functional/p2p_compactblocks.py	/^    def test_compactblock_reconstruction_multiple_peers(self, stalling_peer, delivery_peer):$/;"	m	class:CompactBlocksTest
test_compactblock_requests	test/functional/p2p_compactblocks.py	/^    def test_compactblock_requests(self, test_node, segwit=True):$/;"	m	class:CompactBlocksTest
test_compactblocks_not_at_tip	test/functional/p2p_compactblocks.py	/^    def test_compactblocks_not_at_tip(self, test_node):$/;"	m	class:CompactBlocksTest
test_config_file_parser	test/functional/feature_config_args.py	/^    def test_config_file_parser(self):$/;"	m	class:ConfArgsTest
test_constant_wnaf	src/secp256k1/src/tests.c	/^void test_constant_wnaf(const secp256k1_scalar *number, int w) {$/;"	f
test_constant_wnaf_negate	src/secp256k1/src/tests.c	/^void test_constant_wnaf_negate(const secp256k1_scalar *number) {$/;"	f
test_desc	test/functional/wallet_address_types.py	/^    def test_desc(self, node, address, multisig, typ, utxo):$/;"	m	class:AddressTypeTest
test_disable_flag	test/functional/feature_bip68_sequence.py	/^    def test_disable_flag(self):$/;"	m	class:BIP68Test
test_double_send	test/functional/wallet_listsinceblock.py	/^    def test_double_send(self):$/;"	m	class:ListSinceBlockTest
test_double_spend	test/functional/wallet_listsinceblock.py	/^    def test_double_spend(self):$/;"	m	class:ListSinceBlockTest
test_doublespend_chain	test/functional/feature_rbf.py	/^    def test_doublespend_chain(self):$/;"	m	class:ReplaceByFeeTest
test_doublespend_tree	test/functional/feature_rbf.py	/^    def test_doublespend_tree(self):$/;"	m	class:ReplaceByFeeTest
test_dust_to_fee	test/functional/wallet_bumpfee.py	/^def test_dust_to_fee(rbf_node, dest_address):$/;"	f
test_ec_combine	src/secp256k1/src/tests.c	/^void test_ec_combine(void) {$/;"	f
test_ecdh_api	src/secp256k1/src/modules/ecdh/tests_impl.h	/^void test_ecdh_api(void) {$/;"	f
test_ecdh_generator_basepoint	src/secp256k1/src/modules/ecdh/tests_impl.h	/^void test_ecdh_generator_basepoint(void) {$/;"	f
test_ecdsa_der_parse	src/secp256k1/src/tests.c	/^int test_ecdsa_der_parse(const unsigned char *sig, size_t siglen, int certainly_der, int certainly_not_der) {$/;"	f
test_ecdsa_edge_cases	src/secp256k1/src/tests.c	/^void test_ecdsa_edge_cases(void) {$/;"	f
test_ecdsa_end_to_end	src/secp256k1/src/tests.c	/^void test_ecdsa_end_to_end(void) {$/;"	f
test_ecdsa_openssl	src/secp256k1/src/tests.c	/^void test_ecdsa_openssl(void) {$/;"	f
test_ecdsa_recovery_api	src/secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_api(void) {$/;"	f
test_ecdsa_recovery_edge_cases	src/secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_edge_cases(void) {$/;"	f
test_ecdsa_recovery_end_to_end	src/secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_end_to_end(void) {$/;"	f
test_ecdsa_sign_verify	src/secp256k1/src/tests.c	/^void test_ecdsa_sign_verify(void) {$/;"	f
test_ecmult_constants	src/secp256k1/src/tests.c	/^void test_ecmult_constants(void) {$/;"	f
test_ecmult_gen_blind	src/secp256k1/src/tests.c	/^void test_ecmult_gen_blind(void) {$/;"	f
test_ecmult_gen_blind_reset	src/secp256k1/src/tests.c	/^void test_ecmult_gen_blind_reset(void) {$/;"	f
test_end_to_end_block_relay	test/functional/p2p_compactblocks.py	/^    def test_end_to_end_block_relay(self, listeners):$/;"	m	class:CompactBlocksTest
test_exhaustive_addition	src/secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_addition(const secp256k1_ge *group, const secp256k1_gej *groupj, int order) {$/;"	f
test_exhaustive_ecmult	src/secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_ecmult(const secp256k1_context *ctx, const secp256k1_ge *group, const secp256k1_gej *groupj, int order) {$/;"	f
test_exhaustive_endomorphism	src/secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_endomorphism(const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_recovery_sign	src/secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_recovery_verify	src/secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_sign	src/secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_verify	src/secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_extra_witness_data	test/functional/p2p_segwit.py	/^    def test_extra_witness_data(self):$/;"	m	class:SegWitTest
test_failed	src/univalue/test/unitester.cpp	/^static bool test_failed = false;$/;"	v	file:
test_function	test/functional/test_framework/mininode.py	/^        def test_function():$/;"	f	function:P2PInterface.wait_for_header
test_function	test/functional/test_framework/mininode.py	/^        def test_function():$/;"	f	function:P2PInterface.wait_for_tx
test_fuzz_address_deserialize_LINK	src/Makefile	/^test_fuzz_address_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_address_deserialize_OBJECTS	src/Makefile	/^test_fuzz_address_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_addrman_deserialize_LINK	src/Makefile	/^test_fuzz_addrman_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_addrman_deserialize_OBJECTS	src/Makefile	/^test_fuzz_addrman_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_banentry_deserialize_LINK	src/Makefile	/^test_fuzz_banentry_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_banentry_deserialize_OBJECTS	src/Makefile	/^test_fuzz_banentry_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_block_deserialize_LINK	src/Makefile	/^test_fuzz_block_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_block_deserialize_OBJECTS	src/Makefile	/^test_fuzz_block_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blockheader_deserialize_LINK	src/Makefile	/^test_fuzz_blockheader_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_blockheader_deserialize_OBJECTS	src/Makefile	/^test_fuzz_blockheader_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blocklocator_deserialize_LINK	src/Makefile	/^test_fuzz_blocklocator_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_blocklocator_deserialize_OBJECTS	src/Makefile	/^test_fuzz_blocklocator_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blockmerkleroot_LINK	src/Makefile	/^test_fuzz_blockmerkleroot_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_blockmerkleroot_OBJECTS	src/Makefile	/^test_fuzz_blockmerkleroot_OBJECTS =  \\$/;"	m
test_fuzz_blocktransactions_deserialize_LINK	src/Makefile	/^test_fuzz_blocktransactions_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_blocktransactions_deserialize_OBJECTS	src/Makefile	/^test_fuzz_blocktransactions_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blocktransactionsrequest_deserialize_LINK	src/Makefile	/^test_fuzz_blocktransactionsrequest_deserialize_LINK = $(LIBTOOL) \\$/;"	m
test_fuzz_blocktransactionsrequest_deserialize_OBJECTS	src/Makefile	/^test_fuzz_blocktransactionsrequest_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blockundo_deserialize_LINK	src/Makefile	/^test_fuzz_blockundo_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_blockundo_deserialize_OBJECTS	src/Makefile	/^test_fuzz_blockundo_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_bloomfilter_deserialize_LINK	src/Makefile	/^test_fuzz_bloomfilter_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_bloomfilter_deserialize_OBJECTS	src/Makefile	/^test_fuzz_bloomfilter_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_coins_deserialize_LINK	src/Makefile	/^test_fuzz_coins_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_coins_deserialize_OBJECTS	src/Makefile	/^test_fuzz_coins_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_diskblockindex_deserialize_LINK	src/Makefile	/^test_fuzz_diskblockindex_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_diskblockindex_deserialize_OBJECTS	src/Makefile	/^test_fuzz_diskblockindex_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_inv_deserialize_LINK	src/Makefile	/^test_fuzz_inv_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_inv_deserialize_OBJECTS	src/Makefile	/^test_fuzz_inv_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_messageheader_deserialize_LINK	src/Makefile	/^test_fuzz_messageheader_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_messageheader_deserialize_OBJECTS	src/Makefile	/^test_fuzz_messageheader_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_netaddr_deserialize_LINK	src/Makefile	/^test_fuzz_netaddr_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_netaddr_deserialize_OBJECTS	src/Makefile	/^test_fuzz_netaddr_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_script_flags_LINK	src/Makefile	/^test_fuzz_script_flags_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_script_flags_OBJECTS	src/Makefile	/^test_fuzz_script_flags_OBJECTS = $(am_test_fuzz_script_flags_OBJECTS)$/;"	m
test_fuzz_service_deserialize_LINK	src/Makefile	/^test_fuzz_service_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_service_deserialize_OBJECTS	src/Makefile	/^test_fuzz_service_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_transaction_deserialize_LINK	src/Makefile	/^test_fuzz_transaction_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_transaction_deserialize_OBJECTS	src/Makefile	/^test_fuzz_transaction_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_txoutcompressor_deserialize_LINK	src/Makefile	/^test_fuzz_txoutcompressor_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_txoutcompressor_deserialize_OBJECTS	src/Makefile	/^test_fuzz_txoutcompressor_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_txundo_deserialize_LINK	src/Makefile	/^test_fuzz_txundo_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_txundo_deserialize_OBJECTS	src/Makefile	/^test_fuzz_txundo_deserialize_OBJECTS =  \\$/;"	m
test_ge	src/secp256k1/src/tests.c	/^void test_ge(void) {$/;"	f
test_generate_password	test/util/rpcauth-test.py	/^    def test_generate_password(self):$/;"	m	class:TestRPCAuth
test_generate_salt	test/util/rpcauth-test.py	/^    def test_generate_salt(self):$/;"	m	class:TestRPCAuth
test_getblocktemplate_before_lockin	test/functional/p2p_segwit.py	/^    def test_getblocktemplate_before_lockin(self):$/;"	m	class:SegWitTest
test_getblocktxn_handler	test/functional/p2p_compactblocks.py	/^    def test_getblocktxn_handler(self, test_node):$/;"	m	class:CompactBlocksTest
test_getblocktxn_requests	test/functional/p2p_compactblocks.py	/^    def test_getblocktxn_requests(self, test_node):$/;"	m	class:CompactBlocksTest
test_getblocktxn_response	test/functional/p2p_compactblocks.py	/^        def test_getblocktxn_response(compact_block, peer, expected_result):$/;"	f	function:CompactBlocksTest.test_getblocktxn_requests
test_getrpcinfo	test/functional/interface_rpc.py	/^    def test_getrpcinfo(self):$/;"	m	class:RPCInterfaceTest
test_group_decompress	src/secp256k1/src/tests.c	/^void test_group_decompress(const secp256k1_fe* x) {$/;"	f
test_height_min	test/functional/feature_pruning.py	/^    def test_height_min(self):$/;"	m	class:PruneTest
test_http_status_codes	test/functional/interface_rpc.py	/^    def test_http_status_codes(self):$/;"	m	class:RPCInterfaceTest
test_importmulti	test/functional/wallet_importmulti.py	/^    def test_importmulti(self, req, success, error_code=None, error_message=None, warnings=[]):$/;"	m	class:ImportMultiTest
test_incorrect_blocktxn_response	test/functional/p2p_compactblocks.py	/^    def test_incorrect_blocktxn_response(self, test_node):$/;"	m	class:CompactBlocksTest
test_invalid_blockhash	test/functional/wallet_listsinceblock.py	/^    def test_invalid_blockhash(self):$/;"	m	class:ListSinceBlockTest
test_invalid_cmpctblock_message	test/functional/p2p_compactblocks.py	/^    def test_invalid_cmpctblock_message(self):$/;"	m	class:CompactBlocksTest
test_invalid_tx_in_compactblock	test/functional/p2p_compactblocks.py	/^    def test_invalid_tx_in_compactblock(self, test_node, use_segwit=True):$/;"	m	class:CompactBlocksTest
test_ipv6_local	test/functional/feature_proxy.py	/^from test_framework.netutil import test_ipv6_local$/;"	i
test_ipv6_local	test/functional/rpc_bind.py	/^from test_framework.netutil import all_interfaces, addr_to_hex, get_bind_addrs, test_ipv6_local$/;"	i
test_ipv6_local	test/functional/test_framework/netutil.py	/^def test_ipv6_local():$/;"	f
test_locked_wallet_fails	test/functional/wallet_bumpfee.py	/^def test_locked_wallet_fails(rbf_node, dest_address):$/;"	f
test_long_call	test/functional/feature_shutdown.py	/^def test_long_call(node):$/;"	f
test_magic_bytes	test/functional/p2p_invalid_messages.py	/^    def test_magic_bytes(self):$/;"	m	class:InvalidMessagesTest
test_max_witness_program_length	test/functional/p2p_segwit.py	/^    def test_max_witness_program_length(self):$/;"	m	class:SegWitTest
test_max_witness_push_length	test/functional/p2p_segwit.py	/^    def test_max_witness_push_length(self):$/;"	m	class:SegWitTest
test_new_unconfirmed_inputs	test/functional/feature_rbf.py	/^    def test_new_unconfirmed_inputs(self):$/;"	m	class:ReplaceByFeeTest
test_no_blockhash	test/functional/wallet_listsinceblock.py	/^    def test_no_blockhash(self):$/;"	m	class:ListSinceBlockTest
test_no_more_inputs_fails	test/functional/wallet_bumpfee.py	/^def test_no_more_inputs_fails(rbf_node, dest_address):$/;"	f
test_no_nul_CXXFLAGS	src/univalue/Makefile	/^test_no_nul_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
test_no_nul_DEPENDENCIES	src/univalue/Makefile	/^test_no_nul_DEPENDENCIES = libunivalue.la$/;"	m
test_no_nul_LDADD	src/univalue/Makefile	/^test_no_nul_LDADD = libunivalue.la$/;"	m
test_no_nul_LDFLAGS	src/univalue/Makefile	/^test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_no_nul_LINK	src/univalue/Makefile	/^test_no_nul_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
test_no_nul_OBJECTS	src/univalue/Makefile	/^test_no_nul_OBJECTS = $(am_test_no_nul_OBJECTS)$/;"	m
test_no_nul_SOURCES	src/univalue/Makefile	/^test_no_nul_SOURCES = test\/no_nul.cpp$/;"	m
test_non_standard_witness	test/functional/p2p_segwit.py	/^    def test_non_standard_witness(self):$/;"	m	class:SegWitTest
test_non_standard_witness_blinding	test/functional/p2p_segwit.py	/^    def test_non_standard_witness_blinding(self):$/;"	m	class:SegWitTest
test_non_witness_transaction	test/functional/p2p_segwit.py	/^    def test_non_witness_transaction(self):$/;"	m	class:SegWitTest
test_nonnull_locators	test/functional/p2p_sendheaders.py	/^    def test_nonnull_locators(self, test_node, inv_node):$/;"	m	class:SendHeadersTest
test_nonrbf_bumpfee_fails	test/functional/wallet_bumpfee.py	/^def test_nonrbf_bumpfee_fails(peer_node, dest_address):$/;"	f
test_nonzero_locks	test/functional/feature_bip68_sequence.py	/^        def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):$/;"	f	function:BIP68Test.test_sequence_lock_unconfirmed_inputs
test_notmine_bumpfee_fails	test/functional/wallet_bumpfee.py	/^def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):$/;"	f
test_null_locators	test/functional/p2p_sendheaders.py	/^    def test_null_locators(self, test_node, inv_node):$/;"	m	class:SendHeadersTest
test_num_add_sub	src/secp256k1/src/tests.c	/^void test_num_add_sub(void) {$/;"	f
test_num_jacobi	src/secp256k1/src/tests.c	/^void test_num_jacobi(void) {$/;"	f
test_num_mod	src/secp256k1/src/tests.c	/^void test_num_mod(void) {$/;"	f
test_num_negate	src/secp256k1/src/tests.c	/^void test_num_negate(void) {$/;"	f
test_object_CXXFLAGS	src/univalue/Makefile	/^test_object_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
test_object_DEPENDENCIES	src/univalue/Makefile	/^test_object_DEPENDENCIES = libunivalue.la$/;"	m
test_object_LDADD	src/univalue/Makefile	/^test_object_LDADD = libunivalue.la$/;"	m
test_object_LDFLAGS	src/univalue/Makefile	/^test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_object_LINK	src/univalue/Makefile	/^test_object_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
test_object_OBJECTS	src/univalue/Makefile	/^test_object_OBJECTS = $(am_test_object_OBJECTS)$/;"	m
test_object_SOURCES	src/univalue/Makefile	/^test_object_SOURCES = test\/object.cpp$/;"	m
test_one_input	src/test/fuzz/deserialize.cpp	/^void test_one_input(std::vector<uint8_t> buffer)$/;"	f
test_one_input	src/test/fuzz/script_flags.cpp	/^void test_one_input(std::vector<uint8_t> buffer)$/;"	f
test_opt_in	test/functional/feature_rbf.py	/^    def test_opt_in(self):$/;"	m	class:ReplaceByFeeTest
test_p2sh_witness	test/functional/p2p_segwit.py	/^    def test_p2sh_witness(self):$/;"	m	class:SegWitTest
test_point_times_order	src/secp256k1/src/tests.c	/^void test_point_times_order(const secp256k1_gej *point) {$/;"	f
test_premature_coinbase_witness_spend	test/functional/p2p_segwit.py	/^    def test_premature_coinbase_witness_spend(self):$/;"	m	class:SegWitTest
test_prioritised_transactions	test/functional/feature_rbf.py	/^    def test_prioritised_transactions(self):$/;"	m	class:ReplaceByFeeTest
test_rand_bits	src/secp256k1/src/tests.c	/^void test_rand_bits(int rand32, int bits) {$/;"	f
test_rand_int	src/secp256k1/src/tests.c	/^void test_rand_int(uint32_t range, uint32_t subrange) {$/;"	f
test_random_pubkeys	src/secp256k1/src/tests.c	/^void test_random_pubkeys(void) {$/;"	f
test_rebumping	test/functional/wallet_bumpfee.py	/^def test_rebumping(rbf_node, dest_address):$/;"	f
test_rebumping_not_replaceable	test/functional/wallet_bumpfee.py	/^def test_rebumping_not_replaceable(rbf_node, dest_address):$/;"	f
test_reorg	test/functional/wallet_listsinceblock.py	/^    def test_reorg(self):$/;"	m	class:ListSinceBlockTest
test_replacement_feeperkb	test/functional/feature_rbf.py	/^    def test_replacement_feeperkb(self):$/;"	m	class:ReplaceByFeeTest
test_rest_request	test/functional/interface_rest.py	/^    def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):$/;"	m	class:RESTTest
test_rpc	test/functional/feature_rbf.py	/^    def test_rpc(self):$/;"	m	class:ReplaceByFeeTest
test_scalar_split	src/secp256k1/src/tests.c	/^void test_scalar_split(void) {$/;"	f
test_segwit_bumpfee_succeeds	test/functional/wallet_bumpfee.py	/^def test_segwit_bumpfee_succeeds(rbf_node, dest_address):$/;"	f
test_segwit_versions	test/functional/p2p_segwit.py	/^    def test_segwit_versions(self):$/;"	m	class:SegWitTest
test_sendcmpct	test/functional/p2p_compactblocks.py	/^    def test_sendcmpct(self, test_node, old_node=None):$/;"	m	class:CompactBlocksTest
test_sequence_lock_confirmed_inputs	test/functional/feature_bip68_sequence.py	/^    def test_sequence_lock_confirmed_inputs(self):$/;"	m	class:BIP68Test
test_sequence_lock_unconfirmed_inputs	test/functional/feature_bip68_sequence.py	/^    def test_sequence_lock_unconfirmed_inputs(self):$/;"	m	class:BIP68Test
test_settxfee	test/functional/wallet_bumpfee.py	/^def test_settxfee(rbf_node, dest_address):$/;"	f
test_signature_version_1	test/functional/p2p_segwit.py	/^    def test_signature_version_1(self):$/;"	m	class:SegWitTest
test_simple_bumpfee_succeeds	test/functional/wallet_bumpfee.py	/^def test_simple_bumpfee_succeeds(self, rbf_node, peer_node, dest_address):$/;"	f
test_simple_doublespend	test/functional/feature_rbf.py	/^    def test_simple_doublespend(self):$/;"	m	class:ReplaceByFeeTest
test_size	test/functional/p2p_invalid_messages.py	/^    def test_size(self):$/;"	m	class:InvalidMessagesTest
test_small_output_fails	test/functional/wallet_bumpfee.py	/^def test_small_output_fails(rbf_node, dest_address):$/;"	f
test_small_output_with_feerate_succeeds	test/functional/wallet_bumpfee.py	/^def test_small_output_with_feerate_succeeds(rbf_node, dest_address):$/;"	f
test_spends_of_conflicting_outputs	test/functional/feature_rbf.py	/^    def test_spends_of_conflicting_outputs(self):$/;"	m	class:ReplaceByFeeTest
test_sqrt	src/secp256k1/src/tests.c	/^void test_sqrt(const secp256k1_fe *a, const secp256k1_fe *k) {$/;"	f
test_standardness_v0	test/functional/p2p_segwit.py	/^    def test_standardness_v0(self):$/;"	m	class:SegWitTest
test_submit_block	test/functional/p2p_segwit.py	/^    def test_submit_block(self):$/;"	m	class:SegWitTest
test_success	test/functional/test_framework/test_node.py	/^        def test_success(cmd):$/;"	f	function:TestNode._start_perf
test_superfluous_witness	test/functional/p2p_segwit.py	/^    def test_superfluous_witness(self):$/;"	m	class:SegWitTest
test_test_bitcoin_CPPFLAGS	src/Makefile	/^test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)$/;"	m
test_test_bitcoin_CXXFLAGS	src/Makefile	/^test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
test_test_bitcoin_DEPENDENCIES	src/Makefile	/^test_test_bitcoin_DEPENDENCIES = $(am__append_33) \\$/;"	m
test_test_bitcoin_LDADD	src/Makefile	/^test_test_bitcoin_LDADD = $(am__append_33) \\$/;"	m
test_test_bitcoin_LDFLAGS	src/Makefile	/^test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static$/;"	m
test_test_bitcoin_LINK	src/Makefile	/^test_test_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_bitcoin_OBJECTS	src/Makefile	/^test_test_bitcoin_OBJECTS = $(am_test_test_bitcoin_OBJECTS) \\$/;"	m
test_test_bitcoin_SOURCES	src/Makefile	/^test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)$/;"	m
test_test_json_CXXFLAGS	src/univalue/Makefile	/^test_test_json_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
test_test_json_DEPENDENCIES	src/univalue/Makefile	/^test_test_json_DEPENDENCIES = libunivalue.la$/;"	m
test_test_json_LDADD	src/univalue/Makefile	/^test_test_json_LDADD = libunivalue.la$/;"	m
test_test_json_LDFLAGS	src/univalue/Makefile	/^test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_test_json_LINK	src/univalue/Makefile	/^test_test_json_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_json_OBJECTS	src/univalue/Makefile	/^test_test_json_OBJECTS = $(am_test_test_json_OBJECTS)$/;"	m
test_test_json_SOURCES	src/univalue/Makefile	/^test_test_json_SOURCES = test\/test_json.cpp$/;"	m
test_tip_after_message	test/functional/p2p_compactblocks.py	/^        def test_tip_after_message(node, peer, msg, tip):$/;"	f	function:CompactBlocksTest.test_getblocktxn_requests
test_too_many_replacements	test/functional/feature_rbf.py	/^    def test_too_many_replacements(self):$/;"	m	class:ReplaceByFeeTest
test_transaction_acceptance	test/functional/p2p_segwit.py	/^def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):$/;"	f
test_tx_relay_after_segwit_activation	test/functional/p2p_segwit.py	/^    def test_tx_relay_after_segwit_activation(self):$/;"	m	class:SegWitTest
test_uncompressed_pubkey	test/functional/p2p_segwit.py	/^    def test_uncompressed_pubkey(self):$/;"	m	class:SegWitTest
test_unconfirmed_not_spendable	test/functional/wallet_bumpfee.py	/^def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):$/;"	f
test_unitester_CXXFLAGS	src/univalue/Makefile	/^test_unitester_CXXFLAGS = -I$(top_srcdir)\/include -DJSON_TEST_SRC=\\"$(srcdir)\/$(TEST_DATA_DIR)\\"$/;"	m
test_unitester_DEPENDENCIES	src/univalue/Makefile	/^test_unitester_DEPENDENCIES = libunivalue.la$/;"	m
test_unitester_LDADD	src/univalue/Makefile	/^test_unitester_LDADD = libunivalue.la$/;"	m
test_unitester_LDFLAGS	src/univalue/Makefile	/^test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_unitester_LINK	src/univalue/Makefile	/^test_unitester_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_unitester_OBJECTS	src/univalue/Makefile	/^test_unitester_OBJECTS = $(am_test_unitester_OBJECTS)$/;"	m
test_unitester_SOURCES	src/univalue/Makefile	/^test_unitester_SOURCES = test\/unitester.cpp$/;"	m
test_unnecessary_witness_before_segwit_activation	test/functional/p2p_segwit.py	/^    def test_unnecessary_witness_before_segwit_activation(self):$/;"	m	class:SegWitTest
test_upgrade_after_activation	test/functional/p2p_segwit.py	/^    def test_upgrade_after_activation(self):$/;"	m	class:SegWitTest
test_utxo_conversion	test/functional/rpc_psbt.py	/^    def test_utxo_conversion(self):$/;"	m	class:PSBTTest
test_v0_outputs_arent_spendable	test/functional/p2p_segwit.py	/^    def test_v0_outputs_arent_spendable(self):$/;"	m	class:SegWitTest
test_version2_relay	test/functional/feature_bip68_sequence.py	/^    def test_version2_relay(self):$/;"	m	class:BIP68Test
test_with_lock_outputs	test/functional/rpc_signrawtransaction.py	/^    def test_with_lock_outputs(self):$/;"	m	class:SignRawTransactionsTest
test_witness_block	test/functional/p2p_segwit.py	/^def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=None):$/;"	f
test_witness_block_size	test/functional/p2p_segwit.py	/^    def test_witness_block_size(self):$/;"	m	class:SegWitTest
test_witness_commitments	test/functional/p2p_segwit.py	/^    def test_witness_commitments(self):$/;"	m	class:SegWitTest
test_witness_input_length	test/functional/p2p_segwit.py	/^    def test_witness_input_length(self):$/;"	m	class:SegWitTest
test_witness_sigops	test/functional/p2p_segwit.py	/^    def test_witness_sigops(self):$/;"	m	class:SegWitTest
test_witness_tx_relay_before_segwit_activation	test/functional/p2p_segwit.py	/^    def test_witness_tx_relay_before_segwit_activation(self):$/;"	m	class:SegWitTest
test_wnaf	src/secp256k1/src/tests.c	/^void test_wnaf(const secp256k1_scalar *number, int w) {$/;"	f
testmempoolaccept	src/rpc/rawtransaction.cpp	/^static UniValue testmempoolaccept(const JSONRPCRequest& request)$/;"	f	file:
tests	src/leveldb/util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon5	file:
tests_CPPFLAGS	src/secp256k1/Makefile	/^tests_CPPFLAGS = -DSECP256K1_BUILD -I$(top_srcdir)\/src \\$/;"	m
tests_DEPENDENCIES	src/secp256k1/Makefile	/^tests_DEPENDENCIES = $(am__DEPENDENCIES_2) \\$/;"	m
tests_LDADD	src/secp256k1/Makefile	/^tests_LDADD = $(SECP_LIBS) $(SECP_TEST_LIBS) $(COMMON_LIB)$/;"	m
tests_LDFLAGS	src/secp256k1/Makefile	/^tests_LDFLAGS = -static$/;"	m
tests_LINK	src/secp256k1/Makefile	/^tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
tests_OBJECTS	src/secp256k1/Makefile	/^tests_OBJECTS = $(am_tests_OBJECTS)$/;"	m
tests_SOURCES	src/secp256k1/Makefile	/^tests_SOURCES = src\/tests.c$/;"	m
text	src/qt/utilitydialog.h	/^    QString text;$/;"	m	class:HelpMessageDialog
textChanged	src/qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::textChanged()$/;"	f	class:AskPassphraseDialog
textColor	src/qt/platformstyle.h	/^    QColor textColor;$/;"	m	class:PlatformStyle
textwrap	test/functional/tool_wallet.py	/^import textwrap$/;"	i
the	test/functional/wallet_importmulti.py	/^        self.log.info("Should import the ranged descriptor with specified range as solvable")$/;"	i
the	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
thread	src/leveldb/db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
thread	src/qt/intro.h	/^    QThread *thread;$/;"	m	class:Intro
thread	src/qt/rpcconsole.h	/^    QThread thread;$/;"	m	class:RPCConsole
threadDNSAddressSeed	src/net.h	/^    std::thread threadDNSAddressSeed;$/;"	m	class:CConnman
threadGroup	src/init.cpp	/^static boost::thread_group threadGroup;$/;"	v	file:
threadGroup	src/test/setup_common.h	/^    boost::thread_group threadGroup;$/;"	m	struct:TestingSetup
threadHTTP	src/httpserver.cpp	/^std::thread threadHTTP;$/;"	v
threadMessageHandler	src/net.h	/^    std::thread threadMessageHandler;$/;"	m	class:CConnman
threadOpenAddedConnections	src/net.h	/^    std::thread threadOpenAddedConnections;$/;"	m	class:CConnman
threadOpenConnections	src/net.h	/^    std::thread threadOpenConnections;$/;"	m	class:CConnman
threadSocketHandler	src/net.h	/^    std::thread threadSocketHandler;$/;"	m	class:CConnman
thread_done	src/leveldb/db/db_test.cc	/^  port::AtomicPointer thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon24::MTState	file:
threading	test/functional/mining_getblocktemplate_longpoll.py	/^import threading$/;"	i
threading	test/functional/test_framework/mininode.py	/^import threading$/;"	i
threading	test/functional/test_framework/socks5.py	/^import threading$/;"	i
threshold	src/versionbits.h	/^    int threshold;$/;"	m	struct:BIP9Stats
tid	src/leveldb/db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon19::ThreadState	file:
time	contrib/linearize/linearize-data.py	/^import time$/;"	i
time	contrib/verify-commits/verify-commits.py	/^import time$/;"	i
time	src/interfaces/wallet.h	/^    int64_t time;$/;"	m	struct:interfaces::WalletTx
time	src/interfaces/wallet.h	/^    int64_t time;$/;"	m	struct:interfaces::WalletTxOut
time	src/qt/transactionrecord.h	/^    qint64 time;$/;"	m	class:TransactionRecord
time	src/txmempool.h	/^    int64_t time;$/;"	m	struct:LockPoints
time	test/functional/feature_assumevalid.py	/^import time$/;"	i
time	test/functional/feature_bip68_sequence.py	/^import time$/;"	i
time	test/functional/feature_block.py	/^import time$/;"	i
time	test/functional/feature_csv_activation.py	/^import time$/;"	i
time	test/functional/feature_dbcrash.py	/^import time$/;"	i
time	test/functional/feature_maxuploadtarget.py	/^import time$/;"	i
time	test/functional/feature_minchainwork.py	/^import time$/;"	i
time	test/functional/feature_nulldummy.py	/^import time$/;"	i
time	test/functional/mining_prioritisetransaction.py	/^import time$/;"	i
time	test/functional/p2p_disconnect_ban.py	/^import time$/;"	i
time	test/functional/p2p_feefilter.py	/^import time$/;"	i
time	test/functional/p2p_fingerprint.py	/^import time$/;"	i
time	test/functional/p2p_leak.py	/^import time$/;"	i
time	test/functional/p2p_segwit.py	/^import time$/;"	i
time	test/functional/p2p_unrequested_blocks.py	/^import time$/;"	i
time	test/functional/rpc_uptime.py	/^import time$/;"	i
time	test/functional/test_framework/authproxy.py	/^import time$/;"	i
time	test/functional/test_framework/blocktools.py	/^        import time$/;"	i
time	test/functional/test_framework/messages.py	/^import time$/;"	i
time	test/functional/test_framework/test_framework.py	/^import time$/;"	i
time	test/functional/test_framework/test_node.py	/^import time$/;"	i
time	test/functional/test_framework/util.py	/^import time$/;"	i
time	test/functional/test_runner.py	/^import time$/;"	i
time	test/functional/wallet_basic.py	/^import time$/;"	i
time	test/functional/wallet_encryption.py	/^import time$/;"	i
time	test/functional/wallet_keypool.py	/^import time$/;"	i
time	test/functional/wallet_multiwallet.py	/^import time$/;"	i
time	test/functional/wallet_resendwallettransactions.py	/^import time$/;"	i
time_received	src/interfaces/wallet.h	/^    unsigned int time_received;$/;"	m	struct:interfaces::WalletTxStatus
timer	src/qt/peertablemodel.h	/^    QTimer *timer;$/;"	m	class:PeerTableModel
timer	src/qt/rpcconsole.cpp	/^    QTimer timer;$/;"	m	class:QtRPCTimerBase	file:
timer	src/qt/trafficgraphwidget.h	/^    QTimer *timer;$/;"	m	class:TrafficGraphWidget
timerInterface	src/rpc/server.cpp	/^static RPCTimerInterface* timerInterface = nullptr;$/;"	v	file:
tiny_cache_	src/leveldb/db/autocompact_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::AutoCompactTest	file:
tiny_cache_	src/leveldb/db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tiny_cache_	src/leveldb/db/fault_injection_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::FaultInjectionTest	file:
tinyformat	src/tinyformat.h	/^namespace tinyformat {$/;"	n
tinyformat	src/tinyformat.h	/^namespace tinyformat {}$/;"	n
tinyformat_wchar_is_not_supported	src/tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	t	struct:tinyformat::detail::is_wchar
tipUpdate	src/qt/modaloverlay.cpp	/^void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVerificationProgress)$/;"	f	class:ModalOverlay
title	src/qt/csvmodelwriter.h	/^        QString title;$/;"	m	struct:CSVModelWriter::Column
titleAddText	src/qt/networkstyle.cpp	/^    const char *titleAddText;$/;"	m	struct:__anon65	file:
titleAddText	src/qt/networkstyle.h	/^    QString titleAddText;$/;"	m	class:NetworkStyle
tmp	src/crypto/siphash.h	/^    uint64_t tmp;$/;"	m	class:CSipHasher
tmp_	src/leveldb/db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_batch_	src/leveldb/db/db_impl.h	/^  WriteBatch* tmp_batch_;$/;"	m	class:leveldb::DBImpl
tmp_keys_	src/leveldb/table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	src/leveldb/db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
to	test/functional/wallet_createwallet.py	/^        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')$/;"	i
to	test/functional/wallet_createwallet.py	/^        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)$/;"	i
toHTML	src/qt/transactiondesc.cpp	/^QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)$/;"	f	class:TransactionDesc
toInt	src/tinyformat.h	/^        int toInt() const$/;"	f	class:tinyformat::detail::FormatArg
toIntImpl	src/tinyformat.h	/^        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)$/;"	f	class:tinyformat::detail::FormatArg
toPosixTime	src/scheduler.cpp	/^static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)$/;"	f	file:
toVariant	src/qt/notificator.cpp	/^QVariant FreedesktopImage::toVariant(const QImage &img)$/;"	f	class:FreedesktopImage
to_absolute	test/functional/test_framework/messages.py	/^    def to_absolute(self):$/;"	m	class:BlockTransactionsRequest
to_p2p	test/functional/test_framework/messages.py	/^    def to_p2p(self):$/;"	m	class:HeaderAndShortIDs
toggleHidden	src/qt/bitcoingui.cpp	/^void BitcoinGUI::toggleHidden()$/;"	f	class:BitcoinGUI
toggleHideAction	src/qt/bitcoingui.h	/^    QAction* toggleHideAction = nullptr;$/;"	m	class:BitcoinGUI
togglePruneWarning	src/qt/optionsdialog.cpp	/^void OptionsDialog::togglePruneWarning(bool enabled)$/;"	f	class:OptionsDialog
toggleShowPassword	src/qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::toggleShowPassword(bool show)$/;"	f	class:AskPassphraseDialog
toggleVisibility	src/qt/modaloverlay.cpp	/^void ModalOverlay::toggleVisibility()$/;"	f	class:ModalOverlay
toolchain_path	depends/Makefile	/^toolchain_path=$($($(host_arch)_$(host_os)_native_toolchain)_prefixbin)$/;"	m
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	doc/man/Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_build_prefix	src/Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	src/secp256k1/Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	src/univalue/Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_builddir	doc/man/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	src/Makefile	/^top_builddir = ..$/;"	m
top_builddir	src/secp256k1/Makefile	/^top_builddir = .$/;"	m
top_builddir	src/univalue/Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_distdir	src/secp256k1/Makefile	/^top_distdir = $(distdir)$/;"	m
top_distdir	src/univalue/Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
top_srcdir	doc/man/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	src/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	src/secp256k1/Makefile	/^top_srcdir = .$/;"	m
top_srcdir	src/univalue/Makefile	/^top_srcdir = .$/;"	m
torControlThread	src/torcontrol.cpp	/^static std::thread torControlThread;$/;"	v	file:
total	src/leveldb/db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon19::SharedState	file:
total	src/support/lockedpool.h	/^        size_t total;$/;"	m	struct:Arena::Stats
total	src/support/lockedpool.h	/^        size_t total;$/;"	m	struct:LockedPool::Stats
totalConfirmed	src/policy/fees.h	/^    double totalConfirmed = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
totalSaveBytes	contrib/devtools/optimize-pngs.py	/^totalSaveBytes = 0$/;"	v
totalTxSize	src/txmempool.h	/^    uint64_t totalTxSize;      \/\/!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.$/;"	m	class:CTxMemPool
total_bytes	src/leveldb/db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
tracefile	contrib/filter-lcov.py	/^tracefile = args.tracefile$/;"	v
trackPackageRemoved	src/txmempool.cpp	/^void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {$/;"	f	class:CTxMemPool
transact_and_mine	test/functional/feature_fee_estimation.py	/^    def transact_and_mine(self, numblocks, mining_node):$/;"	m	class:EstimateFeeTest
transactionProxyModel	src/qt/transactionview.h	/^    TransactionFilterProxy *transactionProxyModel;$/;"	m	class:TransactionView
transactionTableModel	src/qt/walletmodel.h	/^    TransactionTableModel *transactionTableModel;$/;"	m	class:WalletModel
transactionView	src/qt/transactionview.h	/^    QTableView *transactionView;$/;"	m	class:TransactionView
transactionView	src/qt/walletview.h	/^    TransactionView *transactionView;$/;"	m	class:WalletView
transactionsPage	src/qt/walletview.h	/^    QWidget *transactionsPage;$/;"	m	class:WalletView
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transform	doc/man/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	src/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	src/secp256k1/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	src/univalue/Makefile	/^transform = $(program_transform_name)$/;"	m
transformNamedArguments	src/rpc/server.cpp	/^static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)$/;"	f	file:
translateTransactionType	src/qt/addresstablemodel.cpp	/^static AddressTableEntry::Type translateTransactionType(const QString &strPurpose, bool isMine)$/;"	f	file:
trayAndWindowIcon	src/qt/networkstyle.h	/^    QIcon trayAndWindowIcon;$/;"	m	class:NetworkStyle
trayIcon	src/qt/bitcoingui.h	/^    QSystemTrayIcon* trayIcon = nullptr;$/;"	m	class:BitcoinGUI
trayIcon	src/qt/notificator.h	/^    QSystemTrayIcon *trayIcon;$/;"	m	class:Notificator
trayIconActivated	src/qt/bitcoingui.cpp	/^void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)$/;"	f	class:BitcoinGUI
trayIconMenu	src/qt/bitcoingui.h	/^    const std::unique_ptr<QMenu> trayIconMenu;$/;"	m	class:BitcoinGUI
tree_sha512sum	contrib/devtools/github-merge.py	/^def tree_sha512sum(commit='HEAD'):$/;"	f
tree_sha512sum	contrib/verify-commits/verify-commits.py	/^def tree_sha512sum(commit='HEAD'):$/;"	f
trigger	src/httpserver.cpp	/^void HTTPEvent::trigger(struct timeval* tv)$/;"	f	class:HTTPEvent
trivial_t	src/bench/prevector.cpp	/^typedef unsigned char trivial_t;$/;"	t	file:
trueDummy	test/functional/feature_nulldummy.py	/^def trueDummy(tx):$/;"	f
try_rpc	test/functional/test_framework/util.py	/^def try_rpc(code, message, fun, *args, **kwds):$/;"	f
try_wait	src/sync.h	/^    bool try_wait()$/;"	f	class:CSemaphore
tx	src/blockencodings.h	/^    CTransactionRef tx;$/;"	m	struct:PrefilledTransaction
tx	src/blockencodings.h	/^    CTransactionRef& tx;$/;"	m	struct:TransactionCompressor
tx	src/interfaces/wallet.h	/^    CTransactionRef tx;$/;"	m	struct:interfaces::WalletTx
tx	src/net_processing.cpp	/^    CTransactionRef tx;$/;"	m	struct:COrphanTx	file:
tx	src/psbt.h	/^    boost::optional<CMutableTransaction> tx;$/;"	m	struct:PartiallySignedTransaction
tx	src/test/denialofservice_tests.cpp	/^    CTransactionRef tx;$/;"	m	struct:COrphanTx	file:
tx	src/txmempool.h	/^    CTransactionRef tx;$/;"	m	struct:TxMempoolInfo
tx	src/txmempool.h	/^    const CTransactionRef tx;$/;"	m	class:CTxMemPoolEntry
tx	src/wallet/wallet.h	/^    CTransactionRef tx;$/;"	m	class:CMerkleTx
tx	src/wallet/wallet.h	/^    const CWalletTx *tx;$/;"	m	class:COutput
txAddressDecoration	src/qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txCtAvg	src/policy/fees.cpp	/^    std::vector<double> txCtAvg;$/;"	m	class:TxConfirmStats	file:
txStatusDecoration	src/qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txTo	src/script/interpreter.cpp	/^    const T& txTo;             \/\/!< reference to the spending transaction (the one being serialized)$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
txTo	src/script/interpreter.h	/^    const T* txTo;$/;"	m	class:GenericTransactionSignatureChecker
txTo	src/script/sign.h	/^    const CMutableTransaction* txTo;$/;"	m	class:MutableTransactionSignatureCreator
txToHex	test/functional/feature_rbf.py	/^def txToHex(tx):$/;"	f
txWatchonlyDecoration	src/qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txWatchonlyDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
tx_from_hex	test/functional/wallet_listtransactions.py	/^def tx_from_hex(hexstring):$/;"	f
tx_invalid	src/test/data/tx_invalid.json.h	/^static unsigned const char tx_invalid[] = {$/;"	m	namespace:json_tests
tx_noinputs_size	src/wallet/wallet.h	/^    size_t tx_noinputs_size = 0;$/;"	m	struct:CoinSelectionParams
tx_valid	src/test/data/tx_valid.json.h	/^static unsigned const char tx_valid[] = {$/;"	m	namespace:json_tests
txdata	src/script/interpreter.h	/^    const PrecomputedTransactionData* txdata;$/;"	m	class:GenericTransactionSignatureChecker
txdata	src/validation.h	/^    PrecomputedTransactionData *txdata;$/;"	m	class:CScriptCheck
txdelegate	src/qt/overviewpage.h	/^    TxViewDelegate *txdelegate;$/;"	m	class:OverviewPage
txid_index	src/txmempool.h	/^struct txid_index {};$/;"	s
txids	src/wallet/rpcwallet.cpp	/^    std::vector<uint256> txids;$/;"	m	struct:tallyitem	file:
txin_is_mine	src/interfaces/wallet.h	/^    std::vector<isminetype> txin_is_mine;$/;"	m	struct:interfaces::WalletTx
txlinksMap	src/txmempool.h	/^    typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;$/;"	t	class:CTxMemPool
txn	src/blockencodings.h	/^    std::vector<CTransactionRef> txn;$/;"	m	class:BlockTransactions
txn	src/merkleblock.h	/^    CPartialMerkleTree txn;$/;"	m	class:CMerkleBlock
txn_available	src/blockencodings.h	/^    std::vector<CTransactionRef> txn_available;$/;"	m	class:PartiallyDownloadedBlock
txnouttype	src/script/standard.h	/^enum txnouttype$/;"	g
txout	src/compressor.h	/^    CTxOut &txout;$/;"	m	class:CTxOutCompressor
txout	src/interfaces/wallet.h	/^    CTxOut txout;$/;"	m	struct:interfaces::WalletTxOut
txout	src/undo.h	/^    Coin* txout;$/;"	m	class:TxInUndoDeserializer
txout	src/undo.h	/^    const Coin* txout;$/;"	m	class:TxInUndoSerializer
txout	src/wallet/coinselection.h	/^    CTxOut txout;$/;"	m	class:CInputCoin
txout_address	src/interfaces/wallet.h	/^    std::vector<CTxDestination> txout_address;$/;"	m	struct:interfaces::WalletTx
txout_address_is_mine	src/interfaces/wallet.h	/^    std::vector<isminetype> txout_address_is_mine;$/;"	m	struct:interfaces::WalletTx
txout_is_mine	src/interfaces/wallet.h	/^    std::vector<isminetype> txout_is_mine;$/;"	m	struct:interfaces::WalletTx
txs_mined	test/functional/feature_segwit.py	/^txs_mined = {} # txindex from txid to blockhash$/;"	v
txval	src/test/serialize_tests.cpp	/^    CTransactionRef txval;$/;"	m	class:CSerializeMethodsTestSingle	file:
typ	src/univalue/include/univalue.h	/^    UniValue::VType typ;$/;"	m	class:UniValue
type	src/leveldb/db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	src/leveldb/table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type	src/protocol.h	/^    int type;$/;"	m	class:CInv
type	src/qt/addresstablemodel.cpp	/^    Type type;$/;"	m	struct:AddressTableEntry	file:
type	src/qt/transactionrecord.h	/^    Type type;$/;"	m	class:TransactionRecord
type	src/rpc/util.h	/^    UniValue::VType type;$/;"	m	struct:UniValueType
type	src/univalue/include/univalue.h	/^    enum VType type() const { return getType(); }$/;"	f	class:UniValue
type	src/zmq/zmqabstractnotifier.h	/^    std::string type;$/;"	m	class:CZMQAbstractNotifier
typeAny	src/rpc/util.h	/^    bool typeAny;$/;"	m	struct:UniValueType
typeFilter	src/qt/transactionfilterproxy.h	/^    quint32 typeFilter;$/;"	m	class:TransactionFilterProxy
typeWidget	src/qt/transactionview.h	/^    QComboBox *typeWidget;$/;"	m	class:TransactionView
type_crc_	src/leveldb/db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
typemap	test/functional/test_framework/messages.py	/^    typemap = {$/;"	v	class:CInv
uBTC	src/qt/bitcoinunits.h	/^        uBTC,$/;"	e	enum:BitcoinUnits::Unit
ucmp	src/leveldb/db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon26::Saver	file:
ui	src/qt/addressbookpage.h	/^    Ui::AddressBookPage *ui;$/;"	m	class:AddressBookPage
ui	src/qt/askpassphrasedialog.h	/^    Ui::AskPassphraseDialog *ui;$/;"	m	class:AskPassphraseDialog
ui	src/qt/coincontroldialog.h	/^    Ui::CoinControlDialog *ui;$/;"	m	class:CoinControlDialog
ui	src/qt/editaddressdialog.h	/^    Ui::EditAddressDialog *ui;$/;"	m	class:EditAddressDialog
ui	src/qt/intro.h	/^    Ui::Intro *ui;$/;"	m	class:Intro
ui	src/qt/modaloverlay.h	/^    Ui::ModalOverlay *ui;$/;"	m	class:ModalOverlay
ui	src/qt/openuridialog.h	/^    Ui::OpenURIDialog *ui;$/;"	m	class:OpenURIDialog
ui	src/qt/optionsdialog.h	/^    Ui::OptionsDialog *ui;$/;"	m	class:OptionsDialog
ui	src/qt/overviewpage.h	/^    Ui::OverviewPage *ui;$/;"	m	class:OverviewPage
ui	src/qt/receivecoinsdialog.h	/^    Ui::ReceiveCoinsDialog *ui;$/;"	m	class:ReceiveCoinsDialog
ui	src/qt/receiverequestdialog.h	/^    Ui::ReceiveRequestDialog *ui;$/;"	m	class:ReceiveRequestDialog
ui	src/qt/rpcconsole.h	/^    Ui::RPCConsole* const ui;$/;"	m	class:RPCConsole::Ui
ui	src/qt/sendcoinsdialog.h	/^    Ui::SendCoinsDialog *ui;$/;"	m	class:SendCoinsDialog
ui	src/qt/sendcoinsentry.h	/^    Ui::SendCoinsEntry *ui;$/;"	m	class:SendCoinsEntry
ui	src/qt/signverifymessagedialog.h	/^    Ui::SignVerifyMessageDialog *ui;$/;"	m	class:SignVerifyMessageDialog
ui	src/qt/transactiondescdialog.h	/^    Ui::TransactionDescDialog *ui;$/;"	m	class:TransactionDescDialog
ui	src/qt/utilitydialog.h	/^    Ui::HelpMessageDialog *ui;$/;"	m	class:HelpMessageDialog
uiInterface	src/net.h	/^        CClientUIInterface* uiInterface = nullptr;$/;"	m	struct:CConnman::Options
uiInterface	src/ui_interface.cpp	/^CClientUIInterface uiInterface;$/;"	v
uiReady	src/qt/paymentserver.cpp	/^void PaymentServer::uiReady()$/;"	f	class:PaymentServer
uint128_t	src/secp256k1/src/util.h	/^SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;$/;"	t
uint160	src/uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}$/;"	f	class:uint160
uint160	src/uint256.h	/^    uint160() {}$/;"	f	class:uint160
uint160	src/uint256.h	/^class uint160 : public base_blob<160> {$/;"	c
uint160S	src/test/uint256_tests.cpp	/^inline uint160 uint160S(const char *str)$/;"	f
uint160S	src/test/uint256_tests.cpp	/^inline uint160 uint160S(const std::string& str)$/;"	f
uint16_t	src/leveldb/port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint256	src/uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}$/;"	f	class:uint256
uint256	src/uint256.h	/^    uint256() {}$/;"	f	class:uint256
uint256	src/uint256.h	/^class uint256 : public base_blob<256> {$/;"	c
uint256S	src/uint256.h	/^inline uint256 uint256S(const char *str)$/;"	f
uint256S	src/uint256.h	/^inline uint256 uint256S(const std::string& str)$/;"	f
uint256_from_compact	test/functional/test_framework/messages.py	/^def uint256_from_compact(c):$/;"	f
uint256_from_str	test/functional/test_framework/messages.py	/^def uint256_from_str(s):$/;"	f
uint256_from_str	test/functional/test_framework/script.py	/^from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string$/;"	i
uint32	contrib/linearize/linearize-data.py	/^def uint32(x):$/;"	f
uint32_t	src/chain.h	/^enum BlockStatus: uint32_t {$/;"	g
uint32_t	src/leveldb/port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_t	src/leveldb/port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint64_t	src/protocol.h	/^enum ServiceFlags : uint64_t {$/;"	g
uint64_t	src/wallet/wallet.h	/^enum WalletFlags : uint64_t {$/;"	g
uint8_t	src/leveldb/port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
uint8_t	src/netbase.cpp	/^enum SOCKS5Atyp: uint8_t {$/;"	g	file:
uint8_t	src/netbase.cpp	/^enum SOCKS5Command: uint8_t {$/;"	g	file:
uint8_t	src/netbase.cpp	/^enum SOCKS5Method: uint8_t {$/;"	g	file:
uint8_t	src/netbase.cpp	/^enum SOCKS5Reply: uint8_t {$/;"	g	file:
uint8_t	src/netbase.cpp	/^enum SOCKSVersion: uint8_t {$/;"	g	file:
uint_error	src/arith_uint256.h	/^    explicit uint_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:uint_error
uint_error	src/arith_uint256.h	/^class uint_error : public std::runtime_error {$/;"	c
uiter	contrib/testgen/gen_key_io_test_vectors.py	/^        uiter = gen_valid_vectors$/;"	v
uiter	contrib/testgen/gen_key_io_test_vectors.py	/^        uiter = iters[sys.argv[1]]$/;"	v
unDERify	test/functional/feature_dersig.py	/^def unDERify(tx):$/;"	f
unbanSelectedNode	src/qt/rpcconsole.cpp	/^void RPCConsole::unbanSelectedNode()$/;"	f	class:RPCConsole
unconfTxs	src/policy/fees.cpp	/^    std::vector<std::vector<int> > unconfTxs;  \/\/unconfTxs[Y][X]$/;"	m	class:TxConfirmStats	file:
unconfirmed_balance	src/interfaces/wallet.h	/^    CAmount unconfirmed_balance = 0;$/;"	m	struct:interfaces::WalletBalances
unconfirmed_watch_only_balance	src/interfaces/wallet.h	/^    CAmount unconfirmed_watch_only_balance = 0;$/;"	m	struct:interfaces::WalletBalances
uncounting_illegal_callback_fn	src/secp256k1/src/tests.c	/^static void uncounting_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
unescape	test/lint/lint-format-strings.py	/^def unescape(s):$/;"	f
unescape_unicode_test	src/univalue/test/unitester.cpp	/^void unescape_unicode_test()$/;"	f
unhexlify	contrib/linearize/linearize-data.py	/^from binascii import unhexlify$/;"	i
unhexlify	test/functional/test_framework/netutil.py	/^from binascii import unhexlify$/;"	i
unhexlify	test/functional/test_framework/util.py	/^from binascii import unhexlify$/;"	i
unidirectional_node_sync_via_rpc	test/functional/rpc_preciousblock.py	/^def unidirectional_node_sync_via_rpc(node_src, node_dest):$/;"	f
unique_id	src/rpc/server.h	/^    intptr_t unique_id;$/;"	m	class:CRPCCommand
unit	src/qt/bitcoinamountfield.h	/^    QValueComboBox *unit;$/;"	m	class:BitcoinAmountField
unit	src/qt/overviewpage.cpp	/^    int unit;$/;"	m	class:TxViewDelegate	file:
unitChanged	src/qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::unitChanged(int idx)$/;"	f	class:BitcoinAmountField
unitDisplayControl	src/qt/bitcoingui.h	/^    UnitDisplayStatusBarControl* unitDisplayControl = nullptr;$/;"	m	class:BitcoinGUI
unitlist	src/qt/bitcoinunits.h	/^    QList<BitcoinUnits::Unit> unitlist;$/;"	m	class:BitcoinUnits
unittest	contrib/devtools/test-security-check.py	/^import unittest$/;"	i
unittest	test/util/rpcauth-test.py	/^import unittest$/;"	i
unknown	src/psbt.h	/^    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;$/;"	m	struct:PSBTInput
unknown	src/psbt.h	/^    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;$/;"	m	struct:PSBTOutput
unknown	src/psbt.h	/^    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;$/;"	m	struct:PartiallySignedTransaction
unloadwallet	src/wallet/rpcwallet.cpp	/^static UniValue unloadwallet(const JSONRPCRequest& request)$/;"	f	file:
unlockAction	src/qt/coincontroldialog.h	/^    QAction *unlockAction;$/;"	m	class:CoinControlDialog
unlockCoin	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::unlockCoin()$/;"	f	class:CoinControlDialog
unlockWallet	src/qt/walletframe.cpp	/^void WalletFrame::unlockWallet()$/;"	f	class:WalletFrame
unlockWallet	src/qt/walletview.cpp	/^void WalletView::unlockWallet()$/;"	f	class:WalletView
unordered_node	src/memusage.h	/^struct unordered_node : private X$/;"	s	namespace:memusage
unpack	test/functional/interface_rest.py	/^from struct import pack, unpack$/;"	i
unsubscribeFromCoreSignals	src/qt/bitcoingui.cpp	/^void BitcoinGUI::unsubscribeFromCoreSignals()$/;"	f	class:BitcoinGUI
unsubscribeFromCoreSignals	src/qt/clientmodel.cpp	/^void ClientModel::unsubscribeFromCoreSignals()$/;"	f	class:ClientModel
unsubscribeFromCoreSignals	src/qt/splashscreen.cpp	/^void SplashScreen::unsubscribeFromCoreSignals()$/;"	f	class:SplashScreen
unsubscribeFromCoreSignals	src/qt/transactiontablemodel.cpp	/^void TransactionTableModel::unsubscribeFromCoreSignals()$/;"	f	class:TransactionTableModel
unsubscribeFromCoreSignals	src/qt/walletmodel.cpp	/^void WalletModel::unsubscribeFromCoreSignals()$/;"	f	class:WalletModel
update	src/limitedmap.h	/^    void update(const_iterator itIn, const mapped_type& v)$/;"	f	class:limitedmap
update	src/qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::update()$/;"	f	class:ReceiveRequestDialog
update	src/test/prevector_tests.cpp	/^    void update(Size pos, const T& value) {$/;"	f	class:prevector_tester
updateAddressBook	src/qt/walletmodel.cpp	/^void WalletModel::updateAddressBook(const QString &address, const QString &label,$/;"	f	class:WalletModel
updateAlert	src/qt/clientmodel.cpp	/^void ClientModel::updateAlert()$/;"	f	class:ClientModel
updateAlerts	src/qt/overviewpage.cpp	/^void OverviewPage::updateAlerts(const QString &warnings)$/;"	f	class:OverviewPage
updateAmountColumnTitle	src/qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::updateAmountColumnTitle()$/;"	f	class:RecentRequestsTableModel
updateAmountColumnTitle	src/qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateAmountColumnTitle()$/;"	f	class:TransactionTableModel
updateBanlist	src/qt/clientmodel.cpp	/^void ClientModel::updateBanlist()$/;"	f	class:ClientModel
updateCoinControlState	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)$/;"	f	class:SendCoinsDialog
updateConfirmations	src/qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateConfirmations()$/;"	f	class:TransactionTableModel
updateDefaultProxyNets	src/qt/optionsdialog.cpp	/^void OptionsDialog::updateDefaultProxyNets()$/;"	f	class:OptionsDialog
updateDisplayUnit	src/qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::updateDisplayUnit(int newUnits)$/;"	f	class:UnitDisplayStatusBarControl
updateDisplayUnit	src/qt/overviewpage.cpp	/^void OverviewPage::updateDisplayUnit()$/;"	f	class:OverviewPage
updateDisplayUnit	src/qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::updateDisplayUnit()$/;"	f	class:ReceiveCoinsDialog
updateDisplayUnit	src/qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::updateDisplayUnit()$/;"	f	class:RecentRequestsTableModel
updateDisplayUnit	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateDisplayUnit()$/;"	f	class:SendCoinsDialog
updateDisplayUnit	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::updateDisplayUnit()$/;"	f	class:SendCoinsEntry
updateDisplayUnit	src/qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateDisplayUnit()$/;"	f	class:TransactionTableModel
updateEncryptionStatus	src/qt/walletview.cpp	/^void WalletView::updateEncryptionStatus()$/;"	f	class:WalletView
updateEntry	src/qt/addresstablemodel.cpp	/^    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status)$/;"	f	class:AddressTablePriv
updateEntry	src/qt/addresstablemodel.cpp	/^void AddressTableModel::updateEntry(const QString &address,$/;"	f	class:AddressTableModel
updateFeeMinimizedLabel	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateFeeMinimizedLabel()$/;"	f	class:SendCoinsDialog
updateFeeSectionControls	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateFeeSectionControls()$/;"	f	class:SendCoinsDialog
updateHeadersSyncProgressLabel	src/qt/bitcoingui.cpp	/^void BitcoinGUI::updateHeadersSyncProgressLabel()$/;"	f	class:BitcoinGUI
updateLabel	src/qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::updateLabel(const QString &address)$/;"	f	class:SendCoinsEntry
updateLabelLocked	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::updateLabelLocked()$/;"	f	class:CoinControlDialog
updateLabels	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)$/;"	f	class:CoinControlDialog
updateNetworkActive	src/qt/clientmodel.cpp	/^void ClientModel::updateNetworkActive(bool networkActive)$/;"	f	class:ClientModel
updateNetworkState	src/qt/bitcoingui.cpp	/^void BitcoinGUI::updateNetworkState()$/;"	f	class:BitcoinGUI
updateNetworkState	src/qt/rpcconsole.cpp	/^void RPCConsole::updateNetworkState()$/;"	f	class:RPCConsole
updateNodeDetail	src/qt/rpcconsole.cpp	/^void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)$/;"	f	class:RPCConsole
updateNumConnections	src/qt/clientmodel.cpp	/^void ClientModel::updateNumConnections(int numConnections)$/;"	f	class:ClientModel
updateProxyIcon	src/qt/bitcoingui.cpp	/^void BitcoinGUI::updateProxyIcon()$/;"	f	class:BitcoinGUI
updateProxyValidationState	src/qt/optionsdialog.cpp	/^void OptionsDialog::updateProxyValidationState()$/;"	f	class:OptionsDialog
updateRates	src/qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::updateRates()$/;"	f	class:TrafficGraphWidget
updateSmartFeeLabel	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateSmartFeeLabel()$/;"	f	class:SendCoinsDialog
updateStatus	src/qt/transactionrecord.cpp	/^void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t block_time)$/;"	f	class:TransactionRecord
updateStatus	src/qt/walletmodel.cpp	/^void WalletModel::updateStatus()$/;"	f	class:WalletModel
updateTabsAndLabels	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateTabsAndLabels()$/;"	f	class:SendCoinsDialog
updateTimer	src/qt/clientmodel.cpp	/^void ClientModel::updateTimer()$/;"	f	class:ClientModel
updateTrafficStats	src/qt/rpcconsole.cpp	/^void RPCConsole::updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut)$/;"	f	class:RPCConsole
updateTransaction	src/qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)$/;"	f	class:TransactionTableModel
updateTransaction	src/qt/walletmodel.cpp	/^void WalletModel::updateTransaction()$/;"	f	class:WalletModel
updateView	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::updateView()$/;"	f	class:CoinControlDialog
updateWallet	src/qt/transactiontablemodel.cpp	/^    void updateWallet(interfaces::Wallet& wallet, const uint256 &hash, int status, bool showTransaction)$/;"	f	class:TransactionTablePriv
updateWalletStatus	src/qt/bitcoingui.cpp	/^void BitcoinGUI::updateWalletStatus()$/;"	f	class:BitcoinGUI
updateWatchOnlyColumn	src/qt/transactionview.cpp	/^void TransactionView::updateWatchOnlyColumn(bool fHaveWatchOnly)$/;"	f	class:TransactionView
updateWatchOnlyFlag	src/qt/walletmodel.cpp	/^void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)$/;"	f	class:WalletModel
updateWatchOnlyLabels	src/qt/overviewpage.cpp	/^void OverviewPage::updateWatchOnlyLabels(bool showWatchOnly)$/;"	f	class:OverviewPage
updateWindowTitle	src/qt/bitcoingui.cpp	/^void BitcoinGUI::updateWindowTitle()$/;"	f	class:BitcoinGUI
updateYesButton	src/qt/sendcoinsdialog.cpp	/^void SendConfirmationDialog::updateYesButton()$/;"	f	class:SendConfirmationDialog
update_ancestor_state	src/txmempool.h	/^    update_ancestor_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost) :$/;"	f	struct:update_ancestor_state
update_ancestor_state	src/txmempool.h	/^struct update_ancestor_state$/;"	s
update_block	test/functional/feature_block.py	/^    def update_block(self, block_number, new_transactions):$/;"	m	class:FullBlockTest
update_cmd	contrib/devtools/copyright_header.py	/^def update_cmd(argv):$/;"	f
update_descendant_state	src/txmempool.h	/^    update_descendant_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount) :$/;"	f	struct:update_descendant_state
update_descendant_state	src/txmempool.h	/^struct update_descendant_state$/;"	s
update_fee_delta	src/txmempool.h	/^    explicit update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }$/;"	f	struct:update_fee_delta
update_fee_delta	src/txmempool.h	/^struct update_fee_delta$/;"	s
update_for_parent_inclusion	src/miner.h	/^    explicit update_for_parent_inclusion(CTxMemPool::txiter it) : iter(it) {}$/;"	f	struct:update_for_parent_inclusion
update_for_parent_inclusion	src/miner.h	/^struct update_for_parent_inclusion$/;"	s
update_lock_points	src/txmempool.h	/^    explicit update_lock_points(const LockPoints& _lp) : lp(_lp) { }$/;"	f	struct:update_lock_points
update_lock_points	src/txmempool.h	/^struct update_lock_points$/;"	s
update_updatable_copyright	contrib/devtools/copyright_header.py	/^def update_updatable_copyright(filename):$/;"	f
update_witness_block_with_transactions	test/functional/p2p_segwit.py	/^    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):$/;"	m	class:SegWitTest
upnp_packages	depends/packages/packages.mk	/^upnp_packages=miniupnpc$/;"	m
uptime	src/rpc/server.cpp	/^static UniValue uptime(const JSONRPCRequest& jsonRequest)$/;"	f	file:
urandom	share/rpcauth/rpcauth.py	/^from os import urandom$/;"	i
uriServer	src/qt/paymentserver.h	/^    QLocalServer* uriServer;$/;"	m	class:PaymentServer
uriTests	src/qt/test/uritests.cpp	/^void URITests::uriTests()$/;"	f	class:URITests
uri_prefixes	src/rest.cpp	/^} uri_prefixes[] = {$/;"	v	typeref:struct:__anon2	file:
url	src/qt/rpcconsole.cpp	/^    const char *url;$/;"	m	struct:__anon68	file:
urlDecode	src/util/url.cpp	/^std::string urlDecode(const std::string &urlEncoded) {$/;"	f
urllib	test/functional/interface_http.py	/^import urllib.parse$/;"	i
urllib	test/functional/interface_rest.py	/^import urllib.parse$/;"	i
urllib	test/functional/rpc_users.py	/^import urllib.parse$/;"	i
urllib	test/functional/test_framework/authproxy.py	/^import urllib.parse$/;"	i
urllib	test/functional/test_framework/test_node.py	/^import urllib.parse$/;"	i
urlopen	contrib/devtools/github-merge.py	/^from urllib.request import Request, urlopen$/;"	i
urlsafe_b64encode	share/rpcauth/rpcauth.py	/^from base64 import urlsafe_b64encode$/;"	i
usage	src/test/coins_tests.cpp	/^    size_t& usage() const { return cachedCoinsUsage; }$/;"	f	class:__anon60::CCoinsViewCacheTest
usage_	src/leveldb/util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
usage_error	build-aux/test-driver	/^usage_error ()$/;"	f
usage_error	src/secp256k1/build-aux/test-driver	/^usage_error ()$/;"	f
usage_error	src/univalue/build-aux/test-driver	/^usage_error ()$/;"	f
useAvailableBalance	src/qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)$/;"	f	class:SendCoinsDialog
useAvailableBalanceClicked	src/qt/sendcoinsentry.cpp	/^void SendCoinsEntry::useAvailableBalanceClicked()$/;"	f	class:SendCoinsEntry
useExtraSpacing	src/qt/platformstyle.cpp	/^    const bool useExtraSpacing;$/;"	m	struct:__anon66	file:
useExtraSpacing	src/qt/platformstyle.h	/^    bool useExtraSpacing;$/;"	m	class:PlatformStyle
use_bnb	src/wallet/wallet.h	/^    bool use_bnb = true;$/;"	m	struct:CoinSelectionParams
use_count	src/memusage.h	/^    size_t use_count;$/;"	m	struct:memusage::stl_shared_counter
use_datadir	contrib/linearize/linearize-hashes.py	/^        use_datadir = True$/;"	v
use_datadir	contrib/linearize/linearize-hashes.py	/^    use_datadir = False$/;"	v
use_max_sig	src/wallet/wallet.h	/^    bool use_max_sig;$/;"	m	class:COutput
use_userpass	contrib/linearize/linearize-hashes.py	/^        use_userpass = False$/;"	v
use_userpass	contrib/linearize/linearize-hashes.py	/^    use_userpass = True$/;"	v
used	src/support/lockedpool.h	/^        size_t used;$/;"	m	struct:Arena::Stats
used	src/support/lockedpool.h	/^        size_t used;$/;"	m	struct:LockedPool::Stats
usedReceivingAddresses	src/qt/walletframe.cpp	/^void WalletFrame::usedReceivingAddresses()$/;"	f	class:WalletFrame
usedReceivingAddresses	src/qt/walletview.cpp	/^void WalletView::usedReceivingAddresses()$/;"	f	class:WalletView
usedReceivingAddressesAction	src/qt/bitcoingui.h	/^    QAction* usedReceivingAddressesAction = nullptr;$/;"	m	class:BitcoinGUI
usedReceivingAddressesPage	src/qt/walletview.h	/^    AddressBookPage *usedReceivingAddressesPage;$/;"	m	class:WalletView
usedSendingAddresses	src/qt/walletframe.cpp	/^void WalletFrame::usedSendingAddresses()$/;"	f	class:WalletFrame
usedSendingAddresses	src/qt/walletview.cpp	/^void WalletView::usedSendingAddresses()$/;"	f	class:WalletView
usedSendingAddressesAction	src/qt/bitcoingui.h	/^    QAction* usedSendingAddressesAction = nullptr;$/;"	m	class:BitcoinGUI
usedSendingAddressesPage	src/qt/walletview.h	/^    AddressBookPage *usedSendingAddressesPage;$/;"	m	class:WalletView
used_keys	src/wallet/rpcdump.cpp	/^    std::map<CKeyID, bool> used_keys; \/\/!< Import these private keys if available (the value indicates whether if the key is required for solvability)$/;"	m	struct:ImportData	file:
userClosed	src/qt/modaloverlay.h	/^    bool userClosed;$/;"	m	class:ModalOverlay
user_comparator	src/leveldb/db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	src/leveldb/db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	src/leveldb/db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon29::DBIter	file:
user_comparator_	src/leveldb/db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	src/leveldb/util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon8::__anon9::StartThreadState	file:
user_key	src/leveldb/db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	src/leveldb/db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	src/leveldb/db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	src/leveldb/db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon26::Saver	file:
user_policy_	src/leveldb/db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
username	src/netbase.cpp	/^    std::string username;$/;"	m	struct:ProxyCredentials	file:
util	src/util/system.cpp	/^namespace util {$/;"	n	file:
util	src/util/system.h	/^namespace util {$/;"	n
util	src/util/threadnames.h	/^namespace util {$/;"	n
utxoData	src/test/coins_tests.cpp	/^UtxoData utxoData;$/;"	v
utxoupdatepsbt	src/rpc/rawtransaction.cpp	/^UniValue utxoupdatepsbt(const JSONRPCRequest& request)$/;"	f
uvTypeName	src/univalue/lib/univalue.cpp	/^const char *uvTypeName(UniValue::VType t)$/;"	f
v	src/crypto/siphash.h	/^    uint64_t v[4];$/;"	m	class:CSipHasher
v	src/secp256k1/src/hash.h	/^    unsigned char v[32];$/;"	m	struct:__anon113
vAddrToSend	src/net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vBinds	src/net.h	/^        std::vector<CService> vBinds, vWhiteBinds;$/;"	m	struct:CConnman::Options
vBits	src/merkleblock.h	/^    std::vector<bool> vBits;$/;"	m	class:CPartialMerkleTree
vBlocksInFlight	src/net_processing.cpp	/^    std::list<QueuedBlock> vBlocksInFlight;$/;"	m	struct:__anon89::CNodeState	file:
vChain	src/chain.h	/^    std::vector<CBlockIndex*> vChain;$/;"	m	class:CChain
vCoins	src/wallet/test/coinselector_tests.cpp	/^static std::vector<COutput> vCoins;$/;"	v	file:
vData	src/bloom.h	/^    std::vector<unsigned char> vData;$/;"	m	class:CBloomFilter
vDeployments	src/consensus/params.h	/^    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:Consensus::Params
vDerive	src/test/bip32_tests.cpp	/^    std::vector<TestDerivation> vDerive;$/;"	m	struct:TestVector	file:
vFixedSeeds	src/chainparams.h	/^    std::vector<SeedSpec6> vFixedSeeds;$/;"	m	class:CChainParams
vHash	src/merkleblock.h	/^    std::vector<uint256> vHash;$/;"	m	class:CPartialMerkleTree
vHave	src/primitives/block.h	/^    std::vector<uint256> vHave;$/;"	m	struct:CBlockLocator
vHeightInFlight	src/net_processing.h	/^    std::vector<int> vHeightInFlight;$/;"	m	struct:CNodeStateStats
vMatchedTxn	src/merkleblock.h	/^    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;$/;"	m	class:CMerkleBlock
vNodesDisconnected	src/net.h	/^    std::list<CNode*> vNodesDisconnected;$/;"	m	class:CConnman
vOrderForm	src/wallet/wallet.h	/^    std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vQueueNotifications	src/qt/transactiontablemodel.cpp	/^static std::vector< TransactionNotification > vQueueNotifications;$/;"	v	file:
vRPCCommands	src/qt/test/rpcnestedtests.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRPCCommands	src/rpc/server.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRPCConvertParams	src/rpc/client.cpp	/^static const CRPCConvertParam vRPCConvertParams[] =$/;"	v	file:
vRecv	src/net.h	/^    CDataStream vRecv;              \/\/ received message data$/;"	m	class:CNetMessage
vRecvGetData	src/net.h	/^    std::deque<CInv> vRecvGetData;$/;"	m	class:CNode
vRecvMsg	src/net.h	/^    std::list<CNetMessage> vRecvMsg;  \/\/ Used only by SocketHandler thread$/;"	m	class:CNode
vSamplesIn	src/qt/trafficgraphwidget.h	/^    QQueue<float> vSamplesIn;$/;"	m	class:TrafficGraphWidget
vSamplesOut	src/qt/trafficgraphwidget.h	/^    QQueue<float> vSamplesOut;$/;"	m	class:TrafficGraphWidget
vSeedNodes	src/net.h	/^        std::vector<std::string> vSeedNodes;$/;"	m	struct:CConnman::Options
vSeeds	src/chainparams.h	/^    std::vector<std::string> vSeeds;$/;"	m	class:CChainParams
vSorted	src/timedata.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vTxFees	src/miner.h	/^    std::vector<CAmount> vTxFees;$/;"	m	struct:CBlockTemplate
vTxHashesIdx	src/txmempool.h	/^    mutable size_t vTxHashesIdx; \/\/!< Index in mempool's vTxHashes$/;"	m	class:CTxMemPoolEntry
vTxSigOpsCost	src/miner.h	/^    std::vector<int64_t> vTxSigOpsCost;$/;"	m	struct:CBlockTemplate
vValues	src/timedata.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
vWalletUpgrade	src/wallet/walletdb.cpp	/^    std::vector<uint256> vWalletUpgrade;$/;"	m	class:CWalletScanState	file:
vWhiteBinds	src/net.h	/^        std::vector<CService> vBinds, vWhiteBinds;$/;"	m	struct:CConnman::Options
vWhitelistedRange	src/net.h	/^        std::vector<CSubNet> vWhitelistedRange;$/;"	m	struct:CConnman::Options
vWhitelistedRange	src/net.h	/^    std::vector<CSubNet> vWhitelistedRange;$/;"	m	class:CConnman
va_copy	src/leveldb/util/env_win.cc	/^#define va_copy(/;"	d	file:
val	src/leveldb/util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State	file:
val	src/univalue/include/univalue.h	/^    std::string val;                       \/\/ numbers are stored as C++ strings$/;"	m	class:UniValue
valid	src/netaddress.h	/^        bool valid;$/;"	m	class:CSubNet
valid	src/qt/bitcoinunits.cpp	/^bool BitcoinUnits::valid(int unit)$/;"	f	class:BitcoinUnits
valid	src/qt/qvalidatedlineedit.h	/^    bool valid;$/;"	m	class:QValidatedLineEdit
valid	src/qt/walletmodel.h	/^        bool valid;$/;"	m	class:WalletModel::UnlockContext
validNumStr	src/univalue/lib/univalue.cpp	/^static bool validNumStr(const std::string& s)$/;"	f	file:
valid_	src/leveldb/db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon29::DBIter	file:
valid_	src/leveldb/table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
valid_in_block	test/functional/data/invalid_txs.py	/^    valid_in_block = False$/;"	v	class:BadTxTemplate
valid_in_block	test/functional/data/invalid_txs.py	/^    valid_in_block = True$/;"	v	class:InvalidOPIFConstruction
valid_in_block	test/functional/data/invalid_txs.py	/^    valid_in_block = True$/;"	v	class:SizeTooSmall
validate	src/qt/bitcoinaddressvalidator.cpp	/^QValidator::State BitcoinAddressCheckValidator::validate(QString &input, int &pos) const$/;"	f	class:BitcoinAddressCheckValidator
validate	src/qt/bitcoinaddressvalidator.cpp	/^QValidator::State BitcoinAddressEntryValidator::validate(QString &input, int &pos) const$/;"	f	class:BitcoinAddressEntryValidator
validate	src/qt/bitcoinamountfield.cpp	/^    QValidator::State validate(QString &text, int &pos) const$/;"	f	class:AmountSpinBox
validate	src/qt/bitcoinamountfield.cpp	/^bool BitcoinAmountField::validate()$/;"	f	class:BitcoinAmountField
validate	src/qt/optionsdialog.cpp	/^QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) const$/;"	f	class:ProxyAddressValidator
validate	src/qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::validate(interfaces::Node& node)$/;"	f	class:SendCoinsEntry
validateAddress	src/qt/walletmodel.cpp	/^bool WalletModel::validateAddress(const QString &address)$/;"	f	class:WalletModel
validateaddress	src/rpc/misc.cpp	/^static UniValue validateaddress(const JSONRPCRequest& request)$/;"	f	file:
valtype	src/script/interpreter.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	src/script/ismine.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	src/script/sign.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	src/script/standard.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	src/test/transaction_tests.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
value	src/leveldb/db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon29::DBIter
value	src/leveldb/db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	src/leveldb/db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	src/leveldb/db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	src/leveldb/db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon26::Saver	file:
value	src/leveldb/table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	src/leveldb/table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon12::EmptyIterator
value	src/leveldb/table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	src/leveldb/table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon11::MergingIterator
value	src/leveldb/table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	src/leveldb/table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
value	src/leveldb/util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
value	src/qt/bitcoinamountfield.cpp	/^    CAmount value(bool *valid_out=nullptr) const$/;"	f	class:AmountSpinBox
value	src/qt/bitcoinamountfield.cpp	/^CAmount BitcoinAmountField::value(bool *valid_out) const$/;"	f	class:BitcoinAmountField
value	src/qt/qvaluecombobox.cpp	/^QVariant QValueComboBox::value() const$/;"	f	class:QValueComboBox
value	src/sync.h	/^    int value;$/;"	m	class:CSemaphore
value	src/tinyformat.h	/^        static const bool value =$/;"	m	struct:tinyformat::detail::is_convertible
value	src/wallet/db.h	/^    u_int8_t value[DB_FILE_ID_LEN];$/;"	m	struct:WalletDatabaseFileId
value_	src/leveldb/table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	src/leveldb/db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_map	src/interfaces/wallet.h	/^    std::map<std::string, std::string> value_map;$/;"	m	struct:interfaces::WalletTx
value_size_	src/leveldb/db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
value_type	src/indirectmap.h	/^    typedef typename base::value_type value_type;$/;"	t	class:indirectmap
value_type	src/limitedmap.h	/^    typedef std::pair<const key_type, mapped_type> value_type;$/;"	t	class:limitedmap
value_type	src/prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::iterator
value_type	src/prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::reverse_iterator
value_type	src/prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_iterator
value_type	src/prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_reverse_iterator
value_type	src/prevector.h	/^    typedef T value_type;$/;"	t	class:prevector
value_type	src/streams.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
value_type	src/support/allocators/secure.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	src/support/allocators/zeroafterfree.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:zero_after_free_allocator
values	src/test/scriptnum_tests.cpp	/^static const int64_t values[] = { 0, 1, -2, 127, 128, -255, 256, (1LL << 15) - 1, -(1LL << 16), (1LL << 24) - 1, (1LL << 31), 1 - (1LL << 32), 1LL << 40 };$/;"	v	file:
values	src/univalue/include/univalue.h	/^    std::vector<UniValue> values;$/;"	m	class:UniValue
variant	test/functional/wallet_import_rescan.py	/^            self.log.info('Run import for variant {}'.format(variant))$/;"	i
vch	src/pubkey.h	/^    unsigned char vch[PUBLIC_KEY_SIZE];$/;"	m	class:CPubKey
vch	src/streams.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchBuf	src/streams.h	/^    std::vector<char> vchBuf; \/\/!< the buffer$/;"	m	class:CBufferedFile
vchCoinbaseCommitment	src/miner.h	/^    std::vector<unsigned char> vchCoinbaseCommitment;$/;"	m	struct:CBlockTemplate
vchCryptedKey	src/wallet/crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	src/streams.h	/^    std::vector<unsigned char>& vchData;$/;"	m	class:CVectorWriter
vchFingerprint	src/key.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtKey
vchFingerprint	src/pubkey.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtPubKey
vchIV	src/wallet/crypter.h	/^    std::vector<unsigned char, secure_allocator<unsigned char>> vchIV;$/;"	m	class:CCrypter
vchKey	src/wallet/crypter.h	/^    std::vector<unsigned char, secure_allocator<unsigned char>> vchKey;$/;"	m	class:CCrypter
vchKey0	src/test/script_tests.cpp	/^const unsigned char vchKey0[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};$/;"	m	namespace:__anon58	file:
vchKey1	src/test/script_tests.cpp	/^const unsigned char vchKey1[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};$/;"	m	namespace:__anon58	file:
vchKey2	src/test/script_tests.cpp	/^const unsigned char vchKey2[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};$/;"	m	namespace:__anon58	file:
vchOtherDerivationParameters	src/wallet/crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	src/wallet/wallet.h	/^    CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPubKey	src/wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CKeyPool
vchPubKey	src/wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CReserveKey
vchSalt	src/wallet/crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vector_type	src/streams.h	/^    typedef CSerializeData vector_type;$/;"	t	class:CDataStream
verify	contrib/gitian-build.py	/^def verify():$/;"	f
verify	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static boolean verify(byte[] data, byte[] signature, byte[] pub) throws AssertFailException{$/;"	m	class:NativeSecp256k1
verify	src/test/scriptnum_tests.cpp	/^static bool verify(const CScriptNum10& bignum, const CScriptNum& scriptnum)$/;"	f	file:
verify	test/functional/wallet_labels.py	/^    def verify(self, node):$/;"	m	class:Label
verifyAmount	src/qt/paymentserver.cpp	/^bool PaymentServer::verifyAmount(const CAmount& requestAmount)$/;"	f	class:PaymentServer
verifyExpired	src/qt/paymentserver.cpp	/^bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails)$/;"	f	class:PaymentServer
verifyMessageAction	src/qt/bitcoingui.h	/^    QAction* verifyMessageAction = nullptr;$/;"	m	class:BitcoinGUI
verifyNetwork	src/qt/paymentserver.cpp	/^bool PaymentServer::verifyNetwork(interfaces::Node& node, const payments::PaymentDetails& requestDetails)$/;"	f	class:PaymentServer
verifySize	src/qt/paymentserver.cpp	/^bool PaymentServer::verifySize(qint64 requestSize)$/;"	f	class:PaymentServer
verify_checksums	src/leveldb/include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
verify_ecdsa	test/functional/test_framework/key.py	/^    def verify_ecdsa(self, sig, msg, low_s=True):$/;"	m	class:ECPubKey
verify_flags	src/script/bitcoinconsensus.cpp	/^static bool verify_flags(unsigned int flags)$/;"	f	file:
verify_script	src/script/bitcoinconsensus.cpp	/^static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,$/;"	f	file:
verify_utxo_hash	test/functional/feature_dbcrash.py	/^    def verify_utxo_hash(self):$/;"	m	class:ChainstateWriteCrashTest
verifychain	src/rpc/blockchain.cpp	/^static UniValue verifychain(const JSONRPCRequest& request)$/;"	f	file:
verifymessage	src/rpc/misc.cpp	/^static UniValue verifymessage(const JSONRPCRequest& request)$/;"	f	file:
verifytxoutproof	src/rpc/rawtransaction.cpp	/^static UniValue verifytxoutproof(const JSONRPCRequest& request)$/;"	f	file:
version	src/leveldb/db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon18::IterState	file:
version	src/script/standard.h	/^    unsigned int version;$/;"	m	struct:WitnessUnknown
versionbits_in_alert_file	test/functional/feature_versionbits_warning.py	/^    def versionbits_in_alert_file(self):$/;"	m	class:VersionBitsWarningTest
versions_	src/leveldb/db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vformat	src/tinyformat.h	/^inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)$/;"	f	namespace:tinyformat
vhListenSocket	src/net.h	/^    std::vector<ListenSocket> vhListenSocket;$/;"	m	class:CConnman
viewItemChanged	src/qt/coincontroldialog.cpp	/^void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)$/;"	f	class:CoinControlDialog
vin	src/primitives/transaction.h	/^    const std::vector<CTxIn> vin;$/;"	m	class:CTransaction
vin	src/primitives/transaction.h	/^    std::vector<CTxIn> vin;$/;"	m	struct:CMutableTransaction
vinfoBlockFile	src/validation.cpp	/^    std::vector<CBlockFileInfo> vinfoBlockFile;$/;"	m	namespace:__anon50	file:
vout	src/primitives/transaction.h	/^    const std::vector<CTxOut> vout;$/;"	m	class:CTransaction
vout	src/primitives/transaction.h	/^    std::vector<CTxOut> vout;$/;"	m	struct:CMutableTransaction
vout	src/txdb.cpp	/^    std::vector<CTxOut> vout;$/;"	m	class:__anon122::CCoins	file:
vout	src/wallet/wallet.h	/^    int vout;$/;"	m	struct:COutputEntry
vpblock	src/test/versionbits_tests.cpp	/^    std::vector<CBlockIndex*> vpblock;$/;"	m	class:VersionBitsTester	file:
vprevout	src/undo.h	/^    std::vector<Coin> vprevout;$/;"	m	class:CTxUndo
vset_	src/leveldb/db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	src/leveldb/db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
vtx	src/primitives/block.h	/^    std::vector<CTransactionRef> vtx;$/;"	m	class:CBlock
vtxundo	src/undo.h	/^    std::vector<CTxUndo> vtxundo; \/\/ for all but the coinbase$/;"	m	class:CBlockUndo
w	src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static final Lock w = rwl.writeLock();$/;"	f	class:NativeSecp256k1	file:
wait	src/sync.h	/^    void wait()$/;"	f	class:CSemaphore
wait_for_addr	test/functional/p2p_node_network_limited.py	/^    def wait_for_addr(self, timeout=5):$/;"	m	class:P2PIgnoreInv
wait_for_block	test/functional/test_framework/mininode.py	/^    def wait_for_block(self, blockhash, timeout=60):$/;"	m	class:P2PInterface
wait_for_block_announcement	test/functional/p2p_compactblocks.py	/^    def wait_for_block_announcement(self, block_hash, timeout=30):$/;"	m	class:TestP2PConn
wait_for_block_announcement	test/functional/p2p_sendheaders.py	/^    def wait_for_block_announcement(self, block_hash, timeout=60):$/;"	m	class:BaseNode
wait_for_disconnect	test/functional/test_framework/mininode.py	/^    def wait_for_disconnect(self, timeout=60):$/;"	m	class:P2PInterface
wait_for_getdata	test/functional/p2p_sendheaders.py	/^    def wait_for_getdata(self, hash_list, timeout=60):$/;"	m	class:BaseNode
wait_for_getdata	test/functional/test_framework/mininode.py	/^    def wait_for_getdata(self, timeout=60):$/;"	m	class:P2PInterface
wait_for_getheaders	test/functional/test_framework/mininode.py	/^    def wait_for_getheaders(self, timeout=60):$/;"	m	class:P2PInterface
wait_for_header	test/functional/test_framework/mininode.py	/^    def wait_for_header(self, blockhash, timeout=60):$/;"	m	class:P2PInterface
wait_for_inv	test/functional/test_framework/mininode.py	/^    def wait_for_inv(self, expected_inv, timeout=60):$/;"	m	class:P2PInterface
wait_for_node_exit	test/functional/test_framework/test_framework.py	/^    def wait_for_node_exit(self, i, timeout):$/;"	m	class:BitcoinTestFramework
wait_for_rpc_connection	test/functional/test_framework/test_node.py	/^    def wait_for_rpc_connection(self):$/;"	m	class:TestNode
wait_for_tx	test/functional/test_framework/mininode.py	/^    def wait_for_tx(self, txid, timeout=60):$/;"	m	class:P2PInterface
wait_for_verack	test/functional/test_framework/mininode.py	/^    def wait_for_verack(self, timeout=60):$/;"	m	class:P2PInterface
wait_mtx_	src/leveldb/port/port_win.h	/^  Mutex wait_mtx_;$/;"	m	class:leveldb::port::CondVar
wait_until	test/functional/feature_notifications.py	/^from test_framework.util import assert_equal, wait_until, connect_nodes_bi$/;"	i
wait_until	test/functional/feature_reindex.py	/^from test_framework.util import wait_until$/;"	i
wait_until	test/functional/feature_shutdown.py	/^from test_framework.util import assert_equal, get_rpc_proxy, wait_until$/;"	i
wait_until	test/functional/feature_versionbits_warning.py	/^from test_framework.util import wait_until$/;"	i
wait_until	test/functional/mempool_persist.py	/^from test_framework.util import assert_equal, assert_raises_rpc_error, wait_until$/;"	i
wait_until	test/functional/p2p_compactblocks.py	/^from test_framework.util import assert_equal, wait_until, softfork_active$/;"	i
wait_until	test/functional/p2p_leak.py	/^from test_framework.util import wait_until$/;"	i
wait_until	test/functional/test_framework/mininode.py	/^from test_framework.util import wait_until$/;"	i
wait_until	test/functional/test_framework/util.py	/^def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None):$/;"	f
wait_until	test/functional/wallet_resendwallettransactions.py	/^from test_framework.util import assert_equal, wait_until$/;"	i
wait_until_stopped	test/functional/test_framework/test_node.py	/^    def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):$/;"	m	class:TestNode
waitforblock	src/rpc/blockchain.cpp	/^static UniValue waitforblock(const JSONRPCRequest& request)$/;"	f	file:
waitforblockheight	src/rpc/blockchain.cpp	/^static UniValue waitforblockheight(const JSONRPCRequest& request)$/;"	f	file:
waitfornewblock	src/rpc/blockchain.cpp	/^static UniValue waitfornewblock(const JSONRPCRequest& request)$/;"	f	file:
waiting_	src/leveldb/port/port_win.h	/^  long waiting_;$/;"	m	class:leveldb::port::CondVar
walk	src/support/lockedpool.cpp	/^void Arena::walk() const$/;"	f	class:Arena
wallet	src/qt/walletmodel.h	/^        WalletModel *wallet;$/;"	m	class:WalletModel::UnlockContext
wallet	src/qt/walletmodel.h	/^    interfaces::Wallet& wallet() const { return *m_wallet; }$/;"	f	class:WalletModel
wallet	src/wallet/test/wallet_tests.cpp	/^    std::unique_ptr<CWallet> wallet;$/;"	m	class:ListCoinsTestingSetup	file:
wallet	test/functional/wallet_createwallet.py	/^        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')$/;"	i
wallet	test/functional/wallet_createwallet.py	/^        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)$/;"	i
walletFrame	src/qt/bitcoingui.h	/^    WalletFrame* walletFrame = nullptr;$/;"	m	class:BitcoinGUI
walletModel	src/qt/addresstablemodel.h	/^    WalletModel* const walletModel;$/;"	m	class:AddressTableModel
walletModel	src/qt/overviewpage.h	/^    WalletModel *walletModel;$/;"	m	class:OverviewPage
walletModel	src/qt/recentrequeststablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:RecentRequestsTableModel
walletModel	src/qt/transactiontablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:TransactionTableModel
walletModel	src/qt/walletview.h	/^    WalletModel *walletModel;$/;"	m	class:WalletView
walletStack	src/qt/walletframe.h	/^    QStackedWidget *walletStack;$/;"	m	class:WalletFrame
walletTests	src/qt/test/wallettests.cpp	/^void WalletTests::walletTests()$/;"	f	class:WalletTests
wallet_crypto_tests	src/wallet/crypter.h	/^namespace wallet_crypto_tests$/;"	n
wallet_file	test/functional/wallet_multiwallet.py	/^        def wallet_file(name):$/;"	f	function:MultiWalletTest.run_test
wallet_packages	depends/packages/packages.mk	/^wallet_packages=bdb$/;"	m
wallet_test	test/functional/feature_pruning.py	/^    def wallet_test(self):$/;"	m	class:PruneTest
walletcreatefundedpsbt	src/wallet/rpcwallet.cpp	/^UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)$/;"	f
walletlock	src/wallet/rpcwallet.cpp	/^static UniValue walletlock(const JSONRPCRequest& request)$/;"	f	file:
walletpassphrase	src/wallet/rpcwallet.cpp	/^static UniValue walletpassphrase(const JSONRPCRequest& request)$/;"	f	file:
walletpassphrasechange	src/wallet/rpcwallet.cpp	/^static UniValue walletpassphrasechange(const JSONRPCRequest& request)$/;"	f	file:
walletprocesspsbt	src/wallet/rpcwallet.cpp	/^UniValue walletprocesspsbt(const JSONRPCRequest& request)$/;"	f
warning	contrib/devtools/security-check.py	/^            warning = []$/;"	v
was_successful	test/functional/test_runner.py	/^    def was_successful(self):$/;"	m	class:TestResult
watch	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address as watch only")$/;"	i
watch	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
watchOnlyFilter	src/qt/transactionfilterproxy.h	/^    WatchOnlyFilter watchOnlyFilter;$/;"	m	class:TransactionFilterProxy
watchOnlyWidget	src/qt/transactionview.h	/^    QComboBox *watchOnlyWidget;$/;"	m	class:TransactionView
watch_only_balance	src/interfaces/wallet.h	/^    CAmount watch_only_balance = 0;$/;"	m	struct:interfaces::WalletBalances
watchonly	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key and with watchonly")$/;"	i
weak_count	src/memusage.h	/^    size_t weak_count;$/;"	m	struct:memusage::stl_shared_counter
when	test/functional/test_framework/netutil.py	/^    import fcntl  # Linux only, so only import when required$/;"	i
whitelisted	src/net.h	/^        bool whitelisted;$/;"	m	struct:CConnman::ListenSocket
width	src/qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
window	src/qt/bitcoin.h	/^    BitcoinGUI *window;$/;"	m	class:BitcoinApplication
with	test/functional/wallet_createwallet.py	/^        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')$/;"	i
with	test/functional/wallet_createwallet.py	/^        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Addresses should have hd keypath and master key id after import with key origin")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a P2WPKH address with key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script and private keys")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh with respective redeem script")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and private keys")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wsh with respective redeem script but no private key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with private key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with public key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal flag")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key and with watchonly")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with private key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with public key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should import the ranged descriptor with specified range as solvable")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with private key if is already imported")$/;"	i
with	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
withinTarget	src/policy/fees.h	/^    double withinTarget = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
without	test/functional/wallet_importmulti.py	/^        self.log.info("Ranged descriptor import should fail without a specified range")$/;"	i
without	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2sh-p2wpkh without redeem script or keys")$/;"	i
without	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh multisig as watch only without respective redeem script and private keys")$/;"	i
without	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with private key")$/;"	i
without	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal and with public key")$/;"	i
without	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a nonstandard scriptPubKey without internal flag")$/;"	i
without	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import a p2sh-p2wpkh address from descriptor without checksum and private key")$/;"	i
witness	src/script/sign.cpp	/^    std::vector<valtype> witness;$/;"	m	struct:__anon82::Stacks	file:
witness	src/script/sign.h	/^    bool witness = false; \/\/\/< Stores whether the input this SigData corresponds to is a witness input$/;"	m	struct:SignatureData
witness	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a p2wsh with respective witness script and private keys")$/;"	i
witness_script	src/psbt.h	/^    CScript witness_script;$/;"	m	struct:PSBTInput
witness_script	src/psbt.h	/^    CScript witness_script;$/;"	m	struct:PSBTOutput
witness_script	src/script/sign.h	/^    CScript witness_script; \/\/\/< The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs.$/;"	m	struct:SignatureData
witness_script	test/functional/feature_segwit.py	/^from test_framework.blocktools import witness_script, send_to_witness$/;"	i
witness_script	test/functional/test_framework/blocktools.py	/^def witness_script(use_p2wsh, pubkey):$/;"	f
witness_script_test	test/functional/rpc_signrawtransaction.py	/^    def witness_script_test(self):$/;"	m	class:SignRawTransactionsTest
witness_utxo	src/psbt.h	/^    CTxOut witness_utxo;$/;"	m	struct:PSBTInput
witnessscript	src/wallet/rpcdump.cpp	/^    std::unique_ptr<CScript> witnessscript; \/\/!< Provided witnessScript; will be moved to `import_scripts` if relevant.$/;"	m	struct:ImportData	file:
witscript	src/test/script_tests.cpp	/^    CScript witscript;$/;"	m	class:__anon58::TestBuilder	file:
wnaf	src/secp256k1/src/bench_internal.c	/^    int wnaf[256];$/;"	m	struct:__anon109	file:
wordreverse	contrib/linearize/linearize-data.py	/^def wordreverse(in_buf):$/;"	f
workQueue	src/httpserver.cpp	/^static WorkQueue<HTTPClosure>* workQueue = nullptr;$/;"	v	file:
writable_file_error_	src/leveldb/util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
writable_file_opened_	src/leveldb/db/fault_injection_test.cc	/^  bool writable_file_opened_;$/;"	m	class:leveldb::TestWritableFile	file:
write	src/hash.h	/^    void write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
write	src/qt/csvmodelwriter.cpp	/^bool CSVModelWriter::write()$/;"	f	class:CSVModelWriter
write	src/serialize.h	/^    void write(const char *psz, size_t _nSize)$/;"	f	class:CSizeComputer
write	src/streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	src/streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CDataStream
write	src/streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CVectorWriter
write	src/streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:OverrideStream
write	src/univalue/lib/univalue_write.cpp	/^std::string UniValue::write(unsigned int prettyIndent,$/;"	f	class:UniValue
writeArray	src/univalue/lib/univalue_write.cpp	/^void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const$/;"	f	class:UniValue
writeBlock	contrib/linearize/linearize-data.py	/^    def writeBlock(self, inhdr, blk_hdr, rawblock):$/;"	m	class:BlockDataCopier
writeNewline	src/qt/csvmodelwriter.cpp	/^static void writeNewline(QTextStream &f)$/;"	f	file:
writeObject	src/univalue/lib/univalue_write.cpp	/^void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const$/;"	f	class:UniValue
writeSep	src/qt/csvmodelwriter.cpp	/^static void writeSep(QTextStream &f)$/;"	f	file:
writeValue	src/qt/csvmodelwriter.cpp	/^static void writeValue(QTextStream &f, const QString &value)$/;"	f	file:
write_all_rpc_commands	test/functional/test_framework/coverage.py	/^def write_all_rpc_commands(dirname, node):$/;"	f
write_buffer_size	src/leveldb/include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_file_lines	contrib/devtools/copyright_header.py	/^def write_file_lines(filename, file_lines):$/;"	f
write_options_	src/leveldb/db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
write_testcode	contrib/devtools/test-security-check.py	/^def write_testcode(filename):$/;"	f
writeoptions	src/dbwrapper.h	/^    leveldb::WriteOptions writeoptions;$/;"	m	class:CDBWrapper
writer_	src/leveldb/db/log_test.cc	/^  Writer* writer_;$/;"	m	class:leveldb::log::LogTest	file:
writers_	src/leveldb/db/db_impl.h	/^  std::deque<Writer*> writers_;$/;"	m	class:leveldb::DBImpl
wrong	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong private key as non-solvable")$/;"	i
wrong	test/functional/wallet_importmulti.py	/^        self.log.info("Should import a scriptPubKey with internal and with a wrong public key as non-solvable")$/;"	i
wrong	test/functional/wallet_importmulti.py	/^        self.log.info("Should import an address with a wrong private key as non-solvable")$/;"	i
wrong	test/functional/wallet_importmulti.py	/^        self.log.info("Should not import an address with the wrong public key as non-solvable")$/;"	i
wtx	src/qt/walletmodeltransaction.h	/^    std::unique_ptr<interfaces::PendingWalletTx> wtx;$/;"	m	class:WalletModelTransaction
wtxOrdered	src/wallet/wallet.h	/^    TxItems wtxOrdered;$/;"	m	class:final
wtxn	src/bench/coin_selection.cpp	/^std::vector<std::unique_ptr<CWalletTx>> wtxn;$/;"	v
wtxn	src/wallet/test/coinselector_tests.cpp	/^std::vector<std::unique_ptr<CWalletTx>> wtxn;$/;"	v
x	src/bench/prevector.cpp	/^    int x;$/;"	m	struct:nontrivial_t	file:
x	src/memusage.h	/^    X x;$/;"	m	struct:memusage::stl_tree_node
x	src/secp256k1/src/group.h	/^    secp256k1_fe x; \/* actual X: x\/z^2 *\/$/;"	m	struct:__anon104
x	src/secp256k1/src/group.h	/^    secp256k1_fe x;$/;"	m	struct:__anon103
x	src/secp256k1/src/group.h	/^    secp256k1_fe_storage x;$/;"	m	struct:__anon105
x86_64_linux_AR	depends/hosts/linux.mk	/^x86_64_linux_AR=ar$/;"	m
x86_64_linux_CC	depends/hosts/linux.mk	/^x86_64_linux_CC=$(default_host_CC) -m64$/;"	m
x86_64_linux_CC	depends/hosts/linux.mk	/^x86_64_linux_CC=gcc -m64$/;"	m
x86_64_linux_CXX	depends/hosts/linux.mk	/^x86_64_linux_CXX=$(default_host_CXX) -m64$/;"	m
x86_64_linux_CXX	depends/hosts/linux.mk	/^x86_64_linux_CXX=g++ -m64$/;"	m
x86_64_linux_NM	depends/hosts/linux.mk	/^x86_64_linux_NM=nm$/;"	m
x86_64_linux_RANLIB	depends/hosts/linux.mk	/^x86_64_linux_RANLIB=ranlib$/;"	m
x86_64_linux_STRIP	depends/hosts/linux.mk	/^x86_64_linux_STRIP=strip$/;"	m
xml	contrib/devtools/update-translations.py	/^import xml.etree.ElementTree as ET$/;"	i
xml	test/functional/rpc_misc.py	/^import xml.etree.ElementTree as ET$/;"	i
y	src/secp256k1/src/group.h	/^    secp256k1_fe y; \/* actual Y: y\/z^3 *\/$/;"	m	struct:__anon104
y	src/secp256k1/src/group.h	/^    secp256k1_fe y;$/;"	m	struct:__anon103
y	src/secp256k1/src/group.h	/^    secp256k1_fe_storage y;$/;"	m	struct:__anon105
year_range_to_str	contrib/devtools/copyright_header.py	/^def year_range_to_str(start_year, end_year):$/;"	f
yesButton	src/qt/sendcoinsdialog.h	/^    QAbstractButton *yesButton;$/;"	m	class:SendConfirmationDialog
z	src/secp256k1/src/group.h	/^    secp256k1_fe z;$/;"	m	struct:__anon104
zero_after_free_allocator	src/support/allocators/zeroafterfree.h	/^struct zero_after_free_allocator : public std::allocator<T> {$/;"	s
zmq	contrib/zmq/zmq_sub.py	/^import zmq$/;"	i
zmq	contrib/zmq/zmq_sub.py	/^import zmq.asyncio$/;"	i
zmq	test/functional/interface_zmq.py	/^        import zmq$/;"	i
zmq	test/functional/test_framework/test_framework.py	/^            import zmq  # noqa$/;"	i
zmqError	src/zmq/zmqnotificationinterface.cpp	/^void zmqError(const char *str)$/;"	f
zmq_send_multipart	src/zmq/zmqpublishnotifier.cpp	/^static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)$/;"	f	file:
~AES256CBCDecrypt	src/crypto/aes.cpp	/^AES256CBCDecrypt::~AES256CBCDecrypt()$/;"	f	class:AES256CBCDecrypt
~AES256CBCEncrypt	src/crypto/aes.cpp	/^AES256CBCEncrypt::~AES256CBCEncrypt()$/;"	f	class:AES256CBCEncrypt
~AES256Decrypt	src/crypto/aes.cpp	/^AES256Decrypt::~AES256Decrypt()$/;"	f	class:AES256Decrypt
~AES256Encrypt	src/crypto/aes.cpp	/^AES256Encrypt::~AES256Encrypt()$/;"	f	class:AES256Encrypt
~AddressBookPage	src/qt/addressbookpage.cpp	/^AddressBookPage::~AddressBookPage()$/;"	f	class:AddressBookPage
~AddressTableModel	src/qt/addresstablemodel.cpp	/^AddressTableModel::~AddressTableModel()$/;"	f	class:AddressTableModel
~AnnotatedMixin	src/sync.h	/^    ~AnnotatedMixin() {$/;"	f	class:AnnotatedMixin
~Arena	src/leveldb/util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~Arena	src/support/lockedpool.cpp	/^Arena::~Arena()$/;"	f	class:Arena
~AskPassphraseDialog	src/qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::~AskPassphraseDialog()$/;"	f	class:AskPassphraseDialog
~AutoCompactTest	src/leveldb/db/autocompact_test.cc	/^  ~AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
~BanMan	src/banman.cpp	/^BanMan::~BanMan()$/;"	f	class:BanMan
~BanTableModel	src/qt/bantablemodel.cpp	/^BanTableModel::~BanTableModel()$/;"	f	class:BanTableModel
~BaseIndex	src/index/base.cpp	/^BaseIndex::~BaseIndex()$/;"	f	class:BaseIndex
~BaseRequestHandler	src/bitcoin-cli.cpp	/^    virtual ~BaseRequestHandler() {}$/;"	f	class:BaseRequestHandler
~BaseSignatureChecker	src/script/interpreter.h	/^    virtual ~BaseSignatureChecker() {}$/;"	f	class:BaseSignatureChecker
~BaseSignatureCreator	src/script/sign.h	/^    virtual ~BaseSignatureCreator() {}$/;"	f	class:BaseSignatureCreator
~BasicTestingSetup	src/test/setup_common.cpp	/^BasicTestingSetup::~BasicTestingSetup()$/;"	f	class:BasicTestingSetup
~Benchmark	src/leveldb/db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	src/leveldb/doc/bench/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	src/leveldb/doc/bench/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~BerkeleyBatch	src/wallet/db.h	/^    ~BerkeleyBatch() { Close(); }$/;"	f	class:BerkeleyBatch
~BerkeleyDatabase	src/wallet/db.h	/^    ~BerkeleyDatabase() {$/;"	f	class:BerkeleyDatabase
~BerkeleyEnvironment	src/wallet/db.cpp	/^BerkeleyEnvironment::~BerkeleyEnvironment()$/;"	f	class:BerkeleyEnvironment
~BitStreamWriter	src/streams.h	/^    ~BitStreamWriter()$/;"	f	class:BitStreamWriter
~BitcoinApplication	src/qt/bitcoin.cpp	/^BitcoinApplication::~BitcoinApplication()$/;"	f	class:BitcoinApplication
~BitcoinGUI	src/qt/bitcoingui.cpp	/^BitcoinGUI::~BitcoinGUI()$/;"	f	class:BitcoinGUI
~Block	src/leveldb/table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BlockConstructor	src/leveldb/table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~BloomTest	src/leveldb/util/bloom_test.cc	/^  ~BloomTest() {$/;"	f	class:leveldb::BloomTest
~Builder	src/leveldb/db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~CAddrMan	src/addrman.h	/^    ~CAddrMan()$/;"	f	class:CAddrMan
~CAutoFile	src/streams.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBlockPolicyEstimator	src/policy/fees.cpp	/^CBlockPolicyEstimator::~CBlockPolicyEstimator()$/;"	f	class:CBlockPolicyEstimator
~CBufferedFile	src/streams.h	/^    ~CBufferedFile()$/;"	f	class:CBufferedFile
~CCheckQueue	src/checkqueue.h	/^    ~CCheckQueue()$/;"	f	class:CCheckQueue
~CCheckQueueControl	src/checkqueue.h	/^    ~CCheckQueueControl()$/;"	f	class:CCheckQueueControl
~CCoinsView	src/coins.h	/^    virtual ~CCoinsView() {}$/;"	f	class:CCoinsView
~CCoinsViewCursor	src/coins.h	/^    virtual ~CCoinsViewCursor() {}$/;"	f	class:CCoinsViewCursor
~CCoinsViewDBCursor	src/txdb.h	/^    ~CCoinsViewDBCursor() {}$/;"	f	class:CCoinsViewDBCursor
~CConnman	src/net.cpp	/^CConnman::~CConnman()$/;"	f	class:CConnman
~CCrypter	src/wallet/crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDBIterator	src/dbwrapper.cpp	/^CDBIterator::~CDBIterator() { delete piter; }$/;"	f	class:CDBIterator
~CDBWrapper	src/dbwrapper.cpp	/^CDBWrapper::~CDBWrapper()$/;"	f	class:CDBWrapper
~CImportingNow	src/init.cpp	/^    ~CImportingNow() {$/;"	f	struct:CImportingNow
~CMainCleanup	src/validation.cpp	/^    ~CMainCleanup() {$/;"	f	class:CMainCleanup
~CNetCleanup	src/net.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNetProcessingCleanup	src/net_processing.cpp	/^    ~CNetProcessingCleanup() {$/;"	f	class:CNetProcessingCleanup
~CNode	src/net.cpp	/^CNode::~CNode()$/;"	f	class:CNode
~CReserveKey	src/wallet/wallet.h	/^    ~CReserveKey()$/;"	f	class:CReserveKey
~CScheduler	src/scheduler.cpp	/^CScheduler::~CScheduler()$/;"	f	class:CScheduler
~CSemaphoreGrant	src/sync.h	/^    ~CSemaphoreGrant()$/;"	f	class:CSemaphoreGrant
~CVerifyDB	src/validation.cpp	/^CVerifyDB::~CVerifyDB()$/;"	f	class:CVerifyDB
~CWallet	src/wallet/wallet.h	/^    ~CWallet()$/;"	f	class:final
~CZMQAbstractNotifier	src/zmq/zmqabstractnotifier.cpp	/^CZMQAbstractNotifier::~CZMQAbstractNotifier()$/;"	f	class:CZMQAbstractNotifier
~CZMQNotificationInterface	src/zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface::~CZMQNotificationInterface()$/;"	f	class:CZMQNotificationInterface
~Cache	src/leveldb/util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheTest	src/leveldb/util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~Chain	src/interfaces/chain.h	/^    virtual ~Chain() {}$/;"	f	class:interfaces::Chain
~ChainClient	src/interfaces/chain.h	/^    virtual ~ChainClient() {}$/;"	f	class:interfaces::ChainClient
~ClientModel	src/qt/clientmodel.cpp	/^ClientModel::~ClientModel()$/;"	f	class:ClientModel
~CoinControlDialog	src/qt/coincontroldialog.cpp	/^CoinControlDialog::~CoinControlDialog()$/;"	f	class:CoinControlDialog
~CoinsViewScanReserver	src/rpc/blockchain.cpp	/^    ~CoinsViewScanReserver() {$/;"	f	class:CoinsViewScanReserver
~Compaction	src/leveldb/db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	src/leveldb/util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	src/leveldb/port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~CondVar	src/leveldb/port/port_win.cc	/^CondVar::~CondVar() {$/;"	f	class:leveldb::port::CondVar
~Constructor	src/leveldb/table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	src/leveldb/db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~DB	src/leveldb/db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	src/leveldb/table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	src/leveldb/db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	src/leveldb/db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon29::DBIter
~DBTest	src/leveldb/db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~DisconnectedBlockTransactions	src/txmempool.h	/^    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }$/;"	f	struct:DisconnectedBlockTransactions
~ECCVerifyHandle	src/pubkey.cpp	/^ECCVerifyHandle::~ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
~EditAddressDialog	src/qt/editaddressdialog.cpp	/^EditAddressDialog::~EditAddressDialog()$/;"	f	class:EditAddressDialog
~Env	src/leveldb/util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	src/leveldb/util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FaultInjectionTest	src/leveldb/db/fault_injection_test.cc	/^  ~FaultInjectionTest() {$/;"	f	class:leveldb::FaultInjectionTest
~FaultInjectionTestEnv	src/leveldb/db/fault_injection_test.cc	/^  virtual ~FaultInjectionTestEnv() { }$/;"	f	class:leveldb::FaultInjectionTestEnv
~FileLock	src/fs.cpp	/^FileLock::~FileLock()$/;"	f	class:fsbridge::FileLock
~FileLock	src/leveldb/util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	src/leveldb/helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon35::FileState	file:
~FilterPolicy	src/leveldb/util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	src/leveldb/db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~FrozenCleanupCheck	src/test/checkqueue_tests.cpp	/^    ~FrozenCleanupCheck()$/;"	f	struct:FrozenCleanupCheck
~HTTPClosure	src/httpserver.h	/^    virtual ~HTTPClosure() {}$/;"	f	class:HTTPClosure
~HTTPEvent	src/httpserver.cpp	/^HTTPEvent::~HTTPEvent()$/;"	f	class:HTTPEvent
~HTTPRequest	src/httpserver.cpp	/^HTTPRequest::~HTTPRequest()$/;"	f	class:HTTPRequest
~HandleCallback	src/qt/test/apptests.cpp	/^AppTests::HandleCallback::~HandleCallback()$/;"	f	class:AppTests::HandleCallback
~HandleTable	src/leveldb/util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon4::HandleTable
~Handler	src/interfaces/handler.h	/^    virtual ~Handler() {}$/;"	f	class:interfaces::Handler
~Handler	src/leveldb/db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Harness	src/leveldb/table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~HelpMessageDialog	src/qt/utilitydialog.cpp	/^HelpMessageDialog::~HelpMessageDialog()$/;"	f	class:HelpMessageDialog
~Histogram	src/leveldb/util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~InMemoryEnv	src/leveldb/helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon35::InMemoryEnv
~InitWalletDirTestingSetup	src/wallet/test/init_test_fixture.cpp	/^InitWalletDirTestingSetup::~InitWalletDirTestingSetup()$/;"	f	class:InitWalletDirTestingSetup
~Intro	src/qt/intro.cpp	/^Intro::~Intro()$/;"	f	class:Intro
~Iterator	src/leveldb/table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	src/leveldb/table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	src/leveldb/table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	src/leveldb/util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon4::LRUCache
~ListCoinsTestingSetup	src/wallet/test/wallet_tests.cpp	/^    ~ListCoinsTestingSetup()$/;"	f	class:ListCoinsTestingSetup
~Lock	src/interfaces/chain.h	/^        virtual ~Lock() {}$/;"	f	class:interfaces::Chain::Lock
~LockData	src/sync.cpp	/^    ~LockData() { available = false; }$/;"	f	struct:LockData
~LockedPageAllocator	src/support/lockedpool.h	/^    virtual ~LockedPageAllocator() {}$/;"	f	class:LockedPageAllocator
~LockedPageArena	src/support/lockedpool.cpp	/^LockedPool::LockedPageArena::~LockedPageArena()$/;"	f	class:LockedPool::LockedPageArena
~LockedPool	src/support/lockedpool.cpp	/^LockedPool::~LockedPool()$/;"	f	class:LockedPool
~LogTest	src/leveldb/db/log_test.cc	/^  ~LogTest() {$/;"	f	class:leveldb::log::LogTest
~Logger	src/leveldb/util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	src/leveldb/db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemEnvTest	src/leveldb/helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() {$/;"	f	class:leveldb::MemEnvTest
~MemTable	src/leveldb/db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	src/leveldb/table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MemoryCheck	src/test/checkqueue_tests.cpp	/^    ~MemoryCheck()$/;"	f	struct:MemoryCheck
~MergingIterator	src/leveldb/table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon11::MergingIterator
~ModalOverlay	src/qt/modaloverlay.cpp	/^ModalOverlay::~ModalOverlay()$/;"	f	class:ModalOverlay
~ModelDB	src/leveldb/db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	src/leveldb/db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	src/leveldb/port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~Mutex	src/leveldb/port/port_win.cc	/^Mutex::~Mutex() {$/;"	f	class:leveldb::port::Mutex
~Node	src/interfaces/node.h	/^    virtual ~Node() {}$/;"	f	class:interfaces::Node
~Notifications	src/interfaces/chain.h	/^        virtual ~Notifications() {}$/;"	f	class:interfaces::Chain::Notifications
~Notificator	src/qt/notificator.cpp	/^Notificator::~Notificator()$/;"	f	class:Notificator
~OpenURIDialog	src/qt/openuridialog.cpp	/^OpenURIDialog::~OpenURIDialog()$/;"	f	class:OpenURIDialog
~OptionsDialog	src/qt/optionsdialog.cpp	/^OptionsDialog::~OptionsDialog()$/;"	f	class:OptionsDialog
~OverviewPage	src/qt/overviewpage.cpp	/^OverviewPage::~OverviewPage()$/;"	f	class:OverviewPage
~PaymentServer	src/qt/paymentserver.cpp	/^PaymentServer::~PaymentServer()$/;"	f	class:PaymentServer
~PeerTableModel	src/qt/peertablemodel.cpp	/^PeerTableModel::~PeerTableModel()$/;"	f	class:PeerTableModel
~PendingWalletTx	src/interfaces/wallet.h	/^    virtual ~PendingWalletTx() {}$/;"	f	class:interfaces::PendingWalletTx
~PosixEnv	src/leveldb/util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon8::PosixEnv
~PosixLogger	src/leveldb/util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapReadableFile	src/leveldb/util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() {$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
~PosixRandomAccessFile	src/leveldb/util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() {$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
~PosixSequentialFile	src/leveldb/util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon8::PosixSequentialFile
~PosixWritableFile	src/leveldb/util/env_posix.cc	/^  ~PosixWritableFile() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
~Printer	src/bench/bench.h	/^    virtual ~Printer() {}$/;"	f	class:benchmark::Printer
~QtRPCTimerBase	src/qt/rpcconsole.cpp	/^    ~QtRPCTimerBase() {}$/;"	f	class:QtRPCTimerBase
~QtRPCTimerInterface	src/qt/rpcconsole.cpp	/^    ~QtRPCTimerInterface() {}$/;"	f	class:QtRPCTimerInterface
~RNGState	src/random.cpp	/^    ~RNGState()$/;"	f	class:__anon61::RNGState
~RPCCommandExecution	src/rpc/server.cpp	/^    ~RPCCommandExecution()$/;"	f	struct:RPCCommandExecution
~RPCConsole	src/qt/rpcconsole.cpp	/^RPCConsole::~RPCConsole()$/;"	f	class:RPCConsole
~RPCTimerBase	src/rpc/server.h	/^    virtual ~RPCTimerBase() {}$/;"	f	class:RPCTimerBase
~RPCTimerInterface	src/rpc/server.h	/^    virtual ~RPCTimerInterface() {}$/;"	f	class:RPCTimerInterface
~RandomAccessFile	src/leveldb/util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
~Reader	src/leveldb/db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~ReceiveCoinsDialog	src/qt/receivecoinsdialog.cpp	/^ReceiveCoinsDialog::~ReceiveCoinsDialog()$/;"	f	class:ReceiveCoinsDialog
~ReceiveRequestDialog	src/qt/receiverequestdialog.cpp	/^ReceiveRequestDialog::~ReceiveRequestDialog()$/;"	f	class:ReceiveRequestDialog
~RecentRequestsTableModel	src/qt/recentrequeststablemodel.cpp	/^RecentRequestsTableModel::~RecentRequestsTableModel()$/;"	f	class:RecentRequestsTableModel
~RecoveryTest	src/leveldb/db/recovery_test.cc	/^  ~RecoveryTest() {$/;"	f	class:leveldb::RecoveryTest
~Rep	src/leveldb/table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	src/leveldb/db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon30::Repairer
~Reporter	src/leveldb/db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~SafeDbt	src/wallet/db.cpp	/^BerkeleyBatch::SafeDbt::~SafeDbt()$/;"	f	class:BerkeleyBatch::SafeDbt
~Secp256k1Init	src/bitcoin-tx.cpp	/^    ~Secp256k1Init() {$/;"	f	class:Secp256k1Init
~SendCoinsDialog	src/qt/sendcoinsdialog.cpp	/^SendCoinsDialog::~SendCoinsDialog()$/;"	f	class:SendCoinsDialog
~SendCoinsEntry	src/qt/sendcoinsentry.cpp	/^SendCoinsEntry::~SendCoinsEntry()$/;"	f	class:SendCoinsEntry
~SequentialFile	src/leveldb/util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
~ShardedLRUCache	src/leveldb/util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon4::ShardedLRUCache
~SignVerifyMessageDialog	src/qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::~SignVerifyMessageDialog()$/;"	f	class:SignVerifyMessageDialog
~SigningProvider	src/script/sign.h	/^    virtual ~SigningProvider() {}$/;"	f	class:SigningProvider
~Snapshot	src/leveldb/db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~SplashScreen	src/qt/splashscreen.cpp	/^SplashScreen::~SplashScreen()$/;"	f	class:SplashScreen
~Status	src/leveldb/include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~StringSink	src/leveldb/table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	src/leveldb/table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Table	src/leveldb/table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	src/leveldb/table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	src/leveldb/db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	src/leveldb/table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~TestChain100Setup	src/test/setup_common.cpp	/^TestChain100Setup::~TestChain100Setup()$/;"	f	class:TestChain100Setup
~TestWritableFile	src/leveldb/db/fault_injection_test.cc	/^TestWritableFile::~TestWritableFile() {$/;"	f	class:leveldb::TestWritableFile
~Tester	src/leveldb/util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~TestingSetup	src/test/setup_common.cpp	/^TestingSetup::~TestingSetup()$/;"	f	class:TestingSetup
~TorControlConnection	src/torcontrol.cpp	/^TorControlConnection::~TorControlConnection()$/;"	f	class:TorControlConnection
~TorController	src/torcontrol.cpp	/^TorController::~TorController()$/;"	f	class:TorController
~TransactionDescDialog	src/qt/transactiondescdialog.cpp	/^TransactionDescDialog::~TransactionDescDialog()$/;"	f	class:TransactionDescDialog
~TransactionTableModel	src/qt/transactiontablemodel.cpp	/^TransactionTableModel::~TransactionTableModel()$/;"	f	class:TransactionTableModel
~TwoLevelIterator	src/leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
~TxIndex	src/index/txindex.cpp	/^TxIndex::~TxIndex() {}$/;"	f	class:TxIndex
~UniValue	src/univalue/include/univalue.h	/^    ~UniValue() {}$/;"	f	class:UniValue
~UnlockContext	src/qt/walletmodel.cpp	/^WalletModel::UnlockContext::~UnlockContext()$/;"	f	class:WalletModel::UnlockContext
~Version	src/leveldb/db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionBitsTester	src/test/versionbits_tests.cpp	/^    ~VersionBitsTester() {$/;"	f	class:VersionBitsTester
~VersionEdit	src/leveldb/db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	src/leveldb/db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~Wallet	src/interfaces/wallet.h	/^    virtual ~Wallet() {}$/;"	f	class:interfaces::Wallet
~WalletController	src/qt/walletcontroller.cpp	/^WalletController::~WalletController()$/;"	f	class:WalletController
~WalletFrame	src/qt/walletframe.cpp	/^WalletFrame::~WalletFrame()$/;"	f	class:WalletFrame
~WalletInitInterface	src/walletinitinterface.h	/^    virtual ~WalletInitInterface() {}$/;"	f	class:WalletInitInterface
~WalletModel	src/qt/walletmodel.cpp	/^WalletModel::~WalletModel()$/;"	f	class:WalletModel
~WalletRescanReserver	src/wallet/wallet.h	/^    ~WalletRescanReserver()$/;"	f	class:WalletRescanReserver
~WalletView	src/qt/walletview.cpp	/^WalletView::~WalletView()$/;"	f	class:WalletView
~Win32Env	src/leveldb/util/env_win.cc	/^Win32Env::~Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
~Win32FileLock	src/leveldb/util/env_win.cc	/^Win32FileLock::~Win32FileLock()$/;"	f	class:leveldb::Win32::Win32FileLock
~Win32Logger	src/leveldb/util/env_win.cc	/^Win32Logger::~Win32Logger()$/;"	f	class:leveldb::Win32::Win32Logger
~Win32RandomAccessFile	src/leveldb/util/env_win.cc	/^Win32RandomAccessFile::~Win32RandomAccessFile()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
~Win32SequentialFile	src/leveldb/util/env_win.cc	/^Win32SequentialFile::~Win32SequentialFile()$/;"	f	class:leveldb::Win32::Win32SequentialFile
~Win32WritableFile	src/leveldb/util/env_win.cc	/^Win32WritableFile::~Win32WritableFile()$/;"	f	class:leveldb::Win32::Win32WritableFile
~WinCmdLineArgs	src/util/system.cpp	/^WinCmdLineArgs::~WinCmdLineArgs()$/;"	f	class:util::WinCmdLineArgs
~WorkQueue	src/httpserver.cpp	/^    ~WorkQueue()$/;"	f	class:WorkQueue
~WritableFile	src/leveldb/util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	src/leveldb/helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon35::WritableFileImpl
~WriteBatch	src/leveldb/db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	src/leveldb/db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~ifstream	src/fs.h	/^        ~ifstream() { close(); }$/;"	f	class:fsbridge::ifstream
~leveldb_comparator_t	src/leveldb/db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	src/leveldb/db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
~ofstream	src/fs.h	/^        ~ofstream() { close(); }$/;"	f	class:fsbridge::ofstream
~prevector	src/prevector.h	/^    ~prevector() {$/;"	f	class:prevector
~prevector_tester	src/test/prevector_tests.cpp	/^    ~prevector_tester() {$/;"	f	class:prevector_tester
~reverse_lock	src/reverselock.h	/^    ~reverse_lock() {$/;"	f	class:reverse_lock
