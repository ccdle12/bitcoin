!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABANDON_HASH	./wallet/wallet.h	/^    static const uint256 ABANDON_HASH;$/;"	m	class:CMerkleTx
ABSENT	./test/coins_tests.cpp	/^const static CAmount ABSENT = -2;$/;"	v	file:
ABSENT_FLAGS	./test/coins_tests.cpp	/^const static auto ABSENT_FLAGS = {NO_ENTRY};$/;"	v	file:
ACLOCAL	./Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL	./secp256k1/Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL	./univalue/Makefile	/^ACLOCAL = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing aclocal-1.16$/;"	m
ACLOCAL_AMFLAGS	./secp256k1/Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_AMFLAGS	./univalue/Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_M4	./Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	./secp256k1/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	./univalue/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACQUIRED_AFTER	./threadsafety.h	/^#define ACQUIRED_AFTER(/;"	d
ACQUIRED_BEFORE	./threadsafety.h	/^#define ACQUIRED_BEFORE(/;"	d
ACTIVE	./versionbits.h	/^    ACTIVE,$/;"	m	class:ThresholdState
ADDR	./protocol.cpp	/^const char *ADDR="addr";$/;"	m	namespace:NetMsgType	file:
ADDRESS_BCRT1_UNSPENDABLE	./test/util.cpp	/^const std::string ADDRESS_BCRT1_UNSPENDABLE = "bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj";$/;"	v
ADDRESS_COLUMN_WIDTH	./qt/rpcconsole.h	/^        ADDRESS_COLUMN_WIDTH = 200,$/;"	e	enum:RPCConsole::ColumnWidths
ADDRMAN_BUCKET_SIZE	./addrman.h	/^#define ADDRMAN_BUCKET_SIZE /;"	d
ADDRMAN_BUCKET_SIZE_LOG2	./addrman.h	/^#define ADDRMAN_BUCKET_SIZE_LOG2 /;"	d
ADDRMAN_GETADDR_MAX	./addrman.h	/^#define ADDRMAN_GETADDR_MAX /;"	d
ADDRMAN_GETADDR_MAX_PCT	./addrman.h	/^#define ADDRMAN_GETADDR_MAX_PCT /;"	d
ADDRMAN_HORIZON_DAYS	./addrman.h	/^#define ADDRMAN_HORIZON_DAYS /;"	d
ADDRMAN_MAX_FAILURES	./addrman.h	/^#define ADDRMAN_MAX_FAILURES /;"	d
ADDRMAN_MIN_FAIL_DAYS	./addrman.h	/^#define ADDRMAN_MIN_FAIL_DAYS /;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	./addrman.h	/^#define ADDRMAN_NEW_BUCKETS_PER_ADDRESS /;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	./addrman.h	/^#define ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP /;"	d
ADDRMAN_NEW_BUCKET_COUNT	./addrman.h	/^#define ADDRMAN_NEW_BUCKET_COUNT /;"	d
ADDRMAN_NEW_BUCKET_COUNT_LOG2	./addrman.h	/^#define ADDRMAN_NEW_BUCKET_COUNT_LOG2 /;"	d
ADDRMAN_REPLACEMENT_HOURS	./addrman.h	/^#define ADDRMAN_REPLACEMENT_HOURS /;"	d
ADDRMAN_RETRIES	./addrman.h	/^#define ADDRMAN_RETRIES /;"	d
ADDRMAN_SET_TRIED_COLLISION_SIZE	./addrman.h	/^#define ADDRMAN_SET_TRIED_COLLISION_SIZE /;"	d
ADDRMAN_TEST_WINDOW	./addrman.h	/^static const int64_t ADDRMAN_TEST_WINDOW = 40*60; \/\/ 40 minutes$/;"	v
ADDRMAN_TRIED_BUCKETS_PER_GROUP	./addrman.h	/^#define ADDRMAN_TRIED_BUCKETS_PER_GROUP /;"	d
ADDRMAN_TRIED_BUCKET_COUNT	./addrman.h	/^#define ADDRMAN_TRIED_BUCKET_COUNT /;"	d
ADDRMAN_TRIED_BUCKET_COUNT_LOG2	./addrman.h	/^#define ADDRMAN_TRIED_BUCKET_COUNT_LOG2 /;"	d
ADD_SERIALIZE_METHODS	./addrdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBanEntry
ADD_SERIALIZE_METHODS	./addrman.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddrInfo
ADD_SERIALIZE_METHODS	./blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactions
ADD_SERIALIZE_METHODS	./blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactionsRequest
ADD_SERIALIZE_METHODS	./blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeaderAndShortTxIDs
ADD_SERIALIZE_METHODS	./blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:PrefilledTransaction
ADD_SERIALIZE_METHODS	./blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:TransactionCompressor
ADD_SERIALIZE_METHODS	./bloom.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBloomFilter
ADD_SERIALIZE_METHODS	./chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockFileInfo
ADD_SERIALIZE_METHODS	./chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CDiskBlockIndex
ADD_SERIALIZE_METHODS	./compressor.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOutCompressor
ADD_SERIALIZE_METHODS	./flatfile.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:FlatFilePos
ADD_SERIALIZE_METHODS	./index/blockfilterindex.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:__anon120::DBHashKey	file:
ADD_SERIALIZE_METHODS	./index/blockfilterindex.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:__anon120::DBVal	file:
ADD_SERIALIZE_METHODS	./index/txindex.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskTxPos	file:
ADD_SERIALIZE_METHODS	./merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleBlock
ADD_SERIALIZE_METHODS	./merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CPartialMerkleTree
ADD_SERIALIZE_METHODS	./netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CNetAddr
ADD_SERIALIZE_METHODS	./netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CService
ADD_SERIALIZE_METHODS	./netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CSubNet
ADD_SERIALIZE_METHODS	./policy/feerate.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CFeeRate
ADD_SERIALIZE_METHODS	./primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlock
ADD_SERIALIZE_METHODS	./primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeader
ADD_SERIALIZE_METHODS	./primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CBlockLocator
ADD_SERIALIZE_METHODS	./primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:COutPoint
ADD_SERIALIZE_METHODS	./primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxIn
ADD_SERIALIZE_METHODS	./primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOut
ADD_SERIALIZE_METHODS	./protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddress
ADD_SERIALIZE_METHODS	./protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CInv
ADD_SERIALIZE_METHODS	./protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMessageHeader
ADD_SERIALIZE_METHODS	./qt/recentrequeststablemodel.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:RecentRequestEntry
ADD_SERIALIZE_METHODS	./qt/walletmodel.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:SendCoinsRecipient
ADD_SERIALIZE_METHODS	./rest.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CCoin	file:
ADD_SERIALIZE_METHODS	./script/script.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CScript
ADD_SERIALIZE_METHODS	./script/sign.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:KeyOriginInfo
ADD_SERIALIZE_METHODS	./serialize.h	/^#define ADD_SERIALIZE_METHODS /;"	d
ADD_SERIALIZE_METHODS	./test/blockencodings_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:TestHeaderAndShortIDs	file:
ADD_SERIALIZE_METHODS	./test/dbwrapper_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:StringContentsSerializer	file:
ADD_SERIALIZE_METHODS	./test/serialize_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CSerializeMethodsTestSingle	file:
ADD_SERIALIZE_METHODS	./undo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockUndo
ADD_SERIALIZE_METHODS	./wallet/crypter.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMasterKey
ADD_SERIALIZE_METHODS	./wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyPool
ADD_SERIALIZE_METHODS	./wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleTx
ADD_SERIALIZE_METHODS	./wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CWalletKey
ADD_SERIALIZE_METHODS	./wallet/walletdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CHDChain
ADD_SERIALIZE_METHODS	./wallet/walletdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyMetadata
ADD_SIGNALS_DECL_WRAPPER	./ui_interface.h	/^#define ADD_SIGNALS_DECL_WRAPPER(/;"	d
ADD_SIGNALS_IMPL_WRAPPER	./ui_interface.cpp	/^#define ADD_SIGNALS_IMPL_WRAPPER(/;"	d	file:
AES128_ctx	./crypto/ctaes/ctaes.h	/^} AES128_ctx;$/;"	t	typeref:struct:__anon46
AES128_decrypt	./crypto/ctaes/ctaes.c	/^void AES128_decrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES128_encrypt	./crypto/ctaes/ctaes.c	/^void AES128_encrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES128_init	./crypto/ctaes/ctaes.c	/^void AES128_init(AES128_ctx* ctx, const unsigned char* key16) {$/;"	f
AES192_ctx	./crypto/ctaes/ctaes.h	/^} AES192_ctx;$/;"	t	typeref:struct:__anon47
AES192_decrypt	./crypto/ctaes/ctaes.c	/^void AES192_decrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES192_encrypt	./crypto/ctaes/ctaes.c	/^void AES192_encrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES192_init	./crypto/ctaes/ctaes.c	/^void AES192_init(AES192_ctx* ctx, const unsigned char* key24) {$/;"	f
AES256CBCDecrypt	./crypto/aes.cpp	/^AES256CBCDecrypt::AES256CBCDecrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES256CBCDecrypt
AES256CBCDecrypt	./crypto/aes.h	/^class AES256CBCDecrypt$/;"	c
AES256CBCEncrypt	./crypto/aes.cpp	/^AES256CBCEncrypt::AES256CBCEncrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES256CBCEncrypt
AES256CBCEncrypt	./crypto/aes.h	/^class AES256CBCEncrypt$/;"	c
AES256Decrypt	./crypto/aes.cpp	/^AES256Decrypt::AES256Decrypt(const unsigned char key[32])$/;"	f	class:AES256Decrypt
AES256Decrypt	./crypto/aes.h	/^class AES256Decrypt$/;"	c
AES256Encrypt	./crypto/aes.cpp	/^AES256Encrypt::AES256Encrypt(const unsigned char key[32])$/;"	f	class:AES256Encrypt
AES256Encrypt	./crypto/aes.h	/^class AES256Encrypt$/;"	c
AES256_KEYSIZE	./crypto/aes.h	/^static const int AES256_KEYSIZE = 32;$/;"	v
AES256_ctx	./crypto/ctaes/ctaes.h	/^} AES256_ctx;$/;"	t	typeref:struct:__anon48
AES256_decrypt	./crypto/ctaes/ctaes.c	/^void AES256_decrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES256_encrypt	./crypto/ctaes/ctaes.c	/^void AES256_encrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES256_init	./crypto/ctaes/ctaes.c	/^void AES256_init(AES256_ctx* ctx, const unsigned char* key32) {$/;"	f
AES_BLOCKSIZE	./crypto/aes.h	/^static const int AES_BLOCKSIZE = 16;$/;"	v
AES_decrypt	./crypto/ctaes/ctaes.c	/^static void AES_decrypt(const AES_state* rounds, int nrounds, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f	file:
AES_encrypt	./crypto/ctaes/ctaes.c	/^static void AES_encrypt(const AES_state* rounds, int nrounds, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f	file:
AES_setup	./crypto/ctaes/ctaes.c	/^static void AES_setup(AES_state* rounds, const uint8_t* key, int nkeywords, int nrounds)$/;"	f	file:
AES_state	./crypto/ctaes/ctaes.h	/^} AES_state;$/;"	t	typeref:struct:__anon45
ALL_TYPES	./qt/transactionfilterproxy.h	/^    static const quint32 ALL_TYPES = 0xFFFFFFFF;$/;"	m	class:TransactionFilterProxy
ALREADY_IN_CHAIN	./util/error.h	/^    ALREADY_IN_CHAIN,$/;"	m	class:TransactionError
ALWAYS_ACTIVE	./consensus/params.h	/^    static constexpr int64_t ALWAYS_ACTIVE = -1;$/;"	m	struct:Consensus::BIP9Deployment
AMOUNT	./rpc/util.h	/^        AMOUNT,        \/\/!< Special type representing a floating point amount (can be either NUM or STR)$/;"	m	class:RPCArg::Type
AMOUNTTYPE_ENUM_ELEMENTS	./wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
AMOUNT_MINIMUM_COLUMN_WIDTH	./qt/receivecoinsdialog.h	/^        AMOUNT_MINIMUM_COLUMN_WIDTH = 180,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
AMOUNT_MINIMUM_COLUMN_WIDTH	./qt/transactionview.h	/^        AMOUNT_MINIMUM_COLUMN_WIDTH = 120,$/;"	e	enum:TransactionView::ColumnWidths
AMTAR	./Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	./secp256k1/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	./univalue/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	./Makefile	/^AM_CPPFLAGS = $(DEBUG_CPPFLAGS) $(HARDENED_CPPFLAGS)$/;"	m
AM_CXXFLAGS	./Makefile	/^AM_CXXFLAGS = $(DEBUG_CXXFLAGS) $(HARDENED_CXXFLAGS) $(WARN_CXXFLAGS) $(NOWARN_CXXFLAGS) $(ERROR_CXXFLAGS) $(GPROF_CXXFLAGS) $(SANITIZER_CXXFLAGS)$/;"	m
AM_DEFAULT_VERBOSITY	./Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	./secp256k1/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	./univalue/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_LDFLAGS	./Makefile	/^AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS) \\$/;"	m
AM_LIBTOOLFLAGS	./Makefile	/^AM_LIBTOOLFLAGS = --preserve-dup-deps$/;"	m
AM_RECURSIVE_TARGETS	./Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	./secp256k1/Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_RECURSIVE_TARGETS	./univalue/Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_V_AR	./Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	./Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CC	./secp256k1/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCAS	./secp256k1/Makefile	/^AM_V_CCAS = $(am__v_CCAS_$(V))$/;"	m
AM_V_CCLD	./Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CCLD	./secp256k1/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	./Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXX	./univalue/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	./Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_CXXLD	./univalue/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	./Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	./secp256k1/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	./univalue/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_OBJCXX	./Makefile	/^AM_V_OBJCXX = $(am__v_OBJCXX_$(V))$/;"	m
AM_V_OBJCXXLD	./Makefile	/^AM_V_OBJCXXLD = $(am__v_OBJCXXLD_$(V))$/;"	m
AM_V_P	./Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	./secp256k1/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	./univalue/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	./Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	./secp256k1/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	./univalue/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	./Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	./secp256k1/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	./univalue/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	./Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	./leveldb/Makefile	/^AR=xcrun ar$/;"	m
AR	./secp256k1/Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	./univalue/Makefile	/^AR = ar$/;"	m
ARCH_CPU_ARM64_FAMILY	./leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_ARM64_FAMILY /;"	d
ARCH_CPU_ARM64_FAMILY	./leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_ARM64_FAMILY$/;"	d
ARCH_CPU_ARM_FAMILY	./leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_ARM_FAMILY /;"	d
ARCH_CPU_ARM_FAMILY	./leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_ARM_FAMILY$/;"	d
ARCH_CPU_MIPS_FAMILY	./leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_MIPS_FAMILY /;"	d
ARCH_CPU_PPC_FAMILY	./leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_PPC_FAMILY /;"	d
ARCH_CPU_PPC_FAMILY	./leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_PPC_FAMILY$/;"	d
ARCH_CPU_X86_FAMILY	./leveldb/port/atomic_pointer.h	/^#define ARCH_CPU_X86_FAMILY /;"	d
ARCH_CPU_X86_FAMILY	./leveldb/port/atomic_pointer.h	/^#undef ARCH_CPU_X86_FAMILY$/;"	d
ARENA_ALIGN	./support/lockedpool.h	/^    static const size_t ARENA_ALIGN = 16;$/;"	m	class:LockedPool
ARENA_SIZE	./support/lockedpool.h	/^    static const size_t ARENA_SIZE = 256*1024;$/;"	m	class:LockedPool
ARFLAGS	./Makefile	/^ARFLAGS = cr$/;"	m
ARG_CHECK	./secp256k1/src/secp256k1.c	/^#define ARG_CHECK(/;"	d	file:
ARR	./rpc/util.cpp	/^        ARR,$/;"	m	class:Sections::OuterType	file:
ARR	./rpc/util.h	/^        ARR,$/;"	m	class:RPCArg::Type
ARRAYLEN	./util/strencodings.h	/^#define ARRAYLEN(/;"	d
ARRAY_SIZE	./univalue/test/unitester.cpp	/^#define ARRAY_SIZE(/;"	d	file:
ASIZE	./bench/lockedpool.cpp	/^#define ASIZE /;"	d	file:
ASSERT_EQ	./leveldb/util/testharness.h	/^#define ASSERT_EQ(/;"	d
ASSERT_EXCLUSIVE_LOCK	./sync.h	/^void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}$/;"	f
ASSERT_EXCLUSIVE_LOCK	./threadsafety.h	/^#define ASSERT_EXCLUSIVE_LOCK(/;"	d
ASSERT_GE	./leveldb/util/testharness.h	/^#define ASSERT_GE(/;"	d
ASSERT_GT	./leveldb/util/testharness.h	/^#define ASSERT_GT(/;"	d
ASSERT_LE	./leveldb/util/testharness.h	/^#define ASSERT_LE(/;"	d
ASSERT_LT	./leveldb/util/testharness.h	/^#define ASSERT_LT(/;"	d
ASSERT_NE	./leveldb/util/testharness.h	/^#define ASSERT_NE(/;"	d
ASSERT_OK	./leveldb/util/testharness.h	/^#define ASSERT_OK(/;"	d
ASSERT_TRUE	./leveldb/util/testharness.h	/^#define ASSERT_TRUE(/;"	d
ASYMP_UTF8	./qt/coincontroldialog.h	/^#define ASYMP_UTF8 /;"	d
ATYPEUNSUPPORTED	./netbase.cpp	/^    ATYPEUNSUPPORTED = 0x08, \/\/!< Address type not supported$/;"	e	enum:uint8_t	file:
AUTOCONF	./Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoconf$/;"	m
AUTOCONF	./secp256k1/Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing autoconf$/;"	m
AUTOCONF	./univalue/Makefile	/^AUTOCONF = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing autoconf$/;"	m
AUTOHEADER	./Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	./secp256k1/Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	./univalue/Makefile	/^AUTOHEADER = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing autoheader$/;"	m
AUTOMAKE	./Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing automake-1.16$/;"	m
AUTOMAKE	./secp256k1/Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing automake-1.16$/;"	m
AUTOMAKE	./univalue/Makefile	/^AUTOMAKE = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing automake-1.16$/;"	m
AVAILABLE_CREDIT	./wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
AVG_ADDRESS_BROADCAST_INTERVAL	./net_processing.cpp	/^static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;$/;"	v	file:
AVG_FEEFILTER_BROADCAST_INTERVAL	./net_processing.cpp	/^static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;$/;"	v	file:
AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL	./net_processing.cpp	/^static constexpr unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 60 * 60;$/;"	v	file:
AVX2_CXXFLAGS	./Makefile	/^AVX2_CXXFLAGS = -mavx -mavx2$/;"	m
AVXEnabled	./crypto/sha256.cpp	/^bool AVXEnabled()$/;"	f	namespace:__anon40
AWK	./Makefile	/^AWK = awk$/;"	m
AWK	./secp256k1/Makefile	/^AWK = awk$/;"	m
AWK	./univalue/Makefile	/^AWK = awk$/;"	m
Abandon	./leveldb/table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
AbandonTransaction	./wallet/wallet.cpp	/^bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const uint256& hashTx)$/;"	f	class:CWallet
Abandoned	./qt/transactionrecord.h	/^        Abandoned,          \/**< Abandoned from the wallet **\/$/;"	e	enum:TransactionStatus::Status
AbortNode	./validation.cpp	/^static bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage="")$/;"	f	file:
AbortNode	./validation.cpp	/^static bool AbortNode(const std::string& strMessage, const std::string& userMessage="")$/;"	f	file:
AbortRescan	./wallet/wallet.h	/^    void AbortRescan() { fAbortRescan = true; }$/;"	f	class:final
AbortShutdown	./shutdown.cpp	/^void AbortShutdown()$/;"	f
AbsPathForConfigVal	./util/system.cpp	/^fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)$/;"	f
AbstractThresholdConditionChecker	./versionbits.h	/^class AbstractThresholdConditionChecker {$/;"	c
AbsurdFee	./qt/walletmodel.h	/^        AbsurdFee,$/;"	e	enum:WalletModel::StatusCode
AcceleratedCRC32C	./leveldb/port/port_posix_sse.cc	/^uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::port
AcceptBlock	./validation.cpp	/^bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)$/;"	f	class:CChainState
AcceptBlockHeader	./validation.cpp	/^bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)$/;"	f	class:CChainState
AcceptConnection	./net.cpp	/^void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {$/;"	f	class:CConnman
AcceptToMemoryPool	./validation.cpp	/^bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,$/;"	f
AcceptToMemoryPool	./wallet/wallet.cpp	/^bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state)$/;"	f	class:CWalletTx
AccessByTxid	./coins.cpp	/^const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)$/;"	f
AccessCoin	./coins.cpp	/^const Coin& CCoinsViewCache::AccessCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
Acquire	./leveldb/util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon8::Limiter
Acquire	./sync.h	/^    void Acquire()$/;"	f	class:CSemaphoreGrant
AcquireLoad	./leveldb/db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Acquire_Load	./leveldb/port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Acquire_Load	./leveldb/port/port_win.cc	/^void* AtomicPointer::Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Action	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	g	struct:ChainMergeTestingSetup	file:
Action	./test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	g	struct:ArgsMergeTestingSetup	file:
ActivateBestChain	./validation.cpp	/^bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {$/;"	f
ActivateBestChain	./validation.cpp	/^bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {$/;"	f	class:CChainState
ActivateBestChainStep	./validation.cpp	/^bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)$/;"	f	class:CChainState
Add	./addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	./addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	./checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueue
Add	./checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueueControl
Add	./crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y) { return _mm256_add_epi32(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	./crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y, __m256i z) { return Add(Add(x, y), z); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	./crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w) { return Add(Add(x, y), Add(z, w)); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	./crypto/sha256_avx2.cpp	/^__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w, __m256i v) { return Add(Add(x, y, z), Add(w, v)); }$/;"	f	namespace:sha256d64_avx2::__anon37
Add	./crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y) { return _mm_add_epi32(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	./crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y, __m128i z) { return Add(Add(x, y), z); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	./crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y, __m128i z, __m128i w) { return Add(Add(x, y), Add(z, w)); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	./crypto/sha256_sse41.cpp	/^__m128i inline Add(__m128i x, __m128i y, __m128i z, __m128i w, __m128i v) { return Add(Add(x, y, z), Add(w, v)); }$/;"	f	namespace:sha256d64_sse41::__anon41
Add	./leveldb/db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	./leveldb/db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	./leveldb/db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	./leveldb/table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	./leveldb/table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	./leveldb/table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	./leveldb/table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	./leveldb/util/bloom_test.cc	/^  void Add(const Slice& s) {$/;"	f	class:leveldb::BloomTest
Add	./leveldb/util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
Add	./test/script_tests.cpp	/^    TestBuilder& Add(const CScript& _script)$/;"	f	class:__anon58::TestBuilder
AddAddressKnown	./net.h	/^    void AddAddressKnown(const CAddress& _addr)$/;"	f	class:CNode
AddAndGetDestinationForScript	./outputtype.cpp	/^CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType type)$/;"	f
AddArg	./util/system.cpp	/^void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)$/;"	f	class:ArgsManager
AddArgs	./util/system.cpp	/^    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)$/;"	f	class:ArgsManagerHelper
AddBlock	./chain.h	/^     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {$/;"	f	class:CBlockFileInfo
AddBytes	./leveldb/db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon19::Stats
AddCScript	./keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	./wallet/wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddChecksum	./script/descriptor.cpp	/^std::string AddChecksum(const std::string& str) { return str + "#" + DescriptorChecksum(MakeSpan(str)); }$/;"	f	namespace:__anon75
AddCoin	./coins.cpp	/^void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {$/;"	f	class:CCoinsViewCache
AddCoins	./coins.cpp	/^void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check) {$/;"	f
AddCryptedKey	./wallet/crypter.cpp	/^bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CCryptoKeyStore
AddCryptedKey	./wallet/wallet.cpp	/^bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,$/;"	f	class:CWallet
AddDestData	./wallet/wallet.cpp	/^bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)$/;"	f	class:CWallet
AddFile	./leveldb/db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddHiddenArgs	./util/system.cpp	/^void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)$/;"	f	class:ArgsManager
AddInput	./psbt.cpp	/^bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)$/;"	f	class:PartiallySignedTransaction
AddInputDeletions	./leveldb/db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddInventoryKnown	./net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddIterators	./leveldb/db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	./keystore.h	/^    bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }$/;"	f	class:CBasicKeyStore
AddKey	./leveldb/table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddKey	./wallet/test/wallet_tests.cpp	/^static void AddKey(CWallet& wallet, const CKey& key)$/;"	f	file:
AddKeyOrigin	./wallet/wallet.cpp	/^bool CWallet::AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info)$/;"	f	class:CWallet
AddKeyPubKey	./keystore.cpp	/^bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CBasicKeyStore
AddKeyPubKey	./wallet/crypter.cpp	/^bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CCryptoKeyStore
AddKeyPubKey	./wallet/wallet.cpp	/^bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)$/;"	f	class:CWallet
AddKeyPubKeyWithDB	./wallet/wallet.cpp	/^bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)$/;"	f	class:CWallet
AddKeypoolPubkey	./wallet/wallet.cpp	/^void CWallet::AddKeypoolPubkey(const CPubKey& pubkey, const bool internal)$/;"	f	class:CWallet
AddKeypoolPubkeyWithDB	./wallet/wallet.cpp	/^void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)$/;"	f	class:CWallet
AddLiveFiles	./leveldb/db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddLocal	./net.cpp	/^bool AddLocal(const CNetAddr &addr, int nScore)$/;"	f
AddLocal	./net.cpp	/^bool AddLocal(const CService& addr, int nScore)$/;"	f
AddMessage	./leveldb/db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon19::Stats
AddNewAddresses	./net.cpp	/^void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty)$/;"	f	class:CConnman
AddNode	./net.cpp	/^bool CConnman::AddNode(const std::string& strNode)$/;"	f	class:CConnman
AddNode	./test/denialofservice_tests.cpp	/^    void AddNode(CNode& node)$/;"	f	struct:CConnmanTest
AddOneShot	./net.cpp	/^void CConnman::AddOneShot(const std::string& strDest)$/;"	f	class:CConnman
AddOutput	./psbt.cpp	/^bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput& psbtout)$/;"	f	class:PartiallySignedTransaction
AddRandomOutboundPeer	./test/denialofservice_tests.cpp	/^static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic, CConnmanTest* connman)$/;"	f	file:
AddRecord	./leveldb/db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AddRef	./net.h	/^    CNode* AddRef()$/;"	f	class:CNode
AddRoundKey	./crypto/ctaes/ctaes.c	/^static void AddRoundKey(AES_state* s, const AES_state* round) {$/;"	f	file:
AddTimeData	./timedata.cpp	/^void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)$/;"	f
AddToBlock	./miner.cpp	/^void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)$/;"	f	class:BlockAssembler
AddToBlockIndex	./validation.cpp	/^CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)$/;"	f	class:CChainState
AddToProcessQueue	./scheduler.cpp	/^void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void ()> func) {$/;"	f	class:SingleThreadedSchedulerClient
AddToSpends	./wallet/wallet.cpp	/^void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)$/;"	f	class:CWallet
AddToSpends	./wallet/wallet.cpp	/^void CWallet::AddToSpends(const uint256& wtxid)$/;"	f	class:CWallet
AddToWallet	./wallet/wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	./wallet/wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const uint256& block_hash, int posInBlock, bool fUpdate)$/;"	f	class:CWallet
AddTransactionsUpdated	./txmempool.cpp	/^void CTxMemPool::AddTransactionsUpdated(unsigned int n)$/;"	f	class:CTxMemPool
AddTx	./wallet/test/wallet_tests.cpp	/^    CWalletTx& AddTx(CRecipient recipient)$/;"	f	class:ListCoinsTestingSetup
AddTx	./wallet/test/wallet_tests.cpp	/^static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)$/;"	f	file:
AddWallet	./wallet/wallet.cpp	/^bool AddWallet(const std::shared_ptr<CWallet>& wallet)$/;"	f
AddWalletOptions	./dummywallet.cpp	/^void DummyWalletInit::AddWalletOptions() const$/;"	f	class:DummyWalletInit
AddWalletOptions	./wallet/init.cpp	/^void WalletInit::AddWalletOptions() const$/;"	f	class:WalletInit
AddWatchOnly	./keystore.cpp	/^bool CBasicKeyStore::AddWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
AddWatchOnly	./wallet/wallet.cpp	/^bool CWallet::AddWatchOnly(const CScript& dest)$/;"	f	class:CWallet
AddWatchOnly	./wallet/wallet.cpp	/^bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)$/;"	f	class:CWallet
Add_	./addrman.cpp	/^bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)$/;"	f	class:CAddrMan
AddedNodeInfo	./net.h	/^struct AddedNodeInfo$/;"	s
AddrToPubKey	./rpc/util.cpp	/^CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)$/;"	f
Address	./qt/addresstablemodel.h	/^        Address = 1  \/**< Bitcoin address *\/$/;"	e	enum:AddressTableModel::ColumnIndex
Address	./qt/bantablemodel.h	/^        Address = 0,$/;"	e	enum:BanTableModel::ColumnIndex
Address	./qt/peertablemodel.h	/^        Address = 1,$/;"	e	enum:PeerTableModel::ColumnIndex
AddressBookDataToJSON	./wallet/rpcwallet.cpp	/^static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)$/;"	f	file:
AddressBookPage	./qt/addressbookpage.cpp	/^AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode, Tabs _tab, QWidget *parent) :$/;"	f	class:AddressBookPage
AddressBookPage	./qt/addressbookpage.h	/^class AddressBookPage : public QDialog$/;"	c
AddressBookSortFilterProxyModel	./qt/addressbookpage.cpp	/^    AddressBookSortFilterProxyModel(const QString& type, QObject* parent)$/;"	f	class:final
AddressBookTests	./qt/test/addressbooktests.h	/^class AddressBookTests : public QObject$/;"	c
AddressDescriptor	./script/descriptor.cpp	/^    AddressDescriptor(CTxDestination destination) : DescriptorImpl({}, {}, "addr"), m_destination(std::move(destination)) {}$/;"	f	class:__anon75::final
AddressRole	./qt/transactiontablemodel.h	/^        AddressRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AddressTableEntry	./qt/addresstablemodel.cpp	/^    AddressTableEntry() {}$/;"	f	struct:AddressTableEntry
AddressTableEntry	./qt/addresstablemodel.cpp	/^    AddressTableEntry(Type _type, const QString &_label, const QString &_address):$/;"	f	struct:AddressTableEntry
AddressTableEntry	./qt/addresstablemodel.cpp	/^struct AddressTableEntry$/;"	s	file:
AddressTableEntryLessThan	./qt/addresstablemodel.cpp	/^struct AddressTableEntryLessThan$/;"	s	file:
AddressTableModel	./qt/addresstablemodel.cpp	/^AddressTableModel::AddressTableModel(WalletModel *parent) :$/;"	f	class:AddressTableModel
AddressTableModel	./qt/addresstablemodel.h	/^class AddressTableModel : public QAbstractTableModel$/;"	c
AddressTablePriv	./qt/addresstablemodel.cpp	/^    explicit AddressTablePriv(AddressTableModel *_parent):$/;"	f	class:AddressTablePriv
AddressTablePriv	./qt/addresstablemodel.cpp	/^class AddressTablePriv$/;"	c	file:
AddrmanToStream	./test/net_tests.cpp	/^static CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)$/;"	f	file:
AdvertiseLocal	./net.cpp	/^void AdvertiseLocal(CNode *pnode)$/;"	f
AfterFile	./leveldb/db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
AlertNotify	./validation.cpp	/^static void AlertNotify(const std::string& strMessage)$/;"	f	file:
All	./qt/transactionview.h	/^        All,$/;"	e	enum:TransactionView::DateEnum
AllBlockFilterTypes	./blockfilter.cpp	/^const std::vector<BlockFilterType>& AllBlockFilterTypes()$/;"	f
AllEntriesFor	./leveldb/db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	./flatfile.cpp	/^size_t FlatFileSeq::Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space)$/;"	f	class:FlatFileSeq
Allocate	./leveldb/util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	./leveldb/util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	./leveldb/util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFileRange	./util/system.cpp	/^void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {$/;"	f
AllocateLocked	./support/lockedpool.cpp	/^void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)$/;"	f	class:PosixLockedPageAllocator
AllocateLocked	./support/lockedpool.cpp	/^void *Win32LockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)$/;"	f	class:Win32LockedPageAllocator
AllocateNewBlock	./leveldb/util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Allocation	./secp256k1/src/asm/field_10x26_arm.s	/^	Allocation:$/;"	l
Amount	./qt/recentrequeststablemodel.h	/^        Amount = 3,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
Amount	./qt/transactiontablemodel.h	/^        Amount = 5$/;"	e	enum:TransactionTableModel::ColumnIndex
AmountErrMsg	./util/error.cpp	/^std::string AmountErrMsg(const char* const optname, const std::string& strValue)$/;"	f
AmountExceedsBalance	./qt/walletmodel.h	/^        AmountExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AmountFromValue	./bitcoin-tx.cpp	/^static CAmount AmountFromValue(const UniValue& value)$/;"	f	file:
AmountFromValue	./rpc/util.cpp	/^CAmount AmountFromValue(const UniValue& value)$/;"	f
AmountHighWarn	./util/error.cpp	/^std::string AmountHighWarn(const std::string& optname)$/;"	f
AmountRole	./qt/transactiontablemodel.h	/^        AmountRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AmountSpinBox	./qt/bitcoinamountfield.cpp	/^    explicit AmountSpinBox(QWidget *parent):$/;"	f	class:AmountSpinBox
AmountSpinBox	./qt/bitcoinamountfield.cpp	/^class AmountSpinBox: public QAbstractSpinBox$/;"	c	file:
AmountType	./wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	g	class:CWalletTx
AmountWithFeeExceedsBalance	./qt/walletmodel.h	/^        AmountWithFeeExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AnalyzePSBT	./node/psbt.cpp	/^PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)$/;"	f
And	./crypto/sha256_avx2.cpp	/^__m256i inline And(__m256i x, __m256i y) { return _mm256_and_si256(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
And	./crypto/sha256_sse41.cpp	/^__m128i inline And(__m128i x, __m128i y) { return _mm_and_si128(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
AnnotatedMixin	./sync.h	/^class LOCKABLE AnnotatedMixin : public PARENT$/;"	c
AppInit	./bitcoind.cpp	/^static bool AppInit(int argc, char* argv[])$/;"	f	file:
AppInitBasicSetup	./init.cpp	/^bool AppInitBasicSetup()$/;"	f
AppInitLockDataDirectory	./init.cpp	/^bool AppInitLockDataDirectory()$/;"	f
AppInitMain	./init.cpp	/^bool AppInitMain(InitInterfaces& interfaces)$/;"	f
AppInitParameterInteraction	./init.cpp	/^bool AppInitParameterInteraction()$/;"	f
AppInitRPC	./bitcoin-cli.cpp	/^static int AppInitRPC(int argc, char* argv[])$/;"	f	file:
AppInitRawTx	./bitcoin-tx.cpp	/^static int AppInitRawTx(int argc, char* argv[])$/;"	f	file:
AppInitSanityChecks	./init.cpp	/^bool AppInitSanityChecks()$/;"	f
AppInitServers	./init.cpp	/^static bool AppInitServers()$/;"	f	file:
AppTests	./qt/test/apptests.h	/^    explicit AppTests(BitcoinApplication& app) : m_app(app) {}$/;"	f	class:AppTests
AppTests	./qt/test/apptests.h	/^class AppTests : public QObject$/;"	c
Append	./leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Append(const Slice& data) {$/;"	f	class:leveldb::TestWritableFile
Append	./leveldb/db/leveldbutil.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon31::StdoutPrinter
Append	./leveldb/db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	./leveldb/db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	./leveldb/helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon35::FileState
Append	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon35::WritableFileImpl
Append	./leveldb/table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	./leveldb/util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Append	./leveldb/util/env_win.cc	/^Status Win32WritableFile::Append(const Slice& data)$/;"	f	class:leveldb::Win32::Win32WritableFile
AppendEscapedStringTo	./leveldb/util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	./leveldb/db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	./leveldb/util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendVersion	./leveldb/db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWarning	./validation.cpp	/^static void AppendWarning(std::string& res, const std::string& warn)$/;"	f	file:
AppendWithSpace	./leveldb/db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon19
Apply	./leveldb/db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApplyDelta	./txmempool.cpp	/^void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const$/;"	f	class:CTxMemPool
ApplyStats	./rpc/blockchain.cpp	/^static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)$/;"	f	file:
ApplyTxInUndo	./validation.cpp	/^int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)$/;"	f
ApproximateBestSubset	./wallet/coinselection.cpp	/^static void ApproximateBestSubset(const std::vector<OutputGroup>& groups, const CAmount& nTotalLower, const CAmount& nTargetValue,$/;"	f	file:
ApproximateMemoryUsage	./leveldb/db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	./leveldb/db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	./leveldb/table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	./leveldb/table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
Arbitrary	./test/gen/crypto_gen.h	/^struct Arbitrary<CKey> {$/;"	s	namespace:rc
Arbitrary	./test/gen/crypto_gen.h	/^struct Arbitrary<CPrivKey> {$/;"	s	namespace:rc
Arbitrary	./test/gen/crypto_gen.h	/^struct Arbitrary<CPubKey> {$/;"	s	namespace:rc
Arbitrary	./test/gen/crypto_gen.h	/^struct Arbitrary<uint256> {$/;"	s	namespace:rc
ArchiveFile	./leveldb/db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon30::Repairer	file:
AreInputsStandard	./policy/policy.cpp	/^bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)$/;"	f
AreThreadsServicingQueue	./scheduler.cpp	/^bool CScheduler::AreThreadsServicingQueue() const {$/;"	f	class:CScheduler
Arena	./leveldb/util/arena.cc	/^Arena::Arena() : memory_usage_(0) {$/;"	f	class:leveldb::Arena
Arena	./leveldb/util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
Arena	./support/lockedpool.cpp	/^Arena::Arena(void *base_in, size_t size_in, size_t alignment_in):$/;"	f	class:Arena
Arena	./support/lockedpool.h	/^class Arena$/;"	c
ArenaTest	./leveldb/util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb	file:
Arg	./util/system.h	/^        Arg(const std::string& help_param, const std::string& help_text, bool debug_only) : m_help_param(help_param), m_help_text(help_text), m_debug_only(debug_only) {};$/;"	f	struct:ArgsManager::Arg
Arg	./util/system.h	/^    struct Arg$/;"	s	class:ArgsManager
ArgsManager	./util/system.cpp	/^ArgsManager::ArgsManager() :$/;"	f	class:ArgsManager
ArgsManager	./util/system.h	/^class ArgsManager$/;"	c
ArgsManagerHelper	./util/system.cpp	/^class ArgsManagerHelper {$/;"	c	file:
ArgsMergeTestingSetup	./test/util_tests.cpp	/^struct ArgsMergeTestingSetup : public BasicTestingSetup {$/;"	s	file:
ArithToUint256	./arith_uint256.cpp	/^uint256 ArithToUint256(const arith_uint256 &a)$/;"	f
ArrayToString	./test/arith_uint256_tests.cpp	/^static std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f	file:
ArrayToString	./test/uint256_tests.cpp	/^static std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f	file:
AsWit	./test/script_tests.cpp	/^    TestBuilder& AsWit()$/;"	f	class:__anon58::TestBuilder
AskPassphraseDialog	./qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :$/;"	f	class:AskPassphraseDialog
AskPassphraseDialog	./qt/askpassphrasedialog.h	/^class AskPassphraseDialog : public QDialog$/;"	c
AssembleBlock	./bench/block_assemble.cpp	/^static void AssembleBlock(benchmark::State& state)$/;"	f	file:
AssemblerForTest	./test/miner_tests.cpp	/^static BlockAssembler AssemblerForTest(const CChainParams& params) {$/;"	f	file:
AssertFailException	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^      public AssertFailException(String message) {$/;"	m	class:NativeSecp256k1Util.AssertFailException
AssertFailException	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static class AssertFailException extends Exception {$/;"	c	class:NativeSecp256k1Util
AssertHeld	./leveldb/port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AssertHeld	./leveldb/port/port_win.cc	/^void Mutex::AssertHeld() {$/;"	f	class:leveldb::port::Mutex
AssertLockHeld	./sync.h	/^#define AssertLockHeld(/;"	d
AssertLockHeldInternal	./sync.cpp	/^void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)$/;"	f
AssertLockNotHeld	./sync.h	/^#define AssertLockNotHeld(/;"	d
AssertLockNotHeldInternal	./sync.cpp	/^void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)$/;"	f
AssertLockNotHeldInternal	./sync.h	/^void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}$/;"	f
AssumedBlockchainSize	./chainparams.h	/^    uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }$/;"	f	class:CChainParams
AssumedChainStateSize	./chainparams.h	/^    uint64_t AssumedChainStateSize() const { return m_assumed_chain_state_size; }$/;"	f	class:CChainParams
AtomicCounter	./leveldb/db/db_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon23::AtomicCounter
AtomicCounter	./leveldb/db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon23	file:
AtomicPointer	./leveldb/port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./leveldb/port/atomic_pointer.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./leveldb/port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	./leveldb/port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./leveldb/port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	./leveldb/port/port_win.cc	/^AtomicPointer::AtomicPointer(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./leveldb/port/port_win.h	/^  AtomicPointer() : rep_(NULL) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./leveldb/port/port_win.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
Attempt	./addrman.h	/^    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
AttemptToEvictConnection	./net.cpp	/^bool CConnman::AttemptToEvictConnection()$/;"	f	class:CConnman
Attempt_	./addrman.cpp	/^void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)$/;"	f	class:CAddrMan
AutoCompactTest	./leveldb/db/autocompact_test.cc	/^  AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
AutoCompactTest	./leveldb/db/autocompact_test.cc	/^class AutoCompactTest {$/;"	c	namespace:leveldb	file:
AvailableCoins	./wallet/wallet.cpp	/^void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const$/;"	f	class:CWallet
AvailableDataFormatsString	./rest.cpp	/^static std::string AvailableDataFormatsString()$/;"	f	file:
Average	./leveldb/util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
B	./test/util_tests.cpp	/^#define B /;"	d	file:
B	./test/util_tests.cpp	/^#undef B$/;"	d	file:
BANSUBNET_COLUMN_WIDTH	./qt/rpcconsole.h	/^        BANSUBNET_COLUMN_WIDTH = 200,$/;"	e	enum:RPCConsole::ColumnWidths
BANTIME_COLUMN_WIDTH	./qt/rpcconsole.h	/^        BANTIME_COLUMN_WIDTH = 250$/;"	e	enum:RPCConsole::ColumnWidths
BASE	./script/interpreter.h	/^    BASE = 0,$/;"	m	class:SigVersion
BASIC	./blockfilter.h	/^    BASIC = 0,$/;"	m	class:BlockFilterType
BASIC_FILTER_M	./blockfilter.h	/^constexpr uint32_t BASIC_FILTER_M = 784931;$/;"	v
BASIC_FILTER_P	./blockfilter.h	/^constexpr uint8_t BASIC_FILTER_P = 19;$/;"	v
BATCHES	./bench/checkqueue.cpp	/^static const size_t BATCHES = 101;$/;"	v	file:
BATCH_SIZE	./bench/checkqueue.cpp	/^static const size_t BATCH_SIZE = 30;$/;"	v	file:
BCLog	./logging.h	/^namespace BCLog {$/;"	n
BDB_CFLAGS	./Makefile	/^BDB_CFLAGS = $/;"	m
BDB_CPPFLAGS	./Makefile	/^BDB_CPPFLAGS = $/;"	m
BDB_LIBS	./Makefile	/^BDB_LIBS = $/;"	m
BE32	./secp256k1/src/hash_impl.h	/^#define BE32(/;"	d
BE32	./secp256k1/src/hash_impl.h	/^#undef BE32$/;"	d
BECH32	./outputtype.h	/^    BECH32,$/;"	m	class:OutputType
BENCHMARK	./bench/bench.h	/^#define BENCHMARK(/;"	d
BENCHMARKS	./Makefile	/^BENCHMARKS = $/;"	m
BENCHMARKS	./leveldb/Makefile	/^BENCHMARKS = \\$/;"	m
BF_EXPLICIT	./net.cpp	/^    BF_EXPLICIT     = (1U << 0),$/;"	e	enum:BindFlags	file:
BF_NONE	./net.cpp	/^    BF_NONE         = 0,$/;"	e	enum:BindFlags	file:
BF_REPORT_ERROR	./net.cpp	/^    BF_REPORT_ERROR = (1U << 1),$/;"	e	enum:BindFlags	file:
BF_WHITELIST	./net.cpp	/^    BF_WHITELIST    = (1U << 2),$/;"	e	enum:BindFlags	file:
BGItem	./leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon8::PosixEnv	file:
BGQueue	./leveldb/util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon8::PosixEnv	file:
BGThread	./leveldb/util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon8::PosixEnv
BGThreadWrapper	./leveldb/util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon8::PosixEnv	file:
BGWork	./leveldb/db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BINARY	./rest.cpp	/^    BINARY,$/;"	m	class:RetFormat	file:
BINARY_OP	./leveldb/util/testharness.h	/^#define BINARY_OP(/;"	d
BINARY_OP	./leveldb/util/testharness.h	/^#undef BINARY_OP$/;"	d
BIND	./netbase.cpp	/^    BIND = 0x02,$/;"	e	enum:uint8_t	file:
BIP0031_VERSION	./version.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BIP16Exception	./consensus/params.h	/^    uint256 BIP16Exception;$/;"	m	struct:Consensus::Params
BIP22ValidationResult	./rpc/mining.cpp	/^static UniValue BIP22ValidationResult(const CValidationState& state)$/;"	f	file:
BIP32Hash	./hash.cpp	/^void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])$/;"	f
BIP32PubkeyProvider	./script/descriptor.cpp	/^    BIP32PubkeyProvider(const CExtPubKey& extkey, KeyPath path, DeriveType derive) : m_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}$/;"	f	class:__anon75::final
BIP32_EXTKEY_SIZE	./pubkey.h	/^const unsigned int BIP32_EXTKEY_SIZE = 74;$/;"	v
BIP32_HARDENED_KEY_LIMIT	./wallet/wallet.cpp	/^const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;$/;"	v
BIP34Hash	./consensus/params.h	/^    uint256 BIP34Hash;$/;"	m	struct:Consensus::Params
BIP34Height	./consensus/params.h	/^    int BIP34Height;$/;"	m	struct:Consensus::Params
BIP65Height	./consensus/params.h	/^    int BIP65Height;$/;"	m	struct:Consensus::Params
BIP66Height	./consensus/params.h	/^    int BIP66Height;$/;"	m	struct:Consensus::Params
BIP70_MAX_PAYMENTREQUEST_SIZE	./qt/paymentserver.h	/^static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;$/;"	v
BIP70_MESSAGE_PAYMENTACK	./qt/paymentserver.cpp	/^const char* BIP70_MESSAGE_PAYMENTACK = "PaymentACK";$/;"	v
BIP70_MESSAGE_PAYMENTREQUEST	./qt/paymentserver.cpp	/^const char* BIP70_MESSAGE_PAYMENTREQUEST = "PaymentRequest";$/;"	v
BIP71_MIMETYPE_PAYMENT	./qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENT = "application\/bitcoin-payment";$/;"	v
BIP71_MIMETYPE_PAYMENTACK	./qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENTACK = "application\/bitcoin-paymentack";$/;"	v
BIP71_MIMETYPE_PAYMENTREQUEST	./qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENTREQUEST = "application\/bitcoin-paymentrequest";$/;"	v
BIP9Deployment	./consensus/params.h	/^struct BIP9Deployment {$/;"	s	namespace:Consensus
BIP9SoftForkDescPushBack	./rpc/blockchain.cpp	/^static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)$/;"	f	file:
BIP9Stats	./versionbits.h	/^struct BIP9Stats {$/;"	s
BITCOINCONSENSUS_API_VER	./script/bitcoinconsensus.h	/^#define BITCOINCONSENSUS_API_VER /;"	d
BITCOIN_ADDRDB_H	./addrdb.h	/^#define BITCOIN_ADDRDB_H$/;"	d
BITCOIN_ADDRMAN_H	./addrman.h	/^#define BITCOIN_ADDRMAN_H$/;"	d
BITCOIN_AMOUNT_H	./amount.h	/^#define BITCOIN_AMOUNT_H$/;"	d
BITCOIN_ARITH_UINT256_H	./arith_uint256.h	/^#define BITCOIN_ARITH_UINT256_H$/;"	d
BITCOIN_ATTRIBUTES_H	./attributes.h	/^#define BITCOIN_ATTRIBUTES_H$/;"	d
BITCOIN_BANMAN_H	./banman.h	/^#define BITCOIN_BANMAN_H$/;"	d
BITCOIN_BASE58_H	./base58.h	/^#define BITCOIN_BASE58_H$/;"	d
BITCOIN_BECH32_H	./bech32.h	/^#define BITCOIN_BECH32_H$/;"	d
BITCOIN_BENCH_BENCH_H	./bench/bench.h	/^#define BITCOIN_BENCH_BENCH_H$/;"	d
BITCOIN_BLOCKENCODINGS_H	./blockencodings.h	/^#define BITCOIN_BLOCKENCODINGS_H$/;"	d
BITCOIN_BLOCKFILTER_H	./blockfilter.h	/^#define BITCOIN_BLOCKFILTER_H$/;"	d
BITCOIN_BLOOM_H	./bloom.h	/^#define BITCOIN_BLOOM_H$/;"	d
BITCOIN_CHAINPARAMSBASE_H	./chainparamsbase.h	/^#define BITCOIN_CHAINPARAMSBASE_H$/;"	d
BITCOIN_CHAINPARAMSSEEDS_H	./chainparamsseeds.h	/^#define BITCOIN_CHAINPARAMSSEEDS_H$/;"	d
BITCOIN_CHAINPARAMS_H	./chainparams.h	/^#define BITCOIN_CHAINPARAMS_H$/;"	d
BITCOIN_CHAIN_H	./chain.h	/^#define BITCOIN_CHAIN_H$/;"	d
BITCOIN_CHECKQUEUE_H	./checkqueue.h	/^#define BITCOIN_CHECKQUEUE_H$/;"	d
BITCOIN_CLIENTVERSION_H	./clientversion.h	/^#define BITCOIN_CLIENTVERSION_H$/;"	d
BITCOIN_CLI_NAME	./Makefile	/^BITCOIN_CLI_NAME = bitcoin-cli$/;"	m
BITCOIN_COINS_H	./coins.h	/^#define BITCOIN_COINS_H$/;"	d
BITCOIN_COMPAT_ASSUMPTIONS_H	./compat/assumptions.h	/^#define BITCOIN_COMPAT_ASSUMPTIONS_H$/;"	d
BITCOIN_COMPAT_BYTESWAP_H	./compat/byteswap.h	/^#define BITCOIN_COMPAT_BYTESWAP_H$/;"	d
BITCOIN_COMPAT_ENDIAN_H	./compat/endian.h	/^#define BITCOIN_COMPAT_ENDIAN_H$/;"	d
BITCOIN_COMPAT_H	./compat.h	/^#define BITCOIN_COMPAT_H$/;"	d
BITCOIN_COMPAT_SANITY_H	./compat/sanity.h	/^#define BITCOIN_COMPAT_SANITY_H$/;"	d
BITCOIN_COMPRESSOR_H	./compressor.h	/^#define BITCOIN_COMPRESSOR_H$/;"	d
BITCOIN_CONFIG_H	./config/bitcoin-config.h	/^#define BITCOIN_CONFIG_H$/;"	d
BITCOIN_CONF_FILENAME	./util/system.cpp	/^const char * const BITCOIN_CONF_FILENAME = "bitcoin.conf";$/;"	v
BITCOIN_CONSENSUS_CONSENSUS_H	./consensus/consensus.h	/^#define BITCOIN_CONSENSUS_CONSENSUS_H$/;"	d
BITCOIN_CONSENSUS_MERKLE_H	./consensus/merkle.h	/^#define BITCOIN_CONSENSUS_MERKLE_H$/;"	d
BITCOIN_CONSENSUS_PARAMS_H	./consensus/params.h	/^#define BITCOIN_CONSENSUS_PARAMS_H$/;"	d
BITCOIN_CONSENSUS_TX_CHECK_H	./consensus/tx_check.h	/^#define BITCOIN_CONSENSUS_TX_CHECK_H$/;"	d
BITCOIN_CONSENSUS_TX_VERIFY_H	./consensus/tx_verify.h	/^#define BITCOIN_CONSENSUS_TX_VERIFY_H$/;"	d
BITCOIN_CONSENSUS_VALIDATION_H	./consensus/validation.h	/^#define BITCOIN_CONSENSUS_VALIDATION_H$/;"	d
BITCOIN_CORE_H	./Makefile	/^BITCOIN_CORE_H = \\$/;"	m
BITCOIN_CORE_IO_H	./core_io.h	/^#define BITCOIN_CORE_IO_H$/;"	d
BITCOIN_CORE_MEMUSAGE_H	./core_memusage.h	/^#define BITCOIN_CORE_MEMUSAGE_H$/;"	d
BITCOIN_CRYPTO_AES_H	./crypto/aes.h	/^#define BITCOIN_CRYPTO_AES_H$/;"	d
BITCOIN_CRYPTO_CHACHA20_H	./crypto/chacha20.h	/^#define BITCOIN_CRYPTO_CHACHA20_H$/;"	d
BITCOIN_CRYPTO_COMMON_H	./crypto/common.h	/^#define BITCOIN_CRYPTO_COMMON_H$/;"	d
BITCOIN_CRYPTO_HKDF_SHA256_32_H	./crypto/hkdf_sha256_32.h	/^#define BITCOIN_CRYPTO_HKDF_SHA256_32_H$/;"	d
BITCOIN_CRYPTO_HMAC_SHA256_H	./crypto/hmac_sha256.h	/^#define BITCOIN_CRYPTO_HMAC_SHA256_H$/;"	d
BITCOIN_CRYPTO_HMAC_SHA512_H	./crypto/hmac_sha512.h	/^#define BITCOIN_CRYPTO_HMAC_SHA512_H$/;"	d
BITCOIN_CRYPTO_POLY1305_H	./crypto/poly1305.h	/^#define BITCOIN_CRYPTO_POLY1305_H$/;"	d
BITCOIN_CRYPTO_RIPEMD160_H	./crypto/ripemd160.h	/^#define BITCOIN_CRYPTO_RIPEMD160_H$/;"	d
BITCOIN_CRYPTO_SHA1_H	./crypto/sha1.h	/^#define BITCOIN_CRYPTO_SHA1_H$/;"	d
BITCOIN_CRYPTO_SHA256_H	./crypto/sha256.h	/^#define BITCOIN_CRYPTO_SHA256_H$/;"	d
BITCOIN_CRYPTO_SHA512_H	./crypto/sha512.h	/^#define BITCOIN_CRYPTO_SHA512_H$/;"	d
BITCOIN_CRYPTO_SIPHASH_H	./crypto/siphash.h	/^#define BITCOIN_CRYPTO_SIPHASH_H$/;"	d
BITCOIN_CUCKOOCACHE_H	./cuckoocache.h	/^#define BITCOIN_CUCKOOCACHE_H$/;"	d
BITCOIN_DAEMON_NAME	./Makefile	/^BITCOIN_DAEMON_NAME = bitcoind$/;"	m
BITCOIN_DBWRAPPER_H	./dbwrapper.h	/^#define BITCOIN_DBWRAPPER_H$/;"	d
BITCOIN_FLATFILE_H	./flatfile.h	/^#define BITCOIN_FLATFILE_H$/;"	d
BITCOIN_FS_H	./fs.h	/^#define BITCOIN_FS_H$/;"	d
BITCOIN_GUI_NAME	./Makefile	/^BITCOIN_GUI_NAME = bitcoin-qt$/;"	m
BITCOIN_HASH_H	./hash.h	/^#define BITCOIN_HASH_H$/;"	d
BITCOIN_HTTPRPC_H	./httprpc.h	/^#define BITCOIN_HTTPRPC_H$/;"	d
BITCOIN_HTTPSERVER_H	./httpserver.h	/^#define BITCOIN_HTTPSERVER_H$/;"	d
BITCOIN_INCLUDES	./Makefile	/^BITCOIN_INCLUDES = -I$(builddir) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) \\$/;"	m
BITCOIN_INDEX_BASE_H	./index/base.h	/^#define BITCOIN_INDEX_BASE_H$/;"	d
BITCOIN_INDEX_BLOCKFILTERINDEX_H	./index/blockfilterindex.h	/^#define BITCOIN_INDEX_BLOCKFILTERINDEX_H$/;"	d
BITCOIN_INDEX_TXINDEX_H	./index/txindex.h	/^#define BITCOIN_INDEX_TXINDEX_H$/;"	d
BITCOIN_INDIRECTMAP_H	./indirectmap.h	/^#define BITCOIN_INDIRECTMAP_H$/;"	d
BITCOIN_INIT_H	./init.h	/^#define BITCOIN_INIT_H$/;"	d
BITCOIN_INTERFACES_CHAIN_H	./interfaces/chain.h	/^#define BITCOIN_INTERFACES_CHAIN_H$/;"	d
BITCOIN_INTERFACES_HANDLER_H	./interfaces/handler.h	/^#define BITCOIN_INTERFACES_HANDLER_H$/;"	d
BITCOIN_INTERFACES_NODE_H	./interfaces/node.h	/^#define BITCOIN_INTERFACES_NODE_H$/;"	d
BITCOIN_INTERFACES_WALLET_H	./interfaces/wallet.h	/^#define BITCOIN_INTERFACES_WALLET_H$/;"	d
BITCOIN_IPC_CONNECT_TIMEOUT	./qt/paymentserver.cpp	/^const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; \/\/ milliseconds$/;"	v
BITCOIN_KEYSTORE_H	./keystore.h	/^#define BITCOIN_KEYSTORE_H$/;"	d
BITCOIN_KEY_H	./key.h	/^#define BITCOIN_KEY_H$/;"	d
BITCOIN_KEY_IO_H	./key_io.h	/^#define BITCOIN_KEY_IO_H$/;"	d
BITCOIN_LIMITEDMAP_H	./limitedmap.h	/^#define BITCOIN_LIMITEDMAP_H$/;"	d
BITCOIN_LOGGING_H	./logging.h	/^#define BITCOIN_LOGGING_H$/;"	d
BITCOIN_MEMUSAGE_H	./memusage.h	/^#define BITCOIN_MEMUSAGE_H$/;"	d
BITCOIN_MERKLEBLOCK_H	./merkleblock.h	/^#define BITCOIN_MERKLEBLOCK_H$/;"	d
BITCOIN_MINER_H	./miner.h	/^#define BITCOIN_MINER_H$/;"	d
BITCOIN_NETADDRESS_H	./netaddress.h	/^#define BITCOIN_NETADDRESS_H$/;"	d
BITCOIN_NETBASE_H	./netbase.h	/^#define BITCOIN_NETBASE_H$/;"	d
BITCOIN_NETMESSAGEMAKER_H	./netmessagemaker.h	/^#define BITCOIN_NETMESSAGEMAKER_H$/;"	d
BITCOIN_NET_H	./net.h	/^#define BITCOIN_NET_H$/;"	d
BITCOIN_NET_PROCESSING_H	./net_processing.h	/^#define BITCOIN_NET_PROCESSING_H$/;"	d
BITCOIN_NODE_COIN_H	./node/coin.h	/^#define BITCOIN_NODE_COIN_H$/;"	d
BITCOIN_NODE_PSBT_H	./node/psbt.h	/^#define BITCOIN_NODE_PSBT_H$/;"	d
BITCOIN_NODE_TRANSACTION_H	./node/transaction.h	/^#define BITCOIN_NODE_TRANSACTION_H$/;"	d
BITCOIN_NOUI_H	./noui.h	/^#define BITCOIN_NOUI_H$/;"	d
BITCOIN_OPTIONAL_H	./optional.h	/^#define BITCOIN_OPTIONAL_H$/;"	d
BITCOIN_OUTPUTTYPE_H	./outputtype.h	/^#define BITCOIN_OUTPUTTYPE_H$/;"	d
BITCOIN_PID_FILENAME	./init.cpp	/^static const char* BITCOIN_PID_FILENAME = "bitcoind.pid";$/;"	v	file:
BITCOIN_POLICY_FEERATE_H	./policy/feerate.h	/^#define BITCOIN_POLICY_FEERATE_H$/;"	d
BITCOIN_POLICY_FEES_H	./policy/fees.h	/^#define BITCOIN_POLICY_FEES_H$/;"	d
BITCOIN_POLICY_POLICY_H	./policy/policy.h	/^#define BITCOIN_POLICY_POLICY_H$/;"	d
BITCOIN_POLICY_RBF_H	./policy/rbf.h	/^#define BITCOIN_POLICY_RBF_H$/;"	d
BITCOIN_POLICY_SETTINGS_H	./policy/settings.h	/^#define BITCOIN_POLICY_SETTINGS_H$/;"	d
BITCOIN_POW_H	./pow.h	/^#define BITCOIN_POW_H$/;"	d
BITCOIN_PREVECTOR_H	./prevector.h	/^#define BITCOIN_PREVECTOR_H$/;"	d
BITCOIN_PRIMITIVES_BLOCK_H	./primitives/block.h	/^#define BITCOIN_PRIMITIVES_BLOCK_H$/;"	d
BITCOIN_PRIMITIVES_TRANSACTION_H	./primitives/transaction.h	/^#define BITCOIN_PRIMITIVES_TRANSACTION_H$/;"	d
BITCOIN_PROTOCOL_H	./protocol.h	/^#define BITCOIN_PROTOCOL_H$/;"	d
BITCOIN_PSBT_H	./psbt.h	/^#define BITCOIN_PSBT_H$/;"	d
BITCOIN_PUBKEY_H	./pubkey.h	/^#define BITCOIN_PUBKEY_H$/;"	d
BITCOIN_QT_ADDRESSBOOKPAGE_H	./qt/addressbookpage.h	/^#define BITCOIN_QT_ADDRESSBOOKPAGE_H$/;"	d
BITCOIN_QT_ADDRESSTABLEMODEL_H	./qt/addresstablemodel.h	/^#define BITCOIN_QT_ADDRESSTABLEMODEL_H$/;"	d
BITCOIN_QT_ASKPASSPHRASEDIALOG_H	./qt/askpassphrasedialog.h	/^#define BITCOIN_QT_ASKPASSPHRASEDIALOG_H$/;"	d
BITCOIN_QT_BANTABLEMODEL_H	./qt/bantablemodel.h	/^#define BITCOIN_QT_BANTABLEMODEL_H$/;"	d
BITCOIN_QT_BITCOINADDRESSVALIDATOR_H	./qt/bitcoinaddressvalidator.h	/^#define BITCOIN_QT_BITCOINADDRESSVALIDATOR_H$/;"	d
BITCOIN_QT_BITCOINAMOUNTFIELD_H	./qt/bitcoinamountfield.h	/^#define BITCOIN_QT_BITCOINAMOUNTFIELD_H$/;"	d
BITCOIN_QT_BITCOINGUI_H	./qt/bitcoingui.h	/^#define BITCOIN_QT_BITCOINGUI_H$/;"	d
BITCOIN_QT_BITCOINUNITS_H	./qt/bitcoinunits.h	/^#define BITCOIN_QT_BITCOINUNITS_H$/;"	d
BITCOIN_QT_BITCOIN_H	./qt/bitcoin.h	/^#define BITCOIN_QT_BITCOIN_H$/;"	d
BITCOIN_QT_CLIENTMODEL_H	./qt/clientmodel.h	/^#define BITCOIN_QT_CLIENTMODEL_H$/;"	d
BITCOIN_QT_COINCONTROLDIALOG_H	./qt/coincontroldialog.h	/^#define BITCOIN_QT_COINCONTROLDIALOG_H$/;"	d
BITCOIN_QT_COINCONTROLTREEWIDGET_H	./qt/coincontroltreewidget.h	/^#define BITCOIN_QT_COINCONTROLTREEWIDGET_H$/;"	d
BITCOIN_QT_CSVMODELWRITER_H	./qt/csvmodelwriter.h	/^#define BITCOIN_QT_CSVMODELWRITER_H$/;"	d
BITCOIN_QT_EDITADDRESSDIALOG_H	./qt/editaddressdialog.h	/^#define BITCOIN_QT_EDITADDRESSDIALOG_H$/;"	d
BITCOIN_QT_GUICONSTANTS_H	./qt/guiconstants.h	/^#define BITCOIN_QT_GUICONSTANTS_H$/;"	d
BITCOIN_QT_GUIUTIL_H	./qt/guiutil.h	/^#define BITCOIN_QT_GUIUTIL_H$/;"	d
BITCOIN_QT_INTRO_H	./qt/intro.h	/^#define BITCOIN_QT_INTRO_H$/;"	d
BITCOIN_QT_MACDOCKICONHANDLER_H	./qt/macdockiconhandler.h	/^#define BITCOIN_QT_MACDOCKICONHANDLER_H$/;"	d
BITCOIN_QT_MACNOTIFICATIONHANDLER_H	./qt/macnotificationhandler.h	/^#define BITCOIN_QT_MACNOTIFICATIONHANDLER_H$/;"	d
BITCOIN_QT_MACOS_APPNAP_H	./qt/macos_appnap.h	/^#define BITCOIN_QT_MACOS_APPNAP_H$/;"	d
BITCOIN_QT_MODALOVERLAY_H	./qt/modaloverlay.h	/^#define BITCOIN_QT_MODALOVERLAY_H$/;"	d
BITCOIN_QT_NETWORKSTYLE_H	./qt/networkstyle.h	/^#define BITCOIN_QT_NETWORKSTYLE_H$/;"	d
BITCOIN_QT_NOTIFICATOR_H	./qt/notificator.h	/^#define BITCOIN_QT_NOTIFICATOR_H$/;"	d
BITCOIN_QT_OPENURIDIALOG_H	./qt/openuridialog.h	/^#define BITCOIN_QT_OPENURIDIALOG_H$/;"	d
BITCOIN_QT_OPTIONSDIALOG_H	./qt/optionsdialog.h	/^#define BITCOIN_QT_OPTIONSDIALOG_H$/;"	d
BITCOIN_QT_OPTIONSMODEL_H	./qt/optionsmodel.h	/^#define BITCOIN_QT_OPTIONSMODEL_H$/;"	d
BITCOIN_QT_OVERVIEWPAGE_H	./qt/overviewpage.h	/^#define BITCOIN_QT_OVERVIEWPAGE_H$/;"	d
BITCOIN_QT_PAYMENTREQUESTPLUS_H	./qt/paymentrequestplus.h	/^#define BITCOIN_QT_PAYMENTREQUESTPLUS_H$/;"	d
BITCOIN_QT_PAYMENTSERVER_H	./qt/paymentserver.h	/^#define BITCOIN_QT_PAYMENTSERVER_H$/;"	d
BITCOIN_QT_PEERTABLEMODEL_H	./qt/peertablemodel.h	/^#define BITCOIN_QT_PEERTABLEMODEL_H$/;"	d
BITCOIN_QT_PLATFORMSTYLE_H	./qt/platformstyle.h	/^#define BITCOIN_QT_PLATFORMSTYLE_H$/;"	d
BITCOIN_QT_QRIMAGEWIDGET_H	./qt/qrimagewidget.h	/^#define BITCOIN_QT_QRIMAGEWIDGET_H$/;"	d
BITCOIN_QT_QVALIDATEDLINEEDIT_H	./qt/qvalidatedlineedit.h	/^#define BITCOIN_QT_QVALIDATEDLINEEDIT_H$/;"	d
BITCOIN_QT_QVALUECOMBOBOX_H	./qt/qvaluecombobox.h	/^#define BITCOIN_QT_QVALUECOMBOBOX_H$/;"	d
BITCOIN_QT_RECEIVECOINSDIALOG_H	./qt/receivecoinsdialog.h	/^#define BITCOIN_QT_RECEIVECOINSDIALOG_H$/;"	d
BITCOIN_QT_RECEIVEREQUESTDIALOG_H	./qt/receiverequestdialog.h	/^#define BITCOIN_QT_RECEIVEREQUESTDIALOG_H$/;"	d
BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H	./qt/recentrequeststablemodel.h	/^#define BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H$/;"	d
BITCOIN_QT_RPCCONSOLE_H	./qt/rpcconsole.h	/^#define BITCOIN_QT_RPCCONSOLE_H$/;"	d
BITCOIN_QT_SENDCOINSDIALOG_H	./qt/sendcoinsdialog.h	/^#define BITCOIN_QT_SENDCOINSDIALOG_H$/;"	d
BITCOIN_QT_SENDCOINSENTRY_H	./qt/sendcoinsentry.h	/^#define BITCOIN_QT_SENDCOINSENTRY_H$/;"	d
BITCOIN_QT_SIGNVERIFYMESSAGEDIALOG_H	./qt/signverifymessagedialog.h	/^#define BITCOIN_QT_SIGNVERIFYMESSAGEDIALOG_H$/;"	d
BITCOIN_QT_SPLASHSCREEN_H	./qt/splashscreen.h	/^#define BITCOIN_QT_SPLASHSCREEN_H$/;"	d
BITCOIN_QT_TEST_ADDRESSBOOKTESTS_H	./qt/test/addressbooktests.h	/^#define BITCOIN_QT_TEST_ADDRESSBOOKTESTS_H$/;"	d
BITCOIN_QT_TEST_APPTESTS_H	./qt/test/apptests.h	/^#define BITCOIN_QT_TEST_APPTESTS_H$/;"	d
BITCOIN_QT_TEST_COMPATTESTS_H	./qt/test/compattests.h	/^#define BITCOIN_QT_TEST_COMPATTESTS_H$/;"	d
BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H	./qt/test/paymentrequestdata.h	/^#define BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H$/;"	d
BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H	./qt/test/paymentservertests.h	/^#define BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H$/;"	d
BITCOIN_QT_TEST_RPCNESTEDTESTS_H	./qt/test/rpcnestedtests.h	/^#define BITCOIN_QT_TEST_RPCNESTEDTESTS_H$/;"	d
BITCOIN_QT_TEST_URITESTS_H	./qt/test/uritests.h	/^#define BITCOIN_QT_TEST_URITESTS_H$/;"	d
BITCOIN_QT_TEST_UTIL_H	./qt/test/util.h	/^#define BITCOIN_QT_TEST_UTIL_H$/;"	d
BITCOIN_QT_TEST_WALLETTESTS_H	./qt/test/wallettests.h	/^#define BITCOIN_QT_TEST_WALLETTESTS_H$/;"	d
BITCOIN_QT_TRAFFICGRAPHWIDGET_H	./qt/trafficgraphwidget.h	/^#define BITCOIN_QT_TRAFFICGRAPHWIDGET_H$/;"	d
BITCOIN_QT_TRANSACTIONDESCDIALOG_H	./qt/transactiondescdialog.h	/^#define BITCOIN_QT_TRANSACTIONDESCDIALOG_H$/;"	d
BITCOIN_QT_TRANSACTIONDESC_H	./qt/transactiondesc.h	/^#define BITCOIN_QT_TRANSACTIONDESC_H$/;"	d
BITCOIN_QT_TRANSACTIONFILTERPROXY_H	./qt/transactionfilterproxy.h	/^#define BITCOIN_QT_TRANSACTIONFILTERPROXY_H$/;"	d
BITCOIN_QT_TRANSACTIONRECORD_H	./qt/transactionrecord.h	/^#define BITCOIN_QT_TRANSACTIONRECORD_H$/;"	d
BITCOIN_QT_TRANSACTIONTABLEMODEL_H	./qt/transactiontablemodel.h	/^#define BITCOIN_QT_TRANSACTIONTABLEMODEL_H$/;"	d
BITCOIN_QT_TRANSACTIONVIEW_H	./qt/transactionview.h	/^#define BITCOIN_QT_TRANSACTIONVIEW_H$/;"	d
BITCOIN_QT_UTILITYDIALOG_H	./qt/utilitydialog.h	/^#define BITCOIN_QT_UTILITYDIALOG_H$/;"	d
BITCOIN_QT_WALLETCONTROLLER_H	./qt/walletcontroller.h	/^#define BITCOIN_QT_WALLETCONTROLLER_H$/;"	d
BITCOIN_QT_WALLETFRAME_H	./qt/walletframe.h	/^#define BITCOIN_QT_WALLETFRAME_H$/;"	d
BITCOIN_QT_WALLETMODELTRANSACTION_H	./qt/walletmodeltransaction.h	/^#define BITCOIN_QT_WALLETMODELTRANSACTION_H$/;"	d
BITCOIN_QT_WALLETMODEL_H	./qt/walletmodel.h	/^#define BITCOIN_QT_WALLETMODEL_H$/;"	d
BITCOIN_QT_WALLETVIEW_H	./qt/walletview.h	/^#define BITCOIN_QT_WALLETVIEW_H$/;"	d
BITCOIN_QT_WINSHUTDOWNMONITOR_H	./qt/winshutdownmonitor.h	/^#define BITCOIN_QT_WINSHUTDOWNMONITOR_H$/;"	d
BITCOIN_RANDOM_H	./random.h	/^#define BITCOIN_RANDOM_H$/;"	d
BITCOIN_REVERSELOCK_H	./reverselock.h	/^#define BITCOIN_REVERSELOCK_H$/;"	d
BITCOIN_REVERSE_ITERATOR_H	./reverse_iterator.h	/^#define BITCOIN_REVERSE_ITERATOR_H$/;"	d
BITCOIN_RPC_BLOCKCHAIN_H	./rpc/blockchain.h	/^#define BITCOIN_RPC_BLOCKCHAIN_H$/;"	d
BITCOIN_RPC_CLIENT_H	./rpc/client.h	/^#define BITCOIN_RPC_CLIENT_H$/;"	d
BITCOIN_RPC_PROTOCOL_H	./rpc/protocol.h	/^#define BITCOIN_RPC_PROTOCOL_H$/;"	d
BITCOIN_RPC_RAWTRANSACTION_UTIL_H	./rpc/rawtransaction_util.h	/^#define BITCOIN_RPC_RAWTRANSACTION_UTIL_H$/;"	d
BITCOIN_RPC_REGISTER_H	./rpc/register.h	/^#define BITCOIN_RPC_REGISTER_H$/;"	d
BITCOIN_RPC_SERVER_H	./rpc/server.h	/^#define BITCOIN_RPC_SERVER_H$/;"	d
BITCOIN_RPC_UTIL_H	./rpc/util.h	/^#define BITCOIN_RPC_UTIL_H$/;"	d
BITCOIN_SCHEDULER_H	./scheduler.h	/^#define BITCOIN_SCHEDULER_H$/;"	d
BITCOIN_SCRIPT_BITCOINCONSENSUS_H	./script/bitcoinconsensus.h	/^#define BITCOIN_SCRIPT_BITCOINCONSENSUS_H$/;"	d
BITCOIN_SCRIPT_DESCRIPTOR_H	./script/descriptor.h	/^#define BITCOIN_SCRIPT_DESCRIPTOR_H$/;"	d
BITCOIN_SCRIPT_INTERPRETER_H	./script/interpreter.h	/^#define BITCOIN_SCRIPT_INTERPRETER_H$/;"	d
BITCOIN_SCRIPT_ISMINE_H	./script/ismine.h	/^#define BITCOIN_SCRIPT_ISMINE_H$/;"	d
BITCOIN_SCRIPT_SCRIPT_ERROR_H	./script/script_error.h	/^#define BITCOIN_SCRIPT_SCRIPT_ERROR_H$/;"	d
BITCOIN_SCRIPT_SCRIPT_H	./script/script.h	/^#define BITCOIN_SCRIPT_SCRIPT_H$/;"	d
BITCOIN_SCRIPT_SIGCACHE_H	./script/sigcache.h	/^#define BITCOIN_SCRIPT_SIGCACHE_H$/;"	d
BITCOIN_SCRIPT_SIGN_H	./script/sign.h	/^#define BITCOIN_SCRIPT_SIGN_H$/;"	d
BITCOIN_SCRIPT_STANDARD_H	./script/standard.h	/^#define BITCOIN_SCRIPT_STANDARD_H$/;"	d
BITCOIN_SERIALIZE_H	./serialize.h	/^#define BITCOIN_SERIALIZE_H$/;"	d
BITCOIN_SHUTDOWN_H	./shutdown.h	/^#define BITCOIN_SHUTDOWN_H$/;"	d
BITCOIN_SPAN_H	./span.h	/^#define BITCOIN_SPAN_H$/;"	d
BITCOIN_STREAMS_H	./streams.h	/^#define BITCOIN_STREAMS_H$/;"	d
BITCOIN_SUPPORT_ALLOCATORS_SECURE_H	./support/allocators/secure.h	/^#define BITCOIN_SUPPORT_ALLOCATORS_SECURE_H$/;"	d
BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H	./support/allocators/zeroafterfree.h	/^#define BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H$/;"	d
BITCOIN_SUPPORT_CLEANSE_H	./support/cleanse.h	/^#define BITCOIN_SUPPORT_CLEANSE_H$/;"	d
BITCOIN_SUPPORT_EVENTS_H	./support/events.h	/^#define BITCOIN_SUPPORT_EVENTS_H$/;"	d
BITCOIN_SUPPORT_LOCKEDPOOL_H	./support/lockedpool.h	/^#define BITCOIN_SUPPORT_LOCKEDPOOL_H$/;"	d
BITCOIN_SYNC_H	./sync.h	/^#define BITCOIN_SYNC_H$/;"	d
BITCOIN_TESTS	./Makefile	/^BITCOIN_TESTS = test\/arith_uint256_tests.cpp \\$/;"	m
BITCOIN_TEST_FUZZ_FUZZ_H	./test/fuzz/fuzz.h	/^#define BITCOIN_TEST_FUZZ_FUZZ_H$/;"	d
BITCOIN_TEST_GEN_CRYPTO_GEN_H	./test/gen/crypto_gen.h	/^#define BITCOIN_TEST_GEN_CRYPTO_GEN_H$/;"	d
BITCOIN_TEST_SCRIPTNUM10_H	./test/scriptnum10.h	/^#define BITCOIN_TEST_SCRIPTNUM10_H$/;"	d
BITCOIN_TEST_SETUP_COMMON_H	./test/setup_common.h	/^#define BITCOIN_TEST_SETUP_COMMON_H$/;"	d
BITCOIN_TEST_SUITE	./Makefile	/^BITCOIN_TEST_SUITE = test\/main.cpp \\$/;"	m
BITCOIN_TEST_UTIL_H	./test/util.h	/^#define BITCOIN_TEST_UTIL_H$/;"	d
BITCOIN_THREADINTERRUPT_H	./threadinterrupt.h	/^#define BITCOIN_THREADINTERRUPT_H$/;"	d
BITCOIN_THREADSAFETY_H	./threadsafety.h	/^#define BITCOIN_THREADSAFETY_H$/;"	d
BITCOIN_TIMEDATA_H	./timedata.h	/^#define BITCOIN_TIMEDATA_H$/;"	d
BITCOIN_TIMEDATA_MAX_SAMPLES	./timedata.cpp	/^#define BITCOIN_TIMEDATA_MAX_SAMPLES /;"	d	file:
BITCOIN_TORCONTROL_H	./torcontrol.h	/^#define BITCOIN_TORCONTROL_H$/;"	d
BITCOIN_TXDB_H	./txdb.h	/^#define BITCOIN_TXDB_H$/;"	d
BITCOIN_TXMEMPOOL_H	./txmempool.h	/^#define BITCOIN_TXMEMPOOL_H$/;"	d
BITCOIN_TX_NAME	./Makefile	/^BITCOIN_TX_NAME = bitcoin-tx$/;"	m
BITCOIN_UINT256_H	./uint256.h	/^#define BITCOIN_UINT256_H$/;"	d
BITCOIN_UI_INTERFACE_H	./ui_interface.h	/^#define BITCOIN_UI_INTERFACE_H$/;"	d
BITCOIN_UNDO_H	./undo.h	/^#define BITCOIN_UNDO_H$/;"	d
BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H	./univalue/lib/univalue_escapes.h	/^#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H$/;"	d
BITCOIN_UTIL_BIP32_H	./util/bip32.h	/^#define BITCOIN_UTIL_BIP32_H$/;"	d
BITCOIN_UTIL_BYTEVECTORHASH_H	./util/bytevectorhash.h	/^#define BITCOIN_UTIL_BYTEVECTORHASH_H$/;"	d
BITCOIN_UTIL_ERROR_H	./util/error.h	/^#define BITCOIN_UTIL_ERROR_H$/;"	d
BITCOIN_UTIL_FEES_H	./util/fees.h	/^#define BITCOIN_UTIL_FEES_H$/;"	d
BITCOIN_UTIL_MEMORY_H	./util/memory.h	/^#define BITCOIN_UTIL_MEMORY_H$/;"	d
BITCOIN_UTIL_MONEYSTR_H	./util/moneystr.h	/^#define BITCOIN_UTIL_MONEYSTR_H$/;"	d
BITCOIN_UTIL_RBF_H	./util/rbf.h	/^#define BITCOIN_UTIL_RBF_H$/;"	d
BITCOIN_UTIL_STRENCODINGS_H	./util/strencodings.h	/^#define BITCOIN_UTIL_STRENCODINGS_H$/;"	d
BITCOIN_UTIL_SYSTEM_H	./util/system.h	/^#define BITCOIN_UTIL_SYSTEM_H$/;"	d
BITCOIN_UTIL_THREADNAMES_H	./util/threadnames.h	/^#define BITCOIN_UTIL_THREADNAMES_H$/;"	d
BITCOIN_UTIL_TIME_H	./util/time.h	/^#define BITCOIN_UTIL_TIME_H$/;"	d
BITCOIN_UTIL_URL_H	./util/url.h	/^#define BITCOIN_UTIL_URL_H$/;"	d
BITCOIN_UTIL_VALIDATION_H	./util/validation.h	/^#define BITCOIN_UTIL_VALIDATION_H$/;"	d
BITCOIN_VALIDATIONINTERFACE_H	./validationinterface.h	/^#define BITCOIN_VALIDATIONINTERFACE_H$/;"	d
BITCOIN_VALIDATION_H	./validation.h	/^#define BITCOIN_VALIDATION_H$/;"	d
BITCOIN_VERSIONBITSINFO_H	./versionbitsinfo.h	/^#define BITCOIN_VERSIONBITSINFO_H$/;"	d
BITCOIN_VERSIONBITS_H	./versionbits.h	/^#define BITCOIN_VERSIONBITS_H$/;"	d
BITCOIN_VERSION_H	./version.h	/^#define BITCOIN_VERSION_H$/;"	d
BITCOIN_WALLETINITINTERFACE_H	./walletinitinterface.h	/^#define BITCOIN_WALLETINITINTERFACE_H$/;"	d
BITCOIN_WALLET_COINCONTROL_H	./wallet/coincontrol.h	/^#define BITCOIN_WALLET_COINCONTROL_H$/;"	d
BITCOIN_WALLET_COINSELECTION_H	./wallet/coinselection.h	/^#define BITCOIN_WALLET_COINSELECTION_H$/;"	d
BITCOIN_WALLET_CRYPTER_H	./wallet/crypter.h	/^#define BITCOIN_WALLET_CRYPTER_H$/;"	d
BITCOIN_WALLET_DB_H	./wallet/db.h	/^#define BITCOIN_WALLET_DB_H$/;"	d
BITCOIN_WALLET_FEEBUMPER_H	./wallet/feebumper.h	/^#define BITCOIN_WALLET_FEEBUMPER_H$/;"	d
BITCOIN_WALLET_FEES_H	./wallet/fees.h	/^#define BITCOIN_WALLET_FEES_H$/;"	d
BITCOIN_WALLET_LOAD_H	./wallet/load.h	/^#define BITCOIN_WALLET_LOAD_H$/;"	d
BITCOIN_WALLET_PSBTWALLET_H	./wallet/psbtwallet.h	/^#define BITCOIN_WALLET_PSBTWALLET_H$/;"	d
BITCOIN_WALLET_RPCWALLET_H	./wallet/rpcwallet.h	/^#define BITCOIN_WALLET_RPCWALLET_H$/;"	d
BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H	./wallet/test/init_test_fixture.h	/^#define BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H$/;"	d
BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H	./wallet/test/wallet_test_fixture.h	/^#define BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H$/;"	d
BITCOIN_WALLET_TOOL_NAME	./Makefile	/^BITCOIN_WALLET_TOOL_NAME = bitcoin-wallet$/;"	m
BITCOIN_WALLET_WALLETDB_H	./wallet/walletdb.h	/^#define BITCOIN_WALLET_WALLETDB_H$/;"	d
BITCOIN_WALLET_WALLETTOOL_H	./wallet/wallettool.h	/^#define BITCOIN_WALLET_WALLETTOOL_H$/;"	d
BITCOIN_WALLET_WALLETUTIL_H	./wallet/walletutil.h	/^#define BITCOIN_WALLET_WALLETUTIL_H$/;"	d
BITCOIN_WALLET_WALLET_H	./wallet/wallet.h	/^#define BITCOIN_WALLET_WALLET_H$/;"	d
BITCOIN_WARNINGS_H	./warnings.h	/^#define BITCOIN_WARNINGS_H$/;"	d
BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H	./zmq/zmqabstractnotifier.h	/^#define BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H$/;"	d
BITCOIN_ZMQ_ZMQCONFIG_H	./zmq/zmqconfig.h	/^#define BITCOIN_ZMQ_ZMQCONFIG_H$/;"	d
BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H	./zmq/zmqnotificationinterface.h	/^#define BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H$/;"	d
BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H	./zmq/zmqpublishnotifier.h	/^#define BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H$/;"	d
BITCOIN_ZMQ_ZMQRPC_H	./zmq/zmqrpc.h	/^#define BITCOIN_ZMQ_ZMQRPC_H$/;"	d
BITER	./bench/lockedpool.cpp	/^#define BITER /;"	d	file:
BITS_PER_SAMPLE	./qt/notificator.cpp	/^const int BITS_PER_SAMPLE = 8;$/;"	v
BIT_RANGE	./crypto/ctaes/ctaes.c	/^#define BIT_RANGE(/;"	d	file:
BIT_RANGE_LEFT	./crypto/ctaes/ctaes.c	/^#define BIT_RANGE_LEFT(/;"	d	file:
BIT_RANGE_RIGHT	./crypto/ctaes/ctaes.c	/^#define BIT_RANGE_RIGHT(/;"	d	file:
BLOCK	./protocol.cpp	/^const char *BLOCK="block";$/;"	m	namespace:NetMsgType	file:
BLOCK	./txmempool.h	/^    BLOCK,       \/\/!< Removed for block$/;"	m	class:MemPoolRemovalReason
BLOCKFILE_CHUNK_SIZE	./validation.h	/^static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; \/\/ 16 MiB$/;"	v
BLOCKTXN	./protocol.cpp	/^const char *BLOCKTXN="blocktxn";$/;"	m	namespace:NetMsgType	file:
BLOCK_CHECKPOINT	./consensus/validation.h	/^    BLOCK_CHECKPOINT,        \/\/!< the block failed to meet one of our checkpoints$/;"	m	class:ValidationInvalidReason
BLOCK_CREATION	./util/system.h	/^    BLOCK_CREATION,$/;"	m	class:OptionsCategory
BLOCK_DOWNLOAD_TIMEOUT_BASE	./validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;$/;"	v
BLOCK_DOWNLOAD_TIMEOUT_PER_PEER	./validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;$/;"	v
BLOCK_DOWNLOAD_WINDOW	./validation.h	/^static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;$/;"	v
BLOCK_FAILED_CHILD	./chain.h	/^    BLOCK_FAILED_CHILD       =   64, \/\/!< descends from failed block$/;"	e	enum:uint32_t
BLOCK_FAILED_MASK	./chain.h	/^    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,$/;"	e	enum:uint32_t
BLOCK_FAILED_VALID	./chain.h	/^    BLOCK_FAILED_VALID       =   32, \/\/!< stage after last reached validness failed$/;"	e	enum:uint32_t
BLOCK_HAVE_DATA	./chain.h	/^    BLOCK_HAVE_DATA          =    8, \/\/!< full block available in blk*.dat$/;"	e	enum:uint32_t
BLOCK_HAVE_MASK	./chain.h	/^    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,$/;"	e	enum:uint32_t
BLOCK_HAVE_UNDO	./chain.h	/^    BLOCK_HAVE_UNDO          =   16, \/\/!< undo data available in rev*.dat$/;"	e	enum:uint32_t
BLOCK_INVALID_HEADER	./consensus/validation.h	/^    BLOCK_INVALID_HEADER,    \/\/!< invalid proof of work or time too old$/;"	m	class:ValidationInvalidReason
BLOCK_INVALID_PREV	./consensus/validation.h	/^    BLOCK_INVALID_PREV,      \/\/!< A block this one builds on is invalid$/;"	m	class:ValidationInvalidReason
BLOCK_MISSING_PREV	./consensus/validation.h	/^    BLOCK_MISSING_PREV,      \/\/!< We don't have the previous block the checked one is built on$/;"	m	class:ValidationInvalidReason
BLOCK_MUTATED	./consensus/validation.h	/^    BLOCK_MUTATED,           \/\/!< the block's data didn't match the data committed to by the PoW$/;"	m	class:ValidationInvalidReason
BLOCK_OPT_WITNESS	./chain.h	/^    BLOCK_OPT_WITNESS       =   128, \/\/!< block data in blk*.data was received with a witness-enforcing client$/;"	e	enum:uint32_t
BLOCK_STALLING_TIMEOUT	./validation.h	/^static const unsigned int BLOCK_STALLING_TIMEOUT = 2;$/;"	v
BLOCK_TEST	./leveldb/table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType	file:
BLOCK_TIME_FUTURE	./consensus/validation.h	/^    BLOCK_TIME_FUTURE,          \/\/!< block timestamp was > 2 hours in the future (or our clock is bad)$/;"	m	class:ValidationInvalidReason
BLOCK_VALID_CHAIN	./chain.h	/^    BLOCK_VALID_CHAIN        =    4,$/;"	e	enum:uint32_t
BLOCK_VALID_HEADER	./chain.h	/^    BLOCK_VALID_HEADER       =    1,$/;"	e	enum:uint32_t
BLOCK_VALID_MASK	./chain.h	/^    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |$/;"	e	enum:uint32_t
BLOCK_VALID_SCRIPTS	./chain.h	/^    BLOCK_VALID_SCRIPTS      =    5,$/;"	e	enum:uint32_t
BLOCK_VALID_TRANSACTIONS	./chain.h	/^    BLOCK_VALID_TRANSACTIONS =    3,$/;"	e	enum:uint32_t
BLOCK_VALID_TREE	./chain.h	/^    BLOCK_VALID_TREE         =    2,$/;"	e	enum:uint32_t
BLOCK_VALID_UNKNOWN	./chain.h	/^    BLOCK_VALID_UNKNOWN      =    0,$/;"	e	enum:uint32_t
BLOOM_UPDATE_ALL	./bloom.h	/^    BLOOM_UPDATE_ALL = 1,$/;"	e	enum:bloomflags
BLOOM_UPDATE_MASK	./bloom.h	/^    BLOOM_UPDATE_MASK = 3,$/;"	e	enum:bloomflags
BLOOM_UPDATE_NONE	./bloom.h	/^    BLOOM_UPDATE_NONE = 0,$/;"	e	enum:bloomflags
BLOOM_UPDATE_P2PUBKEY_ONLY	./bloom.h	/^    BLOOM_UPDATE_P2PUBKEY_ONLY = 2,$/;"	e	enum:bloomflags
BM_LogAndApply	./leveldb/db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BOOL	./rpc/util.h	/^        BOOL,$/;"	m	class:RPCArg::Type
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_create)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_delete)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_evictionworks)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_find)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_getaddr)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_new_collisions)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_noevict)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_ports)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_select)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_simple)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_tried_collisions)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)$/;"	f
BOOST_AUTO_TEST_CASE	./test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)$/;"	f
BOOST_AUTO_TEST_CASE	./test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(arena_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(lockedpool_tests_live)$/;"	f
BOOST_AUTO_TEST_CASE	./test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)$/;"	f
BOOST_AUTO_TEST_CASE	./test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(BinaryOperatorTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetFeeTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(MoneyRangeTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(ToStringTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( bitwiseOperators )$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( divide )$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( getmaxcoverage ) \/\/ some more tests just to get 100% coverage$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( multiply )$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( plusMinus )$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( shifts ) { \/\/ "<<"  ">>"  "<<="  ">>="$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( unaryOperators ) \/\/ !    ~    -$/;"	f
BOOST_AUTO_TEST_CASE	./test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE(bignum_SetCompact)$/;"	f
BOOST_AUTO_TEST_CASE	./test/base32_tests.cpp	/^BOOST_AUTO_TEST_CASE(base32_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	./test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_DecodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	./test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_EncodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	./test/base64_tests.cpp	/^BOOST_AUTO_TEST_CASE(base64_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bech32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bech32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test1) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test2) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test3) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_high_target)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_low_target)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_mid_target)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_very_high_target)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockchain_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_difficulty_for_very_low_target)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationMaxTest) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationOverflowTest) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(TransactionsRequestSerializationTest) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(blockfilter_basic_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(blockfilter_type_names)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(blockfilters_json_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(gcsfilter_default_constructor)$/;"	f
BOOST_AUTO_TEST_CASE	./test/blockfilter_tests.cpp	/^BOOST_AUTO_TEST_CASE(gcsfilter_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_key)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_match)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_1)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(rolling_bloom)$/;"	f
BOOST_AUTO_TEST_CASE	./test/bswap_tests.cpp	/^BOOST_AUTO_TEST_CASE(bswap_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Max)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_One)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Zero)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)$/;"	f
BOOST_AUTO_TEST_CASE	./test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)$/;"	f
BOOST_AUTO_TEST_CASE	./test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_access)$/;"	f
BOOST_AUTO_TEST_CASE	./test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_add)$/;"	f
BOOST_AUTO_TEST_CASE	./test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_serialization)$/;"	f
BOOST_AUTO_TEST_CASE	./test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_spend)$/;"	f
BOOST_AUTO_TEST_CASE	./test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_write)$/;"	f
BOOST_AUTO_TEST_CASE	./test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/compress_tests.cpp	/^BOOST_AUTO_TEST_CASE(compress_amounts)$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(aes_cbc_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(aes_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(chacha20_testvector)$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(countbits_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(poly1305_testvector)$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(ripemd160_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha1_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha256d64)$/;"	f
BOOST_AUTO_TEST_CASE	./test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	./test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_erase_ok)$/;"	f
BOOST_AUTO_TEST_CASE	./test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_erase_parallel_ok)$/;"	f
BOOST_AUTO_TEST_CASE	./test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_generations)$/;"	f
BOOST_AUTO_TEST_CASE	./test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_hit_rate_ok)$/;"	f
BOOST_AUTO_TEST_CASE	./test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_cuckoocache_no_fakes)$/;"	f
BOOST_AUTO_TEST_CASE	./test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper)$/;"	f
BOOST_AUTO_TEST_CASE	./test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper_batch)$/;"	f
BOOST_AUTO_TEST_CASE	./test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper_iterator)$/;"	f
BOOST_AUTO_TEST_CASE	./test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)$/;"	f
BOOST_AUTO_TEST_CASE	./test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(existing_data_reindex)$/;"	f
BOOST_AUTO_TEST_CASE	./test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(iterator_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	./test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(iterator_string_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	./test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banning)$/;"	f
BOOST_AUTO_TEST_CASE	./test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banscore)$/;"	f
BOOST_AUTO_TEST_CASE	./test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_bantime)$/;"	f
BOOST_AUTO_TEST_CASE	./test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_mapOrphans)$/;"	f
BOOST_AUTO_TEST_CASE	./test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)$/;"	f
BOOST_AUTO_TEST_CASE	./test/denialofservice_tests.cpp	/^BOOST_AUTO_TEST_CASE(stale_tip_peer_management)$/;"	f
BOOST_AUTO_TEST_CASE	./test/descriptor_tests.cpp	/^BOOST_AUTO_TEST_CASE(descriptor_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_allocate)$/;"	f
BOOST_AUTO_TEST_CASE	./test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_filename)$/;"	f
BOOST_AUTO_TEST_CASE	./test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_flush)$/;"	f
BOOST_AUTO_TEST_CASE	./test/flatfile_tests.cpp	/^BOOST_AUTO_TEST_CASE(flatfile_open)$/;"	f
BOOST_AUTO_TEST_CASE	./test/fs_tests.cpp	/^BOOST_AUTO_TEST_CASE(fsbridge_fstream)$/;"	f
BOOST_AUTO_TEST_CASE	./test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolarg)$/;"	f
BOOST_AUTO_TEST_CASE	./test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolargno)$/;"	f
BOOST_AUTO_TEST_CASE	./test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubledash)$/;"	f
BOOST_AUTO_TEST_CASE	./test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(intarg)$/;"	f
BOOST_AUTO_TEST_CASE	./test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(stringarg)$/;"	f
BOOST_AUTO_TEST_CASE	./test/hash_tests.cpp	/^BOOST_AUTO_TEST_CASE(murmurhash3)$/;"	f
BOOST_AUTO_TEST_CASE	./test/hash_tests.cpp	/^BOOST_AUTO_TEST_CASE(siphash)$/;"	f
BOOST_AUTO_TEST_CASE	./test/key_io_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_io_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	./test/key_io_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_io_valid_gen)$/;"	f
BOOST_AUTO_TEST_CASE	./test/key_io_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_io_valid_parse)$/;"	f
BOOST_AUTO_TEST_CASE	./test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_key_negation)$/;"	f
BOOST_AUTO_TEST_CASE	./test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_signature_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_test1)$/;"	f
BOOST_AUTO_TEST_CASE	./test/limitedmap_tests.cpp	/^BOOST_AUTO_TEST_CASE(limitedmap_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolAncestryTests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolIndexingTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolRemoveTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)$/;"	f
BOOST_AUTO_TEST_CASE	./test/merkle_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/merkleblock_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_found)$/;"	f
BOOST_AUTO_TEST_CASE	./test/merkleblock_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_not_found)$/;"	f
BOOST_AUTO_TEST_CASE	./test/miner_tests.cpp	/^BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)$/;"	f
BOOST_AUTO_TEST_CASE	./test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	./test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_Sign)$/;"	f
BOOST_AUTO_TEST_CASE	./test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_verify)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LimitedAndReachable_CNetAddr)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LimitedAndReachable_Network)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LimitedAndReachable_NetworkCaseUnroutableAndInternal)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrdb_read)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(cnode_listen_port)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(cnode_simple_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_getgroup)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_networks)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_parsenetwork)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_properties)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_splithost)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(onioncat_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(subnet_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_malleability)$/;"	f
BOOST_AUTO_TEST_CASE	./test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_test1)$/;"	f
BOOST_AUTO_TEST_CASE	./test/policyestimator_tests.cpp	/^BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)$/;"	f
BOOST_AUTO_TEST_CASE	./test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work)$/;"	f
BOOST_AUTO_TEST_CASE	./test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	./test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)$/;"	f
BOOST_AUTO_TEST_CASE	./test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	./test/prevector_tests.cpp	/^BOOST_AUTO_TEST_CASE(PrevectorTestInt)$/;"	f
BOOST_AUTO_TEST_CASE	./test/raii_event_tests.cpp	/^BOOST_AUTO_TEST_CASE(raii_event_creation)$/;"	f
BOOST_AUTO_TEST_CASE	./test/raii_event_tests.cpp	/^BOOST_AUTO_TEST_CASE(raii_event_order)$/;"	f
BOOST_AUTO_TEST_CASE	./test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(fastrandom_randbits)$/;"	f
BOOST_AUTO_TEST_CASE	./test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(fastrandom_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(osrandom_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(shuffle_stat_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(stdrandom_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/reverselock_tests.cpp	/^BOOST_AUTO_TEST_CASE(reverselock_basics)$/;"	f
BOOST_AUTO_TEST_CASE	./test/reverselock_tests.cpp	/^BOOST_AUTO_TEST_CASE(reverselock_errors)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(json_parse_errors)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_ban)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_convert_values_generatetoaddress)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_getblockstats_calculate_percentiles_by_weight)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawparams)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawsign)$/;"	f
BOOST_AUTO_TEST_CASE	./test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_togglenetwork)$/;"	f
BOOST_AUTO_TEST_CASE	./test/sanity_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_sanity)$/;"	f
BOOST_AUTO_TEST_CASE	./test/scheduler_tests.cpp	/^BOOST_AUTO_TEST_CASE(manythreads)$/;"	f
BOOST_AUTO_TEST_CASE	./test/scheduler_tests.cpp	/^BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(AreInputsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(is)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(norecurse)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(set)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(sign)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_p2sh_tests.cpp	/^BOOST_AUTO_TEST_CASE(switchover)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_IsMine)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_Solver_success)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_amount_required_err)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_returns_true)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_index_err)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_serialization)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_size)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_FindAndDelete)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_GetScriptAsm)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_HasValidOps)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_IsPushOnly_on_invalid_scripts)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_PushData)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_build)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_can_append_self)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_cltv_truncated)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_combineSigs)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_json_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_push)$/;"	f
BOOST_AUTO_TEST_CASE	./test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(creation)$/;"	f
BOOST_AUTO_TEST_CASE	./test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(operators)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(class_methods)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(compactsize)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(insert_delete)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(noncanonical)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(sizes)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(varints)$/;"	f
BOOST_AUTO_TEST_CASE	./test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(varints_bitpatterns)$/;"	f
BOOST_AUTO_TEST_CASE	./test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_from_data)$/;"	f
BOOST_AUTO_TEST_CASE	./test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetSigOpCount)$/;"	f
BOOST_AUTO_TEST_CASE	./test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetTxSigOpCost)$/;"	f
BOOST_AUTO_TEST_CASE	./test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(findearliestatleast_edge_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(findearliestatleast_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(getlocator_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(skiplist_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(bitstream_reader_writer)$/;"	f
BOOST_AUTO_TEST_CASE	./test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_serializedata_xor)$/;"	f
BOOST_AUTO_TEST_CASE	./test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_vector_reader)$/;"	f
BOOST_AUTO_TEST_CASE	./test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_vector_writer)$/;"	f
BOOST_AUTO_TEST_CASE	./test/sync_tests.cpp	/^BOOST_AUTO_TEST_CASE(potential_deadlock_detected)$/;"	f
BOOST_AUTO_TEST_CASE	./test/timedata_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_MedianFilter)$/;"	f
BOOST_AUTO_TEST_CASE	./test/torcontrol_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseTorReplyMapping)$/;"	f
BOOST_AUTO_TEST_CASE	./test/torcontrol_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_SplitTorReplyLine)$/;"	f
BOOST_AUTO_TEST_CASE	./test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_transaction_tests)$/;"	f
BOOST_AUTO_TEST_CASE	./test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_Get)$/;"	f
BOOST_AUTO_TEST_CASE	./test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	./test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_big_witness_transaction)$/;"	f
BOOST_AUTO_TEST_CASE	./test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_witness)$/;"	f
BOOST_AUTO_TEST_CASE	./test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	./test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_valid)$/;"	f
BOOST_AUTO_TEST_CASE	./test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	./test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	./test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( conversion )$/;"	f
BOOST_AUTO_TEST_CASE	./test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	./test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( operator_with_self )$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(gettime)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(strprintf_numbers)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_Capitalize)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_DirIsWritable)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatParagraph)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatSubVersion)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_IsDigit)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_LockDirectory)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseDouble)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseInt32)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseInt64)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseUInt32)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseUInt64)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ToLower)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ToUpper)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatISO8601DateTime)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatMoney)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetArg)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetBoolArg)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetChainName)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_HexStr)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHex)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHexNumber)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseHex)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseMoney)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseParameters)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ReadConfigStream)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_TimingResistantEqual)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_criticalsection)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)$/;"	f
BOOST_AUTO_TEST_CASE	./test/util_threadnames_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_threadnames_test_rename_threaded)$/;"	f
BOOST_AUTO_TEST_CASE	./test/validation_block_tests.cpp	/^BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	./test/validation_tests.cpp	/^BOOST_AUTO_TEST_CASE(block_subsidy_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/validation_tests.cpp	/^BOOST_AUTO_TEST_CASE(subsidy_limit_test)$/;"	f
BOOST_AUTO_TEST_CASE	./test/validation_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_combiner_all)$/;"	f
BOOST_AUTO_TEST_CASE	./test/versionbits_tests.cpp	/^BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)$/;"	f
BOOST_AUTO_TEST_CASE	./test/versionbits_tests.cpp	/^BOOST_AUTO_TEST_CASE(versionbits_test)$/;"	f
BOOST_AUTO_TEST_CASE	./univalue/test/object.cpp	/^#define BOOST_AUTO_TEST_CASE(/;"	d	file:
BOOST_AUTO_TEST_CASE	./univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_array)$/;"	f
BOOST_AUTO_TEST_CASE	./univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_constructor)$/;"	f
BOOST_AUTO_TEST_CASE	./univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_object)$/;"	f
BOOST_AUTO_TEST_CASE	./univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_readwrite)$/;"	f
BOOST_AUTO_TEST_CASE	./univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_set)$/;"	f
BOOST_AUTO_TEST_CASE	./univalue/test/object.cpp	/^BOOST_AUTO_TEST_CASE(univalue_typecheck)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(ApproximateBestSubset)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(SelectCoins_test)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(bnb_search_test)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/coinselector_tests.cpp	/^BOOST_AUTO_TEST_CASE(knapsack_solver_test)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_directory)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_file)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/db_tests.cpp	/^BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_multiple)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_does_not_exist)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_directory)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_relative)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/init_tests.cpp	/^BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing2)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/psbt_wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(parse_hd_keypath)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/psbt_wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(psbt_updater_test)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/wallet_crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(decrypt) {$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/wallet_crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(encrypt) {$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/wallet_crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(passphrase) {$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(ComputeTimeSmart)$/;"	f
BOOST_AUTO_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(LoadReceiveRequests)$/;"	f
BOOST_AUTO_TEST_SUITE_END	./univalue/test/object.cpp	/^#define BOOST_AUTO_TEST_SUITE_END(/;"	d	file:
BOOST_CHECK	./univalue/test/object.cpp	/^#define BOOST_CHECK(/;"	d	file:
BOOST_CHECK_EQUAL	./univalue/test/object.cpp	/^#define BOOST_CHECK_EQUAL(/;"	d	file:
BOOST_CHECK_NO_THROW	./univalue/test/object.cpp	/^#define BOOST_CHECK_NO_THROW(/;"	d	file:
BOOST_CHECK_THROW	./univalue/test/object.cpp	/^#define BOOST_CHECK_THROW(/;"	d	file:
BOOST_CHRONO_LIB	./Makefile	/^BOOST_CHRONO_LIB = -lboost_chrono-mt$/;"	m
BOOST_CPPFLAGS	./Makefile	/^BOOST_CPPFLAGS = -DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC -pthread -I\/usr\/local\/include$/;"	m
BOOST_FILESYSTEM_LIB	./Makefile	/^BOOST_FILESYSTEM_LIB = -lboost_filesystem$/;"	m
BOOST_FILESYSTEM_NO_DEPRECATED	./fs.h	/^#define BOOST_FILESYSTEM_NO_DEPRECATED$/;"	d
BOOST_FIXTURE_TEST_CASE	./test/blockfilter_index_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(blockfilter_index_init_destroy, BasicTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./test/blockfilter_index_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./test/txindex_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./test/txvalidation_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./test/txvalidationcache_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./test/txvalidationcache_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./test/util_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./test/util_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(dummy_input_size_test, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	./wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_SUITE	./univalue/test/object.cpp	/^#define BOOST_FIXTURE_TEST_SUITE(/;"	d	file:
BOOST_LDFLAGS	./Makefile	/^BOOST_LDFLAGS = -L\/usr\/local\/lib$/;"	m
BOOST_LIBS	./Makefile	/^BOOST_LIBS = -L\/usr\/local\/lib -lboost_system -lboost_filesystem -lboost_thread-mt -lboost_chrono-mt$/;"	m
BOOST_SYSTEM_LIB	./Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_TEST_MODULE	./test/main.cpp	/^#define BOOST_TEST_MODULE /;"	d	file:
BOOST_THREAD_LIB	./Makefile	/^BOOST_THREAD_LIB = -lboost_thread-mt$/;"	m
BOOST_UNIT_TEST_FRAMEWORK_LIB	./Makefile	/^BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework-mt$/;"	m
BREW	./Makefile	/^BREW = brew$/;"	m
BREW	./secp256k1/Makefile	/^BREW = \/usr\/local\/bin\/brew$/;"	m
BTC	./qt/bitcoinunits.h	/^        BTC,$/;"	e	enum:BitcoinUnits::Unit
BTN_ABORT	./ui_interface.h	/^        BTN_ABORT   = 0x00040000U, \/\/ QMessageBox::Abort$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_APPLY	./ui_interface.h	/^        BTN_APPLY   = 0x02000000U, \/\/ QMessageBox::Apply$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CANCEL	./ui_interface.h	/^        BTN_CANCEL  = 0x00400000U, \/\/ QMessageBox::Cancel$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CLOSE	./ui_interface.h	/^        BTN_CLOSE   = 0x00200000U, \/\/ QMessageBox::Close$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_DISCARD	./ui_interface.h	/^        BTN_DISCARD = 0x00800000U, \/\/ QMessageBox::Discard$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_HELP	./ui_interface.h	/^        BTN_HELP    = 0x01000000U, \/\/ QMessageBox::Help$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_IGNORE	./ui_interface.h	/^        BTN_IGNORE  = 0x00100000U, \/\/ QMessageBox::Ignore$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_MASK	./ui_interface.h	/^        BTN_MASK = (BTN_OK | BTN_YES | BTN_NO | BTN_ABORT | BTN_RETRY | BTN_IGNORE |$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_NO	./ui_interface.h	/^        BTN_NO      = 0x00010000U, \/\/ QMessageBox::No$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_OK	./ui_interface.h	/^        BTN_OK      = 0x00000400U, \/\/ QMessageBox::Ok$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RESET	./ui_interface.h	/^        BTN_RESET   = 0x04000000U, \/\/ QMessageBox::Reset$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RETRY	./ui_interface.h	/^        BTN_RETRY   = 0x00080000U, \/\/ QMessageBox::Retry$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_YES	./ui_interface.h	/^        BTN_YES     = 0x00004000U, \/\/ QMessageBox::Yes$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BUFFER_SIZE	./bench/crypto_hash.cpp	/^static const uint64_t BUFFER_SIZE = 1000*1000;$/;"	v	file:
BUFFER_SIZE_LARGE	./bench/chacha20.cpp	/^static const uint64_t BUFFER_SIZE_LARGE = 1024*1024;$/;"	v	file:
BUFFER_SIZE_LARGE	./bench/poly1305.cpp	/^static constexpr uint64_t BUFFER_SIZE_LARGE = 1024*1024;$/;"	v	file:
BUFFER_SIZE_SMALL	./bench/chacha20.cpp	/^static const uint64_t BUFFER_SIZE_SMALL = 256;$/;"	v	file:
BUFFER_SIZE_SMALL	./bench/poly1305.cpp	/^static constexpr uint64_t BUFFER_SIZE_SMALL = 256;$/;"	v	file:
BUFFER_SIZE_TINY	./bench/chacha20.cpp	/^static const uint64_t BUFFER_SIZE_TINY  = 64;$/;"	v	file:
BUFFER_SIZE_TINY	./bench/poly1305.cpp	/^static constexpr uint64_t BUFFER_SIZE_TINY  = 64;$/;"	v	file:
BUILD_DESC	./clientversion.cpp	/^#define BUILD_DESC /;"	d	file:
BUILD_DESC_FROM_COMMIT	./clientversion.cpp	/^#define BUILD_DESC_FROM_COMMIT(/;"	d	file:
BUILD_DESC_FROM_UNKNOWN	./clientversion.cpp	/^#define BUILD_DESC_FROM_UNKNOWN(/;"	d	file:
BUILD_DESC_WITH_SUFFIX	./clientversion.cpp	/^#define BUILD_DESC_WITH_SUFFIX(/;"	d	file:
BUILD_EXEEXT	./secp256k1/Makefile	/^BUILD_EXEEXT = $/;"	m
BUILD_EXEEXT	./univalue/Makefile	/^BUILD_EXEEXT = $/;"	m
BUILD_OBJEXT	./secp256k1/Makefile	/^BUILD_OBJEXT = $/;"	m
BUILD_SUFFIX	./obj/build.h	/^#define BUILD_SUFFIX /;"	d
BYTES_PER_PIXEL	./qt/notificator.cpp	/^const int BYTES_PER_PIXEL = 4;$/;"	v
BackgroundCall	./leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	./leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
Backup	./wallet/db.cpp	/^bool BerkeleyDatabase::Backup(const std::string& strDest)$/;"	f	class:BerkeleyDatabase
BackupSettings	./qt/optionsmodel.cpp	/^static void BackupSettings(const fs::path& filename, const QSettings& src)$/;"	f	file:
BackupWallet	./wallet/wallet.cpp	/^bool CWallet::BackupWallet(const std::string& strDest)$/;"	f	class:CWallet
BadBlock	./test/validation_block_tests.cpp	/^const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)$/;"	f
Balance	./wallet/wallet.h	/^    struct Balance {$/;"	s	class:final
Ban	./banman.cpp	/^void BanMan::Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)$/;"	f	class:BanMan
Ban	./banman.cpp	/^void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)$/;"	f	class:BanMan
BanMan	./banman.cpp	/^BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time)$/;"	f	class:BanMan
BanMan	./banman.h	/^class BanMan$/;"	c
BanReason	./addrdb.h	/^typedef enum BanReason$/;"	g
BanReason	./addrdb.h	/^} BanReason;$/;"	t	typeref:enum:BanReason
BanReasonManuallyAdded	./addrdb.h	/^    BanReasonManuallyAdded    = 2$/;"	e	enum:BanReason
BanReasonNodeMisbehaving	./addrdb.h	/^    BanReasonNodeMisbehaving  = 1,$/;"	e	enum:BanReason
BanReasonUnknown	./addrdb.h	/^    BanReasonUnknown          = 0,$/;"	e	enum:BanReason
BanTableModel	./qt/bantablemodel.cpp	/^BanTableModel::BanTableModel(interfaces::Node& node, ClientModel *parent) :$/;"	f	class:BanTableModel
BanTableModel	./qt/bantablemodel.h	/^class BanTableModel : public QAbstractTableModel$/;"	c
BanTablePriv	./qt/bantablemodel.cpp	/^class BanTablePriv$/;"	c	file:
BannedListChanged	./qt/clientmodel.cpp	/^static void BannedListChanged(ClientModel *clientmodel)$/;"	f	file:
BannedListChanged	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::BannedListChangedSig> BannedListChanged;$/;"	m	struct:UISignals	file:
BannedListChanged	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);$/;"	v
BannedListChanged	./ui_interface.cpp	/^void CClientUIInterface::BannedListChanged() { return g_ui_signals.BannedListChanged(); }$/;"	f	class:CClientUIInterface
BannedNodeLessThan	./qt/bantablemodel.h	/^    BannedNodeLessThan(int nColumn, Qt::SortOrder fOrder) :$/;"	f	class:BannedNodeLessThan
BannedNodeLessThan	./qt/bantablemodel.h	/^class BannedNodeLessThan$/;"	c
BannedSetIsDirty	./banman.cpp	/^bool BanMan::BannedSetIsDirty()$/;"	f	class:BanMan
Bantime	./qt/bantablemodel.h	/^        Bantime = 1$/;"	e	enum:BanTableModel::ColumnIndex
Base58CheckEncode	./bench/base58.cpp	/^static void Base58CheckEncode(benchmark::State& state)$/;"	f	file:
Base58Decode	./bench/base58.cpp	/^static void Base58Decode(benchmark::State& state)$/;"	f	file:
Base58Encode	./bench/base58.cpp	/^static void Base58Encode(benchmark::State& state)$/;"	f	file:
Base58Prefix	./chainparams.h	/^    const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }$/;"	f	class:CChainParams
Base58Type	./chainparams.h	/^    enum Base58Type {$/;"	g	class:CChainParams
BaseIndex	./index/base.h	/^class BaseIndex : public CValidationInterface$/;"	c
BaseParams	./chainparamsbase.cpp	/^const CBaseChainParams& BaseParams()$/;"	f
BaseRequestHandler	./bitcoin-cli.cpp	/^class BaseRequestHandler$/;"	c	file:
BaseSignatureChecker	./script/interpreter.h	/^class BaseSignatureChecker$/;"	c
BaseSignatureCreator	./script/sign.h	/^class BaseSignatureCreator {$/;"	c
BasicFilterElements	./blockfilter.cpp	/^static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,$/;"	f	file:
BasicTestingSetup	./test/setup_common.cpp	/^BasicTestingSetup::BasicTestingSetup(const std::string& chainName)$/;"	f	class:BasicTestingSetup
BasicTestingSetup	./test/setup_common.h	/^struct BasicTestingSetup {$/;"	s
BatchWrite	./coins.cpp	/^bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }$/;"	f	class:CCoinsView
BatchWrite	./coins.cpp	/^bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }$/;"	f	class:CCoinsViewBacked
BatchWrite	./coins.cpp	/^bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
BatchWrite	./txdb.cpp	/^bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {$/;"	f	class:CCoinsViewDB
Bech32Decode	./bench/bech32.cpp	/^static void Bech32Decode(benchmark::State& state)$/;"	f	file:
Bech32Encode	./bench/bech32.cpp	/^static void Bech32Encode(benchmark::State& state)$/;"	f	file:
Bech32HRP	./chainparams.h	/^    const std::string& Bech32HRP() const { return bech32_hrp; }$/;"	f	class:CChainParams
BeforeFile	./leveldb/db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
Bench	./bench/bench.h	/^    struct Bench {$/;"	s	class:benchmark::BenchRunner
BenchFunction	./bench/bench.h	/^typedef std::function<void(State&)> BenchFunction;$/;"	t	namespace:benchmark
BenchLockedPool	./bench/lockedpool.cpp	/^static void BenchLockedPool(benchmark::State& state)$/;"	f	file:
BenchRunner	./bench/bench.cpp	/^benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func, uint64_t num_iters_for_one_second)$/;"	f	class:benchmark::BenchRunner
BenchRunner	./bench/bench.h	/^class BenchRunner$/;"	c	namespace:benchmark
Benchmark	./leveldb/db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	./leveldb/db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	./leveldb/doc/bench/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	./leveldb/doc/bench/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	./leveldb/doc/bench/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
BenchmarkMap	./bench/bench.h	/^    typedef std::map<std::string, Bench> BenchmarkMap;$/;"	t	class:benchmark::BenchRunner
BerkeleyBatch	./wallet/db.cpp	/^BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr)$/;"	f	class:BerkeleyBatch
BerkeleyBatch	./wallet/db.h	/^class BerkeleyBatch$/;"	c
BerkeleyDatabase	./wallet/db.h	/^    BerkeleyDatabase() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)$/;"	f	class:BerkeleyDatabase
BerkeleyDatabase	./wallet/db.h	/^    BerkeleyDatabase(std::shared_ptr<BerkeleyEnvironment> env, std::string filename) :$/;"	f	class:BerkeleyDatabase
BerkeleyDatabase	./wallet/db.h	/^class BerkeleyDatabase$/;"	c
BerkeleyEnvironment	./wallet/db.cpp	/^BerkeleyEnvironment::BerkeleyEnvironment()$/;"	f	class:BerkeleyEnvironment
BerkeleyEnvironment	./wallet/db.cpp	/^BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir_path.string())$/;"	f	class:BerkeleyEnvironment
BerkeleyEnvironment	./wallet/db.h	/^class BerkeleyEnvironment$/;"	c
Between	./leveldb/db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	./leveldb/table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigEndian	./serialize.h	/^    explicit BigEndian(I& val) : m_val(val)$/;"	f	class:BigEndian
BigEndian	./serialize.h	/^class BigEndian$/;"	c
BigString	./leveldb/db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Bind	./net.cpp	/^bool CConnman::Bind(const CService &addr, unsigned int flags) {$/;"	f	class:CConnman
BindFlags	./net.cpp	/^enum BindFlags {$/;"	g	file:
BindListenPort	./net.cpp	/^bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)$/;"	f	class:CConnman
BindWallet	./wallet/wallet.h	/^    void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
BitStreamReader	./streams.h	/^    explicit BitStreamReader(IStream& istream) : m_istream(istream) {}$/;"	f	class:BitStreamReader
BitStreamReader	./streams.h	/^class BitStreamReader$/;"	c
BitStreamWriter	./streams.h	/^    explicit BitStreamWriter(OStream& ostream) : m_ostream(ostream) {}$/;"	f	class:BitStreamWriter
BitStreamWriter	./streams.h	/^class BitStreamWriter$/;"	c
BitcoinAddressCheckValidator	./qt/bitcoinaddressvalidator.cpp	/^BitcoinAddressCheckValidator::BitcoinAddressCheckValidator(QObject *parent) :$/;"	f	class:BitcoinAddressCheckValidator
BitcoinAddressCheckValidator	./qt/bitcoinaddressvalidator.h	/^class BitcoinAddressCheckValidator : public QValidator$/;"	c
BitcoinAddressEntryValidator	./qt/bitcoinaddressvalidator.cpp	/^BitcoinAddressEntryValidator::BitcoinAddressEntryValidator(QObject *parent) :$/;"	f	class:BitcoinAddressEntryValidator
BitcoinAddressEntryValidator	./qt/bitcoinaddressvalidator.h	/^class BitcoinAddressEntryValidator : public QValidator$/;"	c
BitcoinAmountField	./qt/bitcoinamountfield.cpp	/^BitcoinAmountField::BitcoinAmountField(QWidget *parent) :$/;"	f	class:BitcoinAmountField
BitcoinAmountField	./qt/bitcoinamountfield.h	/^class BitcoinAmountField: public QWidget$/;"	c
BitcoinApplication	./qt/bitcoin.cpp	/^BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char **argv):$/;"	f	class:BitcoinApplication
BitcoinApplication	./qt/bitcoin.h	/^class BitcoinApplication: public QApplication$/;"	c
BitcoinCore	./qt/bitcoin.cpp	/^BitcoinCore::BitcoinCore(interfaces::Node& node) :$/;"	f	class:BitcoinCore
BitcoinCore	./qt/bitcoin.h	/^class BitcoinCore: public QObject$/;"	c
BitcoinGUI	./qt/bitcoingui.cpp	/^BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :$/;"	f	class:BitcoinGUI
BitcoinGUI	./qt/bitcoingui.h	/^class BitcoinGUI : public QMainWindow$/;"	c
BitcoinUnit	./qt/bitcoinunits.h	/^typedef BitcoinUnits::Unit BitcoinUnit;$/;"	t
BitcoinUnits	./qt/bitcoinunits.cpp	/^BitcoinUnits::BitcoinUnits(QObject *parent):$/;"	f	class:BitcoinUnits
BitcoinUnits	./qt/bitcoinunits.h	/^class BitcoinUnits: public QAbstractListModel$/;"	c
Block	./leveldb/table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	./leveldb/table/block.h	/^class Block {$/;"	c	namespace:leveldb
Block	./test/validation_block_tests.cpp	/^std::shared_ptr<CBlock> Block(const uint256& prev_hash)$/;"	f
BlockAssembler	./miner.cpp	/^BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions()) {}$/;"	f	class:BlockAssembler
BlockAssembler	./miner.cpp	/^BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)$/;"	f	class:BlockAssembler
BlockAssembler	./miner.h	/^class BlockAssembler$/;"	c
BlockBuildMerkleTree	./test/merkle_tests.cpp	/^static uint256 BlockBuildMerkleTree(const CBlock& block, bool* fMutated, std::vector<uint256>& vMerkleTree)$/;"	f	file:
BlockBuilder	./leveldb/table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	./leveldb/table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockChecked	./net_processing.cpp	/^void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {$/;"	f	class:PeerLogicValidation
BlockChecked	./validationinterface.cpp	/^    boost::signals2::scoped_connection BlockChecked;$/;"	m	struct:ValidationInterfaceConnections	file:
BlockChecked	./validationinterface.cpp	/^    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;$/;"	m	struct:MainSignalsInstance	file:
BlockChecked	./validationinterface.cpp	/^void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {$/;"	f	class:CMainSignals
BlockChecked	./validationinterface.h	/^    virtual void BlockChecked(const CBlock&, const CValidationState&) {}$/;"	f	class:CValidationInterface
BlockConnected	./index/base.cpp	/^void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,$/;"	f	class:BaseIndex
BlockConnected	./interfaces/chain.h	/^        virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted) {}$/;"	f	class:interfaces::Chain::Notifications
BlockConnected	./net_processing.cpp	/^void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {$/;"	f	class:PeerLogicValidation
BlockConnected	./validation.cpp	/^    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {$/;"	f	class:ConnectTrace
BlockConnected	./validationinterface.cpp	/^    boost::signals2::scoped_connection BlockConnected;$/;"	m	struct:ValidationInterfaceConnections	file:
BlockConnected	./validationinterface.cpp	/^    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;$/;"	m	struct:MainSignalsInstance	file:
BlockConnected	./validationinterface.cpp	/^void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {$/;"	f	class:CMainSignals
BlockConnected	./validationinterface.h	/^    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}$/;"	f	class:CValidationInterface
BlockConnected	./wallet/wallet.cpp	/^void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) {$/;"	f	class:CWallet
BlockConnected	./zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)$/;"	f	class:CZMQNotificationInterface
BlockConstructor	./leveldb/table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	./leveldb/table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
BlockContents	./leveldb/table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockDisconnected	./interfaces/chain.h	/^        virtual void BlockDisconnected(const CBlock& block) {}$/;"	f	class:interfaces::Chain::Notifications
BlockDisconnected	./validationinterface.cpp	/^    boost::signals2::scoped_connection BlockDisconnected;$/;"	m	struct:ValidationInterfaceConnections	file:
BlockDisconnected	./validationinterface.cpp	/^    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;$/;"	m	struct:MainSignalsInstance	file:
BlockDisconnected	./validationinterface.cpp	/^void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {$/;"	f	class:CMainSignals
BlockDisconnected	./validationinterface.h	/^    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}$/;"	f	class:CValidationInterface
BlockDisconnected	./wallet/wallet.cpp	/^void CWallet::BlockDisconnected(const CBlock& block) {$/;"	f	class:CWallet
BlockDisconnected	./zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)$/;"	f	class:CZMQNotificationInterface
BlockFileSeq	./validation.cpp	/^static FlatFileSeq BlockFileSeq()$/;"	f	file:
BlockFilter	./blockfilter.cpp	/^BlockFilter::BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo)$/;"	f	class:BlockFilter
BlockFilter	./blockfilter.cpp	/^BlockFilter::BlockFilter(BlockFilterType filter_type, const uint256& block_hash,$/;"	f	class:BlockFilter
BlockFilter	./blockfilter.h	/^class BlockFilter$/;"	c
BlockFilterIndex	./index/blockfilterindex.cpp	/^BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,$/;"	f	class:BlockFilterIndex
BlockFilterType	./blockfilter.h	/^enum class BlockFilterType : uint8_t$/;"	c
BlockFilterTypeByName	./blockfilter.cpp	/^bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type) {$/;"	f
BlockFilterTypeName	./blockfilter.cpp	/^const std::string& BlockFilterTypeName(BlockFilterType filter_type)$/;"	f
BlockFunction	./leveldb/table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon17	file:
BlockGetMerkleBranch	./test/merkle_tests.cpp	/^static std::vector<uint256> BlockGetMerkleBranch(const CBlock& block, const std::vector<uint256>& vMerkleTree, int nIndex)$/;"	f	file:
BlockHandle	./leveldb/table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	./leveldb/table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockHasher	./validation.h	/^struct BlockHasher$/;"	s
BlockMap	./validation.h	/^typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;$/;"	t
BlockMerkleBranch	./test/merkle_tests.cpp	/^static std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)$/;"	f	file:
BlockMerkleRoot	./consensus/merkle.cpp	/^uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BlockNotifyCallback	./init.cpp	/^static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockNotifyGenesisWait	./init.cpp	/^static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockReader	./leveldb/table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BlockSource	./qt/clientmodel.h	/^enum class BlockSource {$/;"	c
BlockSpan	./policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::BlockSpan() const$/;"	f	class:CBlockPolicyEstimator
BlockTipChanged	./qt/clientmodel.cpp	/^static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int height, int64_t blockTime, double verificationProgress, bool fHeader)$/;"	f	file:
BlockTransactions	./blockencodings.h	/^    BlockTransactions() {}$/;"	f	class:BlockTransactions
BlockTransactions	./blockencodings.h	/^    explicit BlockTransactions(const BlockTransactionsRequest& req) :$/;"	f	class:BlockTransactions
BlockTransactions	./blockencodings.h	/^class BlockTransactions {$/;"	c
BlockTransactionsRequest	./blockencodings.h	/^class BlockTransactionsRequest {$/;"	c
BlockTxCount	./blockencodings.h	/^    size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }$/;"	f	class:CBlockHeaderAndShortTxIDs
BlockUntilSyncedToCurrentChain	./index/base.cpp	/^bool BaseIndex::BlockUntilSyncedToCurrentChain()$/;"	f	class:BaseIndex
BlockUntilSyncedToCurrentChain	./wallet/wallet.cpp	/^void CWallet::BlockUntilSyncedToCurrentChain() {$/;"	f	class:CWallet
BlockWitnessMerkleRoot	./consensus/merkle.cpp	/^uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BloomFilterPolicy	./leveldb/util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
BloomFilterPolicy	./leveldb/util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon3	file:
BloomHash	./leveldb/util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon3
BloomTest	./leveldb/util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) { }$/;"	f	class:leveldb::BloomTest
BloomTest	./leveldb/util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb	file:
BnBExhaustion	./bench/coin_selection.cpp	/^static void BnBExhaustion(benchmark::State& state)$/;"	f	file:
BroadcastTransaction	./node/transaction.cpp	/^TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)$/;"	f
Build	./leveldb/db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
Build	./leveldb/db/fault_injection_test.cc	/^  void Build(int start_idx, int num_vals) {$/;"	f	class:leveldb::FaultInjectionTest
Build	./leveldb/util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildBatchGroup	./leveldb/db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildBlockTestCase	./test/blockencodings_tests.cpp	/^static CBlock BuildBlockTestCase() {$/;"	f	file:
BuildChain	./test/blockfilter_index_tests.cpp	/^static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,$/;"	f	file:
BuildChain	./test/validation_block_tests.cpp	/^void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)$/;"	f
BuildCreditingTransaction	./bench/verify_script.cpp	/^static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)$/;"	f	file:
BuildCreditingTransaction	./test/script_tests.cpp	/^CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0)$/;"	f
BuildHashedSet	./blockfilter.cpp	/^std::vector<uint64_t> GCSFilter::BuildHashedSet(const ElementSet& elements) const$/;"	f	class:GCSFilter
BuildParams	./blockfilter.cpp	/^bool BlockFilter::BuildParams(GCSFilter::Params& params) const$/;"	f	class:BlockFilter
BuildSkip	./chain.cpp	/^void CBlockIndex::BuildSkip()$/;"	f	class:CBlockIndex
BuildSpendingTransaction	./bench/verify_script.cpp	/^static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)$/;"	f	file:
BuildSpendingTransaction	./test/script_tests.cpp	/^CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CTransaction& txCredit)$/;"	f
BuildTable	./leveldb/db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
BuildTxs	./test/sigopcount_tests.cpp	/^static void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& witness)$/;"	f	file:
Builder	./leveldb/db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	./leveldb/db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BumpFee	./qt/test/wallettests.cpp	/^void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, std::string expectError, bool cancel)$/;"	f	namespace:__anon63
BuriedForkDescPushBack	./rpc/blockchain.cpp	/^static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height)$/;"	f	file:
BySmallestKey	./leveldb/db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
ByteSize	./leveldb/db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ByteVectorHash	./util/bytevectorhash.cpp	/^ByteVectorHash::ByteVectorHash()$/;"	f	class:ByteVectorHash
BytesToKeySHA512AES	./wallet/crypter.cpp	/^int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const$/;"	f	class:CCrypter
BytewiseComparator	./leveldb/util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	./leveldb/util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
BytewiseComparatorImpl	./leveldb/util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon7	file:
CACHED_INVALID	./consensus/validation.h	/^    CACHED_INVALID,          \/\/!< this object was cached as being invalid, but we don't know why$/;"	m	class:ValidationInvalidReason
CADDR_TIME_VERSION	./version.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CAddrDB	./addrdb.cpp	/^CAddrDB::CAddrDB()$/;"	f	class:CAddrDB
CAddrDB	./addrdb.h	/^class CAddrDB$/;"	c
CAddrInfo	./addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	./addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	./addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	./addrman.h	/^    CAddrMan()$/;"	f	class:CAddrMan
CAddrMan	./addrman.h	/^class CAddrMan$/;"	c
CAddrManCorrupted	./test/net_tests.cpp	/^class CAddrManCorrupted : public CAddrManSerializationMock$/;"	c	file:
CAddrManSerializationMock	./test/net_tests.cpp	/^class CAddrManSerializationMock : public CAddrMan$/;"	c	file:
CAddrManTest	./test/addrman_tests.cpp	/^    explicit CAddrManTest(bool makeDeterministic = true)$/;"	f	class:CAddrManTest
CAddrManTest	./test/addrman_tests.cpp	/^class CAddrManTest : public CAddrMan$/;"	c	file:
CAddrManUncorrupted	./test/net_tests.cpp	/^class CAddrManUncorrupted : public CAddrManSerializationMock$/;"	c	file:
CAddress	./protocol.cpp	/^CAddress::CAddress() : CService()$/;"	f	class:CAddress
CAddress	./protocol.cpp	/^CAddress::CAddress(CService ipIn, ServiceFlags nServicesIn) : CService(ipIn)$/;"	f	class:CAddress
CAddress	./protocol.h	/^class CAddress : public CService$/;"	c
CAddressBookData	./wallet/wallet.h	/^    CAddressBookData() : purpose("unknown") {}$/;"	f	class:CAddressBookData
CAddressBookData	./wallet/wallet.h	/^class CAddressBookData$/;"	c
CAmount	./amount.h	/^typedef int64_t CAmount;$/;"	t
CAutoFile	./streams.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	./streams.h	/^class CAutoFile$/;"	c
CBCDecrypt	./crypto/aes.cpp	/^static int CBCDecrypt(const T& dec, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)$/;"	f	file:
CBCEncrypt	./crypto/aes.cpp	/^static int CBCEncrypt(const T& enc, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)$/;"	f	file:
CBanDB	./addrdb.cpp	/^CBanDB::CBanDB(fs::path ban_list_path) : m_ban_list_path(std::move(ban_list_path))$/;"	f	class:CBanDB
CBanDB	./addrdb.h	/^class CBanDB$/;"	c
CBanEntry	./addrdb.h	/^    CBanEntry()$/;"	f	class:CBanEntry
CBanEntry	./addrdb.h	/^    explicit CBanEntry(int64_t nCreateTimeIn)$/;"	f	class:CBanEntry
CBanEntry	./addrdb.h	/^    explicit CBanEntry(int64_t n_create_time_in, BanReason ban_reason_in) : CBanEntry(n_create_time_in)$/;"	f	class:CBanEntry
CBanEntry	./addrdb.h	/^class CBanEntry$/;"	c
CBaseChainParams	./chainparamsbase.h	/^    CBaseChainParams(const std::string& data_dir, int rpc_port) : nRPCPort(rpc_port), strDataDir(data_dir) {}$/;"	f	class:CBaseChainParams
CBaseChainParams	./chainparamsbase.h	/^class CBaseChainParams$/;"	c
CBasicKeyStore	./keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBitcoinLevelDBLogger	./dbwrapper.cpp	/^class CBitcoinLevelDBLogger : public leveldb::Logger {$/;"	c	file:
CBlock	./primitives/block.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	./primitives/block.h	/^    CBlock(const CBlockHeader &header)$/;"	f	class:CBlock
CBlock	./primitives/block.h	/^class CBlock : public CBlockHeader$/;"	c
CBlockFileInfo	./chain.h	/^     CBlockFileInfo() {$/;"	f	class:CBlockFileInfo
CBlockFileInfo	./chain.h	/^class CBlockFileInfo$/;"	c
CBlockHeader	./primitives/block.h	/^    CBlockHeader()$/;"	f	class:CBlockHeader
CBlockHeader	./primitives/block.h	/^class CBlockHeader$/;"	c
CBlockHeaderAndShortTxIDs	./blockencodings.cpp	/^CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	./blockencodings.h	/^    CBlockHeaderAndShortTxIDs() {}$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	./blockencodings.h	/^class CBlockHeaderAndShortTxIDs {$/;"	c
CBlockIndex	./chain.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	./chain.h	/^    explicit CBlockIndex(const CBlockHeader& block)$/;"	f	class:CBlockIndex
CBlockIndex	./chain.h	/^class CBlockIndex$/;"	c
CBlockIndexWorkComparator	./validation.cpp	/^    struct CBlockIndexWorkComparator$/;"	s	namespace:__anon49	file:
CBlockLocator	./primitives/block.h	/^    CBlockLocator() {}$/;"	f	struct:CBlockLocator
CBlockLocator	./primitives/block.h	/^    explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}$/;"	f	struct:CBlockLocator
CBlockLocator	./primitives/block.h	/^struct CBlockLocator$/;"	s
CBlockPolicyEstimator	./policy/fees.cpp	/^CBlockPolicyEstimator::CBlockPolicyEstimator()$/;"	f	class:CBlockPolicyEstimator
CBlockPolicyEstimator	./policy/fees.h	/^class CBlockPolicyEstimator$/;"	c	class:FeeEstimateHorizon
CBlockReject	./net_processing.cpp	/^struct CBlockReject {$/;"	s	namespace:__anon89	file:
CBlockTemplate	./miner.h	/^struct CBlockTemplate$/;"	s
CBlockTreeDB	./txdb.cpp	/^CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.IsArgSet("-blocksdir") ? GetDataDir() \/ "blocks" \/ "index" : GetBlocksDir() \/ "index", nCacheSize, fMemory, fWipe) {$/;"	f	class:CBlockTreeDB
CBlockTreeDB	./txdb.h	/^class CBlockTreeDB : public CDBWrapper$/;"	c
CBlockUndo	./undo.h	/^class CBlockUndo$/;"	c
CBloomFilter	./bloom.cpp	/^CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweakIn, unsigned char nFlagsIn) :$/;"	f	class:CBloomFilter
CBloomFilter	./bloom.h	/^    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}$/;"	f	class:CBloomFilter
CBloomFilter	./bloom.h	/^class CBloomFilter$/;"	c
CBufferedFile	./streams.h	/^    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :$/;"	f	class:CBufferedFile
CBufferedFile	./streams.h	/^class CBufferedFile$/;"	c
CC	./Makefile	/^CC = \/usr\/local\/bin\/ccache gcc$/;"	m
CC	./secp256k1/Makefile	/^CC = gcc$/;"	m
CC	./univalue/Makefile	/^CC = gcc$/;"	m
CCACHE	./Makefile	/^CCACHE = \/usr\/local\/bin\/ccache$/;"	m
CCAS	./secp256k1/Makefile	/^CCAS = gcc$/;"	m
CCASCOMPILE	./secp256k1/Makefile	/^CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)$/;"	m
CCASDEPMODE	./secp256k1/Makefile	/^CCASDEPMODE = depmode=gcc3$/;"	m
CCASFLAGS	./secp256k1/Makefile	/^CCASFLAGS = -g -O2$/;"	m
CCDEPMODE	./Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	./secp256k1/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	./univalue/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	./Makefile	/^CCLD = $(CC)$/;"	m
CCLD	./secp256k1/Makefile	/^CCLD = $(CC)$/;"	m
CC_FOR_BUILD	./secp256k1/Makefile	/^CC_FOR_BUILD = gcc$/;"	m
CChain	./chain.h	/^class CChain {$/;"	c
CChainParams	./chainparams.h	/^    CChainParams() {}$/;"	f	class:CChainParams
CChainParams	./chainparams.h	/^class CChainParams$/;"	c
CChainState	./validation.cpp	/^class CChainState {$/;"	c	file:
CCheckQueue	./checkqueue.h	/^    explicit CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), nBatchSize(nBatchSizeIn) {}$/;"	f	class:CCheckQueue
CCheckQueue	./checkqueue.h	/^class CCheckQueue$/;"	c
CCheckQueueControl	./checkqueue.h	/^    explicit CCheckQueueControl(CCheckQueue<T> * const pqueueIn) : pqueue(pqueueIn), fDone(false)$/;"	f	class:CCheckQueueControl
CCheckQueueControl	./checkqueue.h	/^class CCheckQueueControl$/;"	c
CCheckQueueSpeedPrevectorJob	./bench/checkqueue.cpp	/^static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)$/;"	f	file:
CCheckpointData	./chainparams.h	/^struct CCheckpointData {$/;"	s
CClientUIInterface	./ui_interface.h	/^class CClientUIInterface$/;"	c
CCoin	./rest.cpp	/^    CCoin() : nHeight(0) {}$/;"	f	struct:CCoin
CCoin	./rest.cpp	/^    explicit CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}$/;"	f	struct:CCoin
CCoin	./rest.cpp	/^struct CCoin {$/;"	s	file:
CCoinControl	./wallet/coincontrol.h	/^    CCoinControl()$/;"	f	class:CCoinControl
CCoinControl	./wallet/coincontrol.h	/^class CCoinControl$/;"	c
CCoinControlWidgetItem	./qt/coincontroldialog.h	/^    explicit CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	./qt/coincontroldialog.h	/^    explicit CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	./qt/coincontroldialog.h	/^    explicit CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	./qt/coincontroldialog.h	/^class CCoinControlWidgetItem : public QTreeWidgetItem$/;"	c
CCoins	./txdb.cpp	/^    CCoins() : fCoinBase(false), vout(0), nHeight(0) { }$/;"	f	class:__anon122::CCoins
CCoins	./txdb.cpp	/^class CCoins$/;"	c	namespace:__anon122	file:
CCoinsCacheEntry	./coins.h	/^    CCoinsCacheEntry() : flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	./coins.h	/^    explicit CCoinsCacheEntry(Coin&& coin_) : coin(std::move(coin_)), flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	./coins.h	/^struct CCoinsCacheEntry$/;"	s
CCoinsCaching	./bench/ccoins_caching.cpp	/^static void CCoinsCaching(benchmark::State& state)$/;"	f	file:
CCoinsMap	./coins.h	/^typedef std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher> CCoinsMap;$/;"	t
CCoinsStats	./rpc/blockchain.cpp	/^    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nBogoSize(0), nDiskSize(0), nTotalAmount(0) {}$/;"	f	struct:CCoinsStats
CCoinsStats	./rpc/blockchain.cpp	/^struct CCoinsStats$/;"	s	file:
CCoinsView	./coins.h	/^class CCoinsView$/;"	c
CCoinsViewBacked	./coins.cpp	/^CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }$/;"	f	class:CCoinsViewBacked
CCoinsViewBacked	./coins.h	/^class CCoinsViewBacked : public CCoinsView$/;"	c
CCoinsViewCache	./coins.cpp	/^CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}$/;"	f	class:CCoinsViewCache
CCoinsViewCache	./coins.h	/^class CCoinsViewCache : public CCoinsViewBacked$/;"	c
CCoinsViewCacheTest	./test/coins_tests.cpp	/^    explicit CCoinsViewCacheTest(CCoinsView* _base) : CCoinsViewCache(_base) {}$/;"	f	class:__anon60::CCoinsViewCacheTest
CCoinsViewCacheTest	./test/coins_tests.cpp	/^class CCoinsViewCacheTest : public CCoinsViewCache$/;"	c	namespace:__anon60	file:
CCoinsViewCursor	./coins.h	/^    CCoinsViewCursor(const uint256 &hashBlockIn): hashBlock(hashBlockIn) {}$/;"	f	class:CCoinsViewCursor
CCoinsViewCursor	./coins.h	/^class CCoinsViewCursor$/;"	c
CCoinsViewDB	./txdb.cpp	/^CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() \/ "chainstate", nCacheSize, fMemory, fWipe, true)$/;"	f	class:CCoinsViewDB
CCoinsViewDBCursor	./txdb.h	/^    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):$/;"	f	class:CCoinsViewDBCursor
CCoinsViewDBCursor	./txdb.h	/^class CCoinsViewDBCursor: public CCoinsViewCursor$/;"	c
CCoinsViewErrorCatcher	./init.cpp	/^    explicit CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}$/;"	f	class:final
CCoinsViewMemPool	./txmempool.cpp	/^CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }$/;"	f	class:CCoinsViewMemPool
CCoinsViewMemPool	./txmempool.h	/^class CCoinsViewMemPool : public CCoinsViewBacked$/;"	c
CCoinsViewTest	./test/coins_tests.cpp	/^class CCoinsViewTest : public CCoinsView$/;"	c	namespace:__anon60	file:
CCombinedBan	./qt/bantablemodel.h	/^struct CCombinedBan {$/;"	s
CCompactSize	./serialize.h	/^    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }$/;"	f	class:CCompactSize
CCompactSize	./serialize.h	/^class CCompactSize$/;"	c
CConnectionFailed	./bitcoin-cli.cpp	/^    explicit inline CConnectionFailed(const std::string& msg) :$/;"	f	class:CConnectionFailed
CConnectionFailed	./bitcoin-cli.cpp	/^class CConnectionFailed : public std::runtime_error$/;"	c	file:
CConnman	./net.cpp	/^CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSeed1(nSeed1In)$/;"	f	class:CConnman
CConnman	./net.h	/^class CConnman$/;"	c
CConnmanTest	./test/denialofservice_tests.cpp	/^struct CConnmanTest : public CConnman {$/;"	s	file:
CCriticalSection	./sync.h	/^typedef AnnotatedMixin<std::recursive_mutex> CCriticalSection;$/;"	t
CCrypter	./wallet/crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	./wallet/crypter.h	/^class CCrypter$/;"	c
CCryptoKeyStore	./wallet/crypter.h	/^    CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)$/;"	f	class:CCryptoKeyStore
CCryptoKeyStore	./wallet/crypter.h	/^class CCryptoKeyStore : public CBasicKeyStore$/;"	c
CDBBatch	./dbwrapper.h	/^    explicit CDBBatch(const CDBWrapper &_parent) : parent(_parent), ssKey(SER_DISK, CLIENT_VERSION), ssValue(SER_DISK, CLIENT_VERSION), size_estimate(0) { };$/;"	f	class:CDBBatch
CDBBatch	./dbwrapper.h	/^class CDBBatch$/;"	c
CDBIterator	./dbwrapper.h	/^    CDBIterator(const CDBWrapper &_parent, leveldb::Iterator *_piter) :$/;"	f	class:CDBIterator
CDBIterator	./dbwrapper.h	/^class CDBIterator$/;"	c
CDBWrapper	./dbwrapper.cpp	/^CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)$/;"	f	class:CDBWrapper
CDBWrapper	./dbwrapper.h	/^class CDBWrapper$/;"	c
CDataStream	./streams.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	./streams.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	./streams.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	./streams.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	./streams.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	./streams.h	/^    CDataStream(int nTypeIn, int nVersionIn, Args&&... args)$/;"	f	class:CDataStream
CDataStream	./streams.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	./streams.h	/^class CDataStream$/;"	c
CDiskBlockIndex	./chain.h	/^    CDiskBlockIndex() {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	./chain.h	/^    explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	./chain.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskTxPos	./index/txindex.cpp	/^    CDiskTxPos() {$/;"	f	struct:CDiskTxPos
CDiskTxPos	./index/txindex.cpp	/^    CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {$/;"	f	struct:CDiskTxPos
CDiskTxPos	./index/txindex.cpp	/^struct CDiskTxPos : public FlatFilePos$/;"	s	file:
CExtKey	./key.h	/^struct CExtKey {$/;"	s
CExtPubKey	./pubkey.h	/^struct CExtPubKey {$/;"	s
CFLAGS	./Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	./secp256k1/Makefile	/^CFLAGS = -g -O2 -W -std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wno-unused-function -Wno-long-long -Wno-overlength-strings -fvisibility=hidden -O3$/;"	m
CFLAGS	./univalue/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS_FOR_BUILD	./secp256k1/Makefile	/^CFLAGS_FOR_BUILD = -g -O2 $(am__append_9)$/;"	m
CFeeRate	./policy/feerate.cpp	/^CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)$/;"	f	class:CFeeRate
CFeeRate	./policy/feerate.h	/^    CFeeRate() : nSatoshisPerK(0) { }$/;"	f	class:CFeeRate
CFeeRate	./policy/feerate.h	/^    CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {$/;"	f	class:CFeeRate
CFeeRate	./policy/feerate.h	/^class CFeeRate$/;"	c
CHACHA20	./bench/chacha20.cpp	/^static void CHACHA20(benchmark::State& state, size_t buffersize)$/;"	f	file:
CHACHA20_1MB	./bench/chacha20.cpp	/^static void CHACHA20_1MB(benchmark::State& state)$/;"	f	file:
CHACHA20_256BYTES	./bench/chacha20.cpp	/^static void CHACHA20_256BYTES(benchmark::State& state)$/;"	f	file:
CHACHA20_64BYTES	./bench/chacha20.cpp	/^static void CHACHA20_64BYTES(benchmark::State& state)$/;"	f	file:
CHAINPARAMS	./util/system.h	/^    CHAINPARAMS,$/;"	m	class:OptionsCategory
CHAIN_SYNC_TIMEOUT	./net_processing.cpp	/^static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; \/\/ 20 minutes$/;"	v	file:
CHANGE_AUTO	./outputtype.h	/^    CHANGE_AUTO,$/;"	m	class:OutputType
CHANNELS	./qt/notificator.cpp	/^const int CHANNELS = 4;$/;"	v
CHARSET	./bech32.cpp	/^const char* CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";$/;"	m	namespace:__anon116	file:
CHARSET_REV	./bech32.cpp	/^const int8_t CHARSET_REV[128] = {$/;"	m	namespace:__anon116	file:
CHARS_ALPHA_NUM	./util/strencodings.cpp	/^static const std::string CHARS_ALPHA_NUM = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";$/;"	v	file:
CHDChain	./wallet/walletdb.h	/^    CHDChain() { SetNull(); }$/;"	f	class:CHDChain
CHDChain	./wallet/walletdb.h	/^class CHDChain$/;"	c
CHECK	./secp256k1/src/util.h	/^#define CHECK(/;"	d
CHECKASSIGNMENTOPERATOR	./test/arith_uint256_tests.cpp	/^#define CHECKASSIGNMENTOPERATOR(/;"	d	file:
CHECKBITWISEOPERATOR	./test/arith_uint256_tests.cpp	/^#define CHECKBITWISEOPERATOR(/;"	d	file:
CHECKERS	./test/versionbits_tests.cpp	/^#define CHECKERS /;"	d	file:
CHECKSUM_OFFSET	./protocol.h	/^    static constexpr size_t CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE;$/;"	m	class:CMessageHeader
CHECKSUM_SIZE	./protocol.h	/^    static constexpr size_t CHECKSUM_SIZE = 4;$/;"	m	class:CMessageHeader
CHKDF_HMAC_SHA256_L32	./crypto/hkdf_sha256_32.cpp	/^CHKDF_HMAC_SHA256_L32::CHKDF_HMAC_SHA256_L32(const unsigned char* ikm, size_t ikmlen, const std::string& salt)$/;"	f	class:CHKDF_HMAC_SHA256_L32
CHKDF_HMAC_SHA256_L32	./crypto/hkdf_sha256_32.h	/^class CHKDF_HMAC_SHA256_L32$/;"	c
CHMAC_SHA256	./crypto/hmac_sha256.cpp	/^CHMAC_SHA256::CHMAC_SHA256(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA256
CHMAC_SHA256	./crypto/hmac_sha256.h	/^class CHMAC_SHA256$/;"	c
CHMAC_SHA512	./crypto/hmac_sha512.cpp	/^CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA512
CHMAC_SHA512	./crypto/hmac_sha512.h	/^class CHMAC_SHA512$/;"	c
CHash160	./hash.h	/^class CHash160 {$/;"	c
CHash256	./hash.h	/^class CHash256 {$/;"	c
CHashVerifier	./hash.h	/^    explicit CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}$/;"	f	class:CHashVerifier
CHashVerifier	./hash.h	/^class CHashVerifier : public CHashWriter$/;"	c
CHashWriter	./hash.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CHashWriter
CHashWriter	./hash.h	/^class CHashWriter$/;"	c
CImportingNow	./init.cpp	/^    CImportingNow() {$/;"	f	struct:CImportingNow
CImportingNow	./init.cpp	/^struct CImportingNow$/;"	s	file:
CInputCoin	./wallet/coinselection.h	/^    CInputCoin(const CTransactionRef& tx, unsigned int i)$/;"	f	class:CInputCoin
CInputCoin	./wallet/coinselection.h	/^    CInputCoin(const CTransactionRef& tx, unsigned int i, int input_bytes) : CInputCoin(tx, i)$/;"	f	class:CInputCoin
CInputCoin	./wallet/coinselection.h	/^class CInputCoin {$/;"	c
CInv	./protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	./protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn) : type(typeIn), hash(hashIn) {}$/;"	f	class:CInv
CInv	./protocol.h	/^class CInv$/;"	c
CKey	./key.h	/^    CKey() : fValid(false), fCompressed(false)$/;"	f	class:CKey
CKey	./key.h	/^class CKey$/;"	c
CKeyID	./pubkey.h	/^    CKeyID() : uint160() {}$/;"	f	class:CKeyID
CKeyID	./pubkey.h	/^    explicit CKeyID(const uint160& in) : uint160(in) {}$/;"	f	class:CKeyID
CKeyID	./pubkey.h	/^class CKeyID : public uint160$/;"	c
CKeyMetadata	./wallet/walletdb.h	/^    CKeyMetadata()$/;"	f	class:CKeyMetadata
CKeyMetadata	./wallet/walletdb.h	/^    explicit CKeyMetadata(int64_t nCreateTime_)$/;"	f	class:CKeyMetadata
CKeyMetadata	./wallet/walletdb.h	/^class CKeyMetadata$/;"	c
CKeyPool	./wallet/wallet.cpp	/^CKeyPool::CKeyPool()$/;"	f	class:CKeyPool
CKeyPool	./wallet/wallet.cpp	/^CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)$/;"	f	class:CKeyPool
CKeyPool	./wallet/wallet.h	/^class CKeyPool$/;"	c
CKeyStore	./keystore.h	/^class CKeyStore : public SigningProvider$/;"	c
CKeyingMaterial	./wallet/crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLASSPATH_ENV	./secp256k1/Makefile	/^CLASSPATH_ENV = CLASSPATH=$(JAVA_GUAVA)$/;"	m
CLEANFILES	./Makefile	/^CLEANFILES = $(EXTRA_LIBRARIES) *.gcda *.gcno compat\/*.gcda \\$/;"	m
CLEANFILES	./secp256k1/Makefile	/^CLEANFILES = $(gen_context_BIN) src\/ecmult_static_context.h $(JAVAROOT)\/$(JAVAORG)\/*.class .stamp-java$/;"	m
CLEAN_BITCOIN_TEST	./Makefile	/^CLEAN_BITCOIN_TEST = test\/*.gcda test\/*.gcno $(GENERATED_TEST_FILES) $(BITCOIN_TESTS:=.log)$/;"	m
CLEAN_FLAGS	./test/coins_tests.cpp	/^const static auto CLEAN_FLAGS = {char(0), FRESH};$/;"	v	file:
CLIENT_VERSION	./clientversion.h	/^static const int CLIENT_VERSION =$/;"	v
CLIENT_VERSION_BUILD	./Makefile	/^CLIENT_VERSION_BUILD = 0$/;"	m
CLIENT_VERSION_BUILD	./config/bitcoin-config.h	/^#define CLIENT_VERSION_BUILD /;"	d
CLIENT_VERSION_IS_RELEASE	./Makefile	/^CLIENT_VERSION_IS_RELEASE = false$/;"	m
CLIENT_VERSION_IS_RELEASE	./config/bitcoin-config.h	/^#define CLIENT_VERSION_IS_RELEASE /;"	d
CLIENT_VERSION_MAJOR	./Makefile	/^CLIENT_VERSION_MAJOR = 0$/;"	m
CLIENT_VERSION_MAJOR	./config/bitcoin-config.h	/^#define CLIENT_VERSION_MAJOR /;"	d
CLIENT_VERSION_MINOR	./Makefile	/^CLIENT_VERSION_MINOR = 18$/;"	m
CLIENT_VERSION_MINOR	./config/bitcoin-config.h	/^#define CLIENT_VERSION_MINOR /;"	d
CLIENT_VERSION_REVISION	./Makefile	/^CLIENT_VERSION_REVISION = 99$/;"	m
CLIENT_VERSION_REVISION	./config/bitcoin-config.h	/^#define CLIENT_VERSION_REVISION /;"	d
CLIENT_VERSION_SUFFIX	./clientversion.cpp	/^#define CLIENT_VERSION_SUFFIX /;"	d	file:
CLockLocation	./sync.cpp	/^    CLockLocation($/;"	f	struct:CLockLocation
CLockLocation	./sync.cpp	/^struct CLockLocation {$/;"	s	file:
CLogCategoryActive	./logging.h	/^struct CLogCategoryActive$/;"	s
CLogCategoryDesc	./logging.cpp	/^struct CLogCategoryDesc$/;"	s	file:
CMDUNSUPPORTED	./netbase.cpp	/^    CMDUNSUPPORTED = 0x07,   \/\/!< Command not supported$/;"	e	enum:uint8_t	file:
CMD_ERROR	./qt/rpcconsole.h	/^        CMD_ERROR$/;"	e	enum:RPCConsole::MessageClass
CMD_REPLY	./qt/rpcconsole.h	/^        CMD_REPLY,$/;"	e	enum:RPCConsole::MessageClass
CMD_REQUEST	./qt/rpcconsole.h	/^        CMD_REQUEST,$/;"	e	enum:RPCConsole::MessageClass
CMPCTBLOCK	./protocol.cpp	/^const char *CMPCTBLOCK="cmpctblock";$/;"	m	namespace:NetMsgType	file:
CMainCleanup	./validation.cpp	/^    CMainCleanup() {}$/;"	f	class:CMainCleanup
CMainCleanup	./validation.cpp	/^class CMainCleanup$/;"	c	file:
CMainParams	./chainparams.cpp	/^    CMainParams() {$/;"	f	class:CMainParams
CMainParams	./chainparams.cpp	/^class CMainParams : public CChainParams {$/;"	c	file:
CMainSignals	./validationinterface.h	/^class CMainSignals {$/;"	c
CMasterKey	./wallet/crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	./wallet/crypter.h	/^class CMasterKey$/;"	c
CMedianFilter	./timedata.h	/^    CMedianFilter(unsigned int _size, T initial_value) : nSize(_size)$/;"	f	class:CMedianFilter
CMedianFilter	./timedata.h	/^class CMedianFilter$/;"	c
CMerkleBlock	./merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)$/;"	f	class:CMerkleBlock
CMerkleBlock	./merkleblock.h	/^    CMerkleBlock() {}$/;"	f	class:CMerkleBlock
CMerkleBlock	./merkleblock.h	/^    CMerkleBlock(const CBlock& block, CBloomFilter& filter) : CMerkleBlock(block, &filter, nullptr) { }$/;"	f	class:CMerkleBlock
CMerkleBlock	./merkleblock.h	/^    CMerkleBlock(const CBlock& block, const std::set<uint256>& txids) : CMerkleBlock(block, nullptr, &txids) { }$/;"	f	class:CMerkleBlock
CMerkleBlock	./merkleblock.h	/^class CMerkleBlock$/;"	c
CMerkleTx	./wallet/wallet.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	./wallet/wallet.h	/^    explicit CMerkleTx(CTransactionRef arg)$/;"	f	class:CMerkleTx
CMerkleTx	./wallet/wallet.h	/^class CMerkleTx$/;"	c
CMessageHeader	./protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)$/;"	f	class:CMessageHeader
CMessageHeader	./protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	./protocol.h	/^class CMessageHeader$/;"	c
CMutableTransaction	./primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	./primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction(const CTransaction& tx) : vin(tx.vin), vout(tx.vout), nVersion(tx.nVersion), nLockTime(tx.nLockTime) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	./primitives/transaction.h	/^    CMutableTransaction(deserialize_type, Stream& s) {$/;"	f	struct:CMutableTransaction
CMutableTransaction	./primitives/transaction.h	/^struct CMutableTransaction$/;"	s
CNetAddr	./netaddress.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	./netaddress.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope)$/;"	f	class:CNetAddr
CNetAddr	./netaddress.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	./netaddress.h	/^class CNetAddr$/;"	c
CNetCleanup	./net.cpp	/^    CNetCleanup() {}$/;"	f	class:CNetCleanup
CNetCleanup	./net.cpp	/^class CNetCleanup$/;"	c	file:
CNetMessage	./net.h	/^    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {$/;"	f	class:CNetMessage
CNetMessage	./net.h	/^class CNetMessage {$/;"	c
CNetMsgMaker	./netmessagemaker.h	/^    explicit CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}$/;"	f	class:CNetMsgMaker
CNetMsgMaker	./netmessagemaker.h	/^class CNetMsgMaker$/;"	c
CNetProcessingCleanup	./net_processing.cpp	/^    CNetProcessingCleanup() {}$/;"	f	class:CNetProcessingCleanup
CNetProcessingCleanup	./net_processing.cpp	/^class CNetProcessingCleanup$/;"	c	file:
CNoDestination	./script/standard.h	/^class CNoDestination {$/;"	c
CNode	./net.cpp	/^CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, bool fInboundIn)$/;"	f	class:CNode
CNode	./net.h	/^class CNode$/;"	c
CNodeCombinedStats	./qt/peertablemodel.h	/^struct CNodeCombinedStats {$/;"	s
CNodeState	./net_processing.cpp	/^    CNodeState(CAddress addrIn, std::string addrNameIn, bool is_inbound, bool is_manual) :$/;"	f	struct:__anon89::CNodeState
CNodeState	./net_processing.cpp	/^struct CNodeState {$/;"	s	namespace:__anon89	file:
CNodeStateStats	./net_processing.h	/^struct CNodeStateStats {$/;"	s
CNodeStats	./net.h	/^class CNodeStats$/;"	c
COIN	./amount.h	/^static const CAmount COIN = 100000000;$/;"	v
COINBASE_FLAGS	./validation.cpp	/^CScript COINBASE_FLAGS;$/;"	v
COINBASE_MATURITY	./consensus/consensus.h	/^static const int COINBASE_MATURITY = 100;$/;"	v
COLOR_BAREADDRESS	./qt/guiconstants.h	/^#define COLOR_BAREADDRESS /;"	d
COLOR_BLACK	./qt/guiconstants.h	/^#define COLOR_BLACK /;"	d
COLOR_NEGATIVE	./qt/guiconstants.h	/^#define COLOR_NEGATIVE /;"	d
COLOR_TX_STATUS_DANGER	./qt/guiconstants.h	/^#define COLOR_TX_STATUS_DANGER /;"	d
COLOR_TX_STATUS_OPENUNTILDATE	./qt/guiconstants.h	/^#define COLOR_TX_STATUS_OPENUNTILDATE /;"	d
COLOR_UNCONFIRMED	./qt/guiconstants.h	/^#define COLOR_UNCONFIRMED /;"	d
COLUMN_ADDRESS	./qt/coincontroldialog.h	/^        COLUMN_ADDRESS,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_AMOUNT	./qt/coincontroldialog.h	/^        COLUMN_AMOUNT,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_CHECKBOX	./qt/coincontroldialog.h	/^        COLUMN_CHECKBOX = 0,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_CONFIRMATIONS	./qt/coincontroldialog.h	/^        COLUMN_CONFIRMATIONS,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_DATE	./qt/coincontroldialog.h	/^        COLUMN_DATE,$/;"	e	enum:CoinControlDialog::__anon71
COLUMN_LABEL	./qt/coincontroldialog.h	/^        COLUMN_LABEL,$/;"	e	enum:CoinControlDialog::__anon71
COMMANDS	./util/system.h	/^    COMMANDS,$/;"	m	class:OptionsCategory
COMMAND_SIZE	./protocol.h	/^    static constexpr size_t COMMAND_SIZE = 12;$/;"	m	class:CMessageHeader
COMMON_LIB	./secp256k1/Makefile	/^COMMON_LIB = $/;"	m
COMPACTSIZE	./serialize.h	/^#define COMPACTSIZE(/;"	d
COMPACT_SIGNATURE_SIZE	./pubkey.h	/^    static constexpr unsigned int COMPACT_SIGNATURE_SIZE      = 65;$/;"	m	class:CPubKey
COMPAT_LDFLAGS	./Makefile	/^COMPAT_LDFLAGS = $/;"	m
COMPILE	./Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	./secp256k1/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPRESSED_PRIVATE_KEY_SIZE	./key.h	/^    static const unsigned int COMPRESSED_PRIVATE_KEY_SIZE = 214;$/;"	m	class:CKey
COMPRESSED_PUBLIC_KEY_SIZE	./pubkey.h	/^    static constexpr unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;$/;"	m	class:CPubKey
CONFIG_CLEAN_FILES	./Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	./secp256k1/Makefile	/^CONFIG_CLEAN_FILES = libsecp256k1.pc$/;"	m
CONFIG_CLEAN_FILES	./univalue/Makefile	/^CONFIG_CLEAN_FILES = pc\/libunivalue.pc pc\/libunivalue-uninstalled.pc$/;"	m
CONFIG_CLEAN_VPATH_FILES	./Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	./secp256k1/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	./univalue/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	./Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config\/bitcoin-config.h$/;"	m
CONFIG_HEADER	./secp256k1/Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/libsecp256k1-config.h$/;"	m
CONFIG_HEADER	./univalue/Makefile	/^CONFIG_HEADER = univalue-config.h$/;"	m
CONFLICT	./txmempool.h	/^    CONFLICT,    \/\/!< Removed for conflict with in-block transaction$/;"	m	class:MemPoolRemovalReason
CONNECT	./netbase.cpp	/^    CONNECT = 0x01,$/;"	e	enum:uint8_t	file:
CONNECTION	./util/system.h	/^    CONNECTION,$/;"	m	class:OptionsCategory
CONNECTIONS_ALL	./net.h	/^        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_ALL	./qt/clientmodel.h	/^    CONNECTIONS_ALL  = (CONNECTIONS_IN | CONNECTIONS_OUT),$/;"	e	enum:NumConnections
CONNECTIONS_IN	./net.h	/^        CONNECTIONS_IN = (1U << 0),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_IN	./qt/clientmodel.h	/^    CONNECTIONS_IN   = (1U << 0),$/;"	e	enum:NumConnections
CONNECTIONS_NONE	./net.h	/^        CONNECTIONS_NONE = 0,$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_NONE	./qt/clientmodel.h	/^    CONNECTIONS_NONE = 0,$/;"	e	enum:NumConnections
CONNECTIONS_OUT	./net.h	/^        CONNECTIONS_OUT = (1U << 1),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_OUT	./qt/clientmodel.h	/^    CONNECTIONS_OUT  = (1U << 1),$/;"	e	enum:NumConnections
CONNREFUSED	./netbase.cpp	/^    CONNREFUSED = 0x05,      \/\/!< Connection refused$/;"	e	enum:uint8_t	file:
CONSENSUS	./consensus/validation.h	/^    CONSENSUS,               \/\/!< invalid by consensus rules (excluding any below reasons)$/;"	m	class:ValidationInvalidReason
CONSERVATIVE	./policy/fees.h	/^    CONSERVATIVE, \/\/!< Force estimateSmartFee to use conservative estimates$/;"	m	class:FeeEstimateHorizon::FeeEstimateMode
CONSERVATIVE	./policy/fees.h	/^    CONSERVATIVE,$/;"	m	class:FeeEstimateHorizon::FeeReason
CONSOLE_HISTORY	./qt/rpcconsole.cpp	/^const int CONSOLE_HISTORY = 50;$/;"	v
CONTINUE_EXECUTION	./bitcoin-cli.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
CONTINUE_EXECUTION	./bitcoin-tx.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
COOKIEAUTH_FILE	./rpc/protocol.cpp	/^static const std::string COOKIEAUTH_FILE = ".cookie";$/;"	v	file:
COOKIEAUTH_USER	./rpc/protocol.cpp	/^static const std::string COOKIEAUTH_USER = "__cookie__";$/;"	v	file:
COPYRIGHT_HOLDERS	./Makefile	/^COPYRIGHT_HOLDERS = The %s developers$/;"	m
COPYRIGHT_HOLDERS	./config/bitcoin-config.h	/^#define COPYRIGHT_HOLDERS /;"	d
COPYRIGHT_HOLDERS_FINAL	./Makefile	/^COPYRIGHT_HOLDERS_FINAL = The Bitcoin Core developers$/;"	m
COPYRIGHT_HOLDERS_FINAL	./config/bitcoin-config.h	/^#define COPYRIGHT_HOLDERS_FINAL /;"	d
COPYRIGHT_HOLDERS_SUBSTITUTION	./Makefile	/^COPYRIGHT_HOLDERS_SUBSTITUTION = Bitcoin Core$/;"	m
COPYRIGHT_HOLDERS_SUBSTITUTION	./config/bitcoin-config.h	/^#define COPYRIGHT_HOLDERS_SUBSTITUTION /;"	d
COPYRIGHT_STR	./clientversion.h	/^#define COPYRIGHT_STR /;"	d
COPYRIGHT_YEAR	./Makefile	/^COPYRIGHT_YEAR = 2019$/;"	m
COPYRIGHT_YEAR	./config/bitcoin-config.h	/^#define COPYRIGHT_YEAR /;"	d
CORRUPT	./wallet/walletdb.h	/^    CORRUPT,$/;"	m	class:DBErrors
COrphanTx	./net_processing.cpp	/^struct COrphanTx {$/;"	s	file:
COrphanTx	./test/denialofservice_tests.cpp	/^struct COrphanTx {$/;"	s	file:
COutPoint	./primitives/transaction.h	/^    COutPoint(): n(NULL_INDEX) { }$/;"	f	class:COutPoint
COutPoint	./primitives/transaction.h	/^    COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }$/;"	f	class:COutPoint
COutPoint	./primitives/transaction.h	/^class COutPoint$/;"	c
COutput	./wallet/wallet.h	/^    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn, bool use_max_sig_in = false)$/;"	f	class:COutput
COutput	./wallet/wallet.h	/^class COutput$/;"	c
COutputEntry	./wallet/wallet.h	/^struct COutputEntry$/;"	s
CPP	./Makefile	/^CPP = gcc -E$/;"	m
CPP	./secp256k1/Makefile	/^CPP = gcc -E$/;"	m
CPP	./univalue/Makefile	/^CPP = gcc -E$/;"	m
CPPFILT	./Makefile	/^CPPFILT = \/usr\/bin\/c++filt$/;"	m
CPPFLAGS	./Makefile	/^CPPFLAGS = -Qunused-arguments  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -I\/usr\/local\/opt\/berkeley-db@4\/include -DMAC_OSX$/;"	m
CPPFLAGS	./secp256k1/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	./univalue/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS_FOR_BUILD	./secp256k1/Makefile	/^CPPFLAGS_FOR_BUILD =  $(am__append_8)$/;"	m
CPP_FOR_BUILD	./secp256k1/Makefile	/^CPP_FOR_BUILD = gcc -E$/;"	m
CPUID_F1_ECX_RDRAND	./random.cpp	/^static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;$/;"	v	file:
CPUID_F7_EBX_RDSEED	./random.cpp	/^static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;$/;"	v	file:
CPartialMerkleTree	./merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	./merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	./merkleblock.h	/^class CPartialMerkleTree$/;"	c
CPartialMerkleTreeTester	./test/pmt_tests.cpp	/^class CPartialMerkleTreeTester : public CPartialMerkleTree$/;"	c	file:
CPrivKey	./key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	./pubkey.h	/^    CPubKey()$/;"	f	class:CPubKey
CPubKey	./pubkey.h	/^    CPubKey(const T pbegin, const T pend)$/;"	f	class:CPubKey
CPubKey	./pubkey.h	/^    explicit CPubKey(const std::vector<unsigned char>& _vch)$/;"	f	class:CPubKey
CPubKey	./pubkey.h	/^class CPubKey$/;"	c
CRC	./leveldb/util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c	file:
CREDIT	./wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
CRIPEMD160	./crypto/ripemd160.cpp	/^CRIPEMD160::CRIPEMD160() : bytes(0)$/;"	f	class:CRIPEMD160
CRIPEMD160	./crypto/ripemd160.h	/^class CRIPEMD160$/;"	c
CRPCCommand	./rpc/server.h	/^    CRPCCommand(const char* category, const char* name, rpcfn_type fn, std::initializer_list<const char*> args)$/;"	f	class:CRPCCommand
CRPCCommand	./rpc/server.h	/^    CRPCCommand(std::string category, std::string name, Actor actor, std::vector<std::string> args, intptr_t unique_id)$/;"	f	class:CRPCCommand
CRPCCommand	./rpc/server.h	/^class CRPCCommand$/;"	c
CRPCConvertParam	./rpc/client.cpp	/^class CRPCConvertParam$/;"	c	file:
CRPCConvertTable	./rpc/client.cpp	/^CRPCConvertTable::CRPCConvertTable()$/;"	f	class:CRPCConvertTable
CRPCConvertTable	./rpc/client.cpp	/^class CRPCConvertTable$/;"	c	file:
CRPCSignals	./rpc/server.cpp	/^static struct CRPCSignals$/;"	s	file:
CRPCTable	./rpc/server.cpp	/^CRPCTable::CRPCTable()$/;"	f	class:CRPCTable
CRPCTable	./rpc/server.h	/^class CRPCTable$/;"	c
CRYPTO_CFLAGS	./Makefile	/^CRYPTO_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
CRYPTO_CFLAGS	./secp256k1/Makefile	/^CRYPTO_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
CRYPTO_LIBS	./Makefile	/^CRYPTO_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lcrypto$/;"	m
CRYPTO_LIBS	./secp256k1/Makefile	/^CRYPTO_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lcrypto$/;"	m
CRecipient	./wallet/wallet.h	/^struct CRecipient$/;"	s
CRegTestParams	./chainparams.cpp	/^    explicit CRegTestParams(const ArgsManager& args) {$/;"	f	class:CRegTestParams
CRegTestParams	./chainparams.cpp	/^class CRegTestParams : public CChainParams {$/;"	c	file:
CReserveKey	./wallet/wallet.h	/^    explicit CReserveKey(CWallet* pwalletIn)$/;"	f	class:CReserveKey
CReserveKey	./wallet/wallet.h	/^class CReserveKey$/;"	c
CRollingBloomFilter	./bloom.cpp	/^CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const double fpRate)$/;"	f	class:CRollingBloomFilter
CRollingBloomFilter	./bloom.h	/^class CRollingBloomFilter$/;"	c
CSCOPE	./secp256k1/Makefile	/^CSCOPE = cscope$/;"	m
CSCOPE	./univalue/Makefile	/^CSCOPE = cscope$/;"	m
CSHA1	./crypto/sha1.cpp	/^CSHA1::CSHA1() : bytes(0)$/;"	f	class:CSHA1
CSHA1	./crypto/sha1.h	/^class CSHA1$/;"	c
CSHA256	./crypto/sha256.cpp	/^CSHA256::CSHA256() : bytes(0)$/;"	f	class:CSHA256
CSHA256	./crypto/sha256.h	/^class CSHA256$/;"	c
CSHA512	./crypto/sha512.cpp	/^CSHA512::CSHA512() : bytes(0)$/;"	f	class:CSHA512
CSHA512	./crypto/sha512.h	/^class CSHA512$/;"	c
CSVHeight	./consensus/params.h	/^    int CSVHeight;$/;"	m	struct:Consensus::Params
CSVModelWriter	./qt/csvmodelwriter.cpp	/^CSVModelWriter::CSVModelWriter(const QString &_filename, QObject *parent) :$/;"	f	class:CSVModelWriter
CSVModelWriter	./qt/csvmodelwriter.h	/^class CSVModelWriter : public QObject$/;"	c
CScheduler	./scheduler.cpp	/^CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)$/;"	f	class:CScheduler
CScheduler	./scheduler.h	/^class CScheduler$/;"	c
CScript	./script/script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	./script/script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	./script/script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	./script/script.h	/^    CScript(int64_t b)        { operator<<(b); }$/;"	f	class:CScript
CScript	./script/script.h	/^    CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	./script/script.h	/^    explicit CScript(const CScriptNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	./script/script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	./script/script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	./script/script.h	/^class CScript : public CScriptBase$/;"	c
CScriptBase	./script/script.h	/^typedef prevector<28, unsigned char> CScriptBase;$/;"	t
CScriptCheck	./validation.h	/^    CScriptCheck(): ptxTo(nullptr), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}$/;"	f	class:CScriptCheck
CScriptCheck	./validation.h	/^    CScriptCheck(const CTxOut& outIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :$/;"	f	class:CScriptCheck
CScriptCheck	./validation.h	/^class CScriptCheck$/;"	c
CScriptCompressor	./compressor.h	/^    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }$/;"	f	class:CScriptCompressor
CScriptCompressor	./compressor.h	/^class CScriptCompressor$/;"	c
CScriptID	./script/standard.cpp	/^CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}$/;"	f	class:CScriptID
CScriptID	./script/standard.h	/^    CScriptID() : uint160() {}$/;"	f	class:CScriptID
CScriptID	./script/standard.h	/^    CScriptID(const uint160& in) : uint160(in) {}$/;"	f	class:CScriptID
CScriptID	./script/standard.h	/^class CScriptID : public uint160$/;"	c
CScriptNum	./script/script.h	/^    explicit CScriptNum(const int64_t& n)$/;"	f	class:CScriptNum
CScriptNum	./script/script.h	/^    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum
CScriptNum	./script/script.h	/^class CScriptNum$/;"	c
CScriptNum10	./test/scriptnum10.h	/^    explicit CScriptNum10(const int64_t& n)$/;"	f	class:CScriptNum10
CScriptNum10	./test/scriptnum10.h	/^    explicit CScriptNum10(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum10
CScriptNum10	./test/scriptnum10.h	/^class CScriptNum10$/;"	c
CScriptVisitor	./script/standard.cpp	/^    explicit CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:__anon86::CScriptVisitor
CScriptVisitor	./script/standard.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	namespace:__anon86	file:
CScriptWitness	./script/script.h	/^    CScriptWitness() { }$/;"	f	struct:CScriptWitness
CScriptWitness	./script/script.h	/^struct CScriptWitness$/;"	s
CSemaphore	./sync.h	/^    explicit CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	./sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	./sync.h	/^    CSemaphoreGrant() : sem(nullptr), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	./sync.h	/^    explicit CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	./sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionSerialize	./serialize.h	/^struct CSerActionSerialize$/;"	s
CSerActionUnserialize	./serialize.h	/^struct CSerActionUnserialize$/;"	s
CSerializeMethodsTestMany	./test/serialize_tests.cpp	/^class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle$/;"	c	file:
CSerializeMethodsTestSingle	./test/serialize_tests.cpp	/^    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, const CTransactionRef& txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), txval(txvalin)$/;"	f	class:CSerializeMethodsTestSingle
CSerializeMethodsTestSingle	./test/serialize_tests.cpp	/^class CSerializeMethodsTestSingle$/;"	c	file:
CSerializedNetMsg	./net.h	/^struct CSerializedNetMsg$/;"	s
CService	./netaddress.cpp	/^CService::CService() : port(0)$/;"	f	class:CService
CService	./netaddress.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	./netaddress.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	./netaddress.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	./netaddress.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	./netaddress.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr, addr.sin6_scope_id), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	./netaddress.h	/^class CService : public CNetAddr$/;"	c
CSignatureCache	./script/sigcache.cpp	/^    CSignatureCache()$/;"	f	class:__anon84::CSignatureCache
CSignatureCache	./script/sigcache.cpp	/^class CSignatureCache$/;"	c	namespace:__anon84	file:
CSipHasher	./crypto/siphash.cpp	/^CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)$/;"	f	class:CSipHasher
CSipHasher	./crypto/siphash.h	/^class CSipHasher$/;"	c
CSizeComputer	./serialize.h	/^    explicit CSizeComputer(int nVersionIn) : nSize(0), nVersion(nVersionIn) {}$/;"	f	class:CSizeComputer
CSizeComputer	./serialize.h	/^class CSizeComputer$/;"	c
CSubNet	./netaddress.cpp	/^CSubNet::CSubNet():$/;"	f	class:CSubNet
CSubNet	./netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr):$/;"	f	class:CSubNet
CSubNet	./netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask)$/;"	f	class:CSubNet
CSubNet	./netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, int32_t mask)$/;"	f	class:CSubNet
CSubNet	./netaddress.h	/^class CSubNet$/;"	c
CTAES_DIST	./Makefile	/^CTAES_DIST = crypto\/ctaes\/bench.c crypto\/ctaes\/ctaes.c \\$/;"	m
CTAGS	./Makefile	/^CTAGS = ctags$/;"	m
CTAGS	./secp256k1/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	./univalue/Makefile	/^CTAGS = ctags$/;"	m
CT_DELETED	./ui_interface.h	/^    CT_DELETED$/;"	e	enum:ChangeType
CT_NEW	./ui_interface.h	/^    CT_NEW,$/;"	e	enum:ChangeType
CT_UPDATED	./ui_interface.h	/^    CT_UPDATED,$/;"	e	enum:ChangeType
CTestNetParams	./chainparams.cpp	/^    CTestNetParams() {$/;"	f	class:CTestNetParams
CTestNetParams	./chainparams.cpp	/^class CTestNetParams : public CChainParams {$/;"	c	file:
CThreadInterrupt	./threadinterrupt.cpp	/^CThreadInterrupt::CThreadInterrupt() : flag(false) {}$/;"	f	class:CThreadInterrupt
CThreadInterrupt	./threadinterrupt.h	/^class CThreadInterrupt$/;"	c
CTransaction	./primitives/transaction.cpp	/^CTransaction::CTransaction() : vin(), vout(), nVersion(CTransaction::CURRENT_VERSION), nLockTime(0), hash{}, m_witness_hash{} {}$/;"	f	class:CTransaction
CTransaction	./primitives/transaction.cpp	/^CTransaction::CTransaction(CMutableTransaction&& tx) : vin(std::move(tx.vin)), vout(std::move(tx.vout)), nVersion(tx.nVersion), nLockTime(tx.nLockTime), hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}$/;"	f	class:CTransaction
CTransaction	./primitives/transaction.cpp	/^CTransaction::CTransaction(const CMutableTransaction& tx) : vin(tx.vin), vout(tx.vout), nVersion(tx.nVersion), nLockTime(tx.nLockTime), hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}$/;"	f	class:CTransaction
CTransaction	./primitives/transaction.h	/^    CTransaction(deserialize_type, Stream& s) : CTransaction(CMutableTransaction(deserialize, s)) {}$/;"	f	class:CTransaction
CTransaction	./primitives/transaction.h	/^class CTransaction$/;"	c
CTransactionRef	./primitives/transaction.h	/^typedef std::shared_ptr<const CTransaction> CTransactionRef;$/;"	t
CTransactionSignatureSerializer	./script/interpreter.cpp	/^    CTransactionSignatureSerializer(const T& txToIn, const CScript& scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :$/;"	f	class:__anon77::CTransactionSignatureSerializer
CTransactionSignatureSerializer	./script/interpreter.cpp	/^class CTransactionSignatureSerializer$/;"	c	namespace:__anon77	file:
CTxDestination	./script/standard.h	/^typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;$/;"	t
CTxIn	./primitives/transaction.cpp	/^CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	./primitives/transaction.cpp	/^CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	./primitives/transaction.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	./primitives/transaction.h	/^class CTxIn$/;"	c
CTxMemPool	./txmempool.cpp	/^CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :$/;"	f	class:CTxMemPool
CTxMemPool	./txmempool.h	/^class CTxMemPool$/;"	c
CTxMemPoolEntry	./txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	./txmempool.h	/^class CTxMemPoolEntry$/;"	c
CTxMemPoolModifiedEntry	./miner.h	/^    explicit CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)$/;"	f	struct:CTxMemPoolModifiedEntry
CTxMemPoolModifiedEntry	./miner.h	/^struct CTxMemPoolModifiedEntry {$/;"	s
CTxOut	./primitives/transaction.cpp	/^CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	./primitives/transaction.h	/^    CTxOut()$/;"	f	class:CTxOut
CTxOut	./primitives/transaction.h	/^class CTxOut$/;"	c
CTxOutCompressor	./compressor.h	/^    explicit CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }$/;"	f	class:CTxOutCompressor
CTxOutCompressor	./compressor.h	/^class CTxOutCompressor$/;"	c
CTxUndo	./undo.h	/^class CTxUndo$/;"	c
CURRENCY_UNIT	./policy/feerate.cpp	/^const std::string CURRENCY_UNIT = "BTC";$/;"	v
CURRENT_VERSION	./addrdb.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CBanEntry
CURRENT_VERSION	./primitives/transaction.h	/^    static const int32_t CURRENT_VERSION=2;$/;"	m	class:CTransaction
CURRENT_VERSION	./qt/recentrequeststablemodel.h	/^    static const int CURRENT_VERSION = 1;$/;"	m	class:RecentRequestEntry
CURRENT_VERSION	./qt/walletmodel.h	/^    static const int CURRENT_VERSION = 1;$/;"	m	class:SendCoinsRecipient
CURRENT_VERSION	./wallet/walletdb.h	/^    static const int CURRENT_VERSION        = VERSION_HD_CHAIN_SPLIT;$/;"	m	class:CHDChain
CURRENT_VERSION	./wallet/walletdb.h	/^    static const int CURRENT_VERSION=VERSION_WITH_KEY_ORIGIN;$/;"	m	class:CKeyMetadata
CURVE_B	./secp256k1/src/group_impl.h	/^const int CURVE_B = 2;$/;"	v
CURVE_B	./secp256k1/src/group_impl.h	/^const int CURVE_B = 4;$/;"	v
CURVE_B	./secp256k1/src/group_impl.h	/^const int CURVE_B = 7;$/;"	v
CUpdatedBlock	./rpc/blockchain.cpp	/^struct CUpdatedBlock$/;"	s	file:
CValidationInterface	./validationinterface.h	/^class CValidationInterface {$/;"	c
CValidationState	./consensus/validation.h	/^    CValidationState() : mode(MODE_VALID), m_reason(ValidationInvalidReason::NONE), chRejectCode(0) {}$/;"	f	class:CValidationState
CValidationState	./consensus/validation.h	/^class CValidationState {$/;"	c
CVarInt	./serialize.h	/^    explicit CVarInt(I& nIn) : n(nIn) { }$/;"	f	class:CVarInt
CVarInt	./serialize.h	/^class CVarInt$/;"	c
CVectorWriter	./streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn) : nType(nTypeIn), nVersion(nVersionIn), vchData(vchDataIn), nPos(nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	./streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn, Args&&... args) : CVectorWriter(nTypeIn, nVersionIn, vchDataIn, nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	./streams.h	/^class CVectorWriter$/;"	c
CVerifyDB	./validation.cpp	/^CVerifyDB::CVerifyDB()$/;"	f	class:CVerifyDB
CVerifyDB	./validation.h	/^class CVerifyDB {$/;"	c
CWallet	./wallet/wallet.h	/^    CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)$/;"	f	class:final
CWalletKey	./wallet/wallet.cpp	/^CWalletKey::CWalletKey(int64_t nExpires)$/;"	f	class:CWalletKey
CWalletKey	./wallet/wallet.h	/^class CWalletKey$/;"	c
CWalletScanState	./wallet/walletdb.cpp	/^    CWalletScanState() {$/;"	f	class:CWalletScanState
CWalletScanState	./wallet/walletdb.cpp	/^class CWalletScanState {$/;"	c	file:
CWalletTx	./wallet/wallet.h	/^    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))$/;"	f	class:CWalletTx
CWalletTx	./wallet/wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CXX	./Makefile	/^CXX = \/usr\/local\/bin\/ccache g++ -std=c++11$/;"	m
CXX	./univalue/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	./Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	./univalue/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	./Makefile	/^CXXCPP = g++ -std=c++11 -E$/;"	m
CXXCPP	./univalue/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	./Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	./univalue/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	./Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	./univalue/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	./Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	./univalue/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	./Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CXXLINK	./univalue/Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	./Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	./secp256k1/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	./univalue/Makefile	/^CYGPATH_W = echo$/;"	m
CZMQAbstractNotifier	./zmq/zmqabstractnotifier.h	/^    CZMQAbstractNotifier() : psocket(nullptr), outbound_message_high_water_mark(DEFAULT_ZMQ_SNDHWM) { }$/;"	f	class:CZMQAbstractNotifier
CZMQAbstractNotifier	./zmq/zmqabstractnotifier.h	/^class CZMQAbstractNotifier$/;"	c
CZMQAbstractPublishNotifier	./zmq/zmqpublishnotifier.h	/^class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier$/;"	c
CZMQNotificationInterface	./zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(nullptr)$/;"	f	class:CZMQNotificationInterface
CZMQNotifierFactory	./zmq/zmqabstractnotifier.h	/^typedef CZMQAbstractNotifier* (*CZMQNotifierFactory)();$/;"	t
CZMQPublishHashBlockNotifier	./zmq/zmqpublishnotifier.h	/^class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishHashTransactionNotifier	./zmq/zmqpublishnotifier.h	/^class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishRawBlockNotifier	./zmq/zmqpublishnotifier.h	/^class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishRawTransactionNotifier	./zmq/zmqpublishnotifier.h	/^class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier$/;"	c
CachableAmount	./script/ismine.h	/^struct CachableAmount$/;"	s
Cache	./leveldb/include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	./leveldb/include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheTest	./leveldb/util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	./leveldb/util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
CachingTransactionSignatureChecker	./script/sigcache.h	/^    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}$/;"	f	class:CachingTransactionSignatureChecker
CachingTransactionSignatureChecker	./script/sigcache.h	/^class CachingTransactionSignatureChecker : public TransactionSignatureChecker$/;"	c
CalcHash	./merkleblock.cpp	/^uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {$/;"	f	class:CPartialMerkleTree
CalcTreeWidth	./merkleblock.h	/^    unsigned int CalcTreeWidth(int height) const {$/;"	f	class:CPartialMerkleTree
CalculateCurrentUsage	./validation.cpp	/^uint64_t CalculateCurrentUsage()$/;"	f
CalculateDescendantMaximum	./txmempool.cpp	/^uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const {$/;"	f	class:CTxMemPool
CalculateDescendants	./txmempool.cpp	/^void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const$/;"	f	class:CTxMemPool
CalculateKeyedNetGroup	./net.cpp	/^uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const$/;"	f	class:CConnman
CalculateMaximumSignedInputSize	./wallet/wallet.cpp	/^int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)$/;"	f
CalculateMaximumSignedTxSize	./wallet/wallet.cpp	/^int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)$/;"	f
CalculateMaximumSignedTxSize	./wallet/wallet.cpp	/^int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig)$/;"	f
CalculateMemPoolAncestors	./txmempool.cpp	/^bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents \/* = true *\/) const$/;"	f	class:CTxMemPool
CalculateNestedKeyhashInputSize	./wallet/test/wallet_tests.cpp	/^static size_t CalculateNestedKeyhashInputSize(bool use_max_sig)$/;"	f	file:
CalculateNextWorkRequired	./pow.cpp	/^unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)$/;"	f
CalculatePercentilesByWeight	./rpc/blockchain.cpp	/^void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight)$/;"	f
CalculateSequenceLocks	./consensus/tx_verify.cpp	/^std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
CalculateTruncatedMedian	./rpc/blockchain.cpp	/^static T CalculateTruncatedMedian(std::vector<T>& scores)$/;"	f	file:
CallFunctionInValidationInterfaceQueue	./validationinterface.cpp	/^void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {$/;"	f
CallRPC	./bitcoin-cli.cpp	/^static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)$/;"	f	file:
CallRPC	./test/rpc_tests.cpp	/^UniValue CallRPC(std::string args)$/;"	f
CallbacksPending	./scheduler.cpp	/^size_t SingleThreadedSchedulerClient::CallbacksPending() {$/;"	f	class:SingleThreadedSchedulerClient
CallbacksPending	./validationinterface.cpp	/^size_t CMainSignals::CallbacksPending() {$/;"	f	class:CMainSignals
CanAccelerateCRC32C	./leveldb/util/crc32c.cc	/^static bool CanAccelerateCRC32C() {$/;"	f	namespace:leveldb::crc32c
CanAppend	./leveldb/db/recovery_test.cc	/^  bool CanAppend() {$/;"	f	class:leveldb::RecoveryTest
CanGenerateKeys	./wallet/wallet.cpp	/^bool CWallet::CanGenerateKeys()$/;"	f	class:CWallet
CanGetAddresses	./wallet/wallet.cpp	/^bool CWallet::CanGetAddresses(bool internal)$/;"	f	class:CWallet
Capitalize	./util/strencodings.cpp	/^std::string Capitalize(std::string str)$/;"	f
CaseInsensitiveEqual	./test/bech32_tests.cpp	/^static bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)$/;"	f	file:
CastToBool	./script/interpreter.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
Cat	./bech32.cpp	/^data Cat(data x, const data& y)$/;"	f	namespace:__anon116
Ch	./crypto/sha256.cpp	/^uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon40::sha256
Ch	./crypto/sha256_avx2.cpp	/^__m256i inline Ch(__m256i x, __m256i y, __m256i z) { return Xor(z, And(x, Xor(y, z))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Ch	./crypto/sha256_sse41.cpp	/^__m128i inline Ch(__m128i x, __m128i y, __m128i z) { return Xor(z, And(x, Xor(y, z))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Ch	./crypto/sha512.cpp	/^uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon39::sha512
Ch	./secp256k1/src/hash_impl.h	/^#define Ch(/;"	d
Ch	./secp256k1/src/hash_impl.h	/^#undef Ch$/;"	d
ChaCha20	./crypto/chacha20.cpp	/^ChaCha20::ChaCha20()$/;"	f	class:ChaCha20
ChaCha20	./crypto/chacha20.cpp	/^ChaCha20::ChaCha20(const unsigned char* k, size_t keylen)$/;"	f	class:ChaCha20
ChaCha20	./crypto/chacha20.h	/^class ChaCha20$/;"	c
Chain	./interfaces/chain.h	/^class Chain$/;"	c	namespace:interfaces
ChainActive	./validation.cpp	/^CChain& ChainActive() { return g_chainstate.m_chain; }$/;"	f
ChainClient	./interfaces/chain.h	/^class ChainClient$/;"	c	namespace:interfaces
ChainCode	./hash.h	/^typedef uint256 ChainCode;$/;"	t
ChainCode	./pubkey.h	/^typedef uint256 ChainCode;$/;"	t
ChainImpl	./interfaces/chain.cpp	/^class ChainImpl : public Chain$/;"	c	namespace:interfaces::__anon129	file:
ChainMergeTestingSetup	./test/util_tests.cpp	/^struct ChainMergeTestingSetup : public BasicTestingSetup {$/;"	s	file:
ChainStateFlushed	./index/base.cpp	/^void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)$/;"	f	class:BaseIndex
ChainStateFlushed	./interfaces/chain.h	/^        virtual void ChainStateFlushed(const CBlockLocator& locator) {}$/;"	f	class:interfaces::Chain::Notifications
ChainStateFlushed	./validationinterface.cpp	/^    boost::signals2::scoped_connection ChainStateFlushed;$/;"	m	struct:ValidationInterfaceConnections	file:
ChainStateFlushed	./validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;$/;"	m	struct:MainSignalsInstance	file:
ChainStateFlushed	./validationinterface.cpp	/^void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {$/;"	f	class:CMainSignals
ChainStateFlushed	./validationinterface.h	/^    virtual void ChainStateFlushed(const CBlockLocator &locator) {}$/;"	f	class:CValidationInterface
ChainStateFlushed	./wallet/wallet.cpp	/^void CWallet::ChainStateFlushed(const CBlockLocator& loc)$/;"	f	class:CWallet
ChainSyncTimeoutState	./net_processing.cpp	/^    struct ChainSyncTimeoutState {$/;"	s	struct:__anon89::CNodeState	file:
ChainTxData	./chainparams.h	/^struct ChainTxData {$/;"	s
Change	./leveldb/db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	./leveldb/db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	./leveldb/table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
ChangePass	./qt/askpassphrasedialog.h	/^        ChangePass, \/**< Ask old passphrase + new passphrase twice *\/$/;"	e	enum:AskPassphraseDialog::Mode
ChangeType	./ui_interface.h	/^enum ChangeType$/;"	g
ChangeWalletPassphrase	./wallet/wallet.cpp	/^bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)$/;"	f	class:CWallet
CharCast	./serialize.h	/^inline char* CharCast(char* c) { return c; }$/;"	f
CharCast	./serialize.h	/^inline char* CharCast(unsigned char* c) { return (char*)c; }$/;"	f
CharCast	./serialize.h	/^inline const char* CharCast(const char* c) { return c; }$/;"	f
CharCast	./serialize.h	/^inline const char* CharCast(const unsigned char* c) { return (const char*)c; }$/;"	f
CharType	./test/util.h	/^bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)$/;"	v
CharType	./test/util.h	/^void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {$/;"	v
Check	./addrman.h	/^    void Check()$/;"	f	class:CAddrMan
Check	./key.cpp	/^bool CKey::Check(const unsigned char *vch) {$/;"	f	class:CKey
Check	./leveldb/db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
Check	./test/descriptor_tests.cpp	/^void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)$/;"	f	namespace:__anon56
CheckAccessCoin	./test/coins_tests.cpp	/^static void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)$/;"	f	file:
CheckAdd	./test/scriptnum_tests.cpp	/^static void CheckAdd(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckAddCoin	./test/coins_tests.cpp	/^static void CheckAddCoin(Args&&... args)$/;"	f	file:
CheckAddCoinBase	./test/coins_tests.cpp	/^static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)$/;"	f	file:
CheckBlock	./validation.cpp	/^bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
CheckBlockHeader	./validation.cpp	/^static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)$/;"	f	file:
CheckBlockIndex	./validation.cpp	/^void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)$/;"	f	class:CChainState
CheckCompare	./test/scriptnum_tests.cpp	/^static void CheckCompare(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckCondition	./leveldb/db/c_test.c	/^#define CheckCondition(/;"	d	file:
CheckCreateInt	./test/scriptnum_tests.cpp	/^static void CheckCreateInt(const int64_t& num)$/;"	f	file:
CheckCreateVch	./test/scriptnum_tests.cpp	/^static void CheckCreateVch(const int64_t& num)$/;"	f	file:
CheckDel	./leveldb/db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckDiskSpace	./util/system.cpp	/^bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes)$/;"	f
CheckEqual	./leveldb/db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckFilterLookups	./test/blockfilter_index_tests.cpp	/^static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,$/;"	f	file:
CheckFinalTx	./validation.cpp	/^bool CheckFinalTx(const CTransaction &tx, int flags)$/;"	f
CheckForStaleTipAndEvictPeers	./net_processing.cpp	/^void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)$/;"	f	class:PeerLogicValidation
CheckGet	./leveldb/db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckIncomingNonce	./net.cpp	/^bool CConnman::CheckIncomingNonce(uint64_t nonce)$/;"	f	class:CConnman
CheckInitialOffsetRecord	./leveldb/db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckInputsAndUpdateCoins	./txmempool.cpp	/^static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& mempoolDuplicate, const int64_t spendheight)$/;"	f	file:
CheckIter	./leveldb/db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckLockTime	./script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLockTime) const$/;"	f	class:GenericTransactionSignatureChecker
CheckLockTime	./script/interpreter.h	/^    virtual bool CheckLockTime(const CScriptNum& nLockTime) const$/;"	f	class:BaseSignatureChecker
CheckLowS	./pubkey.cpp	/^\/* static *\/ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
CheckMinimalPush	./script/interpreter.cpp	/^bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {$/;"	f	file:
CheckNegate	./test/scriptnum_tests.cpp	/^static void CheckNegate(const int64_t& num)$/;"	f	file:
CheckNoError	./leveldb/db/c_test.c	/^#define CheckNoError(/;"	d	file:
CheckOffsetPastEndReturnsNoRecords	./leveldb/db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckParseTorReplyMapping	./test/torcontrol_tests.cpp	/^static void CheckParseTorReplyMapping(std::string input, std::map<std::string,std::string> expected)$/;"	f	file:
CheckProofOfWork	./pow.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)$/;"	f
CheckPubKeyEncoding	./script/interpreter.cpp	/^bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, const SigVersion &sigversion, ScriptError* serror) {$/;"	f	file:
CheckPut	./leveldb/db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
CheckSequence	./script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSequence) const$/;"	f	class:GenericTransactionSignatureChecker
CheckSequence	./script/interpreter.h	/^    virtual bool CheckSequence(const CScriptNum& nSequence) const$/;"	f	class:BaseSignatureChecker
CheckSequenceLocks	./validation.cpp	/^bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp, bool useExistingLockPoints)$/;"	f
CheckSig	./script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:GenericTransactionSignatureChecker
CheckSig	./script/interpreter.h	/^    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:BaseSignatureChecker
CheckSig	./script/sign.cpp	/^bool SignatureExtractorChecker::CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:SignatureExtractorChecker
CheckSignatureEncoding	./script/interpreter.cpp	/^bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror) {$/;"	f
CheckSpendCoins	./test/coins_tests.cpp	/^static void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)$/;"	f	file:
CheckSplitTorReplyLine	./test/torcontrol_tests.cpp	/^static void CheckSplitTorReplyLine(std::string input, std::string command, std::string args)$/;"	f	file:
CheckSubtract	./test/scriptnum_tests.cpp	/^static void CheckSubtract(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckTransaction	./consensus/tx_check.cpp	/^bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)$/;"	f
CheckTxInputs	./consensus/tx_verify.cpp	/^bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee)$/;"	f	class:Consensus
CheckTxScriptsSanity	./core_read.cpp	/^static bool CheckTxScriptsSanity(const CMutableTransaction& tx)$/;"	f	file:
CheckUniqueFileid	./wallet/db.cpp	/^void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filename, Db& db, WalletDatabaseFileId& fileid)$/;"	f	namespace:__anon117
CheckUnparsable	./test/descriptor_tests.cpp	/^void CheckUnparsable(const std::string& prv, const std::string& pub)$/;"	f	namespace:__anon56
CheckVarIntMode	./serialize.h	/^    constexpr CheckVarIntMode()$/;"	f	struct:CheckVarIntMode
CheckVarIntMode	./serialize.h	/^struct CheckVarIntMode {$/;"	s
CheckWarmup	./rest.cpp	/^static bool CheckWarmup(HTTPRequest* req)$/;"	f	file:
CheckWithFlag	./test/transaction_tests.cpp	/^static void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& input, int flags, bool success)$/;"	f	file:
CheckWriteCoins	./test/coins_tests.cpp	/^void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)$/;"	f
Check_	./addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
CheckpointLSN	./wallet/db.cpp	/^void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)$/;"	f	class:BerkeleyEnvironment
Checkpoints	./chainparams.h	/^    const CCheckpointData& Checkpoints() const { return checkpointData; }$/;"	f	class:CChainParams
ChunkToSizeMap	./support/lockedpool.h	/^    typedef std::unordered_map<char*, SizeToChunkSortedMap::const_iterator> ChunkToSizeMap;$/;"	t	class:Arena
Class	./qt/notificator.h	/^    enum Class$/;"	g	class:Notificator
CleanKey	./wallet/crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Cleanup	./leveldb/include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupBlockRevFiles	./init.cpp	/^static void CleanupBlockRevFiles()$/;"	f	file:
CleanupCompaction	./leveldb/db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	./leveldb/include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	./leveldb/db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon18
Clear	./addrman.h	/^    void Clear()$/;"	f	class:CAddrMan
Clear	./coins.h	/^    void Clear() {$/;"	f	class:Coin
Clear	./dbwrapper.h	/^    void Clear()$/;"	f	class:CDBBatch
Clear	./leveldb/db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	./leveldb/db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	./leveldb/db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	./leveldb/util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
Clear	./torcontrol.cpp	/^    void Clear()$/;"	f	class:TorControlReply
Clear	./versionbits.cpp	/^void VersionBitsCache::Clear()$/;"	f	class:VersionBitsCache
ClearArgs	./util/system.h	/^    void ClearArgs() {$/;"	f	class:ArgsManager
ClearBanned	./banman.cpp	/^void BanMan::ClearBanned()$/;"	f	class:BanMan
ClearCurrent	./policy/fees.cpp	/^void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)$/;"	f	class:TxConfirmStats
ClearDatadirCache	./util/system.cpp	/^void ClearDatadirCache()$/;"	f
ClearNew	./addrman.cpp	/^void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)$/;"	f	class:CAddrMan
ClearNodes	./test/denialofservice_tests.cpp	/^    void ClearNodes()$/;"	f	struct:CConnmanTest
ClearPrioritisation	./txmempool.cpp	/^void CTxMemPool::ClearPrioritisation(const uint256 hash)$/;"	f	class:CTxMemPool
ClearSavedValue	./leveldb/db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon29::DBIter	file:
ClickableLabel	./qt/guiutil.h	/^    class ClickableLabel : public QLabel$/;"	c	namespace:GUIUtil
ClickableProgressBar	./qt/guiutil.h	/^    class ClickableProgressBar : public QProgressBar$/;"	c	namespace:GUIUtil
ClientAllowed	./httpserver.cpp	/^static bool ClientAllowed(const CNetAddr& netaddr)$/;"	f	file:
ClientModel	./qt/clientmodel.cpp	/^ClientModel::ClientModel(interfaces::Node& node, OptionsModel *_optionsModel, QObject *parent) :$/;"	f	class:ClientModel
ClientModel	./qt/clientmodel.h	/^class ClientModel : public QObject$/;"	c
ClipToRange	./leveldb/db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	./leveldb/db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	./leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Close() {$/;"	f	class:leveldb::TestWritableFile
Close	./leveldb/db/leveldbutil.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon31::StdoutPrinter
Close	./leveldb/db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	./leveldb/db/recovery_test.cc	/^  void Close() {$/;"	f	class:leveldb::RecoveryTest
Close	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon35::WritableFileImpl
Close	./leveldb/table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	./leveldb/util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Close	./leveldb/util/env_win.cc	/^Status Win32WritableFile::Close()$/;"	f	class:leveldb::Win32::Win32WritableFile
Close	./wallet/db.cpp	/^void BerkeleyBatch::Close()$/;"	f	class:BerkeleyBatch
Close	./wallet/db.cpp	/^void BerkeleyEnvironment::Close()$/;"	f	class:BerkeleyEnvironment
CloseDB	./leveldb/db/fault_injection_test.cc	/^  void CloseDB() {$/;"	f	class:leveldb::FaultInjectionTest
CloseDb	./wallet/db.cpp	/^void BerkeleyEnvironment::CloseDb(const std::string& strFile)$/;"	f	class:BerkeleyEnvironment
CloseSocket	./netbase.cpp	/^bool CloseSocket(SOCKET& hSocket)$/;"	f
CloseSocketDisconnect	./net.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CmpCompare	./leveldb/db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	./leveldb/db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	./leveldb/db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	./leveldb/include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	./leveldb/util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb	file:
Coin	./coins.h	/^    Coin() : fCoinBase(false), nHeight(0) { }$/;"	f	class:Coin
Coin	./coins.h	/^    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}$/;"	f	class:Coin
Coin	./coins.h	/^    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}$/;"	f	class:Coin
Coin	./coins.h	/^class Coin$/;"	c
CoinControlDialog	./qt/coincontroldialog.cpp	/^CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:CoinControlDialog
CoinControlDialog	./qt/coincontroldialog.h	/^class CoinControlDialog : public QDialog$/;"	c
CoinControlFeatures	./qt/optionsmodel.h	/^        CoinControlFeatures,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
CoinControlTreeWidget	./qt/coincontroltreewidget.cpp	/^CoinControlTreeWidget::CoinControlTreeWidget(QWidget *parent) :$/;"	f	class:CoinControlTreeWidget
CoinControlTreeWidget	./qt/coincontroltreewidget.h	/^class CoinControlTreeWidget : public QTreeWidget$/;"	c
CoinEligibilityFilter	./wallet/coinselection.h	/^    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_ancestors) {}$/;"	f	struct:CoinEligibilityFilter
CoinEligibilityFilter	./wallet/coinselection.h	/^    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors, uint64_t max_descendants) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_descendants) {}$/;"	f	struct:CoinEligibilityFilter
CoinEligibilityFilter	./wallet/coinselection.h	/^struct CoinEligibilityFilter$/;"	s
CoinEntry	./txdb.cpp	/^    explicit CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}$/;"	f	struct:__anon121::CoinEntry
CoinEntry	./txdb.cpp	/^struct CoinEntry {$/;"	s	namespace:__anon121	file:
CoinSelection	./bench/coin_selection.cpp	/^static void CoinSelection(benchmark::State& state)$/;"	f	file:
CoinSelectionParams	./wallet/wallet.h	/^    CoinSelectionParams() {}$/;"	f	struct:CoinSelectionParams
CoinSelectionParams	./wallet/wallet.h	/^    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}$/;"	f	struct:CoinSelectionParams
CoinSelectionParams	./wallet/wallet.h	/^struct CoinSelectionParams$/;"	s
CoinSet	./bench/coin_selection.cpp	/^typedef std::set<CInputCoin> CoinSet;$/;"	t	file:
CoinSet	./wallet/test/coinselector_tests.cpp	/^typedef std::set<CInputCoin> CoinSet;$/;"	t	file:
CoinsViewScanReserver	./rpc/blockchain.cpp	/^    explicit CoinsViewScanReserver() : m_could_reserve(false) {}$/;"	f	class:CoinsViewScanReserver
CoinsViewScanReserver	./rpc/blockchain.cpp	/^class CoinsViewScanReserver$/;"	c	file:
ColorizeIcon	./qt/platformstyle.cpp	/^QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)$/;"	f	namespace:__anon67
ColorizeIcon	./qt/platformstyle.cpp	/^QIcon ColorizeIcon(const QString& filename, const QColor& colorbase)$/;"	f	namespace:__anon67
ColorizeImage	./qt/platformstyle.cpp	/^QImage ColorizeImage(const QString& filename, const QColor& colorbase)$/;"	f	namespace:__anon67
Column	./qt/csvmodelwriter.h	/^    struct Column$/;"	s	class:CSVModelWriter
ColumnIndex	./qt/addresstablemodel.h	/^    enum ColumnIndex {$/;"	g	class:AddressTableModel
ColumnIndex	./qt/bantablemodel.h	/^    enum ColumnIndex {$/;"	g	class:BanTableModel
ColumnIndex	./qt/peertablemodel.h	/^    enum ColumnIndex {$/;"	g	class:PeerTableModel
ColumnIndex	./qt/recentrequeststablemodel.h	/^    enum ColumnIndex {$/;"	g	class:RecentRequestsTableModel
ColumnIndex	./qt/transactiontablemodel.h	/^    enum ColumnIndex {$/;"	g	class:TransactionTableModel
ColumnWidths	./qt/receivecoinsdialog.h	/^    enum ColumnWidths {$/;"	g	class:ReceiveCoinsDialog
ColumnWidths	./qt/rpcconsole.h	/^    enum ColumnWidths$/;"	g	class:RPCConsole
ColumnWidths	./qt/transactionview.h	/^    enum ColumnWidths {$/;"	g	class:TransactionView
CombinePSBTs	./psbt.cpp	/^TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs)$/;"	f
CombineSignatures	./test/script_tests.cpp	/^SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction& tx, const SignatureData& scriptSig1, const SignatureData& scriptSig2)$/;"	f
CombineSignatures	./test/transaction_tests.cpp	/^SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)$/;"	f
CombinerAll	./net.h	/^struct CombinerAll$/;"	s
ComboDescriptor	./script/descriptor.cpp	/^    ComboDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "combo") {}$/;"	f	class:__anon75::final
Command	./torcontrol.cpp	/^bool TorControlConnection::Command(const std::string &cmd, const ReplyHandlerCB& reply_handler)$/;"	f	class:TorControlConnection
CommandLineRPC	./bitcoin-cli.cpp	/^static int CommandLineRPC(int argc, char *argv[])$/;"	f	file:
CommandLineRawTx	./bitcoin-tx.cpp	/^static int CommandLineRawTx(int argc, char* argv[])$/;"	f	file:
Commit	./index/base.cpp	/^bool BaseIndex::Commit()$/;"	f	class:BaseIndex
CommitInternal	./index/base.cpp	/^bool BaseIndex::CommitInternal(CDBBatch& batch)$/;"	f	class:BaseIndex
CommitInternal	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::CommitInternal(CDBBatch& batch)$/;"	f	class:BlockFilterIndex
CommitTransaction	./wallet/feebumper.cpp	/^Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransaction&& mtx, std::vector<std::string>& errors, uint256& bumped_txid)$/;"	f	namespace:feebumper
CommitTransaction	./wallet/wallet.cpp	/^bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state)$/;"	f	class:CWallet
Compact	./leveldb/db/db_bench.cc	/^  void Compact(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Compact	./leveldb/db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Compact	./streams.h	/^    inline void Compact()$/;"	f	class:CDataStream
CompactMemTable	./leveldb/db/db_impl.cc	/^void DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactMemTable	./leveldb/db/recovery_test.cc	/^  void CompactMemTable() {$/;"	f	class:leveldb::RecoveryTest
CompactRange	./dbwrapper.h	/^    void CompactRange(const K& key_begin, const K& key_end) const$/;"	f	class:CDBWrapper
CompactRange	./leveldb/db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	./leveldb/db/db_test.cc	/^  virtual void CompactRange(const Slice* start, const Slice* end) {$/;"	f	class:leveldb::ModelDB
CompactRange	./leveldb/db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	./leveldb/db/version_set.cc	/^Compaction::Compaction(const Options* options, int level)$/;"	f	class:leveldb::Compaction
Compaction	./leveldb/db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	./leveldb/db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	./leveldb/db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	./leveldb/db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	./leveldb/db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	./leveldb/db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	./leveldb/include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	./leveldb/db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	./leveldb/db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	./leveldb/db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	./leveldb/table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	./leveldb/table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon15::ReverseKeyComparator
Compare	./leveldb/util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
Compare	./uint256.h	/^    inline int Compare(const base_blob& other) const { return memcmp(data, other.data, sizeof(data)); }$/;"	f	class:base_blob
CompareBlocksByHeight	./rpc/blockchain.cpp	/^struct CompareBlocksByHeight$/;"	s	file:
CompareCTxMemPoolIter	./miner.h	/^struct CompareCTxMemPoolIter {$/;"	s
CompareDepthAndScore	./txmempool.cpp	/^bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)$/;"	f	class:CTxMemPool
CompareInvMempoolOrder	./net_processing.cpp	/^    explicit CompareInvMempoolOrder(CTxMemPool *_mempool)$/;"	f	class:__anon90::CompareInvMempoolOrder
CompareInvMempoolOrder	./net_processing.cpp	/^class CompareInvMempoolOrder$/;"	c	namespace:__anon90	file:
CompareIteratorByHash	./txmempool.h	/^    struct CompareIteratorByHash {$/;"	s	class:CTxMemPool
CompareIterators	./leveldb/db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompareNetGroupKeyed	./net.cpp	/^static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {$/;"	f	file:
CompareNodeBlockTime	./net.cpp	/^static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareNodeTXTime	./net.cpp	/^static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareTo	./arith_uint256.cpp	/^int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const$/;"	f	class:base_uint
CompareTxIterByAncestorCount	./miner.h	/^struct CompareTxIterByAncestorCount {$/;"	s
CompareTxMemPoolEntryByAncestorFee	./txmempool.h	/^class CompareTxMemPoolEntryByAncestorFee$/;"	c
CompareTxMemPoolEntryByDescendantScore	./txmempool.h	/^class CompareTxMemPoolEntryByDescendantScore$/;"	c
CompareTxMemPoolEntryByEntryTime	./txmempool.h	/^class CompareTxMemPoolEntryByEntryTime$/;"	c
CompareTxMemPoolEntryByScore	./txmempool.h	/^class CompareTxMemPoolEntryByScore$/;"	c
CompatTests	./qt/test/compattests.h	/^class CompatTests : public QObject$/;"	c
CompressAmount	./compressor.cpp	/^uint64_t CompressAmount(uint64_t n)$/;"	f
CompressScript	./compressor.cpp	/^bool CompressScript(const CScript& script, std::vector<unsigned char> &out)$/;"	f
CompressibleString	./leveldb/util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	./leveldb/include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ComputeBlockVersion	./validation.cpp	/^int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
ComputeEntry	./script/sigcache.cpp	/^    ComputeEntry(uint256& entry, const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubkey)$/;"	f	class:__anon84::CSignatureCache
ComputeFilter	./test/blockfilter_index_tests.cpp	/^static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,$/;"	f	file:
ComputeHash	./primitives/transaction.cpp	/^uint256 CTransaction::ComputeHash() const$/;"	f	class:CTransaction
ComputeHeader	./blockfilter.cpp	/^uint256 BlockFilter::ComputeHeader(const uint256& prev_header) const$/;"	f	class:BlockFilter
ComputeMerkleBranch	./test/merkle_tests.cpp	/^static std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {$/;"	f	file:
ComputeMerkleRoot	./consensus/merkle.cpp	/^uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {$/;"	f
ComputeMerkleRootFromBranch	./test/merkle_tests.cpp	/^static uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {$/;"	f	file:
ComputeNextBlockAndDepth	./rpc/blockchain.cpp	/^static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* blockindex, const CBlockIndex*& next)$/;"	f	file:
ComputeResponse	./torcontrol.cpp	/^static std::vector<uint8_t> ComputeResponse(const std::string &key, const std::vector<uint8_t> &cookie,  const std::vector<uint8_t> &clientNonce, const std::vector<uint8_t> &serverNonce)$/;"	f	file:
ComputeTimeSmart	./wallet/wallet.cpp	/^unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const$/;"	f	class:CWallet
ComputeWitnessHash	./primitives/transaction.cpp	/^uint256 CTransaction::ComputeWitnessHash() const$/;"	f	class:CTransaction
ConcurrentReader	./leveldb/db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	./leveldb/db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	./leveldb/db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
CondVar	./leveldb/port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	./leveldb/port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	./leveldb/port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	./leveldb/port/port_win.cc	/^CondVar::CondVar(Mutex* mu) :$/;"	f	class:leveldb::port::CondVar
CondVar	./leveldb/port/port_win.h	/^class CondVar {$/;"	c	namespace:leveldb::port
ConfirmMessage	./qt/test/util.cpp	/^void ConfirmMessage(QString* text, int msec)$/;"	f
ConfirmSend	./qt/test/wallettests.cpp	/^void ConfirmSend(QString* text = nullptr, bool cancel = false)$/;"	f	namespace:__anon63
Confirmed	./qt/transactionrecord.h	/^        Confirmed,          \/**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **\/$/;"	e	enum:TransactionStatus::Status
ConfirmedRole	./qt/transactiontablemodel.h	/^        ConfirmedRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Confirming	./qt/transactionrecord.h	/^        Confirming,         \/**< Confirmed, but waiting for the recommended number of confirmations **\/$/;"	e	enum:TransactionStatus::Status
Conflicted	./qt/transactionrecord.h	/^        Conflicted,         \/**< Conflicts with other transaction or mempool **\/$/;"	e	enum:TransactionStatus::Status
Connect	./torcontrol.cpp	/^bool TorControlConnection::Connect(const std::string &target, const ConnectionCB& _connected, const ConnectionCB&  _disconnected)$/;"	f	class:TorControlConnection
ConnectBlock	./validation.cpp	/^bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,$/;"	f	class:CChainState
ConnectNode	./net.cpp	/^CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection)$/;"	f	class:CConnman
ConnectSocketDirectly	./netbase.cpp	/^bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout, bool manual_connection)$/;"	f
ConnectThroughProxy	./netbase.cpp	/^bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectTip	./validation.cpp	/^bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)$/;"	f	class:CChainState
ConnectTrace	./validation.cpp	/^    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {$/;"	f	class:ConnectTrace
ConnectTrace	./validation.cpp	/^class ConnectTrace {$/;"	c	file:
ConnectWallet	./qt/splashscreen.cpp	/^void SplashScreen::ConnectWallet(std::unique_ptr<interfaces::Wallet> wallet)$/;"	f	class:SplashScreen
Connected	./addrman.h	/^    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	./addrman.cpp	/^void CAddrMan::Connected_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
ConnectionCB	./torcontrol.cpp	/^    typedef std::function<void(TorControlConnection&)> ConnectionCB;$/;"	t	class:TorControlConnection	file:
Consensus	./consensus/params.h	/^namespace Consensus {$/;"	n
Consensus	./consensus/tx_verify.h	/^namespace Consensus {$/;"	n
Consensus	./miner.h	/^namespace Consensus { struct Params; };$/;"	n
ConsiderEviction	./net_processing.cpp	/^void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)$/;"	f	class:PeerLogicValidation
ConsolePrinter	./bench/bench.h	/^class ConsolePrinter : public Printer$/;"	c	namespace:benchmark
Const	./script/descriptor.cpp	/^bool Const(const std::string& str, Span<const char>& sp)$/;"	f	namespace:__anon75
ConstPubkeyProvider	./script/descriptor.cpp	/^    ConstPubkeyProvider(const CPubKey& pubkey) : m_pubkey(pubkey) {}$/;"	f	class:__anon75::final
Construct	./wallet/init.cpp	/^void WalletInit::Construct(InitInterfaces& interfaces) const$/;"	f	class:WalletInit
ConstructGCSFilter	./bench/gcs_filter.cpp	/^static void ConstructGCSFilter(benchmark::State& state)$/;"	f	file:
ConstructTransaction	./rpc/rawtransaction_util.cpp	/^CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf)$/;"	f
Constructor	./leveldb/table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	./leveldb/table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeDecimalNumber	./leveldb/util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	./chain.h	/^    bool Contains(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Contains	./leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	./leveldb/db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	./leveldb/db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ContextualCheckBlock	./validation.cpp	/^static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f	file:
ControlMutex	./checkqueue.h	/^    boost::mutex ControlMutex;$/;"	m	class:CCheckQueue
ConvertBits	./util/strencodings.h	/^bool ConvertBits(const O& outfn, I it, I end) {$/;"	f
ConvertLogFilesToTables	./leveldb/db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon30::Repairer	file:
ConvertLogToTable	./leveldb/db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon30::Repairer	file:
CopyFrom	./qt/walletmodel.cpp	/^void WalletModel::UnlockContext::CopyFrom(UnlockContext&& rhs)$/;"	f	class:WalletModel::UnlockContext
CopyHeightIndexToHashIndex	./index/blockfilterindex.cpp	/^static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,$/;"	f	file:
CopySettings	./qt/optionsmodel.cpp	/^static void CopySettings(QSettings& dst, const QSettings& src)$/;"	f	file:
CopyState	./leveldb/util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	./leveldb/db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
CopyrightHolders	./util/system.cpp	/^std::string CopyrightHolders(const std::string& strPrefix)$/;"	f
Correct_Queue	./test/checkqueue_tests.cpp	/^typedef CCheckQueue<FakeCheckCheckCompletion> Correct_Queue;$/;"	t	file:
Correct_Queue_range	./test/checkqueue_tests.cpp	/^static void Correct_Queue_range(std::vector<size_t> range)$/;"	f	file:
Corrupt	./leveldb/db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corruption	./leveldb/db/dumpfile.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon27::CorruptionReporter
Corruption	./leveldb/db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	./leveldb/include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	./leveldb/table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionReporter	./leveldb/db/dumpfile.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon27	file:
CorruptionTest	./leveldb/db/corruption_test.cc	/^  CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	./leveldb/db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb	file:
Count	./leveldb/db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountBits	./crypto/common.h	/^uint64_t static inline CountBits(uint64_t x)$/;"	f
CountFiles	./leveldb/db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
CountWitnessSigOps	./script/interpreter.cpp	/^size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)$/;"	f
Crc32c	./leveldb/db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Create	./addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)$/;"	f	class:CAddrMan
Create	./test/addrman_tests.cpp	/^    CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr)$/;"	f	class:CAddrManTest
Create	./wallet/db.h	/^    static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)$/;"	f	class:BerkeleyDatabase
Create	./zmq/zmqabstractnotifier.h	/^    static CZMQAbstractNotifier* Create()$/;"	f	class:CZMQAbstractNotifier
Create	./zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface* CZMQNotificationInterface::Create()$/;"	f	class:CZMQNotificationInterface
CreateAndProcessBlock	./test/setup_common.cpp	/^TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)$/;"	f	class:TestChain100Setup
CreateBaseChainParams	./chainparamsbase.cpp	/^std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)$/;"	f
CreateBlock	./test/blockfilter_index_tests.cpp	/^static CBlock CreateBlock(const CBlockIndex* prev,$/;"	f	file:
CreateBlockIndexWithNbits	./test/blockchain_tests.cpp	/^static CBlockIndex* CreateBlockIndexWithNbits(uint32_t nbits)$/;"	f	file:
CreateChainParams	./chainparams.cpp	/^std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)$/;"	f
CreateChecksum	./bech32.cpp	/^data CreateChecksum(const std::string& hrp, const data& values)$/;"	f	namespace:__anon116
CreateCreditAndSpend	./test/transaction_tests.cpp	/^static void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)$/;"	f	file:
CreateDir	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
CreateDir	./leveldb/include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	./leveldb/util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon8::PosixEnv
CreateDir	./leveldb/util/env_win.cc	/^Status Win32Env::CreateDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
CreateDirInner	./leveldb/util/env_win.cc	/^static Status CreateDirInner( const std::string& dirname )$/;"	f	namespace:leveldb::Win32
CreateDummy	./wallet/db.h	/^    static std::unique_ptr<BerkeleyDatabase> CreateDummy()$/;"	f	class:BerkeleyDatabase
CreateFilter	./leveldb/db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	./leveldb/db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	./leveldb/table/filter_block_test.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::TestHashFilter
CreateFilter	./leveldb/util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
CreateGenesisBlock	./chainparams.cpp	/^static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateGenesisBlock	./chainparams.cpp	/^static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateInstance	./support/lockedpool.cpp	/^void LockedPoolManager::CreateInstance()$/;"	f	class:LockedPoolManager
CreateInternal	./test/netbase_tests.cpp	/^static CNetAddr CreateInternal(const char* host)$/;"	f	file:
CreateMock	./wallet/db.h	/^    static std::unique_ptr<BerkeleyDatabase> CreateMock()$/;"	f	class:BerkeleyDatabase
CreateMultisigRedeemscript	./rpc/util.cpp	/^CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys)$/;"	f
CreateNewBlock	./miner.cpp	/^std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)$/;"	f	class:BlockAssembler
CreateObfuscateKey	./dbwrapper.cpp	/^std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const$/;"	f	class:CDBWrapper
CreatePidFile	./init.cpp	/^NODISCARD static bool CreatePidFile()$/;"	f	file:
CreateProcess	./secp256k1/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	./secp256k1/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	./univalue/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	./univalue/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateRateBumpTransaction	./wallet/feebumper.cpp	/^Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<std::string>& errors,$/;"	f	namespace:feebumper
CreateSig	./script/sign.cpp	/^bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:MutableTransactionSignatureCreator
CreateSig	./script/sign.cpp	/^static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CPubKey& pubkey, const CScript& scriptcode, SigVersion sigversion)$/;"	f	file:
CreateSocket	./netbase.cpp	/^SOCKET CreateSocket(const CService &addrConnect)$/;"	f
CreateTotalBumpTransaction	./wallet/feebumper.cpp	/^Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,$/;"	f	namespace:feebumper
CreateTransaction	./wallet/wallet.cpp	/^bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,$/;"	f	class:CWallet
CreateWallet	./wallet/wallettool.cpp	/^static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)$/;"	f	namespace:WalletTool
CreateWalletFromFile	./wallet/wallet.cpp	/^std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)$/;"	f	class:CWallet
Critical	./qt/notificator.h	/^        Critical        \/**< An error occurred *\/$/;"	e	enum:Notificator::Class
Crypt	./crypto/chacha20.cpp	/^void ChaCha20::Crypt(const unsigned char* m, unsigned char* c, size_t bytes)$/;"	f	class:ChaCha20
CuckooCache	./cuckoocache.h	/^namespace CuckooCache$/;"	n
CurrentDir	./leveldb/util/env_win.cc	/^static const std::string CurrentDir = GetCurrentDir();$/;"	m	namespace:leveldb::Win32	file:
CurrentDirW	./leveldb/util/env_win.cc	/^static const std::wstring CurrentDirW = GetCurrentDirW();$/;"	m	namespace:leveldb::Win32	file:
CurrentFileName	./leveldb/db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	./leveldb/db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	./leveldb/table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
Cursor	./coins.cpp	/^CCoinsViewCursor *CCoinsView::Cursor() const { return nullptr; }$/;"	f	class:CCoinsView
Cursor	./coins.cpp	/^CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }$/;"	f	class:CCoinsViewBacked
Cursor	./txdb.cpp	/^CCoinsViewCursor *CCoinsViewDB::Cursor() const$/;"	f	class:CCoinsViewDB
DATA	./secp256k1/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATA	./univalue/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATABASE_FLUSH_INTERVAL	./validation.h	/^static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;$/;"	v
DATABASE_WRITE_INTERVAL	./validation.h	/^static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;$/;"	v
DATA_END	./wallet/db.cpp	/^static const char *DATA_END = "DATA=END";$/;"	v	file:
DATE_COLUMN_WIDTH	./qt/receivecoinsdialog.h	/^        DATE_COLUMN_WIDTH = 130,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
DATE_COLUMN_WIDTH	./qt/transactionview.h	/^        DATE_COLUMN_WIDTH = 120,$/;"	e	enum:TransactionView::ColumnWidths
DB	./index/base.cpp	/^BaseIndex::DB::DB(const fs::path& path, size_t n_cache_size, bool f_memory, bool f_wipe, bool f_obfuscate) :$/;"	f	class:BaseIndex::DB
DB	./index/base.h	/^    class DB : public CDBWrapper$/;"	c	class:BaseIndex
DB	./index/txindex.cpp	/^TxIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :$/;"	f	class:TxIndex::DB
DB	./index/txindex.cpp	/^class TxIndex::DB : public BaseIndex::DB$/;"	c	class:TxIndex	file:
DB	./leveldb/include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	./leveldb/include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	./leveldb/table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	./leveldb/table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
DBErrors	./wallet/walletdb.h	/^enum class DBErrors$/;"	c
DBHashKey	./index/blockfilterindex.cpp	/^    DBHashKey(const uint256& hash_in) : hash(hash_in) {}$/;"	f	struct:__anon120::DBHashKey
DBHashKey	./index/blockfilterindex.cpp	/^struct DBHashKey {$/;"	s	namespace:__anon120	file:
DBHeightKey	./index/blockfilterindex.cpp	/^    DBHeightKey() : height(0) {}$/;"	f	struct:__anon120::DBHeightKey
DBHeightKey	./index/blockfilterindex.cpp	/^    DBHeightKey(int height_in) : height(height_in) {}$/;"	f	struct:__anon120::DBHeightKey
DBHeightKey	./index/blockfilterindex.cpp	/^struct DBHeightKey {$/;"	s	namespace:__anon120	file:
DBImpl	./leveldb/db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	./leveldb/db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	./leveldb/db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon29::DBIter
DBIter	./leveldb/db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon29	file:
DBState	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBState	./leveldb/doc/bench/db_bench_tree_db.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBSynchronize	./leveldb/doc/bench/db_bench_tree_db.cc	/^static void DBSynchronize(kyotocabinet::TreeDB* db_)$/;"	f	file:
DBTest	./leveldb/db/db_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	./leveldb/db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DBVal	./index/blockfilterindex.cpp	/^struct DBVal {$/;"	s	namespace:__anon120	file:
DBWRAPPER_PREALLOC_KEY_SIZE	./dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;$/;"	v
DBWRAPPER_PREALLOC_VALUE_SIZE	./dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;$/;"	v
DB_BEST_BLOCK	./index/base.cpp	/^constexpr char DB_BEST_BLOCK = 'B';$/;"	v
DB_BEST_BLOCK	./index/txindex.cpp	/^constexpr char DB_BEST_BLOCK = 'B';$/;"	v
DB_BEST_BLOCK	./txdb.cpp	/^static const char DB_BEST_BLOCK = 'B';$/;"	v	file:
DB_BLOCK_FILES	./txdb.cpp	/^static const char DB_BLOCK_FILES = 'f';$/;"	v	file:
DB_BLOCK_HASH	./index/blockfilterindex.cpp	/^constexpr char DB_BLOCK_HASH = 's';$/;"	v
DB_BLOCK_HEIGHT	./index/blockfilterindex.cpp	/^constexpr char DB_BLOCK_HEIGHT = 't';$/;"	v
DB_BLOCK_INDEX	./txdb.cpp	/^static const char DB_BLOCK_INDEX = 'b';$/;"	v	file:
DB_COIN	./txdb.cpp	/^static const char DB_COIN = 'C';$/;"	v	file:
DB_COINS	./txdb.cpp	/^static const char DB_COINS = 'c';$/;"	v	file:
DB_FILTER_POS	./index/blockfilterindex.cpp	/^constexpr char DB_FILTER_POS = 'P';$/;"	v
DB_FLAG	./txdb.cpp	/^static const char DB_FLAG = 'F';$/;"	v	file:
DB_HEAD_BLOCKS	./txdb.cpp	/^static const char DB_HEAD_BLOCKS = 'H';$/;"	v	file:
DB_LAST_BLOCK	./txdb.cpp	/^static const char DB_LAST_BLOCK = 'l';$/;"	v	file:
DB_REINDEX_FLAG	./txdb.cpp	/^static const char DB_REINDEX_FLAG = 'R';$/;"	v	file:
DB_TEST	./leveldb/table/table_test.cc	/^  DB_TEST$/;"	e	enum:leveldb::TestType	file:
DB_TXINDEX	./index/txindex.cpp	/^constexpr char DB_TXINDEX = 't';$/;"	v
DB_TXINDEX_BLOCK	./index/txindex.cpp	/^constexpr char DB_TXINDEX_BLOCK = 'T';$/;"	v
DEBIT	./wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
DEBUG_CPPFLAGS	./Makefile	/^DEBUG_CPPFLAGS = $/;"	m
DEBUG_CXXFLAGS	./Makefile	/^DEBUG_CXXFLAGS = $/;"	m
DEBUG_TEST	./util/system.h	/^    DEBUG_TEST,$/;"	m	class:OptionsCategory
DECORATION_SIZE	./qt/overviewpage.cpp	/^#define DECORATION_SIZE /;"	d	file:
DEFAULT	./serialize.h	/^enum class VarIntMode { DEFAULT, NONNEGATIVE_SIGNED };$/;"	m	class:VarIntMode
DEFAULT	./test/descriptor_tests.cpp	/^constexpr int DEFAULT = 0;$/;"	m	namespace:__anon56	file:
DEFAULT_ACCEPT_DATACARRIER	./script/standard.h	/^static const bool DEFAULT_ACCEPT_DATACARRIER = true;$/;"	v
DEFAULT_ANCESTOR_LIMIT	./validation.h	/^static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;$/;"	v
DEFAULT_ANCESTOR_SIZE_LIMIT	./validation.h	/^static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;$/;"	v
DEFAULT_AVOIDPARTIALSPENDS	./wallet/wallet.h	/^static const bool DEFAULT_AVOIDPARTIALSPENDS = false;$/;"	v
DEFAULT_BANSCORE_THRESHOLD	./validation.h	/^static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;$/;"	v
DEFAULT_BENCH_EVALUATIONS	./bench/bench_bitcoin.cpp	/^static const int64_t DEFAULT_BENCH_EVALUATIONS = 5;$/;"	v	file:
DEFAULT_BENCH_FILTER	./bench/bench_bitcoin.cpp	/^static const char* DEFAULT_BENCH_FILTER = ".*";$/;"	v	file:
DEFAULT_BENCH_PRINTER	./bench/bench_bitcoin.cpp	/^static const char* DEFAULT_BENCH_PRINTER = "console";$/;"	v	file:
DEFAULT_BENCH_SCALING	./bench/bench_bitcoin.cpp	/^static const char* DEFAULT_BENCH_SCALING = "1.0";$/;"	v	file:
DEFAULT_BLOCKFILTERINDEX	./validation.h	/^static const char* const DEFAULT_BLOCKFILTERINDEX = "0";$/;"	v
DEFAULT_BLOCKSONLY	./net.h	/^static const bool DEFAULT_BLOCKSONLY = false;$/;"	v
DEFAULT_BLOCK_MAX_WEIGHT	./policy/policy.h	/^static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;$/;"	v
DEFAULT_BLOCK_MIN_TX_FEE	./policy/policy.h	/^static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;$/;"	v
DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN	./net_processing.h	/^static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;$/;"	v
DEFAULT_BYTES_PER_SIGOP	./policy/policy.h	/^static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;$/;"	v
DEFAULT_CHECKBLOCKS	./validation.h	/^static const signed int DEFAULT_CHECKBLOCKS = 6;$/;"	v
DEFAULT_CHECKLEVEL	./validation.h	/^static const unsigned int DEFAULT_CHECKLEVEL = 3;$/;"	v
DEFAULT_CHECKPOINTS_ENABLED	./validation.h	/^static const bool DEFAULT_CHECKPOINTS_ENABLED = true;$/;"	v
DEFAULT_CHOOSE_DATADIR	./qt/intro.h	/^static const bool DEFAULT_CHOOSE_DATADIR = false;$/;"	v
DEFAULT_CONNECT_TIMEOUT	./netbase.h	/^static const int DEFAULT_CONNECT_TIMEOUT = 5000;$/;"	v
DEFAULT_DEBUGLOGFILE	./logging.cpp	/^const char * const DEFAULT_DEBUGLOGFILE = "debug.log";$/;"	v
DEFAULT_DESCENDANT_LIMIT	./validation.h	/^static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;$/;"	v
DEFAULT_DESCENDANT_SIZE_LIMIT	./validation.h	/^static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;$/;"	v
DEFAULT_DISABLE_WALLET	./wallet/wallet.h	/^static const bool DEFAULT_DISABLE_WALLET = false;$/;"	v
DEFAULT_DISCARD_FEE	./wallet/wallet.h	/^static const CAmount DEFAULT_DISCARD_FEE = 10000;$/;"	v
DEFAULT_ENABLE_REPLACEMENT	./validation.h	/^static const bool DEFAULT_ENABLE_REPLACEMENT = true;$/;"	v
DEFAULT_FALLBACK_FEE	./wallet/wallet.h	/^static const CAmount DEFAULT_FALLBACK_FEE = 20000;$/;"	v
DEFAULT_FEEFILTER	./validation.h	/^static const bool DEFAULT_FEEFILTER = true;$/;"	v
DEFAULT_FLUSHWALLET	./wallet/walletdb.h	/^static const bool DEFAULT_FLUSHWALLET = true;$/;"	v
DEFAULT_FORCEDNSSEED	./net.h	/^static const bool DEFAULT_FORCEDNSSEED = false;$/;"	v
DEFAULT_GUI_PROXY_HOST	./qt/optionsmodel.cpp	/^const char *DEFAULT_GUI_PROXY_HOST = "127.0.0.1";$/;"	v
DEFAULT_GUI_PROXY_PORT	./qt/optionsmodel.h	/^static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;$/;"	v
DEFAULT_HTTP_CLIENT_TIMEOUT	./bitcoin-cli.cpp	/^static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;$/;"	v	file:
DEFAULT_HTTP_SERVER_TIMEOUT	./httpserver.h	/^static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;$/;"	v
DEFAULT_HTTP_THREADS	./httpserver.h	/^static const int DEFAULT_HTTP_THREADS=4;$/;"	v
DEFAULT_HTTP_WORKQUEUE	./httpserver.h	/^static const int DEFAULT_HTTP_WORKQUEUE=16;$/;"	v
DEFAULT_INCLUDES	./Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src\/config$/;"	m
DEFAULT_INCLUDES	./secp256k1/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src$/;"	m
DEFAULT_INCLUDES	./univalue/Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFAULT_INCREMENTAL_RELAY_FEE	./policy/policy.h	/^static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;$/;"	v
DEFAULT_KEYPOOL_SIZE	./wallet/wallet.h	/^static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;$/;"	v
DEFAULT_LISTEN	./net.h	/^static const bool DEFAULT_LISTEN = true;$/;"	v
DEFAULT_LISTEN_ONION	./torcontrol.h	/^static const bool DEFAULT_LISTEN_ONION = true;$/;"	v
DEFAULT_LOGIPS	./logging.h	/^static const bool DEFAULT_LOGIPS        = false;$/;"	v
DEFAULT_LOGTHREADNAMES	./logging.h	/^static const bool DEFAULT_LOGTHREADNAMES = false;$/;"	v
DEFAULT_LOGTIMEMICROS	./logging.h	/^static const bool DEFAULT_LOGTIMEMICROS = false;$/;"	v
DEFAULT_LOGTIMESTAMPS	./logging.h	/^static const bool DEFAULT_LOGTIMESTAMPS = true;$/;"	v
DEFAULT_MAXRECEIVEBUFFER	./net.h	/^static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;$/;"	v
DEFAULT_MAXSENDBUFFER	./net.h	/^static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;$/;"	v
DEFAULT_MAX_MEMPOOL_SIZE	./policy/policy.h	/^static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;$/;"	v
DEFAULT_MAX_ORPHAN_TRANSACTIONS	./net_processing.h	/^static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;$/;"	v
DEFAULT_MAX_PEER_CONNECTIONS	./net.h	/^static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;$/;"	v
DEFAULT_MAX_SIG_CACHE_SIZE	./script/sigcache.h	/^static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 32;$/;"	v
DEFAULT_MAX_TIME_ADJUSTMENT	./timedata.h	/^static const int64_t DEFAULT_MAX_TIME_ADJUSTMENT = 70 * 60;$/;"	v
DEFAULT_MAX_TIP_AGE	./validation.h	/^static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;$/;"	v
DEFAULT_MAX_UPLOAD_TARGET	./net.h	/^static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;$/;"	v
DEFAULT_MEMPOOL_EXPIRY	./validation.h	/^static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;$/;"	v
DEFAULT_MIN_RELAY_TX_FEE	./validation.h	/^static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;$/;"	v
DEFAULT_MISBEHAVING_BANTIME	./banman.h	/^static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; \/\/ Default 24-hour ban$/;"	v
DEFAULT_NAMED	./bitcoin-cli.cpp	/^static const bool DEFAULT_NAMED=false;$/;"	v	file:
DEFAULT_NAME_LOOKUP	./netbase.h	/^static const int DEFAULT_NAME_LOOKUP = true;$/;"	v
DEFAULT_PAY_TX_FEE	./wallet/wallet.h	/^constexpr CAmount DEFAULT_PAY_TX_FEE = 0;$/;"	v
DEFAULT_PEERBLOOMFILTERS	./validation.h	/^static const bool DEFAULT_PEERBLOOMFILTERS = true;$/;"	v
DEFAULT_PEER_CONNECT_TIMEOUT	./net.h	/^static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;$/;"	v
DEFAULT_PERMIT_BAREMULTISIG	./policy/policy.h	/^static const bool DEFAULT_PERMIT_BAREMULTISIG = true;$/;"	v
DEFAULT_PERSIST_MEMPOOL	./validation.h	/^static const bool DEFAULT_PERSIST_MEMPOOL = true;$/;"	v
DEFAULT_PLOT_HEIGHT	./bench/bench_bitcoin.cpp	/^static const int64_t DEFAULT_PLOT_HEIGHT = 768;$/;"	v	file:
DEFAULT_PLOT_PLOTLYURL	./bench/bench_bitcoin.cpp	/^static const char* DEFAULT_PLOT_PLOTLYURL = "https:\/\/cdn.plot.ly\/plotly-latest.min.js";$/;"	v	file:
DEFAULT_PLOT_WIDTH	./bench/bench_bitcoin.cpp	/^static const int64_t DEFAULT_PLOT_WIDTH = 1024;$/;"	v	file:
DEFAULT_PRINTPRIORITY	./miner.h	/^static const bool DEFAULT_PRINTPRIORITY = false;$/;"	v
DEFAULT_PROXYRANDOMIZE	./init.cpp	/^static const bool DEFAULT_PROXYRANDOMIZE = true;$/;"	v	file:
DEFAULT_REST_ENABLE	./init.cpp	/^static const bool DEFAULT_REST_ENABLE = false;$/;"	v	file:
DEFAULT_RPCCONNECT	./bitcoin-cli.cpp	/^static const char DEFAULT_RPCCONNECT[] = "127.0.0.1";$/;"	v	file:
DEFAULT_RPC_SERIALIZE_VERSION	./rpc/server.h	/^static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;$/;"	v
DEFAULT_SCRIPTCHECK_THREADS	./validation.h	/^static const int DEFAULT_SCRIPTCHECK_THREADS = 0;$/;"	v
DEFAULT_SELFSIGNED_ROOTCERTS	./qt/paymentrequestplus.h	/^static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;$/;"	v
DEFAULT_SPEND_ZEROCONF_CHANGE	./wallet/wallet.h	/^static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;$/;"	v
DEFAULT_SPLASHSCREEN	./qt/guiconstants.h	/^static const bool DEFAULT_SPLASHSCREEN = true;$/;"	v
DEFAULT_STOPAFTERBLOCKIMPORT	./init.cpp	/^static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;$/;"	v	file:
DEFAULT_STOPATHEIGHT	./validation.h	/^static const int DEFAULT_STOPATHEIGHT = 0;$/;"	v
DEFAULT_TOR_CONTROL	./torcontrol.cpp	/^const std::string DEFAULT_TOR_CONTROL = "127.0.0.1:9051";$/;"	v
DEFAULT_TRANSACTION_MINFEE	./wallet/wallet.h	/^static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;$/;"	v
DEFAULT_TXINDEX	./validation.h	/^static const bool DEFAULT_TXINDEX = false;$/;"	v
DEFAULT_TX_CONFIRM_TARGET	./wallet/wallet.h	/^static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;$/;"	v
DEFAULT_UIPLATFORM	./qt/bitcoingui.cpp	/^const std::string BitcoinGUI::DEFAULT_UIPLATFORM =$/;"	m	class:BitcoinGUI	file:
DEFAULT_UIPLATFORM	./qt/bitcoingui.h	/^    static const std::string DEFAULT_UIPLATFORM;$/;"	m	class:BitcoinGUI
DEFAULT_UPNP	./net.h	/^static const bool DEFAULT_UPNP = USE_UPNP;$/;"	v
DEFAULT_UPNP	./net.h	/^static const bool DEFAULT_UPNP = false;$/;"	v
DEFAULT_WALLETBROADCAST	./wallet/wallet.h	/^static const bool DEFAULT_WALLETBROADCAST = true;$/;"	v
DEFAULT_WALLET_DBLOGSIZE	./wallet/db.h	/^static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;$/;"	v
DEFAULT_WALLET_PRIVDB	./wallet/db.h	/^static const bool DEFAULT_WALLET_PRIVDB = true;$/;"	v
DEFAULT_WALLET_RBF	./wallet/wallet.h	/^static const bool DEFAULT_WALLET_RBF = false;$/;"	v
DEFAULT_WALLET_REJECT_LONG_CHAINS	./wallet/wallet.h	/^static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;$/;"	v
DEFAULT_WHITELISTFORCERELAY	./validation.h	/^static const bool DEFAULT_WHITELISTFORCERELAY = false;$/;"	v
DEFAULT_WHITELISTRELAY	./validation.h	/^static const bool DEFAULT_WHITELISTRELAY = true;$/;"	v
DEFAULT_ZMQ_SNDHWM	./zmq/zmqabstractnotifier.cpp	/^const int CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM;$/;"	m	class:CZMQAbstractNotifier	file:
DEFINED	./versionbits.h	/^    DEFINED,$/;"	m	class:ThresholdState
DEFS	./Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	./secp256k1/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	./univalue/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	./Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	./secp256k1/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	./univalue/Makefile	/^DEPDIR = .deps$/;"	m
DEPLOYMENT_TESTDUMMY	./consensus/params.h	/^    DEPLOYMENT_TESTDUMMY,$/;"	e	enum:Consensus::DeploymentPos
DESIRED_SAMPLES	./qt/trafficgraphwidget.cpp	/^#define DESIRED_SAMPLES /;"	d	file:
DEVICESDK	./leveldb/Makefile	/^DEVICESDK=$(shell xcrun -sdk iphoneos --show-sdk-path)$/;"	m
DEVICE_ALLOBJS	./leveldb/Makefile	/^DEVICE_ALLOBJS := $(DEVICE_LIBOBJECTS) $(DEVICE_MEMENVOBJECTS)$/;"	m
DEVICE_CFLAGS	./leveldb/Makefile	/^DEVICE_CFLAGS = -isysroot "$(DEVICESDK)" -arch armv6 -arch armv7 -arch armv7s -arch arm64$/;"	m
DEVICE_LIBOBJECTS	./leveldb/Makefile	/^DEVICE_LIBOBJECTS := $(addprefix $(DEVICE_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
DEVICE_MEMENVOBJECTS	./leveldb/Makefile	/^DEVICE_MEMENVOBJECTS := $(addprefix $(DEVICE_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
DEVICE_OUTDIR	./leveldb/Makefile	/^DEVICE_OUTDIR=out-ios-arm$/;"	m
DIRTY	./coins.h	/^        DIRTY = (1 << 0), \/\/ This cache entry is potentially different from the version in the parent view.$/;"	e	enum:CCoinsCacheEntry::Flags
DIRTY	./test/coins_tests.cpp	/^const static char DIRTY = CCoinsCacheEntry::DIRTY;$/;"	v	file:
DISABLE_REG	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
DISABLE_TEST	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
DISALLOW_COPY_AND_ASSIGN	./leveldb/util/env_win.cc	/^#define DISALLOW_COPY_AND_ASSIGN(/;"	d	file:
DISCONNECT_FAILED	./validation.cpp	/^    DISCONNECT_FAILED   \/\/ Something else went wrong.$/;"	e	enum:DisconnectResult	file:
DISCONNECT_OK	./validation.cpp	/^    DISCONNECT_OK,      \/\/ All good.$/;"	e	enum:DisconnectResult	file:
DISCONNECT_UNCLEAN	./validation.cpp	/^    DISCONNECT_UNCLEAN, \/\/ Rolled back, but UTXO set was inconsistent with block.$/;"	e	enum:DisconnectResult	file:
DISK	./qt/clientmodel.h	/^    DISK,$/;"	m	class:BlockSource
DISTFILES	./Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	./secp256k1/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	./univalue/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	./secp256k1/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_ARCHIVES	./univalue/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	./Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__include_HEADERS_DIST) \\$/;"	m
DIST_COMMON	./secp256k1/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_COMMON	./univalue/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_SOURCES	./Makefile	/^DIST_SOURCES = $(crypto_libbitcoin_crypto_avx2_a_SOURCES) \\$/;"	m
DIST_SOURCES	./secp256k1/Makefile	/^DIST_SOURCES = $(libsecp256k1_la_SOURCES) \\$/;"	m
DIST_SOURCES	./univalue/Makefile	/^DIST_SOURCES = $(libunivalue_la_SOURCES) $(test_no_nul_SOURCES) \\$/;"	m
DIST_SUBDIRS	./Makefile	/^DIST_SUBDIRS = secp256k1 univalue$/;"	m
DIST_TARGETS	./secp256k1/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DIST_TARGETS	./univalue/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DLLTOOL	./Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	./secp256k1/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	./univalue/Makefile	/^DLLTOOL = false$/;"	m
DNSSeeds	./chainparams.h	/^    const std::vector<std::string>& DNSSeeds() const { return vSeeds; }$/;"	f	class:CChainParams
DOMAINNAME	./netbase.cpp	/^    DOMAINNAME = 0x03,$/;"	e	enum:uint8_t	file:
DONE	./leveldb/db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState	file:
DOUBLE_ESTIMATE	./policy/fees.h	/^    DOUBLE_ESTIMATE,$/;"	m	class:FeeEstimateHorizon::FeeReason
DOUBLE_SUCCESS_PCT	./policy/fees.h	/^    static constexpr double DOUBLE_SUCCESS_PCT = .95;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
DOXYGEN	./Makefile	/^DOXYGEN = $/;"	m
DO_STRINGIZE	./clientversion.h	/^#define DO_STRINGIZE(/;"	d
DSYMUTIL	./Makefile	/^DSYMUTIL = dsymutil$/;"	m
DSYMUTIL	./secp256k1/Makefile	/^DSYMUTIL = dsymutil$/;"	m
DSYMUTIL	./univalue/Makefile	/^DSYMUTIL = dsymutil$/;"	m
DUMMY_CHECKER	./script/sign.cpp	/^const DummySignatureChecker DUMMY_CHECKER;$/;"	m	namespace:__anon83	file:
DUMMY_MAXIMUM_SIGNATURE_CREATOR	./script/sign.cpp	/^const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32);$/;"	v
DUMMY_NESTED_P2WPKH_INPUT_SIZE	./wallet/wallet.h	/^static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;$/;"	v
DUMMY_SIGNATURE_CREATOR	./script/sign.cpp	/^const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32);$/;"	v
DUMMY_SIGNING_PROVIDER	./script/sign.cpp	/^const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();$/;"	v
DUMPBIN	./Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	./secp256k1/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	./univalue/Makefile	/^DUMPBIN = $/;"	m
DUMP_BANS_INTERVAL	./init.cpp	/^static constexpr int DUMP_BANS_INTERVAL = 60 * 15;$/;"	v	file:
DUMP_PEERS_INTERVAL	./net.cpp	/^static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;$/;"	v	file:
DUPLICATE_ADDRESS	./qt/addresstablemodel.h	/^        DUPLICATE_ADDRESS,      \/**< Address already in address book *\/$/;"	e	enum:AddressTableModel::EditStatus
DUST_RELAY_TX_FEE	./policy/policy.h	/^static const unsigned int DUST_RELAY_TX_FEE = 3000;$/;"	v
Damage	./test/pmt_tests.cpp	/^    void Damage() {$/;"	f	class:CPartialMerkleTreeTester
DamagePush	./test/script_tests.cpp	/^    TestBuilder& DamagePush(unsigned int pos)$/;"	f	class:__anon58::TestBuilder
DataDir	./chainparamsbase.h	/^    const std::string& DataDir() const { return strDataDir; }$/;"	f	class:CBaseChainParams
DataFromTransaction	./script/sign.cpp	/^SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout)$/;"	f
DatabaseCache	./qt/optionsmodel.h	/^        DatabaseCache,          \/\/ int$/;"	e	enum:OptionsModel::OptionID
Date	./qt/recentrequeststablemodel.h	/^        Date = 0,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
Date	./qt/transactiontablemodel.h	/^        Date = 2,$/;"	e	enum:TransactionTableModel::ColumnIndex
DateEnum	./qt/transactionview.h	/^    enum DateEnum$/;"	g	class:TransactionView
DateRole	./qt/transactiontablemodel.h	/^        DateRole,$/;"	e	enum:TransactionTableModel::RoleIndex
DebugMessageHandler	./qt/bitcoin.cpp	/^void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, const QString &msg)$/;"	f
DebugString	./leveldb/db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	./leveldb/db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	./leveldb/db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	./leveldb/db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
Decode	./bech32.cpp	/^std::pair<std::string, data> Decode(const std::string& str) {$/;"	f	namespace:bech32
Decode	./key.cpp	/^void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtKey
Decode	./pubkey.cpp	/^void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtPubKey
DecodeBase32	./util/strencodings.cpp	/^std::string DecodeBase32(const std::string& str, bool* pf_invalid)$/;"	f
DecodeBase32	./util/strencodings.cpp	/^std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)$/;"	f
DecodeBase58	./base58.cpp	/^bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)$/;"	f
DecodeBase58	./base58.cpp	/^bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	./base58.cpp	/^bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	./base58.cpp	/^bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	./util/strencodings.cpp	/^std::string DecodeBase64(const std::string& str, bool* pf_invalid)$/;"	f
DecodeBase64	./util/strencodings.cpp	/^std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)$/;"	f
DecodeBase64PSBT	./psbt.cpp	/^bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)$/;"	f
DecodeDestination	./key_io.cpp	/^CTxDestination DecodeDestination(const std::string& str)$/;"	f
DecodeDestination	./key_io.cpp	/^CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)$/;"	f	namespace:__anon54
DecodeDumpString	./wallet/rpcdump.cpp	/^static std::string DecodeDumpString(const std::string &str) {$/;"	f	file:
DecodeDumpTime	./wallet/rpcdump.cpp	/^int64_t static DecodeDumpTime(const std::string &str) {$/;"	f	file:
DecodeEntry	./leveldb/table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeExtKey	./key_io.cpp	/^CExtKey DecodeExtKey(const std::string& str)$/;"	f
DecodeExtPubKey	./key_io.cpp	/^CExtPubKey DecodeExtPubKey(const std::string& str)$/;"	f
DecodeFixed32	./leveldb/util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	./leveldb/util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	./leveldb/db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	./leveldb/db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	./leveldb/table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	./leveldb/table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeHexBlk	./core_read.cpp	/^bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)$/;"	f
DecodeHexBlockHeader	./core_read.cpp	/^bool DecodeHexBlockHeader(CBlockHeader& header, const std::string& hex_header)$/;"	f
DecodeHexTx	./core_read.cpp	/^bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness, bool try_witness)$/;"	f
DecodeKey	./leveldb/util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeOP_N	./script/script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
DecodeRawPSBT	./psbt.cpp	/^bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data, std::string& error)$/;"	f
DecodeSecret	./key_io.cpp	/^CKey DecodeSecret(const std::string& str)$/;"	f
DecodeValue	./leveldb/util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Decompress	./pubkey.cpp	/^bool CPubKey::Decompress() {$/;"	f	class:CPubKey
DecompressAmount	./compressor.cpp	/^uint64_t DecompressAmount(uint64_t x)$/;"	f
DecompressScript	./compressor.cpp	/^bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &in)$/;"	f
Decrypt	./crypto/aes.cpp	/^int AES256CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES256CBCDecrypt
Decrypt	./crypto/aes.cpp	/^void AES256Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const$/;"	f	class:AES256Decrypt
Decrypt	./qt/askpassphrasedialog.h	/^        Decrypt     \/**< Ask passphrase and decrypt wallet *\/$/;"	e	enum:AskPassphraseDialog::Mode
Decrypt	./wallet/crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const$/;"	f	class:CCrypter
DecryptKey	./wallet/crypter.cpp	/^static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)$/;"	f	file:
DecryptSecret	./wallet/crypter.cpp	/^static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)$/;"	f	file:
Default	./leveldb/util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	./leveldb/util/env_win.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
DefaultConsistencyChecks	./chainparams.h	/^    bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }$/;"	f	class:CChainParams
DefaultOptions	./miner.cpp	/^static BlockAssembler::Options DefaultOptions()$/;"	f	file:
DefaultRequestHandler	./bitcoin-cli.cpp	/^class DefaultRequestHandler: public BaseRequestHandler {$/;"	c	file:
DefaultShrinkDebugFile	./logging.cpp	/^bool BCLog::Logger::DefaultShrinkDebugFile() const$/;"	f	class:BCLog::Logger
DelAddressBook	./wallet/wallet.cpp	/^bool CWallet::DelAddressBook(const CTxDestination& address)$/;"	f	class:CWallet
DelayMilliseconds	./leveldb/db/db_test.cc	/^void DelayMilliseconds(int millis) {$/;"	f	namespace:leveldb::__anon23
Delete	./addrman.cpp	/^void CAddrMan::Delete(int nId)$/;"	f	class:CAddrMan
Delete	./leveldb/db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	./leveldb/db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	./leveldb/db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	./leveldb/db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	./leveldb/db/dumpfile.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon27::WriteBatchItemPrinter
Delete	./leveldb/db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	./leveldb/db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon22::MemTableInserter
Delete	./leveldb/db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
Delete	./test/addrman_tests.cpp	/^    void Delete(int nId)$/;"	f	class:CAddrManTest
DeleteAllData	./leveldb/db/fault_injection_test.cc	/^  void DeleteAllData() {$/;"	f	class:leveldb::FaultInjectionTest
DeleteAnSSTFile	./leveldb/db/db_test.cc	/^  bool DeleteAnSSTFile() {$/;"	f	class:leveldb::DBTest
DeleteAuthCookie	./rpc/protocol.cpp	/^void DeleteAuthCookie()$/;"	f
DeleteBlock	./leveldb/table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	./leveldb/table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
DeleteDir	./leveldb/include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	./leveldb/util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon8::PosixEnv
DeleteDir	./leveldb/util/env_win.cc	/^Status Win32Env::DeleteDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteEntry	./leveldb/db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	./leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteFile	./leveldb/db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
DeleteFile	./leveldb/include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	./leveldb/util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixEnv
DeleteFile	./leveldb/util/env_win.cc	/^#undef DeleteFile$/;"	d	file:
DeleteFile	./leveldb/util/env_win.cc	/^Status Win32Env::DeleteFile( const std::string& fname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteFileInternal	./leveldb/helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
DeleteFilesCreatedAfterLastDirSync	./leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFilesCreatedAfterLastDirSync() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteLock	./sync.cpp	/^void DeleteLock(void* cs)$/;"	f
DeleteLock	./sync.h	/^void static inline DeleteLock(void* cs) {}$/;"	f
DeleteLogFiles	./leveldb/db/recovery_test.cc	/^  size_t DeleteLogFiles() {$/;"	f	class:leveldb::RecoveryTest
DeleteNode	./net.cpp	/^void CConnman::DeleteNode(CNode* pnode)$/;"	f	class:CConnman
DeleteObsoleteFiles	./leveldb/db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	./leveldb/db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeleteSeq	./leveldb/db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	./leveldb/db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	./leveldb/util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DeploymentPos	./consensus/params.h	/^enum DeploymentPos$/;"	g	namespace:Consensus
DepthAndScoreComparator	./txmempool.cpp	/^class DepthAndScoreComparator$/;"	c	namespace:__anon74	file:
DereferencingComparator	./indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	s
Derive	./key.cpp	/^bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {$/;"	f	class:CExtKey
Derive	./key.cpp	/^bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CKey
Derive	./pubkey.cpp	/^bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {$/;"	f	class:CExtPubKey
Derive	./pubkey.cpp	/^bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CPubKey
DeriveNewChildKey	./wallet/wallet.cpp	/^void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)$/;"	f	class:CWallet
DeriveNewSeed	./wallet/wallet.cpp	/^CPubKey CWallet::DeriveNewSeed(const CKey& key)$/;"	f	class:CWallet
DeriveType	./script/descriptor.cpp	/^enum class DeriveType {$/;"	c	namespace:__anon75	file:
DescribeAddress	./rpc/util.cpp	/^UniValue DescribeAddress(const CTxDestination& dest)$/;"	f
DescribeAddressVisitor	./rpc/util.cpp	/^    explicit DescribeAddressVisitor() {}$/;"	f	class:DescribeAddressVisitor
DescribeAddressVisitor	./rpc/util.cpp	/^class DescribeAddressVisitor : public boost::static_visitor<UniValue>$/;"	c	file:
DescribeWalletAddress	./wallet/rpcwallet.cpp	/^static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)$/;"	f	file:
DescribeWalletAddressVisitor	./wallet/rpcwallet.cpp	/^    explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}$/;"	f	class:DescribeWalletAddressVisitor
DescribeWalletAddressVisitor	./wallet/rpcwallet.cpp	/^class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>$/;"	c	file:
Descriptor	./script/descriptor.h	/^struct Descriptor {$/;"	s
DescriptorChecksum	./script/descriptor.cpp	/^std::string DescriptorChecksum(const Span<const char>& span)$/;"	f	namespace:__anon75
DescriptorFileName	./leveldb/db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DescriptorImpl	./script/descriptor.cpp	/^    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_script_arg(std::move(script)), m_name(name) {}$/;"	f	class:__anon75::DescriptorImpl
DescriptorImpl	./script/descriptor.cpp	/^class DescriptorImpl : public Descriptor$/;"	c	namespace:__anon75	file:
DeserializeAndCheckBlockTest	./bench/checkblock.cpp	/^static void DeserializeAndCheckBlockTest(benchmark::State& state)$/;"	f	file:
DeserializeBlockTest	./bench/checkblock.cpp	/^static void DeserializeBlockTest(benchmark::State& state)$/;"	f	file:
DeserializeDB	./addrdb.cpp	/^bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)$/;"	f	namespace:__anon115
DeserializeFileDB	./addrdb.cpp	/^bool DeserializeFileDB(const fs::path& path, Data& data)$/;"	f	namespace:__anon115
DeserializeHDKeypaths	./script/sign.h	/^void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)$/;"	f
DestinationEncoder	./key_io.cpp	/^    explicit DestinationEncoder(const CChainParams& params) : m_params(params) {}$/;"	f	class:__anon54::DestinationEncoder
DestinationEncoder	./key_io.cpp	/^class DestinationEncoder : public boost::static_visitor<std::string>$/;"	c	namespace:__anon54	file:
DestroyAllBlockFilterIndexes	./index/blockfilterindex.cpp	/^void DestroyAllBlockFilterIndexes()$/;"	f
DestroyAndReopen	./leveldb/db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyBlockFilterIndex	./index/blockfilterindex.cpp	/^bool DestroyBlockFilterIndex(BlockFilterType filter_type)$/;"	f
DestroyDB	./leveldb/db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
DifficultyAdjustmentInterval	./consensus/params.h	/^    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan \/ nPowTargetSpacing; }$/;"	f	struct:Consensus::Params
DirIsWritable	./util/system.cpp	/^bool DirIsWritable(const fs::path& directory)$/;"	f
DirWasSynced	./leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::DirWasSynced() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Direction	./leveldb/db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon29::DBIter	file:
Direction	./leveldb/table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon11::MergingIterator	file:
Directory	./wallet/db.h	/^    fs::path Directory() const { return strPath; }$/;"	f	class:BerkeleyEnvironment
DisableCategory	./logging.cpp	/^bool BCLog::Logger::DisableCategory(const std::string& str)$/;"	f	class:BCLog::Logger
DisableCategory	./logging.cpp	/^void BCLog::Logger::DisableCategory(BCLog::LogFlags flag)$/;"	f	class:BCLog::Logger
Discard	./wallet/coinselection.cpp	/^std::vector<CInputCoin>::iterator OutputGroup::Discard(const CInputCoin& output) {$/;"	f	class:OutputGroup
Disconnect	./torcontrol.cpp	/^void TorControlConnection::Disconnect()$/;"	f	class:TorControlConnection
DisconnectBlock	./validation.cpp	/^DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)$/;"	f	class:CChainState
DisconnectNode	./net.cpp	/^bool CConnman::DisconnectNode(NodeId id)$/;"	f	class:CConnman
DisconnectNode	./net.cpp	/^bool CConnman::DisconnectNode(const CNetAddr& addr)$/;"	f	class:CConnman
DisconnectNode	./net.cpp	/^bool CConnman::DisconnectNode(const CSubNet& subnet)$/;"	f	class:CConnman
DisconnectNode	./net.cpp	/^bool CConnman::DisconnectNode(const std::string& strNode)$/;"	f	class:CConnman
DisconnectNodes	./net.cpp	/^void CConnman::DisconnectNodes()$/;"	f	class:CConnman
DisconnectResult	./validation.cpp	/^enum DisconnectResult$/;"	g	file:
DisconnectTip	./validation.cpp	/^bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)$/;"	f	class:CChainState
Disconnected	./netbase.cpp	/^    Disconnected,$/;"	m	class:IntrRecvError	file:
DisconnectedBlockTransactions	./txmempool.h	/^struct DisconnectedBlockTransactions {$/;"	s
Discover	./net.cpp	/^void Discover()$/;"	f
DisplayUnit	./qt/optionsmodel.h	/^        DisplayUnit,            \/\/ BitcoinUnits::Unit$/;"	e	enum:OptionsModel::OptionID
DoCompactionWork	./leveldb/db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	./leveldb/db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoPush	./test/script_tests.cpp	/^    void DoPush()$/;"	f	class:__anon58::TestBuilder	file:
DoPush	./test/script_tests.cpp	/^    void DoPush(const std::vector<unsigned char>& data)$/;"	f	class:__anon58::TestBuilder	file:
DoReads	./leveldb/db/autocompact_test.cc	/^void AutoCompactTest::DoReads(int n) {$/;"	f	class:leveldb::AutoCompactTest
DoTest	./leveldb/db/fault_injection_test.cc	/^  void DoTest() {$/;"	f	class:leveldb::FaultInjectionTest
DoTest	./test/script_tests.cpp	/^void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError, CAmount nValue = 0)$/;"	f
DoWarning	./validation.cpp	/^static void DoWarning(const std::string& strWarning)$/;"	f	file:
DoWrite	./leveldb/db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	./leveldb/util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
DoubleEquals	./test/blockchain_tests.cpp	/^static bool DoubleEquals(double a, double b, double epsilon)$/;"	f	file:
Downcase	./util/strencodings.cpp	/^void Downcase(std::string& str)$/;"	f
DropUnsyncedData	./leveldb/db/fault_injection_test.cc	/^Status FileState::DropUnsyncedData() const {$/;"	f	class:leveldb::FileState
DropUnsyncedFileData	./leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DropUnsyncedFileData() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DroppedBytes	./leveldb/db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DummyAddress	./qt/guiutil.cpp	/^static std::string DummyAddress(const CChainParams &params)$/;"	f	namespace:GUIUtil
DummySignInput	./wallet/wallet.cpp	/^bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig) const$/;"	f	class:CWallet
DummySignTx	./wallet/wallet.cpp	/^bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig) const$/;"	f	class:CWallet
DummySignTx	./wallet/wallet.h	/^    bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const$/;"	f	class:final
DummySignatureChecker	./script/sign.cpp	/^    DummySignatureChecker() {}$/;"	f	class:__anon83::final
DummySignatureCreator	./script/sign.cpp	/^    DummySignatureCreator(char r_len, char s_len) : m_r_len(r_len), m_s_len(s_len) {}$/;"	f	class:__anon83::final
DummyWalletInit	./dummywallet.cpp	/^class DummyWalletInit : public WalletInitInterface {$/;"	c	file:
DumpAddresses	./net.cpp	/^void CConnman::DumpAddresses()$/;"	f	class:CConnman
DumpBanlist	./banman.cpp	/^void BanMan::DumpBanlist()$/;"	f	class:BanMan
DumpDescriptor	./leveldb/db/dumpfile.cc	/^Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
DumpFile	./leveldb/db/dumpfile.cc	/^Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb
DumpFileCounts	./leveldb/db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	./leveldb/util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpLog	./leveldb/db/dumpfile.cc	/^Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
DumpMempool	./validation.cpp	/^bool DumpMempool(const CTxMemPool& pool)$/;"	f
DumpSSTableList	./leveldb/db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpTable	./leveldb/db/dumpfile.cc	/^Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
DuplicateAddress	./qt/walletmodel.h	/^        DuplicateAddress,$/;"	e	enum:WalletModel::StatusCode
DuplicateInputs	./bench/duplicate_inputs.cpp	/^static void DuplicateInputs(benchmark::State& state)$/;"	f	file:
DynamicMemoryUsage	./coins.cpp	/^size_t CCoinsViewCache::DynamicMemoryUsage() const {$/;"	f	class:CCoinsViewCache
DynamicMemoryUsage	./coins.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	class:Coin
DynamicMemoryUsage	./dbwrapper.cpp	/^size_t CDBWrapper::DynamicMemoryUsage() const {$/;"	f	class:CDBWrapper
DynamicMemoryUsage	./txmempool.cpp	/^size_t CTxMemPool::DynamicMemoryUsage() const {$/;"	f	class:CTxMemPool
DynamicMemoryUsage	./txmempool.h	/^    size_t DynamicMemoryUsage() const { return nUsageSize; }$/;"	f	class:CTxMemPoolEntry
DynamicMemoryUsage	./txmempool.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	struct:DisconnectedBlockTransactions
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const double& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const float& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const int16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const int32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const int64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const int8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const prevector<N, X, S, D>& v)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const std::shared_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const std::unique_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const std::unordered_set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const std::vector<X>& v)$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const uint16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const uint32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const uint64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^static inline size_t DynamicUsage(const uint8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	./memusage.h	/^template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }$/;"	f	namespace:memusage
E	./test/util_tests.cpp	/^#define E /;"	d	file:
E	./test/util_tests.cpp	/^#undef E$/;"	d	file:
ECCVerifyHandle	./pubkey.cpp	/^ECCVerifyHandle::ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
ECCVerifyHandle	./pubkey.h	/^class ECCVerifyHandle$/;"	c
ECC_InitSanityCheck	./key.cpp	/^bool ECC_InitSanityCheck() {$/;"	f
ECC_Start	./key.cpp	/^void ECC_Start() {$/;"	f
ECC_Stop	./key.cpp	/^void ECC_Stop() {$/;"	f
ECCryptoClosure	./script/bitcoinconsensus.cpp	/^struct ECCryptoClosure$/;"	s	namespace:__anon81	file:
ECHO_C	./Makefile	/^ECHO_C = \\c$/;"	m
ECHO_C	./secp256k1/Makefile	/^ECHO_C = \\c$/;"	m
ECHO_C	./univalue/Makefile	/^ECHO_C = \\c$/;"	m
ECHO_N	./Makefile	/^ECHO_N = $/;"	m
ECHO_N	./secp256k1/Makefile	/^ECHO_N = $/;"	m
ECHO_N	./univalue/Makefile	/^ECHO_N = $/;"	m
ECHO_T	./Makefile	/^ECHO_T = $/;"	m
ECHO_T	./secp256k1/Makefile	/^ECHO_T = $/;"	m
ECHO_T	./univalue/Makefile	/^ECHO_T = $/;"	m
ECMULT_CONST_TABLE_GET_GE	./secp256k1/src/ecmult_const_impl.h	/^#define ECMULT_CONST_TABLE_GET_GE(/;"	d
ECMULT_TABLE_GET_GE	./secp256k1/src/ecmult_impl.h	/^#define ECMULT_TABLE_GET_GE(/;"	d
ECMULT_TABLE_GET_GE_STORAGE	./secp256k1/src/ecmult_impl.h	/^#define ECMULT_TABLE_GET_GE_STORAGE(/;"	d
ECMULT_TABLE_SIZE	./secp256k1/src/ecmult_impl.h	/^#define ECMULT_TABLE_SIZE(/;"	d
ECONOMICAL	./policy/fees.h	/^    ECONOMICAL,   \/\/!< Force estimateSmartFee to use non-conservative estimates$/;"	m	class:FeeEstimateHorizon::FeeEstimateMode
EGREP	./Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	./secp256k1/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	./univalue/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
ENABLE_AVX2	./config/bitcoin-config.h	/^#define ENABLE_AVX2 /;"	d
ENABLE_MODULE_RECOVERY	./secp256k1/src/libsecp256k1-config.h	/^#define ENABLE_MODULE_RECOVERY /;"	d
ENABLE_REG	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
ENABLE_SSE41	./config/bitcoin-config.h	/^#define ENABLE_SSE41 /;"	d
ENABLE_TEST	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
ENABLE_ZMQ	./config/bitcoin-config.h	/^#define ENABLE_ZMQ /;"	d
ENTER_CRITICAL_SECTION	./sync.h	/^#define ENTER_CRITICAL_SECTION(/;"	d
ERROR_CXXFLAGS	./Makefile	/^ERROR_CXXFLAGS = $/;"	m
ETAGS	./Makefile	/^ETAGS = etags$/;"	m
ETAGS	./secp256k1/Makefile	/^ETAGS = etags$/;"	m
ETAGS	./univalue/Makefile	/^ETAGS = etags$/;"	m
EVENT_CFLAGS	./Makefile	/^EVENT_CFLAGS = -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_LIBS	./Makefile	/^EVENT_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent$/;"	m
EVENT_LOG_ERR	./bitcoin-cli.cpp	/^# define EVENT_LOG_ERR /;"	d	file:
EVENT_LOG_WARN	./httpserver.cpp	/^# define EVENT_LOG_WARN /;"	d	file:
EVENT_PTHREADS_CFLAGS	./Makefile	/^EVENT_PTHREADS_CFLAGS = -D_THREAD_SAFE -I\/usr\/local\/Cellar\/libevent\/2.1.8\/include$/;"	m
EVENT_PTHREADS_LIBS	./Makefile	/^EVENT_PTHREADS_LIBS = -L\/usr\/local\/Cellar\/libevent\/2.1.8\/lib -levent_pthreads -levent$/;"	m
EXCLUSIVE_LOCKS_REQUIRED	./bench/mempool_eviction.cpp	/^static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./bench/rpc_mempool.cpp	/^static void AddTx(const CTransactionRef& tx, const CAmount& fee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./index/base.cpp	/^static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./interfaces/wallet.cpp	/^    int depth) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)$/;"	f	namespace:interfaces::__anon130
EXCLUSIVE_LOCKS_REQUIRED	./leveldb/port/thread_annotations.h	/^#define EXCLUSIVE_LOCKS_REQUIRED(/;"	d
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode, bool enable_bip61) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^int64_t GetTxRequestTime(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static bool TipMayBeStale(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static uint32_t GetFetchFlags(CNode* pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^static void UpdatePreferredDownload(CNode* node, CNodeState* state) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^void EraseTxRequest(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^void RequestTx(CNodeState* state, const uint256& txid, int64_t nNow) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^void UpdateTxRequestTime(const uint256& txid, int64_t request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f	namespace:__anon89
EXCLUSIVE_LOCKS_REQUIRED	./net_processing.cpp	/^void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./rpc/blockchain.cpp	/^static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPoolEntry& e) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./test/mempool_tests.cpp	/^static void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./test/miner_tests.cpp	/^static CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./test/miner_tests.cpp	/^static bool TestSequenceLocks(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./test/miner_tests.cpp	/^static void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./test/txvalidationcache_tests.cpp	/^static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./threadsafety.h	/^#define EXCLUSIVE_LOCKS_REQUIRED(/;"	d
EXCLUSIVE_LOCKS_REQUIRED	./util/system.cpp	/^    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)$/;"	f	class:ArgsManagerHelper
EXCLUSIVE_LOCKS_REQUIRED	./util/system.cpp	/^    static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)$/;"	f	class:ArgsManagerHelper
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./validation.h	/^inline CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	./wallet/wallet.h	/^    bool CanSupportFeature(enum WalletFeature wf) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }$/;"	f	class:final
EXCLUSIVE_LOCKS_REQUIRED	./wallet/wallet.h	/^    bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }$/;"	f	class:final
EXCLUSIVE_LOCKS_REQUIRED	./wallet/wallet.h	/^    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)$/;"	f	class:final
EXCLUSIVE_LOCK_FUNCTION	./leveldb/port/thread_annotations.h	/^#define EXCLUSIVE_LOCK_FUNCTION(/;"	d
EXCLUSIVE_LOCK_FUNCTION	./leveldb/util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) EXCLUSIVE_LOCK_FUNCTION(mu)$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_LOCK_FUNCTION	./sync.h	/^    UniqueLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : Base(mutexIn, std::defer_lock)$/;"	f	class:UniqueLock
EXCLUSIVE_LOCK_FUNCTION	./sync.h	/^    UniqueLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)$/;"	f	class:UniqueLock
EXCLUSIVE_LOCK_FUNCTION	./sync.h	/^    void lock() EXCLUSIVE_LOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
EXCLUSIVE_LOCK_FUNCTION	./threadsafety.h	/^    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)$/;"	f	struct:LockAnnotation
EXCLUSIVE_LOCK_FUNCTION	./threadsafety.h	/^#define EXCLUSIVE_LOCK_FUNCTION(/;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	./leveldb/port/thread_annotations.h	/^#define EXCLUSIVE_TRYLOCK_FUNCTION(/;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	./sync.h	/^    bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)$/;"	f	class:AnnotatedMixin
EXCLUSIVE_TRYLOCK_FUNCTION	./threadsafety.h	/^#define EXCLUSIVE_TRYLOCK_FUNCTION(/;"	d
EXEEXT	./Makefile	/^EXEEXT = $/;"	m
EXEEXT	./secp256k1/Makefile	/^EXEEXT = $/;"	m
EXEEXT	./univalue/Makefile	/^EXEEXT = $/;"	m
EXHAUSTIVE_TEST_LAMBDA	./secp256k1/src/tests_exhaustive.c	/^#define EXHAUSTIVE_TEST_LAMBDA /;"	d	file:
EXHAUSTIVE_TEST_ORDER	./secp256k1/src/tests_exhaustive.c	/^#define EXHAUSTIVE_TEST_ORDER /;"	d	file:
EXISTING	./leveldb/doc/bench/db_bench_sqlite3.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXISTING	./leveldb/doc/bench/db_bench_tree_db.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXPECT	./secp256k1/src/util.h	/^#define EXPECT(/;"	d
EXPIRY	./txmempool.h	/^    EXPIRY,      \/\/!< Expired from mempool$/;"	m	class:MemPoolRemovalReason
EXPORT_SYMBOL	./script/bitcoinconsensus.h	/^        #define EXPORT_SYMBOL /;"	d
EXPORT_SYMBOL	./script/bitcoinconsensus.h	/^        #define EXPORT_SYMBOL$/;"	d
EXPORT_SYMBOL	./script/bitcoinconsensus.h	/^    #define EXPORT_SYMBOL /;"	d
EXPORT_SYMBOL	./script/bitcoinconsensus.h	/^  #define EXPORT_SYMBOL /;"	d
EXPORT_SYMBOL	./script/bitcoinconsensus.h	/^  #define EXPORT_SYMBOL$/;"	d
EXPORT_SYMBOL	./script/bitcoinconsensus.h	/^#undef EXPORT_SYMBOL$/;"	d
EXP_ARR_VALUE	./univalue/lib/univalue_read.cpp	/^    EXP_ARR_VALUE = (1U << 2),$/;"	e	enum:expect_bits	file:
EXP_COLON	./univalue/lib/univalue_read.cpp	/^    EXP_COLON = (1U << 1),$/;"	e	enum:expect_bits	file:
EXP_NOT_VALUE	./univalue/lib/univalue_read.cpp	/^    EXP_NOT_VALUE = (1U << 4),$/;"	e	enum:expect_bits	file:
EXP_OBJ_NAME	./univalue/lib/univalue_read.cpp	/^    EXP_OBJ_NAME = (1U << 0),$/;"	e	enum:expect_bits	file:
EXP_VALUE	./univalue/lib/univalue_read.cpp	/^    EXP_VALUE = (1U << 3),$/;"	e	enum:expect_bits	file:
EXTENDED_FUNCTIONAL_TESTS	./Makefile	/^EXTENDED_FUNCTIONAL_TESTS = $/;"	m
EXTRA_DIST	./Makefile	/^EXTRA_DIST = $(CTAES_DIST)$/;"	m
EXTRA_DIST	./secp256k1/Makefile	/^EXTRA_DIST = autogen.sh src\/gen_context.c src\/basic-config.h $(JAVA_FILES)$/;"	m
EXTRA_DIST	./univalue/Makefile	/^EXTRA_DIST = $(TEST_FILES) $(GEN_SRCS)$/;"	m
EXTRA_LIBRARIES	./Makefile	/^EXTRA_LIBRARIES = $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UTIL) \\$/;"	m
EXTRA_PEER_CHECK_INTERVAL	./net_processing.cpp	/^static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;$/;"	v	file:
EXT_PUBLIC_KEY	./chainparams.h	/^        EXT_PUBLIC_KEY,$/;"	e	enum:CChainParams::Base58Type
EXT_SECRET_KEY	./chainparams.h	/^        EXT_SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
EditAddressAndSubmit	./qt/test/addressbooktests.cpp	/^void EditAddressAndSubmit($/;"	f	namespace:__anon62
EditAddressDialog	./qt/editaddressdialog.cpp	/^EditAddressDialog::EditAddressDialog(Mode _mode, QWidget *parent) :$/;"	f	class:EditAddressDialog
EditAddressDialog	./qt/editaddressdialog.h	/^class EditAddressDialog : public QDialog$/;"	c
EditPush	./test/script_tests.cpp	/^    TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)$/;"	f	class:__anon58::TestBuilder
EditReceivingAddress	./qt/editaddressdialog.h	/^        EditReceivingAddress,$/;"	e	enum:EditAddressDialog::Mode
EditSendingAddress	./qt/editaddressdialog.h	/^        EditSendingAddress$/;"	e	enum:EditAddressDialog::Mode
EditStatus	./qt/addresstablemodel.h	/^    enum EditStatus {$/;"	g	class:AddressTableModel
Element	./blockfilter.h	/^    typedef std::vector<unsigned char> Element;$/;"	t	class:GCSFilter
ElementSet	./blockfilter.h	/^    typedef std::unordered_set<Element, ByteVectorHash> ElementSet;$/;"	t	class:GCSFilter
EligibleForSpending	./wallet/coinselection.cpp	/^bool OutputGroup::EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const$/;"	f	class:OutputGroup
EmitPhysicalRecord	./leveldb/db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	./leveldb/table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon12::EmptyIterator
EmptyIterator	./leveldb/table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon12	file:
EmptyQueue	./scheduler.cpp	/^void SingleThreadedSchedulerClient::EmptyQueue() {$/;"	f	class:SingleThreadedSchedulerClient
EnableCategory	./logging.cpp	/^bool BCLog::Logger::EnableCategory(const std::string& str)$/;"	f	class:BCLog::Logger
EnableCategory	./logging.cpp	/^void BCLog::Logger::EnableCategory(BCLog::LogFlags flag)$/;"	f	class:BCLog::Logger
EnableOrDisableLogCategories	./rpc/misc.cpp	/^static void EnableOrDisableLogCategories(UniValue cats, bool enable) {$/;"	f	file:
Enabled	./logging.h	/^        bool Enabled() const { return m_print_to_console || m_print_to_file; }$/;"	f	class:BCLog::Logger
Encode	./bech32.cpp	/^std::string Encode(const std::string& hrp, const data& values) {$/;"	f	namespace:bech32
Encode	./key.cpp	/^void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtKey
Encode	./leveldb/db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
Encode	./pubkey.cpp	/^void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtPubKey
EncodeBase32	./util/strencodings.cpp	/^std::string EncodeBase32(const std::string& str)$/;"	f
EncodeBase32	./util/strencodings.cpp	/^std::string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	./base58.cpp	/^std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	./base58.cpp	/^std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	./base58.cpp	/^std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	./util/strencodings.cpp	/^std::string EncodeBase64(const std::string& str)$/;"	f
EncodeBase64	./util/strencodings.cpp	/^std::string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeDestination	./key_io.cpp	/^std::string EncodeDestination(const CTxDestination& dest)$/;"	f
EncodeDumpString	./wallet/rpcdump.cpp	/^std::string static EncodeDumpString(const std::string &str) {$/;"	f	file:
EncodeExtKey	./key_io.cpp	/^std::string EncodeExtKey(const CExtKey& key)$/;"	f
EncodeExtPubKey	./key_io.cpp	/^std::string EncodeExtPubKey(const CExtPubKey& key)$/;"	f
EncodeFixed32	./leveldb/util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	./leveldb/util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeHexTx	./core_write.cpp	/^std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags)$/;"	f
EncodeKey	./leveldb/db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	./leveldb/util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeOP_N	./script/script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
EncodeSecret	./key_io.cpp	/^std::string EncodeSecret(const CKey& key)$/;"	f
EncodeTo	./leveldb/db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	./leveldb/table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	./leveldb/table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	./leveldb/util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	./leveldb/util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	./leveldb/util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Encrypt	./crypto/aes.cpp	/^int AES256CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES256CBCEncrypt
Encrypt	./crypto/aes.cpp	/^void AES256Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const$/;"	f	class:AES256Encrypt
Encrypt	./qt/askpassphrasedialog.h	/^        Encrypt,    \/**< Ask passphrase twice and encrypt *\/$/;"	e	enum:AskPassphraseDialog::Mode
Encrypt	./wallet/crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const$/;"	f	class:CCrypter
EncryptKeys	./wallet/crypter.cpp	/^bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
EncryptSecret	./wallet/crypter.cpp	/^static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f	file:
EncryptWallet	./wallet/wallet.cpp	/^bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
EncryptionStatus	./qt/walletmodel.h	/^    enum EncryptionStatus$/;"	g	class:WalletModel
Enqueue	./httpserver.cpp	/^    bool Enqueue(WorkItem* item)$/;"	f	class:WorkQueue
EnsureWalletIsAvailable	./wallet/rpcwallet.cpp	/^bool EnsureWalletIsAvailable(const CWallet* pwallet, bool avoidException)$/;"	f
EnsureWalletIsUnlocked	./wallet/rpcwallet.cpp	/^void EnsureWalletIsUnlocked(const CWallet* pwallet)$/;"	f
Enter	./sync.h	/^    void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:UniqueLock
EnterCritical	./sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	./sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
EntryDescriptionString	./rpc/blockchain.cpp	/^static std::string EntryDescriptionString()$/;"	f	file:
Env	./leveldb/include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	./leveldb/include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvPosixTest	./leveldb/util/env_posix_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	./leveldb/util/env_posix_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvPosixTestHelper	./leveldb/util/env_posix_test_helper.h	/^class EnvPosixTestHelper {$/;"	c	namespace:leveldb
EnvTest	./leveldb/util/env_test.cc	/^  EnvTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvTest
EnvTest	./leveldb/util/env_test.cc	/^class EnvTest {$/;"	c	namespace:leveldb	file:
EnvWrapper	./leveldb/include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	./leveldb/include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	./leveldb/db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
EqualDescriptor	./test/descriptor_tests.cpp	/^bool EqualDescriptor(std::string a, std::string b)$/;"	f	namespace:__anon56
EqualTo	./arith_uint256.cpp	/^bool base_uint<BITS>::EqualTo(uint64_t b) const$/;"	f	class:base_uint
Erase	./dbwrapper.h	/^    bool Erase(const K& key, bool fSync = false)$/;"	f	class:CDBWrapper
Erase	./dbwrapper.h	/^    void Erase(const K& key)$/;"	f	class:CDBBatch
Erase	./leveldb/util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Erase	./leveldb/util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::LRUCache
Erase	./leveldb/util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
Erase	./wallet/db.h	/^    bool Erase(const K& key)$/;"	f	class:BerkeleyBatch
EraseBlockData	./validation.cpp	/^void CChainState::EraseBlockData(CBlockIndex* index)$/;"	f	class:CChainState
EraseDestData	./wallet/wallet.cpp	/^bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)$/;"	f	class:CWallet
EraseDestData	./wallet/walletdb.cpp	/^bool WalletBatch::EraseDestData(const std::string &address, const std::string &key)$/;"	f	class:WalletBatch
EraseIC	./wallet/walletdb.h	/^    bool EraseIC(const K& key)$/;"	f	class:WalletBatch
EraseLastKElements	./net.cpp	/^static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)$/;"	f	file:
EraseName	./wallet/walletdb.cpp	/^bool WalletBatch::EraseName(const std::string& strAddress)$/;"	f	class:WalletBatch
EraseOrphansFor	./net_processing.cpp	/^void EraseOrphansFor(NodeId peer)$/;"	f
ErasePool	./wallet/walletdb.cpp	/^bool WalletBatch::ErasePool(int64_t nPool)$/;"	f	class:WalletBatch
ErasePurpose	./wallet/walletdb.cpp	/^bool WalletBatch::ErasePurpose(const std::string& strAddress)$/;"	f	class:WalletBatch
EraseTx	./wallet/walletdb.cpp	/^bool WalletBatch::EraseTx(uint256 hash)$/;"	f	class:WalletBatch
EraseWatchOnly	./wallet/walletdb.cpp	/^bool WalletBatch::EraseWatchOnly(const CScript &dest)$/;"	f	class:WalletBatch
Error	./consensus/validation.h	/^    bool Error(const std::string& strRejectReasonIn) {$/;"	f	class:CValidationState
ErrorCheck	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ErrorCheck(int status) {$/;"	f	file:
ErrorEnv	./leveldb/util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	./leveldb/util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	./leveldb/util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
EstimateMedianVal	./policy/fees.cpp	/^double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,$/;"	f	class:TxConfirmStats
EstimateSize	./coins.cpp	/^size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }$/;"	f	class:CCoinsViewBacked
EstimateSize	./coins.h	/^    virtual size_t EstimateSize() const { return 0; }$/;"	f	class:CCoinsView
EstimateSize	./dbwrapper.h	/^    size_t EstimateSize(const K& key_begin, const K& key_end) const$/;"	f	class:CDBWrapper
EstimateSize	./txdb.cpp	/^size_t CCoinsViewDB::EstimateSize() const$/;"	f	class:CCoinsViewDB
EstimationResult	./policy/fees.h	/^struct EstimationResult$/;"	s	class:FeeEstimateHorizon
EstimatorBucket	./policy/fees.h	/^struct EstimatorBucket$/;"	s	class:FeeEstimateHorizon
EvalScript	./script/interpreter.cpp	/^bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)$/;"	f
EvaluateSequenceLocks	./consensus/tx_verify.cpp	/^bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)$/;"	f
EventBase	./httpserver.cpp	/^struct event_base* EventBase()$/;"	f
Evict	./leveldb/db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
EvictExtraOutboundPeers	./net_processing.cpp	/^void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)$/;"	f	class:PeerLogicValidation
ExecErrorCheck	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ExecErrorCheck(int status, char *err_msg) {$/;"	f	file:
ExecuteCommand	./rpc/server.cpp	/^static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)$/;"	f	file:
ExecuteWalletToolFunc	./wallet/wallettool.cpp	/^bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)$/;"	f	namespace:WalletTool
Exists	./dbwrapper.h	/^    bool Exists(const K& key) const$/;"	f	class:CDBWrapper
Exists	./wallet/db.h	/^    bool Exists(const K& key)$/;"	f	class:BerkeleyBatch
Exists	./wallet/walletutil.cpp	/^bool WalletLocation::Exists() const$/;"	f	class:WalletLocation
ExitCommand	./test/util_tests.cpp	/^static constexpr char ExitCommand = 'X';$/;"	v	file:
Expand32	./crypto/hkdf_sha256_32.cpp	/^void CHKDF_HMAC_SHA256_L32::Expand32(const std::string& info, unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHKDF_HMAC_SHA256_L32
ExpandHRP	./bech32.cpp	/^data ExpandHRP(const std::string& hrp)$/;"	f	namespace:__anon116
ExpandHelper	./script/descriptor.cpp	/^    bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const$/;"	f	class:__anon75::DescriptorImpl
ExpandedCompactionByteSizeLimit	./leveldb/db/version_set.cc	/^static int64_t ExpandedCompactionByteSizeLimit(const Options* options) {$/;"	f	namespace:leveldb
ExpectedVerifResult	./leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	g	class:leveldb::FaultInjectionTest	file:
Expire	./txmempool.cpp	/^int CTxMemPool::Expire(int64_t time) {$/;"	f	class:CTxMemPool
Expr	./script/descriptor.cpp	/^Span<const char> Expr(Span<const char>& sp)$/;"	f	namespace:__anon75
Extend	./leveldb/util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtractAndValidateValue	./bitcoin-tx.cpp	/^static CAmount ExtractAndValidateValue(const std::string& strValue)$/;"	f	file:
ExtractDestination	./script/standard.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinations	./script/standard.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
ExtractMatches	./merkleblock.cpp	/^uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
ExtractMetaData	./leveldb/db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon30::Repairer	file:
ExtractPubKey	./keystore.cpp	/^static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)$/;"	f	file:
ExtractUserKey	./leveldb/db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	./leveldb/db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FAIL	./test/coins_tests.cpp	/^const static CAmount FAIL = -3;$/;"	v	file:
FAILED	./versionbits.h	/^    FAILED,$/;"	m	class:ThresholdState
FAILURE	./wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	e	enum:final::ScanResult::__anon118
FALLBACK	./policy/fees.h	/^    FALLBACK,$/;"	m	class:FeeEstimateHorizon::FeeReason
FALLTHROUGH_INTENDED	./leveldb/util/hash.cc	/^#define FALLTHROUGH_INTENDED /;"	d	file:
FAST	./random.cpp	/^    FAST, \/\/!< Automatically called by GetRandBytes$/;"	m	class:RNGLevel	file:
FD_SETSIZE	./compat.h	/^#define FD_SETSIZE /;"	d
FD_SETSIZE	./compat.h	/^#undef FD_SETSIZE /;"	d
FEATURE_BASE	./wallet/wallet.h	/^    FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getwalletinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	./wallet/wallet.h	/^    FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_HD	./wallet/wallet.h	/^    FEATURE_HD = 130000, \/\/ Hierarchical key derivation after BIP32 (HD Wallet)$/;"	e	enum:WalletFeature
FEATURE_HD_SPLIT	./wallet/wallet.h	/^    FEATURE_HD_SPLIT = 139900, \/\/ Wallet with HD chain split (change outputs will use m\/0'\/1'\/k)$/;"	e	enum:WalletFeature
FEATURE_LATEST	./wallet/wallet.h	/^    FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL$/;"	e	enum:WalletFeature
FEATURE_NO_DEFAULT_KEY	./wallet/wallet.h	/^    FEATURE_NO_DEFAULT_KEY = 159900, \/\/ Wallet without a default key written$/;"	e	enum:WalletFeature
FEATURE_PRE_SPLIT_KEYPOOL	./wallet/wallet.h	/^    FEATURE_PRE_SPLIT_KEYPOOL = 169900, \/\/ Upgraded to HD SPLIT and can have a pre-split keypool$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	./wallet/wallet.h	/^    FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FEEFILTER	./protocol.cpp	/^const char *FEEFILTER="feefilter";$/;"	m	namespace:NetMsgType	file:
FEEFILTER_VERSION	./version.h	/^static const int FEEFILTER_VERSION = 70013;$/;"	v
FEELER_INTERVAL	./net.h	/^static const int FEELER_INTERVAL = 120;$/;"	v
FEELER_SLEEP_WINDOW	./net.cpp	/^#define FEELER_SLEEP_WINDOW /;"	d	file:
FEE_ESTIMATES_FILENAME	./init.cpp	/^static const char* FEE_ESTIMATES_FILENAME="fee_estimates.dat";$/;"	v	file:
FEE_FILTER_SPACING	./policy/fees.h	/^    static constexpr double FEE_FILTER_SPACING = 1.1;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
FEE_SPACING	./policy/fees.h	/^    static constexpr double FEE_SPACING = 1.05;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
FGREP	./Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	./secp256k1/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	./univalue/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FIGURE_SP_CP	./qt/bitcoinunits.h	/^#define FIGURE_SP_CP /;"	d
FIGURE_SP_HTML	./qt/bitcoinunits.h	/^#define FIGURE_SP_HTML /;"	d
FIGURE_SP_UTF8	./qt/bitcoinunits.h	/^#define FIGURE_SP_UTF8 /;"	d
FILTERADD	./protocol.cpp	/^const char *FILTERADD="filteradd";$/;"	m	namespace:NetMsgType	file:
FILTERCLEAR	./protocol.cpp	/^const char *FILTERCLEAR="filterclear";$/;"	m	namespace:NetMsgType	file:
FILTERLOAD	./protocol.cpp	/^const char *FILTERLOAD="filterload";$/;"	m	namespace:NetMsgType	file:
FINALIZER	./psbt.h	/^    FINALIZER,$/;"	m	class:PSBTRole
FLAGS	./test/coins_tests.cpp	/^const static auto FLAGS = {char(0), FRESH, DIRTY, char(DIRTY | FRESH)};$/;"	v	file:
FLAGS_WAL_enabled	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v	file:
FLAGS_benchmarks	./leveldb/db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	./leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_block_size	./leveldb/db/db_bench.cc	/^static int FLAGS_block_size = 0;$/;"	v	file:
FLAGS_bloom_bits	./leveldb/db/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v	file:
FLAGS_cache_size	./leveldb/db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_cache_size	./leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v	file:
FLAGS_compression	./leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v	file:
FLAGS_compression_ratio	./leveldb/db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	./leveldb/doc/bench/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	./leveldb/db/db_bench.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	./leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_histogram	./leveldb/db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	./leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_max_file_size	./leveldb/db/db_bench.cc	/^static int FLAGS_max_file_size = 0;$/;"	v	file:
FLAGS_num	./leveldb/db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	./leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num_pages	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v	file:
FLAGS_open_files	./leveldb/db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_page_size	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_page_size	./leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_reads	./leveldb/db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	./leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reuse_logs	./leveldb/db/db_bench.cc	/^static bool FLAGS_reuse_logs = false;$/;"	v	file:
FLAGS_threads	./leveldb/db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_transaction	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v	file:
FLAGS_use_existing_db	./leveldb/db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	./leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_value_size	./leveldb/db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	./leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	./leveldb/db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FLTR_FILE_CHUNK_SIZE	./index/blockfilterindex.cpp	/^constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; \/\/ 1 MiB$/;"	v
FREEDESKTOP_NOTIFICATION_ICON_SIZE	./qt/notificator.cpp	/^const int FREEDESKTOP_NOTIFICATION_ICON_SIZE = 128;$/;"	v
FRESH	./coins.h	/^        FRESH = (1 << 1), \/\/ The parent view does not have this entry (or it is pruned).$/;"	e	enum:CCoinsCacheEntry::Flags
FRESH	./leveldb/doc/bench/db_bench_sqlite3.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	./leveldb/doc/bench/db_bench_tree_db.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	./test/coins_tests.cpp	/^const static char FRESH = CCoinsCacheEntry::FRESH;$/;"	v	file:
FULL_ESTIMATE	./policy/fees.h	/^    FULL_ESTIMATE,$/;"	m	class:FeeEstimateHorizon::FeeReason
FUZZ_SUITE	./Makefile	/^FUZZ_SUITE = \\$/;"	m
FUZZ_SUITE_LD_COMMON	./Makefile	/^FUZZ_SUITE_LD_COMMON = \\$/;"	m
FUZZ_TARGETS	./Makefile	/^FUZZ_TARGETS = \\$/;"	m
FailingCheck	./test/checkqueue_tests.cpp	/^    FailingCheck() : fails(true){};$/;"	f	struct:FailingCheck
FailingCheck	./test/checkqueue_tests.cpp	/^    FailingCheck(bool _fails) : fails(_fails){};$/;"	f	struct:FailingCheck
FailingCheck	./test/checkqueue_tests.cpp	/^struct FailingCheck {$/;"	s	file:
Failing_Queue	./test/checkqueue_tests.cpp	/^typedef CCheckQueue<FailingCheck> Failing_Queue;$/;"	t	file:
FakeCheck	./test/checkqueue_tests.cpp	/^struct FakeCheck {$/;"	s	file:
FakeCheckCheckCompletion	./test/checkqueue_tests.cpp	/^struct FakeCheckCheckCompletion {$/;"	s	file:
FalsePositiveRate	./leveldb/util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
FastMod	./bloom.cpp	/^static inline uint32_t FastMod(uint32_t x, size_t n) {$/;"	f	file:
FastRandomContext	./random.h	/^class FastRandomContext {$/;"	c
FastRandom_1bit	./bench/crypto_hash.cpp	/^static void FastRandom_1bit(benchmark::State& state)$/;"	f	file:
FastRandom_32bit	./bench/crypto_hash.cpp	/^static void FastRandom_32bit(benchmark::State& state)$/;"	f	file:
FatalError	./index/base.cpp	/^static void FatalError(const char* fmt, const Args&... args)$/;"	f	file:
FaultInjectionTest	./leveldb/db/fault_injection_test.cc	/^  FaultInjectionTest()$/;"	f	class:leveldb::FaultInjectionTest
FaultInjectionTest	./leveldb/db/fault_injection_test.cc	/^class FaultInjectionTest {$/;"	c	namespace:leveldb	file:
FaultInjectionTestEnv	./leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv() : EnvWrapper(Env::Default()), filesystem_active_(true) {}$/;"	f	class:leveldb::FaultInjectionTestEnv
FaultInjectionTestEnv	./leveldb/db/fault_injection_test.cc	/^class FaultInjectionTestEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
Fee	./test/setup_common.h	/^    TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
FeeCalculation	./policy/fees.h	/^struct FeeCalculation$/;"	s	class:FeeEstimateHorizon
FeeEstimateHorizon	./policy/fees.h	/^enum class FeeEstimateHorizon {$/;"	c
FeeEstimateMode	./policy/fees.h	/^enum class FeeEstimateMode {$/;"	c	class:FeeEstimateHorizon
FeeFilterRounder	./policy/fees.cpp	/^FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)$/;"	f	class:FeeFilterRounder
FeeFilterRounder	./policy/fees.h	/^class FeeFilterRounder$/;"	c	class:FeeEstimateHorizon
FeeModeFromString	./util/fees.cpp	/^bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {$/;"	f
FeeReason	./policy/fees.h	/^enum class FeeReason {$/;"	c	class:FeeEstimateHorizon
FetchCoin	./coins.cpp	/^CCoinsMap::iterator CCoinsViewCache::FetchCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
FileCommit	./util/system.cpp	/^bool FileCommit(FILE *file)$/;"	f
FileExists	./leveldb/helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
FileExists	./leveldb/include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	./leveldb/util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixEnv
FileExists	./leveldb/util/env_win.cc	/^bool Win32Env::FileExists(const std::string& fname)$/;"	f	class:leveldb::Win32::Win32Env
FileLock	./fs.cpp	/^FileLock::FileLock(const fs::path& file)$/;"	f	class:fsbridge::FileLock
FileLock	./fs.h	/^    class FileLock$/;"	c	namespace:fsbridge
FileLock	./leveldb/include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	./leveldb/include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMetaData	./leveldb/db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	./leveldb/db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileName	./flatfile.cpp	/^fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const$/;"	f	class:FlatFileSeq
FileNameTest	./leveldb/db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb	file:
FileSet	./leveldb/db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	./leveldb/db/recovery_test.cc	/^  uint64_t FileSize(const std::string& fname) {$/;"	f	class:leveldb::RecoveryTest
FileSize	./leveldb/table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	./leveldb/db/fault_injection_test.cc	/^  FileState() : pos_(-1), pos_at_last_sync_(-1), pos_at_last_flush_(-1) {}$/;"	f	struct:leveldb::__anon20::FileState
FileState	./leveldb/db/fault_injection_test.cc	/^  FileState(const std::string& filename)$/;"	f	struct:leveldb::__anon20::FileState
FileState	./leveldb/db/fault_injection_test.cc	/^struct FileState {$/;"	s	namespace:leveldb::__anon20	file:
FileState	./leveldb/helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon35::FileState
FileState	./leveldb/helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon35	file:
FileSystem	./leveldb/helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon35::InMemoryEnv	file:
FileType	./leveldb/db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FileWriteStr	./logging.cpp	/^static int FileWriteStr(const std::string &str, FILE *fp)$/;"	f	file:
FilesPerLevel	./leveldb/db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
Fill	./streams.h	/^    bool Fill() {$/;"	f	class:CBufferedFile
FillBitBuffer	./random.h	/^    void FillBitBuffer()$/;"	f	class:FastRandomContext
FillBlock	./blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {$/;"	f	class:PartiallyDownloadedBlock
FillByteBuffer	./random.h	/^    void FillByteBuffer()$/;"	f	class:FastRandomContext
FillLevels	./leveldb/db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FillPSBT	./wallet/psbtwallet.cpp	/^TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)$/;"	f
FillShortTxIDSelector	./blockencodings.cpp	/^void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {$/;"	f	class:CBlockHeaderAndShortTxIDs
FillSignatureData	./psbt.cpp	/^void PSBTInput::FillSignatureData(SignatureData& sigdata) const$/;"	f	class:PSBTInput
FillSignatureData	./psbt.cpp	/^void PSBTOutput::FillSignatureData(SignatureData& sigdata) const$/;"	f	class:PSBTOutput
FilterBlockBuilder	./leveldb/table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	./leveldb/table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	./leveldb/table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	./leveldb/table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	./leveldb/table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb	file:
FilterCreate	./leveldb/db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	./leveldb/db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	./leveldb/db/c_test.c	/^unsigned char FilterKeyMatch($/;"	f
FilterName	./leveldb/db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	./leveldb/include/leveldb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	./leveldb/util/bloom_test.cc	/^  size_t FilterSize() const {$/;"	f	class:leveldb::BloomTest
Finalize	./crypto/hmac_sha256.cpp	/^void CHMAC_SHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA256
Finalize	./crypto/hmac_sha512.cpp	/^void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA512
Finalize	./crypto/ripemd160.cpp	/^void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CRIPEMD160
Finalize	./crypto/sha1.cpp	/^void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA1
Finalize	./crypto/sha256.cpp	/^void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA256
Finalize	./crypto/sha512.cpp	/^void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA512
Finalize	./crypto/siphash.cpp	/^uint64_t CSipHasher::Finalize() const$/;"	f	class:CSipHasher
Finalize	./hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash160
Finalize	./hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash256
Finalize	./leveldb/db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
FinalizeAndExtractPSBT	./psbt.cpp	/^bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransaction& result)$/;"	f
FinalizeBlock	./test/validation_block_tests.cpp	/^std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)$/;"	f
FinalizeNode	./net_processing.cpp	/^void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {$/;"	f	class:PeerLogicValidation
FinalizePSBT	./psbt.cpp	/^bool FinalizePSBT(PartiallySignedTransaction& psbtx)$/;"	f
Find	./addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)$/;"	f	class:CAddrMan
Find	./leveldb/db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
Find	./test/addrman_tests.cpp	/^    CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)$/;"	f	class:CAddrManTest
FindAndDelete	./script/interpreter.cpp	/^int FindAndDelete(CScript& script, const CScript& b)$/;"	f
FindBlockPos	./validation.cpp	/^static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)$/;"	f	file:
FindByte	./streams.h	/^    void FindByte(char ch) {$/;"	f	class:CBufferedFile
FindCoins	./node/coin.cpp	/^void FindCoins(std::map<COutPoint, Coin>& coins)$/;"	f
FindEarliestAtLeast	./chain.cpp	/^CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime, int height) const$/;"	f	class:CChain
FindFile	./leveldb/db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	./leveldb/db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) { }$/;"	f	class:leveldb::FindFileTest
FindFileTest	./leveldb/db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb	file:
FindFiles	./leveldb/db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon30::Repairer	file:
FindFilesToPrune	./validation.cpp	/^static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)$/;"	f	file:
FindFilesToPruneManual	./validation.cpp	/^static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)$/;"	f	file:
FindFork	./chain.cpp	/^const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {$/;"	f	class:CChain
FindForkInGlobalIndex	./validation.cpp	/^CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)$/;"	f
FindGreaterOrEqual	./leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	./leveldb/table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon11::MergingIterator
FindLast	./leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	./leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindMostWorkChain	./validation.cpp	/^CBlockIndex* CChainState::FindMostWorkChain() {$/;"	f	class:CChainState
FindNextUserEntry	./leveldb/db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon29::DBIter
FindNode	./net.cpp	/^CNode* CConnman::FindNode(const CNetAddr& ip)$/;"	f	class:CConnman
FindNode	./net.cpp	/^CNode* CConnman::FindNode(const CService& addr)$/;"	f	class:CConnman
FindNode	./net.cpp	/^CNode* CConnman::FindNode(const CSubNet& subNet)$/;"	f	class:CConnman
FindNode	./net.cpp	/^CNode* CConnman::FindNode(const std::string& addrName)$/;"	f	class:CConnman
FindNonChangeParentOutput	./wallet/wallet.cpp	/^const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int output) const$/;"	f	class:CWallet
FindPointer	./leveldb/util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::HandleTable	file:
FindPrevUserEntry	./leveldb/db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon29::DBIter
FindRandomFrom	./test/coins_tests.cpp	/^UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {$/;"	f
FindScriptPubKey	./rpc/blockchain.cpp	/^bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>& should_abort, int64_t& count, CCoinsViewCursor* cursor, const std::set<CScript>& needles, std::map<COutPoint, Coin>& out_results) {$/;"	f
FindShortSuccessor	./leveldb/db/c.cc	/^  virtual void FindShortSuccessor(std::string* key) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	./leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	./leveldb/table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon15::ReverseKeyComparator
FindShortSuccessor	./leveldb/util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
FindShortestSeparator	./leveldb/db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	./leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	./leveldb/table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon15::ReverseKeyComparator
FindShortestSeparator	./leveldb/util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
FindSmallest	./leveldb/table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon11::MergingIterator
FindTable	./leveldb/db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
FindTx	./index/txindex.cpp	/^bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const$/;"	f	class:TxIndex
FindTx	./qt/test/wallettests.cpp	/^QModelIndex FindTx(const QAbstractItemModel& model, const uint256& txid)$/;"	f	namespace:__anon63
FindUndoPos	./validation.cpp	/^static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize)$/;"	f	file:
FindWalletTx	./wallet/walletdb.cpp	/^DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)$/;"	f	class:WalletBatch
Finish	./leveldb/table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	./leveldb/table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	./leveldb/table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	./leveldb/table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	./leveldb/db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishErase	./leveldb/util/cache.cc	/^bool LRUCache::FinishErase(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
FinishImpl	./leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	./leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	./leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	./leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	./leveldb/db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon19::Stats
FinishedSingleOp	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FinishedSingleOp	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FirstLogFile	./leveldb/db/recovery_test.cc	/^  uint64_t FirstLogFile() {$/;"	f	class:leveldb::RecoveryTest
FixChecksum	./leveldb/db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
FixedSeeds	./chainparams.h	/^    const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }$/;"	f	class:CChainParams
Flags	./coins.h	/^    enum Flags {$/;"	g	struct:CCoinsCacheEntry
FlatFilePos	./flatfile.h	/^    FlatFilePos() : nFile(-1), nPos(0) {}$/;"	f	struct:FlatFilePos
FlatFilePos	./flatfile.h	/^    FlatFilePos(int nFileIn, unsigned int nPosIn) :$/;"	f	struct:FlatFilePos
FlatFilePos	./flatfile.h	/^struct FlatFilePos$/;"	s
FlatFileSeq	./flatfile.cpp	/^FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :$/;"	f	class:FlatFileSeq
FlatFileSeq	./flatfile.h	/^class FlatFileSeq$/;"	c
Flush	./coins.cpp	/^bool CCoinsViewCache::Flush() {$/;"	f	class:CCoinsViewCache
Flush	./dbwrapper.h	/^    bool Flush()$/;"	f	class:CDBWrapper
Flush	./flatfile.cpp	/^bool FlatFileSeq::Flush(const FlatFilePos& pos, bool finalize)$/;"	f	class:FlatFileSeq
Flush	./leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Flush() {$/;"	f	class:leveldb::TestWritableFile
Flush	./leveldb/db/leveldbutil.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon31::StdoutPrinter
Flush	./leveldb/db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon35::WritableFileImpl
Flush	./leveldb/table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	./leveldb/table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	./leveldb/util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Flush	./leveldb/util/env_win.cc	/^Status Win32WritableFile::Flush()$/;"	f	class:leveldb::Win32::Win32WritableFile
Flush	./streams.h	/^    void Flush() {$/;"	f	class:BitStreamWriter
Flush	./wallet/db.cpp	/^void BerkeleyBatch::Flush()$/;"	f	class:BerkeleyBatch
Flush	./wallet/db.cpp	/^void BerkeleyDatabase::Flush(bool shutdown)$/;"	f	class:BerkeleyDatabase
Flush	./wallet/db.cpp	/^void BerkeleyEnvironment::Flush(bool fShutdown)$/;"	f	class:BerkeleyEnvironment
Flush	./wallet/wallet.cpp	/^void CWallet::Flush(bool shutdown)$/;"	f	class:CWallet
FlushBackgroundCallbacks	./validationinterface.cpp	/^void CMainSignals::FlushBackgroundCallbacks() {$/;"	f	class:CMainSignals
FlushBlockFile	./validation.cpp	/^void static FlushBlockFile(bool fFinalize = false)$/;"	f	file:
FlushStateMode	./validation.cpp	/^enum class FlushStateMode {$/;"	c	file:
FlushStateToDisk	./validation.cpp	/^bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {$/;"	f	file:
FlushStateToDisk	./validation.cpp	/^void FlushStateToDisk() {$/;"	f
FlushUnconfirmed	./policy/fees.cpp	/^void CBlockPolicyEstimator::FlushUnconfirmed() {$/;"	f	class:CBlockPolicyEstimator
FlushWallets	./wallet/load.cpp	/^void FlushWallets()$/;"	f
Footer	./leveldb/table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	./leveldb/table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachBlockFilterIndex	./index/blockfilterindex.cpp	/^void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn)$/;"	f
ForEachMergeSetup	./test/util_tests.cpp	/^    void ForEachMergeSetup(Fn&& fn)$/;"	f	struct:ArgsMergeTestingSetup
ForEachMergeSetup	./test/util_tests.cpp	/^    void ForEachMergeSetup(Fn&& fn)$/;"	f	struct:ChainMergeTestingSetup
ForEachNode	./net.h	/^    void ForEachNode(Callable&& func) const$/;"	f	class:CConnman
ForEachNode	./net.h	/^    void ForEachNode(Callable&& func)$/;"	f	class:CConnman
ForEachNodeThen	./net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const$/;"	f	class:CConnman
ForEachNodeThen	./net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post)$/;"	f	class:CConnman
ForEachOverlapping	./leveldb/db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key,$/;"	f	class:leveldb::Version
ForEditing	./qt/addressbookpage.h	/^        ForEditing  \/**< Open address book for editing *\/$/;"	e	enum:AddressBookPage::Mode
ForNode	./net.cpp	/^bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)$/;"	f	class:CConnman
ForRead	./serialize.h	/^    constexpr bool ForRead() const { return false; }$/;"	f	struct:CSerActionSerialize
ForRead	./serialize.h	/^    constexpr bool ForRead() const { return true; }$/;"	f	struct:CSerActionUnserialize
ForSelection	./qt/addressbookpage.h	/^        ForSelection, \/**< Open address book to pick address *\/$/;"	e	enum:AddressBookPage::Mode
ForceError	./leveldb/db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
ForceSetArg	./util/system.cpp	/^void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)$/;"	f	class:ArgsManager
FormatArg	./tinyformat.h	/^        FormatArg()$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	./tinyformat.h	/^        explicit FormatArg(const T& value)$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	./tinyformat.h	/^class FormatArg$/;"	c	namespace:tinyformat::detail
FormatException	./util/system.cpp	/^static std::string FormatException(const std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	./clientversion.cpp	/^std::string FormatFullVersion()$/;"	f
FormatHDKeypath	./util/bip32.cpp	/^std::string FormatHDKeypath(const std::vector<uint32_t>& path)$/;"	f
FormatISO8601Date	./util/time.cpp	/^std::string FormatISO8601Date(int64_t nTime) {$/;"	f
FormatISO8601DateTime	./util/time.cpp	/^std::string FormatISO8601DateTime(int64_t nTime) {$/;"	f
FormatList	./tinyformat.h	/^        FormatList(detail::FormatArg* formatters, int N)$/;"	f	class:tinyformat::FormatList
FormatList	./tinyformat.h	/^class FormatList$/;"	c	namespace:tinyformat
FormatListN	./tinyformat.h	/^        explicit FormatListN(const Args&... args)$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	./tinyformat.h	/^    public: FormatListN() : FormatList(0, 0) {}$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	./tinyformat.h	/^class FormatListN : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListN	./tinyformat.h	/^template<> class FormatListN<0> : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListRef	./tinyformat.h	/^typedef const FormatList& FormatListRef;$/;"	t	namespace:tinyformat
FormatMoney	./util/moneystr.cpp	/^std::string FormatMoney(const CAmount& n)$/;"	f
FormatOutputType	./outputtype.cpp	/^const std::string& FormatOutputType(OutputType type)$/;"	f
FormatParagraph	./util/strencodings.cpp	/^std::string FormatParagraph(const std::string& in, size_t width, size_t indent)$/;"	f
FormatScript	./core_write.cpp	/^std::string FormatScript(const CScript& script)$/;"	f
FormatScriptError	./test/script_tests.cpp	/^static const char *FormatScriptError(ScriptError_t err)$/;"	f	file:
FormatScriptFlags	./test/transaction_tests.cpp	/^std::string FormatScriptFlags(unsigned int flags)$/;"	f
FormatStateMessage	./util/validation.cpp	/^std::string FormatStateMessage(const CValidationState &state)$/;"	f
FormatSubVersion	./clientversion.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatTest	./leveldb/db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb	file:
FormatTxStatus	./qt/transactiondesc.cpp	/^QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const interfaces::WalletTxStatus& status, bool inMempool, int numBlocks)$/;"	f	class:TransactionDesc
FormatVersion	./clientversion.cpp	/^static std::string FormatVersion(int nVersion)$/;"	f	file:
FormattedAmountRole	./qt/transactiontablemodel.h	/^        FormattedAmountRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Free	./leveldb/db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
FreeLocked	./support/lockedpool.cpp	/^void PosixLockedPageAllocator::FreeLocked(void* addr, size_t len)$/;"	f	class:PosixLockedPageAllocator
FreeLocked	./support/lockedpool.cpp	/^void Win32LockedPageAllocator::FreeLocked(void* addr, size_t len)$/;"	f	class:Win32LockedPageAllocator
Freedesktop	./qt/notificator.h	/^        Freedesktop,                \/**< Use DBus org.freedesktop.Notifications *\/$/;"	e	enum:Notificator::Mode
FreedesktopImage	./qt/notificator.cpp	/^    FreedesktopImage() {}$/;"	f	class:FreedesktopImage
FreedesktopImage	./qt/notificator.cpp	/^FreedesktopImage::FreedesktopImage(const QImage &img):$/;"	f	class:FreedesktopImage
FreedesktopImage	./qt/notificator.cpp	/^Q_DECLARE_METATYPE(FreedesktopImage);$/;"	v
FreedesktopImage	./qt/notificator.cpp	/^class FreedesktopImage$/;"	c	file:
FreespaceChecker	./qt/intro.cpp	/^FreespaceChecker::FreespaceChecker(Intro *_intro)$/;"	f	class:FreespaceChecker
FreespaceChecker	./qt/intro.cpp	/^class FreespaceChecker : public QObject$/;"	c	file:
FromSignatureData	./psbt.cpp	/^void PSBTInput::FromSignatureData(const SignatureData& sigdata)$/;"	f	class:PSBTInput
FromSignatureData	./psbt.cpp	/^void PSBTOutput::FromSignatureData(const SignatureData& sigdata)$/;"	f	class:PSBTOutput
FromTx	./test/setup_common.cpp	/^CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx) {$/;"	f	class:TestMemPoolEntryHelper
FromTx	./test/setup_common.cpp	/^CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransactionRef& tx)$/;"	f	class:TestMemPoolEntryHelper
FrozenCleanupCheck	./test/checkqueue_tests.cpp	/^    FrozenCleanupCheck() {}$/;"	f	struct:FrozenCleanupCheck
FrozenCleanupCheck	./test/checkqueue_tests.cpp	/^struct FrozenCleanupCheck {$/;"	s	file:
FrozenCleanup_Queue	./test/checkqueue_tests.cpp	/^typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;$/;"	t	file:
Func	./script/descriptor.cpp	/^bool Func(const std::string& str, Span<const char>& sp)$/;"	f	namespace:__anon75
Function	./scheduler.h	/^    typedef std::function<void()> Function;$/;"	t	class:CScheduler
FundTransaction	./wallet/rpcwallet.cpp	/^void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options)$/;"	f
FundTransaction	./wallet/wallet.cpp	/^bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)$/;"	f	class:CWallet
GCOV	./Makefile	/^GCOV = \/usr\/bin\/gcov$/;"	m
GCSFilter	./blockfilter.cpp	/^GCSFilter::GCSFilter(const Params& params)$/;"	f	class:GCSFilter
GCSFilter	./blockfilter.cpp	/^GCSFilter::GCSFilter(const Params& params, const ElementSet& elements)$/;"	f	class:GCSFilter
GCSFilter	./blockfilter.cpp	/^GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)$/;"	f	class:GCSFilter
GCSFilter	./blockfilter.h	/^class GCSFilter$/;"	c
GCS_SER_TYPE	./blockfilter.cpp	/^static constexpr int GCS_SER_TYPE = SER_NETWORK;$/;"	v	file:
GCS_SER_VERSION	./blockfilter.cpp	/^static constexpr int GCS_SER_VERSION = 0;$/;"	v	file:
GENBIN	./univalue/Makefile	/^GENBIN = gen\/gen$(BUILD_EXEEXT)$/;"	m
GENERATED_TEST_FILES	./Makefile	/^GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)$/;"	m
GENFAILURE	./netbase.cpp	/^    GENFAILURE = 0x01,       \/\/!< General failure$/;"	e	enum:uint8_t	file:
GENHTML	./Makefile	/^GENHTML = $/;"	m
GENISOIMAGE	./Makefile	/^GENISOIMAGE = $/;"	m
GEN_SRCS	./univalue/Makefile	/^GEN_SRCS = gen\/gen.cpp$/;"	m
GET	./httpserver.h	/^        GET,$/;"	e	enum:HTTPRequest::RequestMethod
GETADDR	./protocol.cpp	/^const char *GETADDR="getaddr";$/;"	m	namespace:NetMsgType	file:
GETBLOCKS	./protocol.cpp	/^const char *GETBLOCKS="getblocks";$/;"	m	namespace:NetMsgType	file:
GETBLOCKTXN	./protocol.cpp	/^const char *GETBLOCKTXN="getblocktxn";$/;"	m	namespace:NetMsgType	file:
GETDATA	./protocol.cpp	/^const char *GETDATA="getdata";$/;"	m	namespace:NetMsgType	file:
GETDATA_TX_INTERVAL	./net_processing.cpp	/^static constexpr int64_t GETDATA_TX_INTERVAL = 60 * 1000000;$/;"	v	file:
GETHEADERS	./protocol.cpp	/^const char *GETHEADERS="getheaders";$/;"	m	namespace:NetMsgType	file:
GETHEADERS_VERSION	./version.h	/^static const int GETHEADERS_VERSION = 31800;$/;"	v
GIT	./Makefile	/^GIT = \/usr\/bin\/git$/;"	m
GIT_COMMIT_DATE	./clientversion.cpp	/^#define GIT_COMMIT_DATE /;"	d	file:
GIT_COMMIT_ID	./clientversion.cpp	/^#define GIT_COMMIT_ID /;"	d	file:
GPROF_CXXFLAGS	./Makefile	/^GPROF_CXXFLAGS = $/;"	m
GPROF_LDFLAGS	./Makefile	/^GPROF_LDFLAGS = $/;"	m
GREP	./Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	./secp256k1/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	./univalue/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GSSAPI	./netbase.cpp	/^    GSSAPI = 0x01,        \/\/!< GSSAPI$/;"	e	enum:uint8_t	file:
GUARDED_BY	./net.h	/^    CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};$/;"	f	class:CNode
GUARDED_BY	./net.h	/^    bool fRelayTxes GUARDED_BY(cs_filter){false};$/;"	f	class:CNode
GUARDED_BY	./net.h	/^    bool fSendMempool GUARDED_BY(cs_inventory){false};$/;"	f	class:CNode
GUARDED_BY	./net.h	/^    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing){0};$/;"	f	class:CNode
GUARDED_BY	./net.h	/^    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing){0};$/;"	f	class:CNode
GUARDED_BY	./net.h	/^    std::string cleanSubVer GUARDED_BY(cs_SubVer){};$/;"	f	class:CNode
GUARDED_BY	./net.h	/^    uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};$/;"	f	class:CNode
GUARDED_BY	./net.h	/^    uint64_t nSendBytes GUARDED_BY(cs_vSend){0};$/;"	f	class:CNode
GUARDED_BY	./threadsafety.h	/^#define GUARDED_BY(/;"	d
GUARDED_BY	./txmempool.h	/^    bool m_is_loaded GUARDED_BY(cs){false};$/;"	f	class:CTxMemPool
GUARDED_BY	./wallet/wallet.h	/^    int nWalletVersion GUARDED_BY(cs_wallet){FEATURE_BASE};$/;"	f	class:final
GUARDED_VAR	./threadsafety.h	/^#define GUARDED_VAR /;"	d
GUARDED_VAR	./threadsafety.h	/^#define GUARDED_VAR$/;"	d
GUI	./util/system.h	/^    GUI,$/;"	m	class:OptionsCategory
GUIUtil	./qt/bitcoingui.h	/^namespace GUIUtil {$/;"	n
GUIUtil	./qt/guiutil.cpp	/^namespace GUIUtil {$/;"	n	file:
GUIUtil	./qt/guiutil.h	/^namespace GUIUtil$/;"	n
GZIP_ENV	./secp256k1/Makefile	/^GZIP_ENV = --best$/;"	m
GZIP_ENV	./univalue/Makefile	/^GZIP_ENV = --best$/;"	m
G_TRANSLATION_FUN	./bitcoin-cli.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	./bitcoin-tx.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	./bitcoin-wallet.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	./bitcoind.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
G_TRANSLATION_FUN	./qt/main.cpp	/^extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = [](const char* psz) {$/;"	v
G_TRANSLATION_FUN	./test/setup_common.cpp	/^const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;$/;"	v
Generate	./leveldb/db/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon19::RandomGenerator
Generate	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon32::RandomGenerator
Generate	./leveldb/doc/bench/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon33::RandomGenerator
GenerateAuthCookie	./rpc/protocol.cpp	/^bool GenerateAuthCookie(std::string *cookie_out)$/;"	f
GenerateCoinbaseCommitment	./validation.cpp	/^std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
GenerateFilter	./leveldb/table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
GenerateNewKey	./wallet/wallet.cpp	/^CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)$/;"	f	class:CWallet
GenerateNewSeed	./wallet/wallet.cpp	/^CPubKey CWallet::GenerateNewSeed()$/;"	f	class:CWallet
GenerateSelectSet	./net.cpp	/^bool CConnman::GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)$/;"	f	class:CConnman
Generated	./qt/transactionrecord.h	/^        Generated,$/;"	e	enum:TransactionRecord::Type
GenericTransactionSignatureChecker	./script/interpreter.h	/^    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}$/;"	f	class:GenericTransactionSignatureChecker
GenericTransactionSignatureChecker	./script/interpreter.h	/^    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}$/;"	f	class:GenericTransactionSignatureChecker
GenericTransactionSignatureChecker	./script/interpreter.h	/^class GenericTransactionSignatureChecker : public BaseSignatureChecker$/;"	c
Genesis	./chain.h	/^    CBlockIndex *Genesis() const {$/;"	f	class:CChain
GenesisBlock	./chainparams.h	/^    const CBlock& GenesisBlock() const { return genesis; }$/;"	f	class:CChainParams
Get	./leveldb/db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	./leveldb/db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	./leveldb/db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	./leveldb/db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	./leveldb/db/recovery_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::RecoveryTest
Get	./leveldb/db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
Get	./leveldb/db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	./leveldb/db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
Get	./script/sigcache.cpp	/^    Get(const uint256& entry, const bool erase)$/;"	f	class:__anon84::CSignatureCache
Get	./streams.h	/^    FILE* Get() const           { return file; }$/;"	f	class:CAutoFile
GetActiveNotifiers	./zmq/zmqnotificationinterface.cpp	/^std::list<const CZMQAbstractNotifier*> CZMQNotificationInterface::GetActiveNotifiers() const$/;"	f	class:CZMQNotificationInterface
GetAddedNodeInfo	./net.cpp	/^std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()$/;"	f	class:CConnman
GetAddr	./addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddrLocal	./net.cpp	/^CService CNode::GetAddrLocal() const {$/;"	f	class:CNode
GetAddrName	./net.cpp	/^std::string CNode::GetAddrName() const {$/;"	f	class:CNode
GetAddr_	./addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)$/;"	f	class:CAddrMan
GetAddress	./zmq/zmqabstractnotifier.h	/^    std::string GetAddress() const { return address; }$/;"	f	class:CZMQAbstractNotifier
GetAddressBalances	./wallet/wallet.cpp	/^std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain::Lock& locked_chain)$/;"	f	class:CWallet
GetAddressCount	./net.cpp	/^size_t CConnman::GetAddressCount() const$/;"	f	class:CConnman
GetAddressGroupings	./wallet/wallet.cpp	/^std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()$/;"	f	class:CWallet
GetAddresses	./net.cpp	/^std::vector<CAddress> CConnman::GetAddresses()$/;"	f	class:CConnman
GetAdjustedTime	./timedata.cpp	/^int64_t GetAdjustedTime()$/;"	f
GetAffectedKeys	./wallet/wallet.cpp	/^std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)$/;"	f
GetAllDestinationsForKey	./outputtype.cpp	/^std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)$/;"	f
GetAllOutputTypes	./rpc/rawtransaction.cpp	/^static std::string GetAllOutputTypes()$/;"	f	file:
GetAllReserveKeys	./wallet/wallet.h	/^    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }$/;"	f	class:final
GetAllowed	./leveldb/util/env_posix.cc	/^  intptr_t GetAllowed() const {$/;"	f	class:leveldb::__anon8::Limiter	file:
GetAmounts	./wallet/wallet.cpp	/^void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,$/;"	f	class:CWalletTx
GetAncestor	./chain.cpp	/^CBlockIndex* CBlockIndex::GetAncestor(int height)$/;"	f	class:CBlockIndex
GetAncestor	./chain.cpp	/^const CBlockIndex* CBlockIndex::GetAncestor(int height) const$/;"	f	class:CBlockIndex
GetAndClear	./streams.h	/^    void GetAndClear(CSerializeData &d) {$/;"	f	class:CDataStream
GetApproximateSizes	./leveldb/db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	./leveldb/db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetArg	./util/system.cpp	/^    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)$/;"	f	class:ArgsManagerHelper
GetArg	./util/system.cpp	/^int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const$/;"	f	class:ArgsManager
GetArg	./util/system.cpp	/^std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const$/;"	f	class:ArgsManager
GetArgHelper	./util/system.cpp	/^    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)$/;"	f	class:ArgsManagerHelper
GetArgs	./util/system.cpp	/^std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const$/;"	f	class:ArgsManager
GetAuthCookie	./rpc/protocol.cpp	/^bool GetAuthCookie(std::string *cookie_out)$/;"	f
GetAuthCookieFile	./rpc/protocol.cpp	/^static fs::path GetAuthCookieFile(bool temp=false)$/;"	f	file:
GetAutostartDir	./qt/guiutil.cpp	/^fs::path static GetAutostartDir()$/;"	f	namespace:GUIUtil
GetAutostartFilePath	./qt/guiutil.cpp	/^fs::path static GetAutostartFilePath()$/;"	f	namespace:GUIUtil
GetAvailableBalance	./wallet/wallet.cpp	/^CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const$/;"	f	class:CWallet
GetAvailableCredit	./wallet/wallet.cpp	/^CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache, const isminefilter& filter) const$/;"	f	class:CWalletTx
GetBalance	./wallet/wallet.cpp	/^CWallet::Balance CWallet::GetBalance(const int min_depth) const$/;"	f	class:CWallet
GetBanned	./banman.cpp	/^void BanMan::GetBanned(banmap_t& banmap)$/;"	f	class:BanMan
GetBestBlock	./coins.cpp	/^uint256 CCoinsView::GetBestBlock() const { return uint256(); }$/;"	f	class:CCoinsView
GetBestBlock	./coins.cpp	/^uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }$/;"	f	class:CCoinsViewBacked
GetBestBlock	./coins.cpp	/^uint256 CCoinsViewCache::GetBestBlock() const {$/;"	f	class:CCoinsViewCache
GetBestBlock	./coins.h	/^    const uint256 &GetBestBlock() const { return hashBlock; }$/;"	f	class:CCoinsViewCursor
GetBestBlock	./txdb.cpp	/^uint256 CCoinsViewDB::GetBestBlock() const {$/;"	f	class:CCoinsViewDB
GetBestHeight	./net.cpp	/^int CConnman::GetBestHeight() const$/;"	f	class:CConnman
GetBindAddress	./net.cpp	/^static CAddress GetBindAddress(SOCKET sock)$/;"	f	file:
GetBlockChecked	./rpc/blockchain.cpp	/^static CBlock GetBlockChecked(const CBlockIndex* pblockindex)$/;"	f	file:
GetBlockFileInfo	./validation.cpp	/^CBlockFileInfo* GetBlockFileInfo(size_t n)$/;"	f
GetBlockFilterIndex	./index/blockfilterindex.cpp	/^BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type)$/;"	f
GetBlockHash	./blockfilter.h	/^    const uint256& GetBlockHash() const { return m_block_hash; }$/;"	f	class:BlockFilter
GetBlockHash	./chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	./chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHeader	./chain.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockHeader	./primitives/block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlock
GetBlockPos	./chain.h	/^    FlatFilePos GetBlockPos() const {$/;"	f	class:CBlockIndex
GetBlockPosFilename	./validation.cpp	/^fs::path GetBlockPosFilename(const FlatFilePos &pos)$/;"	f
GetBlockProof	./chain.cpp	/^arith_uint256 GetBlockProof(const CBlockIndex& block)$/;"	f
GetBlockProofEquivalentTime	./chain.cpp	/^int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)$/;"	f
GetBlockSubsidy	./validation.cpp	/^CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)$/;"	f
GetBlockTime	./chain.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockTime	./primitives/block.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockHeader
GetBlockTimeMax	./chain.h	/^    int64_t GetBlockTimeMax() const$/;"	f	class:CBlockIndex
GetBlockWeight	./consensus/validation.h	/^static inline int64_t GetBlockWeight(const CBlock& block)$/;"	f
GetBlocksConnected	./validation.cpp	/^    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {$/;"	f	class:ConnectTrace
GetBlocksDir	./util/system.cpp	/^const fs::path &GetBlocksDir()$/;"	f
GetBlocksToMaturity	./wallet/wallet.cpp	/^int CMerkleTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CMerkleTx
GetBoolArg	./util/system.cpp	/^bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const$/;"	f	class:ArgsManager
GetBroadcastTransactions	./wallet/wallet.h	/^    bool GetBroadcastTransactions() const { return fBroadcastTransactions; }$/;"	f	class:final
GetBucketPosition	./addrman.cpp	/^int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const$/;"	f	class:CAddrInfo
GetByte	./netaddress.cpp	/^unsigned int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetCPUID	./random.cpp	/^static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)$/;"	f	file:
GetCScript	./keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetCScript	./script/sign.cpp	/^bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }$/;"	f	class:FlatSigningProvider
GetCScript	./script/sign.cpp	/^bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const$/;"	f	class:HidingSigningProvider
GetCScript	./script/sign.cpp	/^static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)$/;"	f	file:
GetCScript	./script/sign.h	/^    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }$/;"	f	class:SigningProvider
GetCScripts	./keystore.cpp	/^std::set<CScriptID> CBasicKeyStore::GetCScripts() const$/;"	f	class:CBasicKeyStore
GetCachableAmount	./wallet/wallet.cpp	/^CAmount CWalletTx::GetCachableAmount(AmountType type, const isminefilter& filter, bool recalculate) const$/;"	f	class:CWalletTx
GetCacheSize	./coins.cpp	/^unsigned int CCoinsViewCache::GetCacheSize() const {$/;"	f	class:CCoinsViewCache
GetCategoryMask	./logging.h	/^        uint32_t GetCategoryMask() const { return m_categories.load(); }$/;"	f	class:BCLog::Logger
GetChainName	./util/system.cpp	/^std::string ArgsManager::GetChainName() const$/;"	f	class:ArgsManager
GetChance	./addrman.cpp	/^double CAddrInfo::GetChance(int64_t nNow) const$/;"	f	class:CAddrInfo
GetChange	./wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	./wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetChange	./wallet/wallet.cpp	/^CAmount CWalletTx::GetChange() const$/;"	f	class:CWalletTx
GetCheapHash	./hash.h	/^    inline uint64_t GetCheapHash() {$/;"	f	class:CHashWriter
GetChildren	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon35::InMemoryEnv
GetChildren	./leveldb/include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	./leveldb/util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon8::PosixEnv
GetChildren	./leveldb/util/env_win.cc	/^Status Win32Env::GetChildren(const std::string& dir, std::vector<std::string>* result)$/;"	f	class:leveldb::Win32::Win32Env
GetCoin	./coins.cpp	/^bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }$/;"	f	class:CCoinsView
GetCoin	./coins.cpp	/^bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }$/;"	f	class:CCoinsViewBacked
GetCoin	./coins.cpp	/^bool CCoinsViewCache::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewCache
GetCoin	./txdb.cpp	/^bool CCoinsViewDB::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewDB
GetCoin	./txmempool.cpp	/^bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewMemPool
GetCoinsMapEntry	./test/coins_tests.cpp	/^void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)$/;"	f
GetCommand	./protocol.cpp	/^std::string CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	./protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetComment	./test/script_tests.cpp	/^    std::string GetComment() const$/;"	f	class:__anon58::TestBuilder
GetCompact	./arith_uint256.cpp	/^uint32_t arith_uint256::GetCompact(bool fNegative) const$/;"	f	class:arith_uint256
GetConfigArgs	./test/util_tests.cpp	/^    std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }$/;"	f	struct:TestArgsManager
GetConfigFile	./util/system.cpp	/^fs::path GetConfigFile(const std::string& confPath)$/;"	f
GetConfigOptions	./util/system.cpp	/^static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)$/;"	f	file:
GetConflictTx	./txmempool.cpp	/^const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const$/;"	f	class:CTxMemPool
GetConflicts	./wallet/wallet.cpp	/^std::set<uint256> CWallet::GetConflicts(const uint256& txid) const$/;"	f	class:CWallet
GetConflicts	./wallet/wallet.cpp	/^std::set<uint256> CWalletTx::GetConflicts() const$/;"	f	class:CWalletTx
GetConsensus	./chainparams.h	/^    const Consensus::Params& GetConsensus() const { return consensus; }$/;"	f	class:CChainParams
GetCountWithAncestors	./txmempool.h	/^    uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetCountWithDescendants	./txmempool.h	/^    uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetCredit	./wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	./wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	./wallet/wallet.cpp	/^CAmount CWalletTx::GetCredit(interfaces::Chain::Lock& locked_chain, const isminefilter& filter) const$/;"	f	class:CWalletTx
GetCurrentDir	./leveldb/util/env_win.cc	/^std::string GetCurrentDir()$/;"	f	namespace:leveldb::Win32
GetCurrentDirW	./leveldb/util/env_win.cc	/^std::wstring GetCurrentDirW()$/;"	f	namespace:leveldb::Win32
GetCursor	./wallet/db.h	/^    Dbc* GetCursor()$/;"	f	class:BerkeleyBatch
GetDB	./index/txindex.cpp	/^BaseIndex::DB& TxIndex::GetDB() const { return *m_db; }$/;"	f	class:TxIndex
GetDBHandle	./wallet/wallet.h	/^    WalletDatabase& GetDBHandle()$/;"	f	class:final
GetDataDir	./util/system.cpp	/^const fs::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDataMsg	./protocol.h	/^enum GetDataMsg$/;"	g
GetDebit	./wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	./wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	./wallet/wallet.cpp	/^CAmount CWalletTx::GetDebit(const isminefilter& filter) const$/;"	f	class:CWalletTx
GetDebugMessage	./consensus/validation.h	/^    std::string GetDebugMessage() const { return strDebugMessage; }$/;"	f	class:CValidationState
GetDefaultAddressType	./qt/addresstablemodel.cpp	/^OutputType AddressTableModel::GetDefaultAddressType() const { return walletModel->wallet().getDefaultAddressType(); };$/;"	f	class:AddressTableModel
GetDefaultDataDir	./util/system.cpp	/^fs::path GetDefaultDataDir()$/;"	f
GetDefaultPort	./chainparams.h	/^    int GetDefaultPort() const { return nDefaultPort; }$/;"	f	class:CChainParams
GetDefaultProxyAddress	./qt/optionsmodel.cpp	/^static const QString GetDefaultProxyAddress()$/;"	f	file:
GetDepthInMainChain	./wallet/wallet.cpp	/^int CMerkleTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CMerkleTx
GetDesirableServiceFlags	./protocol.cpp	/^ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {$/;"	f
GetDestData	./wallet/wallet.cpp	/^bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const$/;"	f	class:CWallet
GetDestValues	./wallet/wallet.cpp	/^std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const$/;"	f	class:CWallet
GetDestinationForKey	./outputtype.cpp	/^CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)$/;"	f
GetDeterministicRandomizer	./net.cpp	/^CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const$/;"	f	class:CConnman
GetDevURandom	./random.cpp	/^static void GetDevURandom(unsigned char *ent32)$/;"	f	file:
GetDifficulty	./rpc/blockchain.cpp	/^double GetDifficulty(const CBlockIndex* blockindex)$/;"	f
GetDirName	./leveldb/db/fault_injection_test.cc	/^static std::string GetDirName(const std::string filename) {$/;"	f	namespace:leveldb::__anon20
GetDiscardRate	./wallet/fees.cpp	/^CFeeRate GetDiscardRate(const CWallet& wallet)$/;"	f
GetDisplayName	./wallet/wallet.h	/^    const std::string GetDisplayName() const {$/;"	f	class:final
GetDustThreshold	./policy/policy.cpp	/^CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)$/;"	f
GetEncoded	./blockfilter.h	/^    const std::vector<unsigned char>& GetEncoded() const { return m_encoded; }$/;"	f	class:GCSFilter
GetEncodedFilter	./blockfilter.h	/^    const std::vector<unsigned char>& GetEncodedFilter() const$/;"	f	class:BlockFilter
GetErrorReason	./fs.cpp	/^static std::string GetErrorReason() {$/;"	f	namespace:fsbridge
GetExtKey	./script/descriptor.cpp	/^    bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const$/;"	f	class:__anon75::final	file:
GetExtNetwork	./netaddress.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetExtraOutboundCount	./net.cpp	/^int CConnman::GetExtraOutboundCount()$/;"	f	class:CConnman
GetFee	./policy/feerate.cpp	/^CAmount CFeeRate::GetFee(size_t nBytes_) const$/;"	f	class:CFeeRate
GetFee	./txmempool.h	/^    const CAmount& GetFee() const { return nFee; }$/;"	f	class:CTxMemPoolEntry
GetFeePerK	./policy/feerate.h	/^    CAmount GetFeePerK() const { return GetFee(1000); }$/;"	f	class:CFeeRate
GetFileIterator	./leveldb/db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
GetFileSize	./leveldb/include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	./leveldb/util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon8::PosixEnv
GetFileSize	./leveldb/util/env_win.cc	/^Status Win32Env::GetFileSize( const std::string& fname, uint64_t* file_size )$/;"	f	class:leveldb::Win32::Win32Env
GetFiles	./leveldb/db/recovery_test.cc	/^  std::vector<uint64_t> GetFiles(FileType t) {$/;"	f	class:leveldb::RecoveryTest
GetFilter	./blockfilter.h	/^    const GCSFilter& GetFilter() const { return m_filter; }$/;"	f	class:BlockFilter
GetFilterType	./blockfilter.h	/^    BlockFilterType GetFilterType() const { return m_filter_type; }$/;"	f	class:BlockFilter
GetFilterType	./index/blockfilterindex.h	/^    BlockFilterType GetFilterType() const { return m_filter_type; }$/;"	f	class:final
GetGroup	./netaddress.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHDChain	./wallet/wallet.h	/^    const CHDChain& GetHDChain() const { return hdChain; }$/;"	f	class:final
GetHash	./blockfilter.cpp	/^uint256 BlockFilter::GetHash() const$/;"	f	class:BlockFilter
GetHash	./hash.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHash	./netaddress.cpp	/^uint64_t CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHash	./primitives/block.cpp	/^uint256 CBlockHeader::GetHash() const$/;"	f	class:CBlockHeader
GetHash	./primitives/transaction.cpp	/^uint256 CMutableTransaction::GetHash() const$/;"	f	class:CMutableTransaction
GetHash	./primitives/transaction.h	/^    const uint256& GetHash() const { return hash; }$/;"	f	class:CTransaction
GetHash	./pubkey.h	/^    uint256 GetHash() const$/;"	f	class:CPubKey
GetHash	./wallet/wallet.h	/^    const uint256& GetHash() const { return tx->GetHash(); }$/;"	f	class:CMerkleTx
GetHeadBlocks	./coins.cpp	/^std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }$/;"	f	class:CCoinsView
GetHeadBlocks	./coins.cpp	/^std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }$/;"	f	class:CCoinsViewBacked
GetHeadBlocks	./txdb.cpp	/^std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {$/;"	f	class:CCoinsViewDB
GetHeader	./httpserver.cpp	/^std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const$/;"	f	class:HTTPRequest
GetHeapProfile	./leveldb/port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeapProfile	./leveldb/port/port_win.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeight	./txmempool.h	/^    unsigned int GetHeight() const { return entryHeight; }$/;"	f	class:CTxMemPoolEntry
GetHelpMessage	./util/system.cpp	/^std::string ArgsManager::GetHelpMessage() const$/;"	f	class:ArgsManager
GetHex	./arith_uint256.cpp	/^std::string base_uint<BITS>::GetHex() const$/;"	f	class:base_uint
GetHex	./uint256.cpp	/^std::string base_blob<BITS>::GetHex() const$/;"	f	class:base_blob
GetID	./pubkey.h	/^    CKeyID GetID() const$/;"	f	class:CPubKey
GetId	./net.h	/^    NodeId GetId() const {$/;"	f	class:CNode
GetImmatureCredit	./wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache) const$/;"	f	class:CWalletTx
GetImmatureWatchOnlyCredit	./wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache) const$/;"	f	class:CWalletTx
GetImportTimestamp	./wallet/rpcdump.cpp	/^static int64_t GetImportTimestamp(const UniValue& data, int64_t now)$/;"	f	file:
GetIn6Addr	./netaddress.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	./netaddress.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetInfo	./txmempool.cpp	/^static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator it) {$/;"	f	file:
GetInputCoin	./wallet/wallet.h	/^    inline CInputCoin GetInputCoin() const$/;"	f	class:COutput
GetInputUTXO	./psbt.cpp	/^bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const$/;"	f	class:PartiallySignedTransaction
GetInternalKey	./leveldb/db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetIter	./txmempool.cpp	/^boost::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const$/;"	f	class:CTxMemPool
GetIterSet	./txmempool.cpp	/^CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const$/;"	f	class:CTxMemPool
GetJSON	./test/script_tests.cpp	/^    UniValue GetJSON()$/;"	f	class:__anon58::TestBuilder
GetKey	./dbwrapper.h	/^    template<typename K> bool GetKey(K& key) {$/;"	f	class:CDBIterator
GetKey	./keystore.cpp	/^bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetKey	./netaddress.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKey	./script/sign.cpp	/^bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }$/;"	f	class:FlatSigningProvider
GetKey	./script/sign.cpp	/^bool HidingSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const$/;"	f	class:HidingSigningProvider
GetKey	./script/sign.h	/^    virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }$/;"	f	class:SigningProvider
GetKey	./txdb.cpp	/^bool CCoinsViewDBCursor::GetKey(COutPoint &key) const$/;"	f	class:CCoinsViewDBCursor
GetKey	./wallet/crypter.cpp	/^bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const$/;"	f	class:CCryptoKeyStore
GetKeyBirthTimes	./wallet/wallet.cpp	/^void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CKeyID, int64_t>& mapKeyBirth) const {$/;"	f	class:CWallet
GetKeyForDestination	./keystore.cpp	/^CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)$/;"	f
GetKeyFromPool	./wallet/wallet.cpp	/^bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)$/;"	f	class:CWallet
GetKeyOrigin	./script/sign.cpp	/^bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const$/;"	f	class:FlatSigningProvider
GetKeyOrigin	./script/sign.cpp	/^bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const$/;"	f	class:HidingSigningProvider
GetKeyOrigin	./script/sign.h	/^    virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }$/;"	f	class:SigningProvider
GetKeyOrigin	./wallet/wallet.cpp	/^bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const$/;"	f	class:CWallet
GetKeys	./keystore.cpp	/^std::set<CKeyID> CBasicKeyStore::GetKeys() const$/;"	f	class:CBasicKeyStore
GetKeys	./wallet/crypter.cpp	/^std::set<CKeyID> CCryptoKeyStore::GetKeys() const$/;"	f	class:CCryptoKeyStore
GetLabelAddresses	./wallet/wallet.cpp	/^std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) const$/;"	f	class:CWallet
GetLabelName	./wallet/wallet.cpp	/^const std::string& CWallet::GetLabelName(const CScript& scriptPubKey) const$/;"	f	class:CWallet
GetLangTerritory	./qt/bitcoin.cpp	/^static QString GetLangTerritory()$/;"	f	file:
GetLastErrSz	./leveldb/util/env_win.cc	/^std::string GetLastErrSz()$/;"	f	namespace:leveldb::Win32
GetLastErrSzW	./leveldb/util/env_win.cc	/^std::wstring GetLastErrSzW()$/;"	f	namespace:leveldb::Win32
GetLegacySigOpCount	./consensus/tx_verify.cpp	/^unsigned int GetLegacySigOpCount(const CTransaction& tx)$/;"	f
GetLen	./pubkey.h	/^    unsigned int static GetLen(unsigned char chHeader)$/;"	f	class:CPubKey
GetLengthPrefixedSlice	./leveldb/db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	./leveldb/util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	./leveldb/util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	./leveldb/db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetLimit	./support/lockedpool.cpp	/^size_t PosixLockedPageAllocator::GetLimit()$/;"	f	class:PosixLockedPageAllocator
GetLimit	./support/lockedpool.cpp	/^size_t Win32LockedPageAllocator::GetLimit()$/;"	f	class:Win32LockedPageAllocator
GetListenPort	./net.cpp	/^unsigned short GetListenPort()$/;"	f
GetLocal	./net.cpp	/^bool GetLocal(CService& addr, const CNetAddr *paddrPeer)$/;"	f
GetLocalAddress	./net.cpp	/^CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)$/;"	f
GetLocalNonce	./net.h	/^    uint64_t GetLocalNonce() const {$/;"	f	class:CNode
GetLocalServices	./net.cpp	/^ServiceFlags CConnman::GetLocalServices() const$/;"	f	class:CConnman
GetLocalServices	./net.h	/^    ServiceFlags GetLocalServices() const$/;"	f	class:CNode
GetLocation	./wallet/wallet.h	/^    const WalletLocation& GetLocation() const { return m_location; }$/;"	f	class:final
GetLocator	./chain.cpp	/^CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {$/;"	f	class:CChain
GetLockData	./sync.cpp	/^LockData& GetLockData() {$/;"	f
GetLockPoints	./txmempool.h	/^    const LockPoints& GetLockPoints() const { return lockPoints; }$/;"	f	class:CTxMemPoolEntry
GetLocktimeForNewTransaction	./wallet/wallet.cpp	/^static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)$/;"	f	file:
GetLogCategory	./logging.cpp	/^bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)$/;"	f
GetLow64	./arith_uint256.h	/^    uint64_t GetLow64() const$/;"	f	class:base_uint
GetMainSignals	./validationinterface.cpp	/^CMainSignals& GetMainSignals()$/;"	f
GetMaxConfirms	./policy/fees.cpp	/^    unsigned int GetMaxConfirms() const { return scale * confAvg.size(); }$/;"	f	class:TxConfirmStats
GetMaxHeight	./leveldb/db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetMaxOutboundTarget	./net.cpp	/^uint64_t CConnman::GetMaxOutboundTarget()$/;"	f	class:CConnman
GetMaxOutboundTimeLeftInCycle	./net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeLeftInCycle()$/;"	f	class:CConnman
GetMaxOutboundTimeframe	./net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeframe()$/;"	f	class:CConnman
GetMedianTimePast	./chain.h	/^    int64_t GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMemPoolChildren	./txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const$/;"	f	class:CTxMemPool
GetMemPoolParents	./txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const$/;"	f	class:CTxMemPool
GetMessageHash	./net.cpp	/^const uint256& CNetMessage::GetMessageHash() const$/;"	f	class:CNetMessage
GetMinFee	./txmempool.cpp	/^CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {$/;"	f	class:CTxMemPool
GetMinimumFee	./wallet/fees.cpp	/^CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc)$/;"	f
GetMinimumFeeRate	./wallet/fees.cpp	/^CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc)$/;"	f
GetMockTime	./util/time.cpp	/^int64_t GetMockTime()$/;"	f
GetModFeeAndSize	./txmempool.h	/^    void GetModFeeAndSize(const CTxMemPoolEntry &a, double &mod_fee, double &size) const$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
GetModFeeAndSize	./txmempool.h	/^    void GetModFeeAndSize(const T &a, double &mod_fee, double &size) const$/;"	f	class:CompareTxMemPoolEntryByAncestorFee
GetModFeesWithAncestors	./miner.h	/^    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }$/;"	f	struct:CTxMemPoolModifiedEntry
GetModFeesWithAncestors	./txmempool.h	/^    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetModFeesWithDescendants	./txmempool.h	/^    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetModifiedFee	./miner.h	/^    int64_t GetModifiedFee() const { return iter->GetModifiedFee(); }$/;"	f	struct:CTxMemPoolModifiedEntry
GetModifiedFee	./txmempool.h	/^    int64_t GetModifiedFee() const { return nFee + feeDelta; }$/;"	f	class:CTxMemPoolEntry
GetMyStartingHeight	./net.h	/^    int GetMyStartingHeight() const {$/;"	f	class:CNode
GetN	./blockfilter.h	/^    uint32_t GetN() const { return m_N; }$/;"	f	class:GCSFilter
GetName	./leveldb/db/leveldbutil.cc	/^  virtual std::string GetName() const { return "[stdout]"; }$/;"	f	class:leveldb::__anon31::StdoutPrinter
GetName	./leveldb/helpers/memenv/memenv.cc	/^  virtual std::string GetName() const { return "[memenv]"; }$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
GetName	./leveldb/helpers/memenv/memenv.cc	/^  virtual std::string GetName() const { return "[memenv]"; }$/;"	f	class:leveldb::__anon35::SequentialFileImpl
GetName	./leveldb/helpers/memenv/memenv.cc	/^  virtual std::string GetName() const { return "[memenv]"; }$/;"	f	class:leveldb::__anon35::WritableFileImpl
GetName	./leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
GetName	./leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
GetName	./leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixSequentialFile
GetName	./leveldb/util/env_posix.cc	/^  virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::__anon8::PosixWritableFile
GetName	./leveldb/util/env_win.cc	/^    virtual std::string GetName() const { return _filename; }$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
GetName	./leveldb/util/env_win.cc	/^    virtual std::string GetName() const { return _filename; }$/;"	f	class:leveldb::Win32::Win32SequentialFile
GetName	./leveldb/util/env_win.cc	/^    virtual std::string GetName() const { return filename_; }$/;"	f	class:leveldb::Win32::Win32WritableFile
GetName	./wallet/wallet.h	/^    const std::string& GetName() const { return m_location.GetName(); }$/;"	f	class:final
GetName	./wallet/walletutil.h	/^    const std::string& GetName() const { return m_name; }$/;"	f	class:final
GetNameProxy	./netbase.cpp	/^bool GetNameProxy(proxyType &nameProxyOut) {$/;"	f
GetNetwork	./netaddress.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNetworkActive	./net.h	/^    bool GetNetworkActive() const { return fNetworkActive; };$/;"	f	class:CConnman
GetNetworkHashPS	./rpc/mining.cpp	/^static UniValue GetNetworkHashPS(int lookup, int height) {$/;"	f	file:
GetNetworkName	./netbase.cpp	/^std::string GetNetworkName(enum Network net) {$/;"	f
GetNetworksInfo	./rpc/net.cpp	/^static UniValue GetNetworksInfo()$/;"	f	file:
GetNewBucket	./addrman.cpp	/^int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	./addrman.h	/^    int GetNewBucket(const uint256 &nKey) const$/;"	f	class:CAddrInfo
GetNewNodeId	./net.cpp	/^NodeId CConnman::GetNewNodeId()$/;"	f	class:CConnman
GetNextWorkRequired	./pow.cpp	/^unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)$/;"	f
GetNodeCount	./net.cpp	/^size_t CConnman::GetNodeCount(NumConnections flags)$/;"	f	class:CConnman
GetNodeStateStats	./net_processing.cpp	/^bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {$/;"	f
GetNodeStats	./net.cpp	/^void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)$/;"	f	class:CConnman
GetNumCores	./util/system.cpp	/^int GetNumCores()$/;"	f
GetNumTransactions	./merkleblock.h	/^    unsigned int GetNumTransactions() const { return nTransactions; };$/;"	f	class:CPartialMerkleTree
GetOSRand	./random.cpp	/^void GetOSRand(unsigned char *ent32)$/;"	f
GetObfuscateKey	./dbwrapper.cpp	/^const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)$/;"	f	namespace:dbwrapper_private
GetOldestKeyPoolTime	./wallet/wallet.cpp	/^int64_t CWallet::GetOldestKeyPoolTime()$/;"	f	class:CWallet
GetOldestKeyTimeInPool	./wallet/wallet.cpp	/^static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {$/;"	f	file:
GetOneColumn	./crypto/ctaes/ctaes.c	/^static void GetOneColumn(AES_state* s, const AES_state* a, int c) {$/;"	f	file:
GetOp	./script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	./script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOpName	./script/script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOpenSSLMutex	./random.cpp	/^    Mutex& GetOpenSSLMutex(int i) { return m_mutex_openssl[i]; }$/;"	f	class:__anon61::RNGState
GetOptions	./dbwrapper.cpp	/^static leveldb::Options GetOptions(size_t nCacheSize)$/;"	f	file:
GetOutboundMessageHighWaterMark	./zmq/zmqabstractnotifier.h	/^    int GetOutboundMessageHighWaterMark() const { return outbound_message_high_water_mark; }$/;"	f	class:CZMQAbstractNotifier
GetOutboundTargetBytesLeft	./net.cpp	/^uint64_t CConnman::GetOutboundTargetBytesLeft()$/;"	f	class:CConnman
GetOutputsHash	./script/interpreter.cpp	/^uint256 GetOutputsHash(const T& txTo)$/;"	f	namespace:__anon77
GetOverlappingInputs	./leveldb/db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetOverrideArgs	./test/util_tests.cpp	/^    std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }$/;"	f	struct:TestArgsManager
GetP2SHSigOpCount	./consensus/tx_verify.cpp	/^unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)$/;"	f
GetPageSize	./leveldb/util/env_win.cc	/^size_t GetPageSize()$/;"	f	namespace:leveldb::Win32
GetParams	./blockfilter.h	/^    const Params& GetParams() const { return m_params; }$/;"	f	class:GCSFilter
GetPath	./wallet/walletutil.h	/^    const fs::path& GetPath() const { return m_path; }$/;"	f	class:final
GetPeer	./httpserver.cpp	/^CService HTTPRequest::GetPeer() const$/;"	f	class:HTTPRequest
GetPidFile	./init.cpp	/^static fs::path GetPidFile()$/;"	f	file:
GetPort	./netaddress.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetPos	./streams.h	/^    uint64_t GetPos() const {$/;"	f	class:CBufferedFile
GetPrevoutHash	./script/interpreter.cpp	/^uint256 GetPrevoutHash(const T& txTo)$/;"	f	namespace:__anon77
GetPrivKey	./key.cpp	/^CPrivKey CKey::GetPrivKey() const {$/;"	f	class:CKey
GetPrivateKeyFile	./torcontrol.cpp	/^fs::path TorController::GetPrivateKeyFile()$/;"	f	class:TorController
GetProperty	./leveldb/db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	./leveldb/db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetProxy	./netbase.cpp	/^bool GetProxy(enum Network net, proxyType &proxyInfoOut) {$/;"	f
GetProxySetting	./qt/optionsmodel.cpp	/^static ProxySetting GetProxySetting(QSettings &settings, const QString &name)$/;"	f	file:
GetPubKey	./key.cpp	/^CPubKey CKey::GetPubKey() const {$/;"	f	class:CKey
GetPubKey	./keystore.cpp	/^bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CBasicKeyStore
GetPubKey	./script/sign.cpp	/^bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }$/;"	f	class:FlatSigningProvider
GetPubKey	./script/sign.cpp	/^bool HidingSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const$/;"	f	class:HidingSigningProvider
GetPubKey	./script/sign.cpp	/^static bool GetPubKey(const SigningProvider& provider, const SignatureData& sigdata, const CKeyID& address, CPubKey& pubkey)$/;"	f	file:
GetPubKey	./script/sign.h	/^    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }$/;"	f	class:SigningProvider
GetPubKey	./wallet/crypter.cpp	/^bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:CCryptoKeyStore
GetRange	./leveldb/db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	./leveldb/db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetReachabilityFrom	./netaddress.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetReason	./consensus/validation.h	/^    ValidationInvalidReason GetReason() const { return m_reason; }$/;"	f	class:CValidationState
GetReason	./fs.h	/^        std::string GetReason() { return reason; }$/;"	f	class:fsbridge::FileLock
GetReceiveFloodSize	./net.cpp	/^unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }$/;"	f	class:CConnman
GetRecvVersion	./net.h	/^    int GetRecvVersion() const$/;"	f	class:CNode
GetRefCount	./net.h	/^    int GetRefCount() const$/;"	f	class:CNode
GetRejectCode	./consensus/validation.h	/^    unsigned int GetRejectCode() const { return chRejectCode; }$/;"	f	class:CValidationState
GetRejectReason	./consensus/validation.h	/^    std::string GetRejectReason() const { return strRejectReason; }$/;"	f	class:CValidationState
GetRequestMethod	./httpserver.cpp	/^HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const$/;"	f	class:HTTPRequest
GetRequiredFee	./wallet/fees.cpp	/^CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)$/;"	f
GetRequiredFeeRate	./wallet/fees.cpp	/^CFeeRate GetRequiredFeeRate(const CWallet& wallet)$/;"	f
GetReservedKey	./wallet/wallet.cpp	/^bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)$/;"	f	class:CReserveKey
GetRestartPoint	./leveldb/table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetScriptError	./validation.h	/^    ScriptError GetScriptError() const { return error; }$/;"	f	class:CScriptCheck
GetScriptForDestination	./script/standard.cpp	/^CScript GetScriptForDestination(const CTxDestination& dest)$/;"	f
GetScriptForMultisig	./script/standard.cpp	/^CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)$/;"	f
GetScriptForRawPubKey	./script/standard.cpp	/^CScript GetScriptForRawPubKey(const CPubKey& pubKey)$/;"	f
GetScriptForWitness	./script/standard.cpp	/^CScript GetScriptForWitness(const CScript& redeemscript)$/;"	f
GetScriptOp	./script/script.cpp	/^bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator end, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet)$/;"	f
GetSendVersion	./net.cpp	/^int CNode::GetSendVersion() const$/;"	f	class:CNode
GetSequenceHash	./script/interpreter.cpp	/^uint256 GetSequenceHash(const T& txTo)$/;"	f	namespace:__anon77
GetSerializeSize	./serialize.h	/^size_t GetSerializeSize(const T& t, int nVersion = 0)$/;"	f
GetSerializeSizeMany	./serialize.h	/^size_t GetSerializeSizeMany(int nVersion, const T&... t)$/;"	f
GetSharedTx	./txmempool.h	/^    CTransactionRef GetSharedTx() const { return this->tx; }$/;"	f	class:CTxMemPoolEntry
GetShortID	./blockencodings.cpp	/^uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {$/;"	f	class:CBlockHeaderAndShortTxIDs
GetShortID	./test/blockencodings_tests.cpp	/^    uint64_t GetShortID(const uint256& txhash) const {$/;"	f	class:TestHeaderAndShortIDs
GetSigOpCost	./txmempool.h	/^    int64_t GetSigOpCost() const { return sigOpCost; }$/;"	f	class:CTxMemPoolEntry
GetSigOpCostWithAncestors	./txmempool.h	/^    int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSigOpCount	./script/script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	./script/script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSizeOfCompactSize	./serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64_t nSize)$/;"	f
GetSizeOfVarInt	./serialize.h	/^inline unsigned int GetSizeOfVarInt(I n)$/;"	f
GetSizeWithAncestors	./miner.h	/^    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }$/;"	f	struct:CTxMemPoolModifiedEntry
GetSizeWithAncestors	./txmempool.h	/^    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSizeWithDescendants	./txmempool.h	/^    uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetSkipHeight	./chain.cpp	/^int static inline GetSkipHeight(int height) {$/;"	f	file:
GetSnapshot	./leveldb/db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	./leveldb/db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetSockAddr	./netaddress.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetSortedDepthAndScore	./txmempool.cpp	/^std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const$/;"	f	class:CTxMemPool
GetSpecialFolderPath	./util/system.cpp	/^fs::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetSpecialScriptSize	./compressor.cpp	/^unsigned int GetSpecialScriptSize(unsigned int nSize)$/;"	f
GetSpendHeight	./validation.cpp	/^int GetSpendHeight(const CCoinsViewCache& inputs)$/;"	f
GetSpendSize	./wallet/wallet.h	/^    int GetSpendSize(unsigned int out, bool use_max_sig = false) const$/;"	f	class:CWalletTx
GetSpendsCoinbase	./txmempool.h	/^    bool GetSpendsCoinbase() const { return spendsCoinbase; }$/;"	f	class:CTxMemPoolEntry
GetStartOnSystemStartup	./qt/guiutil.cpp	/^bool GetStartOnSystemStartup() { return false; }$/;"	f	namespace:GUIUtil
GetStartOnSystemStartup	./qt/guiutil.cpp	/^bool GetStartOnSystemStartup()$/;"	f	namespace:GUIUtil
GetStartupTime	./util/system.cpp	/^int64_t GetStartupTime()$/;"	f
GetStateFor	./test/versionbits_tests.cpp	/^    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }$/;"	f	class:TestConditionChecker
GetStateFor	./versionbits.cpp	/^ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStateSinceHeightFor	./test/versionbits_tests.cpp	/^    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }$/;"	f	class:TestConditionChecker
GetStateSinceHeightFor	./versionbits.cpp	/^int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStateStatisticsFor	./versionbits.cpp	/^BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const$/;"	f	class:AbstractThresholdConditionChecker
GetStats	./leveldb/db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetSystemTimeInSeconds	./util/time.cpp	/^int64_t GetSystemTimeInSeconds()$/;"	f
GetTempDir	./leveldb/db/c_test.c	/^static const char* GetTempDir(void) {$/;"	f	file:
GetTestDirectory	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
GetTestDirectory	./leveldb/include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	./leveldb/util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon8::PosixEnv
GetTestDirectory	./leveldb/util/env_win.cc	/^Status Win32Env::GetTestDirectory( std::string* path )$/;"	f	class:leveldb::Win32::Win32Env
GetTickCount64	./leveldb/util/env_win.cc	/^#define GetTickCount64 /;"	d	file:
GetTime	./txmempool.h	/^    int64_t GetTime() const { return nTime; }$/;"	f	class:CTxMemPoolEntry
GetTime	./util/time.cpp	/^int64_t GetTime()$/;"	f
GetTimeMicros	./util/time.cpp	/^int64_t GetTimeMicros()$/;"	f
GetTimeMillis	./util/time.cpp	/^int64_t GetTimeMillis()$/;"	f
GetTimeOffset	./timedata.cpp	/^int64_t GetTimeOffset()$/;"	f
GetTotalBytesRecv	./net.cpp	/^uint64_t CConnman::GetTotalBytesRecv()$/;"	f	class:CConnman
GetTotalBytesSent	./net.cpp	/^uint64_t CConnman::GetTotalBytesSent()$/;"	f	class:CConnman
GetTotalSize	./primitives/transaction.cpp	/^unsigned int CTransaction::GetTotalSize() const$/;"	f	class:CTransaction
GetTotalTxSize	./txmempool.h	/^    uint64_t GetTotalTxSize() const$/;"	f	class:CTxMemPool
GetTransaction	./validation.cpp	/^bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, const CBlockIndex* const block_index)$/;"	f
GetTransactionAncestry	./txmempool.cpp	/^void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const {$/;"	f	class:CTxMemPool
GetTransactionInputWeight	./consensus/validation.h	/^static inline int64_t GetTransactionInputWeight(const CTxIn& txin)$/;"	f
GetTransactionSigOpCost	./consensus/tx_verify.cpp	/^int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)$/;"	f
GetTransactionWeight	./consensus/validation.h	/^static inline int64_t GetTransactionWeight(const CTransaction& tx)$/;"	f
GetTransactionsUpdated	./txmempool.cpp	/^unsigned int CTxMemPool::GetTransactionsUpdated() const$/;"	f	class:CTxMemPool
GetTriedBucket	./addrman.cpp	/^int CAddrInfo::GetTriedBucket(const uint256& nKey) const$/;"	f	class:CAddrInfo
GetTryNewOutboundPeer	./net.cpp	/^bool CConnman::GetTryNewOutboundPeer()$/;"	f	class:CConnman
GetTx	./miner.h	/^    const CTransaction& GetTx() const { return iter->GetTx(); }$/;"	f	struct:CTxMemPoolModifiedEntry
GetTx	./txmempool.h	/^    const CTransaction& GetTx() const { return *this->tx; }$/;"	f	class:CTxMemPoolEntry
GetTxSize	./miner.h	/^    size_t GetTxSize() const { return iter->GetTxSize(); }$/;"	f	struct:CTxMemPoolModifiedEntry
GetTxSize	./txmempool.cpp	/^size_t CTxMemPoolEntry::GetTxSize() const$/;"	f	class:CTxMemPoolEntry
GetTxTime	./wallet/wallet.cpp	/^int64_t CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxWeight	./txmempool.h	/^    size_t GetTxWeight() const { return nTxWeight; }$/;"	f	class:CTxMemPoolEntry
GetTxnOutputType	./script/standard.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	./hash.h	/^    int GetType() const { return nType; }$/;"	f	class:CHashWriter
GetType	./script/bitcoinconsensus.cpp	/^    int GetType() const { return m_type; }$/;"	f	class:__anon81::TxInputStream
GetType	./streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CAutoFile
GetType	./streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CDataStream
GetType	./streams.h	/^    int GetType() const { return m_type; }$/;"	f	class:VectorReader
GetType	./streams.h	/^    int GetType() const { return nType; }$/;"	f	class:CBufferedFile
GetType	./streams.h	/^    int GetType() const { return nType; }$/;"	f	class:OverrideStream
GetType	./streams.h	/^    int GetType() const$/;"	f	class:CVectorWriter
GetType	./zmq/zmqabstractnotifier.h	/^    std::string GetType() const { return type; }$/;"	f	class:CZMQAbstractNotifier
GetURI	./httpserver.cpp	/^std::string HTTPRequest::GetURI() const$/;"	f	class:HTTPRequest
GetUTXOStats	./rpc/blockchain.cpp	/^static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)$/;"	f	file:
GetUint64	./uint256.h	/^    uint64_t GetUint64(int pos) const$/;"	f	class:base_blob
GetUndoChecked	./rpc/blockchain.cpp	/^static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)$/;"	f	file:
GetUndoPos	./chain.h	/^    FlatFilePos GetUndoPos() const {$/;"	f	class:CBlockIndex
GetUnrecognizedSections	./util/system.cpp	/^const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const$/;"	f	class:ArgsManager
GetUnsuitableSectionOnlyArgs	./util/system.cpp	/^const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const$/;"	f	class:ArgsManager
GetUseAddrmanOutgoing	./net.h	/^    bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };$/;"	f	class:CConnman
GetValue	./dbwrapper.h	/^    template<typename V> bool GetValue(V& value) {$/;"	f	class:CDBIterator
GetValue	./txdb.cpp	/^bool CCoinsViewDBCursor::GetValue(Coin &coin) const$/;"	f	class:CCoinsViewDBCursor
GetValueIn	./coins.cpp	/^CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
GetValueOut	./primitives/transaction.cpp	/^CAmount CTransaction::GetValueOut() const$/;"	f	class:CTransaction
GetValueSize	./dbwrapper.h	/^    unsigned int GetValueSize() {$/;"	f	class:CDBIterator
GetValueSize	./txdb.cpp	/^unsigned int CCoinsViewDBCursor::GetValueSize() const$/;"	f	class:CCoinsViewDBCursor
GetValues	./test/util_tests.cpp	/^    std::vector<std::string> GetValues(const ActionList& actions,$/;"	f	struct:ArgsMergeTestingSetup
GetVarint32	./leveldb/util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	./leveldb/util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	./leveldb/util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	./leveldb/util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	./leveldb/util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GetVersion	./hash.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CHashWriter
GetVersion	./script/bitcoinconsensus.cpp	/^    int GetVersion() const { return m_version; }$/;"	f	class:__anon81::TxInputStream
GetVersion	./serialize.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CSizeComputer
GetVersion	./streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	./streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CDataStream
GetVersion	./streams.h	/^    int GetVersion() const { return m_version; }$/;"	f	class:VectorReader
GetVersion	./streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CBufferedFile
GetVersion	./streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:OverrideStream
GetVersion	./streams.h	/^    int GetVersion() const$/;"	f	class:CVectorWriter
GetVersion	./wallet/wallet.h	/^    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }$/;"	f	class:final
GetVirtualTransactionInputSize	./policy/policy.cpp	/^int64_t GetVirtualTransactionInputSize(const CTxIn& txin, int64_t nSigOpCost, unsigned int bytes_per_sigop)$/;"	f
GetVirtualTransactionInputSize	./policy/policy.h	/^static inline int64_t GetVirtualTransactionInputSize(const CTxIn& tx)$/;"	f
GetVirtualTransactionSize	./policy/policy.cpp	/^int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost, unsigned int bytes_per_sigop)$/;"	f
GetVirtualTransactionSize	./policy/policy.cpp	/^int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop)$/;"	f
GetVirtualTransactionSize	./policy/policy.h	/^static inline int64_t GetVirtualTransactionSize(const CTransaction& tx)$/;"	f
GetVirtualTransactionSize	./policy/settings.h	/^static inline int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t sigop_cost)$/;"	f
GetVirtualTransactionSize	./policy/settings.h	/^static inline int64_t GetVirtualTransactionSize(int64_t weight, int64_t sigop_cost)$/;"	f
GetWallet	./wallet/wallet.cpp	/^std::shared_ptr<CWallet> GetWallet(const std::string& name)$/;"	f
GetWalletDir	./dummywallet.cpp	/^fs::path GetWalletDir()$/;"	f
GetWalletDir	./wallet/walletutil.cpp	/^fs::path GetWalletDir()$/;"	f
GetWalletEnv	./wallet/db.cpp	/^std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)$/;"	f
GetWalletForJSONRPCRequest	./wallet/rpcwallet.cpp	/^std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)$/;"	f
GetWalletNameFromJSONRPCRequest	./wallet/rpcwallet.cpp	/^bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name)$/;"	f
GetWalletTx	./wallet/wallet.cpp	/^const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const$/;"	f	class:CWallet
GetWallets	./dummywallet.cpp	/^std::vector<std::shared_ptr<CWallet>> GetWallets()$/;"	f
GetWallets	./wallet/wallet.cpp	/^std::vector<std::shared_ptr<CWallet>> GetWallets()$/;"	f
GetWarnings	./warnings.cpp	/^std::string GetWarnings(const std::string& strFor)$/;"	f
GetWitnessCommitmentIndex	./validation.cpp	/^static int GetWitnessCommitmentIndex(const CBlock& block)$/;"	f	file:
GetWitnessHash	./primitives/transaction.h	/^    const uint256& GetWitnessHash() const { return m_witness_hash; };$/;"	f	class:CTransaction
GetfLargeWorkForkFound	./warnings.cpp	/^bool GetfLargeWorkForkFound()$/;"	f
GetinfoRequestHandler	./bitcoin-cli.cpp	/^class GetinfoRequestHandler: public BaseRequestHandler$/;"	c	file:
GetnScore	./net.cpp	/^static int GetnScore(const CService& addr)$/;"	f	file:
GolombRiceDecode	./blockfilter.cpp	/^static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t P)$/;"	f	file:
GolombRiceEncode	./blockfilter.cpp	/^static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)$/;"	f	file:
Good	./addrman.h	/^    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
GoodBlock	./test/validation_block_tests.cpp	/^const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)$/;"	f
Good_	./addrman.cpp	/^void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime)$/;"	f	class:CAddrMan
GroupCoins	./wallet/test/coinselector_tests.cpp	/^inline std::vector<OutputGroup>& GroupCoins(const std::vector<CInputCoin>& coins)$/;"	f
GroupCoins	./wallet/test/coinselector_tests.cpp	/^inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)$/;"	f
GroupOutputs	./wallet/wallet.cpp	/^std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const {$/;"	f	class:CWallet
GuessType	./leveldb/db/dumpfile.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon27
GuessVerificationProgress	./validation.cpp	/^double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {$/;"	f
GuiMain	./qt/bitcoin.cpp	/^int GuiMain(int argc, char* argv[])$/;"	f
HAIR_SP_CP	./qt/bitcoinunits.h	/^#define HAIR_SP_CP /;"	d
HAIR_SP_HTML	./qt/bitcoinunits.h	/^#define HAIR_SP_HTML /;"	d
HAIR_SP_UTF8	./qt/bitcoinunits.h	/^#define HAIR_SP_UTF8 /;"	d
HALF_ESTIMATE	./policy/fees.h	/^    HALF_ESTIMATE,$/;"	m	class:FeeEstimateHorizon::FeeReason
HALF_SUCCESS_PCT	./policy/fees.h	/^    static constexpr double HALF_SUCCESS_PCT = .6;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
HARDENED	./script/descriptor.cpp	/^    HARDENED,$/;"	m	class:__anon75::DeriveType	file:
HARDENED	./test/descriptor_tests.cpp	/^constexpr int HARDENED = 2; \/\/ Derivation needs access to private keys$/;"	m	namespace:__anon56	file:
HARDENED_CPPFLAGS	./Makefile	/^HARDENED_CPPFLAGS =  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2$/;"	m
HARDENED_CXXFLAGS	./Makefile	/^HARDENED_CXXFLAGS =  -Wstack-protector -fstack-protector-all$/;"	m
HARDENED_LDFLAGS	./Makefile	/^HARDENED_LDFLAGS = $/;"	m
HASH	./leveldb/util/hash_test.cc	/^class HASH { };$/;"	c	namespace:leveldb	file:
HAVE_BOOST	./config/bitcoin-config.h	/^#define HAVE_BOOST /;"	d
HAVE_BOOST_CHRONO	./config/bitcoin-config.h	/^#define HAVE_BOOST_CHRONO /;"	d
HAVE_BOOST_FILESYSTEM	./config/bitcoin-config.h	/^#define HAVE_BOOST_FILESYSTEM /;"	d
HAVE_BOOST_SYSTEM	./config/bitcoin-config.h	/^#define HAVE_BOOST_SYSTEM /;"	d
HAVE_BOOST_THREAD	./config/bitcoin-config.h	/^#define HAVE_BOOST_THREAD /;"	d
HAVE_BOOST_UNIT_TEST_FRAMEWORK	./config/bitcoin-config.h	/^#define HAVE_BOOST_UNIT_TEST_FRAMEWORK /;"	d
HAVE_BUILTIN_EXPECT	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_BUILTIN_EXPECT /;"	d
HAVE_CONSENSUS_LIB	./config/bitcoin-config.h	/^#define HAVE_CONSENSUS_LIB /;"	d
HAVE_CXX11	./Makefile	/^HAVE_CXX11 = 1$/;"	m
HAVE_CXX11	./config/bitcoin-config.h	/^#define HAVE_CXX11 /;"	d
HAVE_DECL_BE16TOH	./compat/endian.h	/^#define HAVE_DECL_BE16TOH /;"	d
HAVE_DECL_BE16TOH	./config/bitcoin-config.h	/^#define HAVE_DECL_BE16TOH /;"	d
HAVE_DECL_BE32TOH	./compat/endian.h	/^#define HAVE_DECL_BE32TOH /;"	d
HAVE_DECL_BE32TOH	./config/bitcoin-config.h	/^#define HAVE_DECL_BE32TOH /;"	d
HAVE_DECL_BE64TOH	./compat/endian.h	/^#define HAVE_DECL_BE64TOH /;"	d
HAVE_DECL_BE64TOH	./config/bitcoin-config.h	/^#define HAVE_DECL_BE64TOH /;"	d
HAVE_DECL_BSWAP_16	./config/bitcoin-config.h	/^#define HAVE_DECL_BSWAP_16 /;"	d
HAVE_DECL_BSWAP_32	./config/bitcoin-config.h	/^#define HAVE_DECL_BSWAP_32 /;"	d
HAVE_DECL_BSWAP_64	./config/bitcoin-config.h	/^#define HAVE_DECL_BSWAP_64 /;"	d
HAVE_DECL_DAEMON	./config/bitcoin-config.h	/^#define HAVE_DECL_DAEMON /;"	d
HAVE_DECL_EVP_MD_CTX_NEW	./config/bitcoin-config.h	/^#define HAVE_DECL_EVP_MD_CTX_NEW /;"	d
HAVE_DECL_HTOBE16	./compat/endian.h	/^#define HAVE_DECL_HTOBE16 /;"	d
HAVE_DECL_HTOBE16	./config/bitcoin-config.h	/^#define HAVE_DECL_HTOBE16 /;"	d
HAVE_DECL_HTOBE32	./compat/endian.h	/^#define HAVE_DECL_HTOBE32 /;"	d
HAVE_DECL_HTOBE32	./config/bitcoin-config.h	/^#define HAVE_DECL_HTOBE32 /;"	d
HAVE_DECL_HTOBE64	./compat/endian.h	/^#define HAVE_DECL_HTOBE64 /;"	d
HAVE_DECL_HTOBE64	./config/bitcoin-config.h	/^#define HAVE_DECL_HTOBE64 /;"	d
HAVE_DECL_HTOLE16	./compat/endian.h	/^#define HAVE_DECL_HTOLE16 /;"	d
HAVE_DECL_HTOLE16	./config/bitcoin-config.h	/^#define HAVE_DECL_HTOLE16 /;"	d
HAVE_DECL_HTOLE32	./compat/endian.h	/^#define HAVE_DECL_HTOLE32 /;"	d
HAVE_DECL_HTOLE32	./config/bitcoin-config.h	/^#define HAVE_DECL_HTOLE32 /;"	d
HAVE_DECL_HTOLE64	./compat/endian.h	/^#define HAVE_DECL_HTOLE64 /;"	d
HAVE_DECL_HTOLE64	./config/bitcoin-config.h	/^#define HAVE_DECL_HTOLE64 /;"	d
HAVE_DECL_LE16TOH	./compat/endian.h	/^#define HAVE_DECL_LE16TOH /;"	d
HAVE_DECL_LE16TOH	./config/bitcoin-config.h	/^#define HAVE_DECL_LE16TOH /;"	d
HAVE_DECL_LE32TOH	./compat/endian.h	/^#define HAVE_DECL_LE32TOH /;"	d
HAVE_DECL_LE32TOH	./config/bitcoin-config.h	/^#define HAVE_DECL_LE32TOH /;"	d
HAVE_DECL_LE64TOH	./compat/endian.h	/^#define HAVE_DECL_LE64TOH /;"	d
HAVE_DECL_LE64TOH	./config/bitcoin-config.h	/^#define HAVE_DECL_LE64TOH /;"	d
HAVE_DECL_STRERROR_R	./config/bitcoin-config.h	/^#define HAVE_DECL_STRERROR_R /;"	d
HAVE_DECL_STRNLEN	./config/bitcoin-config.h	/^#define HAVE_DECL_STRNLEN /;"	d
HAVE_DECL___BUILTIN_CLZ	./config/bitcoin-config.h	/^#define HAVE_DECL___BUILTIN_CLZ /;"	d
HAVE_DECL___BUILTIN_CLZL	./config/bitcoin-config.h	/^#define HAVE_DECL___BUILTIN_CLZL /;"	d
HAVE_DECL___BUILTIN_CLZLL	./config/bitcoin-config.h	/^#define HAVE_DECL___BUILTIN_CLZLL /;"	d
HAVE_DLFCN_H	./config/bitcoin-config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_DLFCN_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_DLFCN_H	./univalue/univalue-config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_GETENTROPY_RAND	./config/bitcoin-config.h	/^#define HAVE_GETENTROPY_RAND /;"	d
HAVE_INTTYPES_H	./config/bitcoin-config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	./univalue/univalue-config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_LIBCRYPTO	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_LIBCRYPTO /;"	d
HAVE_MEMORY_H	./config/bitcoin-config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	./univalue/univalue-config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_PTHREAD	./config/bitcoin-config.h	/^#define HAVE_PTHREAD /;"	d
HAVE_PTHREAD_PRIO_INHERIT	./config/bitcoin-config.h	/^#define HAVE_PTHREAD_PRIO_INHERIT /;"	d
HAVE_STDINT_H	./config/bitcoin-config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	./univalue/univalue-config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDIO_H	./config/bitcoin-config.h	/^#define HAVE_STDIO_H /;"	d
HAVE_STDLIB_H	./config/bitcoin-config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	./univalue/univalue-config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRERROR_R	./config/bitcoin-config.h	/^#define HAVE_STRERROR_R /;"	d
HAVE_STRINGS_H	./config/bitcoin-config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	./univalue/univalue-config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRING_H	./config/bitcoin-config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	./univalue/univalue-config.h	/^#define HAVE_STRING_H /;"	d
HAVE_SYS_SELECT_H	./config/bitcoin-config.h	/^#define HAVE_SYS_SELECT_H /;"	d
HAVE_SYS_STAT_H	./config/bitcoin-config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	./univalue/univalue-config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TYPES_H	./config/bitcoin-config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	./univalue/univalue-config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_THREAD_LOCAL	./config/bitcoin-config.h	/^#define HAVE_THREAD_LOCAL /;"	d
HAVE_UNISTD_H	./config/bitcoin-config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	./univalue/univalue-config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_VISIBILITY_ATTRIBUTE	./config/bitcoin-config.h	/^#define HAVE_VISIBILITY_ATTRIBUTE /;"	d
HAVE_WORKING_BOOST_SLEEP_FOR	./config/bitcoin-config.h	/^#define HAVE_WORKING_BOOST_SLEEP_FOR /;"	d
HAVE___INT128	./secp256k1/src/libsecp256k1-config.h	/^#define HAVE___INT128 /;"	d
HEAD	./httpserver.h	/^        HEAD,$/;"	e	enum:HTTPRequest::RequestMethod
HEADERS	./Makefile	/^HEADERS = $(include_HEADERS)$/;"	m
HEADERS	./protocol.cpp	/^const char *HEADERS="headers";$/;"	m	namespace:NetMsgType	file:
HEADERS	./secp256k1/Makefile	/^HEADERS = $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HEADERS	./univalue/Makefile	/^HEADERS = $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HEADERS_DOWNLOAD_TIMEOUT_BASE	./net_processing.cpp	/^static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; \/\/ 15 minutes$/;"	v	file:
HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER	./net_processing.cpp	/^static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; \/\/ 1ms\/header$/;"	v	file:
HEADER_END	./wallet/db.cpp	/^static const char *HEADER_END = "HEADER=END";$/;"	v	file:
HEADER_HEIGHT_DELTA_SYNC	./qt/modaloverlay.h	/^static constexpr int HEADER_HEIGHT_DELTA_SYNC = 24;$/;"	v
HEADER_SIZE	./protocol.h	/^    static constexpr size_t HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE;$/;"	m	class:CMessageHeader
HEX	./rest.cpp	/^    HEX,$/;"	m	class:RetFormat	file:
HEXDUMP	./Makefile	/^HEXDUMP = \/usr\/bin\/hexdump$/;"	m
HISTORICAL_BLOCK_AGE	./net_processing.cpp	/^static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;$/;"	v	file:
HOSTUNREACHABLE	./netbase.cpp	/^    HOSTUNREACHABLE = 0x04,  \/\/!< Network unreachable$/;"	e	enum:uint8_t	file:
HTML_HACK_SP	./qt/bitcoinunits.h	/^#define HTML_HACK_SP /;"	d
HTTPBindAddresses	./httpserver.cpp	/^static bool HTTPBindAddresses(struct evhttp* http)$/;"	f	file:
HTTPClosure	./httpserver.h	/^class HTTPClosure$/;"	c
HTTPEvent	./httpserver.cpp	/^HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):$/;"	f	class:HTTPEvent
HTTPEvent	./httpserver.h	/^class HTTPEvent$/;"	c
HTTPPathHandler	./httpserver.cpp	/^    HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):$/;"	f	struct:HTTPPathHandler
HTTPPathHandler	./httpserver.cpp	/^struct HTTPPathHandler$/;"	s	file:
HTTPRPCTimer	./httprpc.cpp	/^    HTTPRPCTimer(struct event_base* eventBase, std::function<void()>& func, int64_t millis) :$/;"	f	class:HTTPRPCTimer
HTTPRPCTimer	./httprpc.cpp	/^class HTTPRPCTimer : public RPCTimerBase$/;"	c	file:
HTTPRPCTimerInterface	./httprpc.cpp	/^    explicit HTTPRPCTimerInterface(struct event_base* _base) : base(_base)$/;"	f	class:HTTPRPCTimerInterface
HTTPRPCTimerInterface	./httprpc.cpp	/^class HTTPRPCTimerInterface : public RPCTimerInterface$/;"	c	file:
HTTPReply	./bitcoin-cli.cpp	/^    HTTPReply(): status(0), error(-1) {}$/;"	f	struct:HTTPReply
HTTPReply	./bitcoin-cli.cpp	/^struct HTTPReply$/;"	s	file:
HTTPReq_JSONRPC	./httprpc.cpp	/^static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)$/;"	f	file:
HTTPRequest	./httpserver.cpp	/^HTTPRequest::HTTPRequest(struct evhttp_request* _req) : req(_req),$/;"	f	class:HTTPRequest
HTTPRequest	./httpserver.h	/^class HTTPRequest$/;"	c
HTTPRequestHandler	./httpserver.h	/^typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;$/;"	t
HTTPStatusCode	./rpc/protocol.h	/^enum HTTPStatusCode$/;"	g
HTTPWorkItem	./httpserver.cpp	/^    HTTPWorkItem(std::unique_ptr<HTTPRequest> _req, const std::string &_path, const HTTPRequestHandler& _func):$/;"	f	class:final
HTTPWorkQueueRun	./httpserver.cpp	/^static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)$/;"	f	file:
HTTP_BAD_METHOD	./rpc/protocol.h	/^    HTTP_BAD_METHOD            = 405,$/;"	e	enum:HTTPStatusCode
HTTP_BAD_REQUEST	./rpc/protocol.h	/^    HTTP_BAD_REQUEST           = 400,$/;"	e	enum:HTTPStatusCode
HTTP_FORBIDDEN	./rpc/protocol.h	/^    HTTP_FORBIDDEN             = 403,$/;"	e	enum:HTTPStatusCode
HTTP_INTERNAL_SERVER_ERROR	./rpc/protocol.h	/^    HTTP_INTERNAL_SERVER_ERROR = 500,$/;"	e	enum:HTTPStatusCode
HTTP_NOT_FOUND	./rpc/protocol.h	/^    HTTP_NOT_FOUND             = 404,$/;"	e	enum:HTTPStatusCode
HTTP_OK	./rpc/protocol.h	/^    HTTP_OK                    = 200,$/;"	e	enum:HTTPStatusCode
HTTP_SERVICE_UNAVAILABLE	./rpc/protocol.h	/^    HTTP_SERVICE_UNAVAILABLE   = 503,$/;"	e	enum:HTTPStatusCode
HTTP_UNAUTHORIZED	./rpc/protocol.h	/^    HTTP_UNAUTHORIZED          = 401,$/;"	e	enum:HTTPStatusCode
HalfL	./test/arith_uint256_tests.cpp	/^const arith_uint256 HalfL = (OneL << 255);$/;"	v
Handle	./leveldb/include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleCallback	./qt/test/apptests.h	/^    struct HandleCallback$/;"	s	class:AppTests
HandleDumpCommand	./leveldb/db/leveldbutil.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon31
HandleError	./dbwrapper.cpp	/^void HandleError(const leveldb::Status& status)$/;"	f	namespace:dbwrapper_private
HandleSIGHUP	./init.cpp	/^static void HandleSIGHUP(int)$/;"	f	file:
HandleSIGTERM	./init.cpp	/^static void HandleSIGTERM(int)$/;"	f	file:
HandleTable	./leveldb/util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon4::HandleTable
HandleTable	./leveldb/util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon4	file:
Handler	./interfaces/handler.h	/^class Handler$/;"	c	namespace:interfaces
Handler	./leveldb/include/leveldb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
HandlerImpl	./interfaces/handler.cpp	/^    explicit HandlerImpl(boost::signals2::connection connection) : m_connection(std::move(connection)) {}$/;"	f	class:interfaces::__anon131::HandlerImpl
HandlerImpl	./interfaces/handler.cpp	/^class HandlerImpl : public Handler$/;"	c	namespace:interfaces::__anon131	file:
Harness	./leveldb/table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	./leveldb/table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
HasAcceleratedCRC32C	./leveldb/port/port_posix.cc	/^bool HasAcceleratedCRC32C() {$/;"	f	namespace:leveldb::port
HasAcceleratedCRC32C	./leveldb/port/port_win.cc	/^bool HasAcceleratedCRC32C() {$/;"	f	namespace:leveldb::port
HasAllDesirableServiceFlags	./protocol.h	/^static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {$/;"	f
HasNoInputsOf	./txmempool.cpp	/^bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const$/;"	f	class:CTxMemPool
HasReason	./test/miner_tests.cpp	/^    explicit HasReason(const std::string& reason) : m_reason(reason) {}$/;"	f	class:HasReason
HasReason	./test/miner_tests.cpp	/^class HasReason {$/;"	c	file:
HasSelected	./wallet/coincontrol.h	/^    bool HasSelected() const$/;"	f	class:CCoinControl
HasValidOps	./script/script.cpp	/^bool CScript::HasValidOps() const$/;"	f	class:CScript
HasWalletSpend	./wallet/wallet.cpp	/^bool CWallet::HasWalletSpend(const uint256& txid) const$/;"	f	class:CWallet
HasWallets	./wallet/wallet.cpp	/^bool HasWallets()$/;"	f
HasWitness	./primitives/transaction.h	/^    bool HasWitness() const$/;"	f	class:CTransaction
HasWitness	./primitives/transaction.h	/^    bool HasWitness() const$/;"	f	struct:CMutableTransaction
Hash	./bloom.cpp	/^inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const$/;"	f	class:CBloomFilter
Hash	./hash.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	./hash.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash	./leveldb/util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
Hash160	./hash.h	/^inline uint160 Hash160(const T1 pbegin, const T1 pend)$/;"	f
Hash160	./hash.h	/^inline uint160 Hash160(const prevector<N, unsigned char>& vch)$/;"	f
Hash160	./hash.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HashNumbers	./leveldb/db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HashSlice	./leveldb/util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache	file:
HashToRange	./blockfilter.cpp	/^uint64_t GCSFilter::HashToRange(const Element& element) const$/;"	f	class:GCSFilter
HaveCScript	./keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveCoin	./coins.cpp	/^bool CCoinsView::HaveCoin(const COutPoint &outpoint) const$/;"	f	class:CCoinsView
HaveCoin	./coins.cpp	/^bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->HaveCoin(outpoint); }$/;"	f	class:CCoinsViewBacked
HaveCoin	./coins.cpp	/^bool CCoinsViewCache::HaveCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
HaveCoin	./txdb.cpp	/^bool CCoinsViewDB::HaveCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewDB
HaveCoinInCache	./coins.cpp	/^bool CCoinsViewCache::HaveCoinInCache(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
HaveInputs	./coins.cpp	/^bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
HaveKey	./keystore.cpp	/^bool CBasicKeyStore::HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveKey	./keystore.cpp	/^bool HaveKey(const CKeyStore& store, const CKey& key)$/;"	f
HaveKey	./wallet/crypter.cpp	/^bool CCryptoKeyStore::HaveKey(const CKeyID &address) const$/;"	f	class:CCryptoKeyStore
HaveKeys	./script/ismine.cpp	/^bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f	namespace:__anon85
HaveNameProxy	./netbase.cpp	/^bool HaveNameProxy() {$/;"	f
HaveTxsDownloaded	./chain.h	/^    bool HaveTxsDownloaded() const { return nChainTx != 0; }$/;"	f	class:CBlockIndex
HaveWatchOnly	./keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly() const$/;"	f	class:CBasicKeyStore
HaveWatchOnly	./keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const$/;"	f	class:CBasicKeyStore
HeapProfile	./leveldb/db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Height	./chain.h	/^    int Height() const {$/;"	f	class:CChain
Height	./test/setup_common.h	/^    TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
HelpExampleCli	./rpc/util.cpp	/^std::string HelpExampleCli(const std::string& methodname, const std::string& args)$/;"	f
HelpExampleRpc	./rpc/util.cpp	/^std::string HelpExampleRpc(const std::string& methodname, const std::string& args)$/;"	f
HelpMessageDialog	./qt/utilitydialog.cpp	/^HelpMessageDialog::HelpMessageDialog(interfaces::Node& node, QWidget *parent, bool about) :$/;"	f	class:HelpMessageDialog
HelpMessageDialog	./qt/utilitydialog.h	/^class HelpMessageDialog : public QDialog$/;"	c
HelpMessageGroup	./util/system.cpp	/^std::string HelpMessageGroup(const std::string &message) {$/;"	f
HelpMessageOpt	./util/system.cpp	/^std::string HelpMessageOpt(const std::string &option, const std::string &message) {$/;"	f
HelpRequested	./util/system.cpp	/^bool HelpRequested(const ArgsManager& args)$/;"	f
HelpRequiringPassphrase	./wallet/rpcwallet.cpp	/^std::string HelpRequiringPassphrase(const CWallet* pwallet)$/;"	f
HexDigit	./util/strencodings.cpp	/^signed char HexDigit(char c)$/;"	f
HexStr	./util/strencodings.h	/^inline std::string HexStr(const T& vch)$/;"	f
HexStr	./util/strencodings.h	/^std::string HexStr(const T itbegin, const T itend)$/;"	f
HexToPubKey	./rpc/util.cpp	/^CPubKey HexToPubKey(const std::string& hex_in)$/;"	f
Hidden	./qt/addresstablemodel.cpp	/^        Hidden \/* QSortFilterProxyModel will filter these out *\/$/;"	e	enum:AddressTableEntry::Type	file:
HideTrayIcon	./qt/optionsmodel.h	/^        HideTrayIcon,           \/\/ bool$/;"	e	enum:OptionsModel::OptionID
HidingSigningProvider	./script/sign.h	/^    HidingSigningProvider(const SigningProvider* provider, bool hide_secret, bool hide_origin) : m_hide_secret(hide_secret), m_hide_origin(hide_origin), m_provider(provider) {}$/;"	f	class:HidingSigningProvider
HidingSigningProvider	./script/sign.h	/^class HidingSigningProvider : public SigningProvider$/;"	c
HighestTargetTracked	./policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const$/;"	f	class:CBlockPolicyEstimator
Histogram	./leveldb/util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	./leveldb/util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
HistoricalBlockSpan	./policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const$/;"	f	class:CBlockPolicyEstimator
HtmlEscape	./qt/guiutil.cpp	/^QString HtmlEscape(const QString& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
HtmlEscape	./qt/guiutil.cpp	/^QString HtmlEscape(const std::string& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
I64FORMAT	./secp256k1/src/util.h	/^# define I64FORMAT /;"	d
I64uFORMAT	./secp256k1/src/util.h	/^# define I64uFORMAT /;"	d
ICON_ERROR	./ui_interface.h	/^        ICON_ERROR          = (1U << 1),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_INFORMATION	./ui_interface.h	/^        ICON_INFORMATION    = 0,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_MAPPING	./qt/rpcconsole.cpp	/^} ICON_MAPPING[] = {$/;"	v	typeref:struct:__anon68
ICON_MASK	./ui_interface.h	/^        ICON_MASK = (ICON_INFORMATION | ICON_WARNING | ICON_ERROR),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_WARNING	./ui_interface.h	/^        ICON_WARNING        = (1U << 0),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ID_BLOCKCHAININFO	./bitcoin-cli.cpp	/^    const int ID_BLOCKCHAININFO = 1;$/;"	m	class:GetinfoRequestHandler	file:
ID_NETWORKINFO	./bitcoin-cli.cpp	/^    const int ID_NETWORKINFO = 0;$/;"	m	class:GetinfoRequestHandler	file:
ID_WALLETINFO	./bitcoin-cli.cpp	/^    const int ID_WALLETINFO = 2;$/;"	m	class:GetinfoRequestHandler	file:
IF_NEEDED	./validation.cpp	/^    IF_NEEDED,$/;"	m	class:FlushStateMode	file:
IKey	./leveldb/db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
IMAGEMAGICK_CONVERT	./Makefile	/^IMAGEMAGICK_CONVERT = $/;"	m
IMMATURE_CREDIT	./wallet/wallet.h	/^    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };$/;"	e	enum:CWalletTx::AmountType
INBOUND_PEER_TX_DELAY	./net_processing.cpp	/^static constexpr int64_t INBOUND_PEER_TX_DELAY = 2 * 1000000;$/;"	v	file:
INF_FEERATE	./policy/fees.cpp	/^static constexpr double INF_FEERATE = 1e99;$/;"	v	file:
INIT0	./crypto/sha256_shani.cpp	/^const __m128i INIT0 = _mm_set_epi64x(0x6a09e667bb67ae85ull, 0x510e527f9b05688cull);$/;"	m	namespace:__anon43	file:
INIT1	./crypto/sha256_shani.cpp	/^const __m128i INIT1 = _mm_set_epi64x(0x3c6ef372a54ff53aull, 0x1f83d9ab5be0cd19ull);$/;"	m	namespace:__anon43	file:
INITIAL_TRAFFIC_GRAPH_MINS	./qt/rpcconsole.cpp	/^const int INITIAL_TRAFFIC_GRAPH_MINS = 30;$/;"	v
INIT_PROTO_VERSION	./version.h	/^static const int INIT_PROTO_VERSION = 209;$/;"	v
INSTALL	./Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	./secp256k1/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	./univalue/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALLNAMETOOL	./Makefile	/^INSTALLNAMETOOL = $/;"	m
INSTALL_DATA	./Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	./secp256k1/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	./univalue/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	./Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	./secp256k1/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	./univalue/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	./Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	./secp256k1/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	./univalue/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	./Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	./secp256k1/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	./univalue/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	./Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	./secp256k1/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	./univalue/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INV	./protocol.cpp	/^const char *INV="inv";$/;"	m	namespace:NetMsgType	file:
INVALID	./blockfilter.h	/^    INVALID = 255,$/;"	m	class:BlockFilterType
INVALID	./script/ismine.cpp	/^    INVALID = 3,    \/\/!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)$/;"	m	class:__anon85::IsMineResult	file:
INVALID_ADDRESS	./qt/addresstablemodel.h	/^        INVALID_ADDRESS,        \/**< Unparseable address *\/$/;"	e	enum:AddressTableModel::EditStatus
INVALID_ADDRESS_OR_KEY	./wallet/feebumper.h	/^    INVALID_ADDRESS_OR_KEY,$/;"	m	class:feebumper::Result
INVALID_CB_NO_BAN_VERSION	./version.h	/^static const int INVALID_CB_NO_BAN_VERSION = 70015;$/;"	v
INVALID_PARAMETER	./wallet/feebumper.h	/^    INVALID_PARAMETER,$/;"	m	class:feebumper::Result
INVALID_PSBT	./util/error.h	/^    INVALID_PSBT,$/;"	m	class:TransactionError
INVALID_REQUEST	./wallet/feebumper.h	/^    INVALID_REQUEST,$/;"	m	class:feebumper::Result
INVALID_SOCKET	./compat.h	/^#define INVALID_SOCKET /;"	d
INVENTORY_BROADCAST_INTERVAL	./net_processing.cpp	/^static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;$/;"	v	file:
INVENTORY_BROADCAST_MAX	./net_processing.cpp	/^static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;$/;"	v	file:
IOError	./leveldb/include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	./leveldb/util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon8
IPV4	./netbase.cpp	/^    IPV4 = 0x01,$/;"	e	enum:uint8_t	file:
IPV6	./netbase.cpp	/^    IPV6 = 0x04,$/;"	e	enum:uint8_t	file:
ISMINE_ALL	./script/ismine.h	/^    ISMINE_ALL        = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE,$/;"	e	enum:isminetype
ISMINE_ENUM_ELEMENTS	./script/ismine.h	/^    ISMINE_ENUM_ELEMENTS,$/;"	e	enum:isminetype
ISMINE_NO	./script/ismine.h	/^    ISMINE_NO         = 0,$/;"	e	enum:isminetype
ISMINE_SPENDABLE	./script/ismine.h	/^    ISMINE_SPENDABLE  = 1 << 1,$/;"	e	enum:isminetype
ISMINE_WATCH_ONLY	./script/ismine.h	/^    ISMINE_WATCH_ONLY = 1 << 0,$/;"	e	enum:isminetype
IS_TRIVIALLY_CONSTRUCTIBLE	./bench/prevector.cpp	/^#define IS_TRIVIALLY_CONSTRUCTIBLE /;"	d	file:
Immature	./qt/transactionrecord.h	/^        Immature,           \/**< Mined but waiting for maturity *\/$/;"	e	enum:TransactionStatus::Status
ImplicitlyLearnRelatedKeyScripts	./keystore.cpp	/^void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)$/;"	f	class:CBasicKeyStore
ImportData	./wallet/rpcdump.cpp	/^struct ImportData$/;"	s	file:
InMemoryEnv	./leveldb/helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon35::InMemoryEnv
InMemoryEnv	./leveldb/helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon35	file:
InMempool	./wallet/wallet.cpp	/^bool CWalletTx::InMempool() const$/;"	f	class:CWalletTx
InactivityCheck	./net.cpp	/^void CConnman::InactivityCheck(CNode *pnode)$/;"	f	class:CConnman
Inc	./crypto/sha256_avx2.cpp	/^__m256i inline Inc(__m256i& x, __m256i y) { x = Add(x, y); return x; }$/;"	f	namespace:sha256d64_avx2::__anon37
Inc	./crypto/sha256_avx2.cpp	/^__m256i inline Inc(__m256i& x, __m256i y, __m256i z) { x = Add(x, y, z); return x; }$/;"	f	namespace:sha256d64_avx2::__anon37
Inc	./crypto/sha256_avx2.cpp	/^__m256i inline Inc(__m256i& x, __m256i y, __m256i z, __m256i w) { x = Add(x, y, z, w); return x; }$/;"	f	namespace:sha256d64_avx2::__anon37
Inc	./crypto/sha256_sse41.cpp	/^__m128i inline Inc(__m128i& x, __m128i y) { x = Add(x, y); return x; }$/;"	f	namespace:sha256d64_sse41::__anon41
Inc	./crypto/sha256_sse41.cpp	/^__m128i inline Inc(__m128i& x, __m128i y, __m128i z) { x = Add(x, y, z); return x; }$/;"	f	namespace:sha256d64_sse41::__anon41
Inc	./crypto/sha256_sse41.cpp	/^__m128i inline Inc(__m128i& x, __m128i y, __m128i z, __m128i w) { x = Add(x, y, z, w); return x; }$/;"	f	namespace:sha256d64_sse41::__anon41
IncOrderPosNext	./wallet/wallet.cpp	/^int64_t CWallet::IncOrderPosNext(WalletBatch* batch)$/;"	f	class:CWallet
Increment	./leveldb/db/db_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon23::AtomicCounter
Increment	./leveldb/table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementBy	./leveldb/db/db_test.cc	/^  void IncrementBy(int count) {$/;"	f	class:leveldb::__anon23::AtomicCounter
IncrementByte	./leveldb/db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
IncrementExtraNonce	./miner.cpp	/^void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)$/;"	f
IncrementUpdateCounter	./wallet/db.cpp	/^void BerkeleyDatabase::IncrementUpdateCounter()$/;"	f	class:BerkeleyDatabase
IncrementalDynamicUsage	./memusage.h	/^static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	./memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	./memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
InferDescriptor	./script/descriptor.cpp	/^std::unique_ptr<Descriptor> InferDescriptor(const CScript& script, const SigningProvider& provider)$/;"	f
InferPubkey	./script/descriptor.cpp	/^std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)$/;"	f	namespace:__anon75
InferScript	./script/descriptor.cpp	/^std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptContext ctx, const SigningProvider& provider)$/;"	f	namespace:__anon75
InfoLogFileName	./leveldb/db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Information	./qt/notificator.h	/^        Information,    \/**< Informational message *\/$/;"	e	enum:Notificator::Class
Init	./index/base.cpp	/^bool BaseIndex::Init()$/;"	f	class:BaseIndex
Init	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::Init()$/;"	f	class:BlockFilterIndex
Init	./index/txindex.cpp	/^bool TxIndex::Init()$/;"	f	class:TxIndex
Init	./leveldb/table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
Init	./net.h	/^    void Init(const Options& connOptions) {$/;"	f	class:CConnman
Init	./protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	./qt/optionsmodel.cpp	/^void OptionsModel::Init(bool resetSettings)$/;"	f	class:OptionsModel
Init	./streams.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
Init	./wallet/wallet.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	./wallet/wallet.h	/^    void Init(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
InitBinds	./net.cpp	/^bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds) {$/;"	f	class:CConnman
InitBlockFilterIndex	./index/blockfilterindex.cpp	/^bool InitBlockFilterIndex(BlockFilterType filter_type,$/;"	f
InitData	./blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {$/;"	f	class:PartiallyDownloadedBlock
InitDataBlock	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
InitDefaultEnv	./leveldb/util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
InitDefaultEnv	./leveldb/util/env_win.cc	/^static void InitDefaultEnv() { default_env = new Win32::Win32Env(); }$/;"	f	namespace:leveldb
InitError	./ui_interface.cpp	/^bool InitError(const std::string& str)$/;"	f
InitHTTPAllowList	./httpserver.cpp	/^static bool InitHTTPAllowList()$/;"	f	file:
InitHTTPServer	./httpserver.cpp	/^bool InitHTTPServer()$/;"	f
InitHardwareRand	./random.cpp	/^static void InitHardwareRand() {}$/;"	f	file:
InitHardwareRand	./random.cpp	/^static void InitHardwareRand()$/;"	f	file:
InitInterfaces	./init.h	/^struct InitInterfaces$/;"	s
InitLogging	./init.cpp	/^void InitLogging()$/;"	f
InitMessage	./qt/splashscreen.cpp	/^static void InitMessage(SplashScreen *splash, const std::string &message)$/;"	f	file:
InitMessage	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;$/;"	m	struct:UISignals	file:
InitMessage	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(InitMessage);$/;"	v
InitMessage	./ui_interface.cpp	/^void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }$/;"	f	class:CClientUIInterface
InitModule	./leveldb/util/comparator.cc	/^static void InitModule() {$/;"	f	namespace:leveldb
InitOnce	./leveldb/port/port_posix.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	./leveldb/port/port_win.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	./leveldb/port/port_win.h	/^    void InitOnce(void (*initializer)()) {$/;"	f	class:leveldb::port::OnceType
InitParameterInteraction	./init.cpp	/^void InitParameterInteraction()$/;"	f
InitRPCAuthentication	./httprpc.cpp	/^static bool InitRPCAuthentication()$/;"	f	file:
InitSanityCheck	./init.cpp	/^static bool InitSanityCheck()$/;"	f	file:
InitScriptExecutionCache	./validation.cpp	/^void InitScriptExecutionCache() {$/;"	f
InitSignatureCache	./script/sigcache.cpp	/^void InitSignatureCache()$/;"	f
InitTypeCrc	./leveldb/db/log_writer.cc	/^static void InitTypeCrc(uint32_t* type_crc) {$/;"	f	namespace:leveldb::log
InitWalletDirTestingSetup	./wallet/test/init_test_fixture.cpp	/^InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainName): BasicTestingSetup(chainName)$/;"	f	class:InitWalletDirTestingSetup
InitWalletDirTestingSetup	./wallet/test/init_test_fixture.h	/^struct InitWalletDirTestingSetup: public BasicTestingSetup {$/;"	s
InitWarning	./ui_interface.cpp	/^void InitWarning(const std::string& str)$/;"	f
Initialize	./crypto/ripemd160.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon42::ripemd160
Initialize	./crypto/sha1.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon38::sha1
Initialize	./crypto/sha256.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon40::sha256
Initialize	./crypto/sha512.cpp	/^void inline Initialize(uint64_t* s)$/;"	f	namespace:__anon39::sha512
Initialize	./zmq/zmqnotificationinterface.cpp	/^bool CZMQNotificationInterface::Initialize()$/;"	f	class:CZMQNotificationInterface
Initialize	./zmq/zmqpublishnotifier.cpp	/^bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)$/;"	f	class:CZMQAbstractPublishNotifier
InitializeNode	./net_processing.cpp	/^void PeerLogicValidation::InitializeNode(CNode *pnode) {$/;"	f	class:PeerLogicValidation
InsecureRand256	./test/setup_common.h	/^static inline uint256 InsecureRand256() { return g_insecure_rand_ctx.rand256(); }$/;"	f
InsecureRand32	./test/setup_common.h	/^static inline uint32_t InsecureRand32() { return g_insecure_rand_ctx.rand32(); }$/;"	f
InsecureRandBits	./test/setup_common.h	/^static inline uint64_t InsecureRandBits(int bits) { return g_insecure_rand_ctx.randbits(bits); }$/;"	f
InsecureRandBool	./test/setup_common.h	/^static inline bool InsecureRandBool() { return g_insecure_rand_ctx.randbool(); }$/;"	f
InsecureRandRange	./test/setup_common.h	/^static inline uint64_t InsecureRandRange(uint64_t range) { return g_insecure_rand_ctx.randrange(range); }$/;"	f
Insert	./leveldb/db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	./leveldb/util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon4::HandleTable
Insert	./leveldb/util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Insert	./leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon4::LRUCache
Insert	./leveldb/util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
Insert	./leveldb/util/env_posix.cc	/^  bool Insert(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixLockTable
Insert	./wallet/coinselection.cpp	/^void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {$/;"	f	class:OutputGroup
InsertAndReturnHandle	./leveldb/util/cache_test.cc	/^  Cache::Handle* InsertAndReturnHandle(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
InsertBlockIndex	./validation.cpp	/^CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)$/;"	f	class:CChainState
InsertCoinsMapEntry	./test/coins_tests.cpp	/^static size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)$/;"	f	file:
InsertInto	./leveldb/db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	./leveldb/db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
Instance	./support/lockedpool.h	/^    static LockedPoolManager& Instance()$/;"	f	class:LockedPoolManager
InternalFilterPolicy	./leveldb/db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	./leveldb/db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	./leveldb/table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	./leveldb/db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	./leveldb/db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	./leveldb/db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	./leveldb/db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	./leveldb/db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	./leveldb/db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InterpretBool	./util/system.cpp	/^static bool InterpretBool(const std::string& strValue)$/;"	f	file:
InterpretNegatedOption	./util/system.cpp	/^static bool InterpretNegatedOption(std::string& key, std::string& val)$/;"	f	file:
Interrupt	./httpserver.cpp	/^    void Interrupt()$/;"	f	class:WorkQueue
Interrupt	./index/base.cpp	/^void BaseIndex::Interrupt()$/;"	f	class:BaseIndex
Interrupt	./init.cpp	/^void Interrupt()$/;"	f
Interrupt	./net.cpp	/^void CConnman::Interrupt()$/;"	f	class:CConnman
InterruptHTTPRPC	./httprpc.cpp	/^void InterruptHTTPRPC()$/;"	f
InterruptHTTPServer	./httpserver.cpp	/^void InterruptHTTPServer()$/;"	f
InterruptMapPort	./net.cpp	/^void InterruptMapPort()$/;"	f
InterruptREST	./rest.cpp	/^void InterruptREST()$/;"	f
InterruptRPC	./rpc/server.cpp	/^void InterruptRPC()$/;"	f
InterruptSocks5	./netbase.cpp	/^void InterruptSocks5(bool interrupt)$/;"	f
InterruptTorControl	./torcontrol.cpp	/^void InterruptTorControl()$/;"	f
InterruptibleRecv	./netbase.cpp	/^static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)$/;"	f	file:
IntrRecvError	./netbase.cpp	/^enum class IntrRecvError {$/;"	c	file:
Intro	./qt/intro.cpp	/^Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_size) :$/;"	f	class:Intro
Intro	./qt/intro.h	/^class Intro : public QDialog$/;"	c
InvLockOrders	./sync.cpp	/^typedef std::set<std::pair<void*, void*> > InvLockOrders;$/;"	t	file:
InvShiftRows	./crypto/ctaes/ctaes.c	/^static void InvShiftRows(AES_state* s) {$/;"	f	file:
Invalid	./consensus/validation.h	/^    bool Invalid(ValidationInvalidReason reasonIn, bool ret = false,$/;"	f	class:CValidationState
InvalidAddress	./qt/walletmodel.h	/^        InvalidAddress,$/;"	e	enum:WalletModel::StatusCode
InvalidAmount	./qt/walletmodel.h	/^        InvalidAmount,$/;"	e	enum:WalletModel::StatusCode
InvalidArgument	./leveldb/include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
InvalidBlockFound	./validation.cpp	/^void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {$/;"	f	class:CChainState
Invalidate	./pubkey.h	/^    void Invalidate()$/;"	f	class:CPubKey
InvalidateBlock	./validation.cpp	/^bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)$/;"	f	class:CChainState
InvalidateBlock	./validation.cpp	/^bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {$/;"	f
InvertLowestOne	./chain.cpp	/^int static inline InvertLowestOne(int n) { return n & (n - 1); }$/;"	f	file:
Is	./leveldb/util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsAbortingRescan	./wallet/wallet.h	/^    bool IsAbortingRescan() { return fAbortRescan; }$/;"	f	class:final
IsAllFromMe	./wallet/wallet.cpp	/^bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
IsArgKnown	./util/system.cpp	/^bool ArgsManager::IsArgKnown(const std::string& key) const$/;"	f	class:ArgsManager
IsArgNegated	./util/system.cpp	/^bool ArgsManager::IsArgNegated(const std::string& strArg) const$/;"	f	class:ArgsManager
IsArgSet	./util/system.cpp	/^bool ArgsManager::IsArgSet(const std::string& strArg) const$/;"	f	class:ArgsManager
IsBanned	./banman.cpp	/^bool BanMan::IsBanned(CNetAddr net_addr)$/;"	f	class:BanMan
IsBanned	./banman.cpp	/^bool BanMan::IsBanned(CSubNet sub_net)$/;"	f	class:BanMan
IsBannedLevel	./banman.cpp	/^int BanMan::IsBannedLevel(CNetAddr net_addr)$/;"	f	class:BanMan
IsBaseLevelForKey	./leveldb/db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsBerkeleyBtree	./wallet/walletutil.cpp	/^static bool IsBerkeleyBtree(const fs::path& path)$/;"	f	file:
IsBindAny	./netaddress.cpp	/^bool CNetAddr::IsBindAny() const$/;"	f	class:CNetAddr
IsBlockPruned	./validation.h	/^inline bool IsBlockPruned(const CBlockIndex* pblockindex)$/;"	f
IsBlockReason	./consensus/validation.h	/^inline bool IsBlockReason(ValidationInvalidReason r)$/;"	f
IsChange	./wallet/wallet.cpp	/^bool CWallet::IsChange(const CScript& script) const$/;"	f	class:CWallet
IsChange	./wallet/wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	./coins.h	/^    bool IsCoinBase() const {$/;"	f	class:Coin
IsCoinBase	./primitives/transaction.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsCoinBase	./wallet/wallet.h	/^    bool IsCoinBase() const { return tx->IsCoinBase(); }$/;"	f	class:CMerkleTx
IsCompressed	./key.h	/^    bool IsCompressed() const { return fCompressed; }$/;"	f	class:CKey
IsCompressed	./pubkey.h	/^    bool IsCompressed() const$/;"	f	class:CPubKey
IsCompressedOrUncompressedPubKey	./script/interpreter.cpp	/^bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {$/;"	f	file:
IsCompressedPubKey	./script/interpreter.cpp	/^bool static IsCompressedPubKey(const valtype &vchPubKey) {$/;"	f	file:
IsCorruption	./leveldb/include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsCrypted	./wallet/crypter.h	/^    bool IsCrypted() const { return fUseCrypto; }$/;"	f	class:CCryptoKeyStore
IsCurrentForAntiFeeSniping	./wallet/wallet.cpp	/^static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)$/;"	f	file:
IsDatabaseLoaded	./wallet/db.h	/^    bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }$/;"	f	class:BerkeleyEnvironment
IsDefinedHashtypeSignature	./script/interpreter.cpp	/^bool static IsDefinedHashtypeSignature(const valtype &vchSig) {$/;"	f	file:
IsDeprecatedRPCEnabled	./rpc/server.cpp	/^bool IsDeprecatedRPCEnabled(const std::string& method)$/;"	f
IsDigit	./util/strencodings.h	/^constexpr bool IsDigit(char c)$/;"	f
IsDummy	./wallet/db.h	/^    bool IsDummy() { return env == nullptr; }$/;"	f	class:BerkeleyDatabase
IsDust	./policy/policy.cpp	/^bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)$/;"	f
IsEmpty	./dbwrapper.cpp	/^bool CDBWrapper::IsEmpty()$/;"	f	class:CDBWrapper
IsEquivalentTo	./wallet/wallet.cpp	/^bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const$/;"	f	class:CWalletTx
IsError	./consensus/validation.h	/^    bool IsError() const {$/;"	f	class:CValidationState
IsFallbackFeeEnabled	./chainparams.h	/^    bool IsFallbackFeeEnabled() const { return m_fallback_fee_enabled; }$/;"	f	class:CChainParams
IsFileCreatedSinceLastDirSync	./leveldb/db/fault_injection_test.cc	/^bool FaultInjectionTestEnv::IsFileCreatedSinceLastDirSync($/;"	f	class:leveldb::FaultInjectionTestEnv
IsFilesystemActive	./leveldb/db/fault_injection_test.cc	/^  bool IsFilesystemActive() const { return filesystem_active_; }$/;"	f	class:leveldb::FaultInjectionTestEnv
IsFinalTx	./consensus/tx_verify.cpp	/^bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)$/;"	f
IsFromMe	./wallet/wallet.cpp	/^bool CWallet::IsFromMe(const CTransaction& tx) const$/;"	f	class:CWallet
IsFromMe	./wallet/wallet.h	/^    bool IsFromMe(const isminefilter& filter) const$/;"	f	class:CWalletTx
IsFullySynced	./leveldb/db/fault_injection_test.cc	/^  bool IsFullySynced() const { return pos_ <= 0 || pos_ == pos_at_last_sync_; }$/;"	f	struct:leveldb::__anon20::FileState
IsFullyValid	./pubkey.cpp	/^bool CPubKey::IsFullyValid() const {$/;"	f	class:CPubKey
IsHDEnabled	./wallet/wallet.cpp	/^bool CWallet::IsHDEnabled() const$/;"	f	class:CWallet
IsHardened	./script/descriptor.cpp	/^    bool IsHardened() const$/;"	f	class:__anon75::final	file:
IsHex	./util/strencodings.cpp	/^bool IsHex(const std::string& str)$/;"	f
IsHexNumber	./util/strencodings.cpp	/^bool IsHexNumber(const std::string& str)$/;"	f
IsIOError	./leveldb/include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsIPv4	./netaddress.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	./netaddress.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsImmatureCoinBase	./wallet/wallet.cpp	/^bool CMerkleTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CMerkleTx
IsInMainChain	./wallet/wallet.h	/^    bool IsInMainChain(interfaces::Chain::Lock& locked_chain) const { return GetDepthInMainChain(locked_chain) > 0; }$/;"	f	class:CMerkleTx
IsInitialBlockDownload	./validation.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsInitialized	./qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::IsInitialized() const$/;"	f	class:PaymentRequestPlus
IsInitialized	./wallet/db.h	/^    bool IsInitialized() const { return fDbEnvInit; }$/;"	f	class:BerkeleyEnvironment
IsInternal	./netaddress.cpp	/^bool CNetAddr::IsInternal() const$/;"	f	class:CNetAddr
IsInvalid	./consensus/validation.h	/^    bool IsInvalid() const {$/;"	f	class:CValidationState
IsInvalidArgument	./leveldb/include/leveldb/status.h	/^  bool IsInvalidArgument() const { return code() == kInvalidArgument; }$/;"	f	class:leveldb::Status
IsKeyType	./wallet/walletdb.cpp	/^bool WalletBatch::IsKeyType(const std::string& strType)$/;"	f	class:WalletBatch
IsLoaded	./txmempool.cpp	/^bool CTxMemPool::IsLoaded() const$/;"	f	class:CTxMemPool
IsLocal	./net.cpp	/^bool IsLocal(const CService& addr)$/;"	f
IsLocal	./netaddress.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsLocked	./wallet/crypter.cpp	/^bool CCryptoKeyStore::IsLocked() const$/;"	f	class:CCryptoKeyStore
IsLockedCoin	./wallet/wallet.cpp	/^bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const$/;"	f	class:CWallet
IsLowDERSignature	./script/interpreter.cpp	/^bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {$/;"	f	file:
IsMine	./script/ismine.cpp	/^isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)$/;"	f
IsMine	./script/ismine.cpp	/^isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest)$/;"	f
IsMine	./wallet/wallet.cpp	/^bool CWallet::IsMine(const CTransaction& tx) const$/;"	f	class:CWallet
IsMine	./wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxIn &txin) const$/;"	f	class:CWallet
IsMine	./wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxOut& txout) const$/;"	f	class:CWallet
IsMineInner	./script/ismine.cpp	/^IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)$/;"	f	namespace:__anon85
IsMineResult	./script/ismine.cpp	/^enum class IsMineResult$/;"	c	namespace:__anon85	file:
IsMineSigVersion	./script/ismine.cpp	/^enum class IsMineSigVersion$/;"	c	namespace:__anon85	file:
IsMock	./wallet/db.h	/^    bool IsMock() const { return fMockDb; }$/;"	f	class:BerkeleyEnvironment
IsNotFound	./leveldb/include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsNotSupportedError	./leveldb/include/leveldb/status.h	/^  bool IsNotSupportedError() const { return code() == kNotSupported; }$/;"	f	class:leveldb::Status
IsNull	./flatfile.h	/^    bool IsNull() const { return (nFile == -1); }$/;"	f	struct:FlatFilePos
IsNull	./primitives/block.h	/^    bool IsNull() const$/;"	f	class:CBlockHeader
IsNull	./primitives/block.h	/^    bool IsNull() const$/;"	f	struct:CBlockLocator
IsNull	./primitives/transaction.h	/^    bool IsNull() const { return (hash.IsNull() && n == NULL_INDEX); }$/;"	f	class:COutPoint
IsNull	./primitives/transaction.h	/^    bool IsNull() const {$/;"	f	class:CTransaction
IsNull	./primitives/transaction.h	/^    bool IsNull() const$/;"	f	class:CTxOut
IsNull	./psbt.cpp	/^bool PSBTInput::IsNull() const$/;"	f	class:PSBTInput
IsNull	./psbt.cpp	/^bool PSBTOutput::IsNull() const$/;"	f	class:PSBTOutput
IsNull	./psbt.cpp	/^bool PartiallySignedTransaction::IsNull() const$/;"	f	class:PartiallySignedTransaction
IsNull	./script/script.h	/^    bool IsNull() const { return stack.empty(); }$/;"	f	struct:CScriptWitness
IsNull	./streams.h	/^    bool IsNull() const         { return (file == nullptr); }$/;"	f	class:CAutoFile
IsNull	./uint256.h	/^    bool IsNull() const$/;"	f	class:base_blob
IsNullDummyEnabled	./validation.cpp	/^bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
IsOk	./leveldb/util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsOptional	./rpc/util.cpp	/^bool RPCArg::IsOptional() const$/;"	f	class:RPCArg
IsOutboundDisconnectionCandidate	./net_processing.cpp	/^static bool IsOutboundDisconnectionCandidate(const CNode *node)$/;"	f	file:
IsPayToScriptHash	./script/script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsPayToWitnessScriptHash	./script/script.cpp	/^bool CScript::IsPayToWitnessScriptHash() const$/;"	f	class:CScript
IsPeerAddrLocalGood	./net.cpp	/^bool IsPeerAddrLocalGood(CNode *pnode)$/;"	f
IsProxy	./netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsPushOnly	./script/script.cpp	/^bool CScript::IsPushOnly() const$/;"	f	class:CScript
IsPushOnly	./script/script.cpp	/^bool CScript::IsPushOnly(const_iterator pc) const$/;"	f	class:CScript
IsRBFOptIn	./policy/rbf.cpp	/^RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)$/;"	f
IsRFC1918	./netaddress.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC2544	./netaddress.cpp	/^bool CNetAddr::IsRFC2544() const$/;"	f	class:CNetAddr
IsRFC3849	./netaddress.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	./netaddress.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	./netaddress.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	./netaddress.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	./netaddress.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	./netaddress.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	./netaddress.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC5737	./netaddress.cpp	/^bool CNetAddr::IsRFC5737() const$/;"	f	class:CNetAddr
IsRFC6052	./netaddress.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	./netaddress.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsRFC6598	./netaddress.cpp	/^bool CNetAddr::IsRFC6598() const$/;"	f	class:CNetAddr
IsRPCRunning	./rpc/server.cpp	/^bool IsRPCRunning()$/;"	f
IsReachable	./net.cpp	/^bool IsReachable(const CNetAddr &addr)$/;"	f
IsReachable	./net.cpp	/^bool IsReachable(enum Network net)$/;"	f
IsRelevantAndUpdate	./bloom.cpp	/^bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)$/;"	f	class:CBloomFilter
IsRoutable	./netaddress.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsSane	./psbt.cpp	/^bool PSBTInput::IsSane() const$/;"	f	class:PSBTInput
IsSane	./psbt.cpp	/^bool PartiallySignedTransaction::IsSane() const$/;"	f	class:PartiallySignedTransaction
IsScanning	./wallet/wallet.h	/^    bool IsScanning() { return fScanningWallet; }$/;"	f	class:final
IsScriptWitnessEnabled	./validation.cpp	/^static bool IsScriptWitnessEnabled(const Consensus::Params& params)$/;"	f	file:
IsSelectableSocket	./compat.h	/^bool static inline IsSelectableSocket(const SOCKET& s) {$/;"	f
IsSelected	./wallet/coincontrol.h	/^    bool IsSelected(const COutPoint& output) const$/;"	f	class:CCoinControl
IsSmallInteger	./script/standard.cpp	/^static constexpr bool IsSmallInteger(opcodetype opcode)$/;"	f	file:
IsSolvable	./script/sign.cpp	/^bool IsSolvable(const SigningProvider& provider, const CScript& script)$/;"	f
IsSpent	./coins.h	/^    bool IsSpent() const {$/;"	f	class:Coin
IsSpent	./wallet/wallet.cpp	/^bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const$/;"	f	class:CWallet
IsStandard	./policy/policy.cpp	/^bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)$/;"	f
IsStandardTx	./policy/policy.cpp	/^bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason)$/;"	f
IsStandardTx	./policy/settings.h	/^static inline bool IsStandardTx(const CTransaction& tx, std::string& reason)$/;"	f
IsSwitchChar	./util/system.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	./addrman.cpp	/^bool CAddrInfo::IsTerrible(int64_t nNow) const$/;"	f	class:CAddrInfo
IsToKeyID	./compressor.cpp	/^static bool IsToKeyID(const CScript& script, CKeyID &hash)$/;"	f	file:
IsToPubKey	./compressor.cpp	/^static bool IsToPubKey(const CScript& script, CPubKey &pubkey)$/;"	f	file:
IsToScriptID	./compressor.cpp	/^static bool IsToScriptID(const CScript& script, CScriptID &hash)$/;"	f	file:
IsTor	./netaddress.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsTransactionReason	./consensus/validation.h	/^inline bool IsTransactionReason(ValidationInvalidReason r)$/;"	f
IsTrivialMove	./leveldb/db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsTrusted	./wallet/wallet.cpp	/^bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CWalletTx
IsTxAvailable	./blockencodings.cpp	/^bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {$/;"	f	class:PartiallyDownloadedBlock
IsUnspendable	./script/script.h	/^    bool IsUnspendable() const$/;"	f	class:CScript
IsValid	./chain.h	/^    bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const$/;"	f	class:CBlockIndex
IsValid	./consensus/validation.h	/^    bool IsValid() const {$/;"	f	class:CValidationState
IsValid	./key.h	/^    bool IsValid() const { return fValid; }$/;"	f	class:CKey
IsValid	./netaddress.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
IsValid	./netaddress.cpp	/^bool CSubNet::IsValid() const$/;"	f	class:CSubNet
IsValid	./netbase.h	/^    bool IsValid() const { return proxy.IsValid(); }$/;"	f	class:proxyType
IsValid	./protocol.cpp	/^bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const$/;"	f	class:CMessageHeader
IsValid	./pubkey.h	/^    bool IsValid() const$/;"	f	class:CPubKey
IsValidDestination	./script/standard.cpp	/^bool IsValidDestination(const CTxDestination& dest) {$/;"	f
IsValidDestinationString	./key_io.cpp	/^bool IsValidDestinationString(const std::string& str)$/;"	f
IsValidDestinationString	./key_io.cpp	/^bool IsValidDestinationString(const std::string& str, const CChainParams& params)$/;"	f
IsValidFlagCombination	./test/fuzz/script_flags.cpp	/^static bool IsValidFlagCombination(unsigned flags)$/;"	f	file:
IsValidKey	./leveldb/db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
IsValidNumArgs	./rpc/util.cpp	/^bool RPCHelpMan::IsValidNumArgs(size_t num_args) const$/;"	f	class:RPCHelpMan
IsValidSignatureEncoding	./script/interpreter.cpp	/^bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {$/;"	f	file:
IsWalletFlagSet	./wallet/wallet.cpp	/^bool CWallet::IsWalletFlagSet(uint64_t flag)$/;"	f	class:CWallet
IsWalletLoaded	./wallet/db.cpp	/^bool IsWalletLoaded(const fs::path& wallet_path)$/;"	f
IsWhitelistedRange	./net.cpp	/^bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {$/;"	f	class:CConnman
IsWithinSizeConstraints	./bloom.cpp	/^bool CBloomFilter::IsWithinSizeConstraints() const$/;"	f	class:CBloomFilter
IsWitnessEnabled	./validation.cpp	/^bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
IsWitnessProgram	./script/script.cpp	/^bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const$/;"	f	class:CScript
IsWitnessStandard	./policy/policy.cpp	/^bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)$/;"	f
Issue178	./leveldb/issues/issue178_test.cc	/^class Issue178 { };$/;"	c	namespace:__anon34	file:
Issue200	./leveldb/issues/issue200_test.cc	/^class Issue200 { };$/;"	c	namespace:leveldb	file:
ItemDelegate	./qt/guiutil.h	/^        ItemDelegate(QObject* parent) : QItemDelegate(parent) {}$/;"	f	class:GUIUtil::ItemDelegate
ItemDelegate	./qt/guiutil.h	/^    class ItemDelegate : public QItemDelegate$/;"	c	namespace:GUIUtil
Iter	./leveldb/table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	./leveldb/table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	./leveldb/db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon18	file:
IterStatus	./leveldb/db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	./leveldb/db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	./leveldb/db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	./leveldb/db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	./leveldb/include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	./leveldb/table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorComparator	./net_processing.cpp	/^    struct IteratorComparator$/;"	s	namespace:__anon88	file:
IteratorWrapper	./leveldb/table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	./leveldb/table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	./leveldb/table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
JAVAORG	./secp256k1/Makefile	/^JAVAORG = org\/bitcoin$/;"	m
JAVAROOT	./secp256k1/Makefile	/^JAVAROOT = src\/java$/;"	m
JAVA_FILES	./secp256k1/Makefile	/^JAVA_FILES = \\$/;"	m
JAVA_GUAVA	./secp256k1/Makefile	/^JAVA_GUAVA = $(srcdir)\/$(JAVAROOT)\/guava\/guava-18.0.jar$/;"	m
JNI_INCLUDES	./secp256k1/Makefile	/^JNI_INCLUDES = $/;"	m
JNI_LIB	./secp256k1/Makefile	/^JNI_LIB = $/;"	m
JSON	./rest.cpp	/^    JSON,$/;"	m	class:RetFormat	file:
JSONErrorReply	./httprpc.cpp	/^static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)$/;"	f	file:
JSONPrettyPrint	./test/script_tests.cpp	/^std::string JSONPrettyPrint(const UniValue& univalue)$/;"	f	namespace:__anon58
JSONRPCError	./rpc/protocol.cpp	/^UniValue JSONRPCError(int code, const std::string& message)$/;"	f
JSONRPCExecBatch	./rpc/server.cpp	/^std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)$/;"	f
JSONRPCExecOne	./rpc/server.cpp	/^static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)$/;"	f	file:
JSONRPCProcessBatchReply	./rpc/protocol.cpp	/^std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)$/;"	f
JSONRPCReply	./rpc/protocol.cpp	/^std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id)$/;"	f
JSONRPCReplyObj	./rpc/protocol.cpp	/^UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)$/;"	f
JSONRPCRequest	./rpc/server.h	/^    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}$/;"	f	class:JSONRPCRequest
JSONRPCRequest	./rpc/server.h	/^class JSONRPCRequest$/;"	c
JSONRPCRequestObj	./rpc/protocol.cpp	/^UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)$/;"	f
JSONRPCTransactionError	./rpc/util.cpp	/^UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string)$/;"	f
JSONUTF8StringFilter	./univalue/lib/univalue_utffilter.h	/^    explicit JSONUTF8StringFilter(std::string &s):$/;"	f	class:JSONUTF8StringFilter
JSONUTF8StringFilter	./univalue/lib/univalue_utffilter.h	/^class JSONUTF8StringFilter$/;"	c
JSON_TEST_FILES	./Makefile	/^JSON_TEST_FILES = \\$/;"	m
JTOK_ARR_CLOSE	./univalue/include/univalue.h	/^    JTOK_ARR_CLOSE,$/;"	e	enum:jtokentype
JTOK_ARR_OPEN	./univalue/include/univalue.h	/^    JTOK_ARR_OPEN,$/;"	e	enum:jtokentype
JTOK_COLON	./univalue/include/univalue.h	/^    JTOK_COLON,$/;"	e	enum:jtokentype
JTOK_COMMA	./univalue/include/univalue.h	/^    JTOK_COMMA,$/;"	e	enum:jtokentype
JTOK_ERR	./univalue/include/univalue.h	/^    JTOK_ERR        = -1,$/;"	e	enum:jtokentype
JTOK_KW_FALSE	./univalue/include/univalue.h	/^    JTOK_KW_FALSE,$/;"	e	enum:jtokentype
JTOK_KW_NULL	./univalue/include/univalue.h	/^    JTOK_KW_NULL,$/;"	e	enum:jtokentype
JTOK_KW_TRUE	./univalue/include/univalue.h	/^    JTOK_KW_TRUE,$/;"	e	enum:jtokentype
JTOK_NONE	./univalue/include/univalue.h	/^    JTOK_NONE       = 0,                           \/\/ eof$/;"	e	enum:jtokentype
JTOK_NUMBER	./univalue/include/univalue.h	/^    JTOK_NUMBER,$/;"	e	enum:jtokentype
JTOK_OBJ_CLOSE	./univalue/include/univalue.h	/^    JTOK_OBJ_CLOSE,$/;"	e	enum:jtokentype
JTOK_OBJ_OPEN	./univalue/include/univalue.h	/^    JTOK_OBJ_OPEN,$/;"	e	enum:jtokentype
JTOK_STRING	./univalue/include/univalue.h	/^    JTOK_STRING,$/;"	e	enum:jtokentype
Java_org_bitcoin_NativeSecp256k1_secp256k1_1context_1randomize	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1context_1randomize$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ctx_1clone	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jlong JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ctx_1clone$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1destroy_1context	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API void JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1destroy_1context$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1create	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1create$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1seckey_1verify	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ec_1seckey_1verify$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdh	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdh$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1pubkey_1combine	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jlong JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1pubkey_1combine$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1sign	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1sign$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1verify	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1verify$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1add	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1add$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1mul	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1mul$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1add	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1add$/;"	f
Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1mul	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1mul$/;"	f
Java_org_bitcoin_Secp256k1Context_secp256k1_1init_1context	./secp256k1/src/java/org_bitcoin_Secp256k1Context.c	/^SECP256K1_API jlong JNICALL Java_org_bitcoin_Secp256k1Context_secp256k1_1init_1context$/;"	f
K	./crypto/sha256_avx2.cpp	/^__m256i inline K(uint32_t x) { return _mm256_set1_epi32(x); }$/;"	f	namespace:sha256d64_avx2::__anon37
K	./crypto/sha256_sse41.cpp	/^__m128i inline K(uint32_t x) { return _mm_set1_epi32(x); }$/;"	f	namespace:sha256d64_sse41::__anon41
K	./leveldb/db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	./leveldb/db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KEY_GENERATION_FAILURE	./qt/addresstablemodel.h	/^        KEY_GENERATION_FAILURE  \/**< Generating a new public key for a receiving address failed *\/$/;"	e	enum:AddressTableModel::EditStatus
KVMap	./leveldb/db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon25	file:
KVMap	./leveldb/table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
KeepKey	./wallet/wallet.cpp	/^void CReserveKey::KeepKey()$/;"	f	class:CReserveKey
KeepKey	./wallet/wallet.cpp	/^void CWallet::KeepKey(int64_t nIndex)$/;"	f	class:CWallet
KeepRunning	./bench/bench.h	/^    inline bool KeepRunning()$/;"	f	class:benchmark::State
Key	./leveldb/db/autocompact_test.cc	/^  std::string Key(int i) {$/;"	f	class:leveldb::AutoCompactTest
Key	./leveldb/db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	./leveldb/db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	./leveldb/db/fault_injection_test.cc	/^  Slice Key(int i, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Key	./leveldb/db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
Key	./leveldb/util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
Key1	./leveldb/issues/issue178_test.cc	/^std::string Key1(int i) {$/;"	f	namespace:__anon34
Key2	./leveldb/issues/issue178_test.cc	/^std::string Key2(int i) {$/;"	f	namespace:__anon34
KeyComparator	./leveldb/db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	./leveldb/db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	./leveldb/table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	./leveldb/table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb	file:
KeyData	./test/script_tests.cpp	/^    KeyData()$/;"	f	struct:__anon58::KeyData
KeyData	./test/script_tests.cpp	/^struct KeyData$/;"	s	namespace:__anon58	file:
KeyIsAfterNode	./leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMayMatch	./leveldb/db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	./leveldb/db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	./leveldb/table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	./leveldb/table/filter_block_test.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	class:leveldb::TestHashFilter
KeyMayMatch	./leveldb/util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
KeyOriginInfo	./script/sign.h	/^struct KeyOriginInfo$/;"	s
KeyPath	./script/descriptor.cpp	/^typedef std::vector<uint32_t> KeyPath;$/;"	t	namespace:__anon75	file:
KeySetupColumnMix	./crypto/ctaes/ctaes.c	/^static void KeySetupColumnMix(AES_state* s, AES_state* r, const AES_state* a, int c1, int c2) {$/;"	f	file:
KeySetupTransform	./crypto/ctaes/ctaes.c	/^static void KeySetupTransform(AES_state* s, const AES_state* r) {$/;"	f	file:
KeyValPair	./wallet/db.h	/^    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;$/;"	t	class:BerkeleyEnvironment
KeypoolCountExternalKeys	./wallet/wallet.cpp	/^size_t CWallet::KeypoolCountExternalKeys()$/;"	f	class:CWallet
Keystream	./crypto/chacha20.cpp	/^void ChaCha20::Keystream(unsigned char* c, size_t bytes)$/;"	f	class:ChaCha20
KnapsackSolver	./wallet/coinselection.cpp	/^bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)$/;"	f
LABEL_COLUMN_WIDTH	./qt/receivecoinsdialog.h	/^        LABEL_COLUMN_WIDTH = 120,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
LCOV	./Makefile	/^LCOV = $/;"	m
LCOV_OPTS	./Makefile	/^LCOV_OPTS = $/;"	m
LD	./Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LD	./secp256k1/Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LD	./univalue/Makefile	/^LD = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ld$/;"	m
LDFLAGS	./Makefile	/^LDFLAGS =  -Wl,-headerpad_max_install_names -Wl,-dead_strip$/;"	m
LDFLAGS	./secp256k1/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	./univalue/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS_FOR_BUILD	./secp256k1/Makefile	/^LDFLAGS_FOR_BUILD = $/;"	m
LEAVE_CRITICAL_SECTION	./sync.h	/^#define LEAVE_CRITICAL_SECTION(/;"	d
LEGACY	./outputtype.h	/^    LEGACY,$/;"	m	class:OutputType
LEVELDB_CPPFLAGS	./Makefile	/^LEVELDB_CPPFLAGS =  $(am__append_20)$/;"	m
LEVELDB_CPPFLAGS_INT	./Makefile	/^LEVELDB_CPPFLAGS_INT = -I$(srcdir)\/leveldb \\$/;"	m
LEVELDB_HAVE_MEMORY_BARRIER	./leveldb/port/atomic_pointer.h	/^#undef LEVELDB_HAVE_MEMORY_BARRIER$/;"	d
LEVELDB_ONCE_INIT	./leveldb/port/port_example.h	/^#define LEVELDB_ONCE_INIT /;"	d
LEVELDB_ONCE_INIT	./leveldb/port/port_posix.h	/^#define LEVELDB_ONCE_INIT /;"	d
LEVELDB_ONCE_INIT	./leveldb/port/port_win.h	/^#define LEVELDB_ONCE_INIT /;"	d
LEVELDB_TARGET_FLAGS	./Makefile	/^LEVELDB_TARGET_FLAGS = -DOS_MACOSX$/;"	m
LE_LOAD32	./leveldb/port/port_posix_sse.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::port
LE_LOAD32	./leveldb/util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LE_LOAD64	./leveldb/port/port_posix_sse.cc	/^static inline uint64_t LE_LOAD64(const uint8_t *p) {$/;"	f	namespace:leveldb::port
LIBBITCOINCONSENSUS	./Makefile	/^LIBBITCOINCONSENSUS = libbitcoinconsensus.la$/;"	m
LIBBITCOINQT	./Makefile	/^LIBBITCOINQT = qt\/libbitcoinqt.a$/;"	m
LIBBITCOIN_CLI	./Makefile	/^LIBBITCOIN_CLI = libbitcoin_cli.a$/;"	m
LIBBITCOIN_COMMON	./Makefile	/^LIBBITCOIN_COMMON = libbitcoin_common.a$/;"	m
LIBBITCOIN_CONSENSUS	./Makefile	/^LIBBITCOIN_CONSENSUS = libbitcoin_consensus.a$/;"	m
LIBBITCOIN_CRYPTO	./Makefile	/^LIBBITCOIN_CRYPTO = $(LIBBITCOIN_CRYPTO_BASE) $(am__append_1) \\$/;"	m
LIBBITCOIN_CRYPTO_AVX2	./Makefile	/^LIBBITCOIN_CRYPTO_AVX2 = crypto\/libbitcoin_crypto_avx2.a$/;"	m
LIBBITCOIN_CRYPTO_BASE	./Makefile	/^LIBBITCOIN_CRYPTO_BASE = crypto\/libbitcoin_crypto_base.a$/;"	m
LIBBITCOIN_CRYPTO_SHANI	./Makefile	/^LIBBITCOIN_CRYPTO_SHANI = crypto\/libbitcoin_crypto_shani.a$/;"	m
LIBBITCOIN_CRYPTO_SSE41	./Makefile	/^LIBBITCOIN_CRYPTO_SSE41 = crypto\/libbitcoin_crypto_sse41.a$/;"	m
LIBBITCOIN_SERVER	./Makefile	/^LIBBITCOIN_SERVER = libbitcoin_server.a$/;"	m
LIBBITCOIN_UTIL	./Makefile	/^LIBBITCOIN_UTIL = libbitcoin_util.a$/;"	m
LIBBITCOIN_ZMQ	./Makefile	/^LIBBITCOIN_ZMQ = libbitcoin_zmq.a$/;"	m
LIBLEVELDB	./Makefile	/^LIBLEVELDB =  $(am__append_18)$/;"	m
LIBLEVELDB_INT	./Makefile	/^LIBLEVELDB_INT = leveldb\/libleveldb.a$/;"	m
LIBLEVELDB_SSE42	./Makefile	/^LIBLEVELDB_SSE42 = $(LIBLEVELDB_SSE42_INT)$/;"	m
LIBLEVELDB_SSE42_INT	./Makefile	/^LIBLEVELDB_SSE42_INT = leveldb\/libleveldb_sse42.a$/;"	m
LIBMEMENV	./Makefile	/^LIBMEMENV =  $(am__append_19)$/;"	m
LIBMEMENV_INT	./Makefile	/^LIBMEMENV_INT = leveldb\/libmemenv.a$/;"	m
LIBOBJS	./Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	./secp256k1/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	./univalue/Makefile	/^LIBOBJS = $/;"	m
LIBS	./Makefile	/^LIBS =  -L\/usr\/local\/opt\/berkeley-db@4\/lib$/;"	m
LIBS	./secp256k1/Makefile	/^LIBS = $/;"	m
LIBS	./univalue/Makefile	/^LIBS = $/;"	m
LIBSECP256K1	./Makefile	/^LIBSECP256K1 = secp256k1\/libsecp256k1.la$/;"	m
LIBSECP256K1_CONFIG_H	./secp256k1/src/libsecp256k1-config.h	/^#define LIBSECP256K1_CONFIG_H$/;"	d
LIBTOOL	./Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	./secp256k1/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	./univalue/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL_APP_LDFLAGS	./Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBTOOL_APP_LDFLAGS	./univalue/Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBUNIVALUE	./Makefile	/^LIBUNIVALUE = univalue\/libunivalue.la$/;"	m
LIBUNIVALUE_AGE	./univalue/Makefile	/^LIBUNIVALUE_AGE = 100$/;"	m
LIBUNIVALUE_CURRENT	./univalue/Makefile	/^LIBUNIVALUE_CURRENT = 100$/;"	m
LIBUNIVALUE_REVISION	./univalue/Makefile	/^LIBUNIVALUE_REVISION = 3$/;"	m
LIMITED_STRING	./serialize.h	/^#define LIMITED_STRING(/;"	d
LINK	./Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK	./secp256k1/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	./Makefile	/^LIPO = lipo$/;"	m
LIPO	./secp256k1/Makefile	/^LIPO = lipo$/;"	m
LIPO	./univalue/Makefile	/^LIPO = lipo$/;"	m
LLVMFuzzerInitialize	./test/fuzz/fuzz.cpp	/^extern "C" int LLVMFuzzerInitialize(int* argc, char*** argv)$/;"	f
LLVMFuzzerTestOneInput	./test/fuzz/fuzz.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f
LN2	./bloom.cpp	/^#define LN2 /;"	d	file:
LN2SQUARED	./bloom.cpp	/^#define LN2SQUARED /;"	d	file:
LN_S	./Makefile	/^LN_S = ln -s$/;"	m
LN_S	./secp256k1/Makefile	/^LN_S = ln -s$/;"	m
LN_S	./univalue/Makefile	/^LN_S = ln -s$/;"	m
LOAD_FAIL	./wallet/walletdb.h	/^    LOAD_FAIL,$/;"	m	class:DBErrors
LOAD_OK	./wallet/walletdb.h	/^    LOAD_OK,$/;"	m	class:DBErrors
LOCAL_BIND	./net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon53
LOCAL_IF	./net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon53
LOCAL_MANUAL	./net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon53
LOCAL_MAX	./net.h	/^    LOCAL_MAX$/;"	e	enum:__anon53
LOCAL_NONE	./net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon53
LOCAL_UPNP	./net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon53
LOCK	./sync.h	/^#define LOCK(/;"	d
LOCK2	./sync.h	/^#define LOCK2(/;"	d
LOCKABLE	./leveldb/port/thread_annotations.h	/^#define LOCKABLE$/;"	d
LOCKABLE	./threadsafety.h	/^#define LOCKABLE /;"	d
LOCKABLE	./threadsafety.h	/^#define LOCKABLE$/;"	d
LOCKED_IN	./versionbits.h	/^    LOCKED_IN,$/;"	m	class:ThresholdState
LOCKS_EXCLUDED	./leveldb/port/thread_annotations.h	/^#define LOCKS_EXCLUDED(/;"	d
LOCKS_EXCLUDED	./net_processing.cpp	/^void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)$/;"	f
LOCKS_EXCLUDED	./threadsafety.h	/^#define LOCKS_EXCLUDED(/;"	d
LOCKS_EXCLUDED	./validation.cpp	/^static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {$/;"	f
LOCKS_EXCLUDED	./validation.cpp	/^static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {$/;"	f
LOCKTIME_MAX	./script/script.h	/^static const uint32_t LOCKTIME_MAX = 0xFFFFFFFFU;$/;"	v
LOCKTIME_MEDIAN_TIME_PAST	./consensus/consensus.h	/^static constexpr unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v
LOCKTIME_THRESHOLD	./script/script.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; \/\/ Tue Nov  5 00:53:20 1985 UTC$/;"	v
LOCKTIME_VERIFY_SEQUENCE	./consensus/consensus.h	/^static constexpr unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v
LOCK_RETURNED	./leveldb/port/thread_annotations.h	/^#define LOCK_RETURNED(/;"	d
LOCK_RETURNED	./threadsafety.h	/^#define LOCK_RETURNED(/;"	d
LOG_COMPILE	./Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_COMPILE	./secp256k1/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_COMPILE	./univalue/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_DRIVER	./Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LOG_DRIVER	./secp256k1/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LOG_DRIVER	./univalue/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LONG_BLOCK_PERIODS	./policy/fees.h	/^    static constexpr unsigned int LONG_BLOCK_PERIODS = 42;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
LONG_DECAY	./policy/fees.h	/^    static constexpr double LONG_DECAY = .99931;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
LONG_HALFLIFE	./policy/fees.h	/^    LONG_HALFLIFE = 2$/;"	m	class:FeeEstimateHorizon
LONG_SCALE	./policy/fees.h	/^    static constexpr unsigned int LONG_SCALE = 24;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
LRELEASE	./Makefile	/^LRELEASE = $/;"	m
LRUCache	./leveldb/util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon4::LRUCache
LRUCache	./leveldb/util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon4	file:
LRUHandle	./leveldb/util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon4	file:
LRU_Append	./leveldb/util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* list, LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
LRU_Remove	./leveldb/util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
LTCCASCOMPILE	./secp256k1/Makefile	/^LTCCASCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	./Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	./secp256k1/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	./Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	./univalue/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	./Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	./secp256k1/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	./univalue/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	./Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTLIBRARIES	./secp256k1/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	./univalue/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTOBJCXXCOMPILE	./Makefile	/^LTOBJCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
LT_OBJDIR	./config/bitcoin-config.h	/^#define LT_OBJDIR /;"	d
LT_OBJDIR	./secp256k1/src/libsecp256k1-config.h	/^#define LT_OBJDIR /;"	d
LT_OBJDIR	./univalue/univalue-config.h	/^#define LT_OBJDIR /;"	d
LT_SYS_LIBRARY_PATH	./Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LT_SYS_LIBRARY_PATH	./secp256k1/Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LT_SYS_LIBRARY_PATH	./univalue/Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
LUPDATE	./Makefile	/^LUPDATE = $/;"	m
Label	./qt/addresstablemodel.h	/^        Label = 0,   \/**< User specified label *\/$/;"	e	enum:AddressTableModel::ColumnIndex
Label	./qt/recentrequeststablemodel.h	/^        Label = 1,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
LabelFromValue	./wallet/rpcwallet.cpp	/^static std::string LabelFromValue(const UniValue& value)$/;"	f	file:
LabelRole	./qt/transactiontablemodel.h	/^        LabelRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Language	./qt/optionsmodel.h	/^        Language,               \/\/ QString$/;"	e	enum:OptionsModel::OptionID
LastCommonAncestor	./chain.cpp	/^const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {$/;"	f
LastMonth	./qt/transactionview.h	/^        LastMonth,$/;"	e	enum:TransactionView::DateEnum
LastRecordOffset	./leveldb/db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	./leveldb/db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LearnAllRelatedScripts	./wallet/wallet.cpp	/^void CWallet::LearnAllRelatedScripts(const CPubKey& key)$/;"	f	class:CWallet
LearnRelatedScripts	./wallet/wallet.cpp	/^void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)$/;"	f	class:CWallet
LeaveCritical	./sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	./sync.h	/^void static inline LeaveCritical() {}$/;"	f
LevelFileNumIterator	./leveldb/db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	./leveldb/db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	./leveldb/db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	./leveldb/db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	./leveldb/db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
LicenseInfo	./init.cpp	/^std::string LicenseInfo()$/;"	f
LimitMempoolSize	./validation.cpp	/^static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {$/;"	f	file:
LimitOrphanTxSize	./net_processing.cpp	/^unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)$/;"	f
LimitedString	./serialize.h	/^    explicit LimitedString(std::string& _string) : string(_string) {}$/;"	f	class:LimitedString
LimitedString	./serialize.h	/^class LimitedString$/;"	c
Limiter	./leveldb/util/env_posix.cc	/^  Limiter(intptr_t n) {$/;"	f	class:leveldb::__anon8::Limiter
Limiter	./leveldb/util/env_posix.cc	/^class Limiter {$/;"	c	namespace:leveldb::__anon8	file:
ListActiveLogCategories	./logging.cpp	/^std::vector<CLogCategoryActive> ListActiveLogCategories()$/;"	f
ListBlockFilterTypes	./blockfilter.cpp	/^const std::string& ListBlockFilterTypes()$/;"	f
ListCoins	./wallet/wallet.cpp	/^std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins(interfaces::Chain::Lock& locked_chain) const$/;"	f	class:CWallet
ListCoinsTestingSetup	./wallet/test/wallet_tests.cpp	/^    ListCoinsTestingSetup()$/;"	f	class:ListCoinsTestingSetup
ListCoinsTestingSetup	./wallet/test/wallet_tests.cpp	/^class ListCoinsTestingSetup : public TestChain100Setup$/;"	c	file:
ListLockedCoins	./wallet/wallet.cpp	/^void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const$/;"	f	class:CWallet
ListLogCategories	./logging.cpp	/^std::string ListLogCategories()$/;"	f
ListSelected	./wallet/coincontrol.h	/^    void ListSelected(std::vector<COutPoint>& vOutpoints) const$/;"	f	class:CCoinControl
ListWalletDir	./dummywallet.cpp	/^std::vector<fs::path> ListWalletDir()$/;"	f
ListWalletDir	./wallet/walletutil.cpp	/^std::vector<fs::path> ListWalletDir()$/;"	f
Listen	./qt/optionsmodel.h	/^        Listen,                 \/\/ bool$/;"	e	enum:OptionsModel::OptionID
ListenSocket	./net.h	/^        ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}$/;"	f	struct:CConnman::ListenSocket
ListenSocket	./net.h	/^    struct ListenSocket {$/;"	s	class:CConnman
Load	./crypto/sha256_shani.cpp	/^__m128i inline  __attribute__((always_inline)) Load(const unsigned char* in)$/;"	f	namespace:__anon43
Load	./key.cpp	/^bool CKey::Load(const CPrivKey &privkey, const CPubKey &vchPubKey, bool fSkipCheck=false) {$/;"	f	class:CKey
LoadBlockIndex	./validation.cpp	/^bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree)$/;"	f	class:CChainState
LoadBlockIndex	./validation.cpp	/^bool LoadBlockIndex(const CChainParams& chainparams)$/;"	f
LoadBlockIndexGuts	./txdb.cpp	/^bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)$/;"	f	class:CBlockTreeDB
LoadByte	./crypto/ctaes/ctaes.c	/^static void LoadByte(AES_state* s, unsigned char byte, int r, int c) {$/;"	f	file:
LoadBytes	./crypto/ctaes/ctaes.c	/^static void LoadBytes(AES_state *s, const unsigned char* data16) {$/;"	f	file:
LoadCScript	./wallet/wallet.cpp	/^bool CWallet::LoadCScript(const CScript& redeemScript)$/;"	f	class:CWallet
LoadChainTip	./validation.cpp	/^bool LoadChainTip(const CChainParams& chainparams)$/;"	f
LoadCryptedKey	./wallet/wallet.cpp	/^bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CWallet
LoadDestData	./wallet/wallet.cpp	/^void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)$/;"	f	class:CWallet
LoadExternalBlockFile	./validation.cpp	/^bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp)$/;"	f
LoadGenesisBlock	./validation.cpp	/^bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)$/;"	f	class:CChainState
LoadGenesisBlock	./validation.cpp	/^bool LoadGenesisBlock(const CChainParams& chainparams)$/;"	f
LoadKey	./wallet/wallet.h	/^    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }$/;"	f	class:final
LoadKeyMetadata	./wallet/wallet.cpp	/^void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)$/;"	f	class:CWallet
LoadKeyPool	./wallet/wallet.cpp	/^void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)$/;"	f	class:CWallet
LoadMempool	./validation.cpp	/^bool LoadMempool(CTxMemPool& pool)$/;"	f
LoadRootCAs	./qt/paymentserver.cpp	/^void PaymentServer::LoadRootCAs(X509_STORE* _store)$/;"	f	class:PaymentServer
LoadScriptMetadata	./wallet/wallet.cpp	/^void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)$/;"	f	class:CWallet
LoadToWallet	./wallet/wallet.cpp	/^void CWallet::LoadToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
LoadWallet	./dummywallet.cpp	/^std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)$/;"	f
LoadWallet	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::LoadWalletSig> LoadWallet;$/;"	m	struct:UISignals	file:
LoadWallet	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(LoadWallet);$/;"	v
LoadWallet	./ui_interface.cpp	/^void CClientUIInterface::LoadWallet(std::unique_ptr<interfaces::Wallet>& wallet) { return g_ui_signals.LoadWallet(wallet); }$/;"	f	class:CClientUIInterface
LoadWallet	./wallet/wallet.cpp	/^DBErrors CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	./wallet/wallet.cpp	/^std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning)$/;"	f
LoadWallet	./wallet/wallet.cpp	/^std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)$/;"	f
LoadWallet	./wallet/walletdb.cpp	/^DBErrors WalletBatch::LoadWallet(CWallet* pwallet)$/;"	f	class:WalletBatch
LoadWallet	./wallet/wallettool.cpp	/^static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)$/;"	f	namespace:WalletTool
LoadWallets	./wallet/load.cpp	/^bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)$/;"	f
LoadWatchOnly	./wallet/wallet.cpp	/^bool CWallet::LoadWatchOnly(const CScript &dest)$/;"	f	class:CWallet
LocalServiceInfo	./net.h	/^struct LocalServiceInfo {$/;"	s
Lock	./interfaces/chain.h	/^    class Lock$/;"	c	class:interfaces::Chain
Lock	./leveldb/port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Lock	./leveldb/port/port_win.cc	/^void Mutex::Lock() {$/;"	f	class:leveldb::port::Mutex
Lock	./wallet/crypter.cpp	/^bool CCryptoKeyStore::Lock()$/;"	f	class:CCryptoKeyStore
LockAnnotation	./threadsafety.h	/^struct SCOPED_LOCKABLE LockAnnotation$/;"	s
LockCoin	./wallet/wallet.cpp	/^void CWallet::LockCoin(const COutPoint& output)$/;"	f	class:CWallet
LockCommand	./test/util_tests.cpp	/^static constexpr char LockCommand = 'L';$/;"	v	file:
LockData	./sync.cpp	/^    LockData() : available(true) {}$/;"	f	struct:LockData
LockData	./sync.cpp	/^struct LockData {$/;"	s	file:
LockDataDirectory	./init.cpp	/^static bool LockDataDirectory(bool probeOnly)$/;"	f	file:
LockDirectory	./util/system.cpp	/^bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)$/;"	f
LockFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
LockFile	./leveldb/include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	./leveldb/util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon8::PosixEnv
LockFile	./leveldb/util/env_win.cc	/^Status Win32Env::LockFile( const std::string& fname, FileLock** lock )$/;"	f	class:leveldb::Win32::Win32Env
LockFileName	./leveldb/db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockImpl	./interfaces/chain.cpp	/^class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>$/;"	c	namespace:interfaces::__anon129	file:
LockOrUnlock	./leveldb/util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon8
LockOrders	./sync.cpp	/^typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;$/;"	t	file:
LockPoints	./txmempool.h	/^    LockPoints() : height(0), time(0), maxInputBlock(nullptr) { }$/;"	f	struct:LockPoints
LockPoints	./txmempool.h	/^struct LockPoints$/;"	s
LockStack	./sync.cpp	/^typedef std::vector<std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
Locked	./qt/walletmodel.h	/^        Locked,       \/\/ wallet->IsCrypted() && wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
LockedPageAllocator	./support/lockedpool.h	/^class LockedPageAllocator$/;"	c
LockedPageArena	./support/lockedpool.cpp	/^LockedPool::LockedPageArena::LockedPageArena(LockedPageAllocator *allocator_in, void *base_in, size_t size_in, size_t align_in):$/;"	f	class:LockedPool::LockedPageArena
LockedPageArena	./support/lockedpool.h	/^    class LockedPageArena: public Arena$/;"	c	class:LockedPool
LockedPool	./support/lockedpool.cpp	/^LockedPool::LockedPool(std::unique_ptr<LockedPageAllocator> allocator_in, LockingFailed_Callback lf_cb_in):$/;"	f	class:LockedPool
LockedPool	./support/lockedpool.h	/^class LockedPool$/;"	c
LockedPoolManager	./support/lockedpool.cpp	/^LockedPoolManager::LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator_in):$/;"	f	class:LockedPoolManager
LockedPoolManager	./support/lockedpool.h	/^class LockedPoolManager : public LockedPool$/;"	c
LockingFailed	./support/lockedpool.cpp	/^bool LockedPoolManager::LockingFailed()$/;"	f	class:LockedPoolManager
LockingFailed_Callback	./support/lockedpool.h	/^    typedef bool (*LockingFailed_Callback)();$/;"	t	class:LockedPool
LocksHeld	./sync.cpp	/^std::string LocksHeld()$/;"	f
Log	./leveldb/util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAcceptCategory	./logging.h	/^static inline bool LogAcceptCategory(BCLog::LogFlags category)$/;"	f
LogAndApply	./leveldb/db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogCategories	./logging.cpp	/^const CLogCategoryDesc LogCategories[] =$/;"	v
LogConnectFailure	./netbase.cpp	/^static void LogConnectFailure(bool manual_connection, const char* fmt, const Args&... args) {$/;"	f	file:
LogFileName	./leveldb/db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogInstance	./logging.cpp	/^BCLog::Logger& LogInstance()$/;"	f
LogName	./leveldb/db/recovery_test.cc	/^  std::string LogName(uint64_t number) {$/;"	f	class:leveldb::RecoveryTest
LogNumber	./leveldb/db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogPrint	./logging.h	/^static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)$/;"	f
LogPrintStr	./logging.cpp	/^void BCLog::Logger::LogPrintStr(const std::string &str)$/;"	f	class:BCLog::Logger
LogPrintf	./logging.h	/^static inline void LogPrintf(const char* fmt, const Args&... args)$/;"	f
LogTest	./leveldb/db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	./leveldb/db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
LogTimestampStr	./logging.cpp	/^std::string BCLog::Logger::LogTimestampStr(const std::string& str)$/;"	f	class:BCLog::Logger
Logger	./leveldb/include/leveldb/env.h	/^  Logger() { }$/;"	f	class:leveldb::Logger
Logger	./leveldb/include/leveldb/env.h	/^class Logger {$/;"	c	namespace:leveldb
Logger	./logging.h	/^    class Logger$/;"	c	namespace:BCLog
Logv	./leveldb/helpers/memenv/memenv.cc	/^  virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon35::NoOpLogger
Logv	./leveldb/util/env_win.cc	/^void Win32Logger::Logv( const char* format, va_list ap )$/;"	f	class:leveldb::Win32::Win32Logger
Logv	./leveldb/util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
LongDescriptionRole	./qt/transactiontablemodel.h	/^        LongDescriptionRole,$/;"	e	enum:TransactionTableModel::RoleIndex
LongTestString	./test/crypto_tests.cpp	/^static std::string LongTestString() {$/;"	f	file:
Lookup	./leveldb/util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::HandleTable
Lookup	./leveldb/util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Lookup	./leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::LRUCache
Lookup	./leveldb/util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
Lookup	./netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	./netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupFilter	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const$/;"	f	class:BlockFilterIndex
LookupFilterHashRange	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilterHashRange(int start_height, const CBlockIndex* stop_index,$/;"	f	class:BlockFilterIndex
LookupFilterHeader	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const$/;"	f	class:BlockFilterIndex
LookupFilterRange	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,$/;"	f	class:BlockFilterIndex
LookupHelper	./script/sign.cpp	/^bool LookupHelper(const M& map, const K& key, V& value)$/;"	f	namespace:__anon83
LookupHost	./netbase.cpp	/^bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)$/;"	f
LookupHost	./netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupIntern	./netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupKey	./leveldb/db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	./leveldb/db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
LookupNumeric	./netbase.cpp	/^CService LookupNumeric(const char *pszName, int portDefault)$/;"	f
LookupOne	./index/blockfilterindex.cpp	/^static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)$/;"	f	file:
LookupRange	./index/blockfilterindex.cpp	/^static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,$/;"	f	file:
LookupSubNet	./netbase.cpp	/^bool LookupSubNet(const char* pszName, CSubNet& ret)$/;"	f
Loop	./checkqueue.h	/^    bool Loop(bool fMaster = false)$/;"	f	class:CCheckQueue
LowerCase	./bech32.cpp	/^inline unsigned char LowerCase(unsigned char c)$/;"	f	namespace:__anon116
MAIN	./chainparamsbase.cpp	/^const std::string CBaseChainParams::MAIN = "main";$/;"	m	class:CBaseChainParams	file:
MAIN	./chainparamsbase.h	/^    static const std::string MAIN;$/;"	m	class:CBaseChainParams
MAINT	./Makefile	/^MAINT = $/;"	m
MAKEINFO	./Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	./secp256k1/Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	./univalue/Makefile	/^MAKEINFO = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/missing makeinfo$/;"	m
MAKENSIS	./Makefile	/^MAKENSIS = $/;"	m
MAKE_RAII	./support/events.h	/^#define MAKE_RAII(/;"	d
MANDATORY_SCRIPT_VERIFY_FLAGS	./script/standard.h	/^static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;$/;"	v
MANIFEST_TOOL	./Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	./secp256k1/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	./univalue/Makefile	/^MANIFEST_TOOL = :$/;"	m
MAP_ANONYMOUS	./support/lockedpool.cpp	/^#define MAP_ANONYMOUS /;"	d	file:
MASK	./crypto/sha256_shani.cpp	/^const __m128i MASK = _mm_set_epi64x(0x0c0d0e0f08090a0bULL, 0x0405060700010203ULL);$/;"	m	namespace:__anon43	file:
MAXTXFEE	./policy/fees.h	/^    MAXTXFEE,$/;"	m	class:FeeEstimateHorizon::FeeReason
MAX_ACTIONS	./test/util_tests.cpp	/^    static constexpr int MAX_ACTIONS = 2;$/;"	m	struct:ChainMergeTestingSetup	file:
MAX_ACTIONS	./test/util_tests.cpp	/^    static constexpr int MAX_ACTIONS = 3;$/;"	m	struct:ArgsMergeTestingSetup	file:
MAX_ADDNODE_CONNECTIONS	./net.h	/^static const int MAX_ADDNODE_CONNECTIONS = 8;$/;"	v
MAX_ADDR_TO_SEND	./net.h	/^static const unsigned int MAX_ADDR_TO_SEND = 1000;$/;"	v
MAX_BASE58_TYPES	./chainparams.h	/^        MAX_BASE58_TYPES$/;"	e	enum:CChainParams::Base58Type
MAX_BIP125_RBF_SEQUENCE	./util/rbf.h	/^static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;$/;"	v
MAX_BLOCKFILE_SIZE	./validation.h	/^static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; \/\/ 128 MiB$/;"	v
MAX_BLOCKS_IN_TRANSIT_PER_PEER	./validation.h	/^static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;$/;"	v
MAX_BLOCKS_TO_ANNOUNCE	./validation.h	/^static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;$/;"	v
MAX_BLOCKTXN_DEPTH	./validation.h	/^static const int MAX_BLOCKTXN_DEPTH = 10;$/;"	v
MAX_BLOCK_COINSDB_USAGE	./txdb.h	/^static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;$/;"	v
MAX_BLOCK_SERIALIZED_SIZE	./consensus/consensus.h	/^static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;$/;"	v
MAX_BLOCK_SIGOPS_COST	./consensus/consensus.h	/^static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;$/;"	v
MAX_BLOCK_TIME_GAP	./chain.h	/^static constexpr int64_t MAX_BLOCK_TIME_GAP = 90 * 60;$/;"	v
MAX_BLOCK_WEIGHT	./consensus/consensus.h	/^static const unsigned int MAX_BLOCK_WEIGHT = 4000000;$/;"	v
MAX_BLOOM_FILTER_SIZE	./bloom.h	/^static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; \/\/ bytes$/;"	v
MAX_BUCKET_FEERATE	./policy/fees.h	/^    static constexpr double MAX_BUCKET_FEERATE = 1e7;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MAX_CMPCTBLOCK_DEPTH	./validation.h	/^static const int MAX_CMPCTBLOCK_DEPTH = 5;$/;"	v
MAX_DATE	./qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MAX_DATE = QDateTime::fromTime_t(0xFFFFFFFF);$/;"	m	class:TransactionFilterProxy	file:
MAX_DATE	./qt/transactionfilterproxy.h	/^    static const QDateTime MAX_DATE;$/;"	m	class:TransactionFilterProxy
MAX_DISCONNECTED_TX_POOL_SIZE	./validation.h	/^static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;$/;"	v
MAX_FEEFILTER_CHANGE_DELAY	./net_processing.cpp	/^static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;$/;"	v	file:
MAX_FEE_ESTIMATION_TIP_AGE	./validation.h	/^static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;$/;"	v
MAX_FILTER_FEERATE	./policy/fees.h	/^    static constexpr double MAX_FILTER_FEERATE = 1e7;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
MAX_FLTR_FILE_SIZE	./index/blockfilterindex.cpp	/^constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; \/\/ 16 MiB$/;"	v
MAX_FUTURE_BLOCK_TIME	./chain.h	/^static constexpr int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;$/;"	v
MAX_GETDATA_RANDOM_DELAY	./net_processing.cpp	/^static constexpr int64_t MAX_GETDATA_RANDOM_DELAY = 2 * 1000000;$/;"	v	file:
MAX_GETDATA_SZ	./net_processing.cpp	/^static const unsigned int MAX_GETDATA_SZ = 1000;$/;"	v	file:
MAX_GETUTXOS_OUTPOINTS	./rest.cpp	/^static const size_t MAX_GETUTXOS_OUTPOINTS = 15; \/\/allow a max of 15 outpoints to be queried at once$/;"	v	file:
MAX_HASH_FUNCS	./bloom.h	/^static const unsigned int MAX_HASH_FUNCS = 50;$/;"	v
MAX_HEADERS_RESULTS	./validation.h	/^static const unsigned int MAX_HEADERS_RESULTS = 2000;$/;"	v
MAX_HEADERS_SIZE	./httpserver.cpp	/^static const size_t MAX_HEADERS_SIZE = 8192;$/;"	v	file:
MAX_INPUTS_PER_BLOCK	./undo.h	/^static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT \/ MIN_TRANSACTION_INPUT_WEIGHT;$/;"	v
MAX_INV_SZ	./net.h	/^static const unsigned int MAX_INV_SZ = 50000;$/;"	v
MAX_LINE_LENGTH	./torcontrol.cpp	/^static const int MAX_LINE_LENGTH = 100000;$/;"	v	file:
MAX_LOCATOR_SZ	./net.h	/^static const unsigned int MAX_LOCATOR_SZ = 101;$/;"	v
MAX_MAX_SIG_CACHE_SIZE	./script/sigcache.h	/^static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;$/;"	v
MAX_MONEY	./amount.h	/^static const CAmount MAX_MONEY = 21000000 * COIN;$/;"	v
MAX_OPCODE	./script/script.h	/^static const unsigned int MAX_OPCODE = OP_NOP10;$/;"	v
MAX_OPS_PER_SCRIPT	./script/script.h	/^static const int MAX_OPS_PER_SCRIPT = 201;$/;"	v
MAX_OP_RETURN_RELAY	./script/standard.h	/^static const unsigned int MAX_OP_RETURN_RELAY = 83;$/;"	v
MAX_OUTBOUND_CONNECTIONS	./net.h	/^static const int MAX_OUTBOUND_CONNECTIONS = 8;$/;"	v
MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT	./net_processing.cpp	/^static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;$/;"	v	file:
MAX_OUTPUTS_PER_BLOCK	./coins.cpp	/^static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT \/ MIN_TRANSACTION_OUTPUT_WEIGHT;$/;"	v	file:
MAX_P2SH_SIGOPS	./policy/policy.h	/^static const unsigned int MAX_P2SH_SIGOPS = 15;$/;"	v
MAX_PASSPHRASE_SIZE	./qt/guiconstants.h	/^static const int MAX_PASSPHRASE_SIZE = 1024;$/;"	v
MAX_PATH	./compat.h	/^#define MAX_PATH /;"	d
MAX_PEER_TX_ANNOUNCEMENTS	./net_processing.cpp	/^static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENTS = 2 * MAX_INV_SZ;$/;"	v	file:
MAX_PEER_TX_IN_FLIGHT	./net_processing.cpp	/^static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;$/;"	v	file:
MAX_PROTOCOL_MESSAGE_LENGTH	./net.h	/^static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;$/;"	v
MAX_PUBKEYS_PER_MULTISIG	./script/script.h	/^static const int MAX_PUBKEYS_PER_MULTISIG = 20;$/;"	v
MAX_REJECT_MESSAGE_LENGTH	./validation.h	/^static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;$/;"	v
MAX_SCRIPTCHECK_THREADS	./validation.h	/^static const int MAX_SCRIPTCHECK_THREADS = 16;$/;"	v
MAX_SCRIPT_ELEMENT_SIZE	./script/script.h	/^static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;$/;"	v
MAX_SCRIPT_SIZE	./script/script.h	/^static const int MAX_SCRIPT_SIZE = 10000;$/;"	v
MAX_SIZE	./serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MAX_STACK_SIZE	./script/script.h	/^static const int MAX_STACK_SIZE = 1000;$/;"	v
MAX_STANDARD_P2WSH_SCRIPT_SIZE	./policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;$/;"	v
MAX_STANDARD_P2WSH_STACK_ITEMS	./policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;$/;"	v
MAX_STANDARD_P2WSH_STACK_ITEM_SIZE	./policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;$/;"	v
MAX_STANDARD_TX_SIGOPS_COST	./policy/policy.h	/^static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST\/5;$/;"	v
MAX_STANDARD_TX_WEIGHT	./policy/policy.h	/^static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;$/;"	v
MAX_STANDARD_VERSION	./primitives/transaction.h	/^    static const int32_t MAX_STANDARD_VERSION=2;$/;"	m	class:CTransaction
MAX_SUBVERSION_LENGTH	./net.h	/^static const unsigned int MAX_SUBVERSION_LENGTH = 256;$/;"	v
MAX_UNCONNECTING_HEADERS	./validation.h	/^static const int MAX_UNCONNECTING_HEADERS = 10;$/;"	v
MAX_UPLOAD_TIMEFRAME	./net.h	/^static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;$/;"	v
MAX_URI_LENGTH	./qt/qrimagewidget.h	/^static const int MAX_URI_LENGTH = 255;$/;"	v
MAX_VERSION_BITS_DEPLOYMENTS	./consensus/params.h	/^    MAX_VERSION_BITS_DEPLOYMENTS$/;"	e	enum:Consensus::DeploymentPos
MC_DEBUG	./qt/rpcconsole.h	/^        MC_DEBUG,$/;"	e	enum:RPCConsole::MessageClass
MC_ERROR	./qt/rpcconsole.h	/^        MC_ERROR,$/;"	e	enum:RPCConsole::MessageClass
MED_BLOCK_PERIODS	./policy/fees.h	/^    static constexpr unsigned int MED_BLOCK_PERIODS = 24;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MED_DECAY	./policy/fees.h	/^    static constexpr double MED_DECAY = .9952;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MED_HALFLIFE	./policy/fees.h	/^    MED_HALFLIFE = 1,$/;"	m	class:FeeEstimateHorizon
MED_SCALE	./policy/fees.h	/^    static constexpr unsigned int MED_SCALE = 2;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MEMPOOL	./protocol.cpp	/^const char *MEMPOOL="mempool";$/;"	m	namespace:NetMsgType	file:
MEMPOOL_DUMP_VERSION	./validation.cpp	/^static const uint64_t MEMPOOL_DUMP_VERSION = 1;$/;"	v	file:
MEMPOOL_ERROR	./util/error.h	/^    MEMPOOL_ERROR,$/;"	m	class:TransactionError
MEMPOOL_HEIGHT	./txmempool.h	/^static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;$/;"	v
MEMPOOL_MIN	./policy/fees.h	/^    MEMPOOL_MIN,$/;"	m	class:FeeEstimateHorizon::FeeReason
MEMPOOL_REJECTED	./util/error.h	/^    MEMPOOL_REJECTED,$/;"	m	class:TransactionError
MEMTABLE_TEST	./leveldb/table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
MERKLEBLOCK	./protocol.cpp	/^const char *MERKLEBLOCK="merkleblock";$/;"	m	namespace:NetMsgType	file:
MESSAGE_SIZE_OFFSET	./protocol.h	/^    static constexpr size_t MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE;$/;"	m	class:CMessageHeader
MESSAGE_SIZE_SIZE	./protocol.h	/^    static constexpr size_t MESSAGE_SIZE_SIZE = 4;$/;"	m	class:CMessageHeader
MESSAGE_START_SIZE	./protocol.h	/^    static constexpr size_t MESSAGE_START_SIZE = 4;$/;"	m	class:CMessageHeader
MICRO	./validation.cpp	/^#define MICRO /;"	d	file:
MILLI	./validation.cpp	/^#define MILLI /;"	d	file:
MINIMUM_COLUMN_WIDTH	./qt/receivecoinsdialog.h	/^        MINIMUM_COLUMN_WIDTH = 130$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
MINIMUM_COLUMN_WIDTH	./qt/transactionview.h	/^        MINIMUM_COLUMN_WIDTH = 23$/;"	e	enum:TransactionView::ColumnWidths
MINIMUM_CONNECT_TIME	./net_processing.cpp	/^static constexpr int64_t MINIMUM_CONNECT_TIME = 30;$/;"	v	file:
MINIUPNPC_CPPFLAGS	./Makefile	/^MINIUPNPC_CPPFLAGS = $/;"	m
MINIUPNPC_LIBS	./Makefile	/^MINIUPNPC_LIBS = $/;"	m
MIN_BLOCKS_TO_KEEP	./validation.h	/^static const unsigned int MIN_BLOCKS_TO_KEEP = 288;$/;"	v
MIN_BUCKET_FEERATE	./policy/fees.h	/^    static constexpr double MIN_BUCKET_FEERATE = 1000;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
MIN_CORES	./bench/checkqueue.cpp	/^static const int MIN_CORES = 2;$/;"	v	file:
MIN_CORE_FILEDESCRIPTORS	./init.cpp	/^#define MIN_CORE_FILEDESCRIPTORS /;"	d	file:
MIN_DATE	./qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MIN_DATE = QDateTime::fromTime_t(0);$/;"	m	class:TransactionFilterProxy	file:
MIN_DATE	./qt/transactionfilterproxy.h	/^    static const QDateTime MIN_DATE;$/;"	m	class:TransactionFilterProxy
MIN_DISK_SPACE_FOR_BLOCK_FILES	./validation.h	/^static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;$/;"	v
MIN_FINAL_CHANGE	./wallet/coinselection.h	/^static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE\/2;$/;"	v
MIN_PEER_PROTO_VERSION	./version.h	/^static const int MIN_PEER_PROTO_VERSION = GETHEADERS_VERSION;$/;"	v
MIN_SERIALIZABLE_TRANSACTION_WEIGHT	./consensus/consensus.h	/^static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; \/\/ 10 is the lower bound for the size of a serialized CTransaction$/;"	v
MIN_STANDARD_TX_NONWITNESS_SIZE	./policy/policy.h	/^static const unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE = 82;$/;"	v
MIN_TRANSACTION_INPUT_WEIGHT	./undo.h	/^static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), PROTOCOL_VERSION);$/;"	v
MIN_TRANSACTION_OUTPUT_WEIGHT	./coins.cpp	/^static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), PROTOCOL_VERSION);$/;"	v	file:
MIN_TRANSACTION_WEIGHT	./consensus/consensus.h	/^static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; \/\/ 60 is the lower bound for the size of a valid serialized CTransaction$/;"	v
MISC_ERROR	./wallet/feebumper.h	/^    MISC_ERROR,$/;"	m	class:feebumper::Result
MISSING_INPUTS	./util/error.h	/^    MISSING_INPUTS,$/;"	m	class:TransactionError
MKDIR_P	./Makefile	/^MKDIR_P = ..\/build-aux\/install-sh -c -d$/;"	m
MKDIR_P	./secp256k1/Makefile	/^MKDIR_P = build-aux\/install-sh -c -d$/;"	m
MKDIR_P	./univalue/Makefile	/^MKDIR_P = build-aux\/install-sh -c -d$/;"	m
MOC	./Makefile	/^MOC = $/;"	m
MOC_DEFS	./Makefile	/^MOC_DEFS = -DHAVE_CONFIG_H -I$(srcdir)$/;"	m
MODAL	./ui_interface.h	/^        MODAL               = 0x10000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MODEL_UPDATE_DELAY	./qt/guiconstants.h	/^static const int MODEL_UPDATE_DELAY = 250;$/;"	v
MODE_ERROR	./consensus/validation.h	/^        MODE_ERROR,   \/\/!< run-time error$/;"	e	enum:CValidationState::mode_state
MODE_INVALID	./consensus/validation.h	/^        MODE_INVALID, \/\/!< network rule violation (DoS value may be set)$/;"	e	enum:CValidationState::mode_state
MODE_VALID	./consensus/validation.h	/^        MODE_VALID,   \/\/!< everything ok$/;"	e	enum:CValidationState::mode_state
MSG_BLOCK	./protocol.h	/^    MSG_BLOCK = 2,$/;"	e	enum:GetDataMsg
MSG_CMPCT_BLOCK	./protocol.h	/^    MSG_CMPCT_BLOCK = 4,     \/\/!< Defined in BIP152$/;"	e	enum:GetDataMsg
MSG_DONTWAIT	./net.cpp	/^#define MSG_DONTWAIT /;"	d	file:
MSG_ERROR	./ui_interface.h	/^        MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_FILTERED_BLOCK	./protocol.h	/^    MSG_FILTERED_BLOCK = 3,  \/\/!< Defined in BIP37$/;"	e	enum:GetDataMsg
MSG_FILTERED_WITNESS_BLOCK	./protocol.h	/^    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,$/;"	e	enum:GetDataMsg
MSG_HASHBLOCK	./zmq/zmqpublishnotifier.cpp	/^static const char *MSG_HASHBLOCK = "hashblock";$/;"	v	file:
MSG_HASHTX	./zmq/zmqpublishnotifier.cpp	/^static const char *MSG_HASHTX    = "hashtx";$/;"	v	file:
MSG_INFORMATION	./ui_interface.h	/^        MSG_INFORMATION = ICON_INFORMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_NOSIGNAL	./net.cpp	/^#define MSG_NOSIGNAL /;"	d	file:
MSG_NOSIGNAL	./netbase.cpp	/^#define MSG_NOSIGNAL /;"	d	file:
MSG_RAWBLOCK	./zmq/zmqpublishnotifier.cpp	/^static const char *MSG_RAWBLOCK  = "rawblock";$/;"	v	file:
MSG_RAWTX	./zmq/zmqpublishnotifier.cpp	/^static const char *MSG_RAWTX     = "rawtx";$/;"	v	file:
MSG_TX	./protocol.h	/^    MSG_TX = 1,$/;"	e	enum:GetDataMsg
MSG_TYPE_MASK	./protocol.h	/^const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;$/;"	v
MSG_WARNING	./ui_interface.h	/^        MSG_WARNING = (ICON_WARNING | BTN_OK | MODAL),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_WITNESS_BLOCK	./protocol.h	/^    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
MSG_WITNESS_FLAG	./protocol.h	/^const uint32_t MSG_WITNESS_FLAG = 1 << 30;$/;"	v
MSG_WITNESS_TX	./protocol.h	/^    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
MSIZE	./bench/lockedpool.cpp	/^#define MSIZE /;"	d	file:
MTState	./leveldb/db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon24	file:
MTThread	./leveldb/db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon24	file:
MTThreadBody	./leveldb/db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon24
MacDockIconHandler	./qt/macdockiconhandler.h	/^class MacDockIconHandler : public QObject$/;"	c
MacNotificationHandler	./qt/macnotificationhandler.h	/^class MacNotificationHandler : public QObject$/;"	c
MainSignalsInstance	./validationinterface.cpp	/^    explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}$/;"	f	struct:MainSignalsInstance
MainSignalsInstance	./validationinterface.cpp	/^struct MainSignalsInstance {$/;"	s	file:
Maj	./crypto/sha256.cpp	/^uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon40::sha256
Maj	./crypto/sha256_avx2.cpp	/^__m256i inline Maj(__m256i x, __m256i y, __m256i z) { return Or(And(x, y), And(z, Or(x, y))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Maj	./crypto/sha256_sse41.cpp	/^__m128i inline Maj(__m128i x, __m128i y, __m128i z) { return Or(And(x, y), And(z, Or(x, y))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Maj	./crypto/sha512.cpp	/^uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon39::sha512
Maj	./secp256k1/src/hash_impl.h	/^#define Maj(/;"	d
Maj	./secp256k1/src/hash_impl.h	/^#undef Maj$/;"	d
Make	./netmessagemaker.h	/^    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
Make	./netmessagemaker.h	/^    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
MakeChain	./interfaces/chain.cpp	/^std::unique_ptr<Chain> MakeChain() { return MakeUnique<ChainImpl>(); }$/;"	f	namespace:interfaces
MakeDeterministic	./test/addrman_tests.cpp	/^    void MakeDeterministic()$/;"	f	class:CAddrManTest
MakeDeterministic	./test/net_tests.cpp	/^    void MakeDeterministic()$/;"	f	class:CAddrManSerializationMock
MakeFileName	./leveldb/db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeHandler	./interfaces/handler.cpp	/^std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection)$/;"	f	namespace:interfaces
MakeInputIterator	./leveldb/db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	./leveldb/db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	./leveldb/db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeLogFile	./leveldb/db/recovery_test.cc	/^  void MakeLogFile(uint64_t lognum, SequenceNumber seq, Slice key, Slice val) {$/;"	f	class:leveldb::RecoveryTest
MakeNewKey	./key.cpp	/^void CKey::MakeNewKey(bool fCompressedIn) {$/;"	f	class:CKey
MakeNode	./interfaces/node.cpp	/^std::unique_ptr<Node> MakeNode() { return MakeUnique<NodeImpl>(); }$/;"	f	namespace:interfaces
MakeOptional	./optional.h	/^Optional<T> MakeOptional(bool condition, T&& value)$/;"	f
MakeRoomForWrite	./leveldb/db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
MakeSingleColorImage	./qt/platformstyle.cpp	/^void MakeSingleColorImage(QImage& img, const QColor& colorbase)$/;"	f	namespace:__anon67
MakeSpan	./span.h	/^constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }$/;"	f
MakeTables	./leveldb/db/db_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
MakeTransactionRef	./primitives/transaction.h	/^static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }$/;"	f
MakeTransactionRef	./primitives/transaction.h	/^template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }$/;"	f
MakeTried	./addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId)$/;"	f	class:CAddrMan
MakeUnique	./util/memory.h	/^std::unique_ptr<T> MakeUnique(Args&&... args)$/;"	f
MakeWallet	./dummywallet.cpp	/^std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)$/;"	f	namespace:interfaces
MakeWallet	./interfaces/wallet.cpp	/^std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? MakeUnique<WalletImpl>(wallet) : nullptr; }$/;"	f	namespace:interfaces
MakeWalletClient	./interfaces/wallet.cpp	/^std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames)$/;"	f	namespace:interfaces
MakeWalletTx	./interfaces/wallet.cpp	/^WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, const CWalletTx& wtx)$/;"	f	namespace:interfaces::__anon130
MakeWalletTxStatus	./interfaces/wallet.cpp	/^WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)$/;"	f	namespace:interfaces::__anon130
MallocUsage	./memusage.h	/^static inline size_t MallocUsage(size_t alloc)$/;"	f	namespace:memusage
ManifestFileName	./leveldb/db/recovery_test.cc	/^  std::string ManifestFileName() {$/;"	f	class:leveldb::RecoveryTest
ManifestFileNumber	./leveldb/db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	./leveldb/db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MapArgs	./util/system.cpp	/^    typedef std::map<std::string, std::vector<std::string>> MapArgs;$/;"	t	class:ArgsManagerHelper	file:
MapCheckpoints	./chainparams.h	/^typedef std::map<int, uint256> MapCheckpoints;$/;"	t
MapIntoRange	./blockfilter.cpp	/^static uint64_t MapIntoRange(uint64_t x, uint64_t n)$/;"	f	file:
MapPortUPnP	./qt/optionsmodel.h	/^        MapPortUPnP,            \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MapRelay	./net_processing.cpp	/^    typedef std::map<uint256, CTransactionRef> MapRelay;$/;"	t	namespace:__anon88	file:
MarkAddressGood	./net.cpp	/^void CConnman::MarkAddressGood(const CAddress& addr)$/;"	f	class:CConnman
MarkConflicted	./wallet/wallet.cpp	/^void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)$/;"	f	class:CWallet
MarkDirty	./wallet/wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	./wallet/wallet.h	/^    void MarkDirty()$/;"	f	class:CWalletTx
MarkFileNumberUsed	./leveldb/db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
MarkInputsDirty	./wallet/wallet.cpp	/^void CWallet::MarkInputsDirty(const CTransactionRef& tx)$/;"	f	class:CWallet
MarkPreSplitKeys	./wallet/wallet.cpp	/^void CWallet::MarkPreSplitKeys()$/;"	f	class:CWallet
MarkReplaced	./wallet/wallet.cpp	/^bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)$/;"	f	class:CWallet
MarkReserveKeysAsUsed	./wallet/wallet.cpp	/^void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)$/;"	f	class:CWallet
Mask	./leveldb/util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
Mask	./versionbits.cpp	/^    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }$/;"	f	class:__anon126::VersionBitsConditionChecker
MasterKeyMap	./wallet/wallet.h	/^    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;$/;"	t	class:final
Match	./blockfilter.cpp	/^bool GCSFilter::Match(const Element& element) const$/;"	f	class:GCSFilter
Match	./netaddress.cpp	/^bool CSubNet::Match(const CNetAddr &addr) const$/;"	f	class:CSubNet
MatchAny	./blockfilter.cpp	/^bool GCSFilter::MatchAny(const ElementSet& elements) const$/;"	f	class:GCSFilter
MatchError	./leveldb/db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
MatchGCSFilter	./bench/gcs_filter.cpp	/^static void MatchGCSFilter(benchmark::State& state)$/;"	f	file:
MatchInternal	./blockfilter.cpp	/^bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const$/;"	f	class:GCSFilter
MatchMultisig	./script/standard.cpp	/^static bool MatchMultisig(const CScript& script, unsigned int& required, std::vector<valtype>& pubkeys)$/;"	f	file:
MatchPayToPubkey	./script/standard.cpp	/^static bool MatchPayToPubkey(const CScript& script, valtype& pubkey)$/;"	f	file:
MatchPayToPubkeyHash	./script/standard.cpp	/^static bool MatchPayToPubkeyHash(const CScript& script, valtype& pubkeyhash)$/;"	f	file:
Matches	./leveldb/util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaxArray	./test/arith_uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxArray	./test/uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxBytesForLevel	./leveldb/db/version_set.cc	/^static double MaxBytesForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	./leveldb/db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxGrandParentOverlapBytes	./leveldb/db/version_set.cc	/^static int64_t MaxGrandParentOverlapBytes(const Options* options) {$/;"	f	namespace:leveldb
MaxL	./test/arith_uint256_tests.cpp	/^const arith_uint256 MaxL = arith_uint256V(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxL	./test/uint256_tests.cpp	/^const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxMmaps	./leveldb/util/env_posix.cc	/^static int MaxMmaps() {$/;"	f	namespace:leveldb::__anon8
MaxNextLevelOverlappingBytes	./leveldb/db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOpenFiles	./leveldb/util/env_posix.cc	/^static intptr_t MaxOpenFiles() {$/;"	f	namespace:leveldb::__anon8
MaxOutputFileSize	./leveldb/db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaxS	./test/uint256_tests.cpp	/^const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));$/;"	v
MaxUsableEstimate	./policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const$/;"	f	class:CBlockPolicyEstimator
MayHaveUsefulAddressDB	./protocol.h	/^static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {$/;"	f
MaybeAddFile	./leveldb/db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeCompactWalletDB	./wallet/walletdb.cpp	/^void MaybeCompactWalletDB()$/;"	f
MaybeIgnoreError	./leveldb/db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybePunishNode	./net_processing.cpp	/^static bool MaybePunishNode(NodeId nodeid, const CValidationState& state, bool via_compact_block, const std::string& message = "") {$/;"	f	file:
MaybePushAddress	./wallet/rpcwallet.cpp	/^static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)$/;"	f	file:
MaybeResendWalletTxs	./wallet/wallet.cpp	/^void MaybeResendWalletTxs()$/;"	f
MaybeScheduleCompaction	./leveldb/db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
MaybeScheduleProcessQueue	./scheduler.cpp	/^void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {$/;"	f	class:SingleThreadedSchedulerClient
MaybeSetAddrName	./net.cpp	/^void CNode::MaybeSetAddrName(const std::string& addrNameIn) {$/;"	f	class:CNode
MaybeUseHInsteadOfApostrophy	./test/descriptor_tests.cpp	/^std::string MaybeUseHInsteadOfApostrophy(std::string ret)$/;"	f	namespace:__anon56
Median	./leveldb/util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemEnvTest	./leveldb/helpers/memenv/memenv_test.cc	/^  MemEnvTest()$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	./leveldb/helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb	file:
MemPoolRemovalReason	./txmempool.h	/^enum class MemPoolRemovalReason {$/;"	c
MemTable	./leveldb/db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	./leveldb/db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	./leveldb/table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	./leveldb/table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
MemTableInserter	./leveldb/db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon22	file:
MemTableIterator	./leveldb/db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	./leveldb/db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	./leveldb/table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb	file:
MemoryCheck	./test/checkqueue_tests.cpp	/^    MemoryCheck(){};$/;"	f	struct:MemoryCheck
MemoryCheck	./test/checkqueue_tests.cpp	/^    MemoryCheck(bool b_) : b(b_)$/;"	f	struct:MemoryCheck
MemoryCheck	./test/checkqueue_tests.cpp	/^    MemoryCheck(const MemoryCheck& x)$/;"	f	struct:MemoryCheck
MemoryCheck	./test/checkqueue_tests.cpp	/^struct MemoryCheck {$/;"	s	file:
MemoryUsage	./leveldb/util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Memory_Queue	./test/checkqueue_tests.cpp	/^typedef CCheckQueue<MemoryCheck> Memory_Queue;$/;"	t	file:
MempoolEntryRemoved	./validationinterface.cpp	/^void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {$/;"	f	class:CMainSignals
MempoolEviction	./bench/mempool_eviction.cpp	/^static void MempoolEviction(benchmark::State& state)$/;"	f	file:
MempoolInfoToJSON	./rpc/blockchain.cpp	/^UniValue MempoolInfoToJSON(const CTxMemPool& pool)$/;"	f
MempoolToJSON	./rpc/blockchain.cpp	/^UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)$/;"	f
Merge	./leveldb/db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon19::Stats
Merge	./leveldb/util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
Merge	./psbt.cpp	/^bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)$/;"	f	class:PartiallySignedTransaction
Merge	./psbt.cpp	/^void PSBTInput::Merge(const PSBTInput& input)$/;"	f	class:PSBTInput
Merge	./psbt.cpp	/^void PSBTOutput::Merge(const PSBTOutput& output)$/;"	f	class:PSBTOutput
Merge	./script/sign.cpp	/^FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)$/;"	f
MergeSignatureData	./script/sign.cpp	/^void SignatureData::MergeSignatureData(SignatureData sigdata)$/;"	f	class:SignatureData
MergingIterator	./leveldb/table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon11::MergingIterator
MergingIterator	./leveldb/table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon11	file:
MerkleComputation	./test/merkle_tests.cpp	/^static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {$/;"	f	file:
MerkleRoot	./bench/merkle_root.cpp	/^static void MerkleRoot(benchmark::State& state)$/;"	f	file:
Message	./qt/recentrequeststablemodel.h	/^        Message = 2,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
MessageBoxFlags	./ui_interface.h	/^    enum MessageBoxFlags$/;"	g	class:CClientUIInterface
MessageClass	./qt/rpcconsole.h	/^    enum MessageClass {$/;"	g	class:RPCConsole
MessageStart	./chainparams.h	/^    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }$/;"	f	class:CChainParams
MessageStartChars	./protocol.h	/^    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];$/;"	t	class:CMessageHeader
MicroSleep	./test/scheduler_tests.cpp	/^static void MicroSleep(uint64_t n)$/;"	f	file:
MigrateData	./index/txindex.cpp	/^bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator)$/;"	f	class:TxIndex::DB
MilliSleep	./util/time.cpp	/^void MilliSleep(int64_t n)$/;"	f
MillisToTimeval	./netbase.cpp	/^struct timeval MillisToTimeval(int64_t nTimeout)$/;"	f
Mine	./test/versionbits_tests.cpp	/^    VersionBitsTester& Mine(unsigned int height, int32_t nTime, int32_t nVersion) {$/;"	f	class:VersionBitsTester
MineBlock	./test/util.cpp	/^CTxIn MineBlock(const CScript& coinbase_scriptPubKey)$/;"	f
MineBlocksOnDemand	./chainparams.h	/^    bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }$/;"	f	class:CChainParams
MinimizeOnClose	./qt/optionsmodel.h	/^        MinimizeOnClose,        \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MinimizeToTray	./qt/optionsmodel.h	/^        MinimizeToTray,         \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MixColumns	./crypto/ctaes/ctaes.c	/^static void MixColumns(AES_state* s, int inv) {$/;"	f	file:
ModalOverlay	./qt/modaloverlay.cpp	/^ModalOverlay::ModalOverlay(QWidget *parent) :$/;"	f	class:ModalOverlay
ModalOverlay	./qt/modaloverlay.h	/^class ModalOverlay : public QWidget$/;"	c
Mode	./qt/addressbookpage.h	/^    enum Mode {$/;"	g	class:AddressBookPage
Mode	./qt/askpassphrasedialog.h	/^    enum Mode {$/;"	g	class:AskPassphraseDialog
Mode	./qt/editaddressdialog.h	/^    enum Mode {$/;"	g	class:EditAddressDialog
Mode	./qt/notificator.h	/^    enum Mode {$/;"	g	class:Notificator
ModelDB	./leveldb/db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	./leveldb/db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb	file:
ModelIter	./leveldb/db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	./leveldb/db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB	file:
ModelSnapshot	./leveldb/db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB	file:
ModifyPath	./leveldb/util/env_win.cc	/^std::string& ModifyPath(std::string& path)$/;"	f	namespace:leveldb::Win32
ModifyPath	./leveldb/util/env_win.cc	/^std::wstring& ModifyPath(std::wstring& path)$/;"	f	namespace:leveldb::Win32
MoneyRange	./amount.h	/^inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
MoveTo	./sync.h	/^    void MoveTo(CSemaphoreGrant& grant)$/;"	f	class:CSemaphoreGrant
MultX	./crypto/ctaes/ctaes.c	/^static void MultX(AES_state* s) {$/;"	f	file:
MultisigDescriptor	./script/descriptor.cpp	/^    MultisigDescriptor(int threshold, std::vector<std::unique_ptr<PubkeyProvider>> providers) : DescriptorImpl(std::move(providers), {}, "multi"), m_threshold(threshold) {}$/;"	f	class:__anon75::final
MultisigKeys	./test/gen/crypto_gen.cpp	/^rc::Gen<std::vector<CKey>> MultisigKeys()$/;"	f
MurmurHash3	./hash.cpp	/^unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)$/;"	f
MutableTransactionSignatureCreator	./script/sign.cpp	/^MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}$/;"	f	class:MutableTransactionSignatureCreator
MutableTransactionSignatureCreator	./script/sign.h	/^class MutableTransactionSignatureCreator : public BaseSignatureCreator {$/;"	c
MutateTx	./bitcoin-tx.cpp	/^static void MutateTx(CMutableTransaction& tx, const std::string& command,$/;"	f	file:
MutateTxAddInput	./bitcoin-tx.cpp	/^static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutAddr	./bitcoin-tx.cpp	/^static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutData	./bitcoin-tx.cpp	/^static void MutateTxAddOutData(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutMultiSig	./bitcoin-tx.cpp	/^static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutPubKey	./bitcoin-tx.cpp	/^static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutScript	./bitcoin-tx.cpp	/^static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxDelInput	./bitcoin-tx.cpp	/^static void MutateTxDelInput(CMutableTransaction& tx, const std::string& strInIdx)$/;"	f	file:
MutateTxDelOutput	./bitcoin-tx.cpp	/^static void MutateTxDelOutput(CMutableTransaction& tx, const std::string& strOutIdx)$/;"	f	file:
MutateTxLocktime	./bitcoin-tx.cpp	/^static void MutateTxLocktime(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
MutateTxRBFOptIn	./bitcoin-tx.cpp	/^static void MutateTxRBFOptIn(CMutableTransaction& tx, const std::string& strInIdx)$/;"	f	file:
MutateTxSign	./bitcoin-tx.cpp	/^static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)$/;"	f	file:
MutateTxVersion	./bitcoin-tx.cpp	/^static void MutateTxVersion(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
Mutex	./leveldb/port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	./leveldb/port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	./leveldb/port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	./leveldb/port/port_win.cc	/^Mutex::Mutex() :$/;"	f	class:leveldb::port::Mutex
Mutex	./leveldb/port/port_win.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	./sync.h	/^typedef AnnotatedMixin<std::mutex> Mutex;$/;"	t
MutexLock	./leveldb/util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
NAMED_ARG	./rpc/util.cpp	/^        NAMED_ARG, \/\/ Only set on first recursion$/;"	m	class:Sections::OuterType	file:
NCONST_PTR	./serialize.h	/^inline T* NCONST_PTR(const T* val)$/;"	f
NEGATE	./test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
NEGATE_REG	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
NEGATE_TEST	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
NETUNREACHABLE	./netbase.cpp	/^    NETUNREACHABLE = 0x03,   \/\/!< Network unreachable$/;"	e	enum:uint8_t	file:
NET_INTERNAL	./netaddress.h	/^    NET_INTERNAL,$/;"	e	enum:Network
NET_IPV4	./netaddress.h	/^    NET_IPV4,$/;"	e	enum:Network
NET_IPV6	./netaddress.h	/^    NET_IPV6,$/;"	e	enum:Network
NET_MAX	./netaddress.h	/^    NET_MAX,$/;"	e	enum:Network
NET_MESSAGE_COMMAND_OTHER	./net.cpp	/^const std::string NET_MESSAGE_COMMAND_OTHER = "*other*";$/;"	v
NET_ONION	./netaddress.h	/^    NET_ONION,$/;"	e	enum:Network
NET_TEREDO	./netaddress.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_UNKNOWN	./netaddress.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	./netaddress.h	/^    NET_UNROUTABLE = 0,$/;"	e	enum:Network
NM	./Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	./secp256k1/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	./univalue/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	./Makefile	/^NMEDIT = nmedit$/;"	m
NMEDIT	./secp256k1/Makefile	/^NMEDIT = nmedit$/;"	m
NMEDIT	./univalue/Makefile	/^NMEDIT = nmedit$/;"	m
NO	./rpc/util.h	/^        NO,$/;"	m	class:RPCArg::Optional
NO	./script/descriptor.cpp	/^    NO,$/;"	m	class:__anon75::DeriveType	file:
NO	./script/ismine.cpp	/^    NO = 0,         \/\/!< Not ours$/;"	m	class:__anon85::IsMineResult	file:
NOAUTH	./netbase.cpp	/^    NOAUTH = 0x00,        \/\/!< No authentication required$/;"	e	enum:uint8_t	file:
NODE_BLOOM	./protocol.h	/^    NODE_BLOOM = (1 << 2),$/;"	e	enum:uint64_t
NODE_GETUTXO	./protocol.h	/^    NODE_GETUTXO = (1 << 1),$/;"	e	enum:uint64_t
NODE_NETWORK	./protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:uint64_t
NODE_NETWORK_LIMITED	./protocol.h	/^    NODE_NETWORK_LIMITED = (1 << 10),$/;"	e	enum:uint64_t
NODE_NETWORK_LIMITED_MIN_BLOCKS	./validation.h	/^static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;$/;"	v
NODE_NONE	./protocol.h	/^    NODE_NONE = 0,$/;"	e	enum:uint64_t
NODE_RELAY	./util/system.h	/^    NODE_RELAY,$/;"	m	class:OptionsCategory
NODE_WITNESS	./protocol.h	/^    NODE_WITNESS = (1 << 3),$/;"	e	enum:uint64_t
NODE_XTHIN	./protocol.h	/^    NODE_XTHIN = (1 << 4),$/;"	e	enum:uint64_t
NODISCARD	./attributes.h	/^#    define NODISCARD /;"	d
NOMINMAX	./compat.h	/^#define NOMINMAX$/;"	d
NOMINMAX	./fs.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	./qt/guiutil.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	./support/lockedpool.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	./util/system.cpp	/^#define NOMINMAX$/;"	d	file:
NONCRITICAL_ERROR	./wallet/walletdb.h	/^    NONCRITICAL_ERROR,$/;"	m	class:DBErrors
NONE	./consensus/validation.h	/^    NONE,                    \/\/!< not actually invalid$/;"	m	class:ValidationInvalidReason
NONE	./policy/fees.h	/^    NONE,$/;"	m	class:FeeEstimateHorizon::FeeReason
NONE	./qt/clientmodel.h	/^    NONE,$/;"	m	class:BlockSource
NONE	./test/script_tests.cpp	/^    NONE,$/;"	m	class:__anon58::WitnessMode	file:
NONE	./test/util_tests.cpp	/^    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };$/;"	e	enum:ChainMergeTestingSetup::Action	file:
NONE	./test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
NONE	./validation.cpp	/^    NONE,$/;"	m	class:FlushStateMode	file:
NORMAL_INSTALL	./Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	./secp256k1/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	./univalue/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	./Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	./secp256k1/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	./univalue/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTALLOWED	./netbase.cpp	/^    NOTALLOWED = 0x02,       \/\/!< Connection not allowed by ruleset$/;"	e	enum:uint8_t	file:
NOTFOUND	./protocol.cpp	/^const char *NOTFOUND="notfound";$/;"	m	namespace:NetMsgType	file:
NOWARN_CXXFLAGS	./Makefile	/^NOWARN_CXXFLAGS =  -Wno-unused-parameter -Wno-self-assign -Wno-unused-local-typedef -Wno-deprecated-register -Wno-implicit-fallthrough$/;"	m
NO_ACCEPTABLE	./netbase.cpp	/^    NO_ACCEPTABLE = 0xff, \/\/!< No acceptable methods$/;"	e	enum:uint8_t	file:
NO_BLOOM_VERSION	./version.h	/^static const int NO_BLOOM_VERSION = 70011;$/;"	v
NO_CHANGES	./qt/addresstablemodel.h	/^        NO_CHANGES,             \/**< No changes were made during edit operation *\/$/;"	e	enum:AddressTableModel::EditStatus
NO_ENTRY	./test/coins_tests.cpp	/^const static char NO_ENTRY = -1;$/;"	v	file:
NO_THREAD_SAFETY_ANALYSIS	./leveldb/port/thread_annotations.h	/^#define NO_THREAD_SAFETY_ANALYSIS$/;"	d
NO_THREAD_SAFETY_ANALYSIS	./net.h	/^    void Stop() NO_THREAD_SAFETY_ANALYSIS;$/;"	m	class:CConnman
NO_THREAD_SAFETY_ANALYSIS	./threadsafety.h	/^#define NO_THREAD_SAFETY_ANALYSIS /;"	d
NO_THREAD_SAFETY_ANALYSIS	./threadsafety.h	/^#define NO_THREAD_SAFETY_ANALYSIS$/;"	d
NO_THREAD_SAFETY_ANALYSIS	./wallet/wallet.h	/^    CAmount GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;$/;"	m	class:CWalletTx
NO_THREAD_SAFETY_ANALYSIS	./wallet/wallet.h	/^    std::set<uint256> GetConflicts() const NO_THREAD_SAFETY_ANALYSIS;$/;"	m	class:CWalletTx
NO_TIMEOUT	./consensus/params.h	/^    static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();$/;"	m	struct:Consensus::BIP9Deployment
NULL_INDEX	./primitives/transaction.h	/^    static constexpr uint32_t NULL_INDEX = std::numeric_limits<uint32_t>::max();$/;"	m	class:COutPoint
NUM	./rpc/util.h	/^        NUM,$/;"	m	class:RPCArg::Type
NUMBER_OF_COLUMNS	./qt/recentrequeststablemodel.h	/^        NUMBER_OF_COLUMNS$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
NUM_GETBLOCKSTATS_PERCENTILES	./rpc/blockchain.h	/^static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;$/;"	v
NUM_ITEMS	./qt/overviewpage.cpp	/^#define NUM_ITEMS /;"	d	file:
NUM_LIMBS	./secp256k1/src/num_gmp.h	/^#define NUM_LIMBS /;"	d
NUM_MULTIPLES_1BTC	./test/compress_tests.cpp	/^#define NUM_MULTIPLES_1BTC /;"	d	file:
NUM_MULTIPLES_50BTC	./test/compress_tests.cpp	/^#define NUM_MULTIPLES_50BTC /;"	d	file:
NUM_MULTIPLES_CENT	./test/compress_tests.cpp	/^#define NUM_MULTIPLES_CENT /;"	d	file:
NUM_MULTIPLES_UNIT	./test/compress_tests.cpp	/^#define NUM_MULTIPLES_UNIT /;"	d	file:
NUM_OS_RANDOM_BYTES	./random.h	/^static const int NUM_OS_RANDOM_BYTES = 32;$/;"	v
NUM_SIMULATION_ITERATIONS	./test/coins_tests.cpp	/^static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;$/;"	v	file:
N_SIGHASH_OPTS	./bitcoin-tx.cpp	/^static const unsigned int N_SIGHASH_OPTS = 6;$/;"	v	file:
Name	./leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	./leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	./leveldb/db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	./leveldb/db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	./leveldb/table/filter_block_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::TestHashFilter
Name	./leveldb/table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon15::ReverseKeyComparator
Name	./leveldb/util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon3::BloomFilterPolicy
Name	./leveldb/util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon7::BytewiseComparatorImpl
Name	./qt/rpcconsole.cpp	/^    const char *Name() { return "Qt"; }$/;"	f	class:QtRPCTimerInterface
NativeSecp256k1	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^public class NativeSecp256k1 {$/;"	c
NativeSecp256k1Test	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^public class NativeSecp256k1Test {$/;"	c
NativeSecp256k1Util	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^public class NativeSecp256k1Util{$/;"	c
NeedsCompaction	./leveldb/db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
Negate	./key.cpp	/^bool CKey::Negate()$/;"	f	class:CKey
NegateSignatureS	./test/script_tests.cpp	/^void static NegateSignatureS(std::vector<unsigned char>& vchSig) {$/;"	f	file:
NetEventsInterface	./net.h	/^class NetEventsInterface$/;"	c
NetMsgType	./protocol.cpp	/^namespace NetMsgType {$/;"	n	file:
NetMsgType	./protocol.h	/^namespace NetMsgType {$/;"	n
NetNodeId	./qt/peertablemodel.h	/^        NetNodeId = 0,$/;"	e	enum:PeerTableModel::ColumnIndex
NetmaskBits	./netaddress.cpp	/^static inline int NetmaskBits(uint8_t x)$/;"	f	file:
Network	./netaddress.h	/^enum Network$/;"	g
NetworkArg	./util/system.cpp	/^    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)$/;"	f	class:ArgsManagerHelper
NetworkError	./netbase.cpp	/^    NetworkError,$/;"	m	class:IntrRecvError	file:
NetworkErrorString	./netbase.cpp	/^std::string NetworkErrorString(int err)$/;"	f
NetworkIDString	./chainparams.h	/^    std::string NetworkIDString() const { return strNetworkID; }$/;"	f	class:CChainParams
NetworkStyle	./qt/networkstyle.cpp	/^NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *_titleAddText):$/;"	f	class:NetworkStyle
NetworkStyle	./qt/networkstyle.h	/^class NetworkStyle$/;"	c
Neuter	./key.cpp	/^CExtPubKey CExtKey::Neuter() const {$/;"	f	class:CExtKey
New	./leveldb/db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewAppendableFile	./leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewAppendableFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewAppendableFile	./leveldb/include/leveldb/env.h	/^  Status NewAppendableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewAppendableFile	./leveldb/util/env.cc	/^Status Env::NewAppendableFile(const std::string& fname, WritableFile** result) {$/;"	f	class:leveldb::Env
NewAppendableFile	./leveldb/util/env_posix.cc	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewAppendableFile	./leveldb/util/env_win.cc	/^Status Win32Env::NewAppendableFile( const std::string& fname, WritableFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewAppendableFile	./leveldb/util/testutil.h	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewBloomFilterPolicy	./leveldb/util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	./leveldb/db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	./leveldb/db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	./leveldb/table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	./leveldb/db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	./leveldb/table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	./leveldb/table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	./leveldb/db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	./leveldb/util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
NewInternalIterator	./leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	./dbwrapper.h	/^    CDBIterator *NewIterator()$/;"	f	class:CDBWrapper
NewIterator	./leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	./leveldb/db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	./leveldb/db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	./leveldb/db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	./leveldb/table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	./leveldb/table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	./leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	./leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	./leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	./leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewKeyPool	./wallet/wallet.cpp	/^bool CWallet::NewKeyPool()$/;"	f	class:CWallet
NewLRUCache	./leveldb/util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewLogger	./leveldb/include/leveldb/env.h	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::EnvWrapper
NewLogger	./leveldb/util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon8::PosixEnv
NewLogger	./leveldb/util/env_win.cc	/^Status Win32Env::NewLogger( const std::string& fname, Logger** result )$/;"	f	class:leveldb::Win32::Win32Env
NewMemEnv	./leveldb/helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	./leveldb/table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	./leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewPoWValidBlock	./net_processing.cpp	/^void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {$/;"	f	class:PeerLogicValidation
NewPoWValidBlock	./validationinterface.cpp	/^    boost::signals2::scoped_connection NewPoWValidBlock;$/;"	m	struct:ValidationInterfaceConnections	file:
NewPoWValidBlock	./validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;$/;"	m	struct:MainSignalsInstance	file:
NewPoWValidBlock	./validationinterface.cpp	/^void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {$/;"	f	class:CMainSignals
NewPoWValidBlock	./validationinterface.h	/^    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};$/;"	f	class:CValidationInterface
NewRandomAccessFile	./leveldb/db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewRandomAccessFile	./leveldb/include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	./leveldb/util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewRandomAccessFile	./leveldb/util/env_win.cc	/^Status Win32Env::NewRandomAccessFile( const std::string& fname, RandomAccessFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewSendingAddress	./qt/editaddressdialog.h	/^        NewSendingAddress,$/;"	e	enum:EditAddressDialog::Mode
NewSequentialFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewSequentialFile	./leveldb/include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	./leveldb/util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewSequentialFile	./leveldb/util/env_win.cc	/^Status Win32Env::NewSequentialFile( const std::string& fname, SequentialFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewTableIterator	./leveldb/db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon30::Repairer	file:
NewTimer	./qt/rpcconsole.cpp	/^    RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis)$/;"	f	class:QtRPCTimerInterface
NewTwoLevelIterator	./leveldb/table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewTx	./policy/fees.cpp	/^unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)$/;"	f	class:TxConfirmStats
NewWritableFile	./leveldb/db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	./leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewWritableFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon35::InMemoryEnv
NewWritableFile	./leveldb/include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	./leveldb/util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon8::PosixEnv
NewWritableFile	./leveldb/util/env_win.cc	/^Status Win32Env::NewWritableFile( const std::string& fname, WritableFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewWritableFile	./leveldb/util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	./leveldb/db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	./chain.h	/^    CBlockIndex *Next(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Next	./dbwrapper.cpp	/^void CDBIterator::Next() { piter->Next(); }$/;"	f	class:CDBIterator
Next	./leveldb/db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon29::DBIter
Next	./leveldb/db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	./leveldb/db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	./leveldb/db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	./leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	./leveldb/db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	./leveldb/table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	./leveldb/table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon12::EmptyIterator
Next	./leveldb/table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	./leveldb/table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon11::MergingIterator
Next	./leveldb/table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
Next	./leveldb/util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
Next	./txdb.cpp	/^void CCoinsViewDBCursor::Next()$/;"	f	class:CCoinsViewDBCursor
NextEntryOffset	./leveldb/table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NextLength	./leveldb/util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Load	./leveldb/port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Load	./leveldb/port/port_win.cc	/^void* AtomicPointer::NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	./leveldb/db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	./leveldb/db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	./leveldb/port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Store	./leveldb/port/port_win.cc	/^void AtomicPointer::NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoOpLogger	./leveldb/helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon35	file:
NoWriteTestPreFault	./leveldb/db/fault_injection_test.cc	/^  void NoWriteTestPreFault() {$/;"	f	class:leveldb::FaultInjectionTest
NoWriteTestReopenWithFault	./leveldb/db/fault_injection_test.cc	/^  void NoWriteTestReopenWithFault(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
Node	./interfaces/node.h	/^class Node$/;"	c	namespace:interfaces
Node	./leveldb/db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	./leveldb/db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NodeEvictionCandidate	./net.cpp	/^struct NodeEvictionCandidate$/;"	s	file:
NodeFullyConnected	./net.cpp	/^bool CConnman::NodeFullyConnected(const CNode* pnode)$/;"	f	class:CConnman
NodeId	./net.h	/^typedef int64_t NodeId;$/;"	t
NodeImpl	./interfaces/node.cpp	/^    NodeImpl() { m_interfaces.chain = MakeChain(); }$/;"	f	class:interfaces::__anon128::NodeImpl
NodeImpl	./interfaces/node.cpp	/^class NodeImpl : public Node$/;"	c	namespace:interfaces::__anon128	file:
NodeLessThan	./qt/peertablemodel.h	/^    NodeLessThan(int nColumn, Qt::SortOrder fOrder) :$/;"	f	class:NodeLessThan
NodeLessThan	./qt/peertablemodel.h	/^class NodeLessThan$/;"	c
None	./qt/notificator.h	/^        None,                       \/**< Ignore informational notifications, and show a modal pop-up dialog for Critical notifications. *\/$/;"	e	enum:Notificator::Mode
NotAccepted	./qt/transactionrecord.h	/^        NotAccepted         \/**< Mined but not accepted *\/$/;"	e	enum:TransactionStatus::Status
NotFound	./leveldb/include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	./leveldb/include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Note	./secp256k1/src/asm/field_10x26_arm.s	/^	Note: do not read from a[] after here, it may overlap with r[]$/;"	d
Note	./secp256k1/src/asm/field_10x26_arm.s	/^	Note: do not write to r[] here, it may overlap with a[]$/;"	d
Notifications	./interfaces/chain.h	/^    class Notifications$/;"	c	class:interfaces::Chain
NotificationsHandlerImpl	./interfaces/chain.cpp	/^    explicit NotificationsHandlerImpl(Chain& chain, Chain::Notifications& notifications)$/;"	f	class:interfaces::__anon129::NotificationsHandlerImpl
NotificationsHandlerImpl	./interfaces/chain.cpp	/^class NotificationsHandlerImpl : public Handler, CValidationInterface$/;"	c	namespace:interfaces::__anon129	file:
Notificator	./qt/notificator.cpp	/^Notificator::Notificator(const QString &_programName, QSystemTrayIcon *_trayIcon, QWidget *_parent) :$/;"	f	class:Notificator
Notificator	./qt/notificator.h	/^class Notificator: public QObject$/;"	c
NotifyAddressBookChanged	./qt/walletmodel.cpp	/^static void NotifyAddressBookChanged(WalletModel *walletmodel,$/;"	f	file:
NotifyAddressBookChanged	./wallet/wallet.h	/^            ChangeType status)> NotifyAddressBookChanged;$/;"	m	class:final
NotifyAlertChanged	./qt/clientmodel.cpp	/^static void NotifyAlertChanged(ClientModel *clientmodel)$/;"	f	file:
NotifyAlertChanged	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;$/;"	m	struct:UISignals	file:
NotifyAlertChanged	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);$/;"	v
NotifyAlertChanged	./ui_interface.cpp	/^void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }$/;"	f	class:CClientUIInterface
NotifyBlock	./zmq/zmqabstractnotifier.cpp	/^bool CZMQAbstractNotifier::NotifyBlock(const CBlockIndex * \/*CBlockIndex*\/)$/;"	f	class:CZMQAbstractNotifier
NotifyBlock	./zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)$/;"	f	class:CZMQPublishHashBlockNotifier
NotifyBlock	./zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)$/;"	f	class:CZMQPublishRawBlockNotifier
NotifyBlockTip	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyBlockTipSig> NotifyBlockTip;$/;"	m	struct:UISignals	file:
NotifyBlockTip	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyBlockTip);$/;"	v
NotifyBlockTip	./ui_interface.cpp	/^void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyBlockTip(b, i); }$/;"	f	class:CClientUIInterface
NotifyCanGetAddressesChanged	./qt/walletmodel.cpp	/^static void NotifyCanGetAddressesChanged(WalletModel* walletmodel)$/;"	f	file:
NotifyCanGetAddressesChanged	./wallet/wallet.h	/^    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;$/;"	m	class:final
NotifyEntryAdded	./txmempool.h	/^    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	./txmempool.h	/^    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	./validation.cpp	/^    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {$/;"	f	class:ConnectTrace
NotifyHeaderTip	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyHeaderTipSig> NotifyHeaderTip;$/;"	m	struct:UISignals	file:
NotifyHeaderTip	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyHeaderTip);$/;"	v
NotifyHeaderTip	./ui_interface.cpp	/^void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }$/;"	f	class:CClientUIInterface
NotifyKeyStoreStatusChanged	./qt/walletmodel.cpp	/^static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel)$/;"	f	file:
NotifyNetworkActiveChanged	./qt/clientmodel.cpp	/^static void NotifyNetworkActiveChanged(ClientModel *clientmodel, bool networkActive)$/;"	f	file:
NotifyNetworkActiveChanged	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;$/;"	m	struct:UISignals	file:
NotifyNetworkActiveChanged	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);$/;"	v
NotifyNetworkActiveChanged	./ui_interface.cpp	/^void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }$/;"	f	class:CClientUIInterface
NotifyNumConnectionsChanged	./net.cpp	/^void CConnman::NotifyNumConnectionsChanged()$/;"	f	class:CConnman
NotifyNumConnectionsChanged	./qt/clientmodel.cpp	/^static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)$/;"	f	file:
NotifyNumConnectionsChanged	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;$/;"	m	struct:UISignals	file:
NotifyNumConnectionsChanged	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);$/;"	v
NotifyNumConnectionsChanged	./ui_interface.cpp	/^void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }$/;"	f	class:CClientUIInterface
NotifyStatusChanged	./wallet/crypter.h	/^    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;$/;"	m	class:CCryptoKeyStore
NotifyTransaction	./zmq/zmqabstractnotifier.cpp	/^bool CZMQAbstractNotifier::NotifyTransaction(const CTransaction &\/*transaction*\/)$/;"	f	class:CZMQAbstractNotifier
NotifyTransaction	./zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)$/;"	f	class:CZMQPublishHashTransactionNotifier
NotifyTransaction	./zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)$/;"	f	class:CZMQPublishRawTransactionNotifier
NotifyTransactionChanged	./qt/transactiontablemodel.cpp	/^static void NotifyTransactionChanged(TransactionTableModel *ttm, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyTransactionChanged	./qt/walletmodel.cpp	/^static void NotifyTransactionChanged(WalletModel *walletmodel, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyTransactionChanged	./wallet/wallet.h	/^            ChangeType status)> NotifyTransactionChanged;$/;"	m	class:final
NotifyUnload	./qt/walletmodel.cpp	/^static void NotifyUnload(WalletModel* walletModel)$/;"	f	file:
NotifyUnload	./wallet/wallet.h	/^    boost::signals2::signal<void ()> NotifyUnload;$/;"	m	class:final
NotifyWatchonlyChanged	./qt/walletmodel.cpp	/^static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly)$/;"	f	file:
NotifyWatchonlyChanged	./wallet/wallet.h	/^    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;$/;"	m	class:final
NowMicros	./leveldb/include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	./leveldb/util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon8::PosixEnv
NowMicros	./leveldb/util/env_win.cc	/^uint64_t Win32Env::NowMicros()$/;"	f	class:leveldb::Win32::Win32Env
NullUniValue	./univalue/lib/univalue.cpp	/^const UniValue NullUniValue;$/;"	v
Num	./test/script_tests.cpp	/^    TestBuilder& Num(int num)$/;"	f	class:__anon58::TestBuilder
NumConnections	./net.h	/^    enum NumConnections {$/;"	g	class:CConnman
NumConnections	./qt/clientmodel.h	/^enum NumConnections {$/;"	g
NumEntries	./leveldb/table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	./leveldb/db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	./leveldb/db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	./leveldb/db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumLogs	./leveldb/db/recovery_test.cc	/^  int NumLogs() {$/;"	f	class:leveldb::RecoveryTest
NumRestarts	./leveldb/table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	./leveldb/db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumTables	./leveldb/db/recovery_test.cc	/^  int NumTables() {$/;"	f	class:leveldb::RecoveryTest
NumberString	./leveldb/db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	./leveldb/util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OBFUSCATE_KEY_KEY	./dbwrapper.h	/^    static const std::string OBFUSCATE_KEY_KEY;$/;"	m	class:CDBWrapper
OBFUSCATE_KEY_NUM_BYTES	./dbwrapper.cpp	/^const unsigned int CDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;$/;"	m	class:CDBWrapper	file:
OBFUSCATE_KEY_NUM_BYTES	./dbwrapper.h	/^    static const unsigned int OBFUSCATE_KEY_NUM_BYTES;$/;"	m	class:CDBWrapper
OBJ	./rpc/util.cpp	/^        OBJ,$/;"	m	class:Sections::OuterType	file:
OBJ	./rpc/util.h	/^        OBJ,$/;"	m	class:RPCArg::Type
OBJCOPY	./Makefile	/^OBJCOPY = $/;"	m
OBJCXX	./Makefile	/^OBJCXX = g++ -std=c++11$/;"	m
OBJCXXCOMPILE	./Makefile	/^OBJCXXCOMPILE = $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
OBJCXXDEPMODE	./Makefile	/^OBJCXXDEPMODE = depmode=gcc3$/;"	m
OBJCXXFLAGS	./Makefile	/^OBJCXXFLAGS = -g -O2$/;"	m
OBJCXXLD	./Makefile	/^OBJCXXLD = $(OBJCXX)$/;"	m
OBJCXXLINK	./Makefile	/^OBJCXXLINK = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
OBJDUMP	./Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	./secp256k1/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	./univalue/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	./Makefile	/^OBJEXT = o$/;"	m
OBJEXT	./secp256k1/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	./univalue/Makefile	/^OBJEXT = o$/;"	m
OBJ_USER_KEYS	./rpc/util.h	/^        OBJ_USER_KEYS, \/\/!< Special type where the user must set the keys e.g. to define multiple addresses; as opposed to e.g. an options object where the keys are predefined$/;"	m	class:RPCArg::Type
OK	./leveldb/include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OK	./netbase.cpp	/^    OK,$/;"	m	class:IntrRecvError	file:
OK	./qt/addresstablemodel.h	/^        OK,                     \/**< Everything ok *\/$/;"	e	enum:AddressTableModel::EditStatus
OK	./qt/walletmodel.h	/^        OK,$/;"	e	enum:WalletModel::StatusCode
OK	./util/error.h	/^    OK, \/\/!< No error$/;"	m	class:TransactionError
OK	./wallet/feebumper.h	/^    OK,$/;"	m	class:feebumper::Result
OLDEST_ESTIMATE_HISTORY	./policy/fees.h	/^    static const unsigned int OLDEST_ESTIMATE_HISTORY = 6 * 1008;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
OMITTED	./rpc/util.h	/^        OMITTED,$/;"	m	class:RPCArg::Optional
OMITTED_NAMED_ARG	./rpc/util.h	/^        OMITTED_NAMED_ARG,$/;"	m	class:RPCArg::Optional
OPT	./leveldb/Makefile	/^OPT ?= -O2 -DNDEBUG$/;"	m
OPTIONS	./util/system.h	/^    OPTIONS,$/;"	m	class:OptionsCategory
OP_0	./script/script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	./script/script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_1	./script/script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_10	./script/script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_11	./script/script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_12	./script/script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_13	./script/script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_14	./script/script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_15	./script/script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_16	./script/script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_1ADD	./script/script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1NEGATE	./script/script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1SUB	./script/script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_2	./script/script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2DIV	./script/script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DROP	./script/script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DUP	./script/script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2MUL	./script/script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2OVER	./script/script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2ROT	./script/script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2SWAP	./script/script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_3	./script/script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3DUP	./script/script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_4	./script/script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_5	./script/script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_6	./script/script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_7	./script/script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_8	./script/script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_9	./script/script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_ABS	./script/script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ADD	./script/script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_AND	./script/script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_BOOLAND	./script/script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLOR	./script/script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_CAT	./script/script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CHECKLOCKTIMEVERIFY	./script/script.h	/^    OP_CHECKLOCKTIMEVERIFY = 0xb1,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	./script/script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	./script/script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKSEQUENCEVERIFY	./script/script.h	/^    OP_CHECKSEQUENCEVERIFY = 0xb2,$/;"	e	enum:opcodetype
OP_CHECKSIG	./script/script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	./script/script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	./script/script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_DEPTH	./script/script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DIV	./script/script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DROP	./script/script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DUP	./script/script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_ELSE	./script/script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ENDIF	./script/script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_EQUAL	./script/script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	./script/script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_FALSE	./script/script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	./script/script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_GREATERTHAN	./script/script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	./script/script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_HASH160	./script/script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH256	./script/script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_IF	./script/script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IFDUP	./script/script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	./script/script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	./script/script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_LEFT	./script/script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LESSTHAN	./script/script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	./script/script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LSHIFT	./script/script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_MAX	./script/script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MIN	./script/script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MOD	./script/script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MUL	./script/script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_NEGATE	./script/script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NIP	./script/script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NOP	./script/script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP1	./script/script.h	/^    OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP10	./script/script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP2	./script/script.h	/^    OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,$/;"	e	enum:opcodetype
OP_NOP3	./script/script.h	/^    OP_NOP3 = OP_CHECKSEQUENCEVERIFY,$/;"	e	enum:opcodetype
OP_NOP4	./script/script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP5	./script/script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP6	./script/script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP7	./script/script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP8	./script/script.h	/^    OP_NOP8 = 0xb7,$/;"	e	enum:opcodetype
OP_NOP9	./script/script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOT	./script/script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOTIF	./script/script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NUMEQUAL	./script/script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	./script/script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	./script/script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_OR	./script/script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OVER	./script/script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_PICK	./script/script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PUSHDATA1	./script/script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA2	./script/script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA4	./script/script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_RESERVED	./script/script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED1	./script/script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED2	./script/script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RETURN	./script/script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RIGHT	./script/script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIPEMD160	./script/script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_ROLL	./script/script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROT	./script/script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_RSHIFT	./script/script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_SHA1	./script/script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA256	./script/script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SIZE	./script/script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SUB	./script/script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUBSTR	./script/script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SWAP	./script/script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_TOALTSTACK	./script/script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TRUE	./script/script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	./script/script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_VER	./script/script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VERIF	./script/script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIFY	./script/script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERNOTIF	./script/script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_WITHIN	./script/script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_XOR	./script/script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
ORPHAN_TX_EXPIRE_INTERVAL	./net_processing.cpp	/^static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;$/;"	v	file:
ORPHAN_TX_EXPIRE_TIME	./net_processing.cpp	/^static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;$/;"	v	file:
OTOOL	./Makefile	/^OTOOL = otool$/;"	m
OTOOL	./secp256k1/Makefile	/^OTOOL = otool$/;"	m
OTOOL	./univalue/Makefile	/^OTOOL = otool$/;"	m
OTOOL64	./Makefile	/^OTOOL64 = :$/;"	m
OTOOL64	./secp256k1/Makefile	/^OTOOL64 = :$/;"	m
OTOOL64	./univalue/Makefile	/^OTOOL64 = :$/;"	m
OUTPOINT	./test/coins_tests.cpp	/^const static COutPoint OUTPOINT;$/;"	v	file:
OUTPUT_GROUP_MAX_ENTRIES	./wallet/wallet.cpp	/^static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;$/;"	v	file:
OUTPUT_SIZE	./crypto/hkdf_sha256_32.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CHKDF_HMAC_SHA256_L32
OUTPUT_SIZE	./crypto/hmac_sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CHMAC_SHA256
OUTPUT_SIZE	./crypto/hmac_sha512.h	/^    static const size_t OUTPUT_SIZE = 64;$/;"	m	class:CHMAC_SHA512
OUTPUT_SIZE	./crypto/ripemd160.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CRIPEMD160
OUTPUT_SIZE	./crypto/sha1.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CSHA1
OUTPUT_SIZE	./crypto/sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CSHA256
OUTPUT_SIZE	./crypto/sha512.h	/^    static constexpr size_t OUTPUT_SIZE = 64;$/;"	m	class:CSHA512
OUTPUT_SIZE	./hash.h	/^    static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;$/;"	m	class:CHash160
OUTPUT_SIZE	./hash.h	/^    static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;$/;"	m	class:CHash256
OUTPUT_TYPE_STRING_BECH32	./outputtype.cpp	/^static const std::string OUTPUT_TYPE_STRING_BECH32 = "bech32";$/;"	v	file:
OUTPUT_TYPE_STRING_LEGACY	./outputtype.cpp	/^static const std::string OUTPUT_TYPE_STRING_LEGACY = "legacy";$/;"	v	file:
OUTPUT_TYPE_STRING_P2SH_SEGWIT	./outputtype.cpp	/^static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = "p2sh-segwit";$/;"	v	file:
OldInfoLogFileName	./leveldb/db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OnRPCStarted	./init.cpp	/^static void OnRPCStarted()$/;"	f	file:
OnRPCStopped	./init.cpp	/^static void OnRPCStopped()$/;"	f	file:
OnStarted	./rpc/server.cpp	/^void RPCServer::OnStarted(std::function<void ()> slot)$/;"	f	class:RPCServer
OnStopped	./rpc/server.cpp	/^void RPCServer::OnStopped(std::function<void ()> slot)$/;"	f	class:RPCServer
OnceType	./leveldb/port/port_example.h	/^typedef intptr_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	./leveldb/port/port_posix.h	/^typedef pthread_once_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	./leveldb/port/port_win.h	/^    OnceType(bool f) : init_(f) {}$/;"	f	class:leveldb::port::OnceType
OnceType	./leveldb/port/port_win.h	/^    OnceType(const OnceType &once) : init_(once.init_) {}$/;"	f	class:leveldb::port::OnceType
OnceType	./leveldb/port/port_win.h	/^class OnceType {$/;"	c	namespace:leveldb::port
OneArray	./test/arith_uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneArray	./test/uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneIn	./leveldb/util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
OneL	./test/arith_uint256_tests.cpp	/^const arith_uint256 OneL = arith_uint256V(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneL	./test/uint256_tests.cpp	/^const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneS	./test/uint256_tests.cpp	/^const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));$/;"	v
Open	./flatfile.cpp	/^FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)$/;"	f	class:FlatFileSeq
Open	./leveldb/db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	./leveldb/db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	./leveldb/db/recovery_test.cc	/^  void Open(Options* options = NULL) {$/;"	f	class:leveldb::RecoveryTest
Open	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	./leveldb/doc/bench/db_bench_tree_db.cc	/^    void Open(bool sync) {$/;"	f	class:leveldb::Benchmark	file:
Open	./leveldb/table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
Open	./wallet/db.cpp	/^bool BerkeleyEnvironment::Open(bool retry)$/;"	f	class:BerkeleyEnvironment
OpenBench	./leveldb/db/db_bench.cc	/^  void OpenBench(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
OpenBlockFile	./validation.cpp	/^FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly) {$/;"	f
OpenCompactionOutputFile	./leveldb/db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OpenDB	./leveldb/db/fault_injection_test.cc	/^  Status OpenDB() {$/;"	f	class:leveldb::FaultInjectionTest
OpenDebugLog	./logging.cpp	/^bool BCLog::Logger::OpenDebugLog()$/;"	f	class:BCLog::Logger
OpenNetworkConnection	./net.cpp	/^void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)$/;"	f	class:CConnman
OpenURIDialog	./qt/openuridialog.cpp	/^OpenURIDialog::OpenURIDialog(QWidget *parent) :$/;"	f	class:OpenURIDialog
OpenURIDialog	./qt/openuridialog.h	/^class OpenURIDialog : public QDialog$/;"	c
OpenUndoFile	./validation.cpp	/^static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly) {$/;"	f	file:
OpenUntilBlock	./qt/transactionrecord.h	/^        OpenUntilBlock,     \/**< Transaction not yet final, waiting for block *\/$/;"	e	enum:TransactionStatus::Status
OpenUntilDate	./qt/transactionrecord.h	/^        OpenUntilDate,      \/**< Transaction not yet final, waiting for date *\/$/;"	e	enum:TransactionStatus::Status
OpenWalletActivity	./qt/walletcontroller.cpp	/^OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, const std::string& name)$/;"	f	class:OpenWalletActivity
OpenWalletActivity	./qt/walletcontroller.h	/^class OpenWalletActivity : public QObject$/;"	c
OptionConfig	./leveldb/db/db_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest	file:
OptionID	./qt/optionsmodel.h	/^    enum OptionID {$/;"	g	class:OptionsModel
OptionIDRowCount	./qt/optionsmodel.h	/^        OptionIDRowCount,$/;"	e	enum:OptionsModel::OptionID
Optional	./rpc/util.h	/^    enum class Optional {$/;"	c	struct:RPCArg
Options	./leveldb/include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	./leveldb/util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Options	./miner.cpp	/^BlockAssembler::Options::Options() {$/;"	f	class:BlockAssembler::Options
Options	./miner.h	/^    struct Options {$/;"	s	class:BlockAssembler
Options	./net.h	/^    struct Options$/;"	s	class:CConnman
OptionsCategory	./util/system.h	/^enum class OptionsCategory {$/;"	c
OptionsDialog	./qt/optionsdialog.cpp	/^OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :$/;"	f	class:OptionsDialog
OptionsDialog	./qt/optionsdialog.h	/^class OptionsDialog : public QDialog$/;"	c
OptionsModel	./qt/optionsmodel.cpp	/^OptionsModel::OptionsModel(interfaces::Node& node, QObject *parent, bool resetSettings) :$/;"	f	class:OptionsModel
OptionsModel	./qt/optionsmodel.h	/^class OptionsModel : public QAbstractListModel$/;"	c
Or	./crypto/sha256_avx2.cpp	/^__m256i inline Or(__m256i x, __m256i y) { return _mm256_or_si256(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
Or	./crypto/sha256_sse41.cpp	/^__m128i inline Or(__m128i x, __m128i y) { return _mm_or_si128(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
Order	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Order	./leveldb/doc/bench/db_bench_tree_db.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
OriginPubkeyProvider	./script/descriptor.cpp	/^    OriginPubkeyProvider(KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : m_origin(std::move(info)), m_provider(std::move(provider)) {}$/;"	f	class:__anon75::final
OriginString	./script/descriptor.cpp	/^    std::string OriginString() const$/;"	f	class:__anon75::final	file:
Other	./qt/transactionrecord.h	/^        Other,$/;"	e	enum:TransactionRecord::Type
OutboundTargetReached	./net.cpp	/^bool CConnman::OutboundTargetReached(bool historicalBlockServingLimit)$/;"	f	class:CConnman
OuterType	./rpc/util.cpp	/^    enum class OuterType {$/;"	c	struct:Sections	file:
Output	./leveldb/db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
OutputGroup	./wallet/coinselection.h	/^    OutputGroup() {}$/;"	f	struct:OutputGroup
OutputGroup	./wallet/coinselection.h	/^    OutputGroup(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) : OutputGroup() {$/;"	f	struct:OutputGroup
OutputGroup	./wallet/coinselection.h	/^    OutputGroup(std::vector<CInputCoin>&& outputs, bool from_me, CAmount value, int depth, size_t ancestors, size_t descendants)$/;"	f	struct:OutputGroup
OutputGroup	./wallet/coinselection.h	/^struct OutputGroup$/;"	s
OutputTx	./bitcoin-tx.cpp	/^static void OutputTx(const CTransaction& tx)$/;"	f	file:
OutputTxHash	./bitcoin-tx.cpp	/^static void OutputTxHash(const CTransaction& tx)$/;"	f	file:
OutputTxHex	./bitcoin-tx.cpp	/^static void OutputTxHex(const CTransaction& tx)$/;"	f	file:
OutputTxJSON	./bitcoin-tx.cpp	/^static void OutputTxJSON(const CTransaction& tx)$/;"	f	file:
OutputType	./outputtype.h	/^enum class OutputType {$/;"	c
OverlapInLevel	./leveldb/db/version_set.cc	/^bool Version::OverlapInLevel(int level,$/;"	f	class:leveldb::Version
Overlaps	./leveldb/db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
OverrideStream	./streams.h	/^    OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}$/;"	f	class:OverrideStream
OverrideStream	./streams.h	/^class OverrideStream$/;"	c
OverviewPage	./qt/overviewpage.cpp	/^OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :$/;"	f	class:OverviewPage
OverviewPage	./qt/overviewpage.h	/^class OverviewPage : public QWidget$/;"	c
P2P_DISABLED	./util/error.h	/^    P2P_DISABLED,$/;"	m	class:TransactionError
P2SH	./script/descriptor.cpp	/^    P2SH,$/;"	m	class:__anon75::ParseScriptContext	file:
P2SH	./script/ismine.cpp	/^    P2SH = 1,       \/\/!< P2SH redeemScript$/;"	m	class:__anon85::IsMineSigVersion	file:
P2SH	./wallet/rpcdump.cpp	/^    P2SH, \/\/!< P2SH redeemScript$/;"	m	class:ScriptContext	file:
P2SH_SEGWIT	./outputtype.h	/^    P2SH_SEGWIT,$/;"	m	class:OutputType
P2WSH	./script/descriptor.cpp	/^    P2WSH,$/;"	m	class:__anon75::ParseScriptContext	file:
PACKAGE	./Makefile	/^PACKAGE = bitcoin$/;"	m
PACKAGE	./secp256k1/Makefile	/^PACKAGE = libsecp256k1$/;"	m
PACKAGE	./secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE /;"	d
PACKAGE	./univalue/Makefile	/^PACKAGE = univalue$/;"	m
PACKAGE	./univalue/univalue-config.h	/^#define PACKAGE /;"	d
PACKAGE_BUGREPORT	./Makefile	/^PACKAGE_BUGREPORT = https:\/\/github.com\/bitcoin\/bitcoin\/issues$/;"	m
PACKAGE_BUGREPORT	./config/bitcoin-config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_BUGREPORT	./secp256k1/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	./secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_BUGREPORT	./univalue/Makefile	/^PACKAGE_BUGREPORT = http:\/\/github.com\/jgarzik\/univalue\/$/;"	m
PACKAGE_BUGREPORT	./univalue/univalue-config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_NAME	./Makefile	/^PACKAGE_NAME = Bitcoin Core$/;"	m
PACKAGE_NAME	./config/bitcoin-config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_NAME	./secp256k1/Makefile	/^PACKAGE_NAME = libsecp256k1$/;"	m
PACKAGE_NAME	./secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_NAME	./univalue/Makefile	/^PACKAGE_NAME = univalue$/;"	m
PACKAGE_NAME	./univalue/univalue-config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_STRING	./Makefile	/^PACKAGE_STRING = Bitcoin Core 0.18.99$/;"	m
PACKAGE_STRING	./config/bitcoin-config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_STRING	./secp256k1/Makefile	/^PACKAGE_STRING = libsecp256k1 0.1$/;"	m
PACKAGE_STRING	./secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_STRING	./univalue/Makefile	/^PACKAGE_STRING = univalue 1.0.3$/;"	m
PACKAGE_STRING	./univalue/univalue-config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_TARNAME	./Makefile	/^PACKAGE_TARNAME = bitcoin$/;"	m
PACKAGE_TARNAME	./config/bitcoin-config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_TARNAME	./secp256k1/Makefile	/^PACKAGE_TARNAME = libsecp256k1$/;"	m
PACKAGE_TARNAME	./secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_TARNAME	./univalue/Makefile	/^PACKAGE_TARNAME = univalue$/;"	m
PACKAGE_TARNAME	./univalue/univalue-config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_URL	./Makefile	/^PACKAGE_URL = https:\/\/bitcoincore.org\/$/;"	m
PACKAGE_URL	./config/bitcoin-config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_URL	./secp256k1/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	./secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_URL	./univalue/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	./univalue/univalue-config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_VERSION	./Makefile	/^PACKAGE_VERSION = 0.18.99$/;"	m
PACKAGE_VERSION	./config/bitcoin-config.h	/^#define PACKAGE_VERSION /;"	d
PACKAGE_VERSION	./secp256k1/Makefile	/^PACKAGE_VERSION = 0.1$/;"	m
PACKAGE_VERSION	./secp256k1/src/libsecp256k1-config.h	/^#define PACKAGE_VERSION /;"	d
PACKAGE_VERSION	./univalue/Makefile	/^PACKAGE_VERSION = 1.0.3$/;"	m
PACKAGE_VERSION	./univalue/univalue-config.h	/^#define PACKAGE_VERSION /;"	d
PASTE	./sync.h	/^#define PASTE(/;"	d
PASTE2	./sync.h	/^#define PASTE2(/;"	d
PATH_SEPARATOR	./Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	./secp256k1/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	./univalue/Makefile	/^PATH_SEPARATOR = :$/;"	m
PAYTXFEE	./policy/fees.h	/^    PAYTXFEE,$/;"	m	class:FeeEstimateHorizon::FeeReason
PERIODIC	./validation.cpp	/^    PERIODIC,$/;"	m	class:FlushStateMode	file:
PER_UTXO_OVERHEAD	./rpc/blockchain.cpp	/^static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);$/;"	v	file:
PIC_FLAGS	./Makefile	/^PIC_FLAGS = -fPIC$/;"	m
PIE_FLAGS	./Makefile	/^PIE_FLAGS = $/;"	m
PING	./protocol.cpp	/^const char *PING="ping";$/;"	m	namespace:NetMsgType	file:
PING_COLUMN_WIDTH	./qt/rpcconsole.h	/^        PING_COLUMN_WIDTH = 80,$/;"	e	enum:RPCConsole::ColumnWidths
PING_INTERVAL	./net.h	/^static const int PING_INTERVAL = 2 * 60;$/;"	v
PKDescriptor	./script/descriptor.cpp	/^    PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "pk") {}$/;"	f	class:__anon75::final
PKG_CONFIG	./Makefile	/^PKG_CONFIG = \/usr\/local\/bin\/pkg-config$/;"	m
PKG_CONFIG	./secp256k1/Makefile	/^PKG_CONFIG = \/usr\/local\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	./Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	./secp256k1/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	./Makefile	/^PKG_CONFIG_PATH = \/usr\/local\/opt\/qt\/lib\/pkgconfig:\/usr\/local\/opt\/openssl\/lib\/pkgconfig:$/;"	m
PKG_CONFIG_PATH	./secp256k1/Makefile	/^PKG_CONFIG_PATH = \/usr\/local\/opt\/openssl\/lib\/pkgconfig:$/;"	m
PKH	./test/script_tests.cpp	/^    PKH,$/;"	m	class:__anon58::WitnessMode	file:
PKHDescriptor	./script/descriptor.cpp	/^    PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "pkh") {}$/;"	f	class:__anon75::final
PKHash	./script/standard.cpp	/^PKHash::PKHash(const CPubKey& pubkey) : uint160(pubkey.GetID()) {}$/;"	f	class:PKHash
PKHash	./script/standard.h	/^    PKHash() : uint160() {}$/;"	f	struct:PKHash
PKHash	./script/standard.h	/^    explicit PKHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:PKHash
PKHash	./script/standard.h	/^struct PKHash : public uint160$/;"	s
PLATFORM_IS_LITTLE_ENDIAN	./leveldb/port/port_posix.h	/^    #define PLATFORM_IS_LITTLE_ENDIAN /;"	d
PLATFORM_IS_LITTLE_ENDIAN	./leveldb/port/port_posix.h	/^  #define PLATFORM_IS_LITTLE_ENDIAN /;"	d
PLATFORM_IS_LITTLE_ENDIAN	./leveldb/port/port_posix.h	/^#define PLATFORM_IS_LITTLE_ENDIAN /;"	d
PLATFORM_IS_LITTLE_ENDIAN	./leveldb/port/port_posix.h	/^#undef PLATFORM_IS_LITTLE_ENDIAN$/;"	d
POLY1305	./bench/poly1305.cpp	/^static void POLY1305(benchmark::State& state, size_t buffersize)$/;"	f	file:
POLY1305_1MB	./bench/poly1305.cpp	/^static void POLY1305_1MB(benchmark::State& state)$/;"	f	file:
POLY1305_256BYTES	./bench/poly1305.cpp	/^static void POLY1305_256BYTES(benchmark::State& state)$/;"	f	file:
POLY1305_64BYTES	./bench/poly1305.cpp	/^static void POLY1305_64BYTES(benchmark::State& state)$/;"	f	file:
POLY1305_KEYLEN	./crypto/poly1305.h	/^#define POLY1305_KEYLEN /;"	d
POLY1305_TAGLEN	./crypto/poly1305.h	/^#define POLY1305_TAGLEN /;"	d
PONG	./protocol.cpp	/^const char *PONG="pong";$/;"	m	namespace:NetMsgType	file:
PORT	./secp256k1/Makefile	/^PORT = $/;"	m
PORT_ATOMIC_POINTER_H_	./leveldb/port/atomic_pointer.h	/^#define PORT_ATOMIC_POINTER_H_$/;"	d
POST	./httpserver.h	/^        POST,$/;"	e	enum:HTTPRequest::RequestMethod
POST_INSTALL	./Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	./secp256k1/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	./univalue/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	./Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	./secp256k1/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	./univalue/Makefile	/^POST_UNINSTALL = :$/;"	m
PREVECTOR_SIZE	./bench/checkqueue.cpp	/^static const int PREVECTOR_SIZE = 28;$/;"	v	file:
PREVECTOR_TEST	./bench/prevector.cpp	/^#define PREVECTOR_TEST(/;"	d	file:
PRE_INSTALL	./Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	./secp256k1/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	./univalue/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	./Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	./secp256k1/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	./univalue/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIVATE_KEY_SIZE	./key.h	/^    static const unsigned int PRIVATE_KEY_SIZE            = 279;$/;"	m	class:CKey
PROGNAMES	./leveldb/Makefile	/^PROGNAMES := $(notdir $(TESTS) $(UTILS))$/;"	m
PROGRAMS	./Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROGRAMS	./secp256k1/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROGRAMS	./univalue/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROTOBUF_CFLAGS	./Makefile	/^PROTOBUF_CFLAGS = $/;"	m
PROTOBUF_LIBS	./Makefile	/^PROTOBUF_LIBS = $/;"	m
PROTOC	./Makefile	/^PROTOC = $/;"	m
PROTOCOL_VERSION	./version.h	/^static const int PROTOCOL_VERSION = 70015;$/;"	v
PRUNED	./test/coins_tests.cpp	/^const static CAmount PRUNED = -1;$/;"	v	file:
PSBTAnalysis	./node/psbt.h	/^struct PSBTAnalysis {$/;"	s
PSBTInput	./psbt.h	/^    PSBTInput() {}$/;"	f	struct:PSBTInput
PSBTInput	./psbt.h	/^    PSBTInput(deserialize_type, Stream& s) {$/;"	f	struct:PSBTInput
PSBTInput	./psbt.h	/^struct PSBTInput$/;"	s
PSBTInputAnalysis	./node/psbt.h	/^struct PSBTInputAnalysis {$/;"	s
PSBTInputSigned	./psbt.cpp	/^bool PSBTInputSigned(const PSBTInput& input)$/;"	f
PSBTOutput	./psbt.h	/^    PSBTOutput() {}$/;"	f	struct:PSBTOutput
PSBTOutput	./psbt.h	/^    PSBTOutput(deserialize_type, Stream& s) {$/;"	f	struct:PSBTOutput
PSBTOutput	./psbt.h	/^struct PSBTOutput$/;"	s
PSBTRole	./psbt.h	/^enum class PSBTRole {$/;"	c
PSBTRoleName	./psbt.cpp	/^std::string PSBTRoleName(PSBTRole role) {$/;"	f
PSBT_GLOBAL_UNSIGNED_TX	./psbt.h	/^static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;$/;"	v
PSBT_IN_BIP32_DERIVATION	./psbt.h	/^static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;$/;"	v
PSBT_IN_NON_WITNESS_UTXO	./psbt.h	/^static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;$/;"	v
PSBT_IN_PARTIAL_SIG	./psbt.h	/^static constexpr uint8_t PSBT_IN_PARTIAL_SIG = 0x02;$/;"	v
PSBT_IN_REDEEMSCRIPT	./psbt.h	/^static constexpr uint8_t PSBT_IN_REDEEMSCRIPT = 0x04;$/;"	v
PSBT_IN_SCRIPTSIG	./psbt.h	/^static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;$/;"	v
PSBT_IN_SCRIPTWITNESS	./psbt.h	/^static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;$/;"	v
PSBT_IN_SIGHASH	./psbt.h	/^static constexpr uint8_t PSBT_IN_SIGHASH = 0x03;$/;"	v
PSBT_IN_WITNESSSCRIPT	./psbt.h	/^static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;$/;"	v
PSBT_IN_WITNESS_UTXO	./psbt.h	/^static constexpr uint8_t PSBT_IN_WITNESS_UTXO = 0x01;$/;"	v
PSBT_MAGIC_BYTES	./psbt.h	/^static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};$/;"	v
PSBT_MISMATCH	./util/error.h	/^    PSBT_MISMATCH,$/;"	m	class:TransactionError
PSBT_OUT_BIP32_DERIVATION	./psbt.h	/^static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;$/;"	v
PSBT_OUT_REDEEMSCRIPT	./psbt.h	/^static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;$/;"	v
PSBT_OUT_WITNESSSCRIPT	./psbt.h	/^static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;$/;"	v
PSBT_SEPARATOR	./psbt.h	/^static constexpr uint8_t PSBT_SEPARATOR = 0x00;$/;"	v
PTHREAD_CC	./Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	./Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_LIBS	./Makefile	/^PTHREAD_LIBS = $/;"	m
PT_GUARDED_BY	./threadsafety.h	/^#define PT_GUARDED_BY(/;"	d
PT_GUARDED_VAR	./threadsafety.h	/^#define PT_GUARDED_VAR /;"	d
PT_GUARDED_VAR	./threadsafety.h	/^#define PT_GUARDED_VAR$/;"	d
PUBKEY_ADDRESS	./chainparams.h	/^        PUBKEY_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
PUBLIC_KEY_SIZE	./pubkey.h	/^    static constexpr unsigned int PUBLIC_KEY_SIZE             = 65;$/;"	m	class:CPubKey
PUT	./httpserver.h	/^        PUT$/;"	e	enum:HTTPRequest::RequestMethod
PYTHON	./Makefile	/^PYTHON = \/usr\/local\/bin\/python3.6$/;"	m
PYTHONPATH	./Makefile	/^PYTHONPATH = $/;"	m
PackSequenceAndType	./leveldb/db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
ParameterInteraction	./wallet/init.cpp	/^bool WalletInit::ParameterInteraction() const$/;"	f	class:WalletInit
Params	./blockfilter.h	/^        Params(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 1)$/;"	f	struct:GCSFilter::Params
Params	./blockfilter.h	/^    struct Params$/;"	s	class:GCSFilter
Params	./chainparams.cpp	/^const CChainParams &Params() {$/;"	f
Params	./consensus/params.h	/^struct Params {$/;"	s	namespace:Consensus
Parse	./script/descriptor.cpp	/^std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)$/;"	f
ParseConfirmTarget	./rpc/util.cpp	/^unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)$/;"	f
ParseDataFormat	./rest.cpp	/^static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)$/;"	f	file:
ParseDescriptorRange	./rpc/util.cpp	/^std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value)$/;"	f
ParseDouble	./univalue/lib/univalue_get.cpp	/^bool ParseDouble(const std::string& str, double *out)$/;"	f	namespace:__anon125
ParseDouble	./util/strencodings.cpp	/^bool ParseDouble(const std::string& str, double *out)$/;"	f
ParseFileName	./leveldb/db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseFixedPoint	./util/strencodings.cpp	/^bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)$/;"	f
ParseHDKeypath	./util/bip32.cpp	/^bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)$/;"	f
ParseHashO	./rpc/util.cpp	/^uint256 ParseHashO(const UniValue& o, std::string strKey)$/;"	f
ParseHashStr	./core_read.cpp	/^bool ParseHashStr(const std::string& strHex, uint256& result)$/;"	f
ParseHashV	./rpc/util.cpp	/^uint256 ParseHashV(const UniValue& v, std::string strName)$/;"	f
ParseHex	./util/strencodings.cpp	/^std::vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	./util/strencodings.cpp	/^std::vector<unsigned char> ParseHex(const std::string& str)$/;"	f
ParseHexO	./rpc/util.cpp	/^std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)$/;"	f
ParseHexUV	./core_read.cpp	/^std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)$/;"	f
ParseHexV	./rpc/util.cpp	/^std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)$/;"	f
ParseHex_expected	./test/util_tests.cpp	/^static const unsigned char ParseHex_expected[65] = {$/;"	v	file:
ParseInt32	./univalue/lib/univalue_get.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f	namespace:__anon125
ParseInt32	./util/strencodings.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f
ParseInt64	./univalue/lib/univalue_get.cpp	/^bool ParseInt64(const std::string& str, int64_t *out)$/;"	f	namespace:__anon125
ParseInt64	./util/strencodings.cpp	/^bool ParseInt64(const std::string& str, int64_t *out)$/;"	f
ParseInternalKey	./leveldb/db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	./leveldb/db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon29::DBIter
ParseKeyPath	./script/descriptor.cpp	/^NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)$/;"	f	namespace:__anon75
ParseMoney	./util/moneystr.cpp	/^bool ParseMoney(const char* pszIn, CAmount& nRet)$/;"	f
ParseMoney	./util/moneystr.cpp	/^bool ParseMoney(const std::string& str, CAmount& nRet)$/;"	f
ParseNetwork	./netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
ParseNextKey	./leveldb/table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParseNonRFCJSONValue	./rpc/client.cpp	/^UniValue ParseNonRFCJSONValue(const std::string& strVal)$/;"	f
ParseOutputType	./outputtype.cpp	/^bool ParseOutputType(const std::string& type, OutputType& output_type)$/;"	f
ParseParameters	./util/system.cpp	/^bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)$/;"	f	class:ArgsManager
ParsePrechecks	./univalue/lib/univalue_get.cpp	/^static bool ParsePrechecks(const std::string& str)$/;"	f	namespace:__anon125
ParsePrechecks	./util/strencodings.cpp	/^NODISCARD static bool ParsePrechecks(const std::string& str)$/;"	f	file:
ParsePubkey	./script/descriptor.cpp	/^std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)$/;"	f	namespace:__anon75
ParsePubkeyInner	./script/descriptor.cpp	/^std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)$/;"	f	namespace:__anon75
ParseRange	./rpc/util.cpp	/^static std::pair<int64_t, int64_t> ParseRange(const UniValue& value)$/;"	f	file:
ParseScript	./core_read.cpp	/^CScript ParseScript(const std::string& s)$/;"	f
ParseScript	./script/descriptor.cpp	/^std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)$/;"	f	namespace:__anon75
ParseScriptContext	./script/descriptor.cpp	/^enum class ParseScriptContext {$/;"	c	namespace:__anon75	file:
ParseScriptError	./test/script_tests.cpp	/^static ScriptError_t ParseScriptError(const std::string &name)$/;"	f	file:
ParseScriptFlags	./test/transaction_tests.cpp	/^unsigned int ParseScriptFlags(std::string strFlags)$/;"	f
ParseSighashString	./core_read.cpp	/^int ParseSighashString(const UniValue& sighash)$/;"	f
ParseTorReplyMapping	./torcontrol.cpp	/^std::map<std::string,std::string> ParseTorReplyMapping(const std::string &s)$/;"	f
ParseUInt32	./util/strencodings.cpp	/^bool ParseUInt32(const std::string& str, uint32_t *out)$/;"	f
ParseUInt64	./util/strencodings.cpp	/^bool ParseUInt64(const std::string& str, uint64_t *out)$/;"	f
ParsedInternalKey	./leveldb/db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	./leveldb/db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	./leveldb/db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
PartialCompactTestPreFault	./leveldb/db/fault_injection_test.cc	/^  void PartialCompactTestPreFault(int num_pre_sync, int num_post_sync) {$/;"	f	class:leveldb::FaultInjectionTest
PartialCompactTestReopenWithFault	./leveldb/db/fault_injection_test.cc	/^  void PartialCompactTestReopenWithFault(ResetMethod reset_method,$/;"	f	class:leveldb::FaultInjectionTest
PartiallyDownloadedBlock	./blockencodings.h	/^    explicit PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}$/;"	f	class:PartiallyDownloadedBlock
PartiallyDownloadedBlock	./blockencodings.h	/^class PartiallyDownloadedBlock {$/;"	c
PartiallySignedTransaction	./psbt.cpp	/^PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)$/;"	f	class:PartiallySignedTransaction
PartiallySignedTransaction	./psbt.h	/^    PartiallySignedTransaction() {}$/;"	f	struct:PartiallySignedTransaction
PartiallySignedTransaction	./psbt.h	/^    PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}$/;"	f	struct:PartiallySignedTransaction
PartiallySignedTransaction	./psbt.h	/^    PartiallySignedTransaction(deserialize_type, Stream& s) {$/;"	f	struct:PartiallySignedTransaction
PartiallySignedTransaction	./psbt.h	/^struct PartiallySignedTransaction$/;"	s
PaymentRequestExpired	./qt/walletmodel.h	/^        PaymentRequestExpired$/;"	e	enum:WalletModel::StatusCode
PaymentRequestPlus	./qt/paymentrequestplus.h	/^    PaymentRequestPlus() { }$/;"	f	class:PaymentRequestPlus
PaymentRequestPlus	./qt/paymentrequestplus.h	/^class PaymentRequestPlus$/;"	c
PaymentServer	./qt/paymentserver.cpp	/^PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :$/;"	f	class:PaymentServer
PaymentServer	./qt/paymentserver.h	/^class PaymentServer : public QObject$/;"	c
PaymentServerTests	./qt/test/paymentservertests.h	/^class PaymentServerTests : public QObject$/;"	c
PeerLogicValidation	./net_processing.cpp	/^PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler &scheduler, bool enable_bip61)$/;"	f	class:PeerLogicValidation
PeerTableModel	./qt/peertablemodel.cpp	/^PeerTableModel::PeerTableModel(interfaces::Node& node, ClientModel *parent) :$/;"	f	class:PeerTableModel
PeerTableModel	./qt/peertablemodel.h	/^class PeerTableModel : public QAbstractTableModel$/;"	c
PeerTablePriv	./qt/peertablemodel.cpp	/^class PeerTablePriv$/;"	c	file:
PendingWalletTx	./interfaces/wallet.h	/^class PendingWalletTx$/;"	c	namespace:interfaces
PendingWalletTxImpl	./interfaces/wallet.cpp	/^    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}$/;"	f	class:interfaces::__anon130::PendingWalletTxImpl
PendingWalletTxImpl	./interfaces/wallet.cpp	/^class PendingWalletTxImpl : public PendingWalletTx$/;"	c	namespace:interfaces::__anon130	file:
PerBlockConnectTrace	./validation.cpp	/^    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}$/;"	f	struct:PerBlockConnectTrace
PerBlockConnectTrace	./validation.cpp	/^struct PerBlockConnectTrace {$/;"	s	file:
Percentile	./leveldb/util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PeriodicFlush	./wallet/db.cpp	/^bool BerkeleyBatch::PeriodicFlush(BerkeleyDatabase& database)$/;"	f	class:BerkeleyBatch
PermitsUncompressed	./script/ismine.cpp	/^bool PermitsUncompressed(IsMineSigVersion sigversion)$/;"	f	namespace:__anon85
PickCompaction	./leveldb/db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	./leveldb/db/version_set.cc	/^int Version::PickLevelForMemTableOutput($/;"	f	class:leveldb::Version
PickRandomKey	./leveldb/table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
Ping	./qt/peertablemodel.h	/^        Ping = 2,$/;"	e	enum:PeerTableModel::ColumnIndex
PlatformStyle	./qt/platformstyle.cpp	/^PlatformStyle::PlatformStyle(const QString &_name, bool _imagesOnButtons, bool _colorizeIcons, bool _useExtraSpacing):$/;"	f	class:PlatformStyle
PlatformStyle	./qt/platformstyle.h	/^class PlatformStyle$/;"	c
PlotlyPrinter	./bench/bench.cpp	/^benchmark::PlotlyPrinter::PlotlyPrinter(std::string plotly_url, int64_t width, int64_t height)$/;"	f	class:benchmark::PlotlyPrinter
PlotlyPrinter	./bench/bench.h	/^class PlotlyPrinter : public Printer$/;"	c	namespace:benchmark
PoissonNextSend	./net.cpp	/^int64_t PoissonNextSend(int64_t now, int average_interval_seconds)$/;"	f
PoissonNextSendInbound	./net.cpp	/^int64_t CConnman::PoissonNextSendInbound(int64_t now, int average_interval_seconds)$/;"	f	class:CConnman
PolishProgressDialog	./qt/guiutil.cpp	/^void PolishProgressDialog(QProgressDialog* dialog)$/;"	f	namespace:GUIUtil
PolyMod	./bech32.cpp	/^uint32_t PolyMod(const data& v)$/;"	f	namespace:__anon116
PolyMod	./script/descriptor.cpp	/^uint64_t PolyMod(uint64_t c, int val)$/;"	f	namespace:__anon75
PosixEnv	./leveldb/util/env_posix.cc	/^PosixEnv::PosixEnv()$/;"	f	class:leveldb::__anon8::PosixEnv
PosixEnv	./leveldb/util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon8	file:
PosixFileLock	./leveldb/util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon8	file:
PosixLockTable	./leveldb/util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon8	file:
PosixLockedPageAllocator	./support/lockedpool.cpp	/^PosixLockedPageAllocator::PosixLockedPageAllocator()$/;"	f	class:PosixLockedPageAllocator
PosixLockedPageAllocator	./support/lockedpool.cpp	/^class PosixLockedPageAllocator: public LockedPageAllocator$/;"	c	file:
PosixLogger	./leveldb/util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	./leveldb/util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapReadableFile	./leveldb/util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length,$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
PosixMmapReadableFile	./leveldb/util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon8	file:
PosixRandomAccessFile	./leveldb/util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd, Limiter* limiter)$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
PosixRandomAccessFile	./leveldb/util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon8	file:
PosixSequentialFile	./leveldb/util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon8::PosixSequentialFile
PosixSequentialFile	./leveldb/util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon8	file:
PosixWritableFile	./leveldb/util/env_posix.cc	/^  PosixWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon8::PosixWritableFile
PosixWritableFile	./leveldb/util/env_posix.cc	/^class PosixWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon8	file:
PreciousBlock	./validation.cpp	/^bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)$/;"	f	class:CChainState
PreciousBlock	./validation.cpp	/^bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) {$/;"	f
PrecomputedTransactionData	./script/interpreter.cpp	/^PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)$/;"	f	class:PrecomputedTransactionData
PrecomputedTransactionData	./script/interpreter.h	/^struct PrecomputedTransactionData$/;"	s
PrefilledTransaction	./blockencodings.h	/^struct PrefilledTransaction {$/;"	s
PrepareBlock	./test/util.cpp	/^std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)$/;"	f
Prev	./leveldb/db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon29::DBIter
Prev	./leveldb/db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	./leveldb/db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	./leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	./leveldb/db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	./leveldb/table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	./leveldb/table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon12::EmptyIterator
Prev	./leveldb/table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	./leveldb/table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon11::MergingIterator
Prev	./leveldb/table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
PrevLogNumber	./leveldb/db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrevectorClear	./bench/prevector.cpp	/^static void PrevectorClear(benchmark::State& state)$/;"	f	file:
PrevectorDeserialize	./bench/prevector.cpp	/^static void PrevectorDeserialize(benchmark::State& state)$/;"	f	file:
PrevectorDestructor	./bench/prevector.cpp	/^static void PrevectorDestructor(benchmark::State& state)$/;"	f	file:
PrevectorResize	./bench/prevector.cpp	/^static void PrevectorResize(benchmark::State& state)$/;"	f	file:
PrintContents	./leveldb/db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	./leveldb/db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintExceptionContinue	./util/system.cpp	/^void PrintExceptionContinue(const std::exception* pex, const char* pszThread)$/;"	f
PrintHeader	./leveldb/db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLockContention	./sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
PrintLogContents	./leveldb/db/dumpfile.cc	/^Status PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon27
PrintStats	./leveldb/db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	./leveldb/db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
Printer	./bench/bench.h	/^class Printer$/;"	c	namespace:benchmark
PrioritiseTransaction	./txmempool.cpp	/^void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)$/;"	f	class:CTxMemPool
ProcRand	./random.cpp	/^static void ProcRand(unsigned char* out, int num, RNGLevel level)$/;"	f	file:
ProcessGetBlockData	./net_processing.cpp	/^void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, const CInv& inv, CConnman* connman)$/;"	f	file:
ProcessHeadersMessage	./net_processing.cpp	/^bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)$/;"	f	file:
ProcessImportDescriptor	./wallet/rpcdump.cpp	/^static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)$/;"	f	file:
ProcessImportLegacy	./wallet/rpcdump.cpp	/^static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)$/;"	f	file:
ProcessMantissaDigit	./util/strencodings.cpp	/^static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)$/;"	f	file:
ProcessMessage	./net_processing.cpp	/^bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)$/;"	f	file:
ProcessMessages	./net_processing.cpp	/^bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)$/;"	f	class:PeerLogicValidation
ProcessNewBlock	./validation.cpp	/^bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)$/;"	f
ProcessNewBlockHeaders	./validation.cpp	/^bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex, CBlockHeader *first_invalid)$/;"	f
ProcessOneShot	./net.cpp	/^void CConnman::ProcessOneShot()$/;"	f	class:CConnman
ProcessQueue	./scheduler.cpp	/^void SingleThreadedSchedulerClient::ProcessQueue() {$/;"	f	class:SingleThreadedSchedulerClient
ProcessSubScript	./wallet/rpcwallet.cpp	/^    void ProcessSubScript(const CScript& subscript, UniValue& obj) const$/;"	f	class:DescribeWalletAddressVisitor
ProduceSignature	./script/sign.cpp	/^bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)$/;"	f
ProgressBar	./qt/guiutil.h	/^    typedef ClickableProgressBar ProgressBar;$/;"	t	namespace:GUIUtil
Property	./leveldb/db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
ProxyAddressValidator	./qt/optionsdialog.cpp	/^ProxyAddressValidator::ProxyAddressValidator(QObject *parent) :$/;"	f	class:ProxyAddressValidator
ProxyAddressValidator	./qt/optionsdialog.h	/^class ProxyAddressValidator : public QValidator$/;"	c
ProxyCredentials	./netbase.cpp	/^struct ProxyCredentials$/;"	s	file:
ProxyIP	./qt/optionsmodel.h	/^        ProxyIP,                \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ProxyIPTor	./qt/optionsmodel.h	/^        ProxyIPTor,             \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ProxyPort	./qt/optionsmodel.h	/^        ProxyPort,              \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxyPortTor	./qt/optionsmodel.h	/^        ProxyPortTor,           \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxySetting	./qt/optionsmodel.cpp	/^struct ProxySetting {$/;"	s	file:
ProxyUse	./qt/optionsmodel.h	/^        ProxyUse,               \/\/ bool$/;"	e	enum:OptionsModel::OptionID
ProxyUseTor	./qt/optionsmodel.h	/^        ProxyUseTor,            \/\/ bool$/;"	e	enum:OptionsModel::OptionID
Prune	./leveldb/include/leveldb/cache.h	/^  virtual void Prune() {}$/;"	f	class:leveldb::Cache
Prune	./leveldb/util/cache.cc	/^  virtual void Prune() {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Prune	./leveldb/util/cache.cc	/^void LRUCache::Prune() {$/;"	f	class:leveldb::__anon4::LRUCache
Prune	./qt/optionsmodel.h	/^        Prune,                  \/\/ bool$/;"	e	enum:OptionsModel::OptionID
PruneAfterHeight	./chainparams.h	/^    uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }$/;"	f	class:CChainParams
PruneAndFlush	./validation.cpp	/^void PruneAndFlush() {$/;"	f
PruneBlockFilesManual	./validation.cpp	/^void PruneBlockFilesManual(int nManualPruneHeight)$/;"	f
PruneBlockIndexCandidates	./validation.cpp	/^void CChainState::PruneBlockIndexCandidates() {$/;"	f	class:CChainState
PruneOneBlockFile	./validation.cpp	/^void PruneOneBlockFile(const int fileNumber)$/;"	f
PruneSize	./qt/optionsmodel.h	/^        PruneSize,              \/\/ int$/;"	e	enum:OptionsModel::OptionID
PthreadCall	./leveldb/port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	./leveldb/util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon8::PosixEnv	file:
PubkeyProvider	./script/descriptor.cpp	/^struct PubkeyProvider$/;"	s	namespace:__anon75	file:
Push	./rpc/util.cpp	/^    void Push(const RPCArg& arg, const size_t current_indent = 5, const OuterType outer_type = OuterType::NAMED_ARG)$/;"	f	struct:Sections
Push	./test/script_tests.cpp	/^    TestBuilder& Push(const CPubKey& pubkey)$/;"	f	class:__anon58::TestBuilder
Push	./test/script_tests.cpp	/^    TestBuilder& Push(const CScript& _script) {$/;"	f	class:__anon58::TestBuilder
Push	./test/script_tests.cpp	/^    TestBuilder& Push(const std::string& hex)$/;"	f	class:__anon58::TestBuilder
PushAddress	./net.h	/^    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)$/;"	f	class:CNode
PushAll	./script/sign.cpp	/^static CScript PushAll(const std::vector<valtype>& values)$/;"	f	file:
PushAll	./test/transaction_tests.cpp	/^static CScript PushAll(const std::vector<valtype>& values)$/;"	f	file:
PushBlockHash	./net.h	/^    void PushBlockHash(const uint256 &hash)$/;"	f	class:CNode
PushInventory	./net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	./net.cpp	/^void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)$/;"	f	class:CConnman
PushNodeVersion	./net_processing.cpp	/^static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)$/;"	f	namespace:__anon89
PushRedeem	./test/script_tests.cpp	/^    TestBuilder& PushRedeem()$/;"	f	class:__anon58::TestBuilder
PushSection	./rpc/util.cpp	/^    void PushSection(const Section& s)$/;"	f	struct:Sections
PushSig	./test/script_tests.cpp	/^    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SigVersion::BASE, CAmount amount = 0)$/;"	f	class:__anon58::TestBuilder
PushWitRedeem	./test/script_tests.cpp	/^    TestBuilder& PushWitRedeem()$/;"	f	class:__anon58::TestBuilder
PushWitSig	./test/script_tests.cpp	/^    TestBuilder& PushWitSig(const CKey& key, CAmount amount = -1, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SigVersion::WITNESS_V0)$/;"	f	class:__anon58::TestBuilder
Put	./leveldb/db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	./leveldb/db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	./leveldb/db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	./leveldb/db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	./leveldb/db/dumpfile.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon27::WriteBatchItemPrinter
Put	./leveldb/db/recovery_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::RecoveryTest
Put	./leveldb/db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon22::MemTableInserter
Put	./leveldb/db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	./leveldb/util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	./leveldb/util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	./leveldb/util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	./leveldb/util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	./leveldb/util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
QAPP_APP_NAME_DEFAULT	./qt/guiconstants.h	/^#define QAPP_APP_NAME_DEFAULT /;"	d
QAPP_APP_NAME_REGTEST	./qt/guiconstants.h	/^#define QAPP_APP_NAME_REGTEST /;"	d
QAPP_APP_NAME_TESTNET	./qt/guiconstants.h	/^#define QAPP_APP_NAME_TESTNET /;"	d
QAPP_ORG_DOMAIN	./qt/guiconstants.h	/^#define QAPP_ORG_DOMAIN /;"	d
QAPP_ORG_NAME	./qt/guiconstants.h	/^#define QAPP_ORG_NAME /;"	d
QCocoaIntegrationPlugin	./qt/bitcoin.cpp	/^Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);$/;"	v
QCocoaIntegrationPlugin	./qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);$/;"	v
QMinimalIntegrationPlugin	./qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin);$/;"	v
QRImageWidget	./qt/qrimagewidget.cpp	/^QRImageWidget::QRImageWidget(QWidget *parent):$/;"	f	class:QRImageWidget
QRImageWidget	./qt/qrimagewidget.h	/^class QRImageWidget : public QLabel$/;"	c
QR_CFLAGS	./Makefile	/^QR_CFLAGS = $/;"	m
QR_IMAGE_SIZE	./qt/qrimagewidget.h	/^static const int QR_IMAGE_SIZE = 300;$/;"	v
QR_LIBS	./Makefile	/^QR_LIBS = $/;"	m
QSystemTray	./qt/notificator.h	/^        QSystemTray,                \/**< Use QSystemTrayIcon::showMessage() *\/$/;"	e	enum:Notificator::Mode
QT5_CFLAGS	./Makefile	/^QT5_CFLAGS = $/;"	m
QT5_LIBS	./Makefile	/^QT5_LIBS = $/;"	m
QTACCESSIBILITY_CFLAGS	./Makefile	/^QTACCESSIBILITY_CFLAGS = $/;"	m
QTACCESSIBILITY_LIBS	./Makefile	/^QTACCESSIBILITY_LIBS = $/;"	m
QTCGL_CFLAGS	./Makefile	/^QTCGL_CFLAGS = $/;"	m
QTCGL_LIBS	./Makefile	/^QTCGL_LIBS = $/;"	m
QTCLIPBOARD_CFLAGS	./Makefile	/^QTCLIPBOARD_CFLAGS = $/;"	m
QTCLIPBOARD_LIBS	./Makefile	/^QTCLIPBOARD_LIBS = $/;"	m
QTDEVICEDISCOVERY_CFLAGS	./Makefile	/^QTDEVICEDISCOVERY_CFLAGS = $/;"	m
QTDEVICEDISCOVERY_LIBS	./Makefile	/^QTDEVICEDISCOVERY_LIBS = $/;"	m
QTEVENTDISPATCHER_CFLAGS	./Makefile	/^QTEVENTDISPATCHER_CFLAGS = $/;"	m
QTEVENTDISPATCHER_LIBS	./Makefile	/^QTEVENTDISPATCHER_LIBS = $/;"	m
QTFB_CFLAGS	./Makefile	/^QTFB_CFLAGS = $/;"	m
QTFB_LIBS	./Makefile	/^QTFB_LIBS = $/;"	m
QTFONTDATABASE_CFLAGS	./Makefile	/^QTFONTDATABASE_CFLAGS = $/;"	m
QTFONTDATABASE_LIBS	./Makefile	/^QTFONTDATABASE_LIBS = $/;"	m
QTGRAPHICS_CFLAGS	./Makefile	/^QTGRAPHICS_CFLAGS = $/;"	m
QTGRAPHICS_LIBS	./Makefile	/^QTGRAPHICS_LIBS = $/;"	m
QTPLATFORM_CFLAGS	./Makefile	/^QTPLATFORM_CFLAGS = $/;"	m
QTPLATFORM_LIBS	./Makefile	/^QTPLATFORM_LIBS = $/;"	m
QTTHEME_CFLAGS	./Makefile	/^QTTHEME_CFLAGS = $/;"	m
QTTHEME_LIBS	./Makefile	/^QTTHEME_LIBS = $/;"	m
QTXCBQPA_CFLAGS	./Makefile	/^QTXCBQPA_CFLAGS = $/;"	m
QTXCBQPA_LIBS	./Makefile	/^QTXCBQPA_LIBS = $/;"	m
QT_DBUS_CFLAGS	./Makefile	/^QT_DBUS_CFLAGS = $/;"	m
QT_DBUS_INCLUDES	./Makefile	/^QT_DBUS_INCLUDES = $/;"	m
QT_DBUS_LIBS	./Makefile	/^QT_DBUS_LIBS = $/;"	m
QT_INCLUDES	./Makefile	/^QT_INCLUDES = $/;"	m
QT_LDFLAGS	./Makefile	/^QT_LDFLAGS = $/;"	m
QT_LIBS	./Makefile	/^QT_LIBS = $/;"	m
QT_PIE_FLAGS	./Makefile	/^QT_PIE_FLAGS = $/;"	m
QT_SELECT	./Makefile	/^QT_SELECT = qt5$/;"	m
QT_TEST_CFLAGS	./Makefile	/^QT_TEST_CFLAGS = $/;"	m
QT_TEST_INCLUDES	./Makefile	/^QT_TEST_INCLUDES = $/;"	m
QT_TEST_LIBS	./Makefile	/^QT_TEST_LIBS = $/;"	m
QT_TRANSLATION_DIR	./Makefile	/^QT_TRANSLATION_DIR = $/;"	m
QUARTERROUND	./crypto/chacha20.cpp	/^#define QUARTERROUND(/;"	d	file:
QUEUE_BATCH_SIZE	./bench/checkqueue.cpp	/^static const unsigned int QUEUE_BATCH_SIZE = 128;$/;"	v	file:
QUEUE_BATCH_SIZE	./test/checkqueue_tests.cpp	/^static const unsigned int QUEUE_BATCH_SIZE = 128;$/;"	v	file:
QValidatedLineEdit	./qt/qvalidatedlineedit.cpp	/^QValidatedLineEdit::QValidatedLineEdit(QWidget *parent) :$/;"	f	class:QValidatedLineEdit
QValidatedLineEdit	./qt/qvalidatedlineedit.h	/^class QValidatedLineEdit : public QLineEdit$/;"	c
QValueComboBox	./qt/qvaluecombobox.cpp	/^QValueComboBox::QValueComboBox(QWidget *parent) :$/;"	f	class:QValueComboBox
QValueComboBox	./qt/qvaluecombobox.h	/^class QValueComboBox : public QComboBox$/;"	c
QWindowsIntegrationPlugin	./qt/bitcoin.cpp	/^Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);$/;"	v
QWindowsIntegrationPlugin	./qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);$/;"	v
QXcbIntegrationPlugin	./qt/bitcoin.cpp	/^Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);$/;"	v
QXcbIntegrationPlugin	./qt/test/test_main.cpp	/^Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);$/;"	v
QtRPCTimerBase	./qt/rpcconsole.cpp	/^    QtRPCTimerBase(std::function<void()>& _func, int64_t millis):$/;"	f	class:QtRPCTimerBase
QtRPCTimerBase	./qt/rpcconsole.cpp	/^class QtRPCTimerBase: public QObject, public RPCTimerBase$/;"	c	file:
QtRPCTimerInterface	./qt/rpcconsole.cpp	/^class QtRPCTimerInterface: public RPCTimerInterface$/;"	c	file:
QuadRound	./crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) QuadRound(__m128i& state0, __m128i& state1, __m128i m, uint64_t k1, uint64_t k0)$/;"	f	namespace:__anon43
QuadRound	./crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) QuadRound(__m128i& state0, __m128i& state1, uint64_t k1, uint64_t k0)$/;"	f	namespace:__anon43
QueuedBlock	./net_processing.cpp	/^    struct QueuedBlock {$/;"	s	namespace:__anon88	file:
R11	./crypto/ripemd160.cpp	/^void inline R11(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon42::ripemd160
R12	./crypto/ripemd160.cpp	/^void inline R12(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }$/;"	f	namespace:__anon42::ripemd160
R1Array	./test/arith_uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1Array	./test/uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1ArrayHex	./test/arith_uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1ArrayHex	./test/uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1L	./test/arith_uint256_tests.cpp	/^const arith_uint256 R1L = arith_uint256V(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1L	./test/uint256_tests.cpp	/^const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1LLow64	./test/arith_uint256_tests.cpp	/^const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;$/;"	v
R1Ldouble	./test/arith_uint256_tests.cpp	/^const double R1Ldouble = 0.4887374590559308955; \/\/ R1L equals roughly R1Ldouble * 2^256$/;"	v
R1LplusR2L	./test/arith_uint256_tests.cpp	/^const char R1LplusR2L[] = "549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C";$/;"	v
R1S	./test/uint256_tests.cpp	/^const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));$/;"	v
R21	./crypto/ripemd160.cpp	/^void inline R21(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }$/;"	f	namespace:__anon42::ripemd160
R22	./crypto/ripemd160.cpp	/^void inline R22(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }$/;"	f	namespace:__anon42::ripemd160
R2Array	./test/arith_uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2Array	./test/uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2L	./test/arith_uint256_tests.cpp	/^const arith_uint256 R2L = arith_uint256V(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2L	./test/uint256_tests.cpp	/^const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2S	./test/uint256_tests.cpp	/^const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));$/;"	v
R31	./crypto/ripemd160.cpp	/^void inline R31(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }$/;"	f	namespace:__anon42::ripemd160
R32	./crypto/ripemd160.cpp	/^void inline R32(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }$/;"	f	namespace:__anon42::ripemd160
R41	./crypto/ripemd160.cpp	/^void inline R41(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }$/;"	f	namespace:__anon42::ripemd160
R42	./crypto/ripemd160.cpp	/^void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }$/;"	f	namespace:__anon42::ripemd160
R51	./crypto/ripemd160.cpp	/^void inline R51(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }$/;"	f	namespace:__anon42::ripemd160
R52	./crypto/ripemd160.cpp	/^void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon42::ripemd160
RANDOM	./leveldb/doc/bench/db_bench_sqlite3.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM	./leveldb/doc/bench/db_bench_tree_db.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOMIZER_ID_ADDRESS_RELAY	./net_processing.cpp	/^static constexpr uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL;$/;"	v	file:
RANDOMIZER_ID_LOCALHOSTNONCE	./net.cpp	/^static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; \/\/ SHA256("localhostnonce")[0:8]$/;"	v	file:
RANDOMIZER_ID_NETGROUP	./net.cpp	/^static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; \/\/ SHA256("netgroup")[0:8]$/;"	v	file:
RANDOM_REPEATS	./wallet/test/coinselector_tests.cpp	/^#define RANDOM_REPEATS /;"	d	file:
RANGE	./rpc/util.h	/^        RANGE,         \/\/!< Special type that is a NUM or [NUM,NUM]$/;"	m	class:RPCArg::Type
RANGE	./test/descriptor_tests.cpp	/^constexpr int RANGE = 1; \/\/ Expected to be ranged descriptor$/;"	m	namespace:__anon56	file:
RANLIB	./Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	./secp256k1/Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	./univalue/Makefile	/^RANLIB = ranlib$/;"	m
RAPIDCHECK_LIBS	./Makefile	/^RAPIDCHECK_LIBS = $/;"	m
RAW_TEST_FILES	./Makefile	/^RAW_TEST_FILES = $/;"	m
RBFTransactionState	./policy/rbf.h	/^enum class RBFTransactionState {$/;"	c
RCC	./Makefile	/^RCC = $/;"	m
RC_BOOST_PROP	./test/key_properties.cpp	/^RC_BOOST_PROP(key_generates_correct_pubkey, (const CKey& key))$/;"	f
RC_BOOST_PROP	./test/key_properties.cpp	/^RC_BOOST_PROP(key_set_symmetry, (const CKey& key))$/;"	f
RC_BOOST_PROP	./test/key_properties.cpp	/^RC_BOOST_PROP(key_sign_symmetry, (const CKey& key, const uint256& hash))$/;"	f
RC_BOOST_PROP	./test/key_properties.cpp	/^RC_BOOST_PROP(key_uniqueness, (const CKey& key1, const CKey& key2))$/;"	f
READELF	./Makefile	/^READELF = $/;"	m
READWRITE	./serialize.h	/^#define READWRITE(/;"	d
READWRITEAS	./serialize.h	/^#define READWRITEAS(/;"	d
READ_STATUS_CHECKBLOCK_FAILED	./blockencodings.h	/^    READ_STATUS_CHECKBLOCK_FAILED, \/\/ Used only by FillBlock to indicate a$/;"	e	enum:ReadStatus_t
READ_STATUS_FAILED	./blockencodings.h	/^    READ_STATUS_FAILED, \/\/ Failed to process object$/;"	e	enum:ReadStatus_t
READ_STATUS_INVALID	./blockencodings.h	/^    READ_STATUS_INVALID, \/\/ Invalid object, peer is sending bogus crap$/;"	e	enum:ReadStatus_t
READ_STATUS_OK	./blockencodings.h	/^    READ_STATUS_OK,$/;"	e	enum:ReadStatus_t
REAL_THIN_SP_CP	./qt/bitcoinunits.h	/^#define REAL_THIN_SP_CP /;"	d
REAL_THIN_SP_HTML	./qt/bitcoinunits.h	/^#define REAL_THIN_SP_HTML /;"	d
REAL_THIN_SP_UTF8	./qt/bitcoinunits.h	/^#define REAL_THIN_SP_UTF8 /;"	d
RECENT_CONSENSUS_CHANGE	./consensus/validation.h	/^    RECENT_CONSENSUS_CHANGE,$/;"	m	class:ValidationInvalidReason
RECHECK_LOGS	./Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECHECK_LOGS	./secp256k1/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECHECK_LOGS	./univalue/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECONNECT_TIMEOUT_EXP	./torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_EXP = 1.5;$/;"	v	file:
RECONNECT_TIMEOUT_START	./torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_START = 1.0;$/;"	v	file:
RECOVER_OK	./wallet/db.h	/^                        RECOVER_OK,$/;"	m	class:BerkeleyEnvironment::VerifyResult
RECURSIVE_CLEAN_TARGETS	./Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	./Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
REF	./serialize.h	/^inline T& REF(const T& val)$/;"	f
REGISTER_COMMANDS	./util/system.h	/^    REGISTER_COMMANDS,$/;"	m	class:OptionsCategory
REGTEST	./chainparamsbase.cpp	/^const std::string CBaseChainParams::REGTEST = "regtest";$/;"	m	class:CBaseChainParams	file:
REGTEST	./chainparamsbase.h	/^    static const std::string REGTEST;$/;"	m	class:CBaseChainParams
REINDEX	./qt/clientmodel.h	/^    REINDEX,$/;"	m	class:BlockSource
REJECT	./protocol.cpp	/^const char *REJECT="reject";$/;"	m	namespace:NetMsgType	file:
REJECT_CHECKPOINT	./consensus/validation.h	/^static const unsigned char REJECT_CHECKPOINT = 0x43;$/;"	v
REJECT_DUPLICATE	./consensus/validation.h	/^static const unsigned char REJECT_DUPLICATE = 0x12;$/;"	v
REJECT_HIGHFEE	./validation.h	/^static const unsigned int REJECT_HIGHFEE = 0x100;$/;"	v
REJECT_INSUFFICIENTFEE	./consensus/validation.h	/^static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;$/;"	v
REJECT_INTERNAL	./validation.h	/^static const unsigned int REJECT_INTERNAL = 0x100;$/;"	v
REJECT_INVALID	./consensus/validation.h	/^static const unsigned char REJECT_INVALID = 0x10;$/;"	v
REJECT_MALFORMED	./consensus/validation.h	/^static const unsigned char REJECT_MALFORMED = 0x01;$/;"	v
REJECT_NONSTANDARD	./consensus/validation.h	/^static const unsigned char REJECT_NONSTANDARD = 0x40;$/;"	v
REJECT_OBSOLETE	./consensus/validation.h	/^static const unsigned char REJECT_OBSOLETE = 0x11;$/;"	v
RELDFLAGS	./Makefile	/^RELDFLAGS = $/;"	m
REORG	./txmempool.h	/^    REORG,       \/\/!< Removed for reorganization$/;"	m	class:MemPoolRemovalReason
REPLACEABLE_BIP125	./policy/rbf.h	/^    REPLACEABLE_BIP125,$/;"	m	class:RBFTransactionState
REPLACED	./txmempool.h	/^    REPLACED,    \/\/!< Removed for replacement$/;"	m	class:MemPoolRemovalReason
REQUIRED	./policy/fees.h	/^    REQUIRED,$/;"	m	class:FeeEstimateHorizon::FeeReason
RESET_DELETE_UNSYNCED_FILES	./leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RESET_DROP_UNSYNCED_DATA	./leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RESTERR	./rest.cpp	/^static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)$/;"	f	file:
RIPEMD160	./bench/crypto_hash.cpp	/^static void RIPEMD160(benchmark::State& state)$/;"	f	file:
RNGLevel	./random.cpp	/^enum class RNGLevel {$/;"	c	file:
RNGState	./random.cpp	/^class RNGState {$/;"	c	namespace:__anon61	file:
ROLLING_FEE_HALFLIFE	./txmempool.h	/^    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; \/\/ public only for testing$/;"	m	class:CTxMemPool
ROT	./crypto/ctaes/ctaes.c	/^#define ROT(/;"	d	file:
ROTL	./crypto/siphash.cpp	/^#define ROTL(/;"	d	file:
ROTL32	./hash.cpp	/^inline uint32_t ROTL32(uint32_t x, int8_t r)$/;"	f
RPC	./util/system.h	/^    RPC,$/;"	m	class:OptionsCategory
RPCArg	./rpc/util.h	/^    RPCArg($/;"	f	struct:RPCArg
RPCArg	./rpc/util.h	/^struct RPCArg {$/;"	s
RPCAuthorized	./httprpc.cpp	/^static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)$/;"	f	file:
RPCCommandExecution	./rpc/server.cpp	/^    explicit RPCCommandExecution(const std::string& method)$/;"	f	struct:RPCCommandExecution
RPCCommandExecution	./rpc/server.cpp	/^struct RPCCommandExecution$/;"	s	file:
RPCCommandExecutionInfo	./rpc/server.cpp	/^struct RPCCommandExecutionInfo$/;"	s	file:
RPCConsole	./qt/rpcconsole.cpp	/^RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:RPCConsole
RPCConsole	./qt/rpcconsole.h	/^class RPCConsole: public QWidget$/;"	c
RPCConvertNamedValues	./rpc/client.cpp	/^UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCConvertValues	./rpc/client.cpp	/^UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCErrorCode	./rpc/protocol.h	/^enum RPCErrorCode$/;"	g
RPCErrorFromTransactionError	./rpc/util.cpp	/^RPCErrorCode RPCErrorFromTransactionError(TransactionError terr)$/;"	f
RPCExamples	./rpc/util.h	/^    RPCExamples($/;"	f	struct:RPCExamples
RPCExamples	./rpc/util.h	/^struct RPCExamples {$/;"	s
RPCExecuteCommandLine	./qt/rpcconsole.h	/^    static bool RPCExecuteCommandLine(interfaces::Node& node, std::string &strResult, const std::string &strCommand, std::string * const pstrFilteredOut = nullptr, const WalletModel* wallet_model = nullptr) {$/;"	f	class:RPCConsole
RPCExecutor	./qt/rpcconsole.cpp	/^    explicit RPCExecutor(interfaces::Node& node) : m_node(node) {}$/;"	f	class:RPCExecutor
RPCExecutor	./qt/rpcconsole.cpp	/^class RPCExecutor : public QObject$/;"	c	file:
RPCHelpMan	./rpc/util.cpp	/^RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples)$/;"	f	class:RPCHelpMan
RPCHelpMan	./rpc/util.h	/^class RPCHelpMan$/;"	c
RPCIsInWarmup	./rpc/server.cpp	/^bool RPCIsInWarmup(std::string *outStatus)$/;"	f
RPCLockedMemoryInfo	./rpc/misc.cpp	/^static UniValue RPCLockedMemoryInfo()$/;"	f	file:
RPCMallocInfo	./rpc/misc.cpp	/^static std::string RPCMallocInfo()$/;"	f	file:
RPCNestedTests	./qt/test/rpcnestedtests.h	/^class RPCNestedTests : public QObject$/;"	c
RPCNotifyBlockChange	./rpc/blockchain.cpp	/^void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)$/;"	f
RPCParseCommandLine	./qt/rpcconsole.cpp	/^bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const WalletModel* wallet_model)$/;"	f	class:RPCConsole
RPCPort	./chainparamsbase.h	/^    int RPCPort() const { return nRPCPort; }$/;"	f	class:CBaseChainParams
RPCResult	./rpc/util.h	/^    RPCResult(std::string cond, std::string result)$/;"	f	struct:RPCResult
RPCResult	./rpc/util.h	/^    explicit RPCResult(std::string result)$/;"	f	struct:RPCResult
RPCResult	./rpc/util.h	/^struct RPCResult {$/;"	s
RPCResults	./rpc/util.h	/^    RPCResults()$/;"	f	struct:RPCResults
RPCResults	./rpc/util.h	/^    RPCResults(RPCResult result)$/;"	f	struct:RPCResults
RPCResults	./rpc/util.h	/^    RPCResults(std::initializer_list<RPCResult> results)$/;"	f	struct:RPCResults
RPCResults	./rpc/util.h	/^struct RPCResults {$/;"	s
RPCRunLater	./rpc/server.cpp	/^void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds)$/;"	f
RPCSerializationFlags	./rpc/server.cpp	/^int RPCSerializationFlags()$/;"	f
RPCServer	./rpc/server.h	/^namespace RPCServer$/;"	n
RPCServerInfo	./rpc/server.cpp	/^struct RPCServerInfo$/;"	s	file:
RPCSetTimerInterface	./rpc/server.cpp	/^void RPCSetTimerInterface(RPCTimerInterface *iface)$/;"	f
RPCSetTimerInterfaceIfUnset	./rpc/server.cpp	/^void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)$/;"	f
RPCTimerBase	./rpc/server.h	/^class RPCTimerBase$/;"	c
RPCTimerInterface	./rpc/server.h	/^class RPCTimerInterface$/;"	c
RPCTypeCheck	./rpc/util.cpp	/^void RPCTypeCheck(const UniValue& params,$/;"	f
RPCTypeCheckArgument	./rpc/util.cpp	/^void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected)$/;"	f
RPCTypeCheckObj	./rpc/util.cpp	/^void RPCTypeCheckObj(const UniValue& o,$/;"	f
RPCUnsetTimerInterface	./rpc/server.cpp	/^void RPCUnsetTimerInterface(RPCTimerInterface *iface)$/;"	f
RPC_CLIENT_INVALID_IP_OR_SUBNET	./rpc/protocol.h	/^    RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, \/\/!< Invalid IP\/Subnet$/;"	e	enum:RPCErrorCode
RPC_CLIENT_IN_INITIAL_DOWNLOAD	./rpc/protocol.h	/^    RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, \/\/!< Still downloading initial blocks$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_ALREADY_ADDED	./rpc/protocol.h	/^    RPC_CLIENT_NODE_ALREADY_ADDED   = -23, \/\/!< Node is already added$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_ADDED	./rpc/protocol.h	/^    RPC_CLIENT_NODE_NOT_ADDED       = -24, \/\/!< Node has not been added before$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_CONNECTED	./rpc/protocol.h	/^    RPC_CLIENT_NODE_NOT_CONNECTED   = -29, \/\/!< Node to disconnect not found in connected nodes$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NOT_CONNECTED	./rpc/protocol.h	/^    RPC_CLIENT_NOT_CONNECTED        = -9,  \/\/!< Bitcoin is not connected$/;"	e	enum:RPCErrorCode
RPC_CLIENT_P2P_DISABLED	./rpc/protocol.h	/^    RPC_CLIENT_P2P_DISABLED         = -31, \/\/!< No valid connection manager instance found$/;"	e	enum:RPCErrorCode
RPC_DATABASE_ERROR	./rpc/protocol.h	/^    RPC_DATABASE_ERROR              = -20, \/\/!< Database error$/;"	e	enum:RPCErrorCode
RPC_DESERIALIZATION_ERROR	./rpc/protocol.h	/^    RPC_DESERIALIZATION_ERROR       = -22, \/\/!< Error parsing or validating structure in raw format$/;"	e	enum:RPCErrorCode
RPC_FORBIDDEN_BY_SAFE_MODE	./rpc/protocol.h	/^    RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  \/\/!< Server is in safe mode, and command is not allowed in safe mode$/;"	e	enum:RPCErrorCode
RPC_INTERNAL_ERROR	./rpc/protocol.h	/^    RPC_INTERNAL_ERROR   = -32603,$/;"	e	enum:RPCErrorCode
RPC_INVALID_ADDRESS_OR_KEY	./rpc/protocol.h	/^    RPC_INVALID_ADDRESS_OR_KEY      = -5,  \/\/!< Invalid address or key$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMETER	./rpc/protocol.h	/^    RPC_INVALID_PARAMETER           = -8,  \/\/!< Invalid, missing or duplicate parameter$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMS	./rpc/protocol.h	/^    RPC_INVALID_PARAMS   = -32602,$/;"	e	enum:RPCErrorCode
RPC_INVALID_REQUEST	./rpc/protocol.h	/^    RPC_INVALID_REQUEST  = -32600,$/;"	e	enum:RPCErrorCode
RPC_IN_WARMUP	./rpc/protocol.h	/^    RPC_IN_WARMUP                   = -28, \/\/!< Client still warming up$/;"	e	enum:RPCErrorCode
RPC_METHOD_DEPRECATED	./rpc/protocol.h	/^    RPC_METHOD_DEPRECATED           = -32, \/\/!< RPC method is deprecated$/;"	e	enum:RPCErrorCode
RPC_METHOD_NOT_FOUND	./rpc/protocol.h	/^    RPC_METHOD_NOT_FOUND = -32601,$/;"	e	enum:RPCErrorCode
RPC_MISC_ERROR	./rpc/protocol.h	/^    RPC_MISC_ERROR                  = -1,  \/\/!< std::exception thrown in command handling$/;"	e	enum:RPCErrorCode
RPC_OUT_OF_MEMORY	./rpc/protocol.h	/^    RPC_OUT_OF_MEMORY               = -7,  \/\/!< Ran out of memory during operation$/;"	e	enum:RPCErrorCode
RPC_PARSE_ERROR	./rpc/protocol.h	/^    RPC_PARSE_ERROR      = -32700,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ALREADY_IN_CHAIN	./rpc/protocol.h	/^    RPC_TRANSACTION_ALREADY_IN_CHAIN= RPC_VERIFY_ALREADY_IN_CHAIN,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ERROR	./rpc/protocol.h	/^    RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_REJECTED	./rpc/protocol.h	/^    RPC_TRANSACTION_REJECTED        = RPC_VERIFY_REJECTED,$/;"	e	enum:RPCErrorCode
RPC_TYPE_ERROR	./rpc/protocol.h	/^    RPC_TYPE_ERROR                  = -3,  \/\/!< Unexpected type was passed as parameter$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ALREADY_IN_CHAIN	./rpc/protocol.h	/^    RPC_VERIFY_ALREADY_IN_CHAIN     = -27, \/\/!< Transaction already in chain$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ERROR	./rpc/protocol.h	/^    RPC_VERIFY_ERROR                = -25, \/\/!< General error during transaction or block submission$/;"	e	enum:RPCErrorCode
RPC_VERIFY_REJECTED	./rpc/protocol.h	/^    RPC_VERIFY_REJECTED             = -26, \/\/!< Transaction or block was rejected by network rules$/;"	e	enum:RPCErrorCode
RPC_WALLET_ALREADY_UNLOCKED	./rpc/protocol.h	/^    RPC_WALLET_ALREADY_UNLOCKED     = -17, \/\/!< Wallet is already unlocked$/;"	e	enum:RPCErrorCode
RPC_WALLET_ENCRYPTION_FAILED	./rpc/protocol.h	/^    RPC_WALLET_ENCRYPTION_FAILED    = -16, \/\/!< Failed to encrypt the wallet$/;"	e	enum:RPCErrorCode
RPC_WALLET_ERROR	./rpc/protocol.h	/^    RPC_WALLET_ERROR                = -4,  \/\/!< Unspecified problem with wallet (key not found etc.)$/;"	e	enum:RPCErrorCode
RPC_WALLET_INSUFFICIENT_FUNDS	./rpc/protocol.h	/^    RPC_WALLET_INSUFFICIENT_FUNDS   = -6,  \/\/!< Not enough funds in wallet or account$/;"	e	enum:RPCErrorCode
RPC_WALLET_INVALID_ACCOUNT_NAME	./rpc/protocol.h	/^    RPC_WALLET_INVALID_ACCOUNT_NAME = RPC_WALLET_INVALID_LABEL_NAME,$/;"	e	enum:RPCErrorCode
RPC_WALLET_INVALID_LABEL_NAME	./rpc/protocol.h	/^    RPC_WALLET_INVALID_LABEL_NAME   = -11, \/\/!< Invalid label name$/;"	e	enum:RPCErrorCode
RPC_WALLET_KEYPOOL_RAN_OUT	./rpc/protocol.h	/^    RPC_WALLET_KEYPOOL_RAN_OUT      = -12, \/\/!< Keypool ran out, call keypoolrefill first$/;"	e	enum:RPCErrorCode
RPC_WALLET_NOT_FOUND	./rpc/protocol.h	/^    RPC_WALLET_NOT_FOUND            = -18, \/\/!< Invalid wallet specified$/;"	e	enum:RPCErrorCode
RPC_WALLET_NOT_SPECIFIED	./rpc/protocol.h	/^    RPC_WALLET_NOT_SPECIFIED        = -19, \/\/!< No wallet specified (error when there are multiple wallets loaded)$/;"	e	enum:RPCErrorCode
RPC_WALLET_PASSPHRASE_INCORRECT	./rpc/protocol.h	/^    RPC_WALLET_PASSPHRASE_INCORRECT = -14, \/\/!< The wallet passphrase entered was incorrect$/;"	e	enum:RPCErrorCode
RPC_WALLET_UNLOCK_NEEDED	./rpc/protocol.h	/^    RPC_WALLET_UNLOCK_NEEDED        = -13, \/\/!< Enter the wallet passphrase with walletpassphrase first$/;"	e	enum:RPCErrorCode
RPC_WALLET_WRONG_ENC_STATE	./rpc/protocol.h	/^    RPC_WALLET_WRONG_ENC_STATE      = -15, \/\/!< Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.)$/;"	e	enum:RPCErrorCode
RSVG_CONVERT	./Makefile	/^RSVG_CONVERT = rsvg-convert$/;"	m
RUNNING	./leveldb/db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
RUN_TESTS	./wallet/test/coinselector_tests.cpp	/^#define RUN_TESTS /;"	d	file:
RaiseFileDescriptorLimit	./util/system.cpp	/^int RaiseFileDescriptorLimit(int nMinFD) {$/;"	f
RaiseValidity	./chain.h	/^    bool RaiseValidity(enum BlockStatus nUpTo)$/;"	f	class:CBlockIndex
RandAddSeedPerfmon	./random.cpp	/^static void RandAddSeedPerfmon(CSHA512& hasher)$/;"	f	file:
RandAddSeedSleep	./random.cpp	/^void RandAddSeedSleep() { ProcRand(nullptr, 0, RNGLevel::SLEEP); }$/;"	f
RandFailure	./random.cpp	/^[[noreturn]] static void RandFailure()$/;"	f	file:
Random	./leveldb/util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	./leveldb/util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	./leveldb/include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	./leveldb/include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	./leveldb/helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
RandomAccessFileImpl	./leveldb/helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon35	file:
RandomData	./test/bloom_tests.cpp	/^static std::vector<unsigned char> RandomData()$/;"	f	file:
RandomGenerator	./leveldb/db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon19::RandomGenerator
RandomGenerator	./leveldb/db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon19	file:
RandomGenerator	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon32::RandomGenerator
RandomGenerator	./leveldb/doc/bench/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon32	file:
RandomGenerator	./leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon33::RandomGenerator
RandomGenerator	./leveldb/doc/bench/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon33	file:
RandomHeight	./leveldb/db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomInit	./random.cpp	/^void RandomInit()$/;"	f
RandomKey	./leveldb/db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	./leveldb/util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomOrphan	./test/denialofservice_tests.cpp	/^static CTransactionRef RandomOrphan()$/;"	f	file:
RandomPeriod	./leveldb/db/db_iter.cc	/^  ssize_t RandomPeriod() {$/;"	f	class:leveldb::__anon29::DBIter	file:
RandomScript	./test/sighash_tests.cpp	/^void static RandomScript(CScript &script) {$/;"	f	file:
RandomSeed	./leveldb/util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSeed	./random.cpp	/^void FastRandomContext::RandomSeed()$/;"	f	class:FastRandomContext
RandomSkewedString	./leveldb/db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	./leveldb/db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	./leveldb/util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	./leveldb/db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
RandomTransaction	./test/sighash_tests.cpp	/^void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {$/;"	f	file:
Random_SanityCheck	./random.cpp	/^bool Random_SanityCheck()$/;"	f
Range	./leveldb/include/leveldb/db.h	/^  Range() { }$/;"	f	struct:leveldb::Range
Range	./leveldb/include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	./leveldb/include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
Range	./qt/transactionview.h	/^        Range$/;"	e	enum:TransactionView::DateEnum
RawDecorationRole	./qt/transactiontablemodel.h	/^        RawDecorationRole,$/;"	e	enum:TransactionTableModel::RoleIndex
RawDescriptor	./script/descriptor.cpp	/^    RawDescriptor(CScript script) : DescriptorImpl({}, {}, "raw"), m_script(std::move(script)) {}$/;"	f	class:__anon75::final
ReacceptWalletTransactions	./wallet/wallet.cpp	/^void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)$/;"	f	class:CWallet
Read	./addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr)$/;"	f	class:CAddrDB
Read	./addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)$/;"	f	class:CAddrDB
Read	./addrdb.cpp	/^bool CBanDB::Read(banmap_t& banSet)$/;"	f	class:CBanDB
Read	./dbwrapper.h	/^    bool Read(const K& key, V& value) const$/;"	f	class:CDBWrapper
Read	./leveldb/db/db_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon23::AtomicCounter
Read	./leveldb/db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	./leveldb/db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	./leveldb/helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon35::FileState
Read	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
Read	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
Read	./leveldb/table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	./leveldb/util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon8::PosixSequentialFile
Read	./leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
Read	./leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
Read	./leveldb/util/env_win.cc	/^Status Win32RandomAccessFile::Read(uint64_t offset,size_t n,Slice* result,char* scratch) const$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Read	./leveldb/util/env_win.cc	/^Status Win32SequentialFile::Read( size_t n, Slice* result, char* scratch )$/;"	f	class:leveldb::Win32::Win32SequentialFile
Read	./policy/fees.cpp	/^bool CBlockPolicyEstimator::Read(CAutoFile& filein)$/;"	f	class:CBlockPolicyEstimator
Read	./policy/fees.cpp	/^void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets)$/;"	f	class:TxConfirmStats
Read	./streams.h	/^    uint64_t Read(int nbits) {$/;"	f	class:BitStreamReader
Read	./wallet/db.h	/^    bool Read(const K& key, T& value)$/;"	f	class:BerkeleyBatch
Read4	./crypto/sha256_sse41.cpp	/^__m128i inline Read4(const unsigned char* chunk, int offset) {$/;"	f	namespace:sha256d64_sse41::__anon41
Read8	./crypto/sha256_avx2.cpp	/^__m256i inline Read8(const unsigned char* chunk, int offset) {$/;"	f	namespace:sha256d64_avx2::__anon37
ReadAtCursor	./wallet/db.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue)$/;"	f	class:BerkeleyBatch
ReadBE32	./crypto/common.h	/^uint32_t static inline ReadBE32(const unsigned char* ptr)$/;"	f
ReadBE64	./crypto/common.h	/^uint64_t static inline ReadBE64(const unsigned char* ptr)$/;"	f
ReadBestBlock	./index/base.cpp	/^bool BaseIndex::DB::ReadBestBlock(CBlockLocator& locator) const$/;"	f	class:BaseIndex::DB
ReadBestBlock	./wallet/walletdb.cpp	/^bool WalletBatch::ReadBestBlock(CBlockLocator& locator)$/;"	f	class:WalletBatch
ReadBinaryFile	./torcontrol.cpp	/^static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())$/;"	f	file:
ReadBlock	./leveldb/table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadBlockFileInfo	./txdb.cpp	/^bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {$/;"	f	class:CBlockTreeDB
ReadBlockFromDisk	./validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)$/;"	f
ReadBlockFromDisk	./validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)$/;"	f
ReadBody	./httpserver.cpp	/^std::string HTTPRequest::ReadBody()$/;"	f	class:HTTPRequest
ReadCompactSize	./serialize.h	/^uint64_t ReadCompactSize(Stream& is)$/;"	f
ReadConfigFiles	./util/system.cpp	/^bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)$/;"	f	class:ArgsManager
ReadConfigStream	./util/system.cpp	/^bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)$/;"	f	class:ArgsManager
ReadConfigString	./test/util_tests.cpp	/^    void ReadConfigString(const std::string str_config)$/;"	f	struct:TestArgsManager
ReadFileToString	./leveldb/util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	./leveldb/table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadFilterFromDisk	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const$/;"	f	class:BlockFilterIndex
ReadFlag	./txdb.cpp	/^bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {$/;"	f	class:CBlockTreeDB
ReadHot	./leveldb/db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadLE16	./crypto/common.h	/^uint16_t static inline ReadLE16(const unsigned char* ptr)$/;"	f
ReadLE32	./crypto/common.h	/^uint32_t static inline ReadLE32(const unsigned char* ptr)$/;"	f
ReadLE64	./crypto/common.h	/^uint64_t static inline ReadLE64(const unsigned char* ptr)$/;"	f
ReadLastBlockFile	./txdb.cpp	/^bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {$/;"	f	class:CBlockTreeDB
ReadMeta	./leveldb/table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	./leveldb/db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	./leveldb/include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	./leveldb/include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadOrderPos	./wallet/wallet.h	/^static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
ReadPhysicalRecord	./leveldb/db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadPool	./wallet/walletdb.cpp	/^bool WalletBatch::ReadPool(int64_t nPool, CKeyPool& keypool)$/;"	f	class:WalletBatch
ReadRandom	./leveldb/db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRandom	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRawBlockFromDisk	./validation.cpp	/^bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)$/;"	f
ReadRawBlockFromDisk	./validation.cpp	/^bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)$/;"	f
ReadRecord	./leveldb/db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReindexing	./txdb.cpp	/^void CBlockTreeDB::ReadReindexing(bool &fReindexing) {$/;"	f	class:CBlockTreeDB
ReadReverse	./leveldb/db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	./leveldb/db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStatus	./blockencodings.h	/^} ReadStatus;$/;"	t	typeref:enum:ReadStatus_t
ReadStatus_t	./blockencodings.h	/^typedef enum ReadStatus_t$/;"	g
ReadStep	./leveldb/db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadTxPos	./index/txindex.cpp	/^bool TxIndex::DB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const$/;"	f	class:TxIndex::DB
ReadValue	./leveldb/db/fault_injection_test.cc	/^  Status ReadValue(int i, std::string* val) const {$/;"	f	class:leveldb::FaultInjectionTest
ReadVarInt	./serialize.h	/^I ReadVarInt(Stream& is)$/;"	f
ReadVersion	./wallet/db.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:BerkeleyBatch
ReadVersion	./wallet/walletdb.cpp	/^bool WalletBatch::ReadVersion(int& nVersion)$/;"	f	class:WalletBatch
ReadWhileWriting	./leveldb/db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadWriteAsHelper	./serialize.h	/^template<typename X> X& ReadWriteAsHelper(X& x) { return x; }$/;"	f
ReadWriteAsHelper	./serialize.h	/^template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }$/;"	f
Reader	./leveldb/db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	./leveldb/db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	./leveldb/db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState	file:
Receive	./qt/addresstablemodel.cpp	/^const QString AddressTableModel::Receive = "R";$/;"	m	class:AddressTableModel	file:
Receive	./qt/addresstablemodel.h	/^    static const QString Receive;   \/**< Specifies receive address *\/$/;"	m	class:AddressTableModel
ReceiveCoinsDialog	./qt/receivecoinsdialog.cpp	/^ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:ReceiveCoinsDialog
ReceiveCoinsDialog	./qt/receivecoinsdialog.h	/^class ReceiveCoinsDialog : public QDialog$/;"	c
ReceiveMsgBytes	./net.cpp	/^bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)$/;"	f	class:CNode
ReceiveRequestDialog	./qt/receiverequestdialog.cpp	/^ReceiveRequestDialog::ReceiveRequestDialog(QWidget *parent) :$/;"	f	class:ReceiveRequestDialog
ReceiveRequestDialog	./qt/receiverequestdialog.h	/^class ReceiveRequestDialog : public QDialog$/;"	c
Received	./qt/peertablemodel.h	/^        Received = 4,$/;"	e	enum:PeerTableModel::ColumnIndex
ReceivedBlockTransactions	./validation.cpp	/^void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams)$/;"	f	class:CChainState
Receiving	./qt/addresstablemodel.cpp	/^        Receiving,$/;"	e	enum:AddressTableEntry::Type	file:
ReceivingTab	./qt/addressbookpage.h	/^        ReceivingTab = 1$/;"	e	enum:AddressBookPage::Tabs
RecentRequestEntry	./qt/recentrequeststablemodel.h	/^    RecentRequestEntry() : nVersion(RecentRequestEntry::CURRENT_VERSION), id(0) { }$/;"	f	class:RecentRequestEntry
RecentRequestEntry	./qt/recentrequeststablemodel.h	/^class RecentRequestEntry$/;"	c
RecentRequestEntryLessThan	./qt/recentrequeststablemodel.h	/^    RecentRequestEntryLessThan(int nColumn, Qt::SortOrder fOrder):$/;"	f	class:RecentRequestEntryLessThan
RecentRequestEntryLessThan	./qt/recentrequeststablemodel.h	/^class RecentRequestEntryLessThan$/;"	c
RecentRequestsTableModel	./qt/recentrequeststablemodel.cpp	/^RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :$/;"	f	class:RecentRequestsTableModel
RecentRequestsTableModel	./qt/recentrequeststablemodel.h	/^class RecentRequestsTableModel: public QAbstractTableModel$/;"	c
RecipientCatcher	./qt/test/paymentservertests.h	/^class RecipientCatcher : public QObject$/;"	c
RecommendedNumConfirmations	./qt/transactionrecord.h	/^    static const int RecommendedNumConfirmations = 6;$/;"	m	class:TransactionRecord
Reconnect	./torcontrol.cpp	/^void TorController::Reconnect()$/;"	f	class:TorController
Record	./policy/fees.cpp	/^void TxConfirmStats::Record(int blocksToConfirm, double val)$/;"	f	class:TxConfirmStats
RecordBackgroundError	./leveldb/db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordBytesRecv	./net.cpp	/^void CConnman::RecordBytesRecv(uint64_t bytes)$/;"	f	class:CConnman
RecordBytesSent	./net.cpp	/^void CConnman::RecordBytesSent(uint64_t bytes)$/;"	f	class:CConnman
RecordReadSample	./leveldb/db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	./leveldb/db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	./leveldb/db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	./leveldb/db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit, bool *save_manifest) {$/;"	f	class:leveldb::DBImpl
Recover	./leveldb/db/version_set.cc	/^Status VersionSet::Recover(bool *save_manifest) {$/;"	f	class:leveldb::VersionSet
Recover	./wallet/db.cpp	/^bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)$/;"	f	class:BerkeleyBatch
Recover	./wallet/walletdb.cpp	/^bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_filename)$/;"	f	class:WalletBatch
Recover	./wallet/walletdb.cpp	/^bool WalletBatch::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)$/;"	f	class:WalletBatch
RecoverCompact	./pubkey.cpp	/^bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
RecoverKeysOnlyFilter	./wallet/walletdb.cpp	/^bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)$/;"	f	class:WalletBatch
RecoverLogFile	./leveldb/db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,$/;"	f	class:leveldb::DBImpl
RecoveryTest	./leveldb/db/recovery_test.cc	/^  RecoveryTest() : env_(Env::Default()), db_(NULL) {$/;"	f	class:leveldb::RecoveryTest
RecoveryTest	./leveldb/db/recovery_test.cc	/^class RecoveryTest {$/;"	c	namespace:leveldb	file:
RecurseImportData	./wallet/rpcdump.cpp	/^static std::string RecurseImportData(const CScript& script, ImportData& import_data, const ScriptContext script_ctx)$/;"	f	file:
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlock& block) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const COutPoint& out) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CScript& script) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxIn& in) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxOut& out) {$/;"	f
RecursiveDynamicUsage	./core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const std::shared_ptr<X>& p) {$/;"	f
RecvFromOther	./qt/transactionrecord.h	/^        RecvFromOther,$/;"	e	enum:TransactionRecord::Type
RecvWithAddress	./qt/transactionrecord.h	/^        RecvWithAddress,$/;"	e	enum:TransactionRecord::Type
Ref	./leveldb/db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	./leveldb/db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	./leveldb/helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon35::FileState
Ref	./leveldb/util/cache.cc	/^void LRUCache::Ref(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
RegisterAllCoreRPCCommands	./rpc/register.h	/^static inline void RegisterAllCoreRPCCommands(CRPCTable &t)$/;"	f
RegisterBackgroundSignalScheduler	./validationinterface.cpp	/^void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {$/;"	f	class:CMainSignals
RegisterBlockchainRPCCommands	./rpc/blockchain.cpp	/^void RegisterBlockchainRPCCommands(CRPCTable &t)$/;"	f
RegisterCleanup	./leveldb/table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterHTTPHandler	./httpserver.cpp	/^void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)$/;"	f
RegisterLoad	./bitcoin-tx.cpp	/^static void RegisterLoad(const std::string& strInput)$/;"	f	file:
RegisterMiningRPCCommands	./rpc/mining.cpp	/^void RegisterMiningRPCCommands(CRPCTable &t)$/;"	f
RegisterMiscRPCCommands	./rpc/misc.cpp	/^void RegisterMiscRPCCommands(CRPCTable &t)$/;"	f
RegisterNetRPCCommands	./rpc/net.cpp	/^void RegisterNetRPCCommands(CRPCTable &t)$/;"	f
RegisterRawTransactionRPCCommands	./rpc/rawtransaction.cpp	/^void RegisterRawTransactionRPCCommands(CRPCTable &t)$/;"	f
RegisterSet	./bitcoin-tx.cpp	/^static void RegisterSet(const std::string& strInput)$/;"	f	file:
RegisterSetJson	./bitcoin-tx.cpp	/^static void RegisterSetJson(const std::string& key, const std::string& rawJson)$/;"	f	file:
RegisterTest	./leveldb/util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
RegisterValidationInterface	./validationinterface.cpp	/^void RegisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
RegisterWalletRPCCommands	./wallet/rpcwallet.cpp	/^void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)$/;"	f
RegisterWithMempoolSignals	./validationinterface.cpp	/^void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {$/;"	f	class:CMainSignals
RegisterZMQRPCCommands	./zmq/zmqrpc.cpp	/^void RegisterZMQRPCCommands(CRPCTable& t)$/;"	f
RegtestingSetup	./test/blockencodings_tests.cpp	/^    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}$/;"	f	struct:RegtestingSetup
RegtestingSetup	./test/blockencodings_tests.cpp	/^struct RegtestingSetup : public TestingSetup {$/;"	s	file:
RegtestingSetup	./test/validation_block_tests.cpp	/^    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}$/;"	f	struct:RegtestingSetup
RegtestingSetup	./test/validation_block_tests.cpp	/^struct RegtestingSetup : public TestingSetup {$/;"	s	file:
RejectDifficultyMismatch	./test/blockchain_tests.cpp	/^static void RejectDifficultyMismatch(double difficulty, double expected_difficulty) {$/;"	f	file:
RelayAddress	./net_processing.cpp	/^static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connman)$/;"	f	file:
RelayTransaction	./net_processing.cpp	/^static void RelayTransaction(const CTransaction& tx, CConnman* connman)$/;"	f	file:
RelayWalletTransaction	./wallet/wallet.cpp	/^bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)$/;"	f	class:CWalletTx
Release	./leveldb/util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Release	./leveldb/util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon4::LRUCache
Release	./leveldb/util/env_posix.cc	/^  void Release() {$/;"	f	class:leveldb::__anon8::Limiter
Release	./net.h	/^    void Release()$/;"	f	class:CNode
Release	./sync.h	/^    void Release()$/;"	f	class:CSemaphoreGrant
ReleaseBlock	./leveldb/table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseDirectoryLocks	./util/system.cpp	/^void ReleaseDirectoryLocks()$/;"	f
ReleaseInputs	./leveldb/db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	./leveldb/db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	./leveldb/db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
ReleaseWallet	./wallet/wallet.cpp	/^static void ReleaseWallet(CWallet* wallet)$/;"	f	file:
Release_Store	./leveldb/port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Release_Store	./leveldb/port/port_win.cc	/^void AtomicPointer::Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
ReloadDbEnv	./wallet/db.cpp	/^void BerkeleyDatabase::ReloadDbEnv()$/;"	f	class:BerkeleyDatabase
ReloadDbEnv	./wallet/db.cpp	/^void BerkeleyEnvironment::ReloadDbEnv()$/;"	f	class:BerkeleyEnvironment
Remove	./leveldb/util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon4::HandleTable
Remove	./leveldb/util/env_posix.cc	/^  void Remove(const std::string& fname) {$/;"	f	class:leveldb::__anon8::PosixLockTable
RemoveAddedNode	./net.cpp	/^bool CConnman::RemoveAddedNode(const std::string& strNode)$/;"	f	class:CConnman
RemoveLocal	./net.cpp	/^void RemoveLocal(const CService& addr)$/;"	f
RemoveStaged	./txmempool.cpp	/^void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {$/;"	f	class:CTxMemPool
RemoveWallet	./wallet/wallet.cpp	/^bool RemoveWallet(const std::shared_ptr<CWallet>& wallet)$/;"	f
RemoveWatchOnly	./keystore.cpp	/^bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
RemoveWatchOnly	./wallet/wallet.cpp	/^bool CWallet::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CWallet
RenameEnMasse	./test/util_threadnames_tests.cpp	/^std::set<std::string> RenameEnMasse(int num_threads)$/;"	f
RenameFile	./leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::RenameFile(const std::string& s,$/;"	f	class:leveldb::FaultInjectionTestEnv
RenameFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon35::InMemoryEnv
RenameFile	./leveldb/include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	./leveldb/util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon8::PosixEnv
RenameFile	./leveldb/util/env_win.cc	/^Status Win32Env::RenameFile( const std::string& src, const std::string& target )$/;"	f	class:leveldb::Win32::Win32Env
RenameLDBToSST	./leveldb/db/db_test.cc	/^  int RenameLDBToSST() {$/;"	f	class:leveldb::DBTest
RenameOver	./util/system.cpp	/^bool RenameOver(fs::path src, fs::path dest)$/;"	f
Reopen	./leveldb/db/corruption_test.cc	/^  void Reopen() {$/;"	f	class:leveldb::CorruptionTest
Reopen	./leveldb/db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
ReopenForAppend	./leveldb/db/log_test.cc	/^  void ReopenForAppend() {$/;"	f	class:leveldb::log::LogTest
ReorderTransactions	./wallet/wallet.cpp	/^DBErrors CWallet::ReorderTransactions()$/;"	f	class:CWallet
Rep	./leveldb/table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	./leveldb/table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	./leveldb/table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	./leveldb/db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	./leveldb/db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	./leveldb/db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon30::Repairer	file:
Repairer	./leveldb/db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon30::Repairer
Repairer	./leveldb/db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon30	file:
Repeat	./scheduler.cpp	/^static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	file:
ReplaceRedeemScript	./test/transaction_tests.cpp	/^static void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)$/;"	f	file:
ReplayBlocks	./validation.cpp	/^bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)$/;"	f	class:CChainState
ReplayBlocks	./validation.cpp	/^bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {$/;"	f
ReplyHandlerCB	./torcontrol.cpp	/^    typedef std::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;$/;"	t	class:TorControlConnection	file:
Report	./leveldb/db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon19::Stats
ReportCollector	./leveldb/db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	./leveldb/db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportCorruption	./leveldb/db/log_reader.cc	/^void Reader::ReportCorruption(uint64_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	./leveldb/db/log_reader.cc	/^void Reader::ReportDrop(uint64_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportHardwareRand	./random.cpp	/^static void ReportHardwareRand() {}$/;"	f	file:
ReportHardwareRand	./random.cpp	/^static void ReportHardwareRand()$/;"	f	file:
ReportInvalidCertificate	./qt/paymentserver.cpp	/^static void ReportInvalidCertificate(const QSslCertificate& cert)$/;"	f	file:
ReportMessage	./leveldb/db/log_test.cc	/^  std::string ReportMessage() const {$/;"	f	class:leveldb::log::LogTest
Reporter	./leveldb/db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
RequestMethod	./httpserver.h	/^    enum RequestMethod {$/;"	g	class:HTTPRequest
RequestMethodString	./httpserver.cpp	/^static std::string RequestMethodString(HTTPRequest::RequestMethod m)$/;"	f	file:
RequireStandard	./chainparams.h	/^    bool RequireStandard() const { return fRequireStandard; }$/;"	f	class:CChainParams
RescanFromTime	./wallet/wallet.cpp	/^int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update)$/;"	f	class:CWallet
RescanWallet	./wallet/rpcdump.cpp	/^static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver, int64_t time_begin = TIMESTAMP_MIN, bool update = true)$/;"	f	file:
ResendWalletTransactions	./wallet/wallet.cpp	/^void CWallet::ResendWalletTransactions()$/;"	f	class:CWallet
ReserveKeyFromKeyPool	./wallet/wallet.cpp	/^bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)$/;"	f	class:CWallet
Reset	./crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Reset()$/;"	f	class:CRIPEMD160
Reset	./crypto/sha1.cpp	/^CSHA1& CSHA1::Reset()$/;"	f	class:CSHA1
Reset	./crypto/sha256.cpp	/^CSHA256& CSHA256::Reset()$/;"	f	class:CSHA256
Reset	./crypto/sha512.cpp	/^CSHA512& CSHA512::Reset()$/;"	f	class:CSHA512
Reset	./hash.h	/^    CHash160& Reset() {$/;"	f	class:CHash160
Reset	./hash.h	/^    CHash256& Reset() {$/;"	f	class:CHash256
Reset	./leveldb/db/db_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon23::AtomicCounter
Reset	./leveldb/table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	./leveldb/table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reset	./leveldb/util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
Reset	./qt/optionsmodel.cpp	/^void OptionsModel::Reset()$/;"	f	class:OptionsModel
Reset	./script/ismine.h	/^    inline void Reset()$/;"	f	struct:CachableAmount
Reset	./test/versionbits_tests.cpp	/^    VersionBitsTester& Reset() {$/;"	f	class:VersionBitsTester
Reset	./wallet/db.cpp	/^void BerkeleyEnvironment::Reset()$/;"	f	class:BerkeleyEnvironment
ResetArgs	./test/getarg_tests.cpp	/^static void ResetArgs(const std::string& strArg)$/;"	f	file:
ResetBlockFailureFlags	./validation.cpp	/^void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {$/;"	f	class:CChainState
ResetBlockFailureFlags	./validation.cpp	/^void ResetBlockFailureFlags(CBlockIndex *pindex) {$/;"	f
ResetDBState	./leveldb/db/fault_injection_test.cc	/^  void ResetDBState(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
ResetMethod	./leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	g	class:leveldb::FaultInjectionTest	file:
ResetState	./leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::ResetState() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Resize	./leveldb/util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon4::HandleTable	file:
ResolveCollisions	./addrman.h	/^    void ResolveCollisions()$/;"	f	class:CAddrMan
ResolveCollisions_	./addrman.cpp	/^void CAddrMan::ResolveCollisions_()$/;"	f	class:CAddrMan
ResolveErrMsg	./init.cpp	/^static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)$/;"	f	file:
ResolveIP	./test/addrman_tests.cpp	/^static CNetAddr ResolveIP(const char* ip)$/;"	f	file:
ResolveIP	./test/addrman_tests.cpp	/^static CNetAddr ResolveIP(std::string ip)$/;"	f	file:
ResolveIP	./test/netbase_tests.cpp	/^static CNetAddr ResolveIP(const char* ip)$/;"	f	file:
ResolveService	./test/addrman_tests.cpp	/^static CService ResolveService(const char* ip, int port = 0)$/;"	f	file:
ResolveService	./test/addrman_tests.cpp	/^static CService ResolveService(std::string ip, int port = 0)$/;"	f	file:
ResolveSubNet	./test/netbase_tests.cpp	/^static CSubNet ResolveSubNet(const char* subnet)$/;"	f	file:
Result	./wallet/feebumper.h	/^enum class Result$/;"	c	namespace:feebumper
RetFormat	./rest.cpp	/^enum class RetFormat {$/;"	c	file:
ReturnFalse	./test/validation_tests.cpp	/^static bool ReturnFalse() { return false; }$/;"	f	file:
ReturnKey	./wallet/wallet.cpp	/^void CReserveKey::ReturnKey()$/;"	f	class:CReserveKey
ReturnKey	./wallet/wallet.cpp	/^void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)$/;"	f	class:CWallet
ReturnTrue	./test/validation_tests.cpp	/^static bool ReturnTrue() { return true; }$/;"	f	file:
ReuseFileNumber	./leveldb/db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
ReuseLogs	./leveldb/db/fault_injection_test.cc	/^  void ReuseLogs(bool reuse) {$/;"	f	class:leveldb::FaultInjectionTest
ReuseManifest	./leveldb/db/version_set.cc	/^bool VersionSet::ReuseManifest(const std::string& dscname,$/;"	f	class:leveldb::VersionSet
Reverse	./leveldb/table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseCompareNodeMinPingTime	./net.cpp	/^static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
ReverseCompareNodeTimeConnected	./net.cpp	/^static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
ReverseKeyComparator	./leveldb/table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon15	file:
Rewind	./index/base.cpp	/^bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)$/;"	f	class:BaseIndex
Rewind	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)$/;"	f	class:BlockFilterIndex
Rewind	./streams.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
RewindBlockIndex	./validation.cpp	/^bool CChainState::RewindBlockIndex(const CChainParams& params)$/;"	f	class:CChainState
RewindBlockIndex	./validation.cpp	/^bool RewindBlockIndex(const CChainParams& params) {$/;"	f
Rewrite	./wallet/db.cpp	/^bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)$/;"	f	class:BerkeleyBatch
Rewrite	./wallet/db.cpp	/^bool BerkeleyDatabase::Rewrite(const char* pszSkip)$/;"	f	class:BerkeleyDatabase
RoleIndex	./qt/addresstablemodel.h	/^    enum RoleIndex {$/;"	g	class:AddressTableModel
RoleIndex	./qt/bitcoinunits.h	/^    enum RoleIndex {$/;"	g	class:BitcoinUnits
RoleIndex	./qt/transactiontablemodel.h	/^    enum RoleIndex {$/;"	g	class:TransactionTableModel
RollforwardBlock	./validation.cpp	/^bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)$/;"	f	class:CChainState
RollingBloom	./bench/rollingbloom.cpp	/^static void RollingBloom(benchmark::State& state)$/;"	f	file:
RollingBloomHash	./bloom.cpp	/^static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {$/;"	f	file:
Round	./crypto/ripemd160.cpp	/^void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)$/;"	f	namespace:__anon42::ripemd160
Round	./crypto/sha1.cpp	/^void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)$/;"	f	namespace:__anon38::sha1
Round	./crypto/sha256.cpp	/^void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k)$/;"	f	namespace:__anon40::sha256
Round	./crypto/sha256_avx2.cpp	/^void inline __attribute__((always_inline)) Round(__m256i a, __m256i b, __m256i c, __m256i& d, __m256i e, __m256i f, __m256i g, __m256i& h, __m256i k)$/;"	f	namespace:sha256d64_avx2::__anon37
Round	./crypto/sha256_sse41.cpp	/^void inline __attribute__((always_inline)) Round(__m128i a, __m128i b, __m128i c, __m128i& d, __m128i e, __m128i f, __m128i g, __m128i& h, __m128i k)$/;"	f	namespace:sha256d64_sse41::__anon41
Round	./crypto/sha512.cpp	/^void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)$/;"	f	namespace:__anon39::sha512
Round	./secp256k1/src/hash_impl.h	/^#define Round(/;"	d
Round	./secp256k1/src/hash_impl.h	/^#undef Round$/;"	d
RpcHandlerImpl	./interfaces/chain.cpp	/^    RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)$/;"	f	class:interfaces::__anon129::RpcHandlerImpl
RpcHandlerImpl	./interfaces/chain.cpp	/^class RpcHandlerImpl : public Handler$/;"	c	namespace:interfaces::__anon129	file:
RpcMempool	./bench/rpc_mempool.cpp	/^static void RpcMempool(benchmark::State& state)$/;"	f	file:
Run	./httpserver.cpp	/^    void Run()$/;"	f	class:WorkQueue
Run	./leveldb/db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	./leveldb/db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon30::Repairer
Run	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
RunAll	./bench/bench.cpp	/^void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double scaling, const std::string& filter, bool is_list_only)$/;"	f	class:benchmark::BenchRunner
RunAllTests	./leveldb/util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	./leveldb/db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
RunConcurrent	./leveldb/db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
RunCreate	./test/scriptnum_tests.cpp	/^static void RunCreate(const int64_t& num)$/;"	f	file:
RunOperators	./test/scriptnum_tests.cpp	/^static void RunOperators(const int64_t& num1, const int64_t& num2)$/;"	f	file:
RunTest	./test/bip32_tests.cpp	/^static void RunTest(const TestVector &test) {$/;"	f	file:
SAFE_CHARS	./util/strencodings.cpp	/^static const std::string SAFE_CHARS[] =$/;"	v	file:
SAFE_CHARS_DEFAULT	./util/strencodings.h	/^    SAFE_CHARS_DEFAULT, \/\/!< The full set of allowed chars$/;"	e	enum:SafeChars
SAFE_CHARS_FILENAME	./util/strencodings.h	/^    SAFE_CHARS_FILENAME, \/\/!< Chars allowed in filenames$/;"	e	enum:SafeChars
SAFE_CHARS_UA_COMMENT	./util/strencodings.h	/^    SAFE_CHARS_UA_COMMENT, \/\/!< BIP-0014 subset$/;"	e	enum:SafeChars
SAFE_CHARS_URI	./util/strencodings.h	/^    SAFE_CHARS_URI, \/\/!< Chars allowed in URIs (RFC 3986)$/;"	e	enum:SafeChars
SANITIZER_CXXFLAGS	./Makefile	/^SANITIZER_CXXFLAGS = $/;"	m
SANITIZER_LDFLAGS	./Makefile	/^SANITIZER_LDFLAGS = $/;"	m
SAT	./qt/bitcoinunits.h	/^        SAT$/;"	e	enum:BitcoinUnits::Unit
SC	./secp256k1/src/ecmult_static_context.h	/^#define SC /;"	d
SC	./secp256k1/src/ecmult_static_context.h	/^#undef SC$/;"	d
SCOPED_LOCKABLE	./leveldb/port/thread_annotations.h	/^#define SCOPED_LOCKABLE$/;"	d
SCOPED_LOCKABLE	./threadsafety.h	/^#define SCOPED_LOCKABLE /;"	d
SCOPED_LOCKABLE	./threadsafety.h	/^#define SCOPED_LOCKABLE$/;"	d
SCRIPT_ADDRESS	./chainparams.h	/^        SCRIPT_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
SCRIPT_ERR_BAD_OPCODE	./script/script_error.h	/^    SCRIPT_ERR_BAD_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKMULTISIGVERIFY	./script/script_error.h	/^    SCRIPT_ERR_CHECKMULTISIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKSIGVERIFY	./script/script_error.h	/^    SCRIPT_ERR_CHECKSIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CLEANSTACK	./script/script_error.h	/^    SCRIPT_ERR_CLEANSTACK,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISABLED_OPCODE	./script/script_error.h	/^    SCRIPT_ERR_DISABLED_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS	./script/script_error.h	/^    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	./script/script_error.h	/^    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EQUALVERIFY	./script/script_error.h	/^    SCRIPT_ERR_EQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_ERROR_COUNT	./script/script_error.h	/^    SCRIPT_ERR_ERROR_COUNT$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EVAL_FALSE	./script/script_error.h	/^    SCRIPT_ERR_EVAL_FALSE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_ALTSTACK_OPERATION	./script/script_error.h	/^    SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_STACK_OPERATION	./script/script_error.h	/^    SCRIPT_ERR_INVALID_STACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_LAST	./script/script_error.h	/^#define SCRIPT_ERR_LAST /;"	d
SCRIPT_ERR_MINIMALDATA	./script/script_error.h	/^    SCRIPT_ERR_MINIMALDATA,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_MINIMALIF	./script/script_error.h	/^    SCRIPT_ERR_MINIMALIF,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_NEGATIVE_LOCKTIME	./script/script_error.h	/^    SCRIPT_ERR_NEGATIVE_LOCKTIME,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_NUMEQUALVERIFY	./script/script_error.h	/^    SCRIPT_ERR_NUMEQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OK	./script/script_error.h	/^    SCRIPT_ERR_OK = 0,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_CODESEPARATOR	./script/script_error.h	/^    SCRIPT_ERR_OP_CODESEPARATOR,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_COUNT	./script/script_error.h	/^    SCRIPT_ERR_OP_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_RETURN	./script/script_error.h	/^    SCRIPT_ERR_OP_RETURN,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEYTYPE	./script/script_error.h	/^    SCRIPT_ERR_PUBKEYTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEY_COUNT	./script/script_error.h	/^    SCRIPT_ERR_PUBKEY_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUSH_SIZE	./script/script_error.h	/^    SCRIPT_ERR_PUSH_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SCRIPT_SIZE	./script/script_error.h	/^    SCRIPT_ERR_SCRIPT_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_COUNT	./script/script_error.h	/^    SCRIPT_ERR_SIG_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_DER	./script/script_error.h	/^    SCRIPT_ERR_SIG_DER,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_FINDANDDELETE	./script/script_error.h	/^    SCRIPT_ERR_SIG_FINDANDDELETE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HASHTYPE	./script/script_error.h	/^    SCRIPT_ERR_SIG_HASHTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HIGH_S	./script/script_error.h	/^    SCRIPT_ERR_SIG_HIGH_S,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_NULLDUMMY	./script/script_error.h	/^    SCRIPT_ERR_SIG_NULLDUMMY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_NULLFAIL	./script/script_error.h	/^    SCRIPT_ERR_SIG_NULLFAIL,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_PUSHONLY	./script/script_error.h	/^    SCRIPT_ERR_SIG_PUSHONLY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_STACK_SIZE	./script/script_error.h	/^    SCRIPT_ERR_STACK_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNBALANCED_CONDITIONAL	./script/script_error.h	/^    SCRIPT_ERR_UNBALANCED_CONDITIONAL,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNKNOWN_ERROR	./script/script_error.h	/^    SCRIPT_ERR_UNKNOWN_ERROR,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNSATISFIED_LOCKTIME	./script/script_error.h	/^    SCRIPT_ERR_UNSATISFIED_LOCKTIME,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_VERIFY	./script/script_error.h	/^    SCRIPT_ERR_VERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_MALLEATED	./script/script_error.h	/^    SCRIPT_ERR_WITNESS_MALLEATED,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_MALLEATED_P2SH	./script/script_error.h	/^    SCRIPT_ERR_WITNESS_MALLEATED_P2SH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH	./script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY	./script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH	./script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PUBKEYTYPE	./script/script_error.h	/^    SCRIPT_ERR_WITNESS_PUBKEYTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_UNEXPECTED	./script/script_error.h	/^    SCRIPT_ERR_WITNESS_UNEXPECTED,$/;"	e	enum:ScriptError_t
SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY	./script/interpreter.h	/^    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),$/;"	e	enum:__anon79
SCRIPT_VERIFY_CHECKSEQUENCEVERIFY	./script/interpreter.h	/^    SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),$/;"	e	enum:__anon79
SCRIPT_VERIFY_CLEANSTACK	./script/interpreter.h	/^    SCRIPT_VERIFY_CLEANSTACK = (1U << 8),$/;"	e	enum:__anon79
SCRIPT_VERIFY_CONST_SCRIPTCODE	./script/interpreter.h	/^    SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),$/;"	e	enum:__anon79
SCRIPT_VERIFY_DERSIG	./script/interpreter.h	/^    SCRIPT_VERIFY_DERSIG    = (1U << 2),$/;"	e	enum:__anon79
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS	./script/interpreter.h	/^    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),$/;"	e	enum:__anon79
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	./script/interpreter.h	/^    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),$/;"	e	enum:__anon79
SCRIPT_VERIFY_LOW_S	./script/interpreter.h	/^    SCRIPT_VERIFY_LOW_S     = (1U << 3),$/;"	e	enum:__anon79
SCRIPT_VERIFY_MINIMALDATA	./script/interpreter.h	/^    SCRIPT_VERIFY_MINIMALDATA = (1U << 6),$/;"	e	enum:__anon79
SCRIPT_VERIFY_MINIMALIF	./script/interpreter.h	/^    SCRIPT_VERIFY_MINIMALIF = (1U << 13),$/;"	e	enum:__anon79
SCRIPT_VERIFY_NONE	./script/interpreter.h	/^    SCRIPT_VERIFY_NONE      = 0,$/;"	e	enum:__anon79
SCRIPT_VERIFY_NULLDUMMY	./script/interpreter.h	/^    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),$/;"	e	enum:__anon79
SCRIPT_VERIFY_NULLFAIL	./script/interpreter.h	/^    SCRIPT_VERIFY_NULLFAIL = (1U << 14),$/;"	e	enum:__anon79
SCRIPT_VERIFY_P2SH	./script/interpreter.h	/^    SCRIPT_VERIFY_P2SH      = (1U << 0),$/;"	e	enum:__anon79
SCRIPT_VERIFY_SIGPUSHONLY	./script/interpreter.h	/^    SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),$/;"	e	enum:__anon79
SCRIPT_VERIFY_STRICTENC	./script/interpreter.h	/^    SCRIPT_VERIFY_STRICTENC = (1U << 1),$/;"	e	enum:__anon79
SCRIPT_VERIFY_WITNESS	./script/interpreter.h	/^    SCRIPT_VERIFY_WITNESS = (1U << 11),$/;"	e	enum:__anon79
SCRIPT_VERIFY_WITNESS_PUBKEYTYPE	./script/interpreter.h	/^    SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),$/;"	e	enum:__anon79
SECP256K1_API	./secp256k1/include/secp256k1.h	/^#   define SECP256K1_API /;"	d
SECP256K1_API	./secp256k1/include/secp256k1.h	/^#   define SECP256K1_API$/;"	d
SECP256K1_API	./secp256k1/include/secp256k1.h	/^#  define SECP256K1_API /;"	d
SECP256K1_API	./secp256k1/include/secp256k1.h	/^#  define SECP256K1_API$/;"	d
SECP256K1_ARG_NONNULL	./secp256k1/include/secp256k1.h	/^#  define SECP256K1_ARG_NONNULL(/;"	d
SECP256K1_BASIC_CONFIG_H	./secp256k1/src/basic-config.h	/^#define SECP256K1_BASIC_CONFIG_H$/;"	d
SECP256K1_BENCH_H	./secp256k1/src/bench.h	/^#define SECP256K1_BENCH_H$/;"	d
SECP256K1_CONTEXT_NONE	./secp256k1/include/secp256k1.h	/^#define SECP256K1_CONTEXT_NONE /;"	d
SECP256K1_CONTEXT_SIGN	./secp256k1/include/secp256k1.h	/^#define SECP256K1_CONTEXT_SIGN /;"	d
SECP256K1_CONTEXT_VERIFY	./secp256k1/include/secp256k1.h	/^#define SECP256K1_CONTEXT_VERIFY /;"	d
SECP256K1_CONTRIB_BER_PRIVATEKEY_H	./secp256k1/contrib/lax_der_privatekey_parsing.h	/^#define SECP256K1_CONTRIB_BER_PRIVATEKEY_H$/;"	d
SECP256K1_CONTRIB_LAX_DER_PARSING_H	./secp256k1/contrib/lax_der_parsing.h	/^#define SECP256K1_CONTRIB_LAX_DER_PARSING_H$/;"	d
SECP256K1_ECDH_H	./secp256k1/include/secp256k1_ecdh.h	/^#define SECP256K1_ECDH_H$/;"	d
SECP256K1_ECDSA_H	./secp256k1/src/ecdsa.h	/^#define SECP256K1_ECDSA_H$/;"	d
SECP256K1_ECDSA_IMPL_H	./secp256k1/src/ecdsa_impl.h	/^#define SECP256K1_ECDSA_IMPL_H$/;"	d
SECP256K1_ECKEY_H	./secp256k1/src/eckey.h	/^#define SECP256K1_ECKEY_H$/;"	d
SECP256K1_ECKEY_IMPL_H	./secp256k1/src/eckey_impl.h	/^#define SECP256K1_ECKEY_IMPL_H$/;"	d
SECP256K1_ECMULT_CONST_H	./secp256k1/src/ecmult_const.h	/^#define SECP256K1_ECMULT_CONST_H$/;"	d
SECP256K1_ECMULT_CONST_IMPL_H	./secp256k1/src/ecmult_const_impl.h	/^#define SECP256K1_ECMULT_CONST_IMPL_H$/;"	d
SECP256K1_ECMULT_GEN_H	./secp256k1/src/ecmult_gen.h	/^#define SECP256K1_ECMULT_GEN_H$/;"	d
SECP256K1_ECMULT_GEN_IMPL_H	./secp256k1/src/ecmult_gen_impl.h	/^#define SECP256K1_ECMULT_GEN_IMPL_H$/;"	d
SECP256K1_ECMULT_H	./secp256k1/src/ecmult.h	/^#define SECP256K1_ECMULT_H$/;"	d
SECP256K1_ECMULT_IMPL_H	./secp256k1/src/ecmult_impl.h	/^#define SECP256K1_ECMULT_IMPL_H$/;"	d
SECP256K1_EC_COMPRESSED	./secp256k1/include/secp256k1.h	/^#define SECP256K1_EC_COMPRESSED /;"	d
SECP256K1_EC_PARSE_TEST_NINVALID	./secp256k1/src/tests.c	/^#define SECP256K1_EC_PARSE_TEST_NINVALID /;"	d	file:
SECP256K1_EC_PARSE_TEST_NVALID	./secp256k1/src/tests.c	/^#define SECP256K1_EC_PARSE_TEST_NVALID /;"	d	file:
SECP256K1_EC_PARSE_TEST_NXVALID	./secp256k1/src/tests.c	/^#define SECP256K1_EC_PARSE_TEST_NXVALID /;"	d	file:
SECP256K1_EC_UNCOMPRESSED	./secp256k1/include/secp256k1.h	/^#define SECP256K1_EC_UNCOMPRESSED /;"	d
SECP256K1_FE_CONST	./secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_CONST(/;"	d
SECP256K1_FE_CONST	./secp256k1/src/field_5x52.h	/^#define SECP256K1_FE_CONST(/;"	d
SECP256K1_FE_CONST_INNER	./secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_CONST_INNER(/;"	d
SECP256K1_FE_CONST_INNER	./secp256k1/src/field_5x52.h	/^#define SECP256K1_FE_CONST_INNER(/;"	d
SECP256K1_FE_STORAGE_CONST	./secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_STORAGE_CONST(/;"	d
SECP256K1_FE_STORAGE_CONST	./secp256k1/src/field_5x52.h	/^#define SECP256K1_FE_STORAGE_CONST(/;"	d
SECP256K1_FE_STORAGE_CONST_GET	./secp256k1/src/field_10x26.h	/^#define SECP256K1_FE_STORAGE_CONST_GET(/;"	d
SECP256K1_FIELD_H	./secp256k1/src/field.h	/^#define SECP256K1_FIELD_H$/;"	d
SECP256K1_FIELD_IMPL_H	./secp256k1/src/field_impl.h	/^#define SECP256K1_FIELD_IMPL_H$/;"	d
SECP256K1_FIELD_INNER5X52_IMPL_H	./secp256k1/src/field_5x52_asm_impl.h	/^#define SECP256K1_FIELD_INNER5X52_IMPL_H$/;"	d
SECP256K1_FIELD_INNER5X52_IMPL_H	./secp256k1/src/field_5x52_int128_impl.h	/^#define SECP256K1_FIELD_INNER5X52_IMPL_H$/;"	d
SECP256K1_FIELD_REPR_H	./secp256k1/src/field_10x26.h	/^#define SECP256K1_FIELD_REPR_H$/;"	d
SECP256K1_FIELD_REPR_H	./secp256k1/src/field_5x52.h	/^#define SECP256K1_FIELD_REPR_H$/;"	d
SECP256K1_FIELD_REPR_IMPL_H	./secp256k1/src/field_10x26_impl.h	/^#define SECP256K1_FIELD_REPR_IMPL_H$/;"	d
SECP256K1_FIELD_REPR_IMPL_H	./secp256k1/src/field_5x52_impl.h	/^#define SECP256K1_FIELD_REPR_IMPL_H$/;"	d
SECP256K1_FLAGS_BIT_COMPRESSION	./secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_BIT_COMPRESSION /;"	d
SECP256K1_FLAGS_BIT_CONTEXT_SIGN	./secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_BIT_CONTEXT_SIGN /;"	d
SECP256K1_FLAGS_BIT_CONTEXT_VERIFY	./secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY /;"	d
SECP256K1_FLAGS_TYPE_COMPRESSION	./secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_TYPE_COMPRESSION /;"	d
SECP256K1_FLAGS_TYPE_CONTEXT	./secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_TYPE_CONTEXT /;"	d
SECP256K1_FLAGS_TYPE_MASK	./secp256k1/include/secp256k1.h	/^#define SECP256K1_FLAGS_TYPE_MASK /;"	d
SECP256K1_GEJ_CONST	./secp256k1/src/group.h	/^#define SECP256K1_GEJ_CONST(/;"	d
SECP256K1_GEJ_CONST_INFINITY	./secp256k1/src/group.h	/^#define SECP256K1_GEJ_CONST_INFINITY /;"	d
SECP256K1_GE_CONST	./secp256k1/src/group.h	/^#define SECP256K1_GE_CONST(/;"	d
SECP256K1_GE_CONST_INFINITY	./secp256k1/src/group.h	/^#define SECP256K1_GE_CONST_INFINITY /;"	d
SECP256K1_GE_STORAGE_CONST	./secp256k1/src/group.h	/^#define SECP256K1_GE_STORAGE_CONST(/;"	d
SECP256K1_GE_STORAGE_CONST_GET	./secp256k1/src/group.h	/^#define SECP256K1_GE_STORAGE_CONST_GET(/;"	d
SECP256K1_GNUC_EXT	./secp256k1/src/util.h	/^#  define SECP256K1_GNUC_EXT /;"	d
SECP256K1_GNUC_EXT	./secp256k1/src/util.h	/^#  define SECP256K1_GNUC_EXT$/;"	d
SECP256K1_GNUC_PREREQ	./secp256k1/include/secp256k1.h	/^#   define SECP256K1_GNUC_PREREQ(/;"	d
SECP256K1_GROUP_H	./secp256k1/src/group.h	/^#define SECP256K1_GROUP_H$/;"	d
SECP256K1_GROUP_IMPL_H	./secp256k1/src/group_impl.h	/^#define SECP256K1_GROUP_IMPL_H$/;"	d
SECP256K1_H	./secp256k1/include/secp256k1.h	/^#define SECP256K1_H$/;"	d
SECP256K1_HASH_H	./secp256k1/src/hash.h	/^#define SECP256K1_HASH_H$/;"	d
SECP256K1_HASH_IMPL_H	./secp256k1/src/hash_impl.h	/^#define SECP256K1_HASH_IMPL_H$/;"	d
SECP256K1_INLINE	./secp256k1/include/secp256k1.h	/^#   define SECP256K1_INLINE /;"	d
SECP256K1_INLINE	./secp256k1/include/secp256k1.h	/^#   define SECP256K1_INLINE$/;"	d
SECP256K1_INLINE	./secp256k1/include/secp256k1.h	/^#  define SECP256K1_INLINE /;"	d
SECP256K1_MODULE_ECDH_MAIN_H	./secp256k1/src/modules/ecdh/main_impl.h	/^#define SECP256K1_MODULE_ECDH_MAIN_H$/;"	d
SECP256K1_MODULE_ECDH_TESTS_H	./secp256k1/src/modules/ecdh/tests_impl.h	/^#define SECP256K1_MODULE_ECDH_TESTS_H$/;"	d
SECP256K1_MODULE_RECOVERY_MAIN_H	./secp256k1/src/modules/recovery/main_impl.h	/^#define SECP256K1_MODULE_RECOVERY_MAIN_H$/;"	d
SECP256K1_MODULE_RECOVERY_TESTS_H	./secp256k1/src/modules/recovery/tests_impl.h	/^#define SECP256K1_MODULE_RECOVERY_TESTS_H$/;"	d
SECP256K1_NUM_H	./secp256k1/src/num.h	/^#define SECP256K1_NUM_H$/;"	d
SECP256K1_NUM_IMPL_H	./secp256k1/src/num_impl.h	/^#define SECP256K1_NUM_IMPL_H$/;"	d
SECP256K1_NUM_REPR_H	./secp256k1/src/num_gmp.h	/^#define SECP256K1_NUM_REPR_H$/;"	d
SECP256K1_NUM_REPR_IMPL_H	./secp256k1/src/num_gmp_impl.h	/^#define SECP256K1_NUM_REPR_IMPL_H$/;"	d
SECP256K1_N_0	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_0 /;"	d
SECP256K1_N_0	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_0 /;"	d
SECP256K1_N_1	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_1 /;"	d
SECP256K1_N_1	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_1 /;"	d
SECP256K1_N_2	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_2 /;"	d
SECP256K1_N_2	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_2 /;"	d
SECP256K1_N_3	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_3 /;"	d
SECP256K1_N_3	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_3 /;"	d
SECP256K1_N_4	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_4 /;"	d
SECP256K1_N_5	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_5 /;"	d
SECP256K1_N_6	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_6 /;"	d
SECP256K1_N_7	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_7 /;"	d
SECP256K1_N_C_0	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_C_0 /;"	d
SECP256K1_N_C_0	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_0 /;"	d
SECP256K1_N_C_1	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_C_1 /;"	d
SECP256K1_N_C_1	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_1 /;"	d
SECP256K1_N_C_2	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_C_2 /;"	d
SECP256K1_N_C_2	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_2 /;"	d
SECP256K1_N_C_3	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_3 /;"	d
SECP256K1_N_C_4	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_C_4 /;"	d
SECP256K1_N_H_0	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_0 /;"	d
SECP256K1_N_H_0	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_0 /;"	d
SECP256K1_N_H_1	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_1 /;"	d
SECP256K1_N_H_1	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_1 /;"	d
SECP256K1_N_H_2	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_2 /;"	d
SECP256K1_N_H_2	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_2 /;"	d
SECP256K1_N_H_3	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_N_H_3 /;"	d
SECP256K1_N_H_3	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_3 /;"	d
SECP256K1_N_H_4	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_4 /;"	d
SECP256K1_N_H_5	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_5 /;"	d
SECP256K1_N_H_6	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_6 /;"	d
SECP256K1_N_H_7	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_N_H_7 /;"	d
SECP256K1_RECOVERY_H	./secp256k1/include/secp256k1_recovery.h	/^#define SECP256K1_RECOVERY_H$/;"	d
SECP256K1_RESTRICT	./secp256k1/src/util.h	/^#   define SECP256K1_RESTRICT /;"	d
SECP256K1_RESTRICT	./secp256k1/src/util.h	/^#   define SECP256K1_RESTRICT$/;"	d
SECP256K1_RESTRICT	./secp256k1/src/util.h	/^#  define SECP256K1_RESTRICT /;"	d
SECP256K1_RESTRICT	./secp256k1/src/util.h	/^# define SECP256K1_RESTRICT$/;"	d
SECP256K1_SCALAR_CONST	./secp256k1/src/scalar_4x64.h	/^#define SECP256K1_SCALAR_CONST(/;"	d
SECP256K1_SCALAR_CONST	./secp256k1/src/scalar_8x32.h	/^#define SECP256K1_SCALAR_CONST(/;"	d
SECP256K1_SCALAR_H	./secp256k1/src/scalar.h	/^#define SECP256K1_SCALAR_H$/;"	d
SECP256K1_SCALAR_IMPL_H	./secp256k1/src/scalar_impl.h	/^#define SECP256K1_SCALAR_IMPL_H$/;"	d
SECP256K1_SCALAR_REPR_H	./secp256k1/src/scalar_4x64.h	/^#define SECP256K1_SCALAR_REPR_H$/;"	d
SECP256K1_SCALAR_REPR_H	./secp256k1/src/scalar_8x32.h	/^#define SECP256K1_SCALAR_REPR_H$/;"	d
SECP256K1_SCALAR_REPR_H	./secp256k1/src/scalar_low.h	/^#define SECP256K1_SCALAR_REPR_H$/;"	d
SECP256K1_SCALAR_REPR_IMPL_H	./secp256k1/src/scalar_4x64_impl.h	/^#define SECP256K1_SCALAR_REPR_IMPL_H$/;"	d
SECP256K1_SCALAR_REPR_IMPL_H	./secp256k1/src/scalar_8x32_impl.h	/^#define SECP256K1_SCALAR_REPR_IMPL_H$/;"	d
SECP256K1_SCALAR_REPR_IMPL_H	./secp256k1/src/scalar_low_impl.h	/^#define SECP256K1_SCALAR_REPR_IMPL_H$/;"	d
SECP256K1_TAG_PUBKEY_EVEN	./secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_EVEN /;"	d
SECP256K1_TAG_PUBKEY_HYBRID_EVEN	./secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_HYBRID_EVEN /;"	d
SECP256K1_TAG_PUBKEY_HYBRID_ODD	./secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_HYBRID_ODD /;"	d
SECP256K1_TAG_PUBKEY_ODD	./secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_ODD /;"	d
SECP256K1_TAG_PUBKEY_UNCOMPRESSED	./secp256k1/include/secp256k1.h	/^#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED /;"	d
SECP256K1_TESTRAND_H	./secp256k1/src/testrand.h	/^#define SECP256K1_TESTRAND_H$/;"	d
SECP256K1_TESTRAND_IMPL_H	./secp256k1/src/testrand_impl.h	/^#define SECP256K1_TESTRAND_IMPL_H$/;"	d
SECP256K1_UTIL_H	./secp256k1/src/util.h	/^#define SECP256K1_UTIL_H$/;"	d
SECP256K1_WARN_UNUSED_RESULT	./secp256k1/include/secp256k1.h	/^#  define SECP256K1_WARN_UNUSED_RESULT /;"	d
SECP256K1_WARN_UNUSED_RESULT	./secp256k1/include/secp256k1.h	/^#  define SECP256K1_WARN_UNUSED_RESULT$/;"	d
SECP_INCLUDES	./secp256k1/Makefile	/^SECP_INCLUDES = $/;"	m
SECP_LIBS	./secp256k1/Makefile	/^SECP_LIBS = $/;"	m
SECP_TEST_INCLUDES	./secp256k1/Makefile	/^SECP_TEST_INCLUDES = $/;"	m
SECP_TEST_LIBS	./secp256k1/Makefile	/^SECP_TEST_LIBS = $/;"	m
SECRET_KEY	./chainparams.h	/^        SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
SECTION_NEGATE	./test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
SECTION_SET	./test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
SECURE	./ui_interface.h	/^        SECURE              = 0x40000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
SED	./Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	./secp256k1/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	./univalue/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SELECT_TIMEOUT_MILLISECONDS	./net.cpp	/^static const uint64_t SELECT_TIMEOUT_MILLISECONDS = 50;$/;"	v	file:
SENDCMPCT	./protocol.cpp	/^const char *SENDCMPCT="sendcmpct";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS	./protocol.cpp	/^const char *SENDHEADERS="sendheaders";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS_VERSION	./version.h	/^static const int SENDHEADERS_VERSION = 70012;$/;"	v
SEND_CONFIRM_DELAY	./qt/sendcoinsdialog.h	/^#define SEND_CONFIRM_DELAY /;"	d
SEQUENCE_FINAL	./primitives/transaction.h	/^    static const uint32_t SEQUENCE_FINAL = 0xffffffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_DISABLE_FLAG	./primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1U << 31);$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_GRANULARITY	./primitives/transaction.h	/^    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_MASK	./primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_TYPE_FLAG	./primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);$/;"	m	class:CTxIn
SEQUENTIAL	./leveldb/doc/bench/db_bench_sqlite3.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQUENTIAL	./leveldb/doc/bench/db_bench_tree_db.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SERIALIZE_TRANSACTION_NO_WITNESS	./primitives/transaction.h	/^static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;$/;"	v
SER_DISK	./serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon124
SER_GETHASH	./serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon124
SER_NETWORK	./serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon124
SET	./test/util_tests.cpp	/^    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };$/;"	e	enum:ArgsMergeTestingSetup::Action	file:
SET_MAKE	./Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	./secp256k1/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	./univalue/Makefile	/^SET_MAKE = $/;"	m
SHA1	./bench/crypto_hash.cpp	/^static void SHA1(benchmark::State& state)$/;"	f	file:
SHA256	./bench/crypto_hash.cpp	/^static void SHA256(benchmark::State& state)$/;"	f	file:
SHA256AutoDetect	./crypto/sha256.cpp	/^std::string SHA256AutoDetect()$/;"	f
SHA256D64	./crypto/sha256.cpp	/^void SHA256D64(unsigned char* out, const unsigned char* in, size_t blocks)$/;"	f
SHA256D64_1024	./bench/crypto_hash.cpp	/^static void SHA256D64_1024(benchmark::State& state)$/;"	f	file:
SHA256_32b	./bench/crypto_hash.cpp	/^static void SHA256_32b(benchmark::State& state)$/;"	f	file:
SHA512	./bench/crypto_hash.cpp	/^static void SHA512(benchmark::State& state)$/;"	f	file:
SHANI_CXXFLAGS	./Makefile	/^SHANI_CXXFLAGS = -msse4 -msha$/;"	m
SHARED_ALLOBJS	./leveldb/Makefile	/^SHARED_ALLOBJS := $(SHARED_LIBOBJECTS) $(SHARED_MEMENVOBJECTS) $(TESTHARNESS)$/;"	m
SHARED_LIB1	./leveldb/Makefile	/^SHARED_LIB1 = libleveldb.$(PLATFORM_SHARED_EXT)$/;"	m
SHARED_LIB2	./leveldb/Makefile	/^SHARED_LIB2 = $(SHARED_LIB1)$/;"	m
SHARED_LIB2	./leveldb/Makefile	/^SHARED_LIB2 = $(SHARED_LIB1).$(SHARED_VERSION_MAJOR)$/;"	m
SHARED_LIB3	./leveldb/Makefile	/^SHARED_LIB3 = $(SHARED_LIB1)$/;"	m
SHARED_LIB3	./leveldb/Makefile	/^SHARED_LIB3 = $(SHARED_LIB1).$(SHARED_VERSION_MAJOR).$(SHARED_VERSION_MINOR)$/;"	m
SHARED_LIBOBJECTS	./leveldb/Makefile	/^SHARED_LIBOBJECTS := $(addprefix $(SHARED_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
SHARED_LIBS	./leveldb/Makefile	/^SHARED_LIBS = $(SHARED_LIB1)$/;"	m
SHARED_LIBS	./leveldb/Makefile	/^SHARED_LIBS = $(SHARED_OUTDIR)\/$(SHARED_LIB1) $(SHARED_OUTDIR)\/$(SHARED_LIB2) $(SHARED_OUTDIR)\/$(SHARED_LIB3)$/;"	m
SHARED_LOCKS_REQUIRED	./leveldb/port/thread_annotations.h	/^#define SHARED_LOCKS_REQUIRED(/;"	d
SHARED_LOCKS_REQUIRED	./threadsafety.h	/^#define SHARED_LOCKS_REQUIRED(/;"	d
SHARED_LOCK_FUNCTION	./leveldb/port/thread_annotations.h	/^#define SHARED_LOCK_FUNCTION(/;"	d
SHARED_LOCK_FUNCTION	./threadsafety.h	/^#define SHARED_LOCK_FUNCTION(/;"	d
SHARED_MEMENVLIB	./leveldb/Makefile	/^SHARED_MEMENVLIB = $(SHARED_OUTDIR)\/libmemenv.a$/;"	m
SHARED_MEMENVOBJECTS	./leveldb/Makefile	/^SHARED_MEMENVOBJECTS := $(addprefix $(SHARED_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
SHARED_OUTDIR	./leveldb/Makefile	/^SHARED_OUTDIR=out-shared$/;"	m
SHARED_PROGRAMS	./leveldb/Makefile	/^SHARED_PROGRAMS := $(addprefix $(SHARED_OUTDIR)\/, db_bench)$/;"	m
SHARED_TRYLOCK_FUNCTION	./leveldb/port/thread_annotations.h	/^#define SHARED_TRYLOCK_FUNCTION(/;"	d
SHARED_TRYLOCK_FUNCTION	./threadsafety.h	/^#define SHARED_TRYLOCK_FUNCTION(/;"	d
SHARED_VERSION_MAJOR	./leveldb/Makefile	/^SHARED_VERSION_MAJOR = 1$/;"	m
SHARED_VERSION_MINOR	./leveldb/Makefile	/^SHARED_VERSION_MINOR = 20$/;"	m
SHDescriptor	./script/descriptor.cpp	/^    SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), "sh") {}$/;"	f	class:__anon75::final
SHELL	./Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	./secp256k1/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	./univalue/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHORTTXIDS_LENGTH	./blockencodings.h	/^    static const int SHORTTXIDS_LENGTH = 6;$/;"	m	class:CBlockHeaderAndShortTxIDs
SHORT_BLOCK_PERIODS	./policy/fees.h	/^    static constexpr unsigned int SHORT_BLOCK_PERIODS = 12;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SHORT_DECAY	./policy/fees.h	/^    static constexpr double SHORT_DECAY = .962;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SHORT_HALFLIFE	./policy/fees.h	/^    SHORT_HALFLIFE = 0,$/;"	m	class:FeeEstimateHorizon
SHORT_IDS_BLOCKS_VERSION	./version.h	/^static const int SHORT_IDS_BLOCKS_VERSION = 70014;$/;"	v
SHORT_SCALE	./policy/fees.h	/^    static constexpr unsigned int SHORT_SCALE = 1;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SIGHASH_ALL	./script/interpreter.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon78
SIGHASH_ANYONECANPAY	./script/interpreter.h	/^    SIGHASH_ANYONECANPAY = 0x80,$/;"	e	enum:__anon78
SIGHASH_MISMATCH	./util/error.h	/^    SIGHASH_MISMATCH,$/;"	m	class:TransactionError
SIGHASH_NONE	./script/interpreter.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon78
SIGHASH_SINGLE	./script/interpreter.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon78
SIGNABLE	./test/descriptor_tests.cpp	/^constexpr int SIGNABLE = 8; \/\/ We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)$/;"	m	namespace:__anon56	file:
SIGNATURE_SIZE	./pubkey.h	/^    static constexpr unsigned int SIGNATURE_SIZE              = 72;$/;"	m	class:CPubKey
SIGNER	./psbt.h	/^    SIGNER,$/;"	m	class:PSBTRole
SIMULATORSDK	./leveldb/Makefile	/^SIMULATORSDK=$(shell xcrun -sdk iphonesimulator --show-sdk-path)$/;"	m
SIMULATOR_ALLOBJS	./leveldb/Makefile	/^SIMULATOR_ALLOBJS := $(SIMULATOR_LIBOBJECTS) $(SIMULATOR_MEMENVOBJECTS)$/;"	m
SIMULATOR_CFLAGS	./leveldb/Makefile	/^SIMULATOR_CFLAGS = -isysroot "$(SIMULATORSDK)" -arch i686 -arch x86_64$/;"	m
SIMULATOR_LIBOBJECTS	./leveldb/Makefile	/^SIMULATOR_LIBOBJECTS := $(addprefix $(SIMULATOR_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
SIMULATOR_MEMENVOBJECTS	./leveldb/Makefile	/^SIMULATOR_MEMENVOBJECTS := $(addprefix $(SIMULATOR_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
SIMULATOR_OUTDIR	./leveldb/Makefile	/^SIMULATOR_OUTDIR=out-ios-x86$/;"	m
SIPROUND	./crypto/siphash.cpp	/^#define SIPROUND /;"	d	file:
SIXPEREM_SP_CP	./qt/bitcoinunits.h	/^#define SIXPEREM_SP_CP /;"	d
SIXPEREM_SP_HTML	./qt/bitcoinunits.h	/^#define SIXPEREM_SP_HTML /;"	d
SIXPEREM_SP_UTF8	./qt/bitcoinunits.h	/^#define SIXPEREM_SP_UTF8 /;"	d
SIZELIMIT	./txmempool.h	/^    SIZELIMIT,   \/\/!< Removed in size limiting$/;"	m	class:MemPoolRemovalReason
SKIPLIST_LENGTH	./test/skiplist_tests.cpp	/^#define SKIPLIST_LENGTH /;"	d	file:
SLEEP	./random.cpp	/^    SLEEP, \/\/!< Called by RandAddSeedSleep()$/;"	m	class:RNGLevel	file:
SLOW	./random.cpp	/^    SLOW, \/\/!< Automatically called by GetStrongRandBytes$/;"	m	class:RNGLevel	file:
SOCKET	./compat.h	/^typedef unsigned int SOCKET;$/;"	t
SOCKET_ERROR	./compat.h	/^#define SOCKET_ERROR /;"	d
SOCKS4	./netbase.cpp	/^    SOCKS4 = 0x04,$/;"	e	enum:uint8_t	file:
SOCKS5	./netbase.cpp	/^    SOCKS5 = 0x05$/;"	e	enum:uint8_t	file:
SOCKS5_RECV_TIMEOUT	./netbase.cpp	/^static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;$/;"	v	file:
SOURCES	./Makefile	/^SOURCES = $(crypto_libbitcoin_crypto_avx2_a_SOURCES) \\$/;"	m
SOURCES	./secp256k1/Makefile	/^SOURCES = $(libsecp256k1_la_SOURCES) $(libsecp256k1_common_la_SOURCES) \\$/;"	m
SOURCES	./univalue/Makefile	/^SOURCES = $(libunivalue_la_SOURCES) $(test_no_nul_SOURCES) \\$/;"	m
SPENDABLE	./script/ismine.cpp	/^    SPENDABLE = 2,  \/\/!< Included in all balances$/;"	m	class:__anon85::IsMineResult	file:
SPINNER_FRAMES	./qt/guiconstants.h	/^#define SPINNER_FRAMES /;"	d
SSE41_CXXFLAGS	./Makefile	/^SSE41_CXXFLAGS = -msse4.1$/;"	m
SSE42_CXXFLAGS	./Makefile	/^SSE42_CXXFLAGS = -msse4.2$/;"	m
SSLVerifyError	./qt/paymentrequestplus.cpp	/^    explicit SSLVerifyError(std::string err) : std::runtime_error(err) { }$/;"	f	class:SSLVerifyError
SSLVerifyError	./qt/paymentrequestplus.cpp	/^class SSLVerifyError : public std::runtime_error$/;"	c	file:
SSL_CFLAGS	./Makefile	/^SSL_CFLAGS = -I\/usr\/local\/Cellar\/openssl\/1.0.2q\/include$/;"	m
SSL_LIBS	./Makefile	/^SSL_LIBS = -L\/usr\/local\/Cellar\/openssl\/1.0.2q\/lib -lssl$/;"	m
SSTTableFileName	./leveldb/db/filename.cc	/^std::string SSTTableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
STALE_CHECK_INTERVAL	./net_processing.cpp	/^static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; \/\/ 10 minutes$/;"	v	file:
STALE_RELAY_AGE_LIMIT	./net_processing.cpp	/^static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;$/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	./policy/policy.h	/^static constexpr unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |$/;"	v
STANDARD_NOT_MANDATORY_VERIFY_FLAGS	./policy/policy.h	/^static constexpr unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;$/;"	v
STANDARD_SCRIPT_VERIFY_FLAGS	./policy/policy.h	/^static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |$/;"	v
STARTED	./versionbits.h	/^    STARTED,$/;"	m	class:ThresholdState
STARTING	./leveldb/db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
STATIC_ALLOBJS	./leveldb/Makefile	/^STATIC_ALLOBJS := $(STATIC_LIBOBJECTS) $(STATIC_MEMENVOBJECTS) $(STATIC_TESTOBJS) $(STATIC_UTILOBJS) $(TESTHARNESS)$/;"	m
STATIC_LIBOBJECTS	./leveldb/Makefile	/^STATIC_LIBOBJECTS := $(addprefix $(STATIC_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
STATIC_MEMENVOBJECTS	./leveldb/Makefile	/^STATIC_MEMENVOBJECTS := $(addprefix $(STATIC_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
STATIC_OUTDIR	./leveldb/Makefile	/^STATIC_OUTDIR=out-ios-universal$/;"	m
STATIC_OUTDIR	./leveldb/Makefile	/^STATIC_OUTDIR=out-static$/;"	m
STATIC_PROGRAMS	./leveldb/Makefile	/^STATIC_PROGRAMS := $(addprefix $(STATIC_OUTDIR)\/, $(PROGNAMES))$/;"	m
STATIC_TESTOBJS	./leveldb/Makefile	/^STATIC_TESTOBJS := $(addprefix $(STATIC_OUTDIR)\/, $(addsuffix .o, $(TESTS)))$/;"	m
STATIC_UTILOBJS	./leveldb/Makefile	/^STATIC_UTILOBJS := $(addprefix $(STATIC_OUTDIR)\/, $(addsuffix .o, $(UTILS)))$/;"	m
STATUSBAR_ICONSIZE	./qt/guiconstants.h	/^static const int STATUSBAR_ICONSIZE = 16;$/;"	v
STATUS_COLUMN_WIDTH	./qt/transactionview.h	/^        STATUS_COLUMN_WIDTH = 30,$/;"	e	enum:TransactionView::ColumnWidths
STDC_HEADERS	./config/bitcoin-config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	./secp256k1/src/libsecp256k1-config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	./univalue/univalue-config.h	/^#define STDC_HEADERS /;"	d
STEP1	./leveldb/util/crc32c.cc	/^#define STEP1 /;"	d	file:
STEP1	./leveldb/util/crc32c.cc	/^#undef STEP1$/;"	d	file:
STEP4	./leveldb/util/crc32c.cc	/^#define STEP4 /;"	d	file:
STEP4	./leveldb/util/crc32c.cc	/^#undef STEP4$/;"	d	file:
STLLessThan	./leveldb/table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon16::STLLessThan
STLLessThan	./leveldb/table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon16::STLLessThan
STLLessThan	./leveldb/table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon16	file:
STORAGE_LEVELDB_DB_BUILDER_H_	./leveldb/db/builder.h	/^#define STORAGE_LEVELDB_DB_BUILDER_H_$/;"	d
STORAGE_LEVELDB_DB_DBFORMAT_H_	./leveldb/db/dbformat.h	/^#define STORAGE_LEVELDB_DB_DBFORMAT_H_$/;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	./leveldb/db/db_impl.h	/^#define STORAGE_LEVELDB_DB_DB_IMPL_H_$/;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	./leveldb/db/db_iter.h	/^#define STORAGE_LEVELDB_DB_DB_ITER_H_$/;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	./leveldb/db/filename.h	/^#define STORAGE_LEVELDB_DB_FILENAME_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	./leveldb/db/log_format.h	/^#define STORAGE_LEVELDB_DB_LOG_FORMAT_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	./leveldb/db/log_reader.h	/^#define STORAGE_LEVELDB_DB_LOG_READER_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	./leveldb/db/log_writer.h	/^#define STORAGE_LEVELDB_DB_LOG_WRITER_H_$/;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	./leveldb/db/memtable.h	/^#define STORAGE_LEVELDB_DB_MEMTABLE_H_$/;"	d
STORAGE_LEVELDB_DB_SKIPLIST_H_	./leveldb/db/skiplist.h	/^#define STORAGE_LEVELDB_DB_SKIPLIST_H_$/;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	./leveldb/db/snapshot.h	/^#define STORAGE_LEVELDB_DB_SNAPSHOT_H_$/;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	./leveldb/db/table_cache.h	/^#define STORAGE_LEVELDB_DB_TABLE_CACHE_H_$/;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	./leveldb/db/version_edit.h	/^#define STORAGE_LEVELDB_DB_VERSION_EDIT_H_$/;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	./leveldb/db/version_set.h	/^#define STORAGE_LEVELDB_DB_VERSION_SET_H_$/;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	./leveldb/db/write_batch_internal.h	/^#define STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_$/;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	./leveldb/helpers/memenv/memenv.h	/^#define STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	./leveldb/include/leveldb/cache.h	/^#define STORAGE_LEVELDB_INCLUDE_CACHE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	./leveldb/include/leveldb/comparator.h	/^#define STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	./leveldb/include/leveldb/c.h	/^#define STORAGE_LEVELDB_INCLUDE_C_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	./leveldb/include/leveldb/db.h	/^#define STORAGE_LEVELDB_INCLUDE_DB_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_	./leveldb/include/leveldb/dumpfile.h	/^#define STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	./leveldb/include/leveldb/env.h	/^#define STORAGE_LEVELDB_INCLUDE_ENV_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	./leveldb/include/leveldb/filter_policy.h	/^#define STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	./leveldb/include/leveldb/iterator.h	/^#define STORAGE_LEVELDB_INCLUDE_ITERATOR_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	./leveldb/include/leveldb/options.h	/^#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	./leveldb/include/leveldb/slice.h	/^#define STORAGE_LEVELDB_INCLUDE_SLICE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	./leveldb/include/leveldb/status.h	/^#define STORAGE_LEVELDB_INCLUDE_STATUS_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	./leveldb/include/leveldb/table_builder.h	/^#define STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	./leveldb/include/leveldb/table.h	/^#define STORAGE_LEVELDB_INCLUDE_TABLE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	./leveldb/include/leveldb/write_batch.h	/^#define STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	./leveldb/port/port_example.h	/^#define STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_H_	./leveldb/port/port.h	/^#define STORAGE_LEVELDB_PORT_PORT_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	./leveldb/port/port_posix.h	/^#define STORAGE_LEVELDB_PORT_PORT_POSIX_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_WIN_H_	./leveldb/port/port_win.h	/^#define STORAGE_LEVELDB_PORT_PORT_WIN_H_$/;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	./leveldb/port/thread_annotations.h	/^#define STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_$/;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	./leveldb/port/win/stdint.h	/^#define STORAGE_LEVELDB_PORT_WIN_STDINT_H_$/;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	./leveldb/table/block_builder.h	/^#define STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_$/;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	./leveldb/table/block.h	/^#define STORAGE_LEVELDB_TABLE_BLOCK_H_$/;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	./leveldb/table/filter_block.h	/^#define STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_$/;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	./leveldb/table/format.h	/^#define STORAGE_LEVELDB_TABLE_FORMAT_H_$/;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	./leveldb/table/iterator_wrapper.h	/^#define STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_$/;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	./leveldb/table/merger.h	/^#define STORAGE_LEVELDB_TABLE_MERGER_H_$/;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	./leveldb/table/two_level_iterator.h	/^#define STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_$/;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	./leveldb/util/arena.h	/^#define STORAGE_LEVELDB_UTIL_ARENA_H_$/;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	./leveldb/util/coding.h	/^#define STORAGE_LEVELDB_UTIL_CODING_H_$/;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	./leveldb/util/crc32c.h	/^#define STORAGE_LEVELDB_UTIL_CRC32C_H_$/;"	d
STORAGE_LEVELDB_UTIL_ENV_POSIX_TEST_HELPER_H_	./leveldb/util/env_posix_test_helper.h	/^#define STORAGE_LEVELDB_UTIL_ENV_POSIX_TEST_HELPER_H_$/;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	./leveldb/util/hash.h	/^#define STORAGE_LEVELDB_UTIL_HASH_H_$/;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	./leveldb/util/histogram.h	/^#define STORAGE_LEVELDB_UTIL_HISTOGRAM_H_$/;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	./leveldb/util/logging.h	/^#define STORAGE_LEVELDB_UTIL_LOGGING_H_$/;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	./leveldb/util/mutexlock.h	/^#define STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_$/;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	./leveldb/util/posix_logger.h	/^#define STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_$/;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	./leveldb/util/random.h	/^#define STORAGE_LEVELDB_UTIL_RANDOM_H_$/;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	./leveldb/util/testharness.h	/^#define STORAGE_LEVELDB_UTIL_TESTHARNESS_H_$/;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	./leveldb/util/testutil.h	/^#define STORAGE_LEVELDB_UTIL_TESTUTIL_H_$/;"	d
STR	./rpc/util.h	/^        STR,$/;"	m	class:RPCArg::Type
STRINGIZE	./clientversion.h	/^#define STRINGIZE(/;"	d
STRIP	./Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	./secp256k1/Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	./univalue/Makefile	/^STRIP = strip$/;"	m
STR_HEX	./rpc/util.h	/^        STR_HEX,       \/\/!< Special type that is a STR with only hex chars$/;"	m	class:RPCArg::Type
STYLE_INVALID	./qt/guiconstants.h	/^#define STYLE_INVALID /;"	d
ST_ERROR	./qt/intro.cpp	/^        ST_ERROR$/;"	e	enum:FreespaceChecker::Status	file:
ST_OK	./qt/intro.cpp	/^        ST_OK,$/;"	e	enum:FreespaceChecker::Status	file:
SUBDIRS	./Makefile	/^SUBDIRS =$/;"	m
SUBVERSION_COLUMN_WIDTH	./qt/rpcconsole.h	/^        SUBVERSION_COLUMN_WIDTH = 150,$/;"	e	enum:RPCConsole::ColumnWidths
SUCCEEDED	./netbase.cpp	/^    SUCCEEDED = 0x00,        \/\/!< Succeeded$/;"	e	enum:uint8_t	file:
SUCCESS	./wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	e	enum:final::ScanResult::__anon118
SUCCESS_PCT	./policy/fees.h	/^    static constexpr double SUCCESS_PCT = .85;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SUFFICIENT_FEETXS	./policy/fees.h	/^    static constexpr double SUFFICIENT_FEETXS = 0.1;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SUFFICIENT_TXS_SHORT	./policy/fees.h	/^    static constexpr double SUFFICIENT_TXS_SHORT = 0.5;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
SYNC_LOCATOR_WRITE_INTERVAL	./index/base.cpp	/^constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; \/\/ seconds$/;"	v
SYNC_LOG_INTERVAL	./index/base.cpp	/^constexpr int64_t SYNC_LOG_INTERVAL = 30; \/\/ seconds$/;"	v
S_IRUSR	./compat.h	/^#define S_IRUSR /;"	d
S_IWUSR	./compat.h	/^#define S_IWUSR /;"	d
SafeChars	./util/strencodings.h	/^enum SafeChars$/;"	g
SafeDbt	./wallet/db.cpp	/^BerkeleyBatch::SafeDbt::SafeDbt()$/;"	f	class:BerkeleyBatch::SafeDbt
SafeDbt	./wallet/db.cpp	/^BerkeleyBatch::SafeDbt::SafeDbt(void* data, size_t size)$/;"	f	class:BerkeleyBatch::SafeDbt
SaltedOutpointHasher	./coins.cpp	/^SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}$/;"	f	class:SaltedOutpointHasher
SaltedOutpointHasher	./coins.h	/^class SaltedOutpointHasher$/;"	c
SaltedTxidHasher	./txmempool.cpp	/^SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}$/;"	f	class:SaltedTxidHasher
SaltedTxidHasher	./txmempool.h	/^class SaltedTxidHasher$/;"	c
Salvage	./wallet/db.cpp	/^bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)$/;"	f	class:BerkeleyEnvironment
SanitizeOptions	./leveldb/db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SanitizeString	./util/strencodings.cpp	/^std::string SanitizeString(const std::string& str, int rule)$/;"	f
Save	./crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) Save(unsigned char* out, __m128i s)$/;"	f	namespace:__anon43
SaveBlockToDisk	./validation.cpp	/^static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const FlatFilePos* dbp) {$/;"	f	file:
SaveBytes	./crypto/ctaes/ctaes.c	/^static void SaveBytes(unsigned char* data16, const AES_state *s) {$/;"	f	file:
SaveError	./leveldb/db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	./leveldb/table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon17::TwoLevelIterator	file:
SaveKey	./leveldb/db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon29::DBIter	file:
SaveTo	./leveldb/db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	./leveldb/db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	./leveldb/db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon26	file:
SaverState	./leveldb/db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon26	file:
ScanForWalletTransactions	./wallet/wallet.cpp	/^CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)$/;"	f	class:CWallet
ScanResult	./wallet/wallet.h	/^    struct ScanResult {$/;"	s	class:final
ScanTable	./leveldb/db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon30::Repairer	file:
ScanningDuration	./wallet/wallet.h	/^    int64_t ScanningDuration() const { return fScanningWallet ? GetTimeMillis() - m_scanning_start : 0; }$/;"	f	class:final
ScanningProgress	./wallet/wallet.h	/^    double ScanningProgress() const { return fScanningWallet ? (double) m_scanning_progress : 0; }$/;"	f	class:final
Schedule	./leveldb/include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	./leveldb/util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon8::PosixEnv
Schedule	./leveldb/util/env_win.cc	/^void Win32Env::Schedule( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
ScheduleBatchPriority	./util/system.cpp	/^int ScheduleBatchPriority()$/;"	f
ScheduleProc	./leveldb/util/env_win.cc	/^typedef void (*ScheduleProc)(void*) ;$/;"	t	namespace:leveldb::Win32	file:
ScriptContext	./wallet/rpcdump.cpp	/^enum class ScriptContext$/;"	c	file:
ScriptError	./script/script_error.h	/^} ScriptError;$/;"	t	typeref:enum:ScriptError_t
ScriptError	./test/script_tests.cpp	/^    TestBuilder& ScriptError(ScriptError_t err)$/;"	f	class:__anon58::TestBuilder
ScriptErrorDesc	./test/script_tests.cpp	/^struct ScriptErrorDesc$/;"	s	file:
ScriptErrorString	./script/script_error.cpp	/^const char* ScriptErrorString(const ScriptError serror)$/;"	f
ScriptError_t	./script/script_error.h	/^typedef enum ScriptError_t$/;"	g
ScriptFromHex	./test/script_tests.cpp	/^ScriptFromHex(const char* hex)$/;"	f	file:
ScriptHash	./script/standard.cpp	/^ScriptHash::ScriptHash(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}$/;"	f	class:ScriptHash
ScriptHash	./script/standard.h	/^    ScriptHash() : uint160() {}$/;"	f	struct:ScriptHash
ScriptHash	./script/standard.h	/^    explicit ScriptHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:ScriptHash
ScriptHash	./script/standard.h	/^struct ScriptHash : public uint160$/;"	s
ScriptPubKeyToUniv	./core_write.cpp	/^void ScriptPubKeyToUniv(const CScript& scriptPubKey,$/;"	f
ScriptToAsmStr	./core_write.cpp	/^std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)$/;"	f
ScriptToUniv	./core_write.cpp	/^void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)$/;"	f
Secp256k1Context	./secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^public class Secp256k1Context {$/;"	c
Secp256k1Init	./bitcoin-tx.cpp	/^    Secp256k1Init() {$/;"	f	class:Secp256k1Init
Secp256k1Init	./bitcoin-tx.cpp	/^class Secp256k1Init$/;"	c	file:
Section	./rpc/util.cpp	/^    Section(const std::string& left, const std::string& right)$/;"	f	struct:Section
Section	./rpc/util.cpp	/^struct Section {$/;"	s	file:
SectionInfo	./util/system.h	/^struct SectionInfo$/;"	s
Sections	./rpc/util.cpp	/^struct Sections {$/;"	s	file:
SecureClearQLineEdit	./qt/askpassphrasedialog.cpp	/^static void SecureClearQLineEdit(QLineEdit* edit)$/;"	f	file:
SeedInsecureRand	./test/setup_common.h	/^static inline void SeedInsecureRand(bool deterministic = false)$/;"	f
SeedSleep	./random.cpp	/^static void SeedSleep(CSHA512& hasher, RNGState& rng)$/;"	f	file:
SeedSpec6	./chainparams.h	/^struct SeedSpec6 {$/;"	s
Seek	./crypto/chacha20.cpp	/^void ChaCha20::Seek(uint64_t pos)$/;"	f	class:ChaCha20
Seek	./dbwrapper.h	/^    template<typename K> void Seek(const K& key) {$/;"	f	class:CDBIterator
Seek	./leveldb/db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon29::DBIter
Seek	./leveldb/db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	./leveldb/db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	./leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	./leveldb/db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	./leveldb/table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	./leveldb/table/iterator.cc	/^  virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon12::EmptyIterator
Seek	./leveldb/table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	./leveldb/table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon11::MergingIterator
Seek	./leveldb/table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
Seek	./streams.h	/^    bool Seek(uint64_t nPos) {$/;"	f	class:CBufferedFile
SeekRandom	./leveldb/db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekToFirst	./dbwrapper.cpp	/^void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }$/;"	f	class:CDBIterator
SeekToFirst	./leveldb/db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon29::DBIter
SeekToFirst	./leveldb/db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	./leveldb/db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	./leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	./leveldb/db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	./leveldb/table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	./leveldb/table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon12::EmptyIterator
SeekToFirst	./leveldb/table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	./leveldb/table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon11::MergingIterator
SeekToFirst	./leveldb/table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SeekToLast	./leveldb/db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon29::DBIter
SeekToLast	./leveldb/db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	./leveldb/db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	./leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	./leveldb/db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	./leveldb/table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	./leveldb/table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon12::EmptyIterator
SeekToLast	./leveldb/table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	./leveldb/table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon11::MergingIterator
SeekToLast	./leveldb/table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SeekToRestartPoint	./leveldb/table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
SeenLocal	./net.cpp	/^bool SeenLocal(const CService& addr)$/;"	f
SegwitHeight	./consensus/params.h	/^    int SegwitHeight;$/;"	m	struct:Consensus::Params
Select	./addrman.h	/^    CAddrInfo Select(bool newOnly = false)$/;"	f	class:CAddrMan
Select	./wallet/coincontrol.h	/^    void Select(const COutPoint& output)$/;"	f	class:CCoinControl
SelectBaseParams	./chainparamsbase.cpp	/^void SelectBaseParams(const std::string& chain)$/;"	f
SelectCoins	./wallet/wallet.cpp	/^bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const$/;"	f	class:CWallet
SelectCoinsBnB	./wallet/coinselection.cpp	/^bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)$/;"	f
SelectCoinsMinConf	./wallet/wallet.cpp	/^bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,$/;"	f	class:CWallet
SelectConfigNetwork	./util/system.cpp	/^void ArgsManager::SelectConfigNetwork(const std::string& network)$/;"	f	class:ArgsManager
SelectParams	./chainparams.cpp	/^void SelectParams(const std::string& network)$/;"	f
SelectTriedCollision	./addrman.h	/^    CAddrInfo SelectTriedCollision()$/;"	f	class:CAddrMan
SelectTriedCollision_	./addrman.cpp	/^CAddrInfo CAddrMan::SelectTriedCollision_()$/;"	f	class:CAddrMan
Select_	./addrman.cpp	/^CAddrInfo CAddrMan::Select_(bool newOnly)$/;"	f	class:CAddrMan
SelfTest	./crypto/sha256.cpp	/^bool SelfTest() {$/;"	f	namespace:__anon40
SelfTest	./test/coins_tests.cpp	/^    void SelfTest() const$/;"	f	class:__anon60::CCoinsViewCacheTest
Send	./qt/addresstablemodel.cpp	/^const QString AddressTableModel::Send = "S";$/;"	m	class:AddressTableModel	file:
Send	./qt/addresstablemodel.h	/^    static const QString Send;      \/**< Specifies send address *\/$/;"	m	class:AddressTableModel
SendBlockTransactions	./net_processing.cpp	/^inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman* connman) {$/;"	f	file:
SendCoins	./qt/test/wallettests.cpp	/^uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CTxDestination& address, CAmount amount, bool rbf)$/;"	f	namespace:__anon63
SendCoinsDialog	./qt/sendcoinsdialog.cpp	/^SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SendCoinsDialog
SendCoinsDialog	./qt/sendcoinsdialog.h	/^class SendCoinsDialog : public QDialog$/;"	c
SendCoinsEntry	./qt/sendcoinsentry.cpp	/^SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SendCoinsEntry
SendCoinsEntry	./qt/sendcoinsentry.h	/^class SendCoinsEntry : public QStackedWidget$/;"	c
SendCoinsRecipient	./qt/walletmodel.h	/^    explicit SendCoinsRecipient() : amount(0), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }$/;"	f	class:SendCoinsRecipient
SendCoinsRecipient	./qt/walletmodel.h	/^    explicit SendCoinsRecipient(const QString &addr, const QString &_label, const CAmount& _amount, const QString &_message):$/;"	f	class:SendCoinsRecipient
SendCoinsRecipient	./qt/walletmodel.h	/^class SendCoinsRecipient$/;"	c
SendCoinsReturn	./qt/walletmodel.h	/^        SendCoinsReturn(StatusCode _status = OK, QString _reasonCommitFailed = "")$/;"	f	struct:WalletModel::SendCoinsReturn
SendCoinsReturn	./qt/walletmodel.h	/^    struct SendCoinsReturn$/;"	s	class:WalletModel
SendConfirmationDialog	./qt/sendcoinsdialog.cpp	/^SendConfirmationDialog::SendConfirmationDialog(const QString &title, const QString &text, int _secDelay,$/;"	f	class:SendConfirmationDialog
SendConfirmationDialog	./qt/sendcoinsdialog.h	/^class SendConfirmationDialog : public QMessageBox$/;"	c
SendMessage	./zmq/zmqpublishnotifier.cpp	/^bool CZMQAbstractPublishNotifier::SendMessage(const char *command, const void* data, size_t size)$/;"	f	class:CZMQAbstractPublishNotifier
SendMessages	./net_processing.cpp	/^bool PeerLogicValidation::SendMessages(CNode* pto)$/;"	f	class:PeerLogicValidation
SendMoney	./wallet/rpcwallet.cpp	/^static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)$/;"	f	file:
SendToAddress	./qt/transactionrecord.h	/^        SendToAddress,$/;"	e	enum:TransactionRecord::Type
SendToOther	./qt/transactionrecord.h	/^        SendToOther,$/;"	e	enum:TransactionRecord::Type
SendToSelf	./qt/transactionrecord.h	/^        SendToSelf$/;"	e	enum:TransactionRecord::Type
Sending	./qt/addresstablemodel.cpp	/^        Sending,$/;"	e	enum:AddressTableEntry::Type	file:
SendingTab	./qt/addressbookpage.h	/^        SendingTab = 0,$/;"	e	enum:AddressBookPage::Tabs
Sent	./qt/peertablemodel.h	/^        Sent = 3,$/;"	e	enum:PeerTableModel::ColumnIndex
SeparatorStyle	./qt/bitcoinunits.h	/^    enum SeparatorStyle$/;"	g	class:BitcoinUnits
Sequence	./leveldb/db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceLocks	./consensus/tx_verify.cpp	/^bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
SequenceNumber	./leveldb/db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	./leveldb/include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	./leveldb/include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	./leveldb/helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
SequentialFileImpl	./leveldb/helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon35	file:
SerReadWriteMany	./serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionSerialize ser_action, const Args&... args)$/;"	f
SerReadWriteMany	./serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&&... args)$/;"	f
SerializationOp	./addrdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBanEntry
SerializationOp	./addrman.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CAddrInfo
SerializationOp	./bench/prevector.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {READWRITE(x);}$/;"	f	struct:nontrivial_t
SerializationOp	./blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactions
SerializationOp	./blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactionsRequest
SerializationOp	./blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeaderAndShortTxIDs
SerializationOp	./blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:PrefilledTransaction
SerializationOp	./blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:TransactionCompressor
SerializationOp	./bloom.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBloomFilter
SerializationOp	./chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockFileInfo
SerializationOp	./chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CDiskBlockIndex
SerializationOp	./compressor.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxOutCompressor
SerializationOp	./flatfile.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:FlatFilePos
SerializationOp	./index/blockfilterindex.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:__anon120::DBHashKey
SerializationOp	./index/blockfilterindex.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:__anon120::DBVal
SerializationOp	./index/txindex.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CDiskTxPos
SerializationOp	./merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMerkleBlock
SerializationOp	./merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CPartialMerkleTree
SerializationOp	./netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CNetAddr
SerializationOp	./netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CService
SerializationOp	./netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSubNet
SerializationOp	./policy/feerate.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CFeeRate
SerializationOp	./primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlock
SerializationOp	./primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeader
SerializationOp	./primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CBlockLocator
SerializationOp	./primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:COutPoint
SerializationOp	./primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxIn
SerializationOp	./primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxOut
SerializationOp	./protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CAddress
SerializationOp	./protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CInv
SerializationOp	./protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CMessageHeader
SerializationOp	./qt/recentrequeststablemodel.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:RecentRequestEntry
SerializationOp	./qt/walletmodel.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:SendCoinsRecipient
SerializationOp	./rest.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	struct:CCoin
SerializationOp	./script/script.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CScript
SerializationOp	./script/sign.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	struct:KeyOriginInfo
SerializationOp	./test/blockencodings_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:TestHeaderAndShortIDs
SerializationOp	./test/dbwrapper_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:StringContentsSerializer
SerializationOp	./test/serialize_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSerializeMethodsTestMany
SerializationOp	./test/serialize_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSerializeMethodsTestSingle
SerializationOp	./undo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockUndo
SerializationOp	./wallet/crypter.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMasterKey
SerializationOp	./wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CKeyPool
SerializationOp	./wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMerkleTx
SerializationOp	./wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CWalletKey
SerializationOp	./wallet/walletdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CKeyMetadata
SerializationOp	./wallet/walletdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CHDChain
Serialize	./addrman.h	/^    void Serialize(Stream &s) const$/;"	f	class:CAddrMan
Serialize	./blockfilter.h	/^    void Serialize(Stream& s) const {$/;"	f	class:BlockFilter
Serialize	./coins.h	/^    void Serialize(Stream &s) const {$/;"	f	class:Coin
Serialize	./compressor.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CScriptCompressor
Serialize	./index/blockfilterindex.cpp	/^    void Serialize(Stream& s) const$/;"	f	struct:__anon120::DBHeightKey
Serialize	./key.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtKey
Serialize	./primitives/transaction.h	/^    inline void Serialize(Stream& s) const {$/;"	f	class:CTransaction
Serialize	./primitives/transaction.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:CMutableTransaction
Serialize	./psbt.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:PSBTInput
Serialize	./psbt.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:PSBTOutput
Serialize	./psbt.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:PartiallySignedTransaction
Serialize	./pubkey.h	/^    void Serialize(CSizeComputer& s) const$/;"	f	struct:CExtPubKey
Serialize	./pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	class:CPubKey
Serialize	./pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtPubKey
Serialize	./script/interpreter.cpp	/^    void Serialize(S &s) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
Serialize	./serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CCompactSize
Serialize	./serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CVarInt
Serialize	./serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:BigEndian
Serialize	./serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:LimitedString
Serialize	./serialize.h	/^Serialize(Stream& os, const std::shared_ptr<const T>& p)$/;"	f
Serialize	./serialize.h	/^Serialize(Stream& os, const std::unique_ptr<const T>& p)$/;"	f
Serialize	./serialize.h	/^inline void Serialize(Stream& os, const T& a)$/;"	f
Serialize	./serialize.h	/^inline void Serialize(Stream& os, const prevector<N, T>& v)$/;"	f
Serialize	./serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v)$/;"	f
Serialize	./serialize.h	/^template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } \/\/ TODO Get rid of bare char$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int16_t a ) { ser_writedata16(s, a); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_writedata32(s, a); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint16_t a) { ser_writedata16(s, a); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }$/;"	f
Serialize	./serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }$/;"	f
Serialize	./serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str)$/;"	f
Serialize	./serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m)$/;"	f
Serialize	./serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item)$/;"	f
Serialize	./serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m)$/;"	f
Serialize	./streams.h	/^    void Serialize(Stream& s) const$/;"	f	class:CDataStream
Serialize	./test/script_p2sh_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	./test/sigopcount_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	./txdb.cpp	/^    void Serialize(Stream &s) const {$/;"	f	struct:__anon121::CoinEntry
Serialize	./uint256.h	/^    void Serialize(Stream& s) const$/;"	f	class:base_blob
Serialize	./undo.h	/^    void Serialize(Stream &s) const {$/;"	f	class:TxInUndoSerializer
Serialize	./undo.h	/^    void Serialize(Stream& s) const {$/;"	f	class:CTxUndo
Serialize	./wallet/wallet.h	/^    void Serialize(Stream& s) const$/;"	f	class:CWalletTx
SerializeDB	./addrdb.cpp	/^bool SerializeDB(Stream& stream, const Data& data)$/;"	f	namespace:__anon115
SerializeFileDB	./addrdb.cpp	/^bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data)$/;"	f	namespace:__anon115
SerializeHDKeypaths	./script/sign.h	/^void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, uint8_t type)$/;"	f
SerializeHash	./hash.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)$/;"	f
SerializeInput	./script/interpreter.cpp	/^    void SerializeInput(S &s, unsigned int nInput) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
SerializeMany	./serialize.h	/^void SerializeMany(Stream& s)$/;"	f
SerializeMany	./serialize.h	/^void SerializeMany(Stream& s, const Arg& arg, const Args&... args)$/;"	f
SerializeOutput	./script/interpreter.cpp	/^    void SerializeOutput(S &s, unsigned int nOutput) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
SerializeScriptCode	./script/interpreter.cpp	/^    void SerializeScriptCode(S &s) const {$/;"	f	class:__anon77::CTransactionSignatureSerializer
SerializeToString	./qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::SerializeToString(std::string* output) const$/;"	f	class:PaymentRequestPlus
SerializeToVector	./script/sign.h	/^void SerializeToVector(Stream& s, const X&... args)$/;"	f
SerializeTransaction	./primitives/transaction.h	/^inline void SerializeTransaction(const TxType& tx, Stream& s) {$/;"	f
Serialize_impl	./serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)$/;"	f
Serialize_impl	./serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)$/;"	f
Serialize_impl	./serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)$/;"	f
Serialize_impl	./serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&)$/;"	f
Set	./key.h	/^    void Set(const T pbegin, const T pend, bool fCompressedIn)$/;"	f	class:CKey
Set	./leveldb/db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	./leveldb/table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
Set	./pubkey.h	/^    void Set(const T pbegin, const T pend)$/;"	f	class:CPubKey
Set	./script/ismine.h	/^    void Set(isminefilter filter, CAmount value)$/;"	f	struct:CachableAmount
Set	./script/sigcache.cpp	/^    void Set(uint256& entry)$/;"	f	class:__anon84::CSignatureCache
SetAddrLocal	./net.cpp	/^void CNode::SetAddrLocal(const CService& addrLocalIn) {$/;"	f	class:CNode
SetAddress	./zmq/zmqabstractnotifier.h	/^    void SetAddress(const std::string &a) { address = a; }$/;"	f	class:CZMQAbstractNotifier
SetAddressBook	./wallet/wallet.cpp	/^bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& strPurpose)$/;"	f	class:CWallet
SetAllowEmpty	./qt/bitcoinamountfield.cpp	/^    void SetAllowEmpty(bool allow)$/;"	f	class:AmountSpinBox
SetAllowEmpty	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::SetAllowEmpty(bool allow)$/;"	f	class:BitcoinAmountField
SetAllowed	./leveldb/util/env_posix.cc	/^  void SetAllowed(intptr_t v) {$/;"	f	class:leveldb::__anon8::Limiter	file:
SetBackend	./coins.cpp	/^void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }$/;"	f	class:CCoinsViewBacked
SetBanned	./banman.cpp	/^void BanMan::SetBanned(const banmap_t& banmap)$/;"	f	class:BanMan
SetBannedSetDirty	./banman.cpp	/^void BanMan::SetBannedSetDirty(bool dirty)$/;"	f	class:BanMan
SetBestBlock	./coins.cpp	/^void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
SetBestHeight	./net.cpp	/^void CConnman::SetBestHeight(int height)$/;"	f	class:CConnman
SetBool	./leveldb/util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetBroadcastTransactions	./wallet/wallet.h	/^    void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }$/;"	f	class:final
SetByte	./leveldb/db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	./leveldb/util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon4::LRUCache
SetCoinsValue	./test/coins_tests.cpp	/^static void SetCoinsValue(CAmount value, Coin& coin)$/;"	f	file:
SetCompact	./arith_uint256.cpp	/^arith_uint256& arith_uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)$/;"	f	class:arith_uint256
SetCompactPointer	./leveldb/db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	./leveldb/db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	./leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	./leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCrypted	./wallet/crypter.cpp	/^bool CCryptoKeyStore::SetCrypted()$/;"	f	class:CCryptoKeyStore
SetCurrentFile	./leveldb/db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataDir	./test/setup_common.cpp	/^fs::path BasicTestingSetup::SetDataDir(const std::string& name)$/;"	f	class:BasicTestingSetup
SetDataIterator	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SetFileLimits	./leveldb/util/env_posix_test.cc	/^  static void SetFileLimits(int read_only_file_limit, int mmap_limit) {$/;"	f	class:leveldb::EnvPosixTest
SetFilesystemActive	./leveldb/db/fault_injection_test.cc	/^  void SetFilesystemActive(bool active) { filesystem_active_ = active; }$/;"	f	class:leveldb::FaultInjectionTestEnv
SetFrom	./leveldb/db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetHDChain	./wallet/wallet.cpp	/^void CWallet::SetHDChain(const CHDChain& chain, bool memonly)$/;"	f	class:CWallet
SetHDSeed	./wallet/wallet.cpp	/^void CWallet::SetHDSeed(const CPubKey& seed)$/;"	f	class:CWallet
SetHasKeys	./rpc/blockchain.cpp	/^static inline bool SetHasKeys(const std::set<T>& set) {return false;}$/;"	f	file:
SetHasKeys	./rpc/blockchain.cpp	/^static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)$/;"	f	file:
SetHex	./arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	./arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const std::string& str)$/;"	f	class:base_uint
SetHex	./uint256.cpp	/^void base_blob<BITS>::SetHex(const char* psz)$/;"	f	class:base_blob
SetHex	./uint256.cpp	/^void base_blob<BITS>::SetHex(const std::string& str)$/;"	f	class:base_blob
SetIP	./netaddress.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetIV	./crypto/chacha20.cpp	/^void ChaCha20::SetIV(uint64_t iv)$/;"	f	class:ChaCha20
SetInternal	./netaddress.cpp	/^bool CNetAddr::SetInternal(const std::string &name)$/;"	f	class:CNetAddr
SetInternalName	./util/threadnames.cpp	/^static void SetInternalName(std::string name) { g_thread_name = std::move(name); }$/;"	f	file:
SetInternalName	./util/threadnames.cpp	/^static void SetInternalName(std::string name) { }$/;"	f	file:
SetIsLoaded	./txmempool.cpp	/^void CTxMemPool::SetIsLoaded(bool loaded)$/;"	f	class:CTxMemPool
SetKey	./crypto/chacha20.cpp	/^void ChaCha20::SetKey(const unsigned char* k, size_t keylen)$/;"	f	class:ChaCha20
SetKey	./wallet/crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	./wallet/crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLastSequence	./leveldb/db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	./leveldb/db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLimit	./streams.h	/^    bool SetLimit(uint64_t nPos = std::numeric_limits<uint64_t>::max()) {$/;"	f	class:CBufferedFile
SetLogNumber	./leveldb/db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetMaxOpenFiles	./dbwrapper.cpp	/^static void SetMaxOpenFiles(leveldb::Options *options) {$/;"	f	file:
SetMaxOutboundTarget	./net.cpp	/^void CConnman::SetMaxOutboundTarget(uint64_t limit)$/;"	f	class:CConnman
SetMaxOutboundTimeframe	./net.cpp	/^void CConnman::SetMaxOutboundTimeframe(uint64_t timeframe)$/;"	f	class:CConnman
SetMaxValue	./qt/bitcoinamountfield.cpp	/^    void SetMaxValue(const CAmount& value)$/;"	f	class:AmountSpinBox
SetMaxValue	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::SetMaxValue(const CAmount& value)$/;"	f	class:BitcoinAmountField
SetMaxVersion	./wallet/wallet.cpp	/^bool CWallet::SetMaxVersion(int nVersion)$/;"	f	class:CWallet
SetMerkleBranch	./wallet/wallet.cpp	/^void CMerkleTx::SetMerkleBranch(const uint256& block_hash, int posInBlock)$/;"	f	class:CMerkleTx
SetMinValue	./qt/bitcoinamountfield.cpp	/^    void SetMinValue(const CAmount& value)$/;"	f	class:AmountSpinBox
SetMinValue	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::SetMinValue(const CAmount& value)$/;"	f	class:BitcoinAmountField
SetMinVersion	./wallet/wallet.cpp	/^void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in, bool fExplicit)$/;"	f	class:CWallet
SetMiscWarning	./warnings.cpp	/^void SetMiscWarning(const std::string& strWarning)$/;"	f
SetMockTime	./util/time.cpp	/^void SetMockTime(int64_t nMockTimeIn)$/;"	f
SetNameProxy	./netbase.cpp	/^bool SetNameProxy(const proxyType &addrProxy) {$/;"	f
SetNetworkActive	./net.cpp	/^void CConnman::SetNetworkActive(bool active)$/;"	f	class:CConnman
SetNetworkOnlyArg	./test/util_tests.cpp	/^    void SetNetworkOnlyArg(const std::string arg)$/;"	f	struct:TestArgsManager
SetNext	./leveldb/db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	./leveldb/db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNull	./addrdb.h	/^    void SetNull()$/;"	f	class:CBanEntry
SetNull	./chain.h	/^     void SetNull() {$/;"	f	class:CBlockFileInfo
SetNull	./chain.h	/^    void SetNull()$/;"	f	class:CBlockIndex
SetNull	./flatfile.h	/^    void SetNull() { nFile = -1; nPos = 0; }$/;"	f	struct:FlatFilePos
SetNull	./index/txindex.cpp	/^    void SetNull() {$/;"	f	struct:CDiskTxPos
SetNull	./primitives/block.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	./primitives/block.h	/^    void SetNull()$/;"	f	class:CBlockHeader
SetNull	./primitives/block.h	/^    void SetNull()$/;"	f	struct:CBlockLocator
SetNull	./primitives/transaction.h	/^    void SetNull() { hash.SetNull(); n = NULL_INDEX; }$/;"	f	class:COutPoint
SetNull	./primitives/transaction.h	/^    void SetNull()$/;"	f	class:CTxOut
SetNull	./script/script.h	/^    void SetNull() { stack.clear(); stack.shrink_to_fit(); }$/;"	f	struct:CScriptWitness
SetNull	./uint256.h	/^    void SetNull()$/;"	f	class:base_blob
SetNull	./wallet/coincontrol.cpp	/^void CCoinControl::SetNull()$/;"	f	class:CCoinControl
SetNull	./wallet/walletdb.h	/^    void SetNull()$/;"	f	class:CHDChain
SetNull	./wallet/walletdb.h	/^    void SetNull()$/;"	f	class:CKeyMetadata
SetOutboundMessageHighWaterMark	./zmq/zmqabstractnotifier.h	/^    void SetOutboundMessageHighWaterMark(const int sndhwm) {$/;"	f	class:CZMQAbstractNotifier
SetPos	./streams.h	/^    bool SetPos(uint64_t nPos) {$/;"	f	class:CBufferedFile
SetPrevLogNumber	./leveldb/db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetProxy	./netbase.cpp	/^bool SetProxy(enum Network net, const proxyType &addrProxy) {$/;"	f
SetProxySetting	./qt/optionsmodel.cpp	/^static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)$/;"	f	file:
SetRPCWarmupFinished	./rpc/server.cpp	/^void SetRPCWarmupFinished()$/;"	f
SetRPCWarmupStatus	./rpc/server.cpp	/^void SetRPCWarmupStatus(const std::string& newStatus)$/;"	f
SetRaw	./netaddress.cpp	/^void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)$/;"	f	class:CNetAddr
SetReachable	./net.cpp	/^void SetReachable(enum Network net, bool reachable)$/;"	f
SetReadOnlyFDLimit	./leveldb/util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyFDLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetReadOnlyMMapLimit	./leveldb/util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyMMapLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetRecvVersion	./net.h	/^    void SetRecvVersion(int nVersionIn)$/;"	f	class:CNode
SetSeed	./key.cpp	/^void CExtKey::SetSeed(const unsigned char *seed, unsigned int nSeedLen) {$/;"	f	class:CExtKey
SetSendVersion	./net.cpp	/^void CNode::SetSendVersion(int nVersionIn)$/;"	f	class:CNode
SetSequence	./leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetServiceFlagsIBDCache	./protocol.cpp	/^void SetServiceFlagsIBDCache(bool state) {$/;"	f
SetServices	./addrman.h	/^    void SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetServices	./net.cpp	/^void CConnman::SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CConnman
SetServices_	./addrman.cpp	/^void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetSockAddr	./netaddress.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSocketNoDelay	./netbase.cpp	/^bool SetSocketNoDelay(const SOCKET& hSocket)$/;"	f
SetSocketNonBlocking	./netbase.cpp	/^bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)$/;"	f
SetSpecial	./netaddress.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetStartOnSystemStartup	./qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart) { return false; }$/;"	f	namespace:GUIUtil
SetStartOnSystemStartup	./qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart)$/;"	f	namespace:GUIUtil
SetThreadName	./util/threadnames.cpp	/^static void SetThreadName(const char* name)$/;"	f	file:
SetTip	./chain.cpp	/^void CChain::SetTip(CBlockIndex *pindex) {$/;"	f	class:CChain
SetTryNewOutboundPeer	./net.cpp	/^void CConnman::SetTryNewOutboundPeer(bool flag)$/;"	f	class:CConnman
SetTx	./wallet/wallet.h	/^    void SetTx(CTransactionRef arg)$/;"	f	class:CMerkleTx
SetType	./streams.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetType	./zmq/zmqabstractnotifier.h	/^    void SetType(const std::string &t) { type = t; }$/;"	f	class:CZMQAbstractNotifier
SetVersion	./net.h	/^    void SetVersion(int nVersionIn)$/;"	f	class:CNetMessage
SetVersion	./streams.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
SetWalletDir	./wallet/test/init_test_fixture.cpp	/^void InitWalletDirTestingSetup::SetWalletDir(const fs::path& walletdir_path)$/;"	f	class:InitWalletDirTestingSetup
SetWalletFlag	./wallet/wallet.cpp	/^void CWallet::SetWalletFlag(uint64_t flags)$/;"	f	class:CWallet
SetWalletFlags	./wallet/wallet.cpp	/^bool CWallet::SetWalletFlags(uint64_t overwriteFlags, bool memonly)$/;"	f	class:CWallet
SetfLargeWorkForkFound	./warnings.cpp	/^void SetfLargeWorkForkFound(bool flag)$/;"	f
SetfLargeWorkInvalidChainFound	./warnings.cpp	/^void SetfLargeWorkInvalidChainFound(bool flag)$/;"	f
SetupArgs	./test/getarg_tests.cpp	/^static void SetupArgs(const std::vector<std::string>& args)$/;"	f	file:
SetupArgs	./test/util_tests.cpp	/^    void SetupArgs(int argv, const char* args[])$/;"	f	struct:TestArgsManager
SetupBenchArgs	./bench/bench_bitcoin.cpp	/^static void SetupBenchArgs()$/;"	f	file:
SetupBitcoinTxArgs	./bitcoin-tx.cpp	/^static void SetupBitcoinTxArgs()$/;"	f	file:
SetupChainParamsBaseOptions	./chainparamsbase.cpp	/^void SetupChainParamsBaseOptions()$/;"	f
SetupCliArgs	./bitcoin-cli.cpp	/^static void SetupCliArgs()$/;"	f	file:
SetupDummyInputs	./bench/ccoins_caching.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)$/;"	f	file:
SetupDummyInputs	./test/transaction_tests.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)$/;"	f	file:
SetupEnvironment	./util/system.cpp	/^void SetupEnvironment()$/;"	f
SetupHelpOptions	./util/system.cpp	/^void SetupHelpOptions(ArgsManager& args)$/;"	f
SetupNetworking	./util/system.cpp	/^bool SetupNetworking()$/;"	f
SetupOtherInputs	./leveldb/db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
SetupServerArgs	./init.cpp	/^void SetupServerArgs()$/;"	f
SetupUIArgs	./qt/bitcoin.cpp	/^static void SetupUIArgs()$/;"	f	file:
SetupWalletToolArgs	./bitcoin-wallet.cpp	/^static void SetupWalletToolArgs()$/;"	f	file:
ShL	./crypto/sha256_avx2.cpp	/^__m256i inline ShL(__m256i x, int n) { return _mm256_slli_epi32(x, n); }$/;"	f	namespace:sha256d64_avx2::__anon37
ShL	./crypto/sha256_sse41.cpp	/^__m128i inline ShL(__m128i x, int n) { return _mm_slli_epi32(x, n); }$/;"	f	namespace:sha256d64_sse41::__anon41
ShR	./crypto/sha256_avx2.cpp	/^__m256i inline ShR(__m256i x, int n) { return _mm256_srli_epi32(x, n); }$/;"	f	namespace:sha256d64_avx2::__anon37
ShR	./crypto/sha256_sse41.cpp	/^__m128i inline ShR(__m128i x, int n) { return _mm_srli_epi32(x, n); }$/;"	f	namespace:sha256d64_sse41::__anon41
Shard	./leveldb/util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache	file:
ShardedLRUCache	./leveldb/util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon4::ShardedLRUCache
ShardedLRUCache	./leveldb/util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon4	file:
SharedState	./leveldb/db/db_bench.cc	/^  SharedState() : cv(&mu) { }$/;"	f	struct:leveldb::__anon19::SharedState
SharedState	./leveldb/db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon19	file:
ShiftMessageA	./crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) ShiftMessageA(__m128i& m0, __m128i m1)$/;"	f	namespace:__anon43
ShiftMessageB	./crypto/sha256_shani.cpp	/^void inline __attribute__((always_inline)) ShiftMessageB(__m128i& m0, __m128i m1, __m128i& m2)$/;"	f	namespace:__anon43
ShiftMessageC	./crypto/sha256_shani.cpp	/^void inline  __attribute__((always_inline)) ShiftMessageC(__m128i& m0, __m128i m1, __m128i& m2)$/;"	f	namespace:__anon43
ShiftRows	./crypto/ctaes/ctaes.c	/^static void ShiftRows(AES_state* s) {$/;"	f	file:
ShortSuccessor	./leveldb/db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	./leveldb/db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	./leveldb/db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
ShowProgress	./qt/clientmodel.cpp	/^static void ShowProgress(ClientModel *clientmodel, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	./qt/splashscreen.cpp	/^static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress, bool resume_possible)$/;"	f	file:
ShowProgress	./qt/transactiontablemodel.cpp	/^static void ShowProgress(TransactionTableModel *ttm, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	./qt/walletmodel.cpp	/^static void ShowProgress(WalletModel *walletmodel, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::ShowProgressSig> ShowProgress;$/;"	m	struct:UISignals	file:
ShowProgress	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(ShowProgress);$/;"	v
ShowProgress	./ui_interface.cpp	/^void CClientUIInterface::ShowProgress(const std::string& title, int nProgress, bool resume_possible) { return g_ui_signals.ShowProgress(title, nProgress, resume_possible); }$/;"	f	class:CClientUIInterface
ShowProgress	./wallet/wallet.h	/^    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;$/;"	m	class:final
ShrinkDebugFile	./logging.cpp	/^void BCLog::Logger::ShrinkDebugFile()$/;"	f	class:BCLog::Logger
ShrinkSize	./leveldb/db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Shuffle	./crypto/sha256_shani.cpp	/^void inline __attribute__((always_inline)) Shuffle(__m128i& s0, __m128i& s1)$/;"	f	namespace:__anon43
Shuffle	./random.h	/^void Shuffle(I first, I last, R&& rng)$/;"	f
Shutdown	./init.cpp	/^void Shutdown(InitInterfaces& interfaces)$/;"	f
Shutdown	./zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::Shutdown()$/;"	f	class:CZMQNotificationInterface
Shutdown	./zmq/zmqpublishnotifier.cpp	/^void CZMQAbstractPublishNotifier::Shutdown()$/;"	f	class:CZMQAbstractPublishNotifier
ShutdownRequested	./shutdown.cpp	/^bool ShutdownRequested()$/;"	f
ShutdownWindow	./qt/utilitydialog.cpp	/^ShutdownWindow::ShutdownWindow(QWidget *parent, Qt::WindowFlags f):$/;"	f	class:ShutdownWindow
ShutdownWindow	./qt/utilitydialog.h	/^class ShutdownWindow : public QWidget$/;"	c
SigHasLowR	./key.cpp	/^bool SigHasLowR(const secp256k1_ecdsa_signature* sig)$/;"	f
SigOpsCost	./test/setup_common.h	/^    TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
SigPair	./script/sign.h	/^typedef std::pair<CPubKey, std::vector<unsigned char>> SigPair;$/;"	t
SigVersion	./script/interpreter.h	/^enum class SigVersion$/;"	c
SighashToStr	./core_write.cpp	/^std::string SighashToStr(unsigned char sighash_type)$/;"	f
Sigma0	./crypto/sha256.cpp	/^uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }$/;"	f	namespace:__anon40::sha256
Sigma0	./crypto/sha256_avx2.cpp	/^__m256i inline Sigma0(__m256i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Sigma0	./crypto/sha256_sse41.cpp	/^__m128i inline Sigma0(__m128i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Sigma0	./crypto/sha512.cpp	/^uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }$/;"	f	namespace:__anon39::sha512
Sigma0	./secp256k1/src/hash_impl.h	/^#define Sigma0(/;"	d
Sigma0	./secp256k1/src/hash_impl.h	/^#undef Sigma0$/;"	d
Sigma1	./crypto/sha256.cpp	/^uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }$/;"	f	namespace:__anon40::sha256
Sigma1	./crypto/sha256_avx2.cpp	/^__m256i inline Sigma1(__m256i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }$/;"	f	namespace:sha256d64_avx2::__anon37
Sigma1	./crypto/sha256_sse41.cpp	/^__m128i inline Sigma1(__m128i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }$/;"	f	namespace:sha256d64_sse41::__anon41
Sigma1	./crypto/sha512.cpp	/^uint64_t inline Sigma1(uint64_t x) { return (x >> 14 | x << 50) ^ (x >> 18 | x << 46) ^ (x >> 41 | x << 23); }$/;"	f	namespace:__anon39::sha512
Sigma1	./secp256k1/src/hash_impl.h	/^#define Sigma1(/;"	d
Sigma1	./secp256k1/src/hash_impl.h	/^#undef Sigma1$/;"	d
Sign	./key.cpp	/^bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool grind, uint32_t test_case) const {$/;"	f	class:CKey
SignCompact	./key.cpp	/^bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {$/;"	f	class:CKey
SignPSBTInput	./psbt.cpp	/^bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)$/;"	f
SignSignature	./script/sign.cpp	/^bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)$/;"	f
SignSignature	./script/sign.cpp	/^bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignStep	./script/sign.cpp	/^static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey,$/;"	f	file:
SignTransaction	./rpc/rawtransaction_util.cpp	/^UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)$/;"	f
SignTransaction	./wallet/feebumper.cpp	/^bool SignTransaction(CWallet* wallet, CMutableTransaction& mtx) {$/;"	f	namespace:feebumper
SignTransaction	./wallet/wallet.cpp	/^bool CWallet::SignTransaction(CMutableTransaction& tx)$/;"	f	class:CWallet
SignVerifyMessageDialog	./qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SignVerifyMessageDialog
SignVerifyMessageDialog	./qt/signverifymessagedialog.h	/^class SignVerifyMessageDialog : public QDialog$/;"	c
Signal	./leveldb/port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
Signal	./leveldb/port/port_win.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	./leveldb/port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalAll	./leveldb/port/port_win.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalsOptInRBF	./util/rbf.cpp	/^bool SignalsOptInRBF(const CTransaction &tx)$/;"	f
SignatureCacheHasher	./script/sigcache.h	/^class SignatureCacheHasher$/;"	c
SignatureData	./script/sign.h	/^    SignatureData() {}$/;"	f	struct:SignatureData
SignatureData	./script/sign.h	/^    explicit SignatureData(const CScript& script) : scriptSig(script) {}$/;"	f	struct:SignatureData
SignatureData	./script/sign.h	/^struct SignatureData {$/;"	s
SignatureExtractorChecker	./script/sign.cpp	/^    SignatureExtractorChecker(SignatureData& sigdata, BaseSignatureChecker& checker) : sigdata(sigdata), checker(checker) {}$/;"	f	class:final
SignatureHash	./script/interpreter.cpp	/^uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)$/;"	f
SignatureHashOld	./test/sighash_tests.cpp	/^uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f	file:
SigningProvider	./script/sign.h	/^class SigningProvider$/;"	c
SimConnFail	./test/addrman_tests.cpp	/^    void SimConnFail(CService& addr)$/;"	f	class:CAddrManTest
SingleColor	./qt/platformstyle.h	/^    QColor SingleColor() const { return singleColor; }$/;"	f	class:PlatformStyle
SingleColorIcon	./qt/platformstyle.cpp	/^QIcon PlatformStyle::SingleColorIcon(const QIcon& icon) const$/;"	f	class:PlatformStyle
SingleColorIcon	./qt/platformstyle.cpp	/^QIcon PlatformStyle::SingleColorIcon(const QString& filename) const$/;"	f	class:PlatformStyle
SingleColorImage	./qt/platformstyle.cpp	/^QImage PlatformStyle::SingleColorImage(const QString& filename) const$/;"	f	class:PlatformStyle
SingleEntryCacheTest	./test/coins_tests.cpp	/^    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)$/;"	f	class:SingleEntryCacheTest
SingleEntryCacheTest	./test/coins_tests.cpp	/^class SingleEntryCacheTest$/;"	c	file:
SingleThreadedSchedulerClient	./scheduler.h	/^    explicit SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}$/;"	f	class:SingleThreadedSchedulerClient
SingleThreadedSchedulerClient	./scheduler.h	/^class SingleThreadedSchedulerClient {$/;"	c
Singleton	./script/descriptor.cpp	/^std::vector<T> Singleton(T elem)$/;"	f	namespace:__anon75
SipHashUint256	./crypto/siphash.cpp	/^uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)$/;"	f
SipHashUint256Extra	./crypto/siphash.cpp	/^uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)$/;"	f
SipHash_32b	./bench/crypto_hash.cpp	/^static void SipHash_32b(benchmark::State& state)$/;"	f	file:
Size	./leveldb/db/autocompact_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::AutoCompactTest
Size	./leveldb/db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	./leveldb/helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon35::FileState
Size	./leveldb/table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Size	./test/prevector_tests.cpp	/^    typedef typename pretype::size_type Size;$/;"	t	class:prevector_tester	file:
SizeEstimate	./dbwrapper.h	/^    size_t SizeEstimate() const { return size_estimate; }$/;"	f	class:CDBBatch
SizeToChunkSortedMap	./support/lockedpool.h	/^    typedef std::multimap<size_t, char*> SizeToChunkSortedMap;$/;"	t	class:Arena
Skewed	./leveldb/util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skip	./leveldb/db/log_test.cc	/^    virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::log::LogTest::StringSource
Skip	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
Skip	./leveldb/util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon8::PosixSequentialFile
Skip	./leveldb/util/env_win.cc	/^Status Win32SequentialFile::Skip( uint64_t n )$/;"	f	class:leveldb::Win32::Win32SequentialFile
SkipEmptyDataBlocksBackward	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SkipEmptyDataBlocksForward	./leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
SkipList	./leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	./leveldb/db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipMapTxEntry	./miner.cpp	/^bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)$/;"	f	class:BlockAssembler
SkipTest	./leveldb/db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb	file:
SkipToInitialBlock	./leveldb/db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
Sleep100ms	./bench/examples.cpp	/^static void Sleep100ms(benchmark::State& state)$/;"	f	file:
SleepForMicroseconds	./leveldb/include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	./leveldb/util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon8::PosixEnv
SleepForMicroseconds	./leveldb/util/env_win.cc	/^void Win32Env::SleepForMicroseconds( int micros )$/;"	f	class:leveldb::Win32::Win32Env
Slice	./leveldb/include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	./leveldb/include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	./leveldb/include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	./leveldb/include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	./leveldb/include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	./leveldb/db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	./leveldb/table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	./leveldb/db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	./leveldb/port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Compress	./leveldb/port/port_win.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	./leveldb/port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	./leveldb/port/port_win.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	./leveldb/port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	./leveldb/port/port_win.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	./leveldb/include/leveldb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	./leveldb/db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	./leveldb/db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	./leveldb/db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SocketEvents	./net.cpp	/^void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)$/;"	f	class:CConnman
SocketHandler	./net.cpp	/^void CConnman::SocketHandler()$/;"	f	class:CConnman
Socks5	./netbase.cpp	/^static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, const SOCKET& hSocket)$/;"	f	file:
Socks5ErrorString	./netbase.cpp	/^static std::string Socks5ErrorString(uint8_t err)$/;"	f	file:
SoftSetArg	./util/system.cpp	/^bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f	class:ArgsManager
SoftSetBoolArg	./util/system.cpp	/^bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f	class:ArgsManager
Solver	./script/standard.cpp	/^txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet)$/;"	f
SomeFileOverlapsRange	./leveldb/db/version_set.cc	/^bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SortForBlock	./miner.cpp	/^void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)$/;"	f	class:BlockAssembler
Span	./span.h	/^class Span$/;"	c
SpecialEnv	./leveldb/db/db_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	./leveldb/db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
SpendCoin	./coins.cpp	/^bool CCoinsViewCache::SpendCoin(const COutPoint &outpoint, Coin* moveout) {$/;"	f	class:CCoinsViewCache
SpendZeroConfChange	./qt/optionsmodel.h	/^        SpendZeroConfChange,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
SpendsCoinbase	./test/setup_common.h	/^    TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
SplashScreen	./qt/splashscreen.cpp	/^SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const NetworkStyle *networkStyle) :$/;"	f	class:SplashScreen
SplashScreen	./qt/splashscreen.h	/^class SplashScreen : public QWidget$/;"	c
Split	./script/descriptor.cpp	/^std::vector<Span<const char>> Split(const Span<const char>& sp, char sep)$/;"	f	namespace:__anon75
SplitHostPort	./util/strencodings.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
SplitTorReplyLine	./torcontrol.cpp	/^std::pair<std::string,std::string> SplitTorReplyLine(const std::string &s)$/;"	f
SplitWalletPath	./wallet/db.cpp	/^static void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename)$/;"	f	file:
Stacks	./script/sign.cpp	/^    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {$/;"	f	struct:__anon82::Stacks
Stacks	./script/sign.cpp	/^struct Stacks$/;"	s	namespace:__anon82	file:
StandardDeviation	./leveldb/util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Standard_Queue	./test/checkqueue_tests.cpp	/^typedef CCheckQueue<FakeCheck> Standard_Queue;$/;"	t	file:
Start	./index/base.cpp	/^void BaseIndex::Start()$/;"	f	class:BaseIndex
Start	./leveldb/db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon19::Stats
Start	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	./net.cpp	/^bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)$/;"	f	class:CConnman
StartAtStartup	./qt/optionsmodel.h	/^        StartAtStartup,         \/\/ bool$/;"	e	enum:OptionsModel::OptionID
StartBlock	./leveldb/table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartHTTPRPC	./httprpc.cpp	/^bool StartHTTPRPC()$/;"	f
StartHTTPServer	./httpserver.cpp	/^void StartHTTPServer()$/;"	f
StartMapPort	./net.cpp	/^void StartMapPort()$/;"	f
StartPhase	./leveldb/db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartREST	./rest.cpp	/^void StartREST()$/;"	f
StartRPC	./rpc/server.cpp	/^void StartRPC()$/;"	f
StartReadingAt	./leveldb/db/log_test.cc	/^  void StartReadingAt(uint64_t initial_offset) {$/;"	f	class:leveldb::log::LogTest
StartShutdown	./shutdown.cpp	/^void StartShutdown()$/;"	f
StartThread	./leveldb/include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	./leveldb/util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon8::PosixEnv
StartThread	./leveldb/util/env_win.cc	/^void Win32Env::StartThread( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
StartThreadState	./leveldb/util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon8::__anon9	file:
StartThreadWrapper	./leveldb/util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon8
StartTorControl	./torcontrol.cpp	/^void StartTorControl()$/;"	f
StartWallets	./wallet/load.cpp	/^void StartWallets(CScheduler& scheduler)$/;"	f
Started	./rpc/server.cpp	/^    boost::signals2::signal<void ()> Started;$/;"	m	struct:CRPCSignals	file:
StartupShortcutPath	./qt/guiutil.cpp	/^fs::path static StartupShortcutPath()$/;"	f	namespace:GUIUtil
State	./bench/bench.h	/^    State(std::string name, uint64_t num_evals, double num_iters, Printer& printer) : m_name(name), m_num_iters_left(0), m_num_iters(num_iters), m_num_evals(num_evals)$/;"	f	class:benchmark::State
State	./bench/bench.h	/^class State$/;"	c	namespace:benchmark
State	./leveldb/db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	./leveldb/db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
State	./leveldb/util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb	file:
Stats	./leveldb/db/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon19::Stats
Stats	./leveldb/db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon19	file:
Stats	./support/lockedpool.h	/^    struct Stats$/;"	s	class:Arena
Stats	./support/lockedpool.h	/^    struct Stats$/;"	s	class:LockedPool
Status	./leveldb/include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	./leveldb/include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	./leveldb/include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	./leveldb/util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
Status	./qt/intro.cpp	/^    enum Status {$/;"	g	class:FreespaceChecker	file:
Status	./qt/transactionrecord.h	/^    enum Status {$/;"	g	class:TransactionStatus
Status	./qt/transactiontablemodel.h	/^        Status = 0,$/;"	e	enum:TransactionTableModel::ColumnIndex
StatusCode	./qt/walletmodel.h	/^    enum StatusCode \/\/ Returned by sendCoins$/;"	g	class:WalletModel
StatusRole	./qt/transactiontablemodel.h	/^        StatusRole,$/;"	e	enum:TransactionTableModel::RoleIndex
StdoutPrinter	./leveldb/db/leveldbutil.cc	/^class StdoutPrinter : public WritableFile {$/;"	c	namespace:leveldb::__anon31	file:
StepErrorCheck	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static void StepErrorCheck(int status) {$/;"	f	file:
Stop	./index/base.cpp	/^void BaseIndex::Stop()$/;"	f	class:BaseIndex
Stop	./leveldb/db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon19::Stats
Stop	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	./net.cpp	/^void CConnman::Stop()$/;"	f	class:CConnman
StopHTTPRPC	./httprpc.cpp	/^void StopHTTPRPC()$/;"	f
StopHTTPServer	./httpserver.cpp	/^void StopHTTPServer()$/;"	f
StopMapPort	./net.cpp	/^void StopMapPort()$/;"	f
StopREST	./rest.cpp	/^void StopREST()$/;"	f
StopRPC	./rpc/server.cpp	/^void StopRPC()$/;"	f
StopTorControl	./torcontrol.cpp	/^void StopTorControl()$/;"	f
StopWallets	./wallet/load.cpp	/^void StopWallets()$/;"	f
Stopped	./rpc/server.cpp	/^    boost::signals2::signal<void ()> Stopped;$/;"	m	struct:CRPCSignals	file:
StringContentsSerializer	./test/dbwrapper_tests.cpp	/^    StringContentsSerializer() {}$/;"	f	struct:StringContentsSerializer
StringContentsSerializer	./test/dbwrapper_tests.cpp	/^    explicit StringContentsSerializer(const std::string& inp) : str(inp) {}$/;"	f	struct:StringContentsSerializer
StringContentsSerializer	./test/dbwrapper_tests.cpp	/^struct StringContentsSerializer {$/;"	s	file:
StringDest	./leveldb/db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringForFeeEstimateHorizon	./policy/fees.cpp	/^std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {$/;"	f
StringForFeeReason	./util/fees.cpp	/^std::string StringForFeeReason(FeeReason reason) {$/;"	f
StringMap	./wallet/wallet.h	/^    typedef std::map<std::string, std::string> StringMap;$/;"	t	class:CAddressBookData
StringSink	./leveldb/table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	./leveldb/db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	./leveldb/db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	./leveldb/table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	./leveldb/table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb	file:
SubBytes	./crypto/ctaes/ctaes.c	/^static void SubBytes(AES_state *s, int inv) {$/;"	f	file:
Subversion	./qt/peertablemodel.h	/^        Subversion = 5$/;"	e	enum:PeerTableModel::ColumnIndex
SwapRandom	./addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
SweepBanned	./banman.cpp	/^void BanMan::SweepBanned()$/;"	f	class:BanMan
Sync	./dbwrapper.h	/^    bool Sync()$/;"	f	class:CDBWrapper
Sync	./leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Sync() {$/;"	f	class:leveldb::TestWritableFile
Sync	./leveldb/db/leveldbutil.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon31::StdoutPrinter
Sync	./leveldb/db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon35::WritableFileImpl
Sync	./leveldb/table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	./leveldb/util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
Sync	./leveldb/util/env_win.cc	/^Status Win32WritableFile::Sync()$/;"	f	class:leveldb::Win32::Win32WritableFile
SyncDir	./leveldb/db/fault_injection_test.cc	/^Status SyncDir(const std::string& dir) {$/;"	f	namespace:leveldb::__anon20
SyncDirIfManifest	./leveldb/util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
SyncMetaData	./wallet/wallet.cpp	/^void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)$/;"	f	class:CWallet
SyncParent	./leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::SyncParent() {$/;"	f	class:leveldb::TestWritableFile
SyncTransaction	./wallet/wallet.cpp	/^void CWallet::SyncTransaction(const CTransactionRef& ptx, const uint256& block_hash, int posInBlock, bool update_tx) {$/;"	f	class:CWallet
SyncWithValidationInterfaceQueue	./validationinterface.cpp	/^void SyncWithValidationInterfaceQueue() {$/;"	f
T	./test/hash_tests.cpp	/^#define T(/;"	d	file:
T	./test/hash_tests.cpp	/^#undef T$/;"	d	file:
TABLE_TEST	./leveldb/table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
TAB_CONSOLE	./qt/rpcconsole.h	/^        TAB_CONSOLE = 1,$/;"	e	enum:RPCConsole::TabTypes
TAB_GRAPH	./qt/rpcconsole.h	/^        TAB_GRAPH = 2,$/;"	e	enum:RPCConsole::TabTypes
TAB_INFO	./qt/rpcconsole.h	/^        TAB_INFO = 0,$/;"	e	enum:RPCConsole::TabTypes
TAB_MAIN	./qt/optionsdialog.h	/^        TAB_MAIN,$/;"	e	enum:OptionsDialog::Tab
TAB_NETWORK	./qt/optionsdialog.h	/^        TAB_NETWORK,$/;"	e	enum:OptionsDialog::Tab
TAB_PEERS	./qt/rpcconsole.h	/^        TAB_PEERS = 3$/;"	e	enum:RPCConsole::TabTypes
TCONCAT	./leveldb/util/testharness.h	/^#define TCONCAT(/;"	d
TCONCAT1	./leveldb/util/testharness.h	/^#define TCONCAT1(/;"	d
TEST	./leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadAll) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadHalf) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileRepair) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetEncountersEmptyLevel) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetMemUsage) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_a) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_b) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, Locking) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, ManifestWriteError) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, ManualCompaction) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, MissingSSTFile) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, NonWritableFileSystem) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, RepeatedWritesToSameKey) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, StillReadSST) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/db_test.cc	/^TEST(DBTest, WriteSyncError) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestNoLogReuse) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestWithLogReuse) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, BadLengthAtEndIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, MissingLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, OpenForAppend) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, PartialLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadEnd) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadInitialOffsetIntoBlockPadding) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadPastEnd) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondStart) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadStart) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdStart) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, SkipIntoMultiRecord) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecordIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	./leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, LargeManifestCompacted) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, LogFileReuse) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, ManifestReused) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, MultipleLogFiles) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, MultipleMemTables) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, NoLogFiles) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	./leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	./leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	./leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	./leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	./leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	./leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	./leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	./leveldb/issues/issue178_test.cc	/^TEST(Issue178, Test) {$/;"	f	namespace:__anon34
TEST	./leveldb/issues/issue200_test.cc	/^TEST(Issue200, Test) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, Empty) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(Harness, ZeroRestartPointsInBlock) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	./leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, Prune) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/cache_test.cc	/^TEST(CacheTest, UseExceedsCacheSize) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, EncodingOutput) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	./leveldb/util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	./leveldb/util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	./leveldb/util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	./leveldb/util/env_posix_test.cc	/^TEST(EnvPosixTest, TestOpenOnRead) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/env_test.cc	/^TEST(EnvTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/env_test.cc	/^TEST(EnvTest, RunMany) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/env_test.cc	/^TEST(EnvTest, StartThread) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/hash_test.cc	/^TEST(HASH, SignedUnsignedIssue) {$/;"	f	namespace:leveldb
TEST	./leveldb/util/testharness.h	/^#define TEST(/;"	d
TESTDEFS	./Makefile	/^TESTDEFS =  -DBOOST_TEST_DYN_LINK$/;"	m
TESTHARNESS	./leveldb/Makefile	/^TESTHARNESS := $(STATIC_OUTDIR)\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTNET	./chainparamsbase.cpp	/^const std::string CBaseChainParams::TESTNET = "test";$/;"	m	class:CBaseChainParams	file:
TESTNET	./chainparamsbase.h	/^    static const std::string TESTNET;$/;"	m	class:CBaseChainParams
TESTS	./Makefile	/^TESTS = $(am__EXEEXT_8)$/;"	m
TESTS	./leveldb/Makefile	/^TESTS = \\$/;"	m
TESTS	./secp256k1/Makefile	/^TESTS = $(am__EXEEXT_2) $(am__EXEEXT_3)$/;"	m
TESTS	./univalue/Makefile	/^TESTS = test\/object$(EXEEXT) test\/unitester$(EXEEXT) \\$/;"	m
TESTUTIL	./leveldb/Makefile	/^TESTUTIL := $(STATIC_OUTDIR)\/util\/testutil.o$/;"	m
TEST_BINARY	./Makefile	/^TEST_BINARY = test\/test_bitcoin$(EXEEXT)$/;"	m
TEST_CompactMemTable	./leveldb/db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	./leveldb/db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_DATA_DIR	./univalue/Makefile	/^TEST_DATA_DIR = test$/;"	m
TEST_EXTENSIONS	./Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_EXTENSIONS	./secp256k1/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_EXTENSIONS	./univalue/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_FAILURE	./secp256k1/src/util.h	/^#define TEST_FAILURE(/;"	d
TEST_FILES	./univalue/Makefile	/^TEST_FILES = \\$/;"	m
TEST_LOGS	./Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOGS	./secp256k1/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOGS	./univalue/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOG_COMPILE	./Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_COMPILE	./secp256k1/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_COMPILE	./univalue/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_DRIVER	./Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_LOG_DRIVER	./secp256k1/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_LOG_DRIVER	./univalue/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_MaxNextLevelOverlappingBytes	./leveldb/db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	./leveldb/db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
TEST_SRCDIR	./Makefile	/^TEST_SRCDIR = test$/;"	m
TEST_SUITE_LOG	./Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_SUITE_LOG	./secp256k1/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_SUITE_LOG	./univalue/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_THREAD_NAME_BASE	./test/util_threadnames_tests.cpp	/^const std::string TEST_THREAD_NAME_BASE = "test_thread.";$/;"	v
THIN_SP_CP	./qt/bitcoinunits.h	/^#define THIN_SP_CP /;"	d
THIN_SP_HTML	./qt/bitcoinunits.h	/^#define THIN_SP_HTML /;"	d
THIN_SP_UTF8	./qt/bitcoinunits.h	/^#define THIN_SP_UTF8 /;"	d
TIFFCP	./Makefile	/^TIFFCP = $/;"	m
TIMEOUT_INTERVAL	./net.h	/^static const int TIMEOUT_INTERVAL = 20 * 60;$/;"	v
TIMESTAMP_MIN	./wallet/rpcdump.cpp	/^static const int64_t TIMESTAMP_MIN = 0;$/;"	v	file:
TIMESTAMP_WINDOW	./chain.h	/^static constexpr int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;$/;"	v
TINYFORMAT_ARGTYPES	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES(/;"	d
TINYFORMAT_ARGTYPES_1	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_1 /;"	d
TINYFORMAT_ARGTYPES_10	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_10 /;"	d
TINYFORMAT_ARGTYPES_11	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_11 /;"	d
TINYFORMAT_ARGTYPES_12	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_12 /;"	d
TINYFORMAT_ARGTYPES_13	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_13 /;"	d
TINYFORMAT_ARGTYPES_14	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_14 /;"	d
TINYFORMAT_ARGTYPES_15	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_15 /;"	d
TINYFORMAT_ARGTYPES_16	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_16 /;"	d
TINYFORMAT_ARGTYPES_2	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_2 /;"	d
TINYFORMAT_ARGTYPES_3	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_3 /;"	d
TINYFORMAT_ARGTYPES_4	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_4 /;"	d
TINYFORMAT_ARGTYPES_5	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_5 /;"	d
TINYFORMAT_ARGTYPES_6	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_6 /;"	d
TINYFORMAT_ARGTYPES_7	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_7 /;"	d
TINYFORMAT_ARGTYPES_8	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_8 /;"	d
TINYFORMAT_ARGTYPES_9	./tinyformat.h	/^#define TINYFORMAT_ARGTYPES_9 /;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	./tinyformat.h	/^#define TINYFORMAT_DEFINE_FORMATVALUE_CHAR(/;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	./tinyformat.h	/^#undef TINYFORMAT_DEFINE_FORMATVALUE_CHAR$/;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	./tinyformat.h	/^#define TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(/;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	./tinyformat.h	/^#undef TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR$/;"	d
TINYFORMAT_ERROR	./tinyformat.h	/^#   define TINYFORMAT_ERROR(/;"	d
TINYFORMAT_ERROR	./tinyformat.h	/^#define TINYFORMAT_ERROR(/;"	d
TINYFORMAT_FOREACH_ARGNUM	./tinyformat.h	/^#define TINYFORMAT_FOREACH_ARGNUM(/;"	d
TINYFORMAT_HIDDEN	./tinyformat.h	/^#   define TINYFORMAT_HIDDEN /;"	d
TINYFORMAT_HIDDEN	./tinyformat.h	/^#   define TINYFORMAT_HIDDEN$/;"	d
TINYFORMAT_H_INCLUDED	./tinyformat.h	/^#define TINYFORMAT_H_INCLUDED$/;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	./tinyformat.h	/^#define TINYFORMAT_MAKE_FORMAT_FUNCS(/;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	./tinyformat.h	/^#undef TINYFORMAT_MAKE_FORMAT_FUNCS$/;"	d
TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND	./tinyformat.h	/^#   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND$/;"	d
TINYFORMAT_PASSARGS	./tinyformat.h	/^#define TINYFORMAT_PASSARGS(/;"	d
TINYFORMAT_PASSARGS_1	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_1 /;"	d
TINYFORMAT_PASSARGS_10	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_10 /;"	d
TINYFORMAT_PASSARGS_11	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_11 /;"	d
TINYFORMAT_PASSARGS_12	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_12 /;"	d
TINYFORMAT_PASSARGS_13	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_13 /;"	d
TINYFORMAT_PASSARGS_14	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_14 /;"	d
TINYFORMAT_PASSARGS_15	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_15 /;"	d
TINYFORMAT_PASSARGS_16	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_16 /;"	d
TINYFORMAT_PASSARGS_2	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_2 /;"	d
TINYFORMAT_PASSARGS_3	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_3 /;"	d
TINYFORMAT_PASSARGS_4	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_4 /;"	d
TINYFORMAT_PASSARGS_5	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_5 /;"	d
TINYFORMAT_PASSARGS_6	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_6 /;"	d
TINYFORMAT_PASSARGS_7	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_7 /;"	d
TINYFORMAT_PASSARGS_8	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_8 /;"	d
TINYFORMAT_PASSARGS_9	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_9 /;"	d
TINYFORMAT_PASSARGS_TAIL	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL(/;"	d
TINYFORMAT_PASSARGS_TAIL_1	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_1$/;"	d
TINYFORMAT_PASSARGS_TAIL_10	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_10 /;"	d
TINYFORMAT_PASSARGS_TAIL_11	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_11 /;"	d
TINYFORMAT_PASSARGS_TAIL_12	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_12 /;"	d
TINYFORMAT_PASSARGS_TAIL_13	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_13 /;"	d
TINYFORMAT_PASSARGS_TAIL_14	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_14 /;"	d
TINYFORMAT_PASSARGS_TAIL_15	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_15 /;"	d
TINYFORMAT_PASSARGS_TAIL_16	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_16 /;"	d
TINYFORMAT_PASSARGS_TAIL_2	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_2 /;"	d
TINYFORMAT_PASSARGS_TAIL_3	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_3 /;"	d
TINYFORMAT_PASSARGS_TAIL_4	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_4 /;"	d
TINYFORMAT_PASSARGS_TAIL_5	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_5 /;"	d
TINYFORMAT_PASSARGS_TAIL_6	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_6 /;"	d
TINYFORMAT_PASSARGS_TAIL_7	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_7 /;"	d
TINYFORMAT_PASSARGS_TAIL_8	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_8 /;"	d
TINYFORMAT_PASSARGS_TAIL_9	./tinyformat.h	/^#define TINYFORMAT_PASSARGS_TAIL_9 /;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	./tinyformat.h	/^#       define TINYFORMAT_USE_VARIADIC_TEMPLATES$/;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	./tinyformat.h	/^#define TINYFORMAT_USE_VARIADIC_TEMPLATES$/;"	d
TINYFORMAT_VARARGS	./tinyformat.h	/^#define TINYFORMAT_VARARGS(/;"	d
TINYFORMAT_VARARGS_1	./tinyformat.h	/^#define TINYFORMAT_VARARGS_1 /;"	d
TINYFORMAT_VARARGS_10	./tinyformat.h	/^#define TINYFORMAT_VARARGS_10 /;"	d
TINYFORMAT_VARARGS_11	./tinyformat.h	/^#define TINYFORMAT_VARARGS_11 /;"	d
TINYFORMAT_VARARGS_12	./tinyformat.h	/^#define TINYFORMAT_VARARGS_12 /;"	d
TINYFORMAT_VARARGS_13	./tinyformat.h	/^#define TINYFORMAT_VARARGS_13 /;"	d
TINYFORMAT_VARARGS_14	./tinyformat.h	/^#define TINYFORMAT_VARARGS_14 /;"	d
TINYFORMAT_VARARGS_15	./tinyformat.h	/^#define TINYFORMAT_VARARGS_15 /;"	d
TINYFORMAT_VARARGS_16	./tinyformat.h	/^#define TINYFORMAT_VARARGS_16 /;"	d
TINYFORMAT_VARARGS_2	./tinyformat.h	/^#define TINYFORMAT_VARARGS_2 /;"	d
TINYFORMAT_VARARGS_3	./tinyformat.h	/^#define TINYFORMAT_VARARGS_3 /;"	d
TINYFORMAT_VARARGS_4	./tinyformat.h	/^#define TINYFORMAT_VARARGS_4 /;"	d
TINYFORMAT_VARARGS_5	./tinyformat.h	/^#define TINYFORMAT_VARARGS_5 /;"	d
TINYFORMAT_VARARGS_6	./tinyformat.h	/^#define TINYFORMAT_VARARGS_6 /;"	d
TINYFORMAT_VARARGS_7	./tinyformat.h	/^#define TINYFORMAT_VARARGS_7 /;"	d
TINYFORMAT_VARARGS_8	./tinyformat.h	/^#define TINYFORMAT_VARARGS_8 /;"	d
TINYFORMAT_VARARGS_9	./tinyformat.h	/^#define TINYFORMAT_VARARGS_9 /;"	d
TOOLTIP_WRAP_THRESHOLD	./qt/guiconstants.h	/^static const int TOOLTIP_WRAP_THRESHOLD = 80;$/;"	v
TOO_NEW	./wallet/walletdb.h	/^    TOO_NEW,$/;"	m	class:DBErrors
TOP	./script/descriptor.cpp	/^    TOP,$/;"	m	class:__anon75::ParseScriptContext	file:
TOP	./script/ismine.cpp	/^    TOP = 0,        \/\/!< scriptPubKey execution$/;"	m	class:__anon85::IsMineSigVersion	file:
TOP	./wallet/rpcdump.cpp	/^    TOP, \/\/!< Top-level scriptPubKey$/;"	m	class:ScriptContext	file:
TOR_COOKIE_SIZE	./torcontrol.cpp	/^static const int TOR_COOKIE_SIZE = 32;$/;"	v	file:
TOR_NONCE_SIZE	./torcontrol.cpp	/^static const int TOR_NONCE_SIZE = 32;$/;"	v	file:
TOR_SAFE_CLIENTKEY	./torcontrol.cpp	/^static const std::string TOR_SAFE_CLIENTKEY = "Tor safe cookie authentication controller-to-server hash";$/;"	v	file:
TOR_SAFE_SERVERKEY	./torcontrol.cpp	/^static const std::string TOR_SAFE_SERVERKEY = "Tor safe cookie authentication server-to-controller hash";$/;"	v	file:
TOTAL_TRIES	./wallet/coinselection.cpp	/^static const size_t TOTAL_TRIES = 100000;$/;"	v	file:
TRY_LOCK	./sync.h	/^#define TRY_LOCK(/;"	d
TTLEXPIRED	./netbase.cpp	/^    TTLEXPIRED = 0x06,       \/\/!< TTL expired$/;"	e	enum:uint8_t	file:
TX	./protocol.cpp	/^const char *TX="tx";$/;"	m	namespace:NetMsgType	file:
TX_CONFLICT	./consensus/validation.h	/^    TX_CONFLICT,$/;"	m	class:ValidationInvalidReason
TX_MEMPOOL_POLICY	./consensus/validation.h	/^    TX_MEMPOOL_POLICY,        \/\/!< violated mempool's fee\/size\/descendant\/RBF\/etc limits$/;"	m	class:ValidationInvalidReason
TX_MISSING_INPUTS	./consensus/validation.h	/^    TX_MISSING_INPUTS,        \/\/!< a transaction was missing some of its inputs$/;"	m	class:ValidationInvalidReason
TX_MULTISIG	./script/standard.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	./script/standard.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_NOT_STANDARD	./consensus/validation.h	/^    TX_NOT_STANDARD,          \/\/!< didn't meet our local policy rules$/;"	m	class:ValidationInvalidReason
TX_NULL_DATA	./script/standard.h	/^    TX_NULL_DATA, \/\/!< unspendable OP_RETURN script that carries data$/;"	e	enum:txnouttype
TX_PREMATURE_SPEND	./consensus/validation.h	/^    TX_PREMATURE_SPEND,       \/\/!< transaction spends a coinbase too early, or violates locktime\/sequence locks$/;"	m	class:ValidationInvalidReason
TX_PUBKEY	./script/standard.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	./script/standard.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	./script/standard.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
TX_WITNESS_MUTATED	./consensus/validation.h	/^    TX_WITNESS_MUTATED,$/;"	m	class:ValidationInvalidReason
TX_WITNESS_UNKNOWN	./script/standard.h	/^    TX_WITNESS_UNKNOWN, \/\/!< Only for Witness versions not already defined above$/;"	e	enum:txnouttype
TX_WITNESS_V0_KEYHASH	./script/standard.h	/^    TX_WITNESS_V0_KEYHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V0_SCRIPTHASH	./script/standard.h	/^    TX_WITNESS_V0_SCRIPTHASH,$/;"	e	enum:txnouttype
TYPE	./qt/transactionfilterproxy.h	/^    static quint32 TYPE(int type) { return 1<<type; }$/;"	f	class:TransactionFilterProxy
TYPE_COLUMN_WIDTH	./qt/transactionview.h	/^        TYPE_COLUMN_WIDTH = 113,$/;"	e	enum:TransactionView::ColumnWidths
Tab	./qt/optionsdialog.h	/^    enum Tab {$/;"	g	class:OptionsDialog
TabTypes	./qt/rpcconsole.h	/^    enum TabTypes {$/;"	g	class:RPCConsole
Table	./leveldb/db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	./leveldb/include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	./leveldb/include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	./leveldb/db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	./leveldb/include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	./leveldb/table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	./leveldb/db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	./leveldb/db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	./leveldb/table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	./leveldb/table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	./leveldb/db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	./leveldb/db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon30::Repairer	file:
TableTest	./leveldb/table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb	file:
TableViewLastColumnResizingFixer	./qt/guiutil.cpp	/^TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth, QObject *parent) :$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
TableViewLastColumnResizingFixer	./qt/guiutil.h	/^    class TableViewLastColumnResizingFixer: public QObject$/;"	c	namespace:GUIUtil
Tabs	./qt/addressbookpage.h	/^    enum Tabs {$/;"	g	class:AddressBookPage
Tag	./leveldb/db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TargetFileSize	./leveldb/db/version_set.cc	/^static size_t TargetFileSize(const Options* options) {$/;"	f	namespace:leveldb
TempFileName	./leveldb/db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	./leveldb/table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	./leveldb/util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon5	file:
Test	./test/script_tests.cpp	/^    TestBuilder& Test()$/;"	f	class:__anon58::TestBuilder
TestAES256	./test/crypto_tests.cpp	/^static void TestAES256(const std::string &hexkey, const std::string &hexin, const std::string &hexout)$/;"	f	file:
TestAES256CBC	./test/crypto_tests.cpp	/^static void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)$/;"	f	file:
TestActive	./test/versionbits_tests.cpp	/^    VersionBitsTester& TestActive() {$/;"	f	class:VersionBitsTester
TestAddAddressesToSendBook	./qt/test/addressbooktests.cpp	/^void TestAddAddressesToSendBook()$/;"	f	namespace:__anon62
TestAlwaysActiveConditionChecker	./test/versionbits_tests.cpp	/^class TestAlwaysActiveConditionChecker : public TestConditionChecker$/;"	c	file:
TestArgs	./leveldb/table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestArgsManager	./test/util_tests.cpp	/^    TestArgsManager() { m_network_only_args.clear(); }$/;"	f	struct:TestArgsManager
TestArgsManager	./test/util_tests.cpp	/^struct TestArgsManager : public ArgsManager$/;"	s	file:
TestBackwardScan	./leveldb/table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestBlockSubsidyHalvings	./test/validation_tests.cpp	/^static void TestBlockSubsidyHalvings(const Consensus::Params& consensusParams)$/;"	f	file:
TestBlockSubsidyHalvings	./test/validation_tests.cpp	/^static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)$/;"	f	file:
TestBlockValidity	./validation.cpp	/^bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
TestBuilder	./test/script_tests.cpp	/^    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WitnessMode::NONE, int witnessversion = 0, CAmount nValue_ = 0) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK), nValue(nValue_)$/;"	f	class:__anon58::TestBuilder
TestBuilder	./test/script_tests.cpp	/^class TestBuilder$/;"	c	namespace:__anon58	file:
TestChaCha20	./test/crypto_tests.cpp	/^static void TestChaCha20(const std::string &hex_message, const std::string &hexkey, uint64_t nonce, uint64_t seek, const std::string& hexout)$/;"	f	file:
TestChain100Setup	./test/setup_common.cpp	/^TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)$/;"	f	class:TestChain100Setup
TestChain100Setup	./test/setup_common.h	/^struct TestChain100Setup : public TestingSetup {$/;"	s
TestConditionChecker	./test/versionbits_tests.cpp	/^class TestConditionChecker : public AbstractThresholdConditionChecker$/;"	c	file:
TestCrypter	./wallet/test/wallet_crypto_tests.cpp	/^class TestCrypter$/;"	c	file:
TestDecode	./test/compress_tests.cpp	/^bool static TestDecode(uint64_t in) {$/;"	f	file:
TestDecrypt	./wallet/test/wallet_crypto_tests.cpp	/^static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\$/;"	f	class:TestCrypter
TestDefined	./test/versionbits_tests.cpp	/^    VersionBitsTester& TestDefined() {$/;"	f	class:VersionBitsTester
TestDerivation	./test/bip32_tests.cpp	/^struct TestDerivation {$/;"	s	file:
TestDifficulty	./test/blockchain_tests.cpp	/^static void TestDifficulty(uint32_t nbits, double expected_difficulty)$/;"	f	file:
TestEncode	./test/compress_tests.cpp	/^bool static TestEncode(uint64_t in) {$/;"	f	file:
TestEncodeDecode	./leveldb/db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestEncrypt	./wallet/test/wallet_crypto_tests.cpp	/^static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\$/;"	f	class:TestCrypter
TestEncryptSingle	./wallet/test/wallet_crypto_tests.cpp	/^static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,$/;"	f	class:TestCrypter
TestFailed	./test/versionbits_tests.cpp	/^    VersionBitsTester& TestFailed() {$/;"	f	class:VersionBitsTester
TestForwardScan	./leveldb/table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestGUI	./qt/test/wallettests.cpp	/^void TestGUI()$/;"	f	namespace:__anon63
TestHKDF_SHA256_32	./test/crypto_tests.cpp	/^static void TestHKDF_SHA256_32(const std::string &ikm_hex, const std::string &salt_hex, const std::string &info_hex, const std::string &okm_check_hex) {$/;"	f	file:
TestHMACSHA256	./test/crypto_tests.cpp	/^static void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f	file:
TestHMACSHA512	./test/crypto_tests.cpp	/^static void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f	file:
TestHashFilter	./leveldb/table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb	file:
TestHeaderAndShortIDs	./test/blockencodings_tests.cpp	/^    explicit TestHeaderAndShortIDs(const CBlock& block) :$/;"	f	class:TestHeaderAndShortIDs
TestHeaderAndShortIDs	./test/blockencodings_tests.cpp	/^    explicit TestHeaderAndShortIDs(const CBlockHeaderAndShortTxIDs& orig) {$/;"	f	class:TestHeaderAndShortIDs
TestHeaderAndShortIDs	./test/blockencodings_tests.cpp	/^class TestHeaderAndShortIDs {$/;"	c	file:
TestKey	./leveldb/db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestLockPointValidity	./validation.cpp	/^bool TestLockPointValidity(const LockPoints* lp)$/;"	f
TestLockedIn	./test/versionbits_tests.cpp	/^    VersionBitsTester& TestLockedIn() {$/;"	f	class:VersionBitsTester
TestLockedPageAllocator	./test/allocator_tests.cpp	/^    TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}$/;"	f	class:TestLockedPageAllocator
TestLockedPageAllocator	./test/allocator_tests.cpp	/^class TestLockedPageAllocator: public LockedPageAllocator$/;"	c	file:
TestMemPoolEntryHelper	./test/setup_common.h	/^    TestMemPoolEntryHelper() :$/;"	f	struct:TestMemPoolEntryHelper
TestMemPoolEntryHelper	./test/setup_common.h	/^struct TestMemPoolEntryHelper$/;"	s
TestOtherProcess	./test/util_tests.cpp	/^static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)$/;"	f	file:
TestOtherThread	./test/util_tests.cpp	/^static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)$/;"	f	file:
TestPackage	./miner.cpp	/^bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const$/;"	f	class:BlockAssembler
TestPackageTransactions	./miner.cpp	/^bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)$/;"	f	class:BlockAssembler
TestPair	./test/compress_tests.cpp	/^bool static TestPair(uint64_t dec, uint64_t enc) {$/;"	f	file:
TestParse	./test/netbase_tests.cpp	/^bool static TestParse(std::string src, std::string canon)$/;"	f	file:
TestPassphrase	./wallet/test/wallet_crypto_tests.cpp	/^static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,$/;"	f	class:TestCrypter
TestPassphraseSingle	./wallet/test/wallet_crypto_tests.cpp	/^static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,$/;"	f	class:TestCrypter
TestPoly1305	./test/crypto_tests.cpp	/^static void TestPoly1305(const std::string &hexmessage, const std::string &hexkey, const std::string& hextag)$/;"	f	file:
TestPotentialDeadLockDetected	./test/sync_tests.cpp	/^void TestPotentialDeadLockDetected(MutexType& mutex1, MutexType& mutex2)$/;"	f	namespace:__anon57
TestRIPEMD160	./test/crypto_tests.cpp	/^static void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}$/;"	f	file:
TestRandomAccess	./leveldb/table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestRpcCommand	./qt/test/apptests.cpp	/^void TestRpcCommand(RPCConsole* console)$/;"	f	namespace:__anon64
TestSHA1	./test/crypto_tests.cpp	/^static void TestSHA1(const std::string &in, const std::string &hexout) { TestVector(CSHA1(), in, ParseHex(hexout));}$/;"	f	file:
TestSHA256	./test/crypto_tests.cpp	/^static void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(CSHA256(), in, ParseHex(hexout));}$/;"	f	file:
TestSHA512	./test/crypto_tests.cpp	/^static void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}$/;"	f	file:
TestSplitHost	./test/netbase_tests.cpp	/^bool static TestSplitHost(std::string test, std::string host, int port)$/;"	f	file:
TestStarted	./test/versionbits_tests.cpp	/^    VersionBitsTester& TestStarted() {$/;"	f	class:VersionBitsTester
TestState	./leveldb/db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	./leveldb/db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestStateSinceHeight	./test/versionbits_tests.cpp	/^    VersionBitsTester& TestStateSinceHeight(int height) {$/;"	f	class:VersionBitsTester
TestSubscriber	./test/validation_block_tests.cpp	/^    explicit TestSubscriber(uint256 tip) : m_expected_tip(tip) {}$/;"	f	struct:TestSubscriber
TestSubscriber	./test/validation_block_tests.cpp	/^struct TestSubscriber : public CValidationInterface {$/;"	s	file:
TestTime	./test/versionbits_tests.cpp	/^static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }$/;"	f	file:
TestType	./leveldb/table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb	file:
TestVector	./test/bip32_tests.cpp	/^    explicit TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}$/;"	f	struct:TestVector
TestVector	./test/bip32_tests.cpp	/^struct TestVector {$/;"	s	file:
TestVector	./test/crypto_tests.cpp	/^static void TestVector(const Hasher &h, const In &in, const Out &out) {$/;"	f	file:
TestWritableFile	./leveldb/db/fault_injection_test.cc	/^TestWritableFile::TestWritableFile(const FileState& state,$/;"	f	class:leveldb::TestWritableFile
TestWritableFile	./leveldb/db/fault_injection_test.cc	/^class TestWritableFile : public WritableFile {$/;"	c	namespace:leveldb	file:
Tester	./leveldb/util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	./leveldb/util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
TestingSetup	./test/setup_common.cpp	/^TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)$/;"	f	class:TestingSetup
TestingSetup	./test/setup_common.h	/^struct TestingSetup : public BasicTestingSetup {$/;"	s
TextColor	./qt/platformstyle.h	/^    QColor TextColor() const { return textColor; }$/;"	f	class:PlatformStyle
TextColorIcon	./qt/platformstyle.cpp	/^QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const$/;"	f	class:PlatformStyle
TextColorIcon	./qt/platformstyle.cpp	/^QIcon PlatformStyle::TextColorIcon(const QString& filename) const$/;"	f	class:PlatformStyle
ThirdPartyTxUrls	./qt/optionsmodel.h	/^        ThirdPartyTxUrls,       \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ThisMonth	./qt/transactionview.h	/^        ThisMonth,$/;"	e	enum:TransactionView::DateEnum
ThisWeek	./qt/transactionview.h	/^        ThisWeek,$/;"	e	enum:TransactionView::DateEnum
ThisYear	./qt/transactionview.h	/^        ThisYear,$/;"	e	enum:TransactionView::DateEnum
Thread	./checkqueue.h	/^    void Thread()$/;"	f	class:CCheckQueue
ThreadArg	./leveldb/db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	./leveldb/db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadBody	./leveldb/util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadDNSAddressSeed	./net.cpp	/^void CConnman::ThreadDNSAddressSeed()$/;"	f	class:CConnman
ThreadGetInternalName	./util/threadnames.cpp	/^const std::string& util::ThreadGetInternalName() { return empty_string; }$/;"	f	class:util
ThreadGetInternalName	./util/threadnames.cpp	/^const std::string& util::ThreadGetInternalName() { return g_thread_name; }$/;"	f	class:util
ThreadHTTP	./httpserver.cpp	/^static bool ThreadHTTP(struct event_base* base)$/;"	f	file:
ThreadImport	./init.cpp	/^static void ThreadImport(std::vector<fs::path> vImportFiles)$/;"	f	file:
ThreadMapPort	./net.cpp	/^static void ThreadMapPort()$/;"	f	file:
ThreadMessageHandler	./net.cpp	/^void CConnman::ThreadMessageHandler()$/;"	f	class:CConnman
ThreadOpenAddedConnections	./net.cpp	/^void CConnman::ThreadOpenAddedConnections()$/;"	f	class:CConnman
ThreadOpenConnections	./net.cpp	/^void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)$/;"	f	class:CConnman
ThreadRename	./util/threadnames.cpp	/^void util::ThreadRename(std::string&& name)$/;"	f	class:util
ThreadSafeMessageBox	./qt/bitcoingui.cpp	/^static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
ThreadSafeMessageBox	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::last_value<bool>> ThreadSafeMessageBox;$/;"	m	struct:UISignals	file:
ThreadSafeMessageBox	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);$/;"	v
ThreadSafeMessageBox	./ui_interface.cpp	/^bool CClientUIInterface::ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style); }$/;"	f	class:CClientUIInterface
ThreadSafeQuestion	./ui_interface.cpp	/^    boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::last_value<bool>> ThreadSafeQuestion;$/;"	m	struct:UISignals	file:
ThreadSafeQuestion	./ui_interface.cpp	/^ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);$/;"	v
ThreadSafeQuestion	./ui_interface.cpp	/^bool CClientUIInterface::ThreadSafeQuestion(const std::string& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style); }$/;"	f	class:CClientUIInterface
ThreadScriptCheck	./validation.cpp	/^void ThreadScriptCheck(int worker_num) {$/;"	f
ThreadSocketHandler	./net.cpp	/^void CConnman::ThreadSocketHandler()$/;"	f	class:CConnman
ThreadState	./leveldb/db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon19::ThreadState
ThreadState	./leveldb/db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon19	file:
ThreadSync	./index/base.cpp	/^void BaseIndex::ThreadSync()$/;"	f	class:BaseIndex
ThreadsScriptVerif	./qt/optionsmodel.h	/^        ThreadsScriptVerif,     \/\/ int$/;"	e	enum:OptionsModel::OptionID
ThresholdConditionCache	./versionbits.h	/^typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;$/;"	t
ThresholdState	./versionbits.h	/^enum class ThresholdState {$/;"	c
Time	./test/setup_common.h	/^    TestMemPoolEntryHelper &Time(int64_t _time) { nTime = _time; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
Timeout	./netbase.cpp	/^    Timeout,$/;"	m	class:IntrRecvError	file:
TimingResistantEqual	./util/strencodings.h	/^bool TimingResistantEqual(const T& a, const T& b)$/;"	f
Tip	./chain.h	/^    CBlockIndex *Tip() const {$/;"	f	class:CChain
Tip	./test/versionbits_tests.cpp	/^    CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : nullptr; }$/;"	f	class:VersionBitsTester
TmpDir	./leveldb/util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToAddress	./qt/transactiontablemodel.h	/^        ToAddress = 4,$/;"	e	enum:TransactionTableModel::ColumnIndex
ToByteVector	./script/script.h	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToDescriptionString	./rpc/util.cpp	/^std::string RPCArg::ToDescriptionString() const$/;"	f	class:RPCArg
ToDescriptionString	./rpc/util.cpp	/^std::string RPCExamples::ToDescriptionString() const$/;"	f	class:RPCExamples
ToDescriptionString	./rpc/util.cpp	/^std::string RPCResults::ToDescriptionString() const$/;"	f	class:RPCResults
ToLower	./util/strencodings.h	/^constexpr char ToLower(char c)$/;"	f
ToMemPool	./test/txvalidationcache_tests.cpp	/^ToMemPool(const CMutableTransaction& tx)$/;"	f	file:
ToNarrowPath	./leveldb/util/env_win.cc	/^void ToNarrowPath(const std::wstring& value, std::string& target) {$/;"	f	namespace:leveldb::Win32
ToString	./arith_uint256.cpp	/^std::string base_uint<BITS>::ToString() const$/;"	f	class:base_uint
ToString	./chain.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	./chain.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	./flatfile.cpp	/^std::string FlatFilePos::ToString() const$/;"	f	class:FlatFilePos
ToString	./leveldb/include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	./leveldb/table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	./leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	./leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	./leveldb/util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	./leveldb/util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
ToString	./netaddress.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	./netaddress.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	./netaddress.cpp	/^std::string CSubNet::ToString() const$/;"	f	class:CSubNet
ToString	./policy/feerate.cpp	/^std::string CFeeRate::ToString() const$/;"	f	class:CFeeRate
ToString	./primitives/block.cpp	/^std::string CBlock::ToString() const$/;"	f	class:CBlock
ToString	./primitives/transaction.cpp	/^std::string COutPoint::ToString() const$/;"	f	class:COutPoint
ToString	./primitives/transaction.cpp	/^std::string CTransaction::ToString() const$/;"	f	class:CTransaction
ToString	./primitives/transaction.cpp	/^std::string CTxIn::ToString() const$/;"	f	class:CTxIn
ToString	./primitives/transaction.cpp	/^std::string CTxOut::ToString() const$/;"	f	class:CTxOut
ToString	./protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	./rpc/util.cpp	/^    std::string ToString() const$/;"	f	struct:Sections
ToString	./rpc/util.cpp	/^std::string RPCArg::ToString(const bool oneline) const$/;"	f	class:RPCArg
ToString	./rpc/util.cpp	/^std::string RPCHelpMan::ToString() const$/;"	f	class:RPCHelpMan
ToString	./script/script.cpp	/^std::string CScriptWitness::ToString() const$/;"	f	class:CScriptWitness
ToString	./sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	./uint256.cpp	/^std::string base_blob<BITS>::ToString() const$/;"	f	class:base_blob
ToString	./validation.cpp	/^std::string CBlockFileInfo::ToString() const$/;"	f	class:CBlockFileInfo
ToString	./wallet/wallet.cpp	/^std::string COutput::ToString() const$/;"	f	class:COutput
ToStringExtra	./script/descriptor.cpp	/^    virtual std::string ToStringExtra() const { return ""; }$/;"	f	class:__anon75::DescriptorImpl
ToStringHelper	./script/descriptor.cpp	/^    bool ToStringHelper(const SigningProvider* arg, std::string& out, bool priv) const$/;"	f	class:__anon75::DescriptorImpl
ToStringIP	./netaddress.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	./netaddress.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringObj	./rpc/util.cpp	/^std::string RPCArg::ToStringObj(const bool oneline) const$/;"	f	class:RPCArg
ToStringPort	./netaddress.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
ToUpper	./util/strencodings.h	/^constexpr char ToUpper(char c)$/;"	f
ToWidePath	./leveldb/util/env_win.cc	/^void ToWidePath(const std::string& value, std::wstring& target) {$/;"	f	namespace:leveldb::Win32
Today	./qt/transactionview.h	/^        Today,$/;"	e	enum:TransactionView::DateEnum
ToolTipToRichTextFilter	./qt/guiutil.cpp	/^ToolTipToRichTextFilter::ToolTipToRichTextFilter(int _size_threshold, QObject *parent) :$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
ToolTipToRichTextFilter	./qt/guiutil.h	/^    class ToolTipToRichTextFilter : public QObject$/;"	c	namespace:GUIUtil
TopUpKeyPool	./wallet/wallet.cpp	/^bool CWallet::TopUpKeyPool(unsigned int kpSize)$/;"	f	class:CWallet
TorControlConnection	./torcontrol.cpp	/^TorControlConnection::TorControlConnection(struct event_base *_base):$/;"	f	class:TorControlConnection
TorControlConnection	./torcontrol.cpp	/^class TorControlConnection$/;"	c	file:
TorControlReply	./torcontrol.cpp	/^    TorControlReply() { Clear(); }$/;"	f	class:TorControlReply
TorControlReply	./torcontrol.cpp	/^class TorControlReply$/;"	c	file:
TorControlThread	./torcontrol.cpp	/^static void TorControlThread()$/;"	f	file:
TorController	./torcontrol.cpp	/^TorController::TorController(struct event_base* _base, const std::string& _target):$/;"	f	class:TorController
TorController	./torcontrol.cpp	/^class TorController$/;"	c	file:
TotalCharge	./leveldb/util/cache.cc	/^  size_t TotalCharge() const {$/;"	f	class:leveldb::__anon4::LRUCache
TotalCharge	./leveldb/util/cache.cc	/^  virtual size_t TotalCharge() const {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
TotalFileSize	./leveldb/db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalTableFiles	./leveldb/db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TraceThread	./util/system.h	/^template <typename Callable> void TraceThread(const char* name,  Callable func)$/;"	f
TrafficGraphWidget	./qt/trafficgraphwidget.cpp	/^TrafficGraphWidget::TrafficGraphWidget(QWidget *parent) :$/;"	f	class:TrafficGraphWidget
TrafficGraphWidget	./qt/trafficgraphwidget.h	/^class TrafficGraphWidget : public QWidget$/;"	c
TransactionAddedToMempool	./interfaces/chain.h	/^        virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}$/;"	f	class:interfaces::Chain::Notifications
TransactionAddedToMempool	./validationinterface.cpp	/^    boost::signals2::scoped_connection TransactionAddedToMempool;$/;"	m	struct:ValidationInterfaceConnections	file:
TransactionAddedToMempool	./validationinterface.cpp	/^    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;$/;"	m	struct:MainSignalsInstance	file:
TransactionAddedToMempool	./validationinterface.cpp	/^void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {$/;"	f	class:CMainSignals
TransactionAddedToMempool	./validationinterface.h	/^    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}$/;"	f	class:CValidationInterface
TransactionAddedToMempool	./wallet/wallet.cpp	/^void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {$/;"	f	class:CWallet
TransactionAddedToMempool	./zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx)$/;"	f	class:CZMQNotificationInterface
TransactionCanBeAbandoned	./wallet/wallet.cpp	/^bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const$/;"	f	class:CWallet
TransactionCanBeBumped	./wallet/feebumper.cpp	/^bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)$/;"	f	namespace:feebumper
TransactionChangeType	./wallet/wallet.cpp	/^OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend)$/;"	f	class:CWallet
TransactionCommitFailed	./qt/walletmodel.h	/^        TransactionCommitFailed,$/;"	e	enum:WalletModel::StatusCode
TransactionCompressor	./blockencodings.h	/^    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}$/;"	f	struct:TransactionCompressor
TransactionCompressor	./blockencodings.h	/^struct TransactionCompressor {$/;"	s
TransactionCreationFailed	./qt/walletmodel.h	/^        TransactionCreationFailed, \/\/ Error returned when wallet is still locked$/;"	e	enum:WalletModel::StatusCode
TransactionDesc	./qt/transactiondesc.h	/^    TransactionDesc() {}$/;"	f	class:TransactionDesc
TransactionDesc	./qt/transactiondesc.h	/^class TransactionDesc: public QObject$/;"	c
TransactionDescDialog	./qt/transactiondescdialog.cpp	/^TransactionDescDialog::TransactionDescDialog(const QModelIndex &idx, QWidget *parent) :$/;"	f	class:TransactionDescDialog
TransactionDescDialog	./qt/transactiondescdialog.h	/^class TransactionDescDialog : public QDialog$/;"	c
TransactionError	./util/error.h	/^enum class TransactionError {$/;"	c
TransactionErrorString	./util/error.cpp	/^std::string TransactionErrorString(const TransactionError err)$/;"	f
TransactionFilterProxy	./qt/transactionfilterproxy.cpp	/^TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :$/;"	f	class:TransactionFilterProxy
TransactionFilterProxy	./qt/transactionfilterproxy.h	/^class TransactionFilterProxy : public QSortFilterProxyModel$/;"	c
TransactionNotification	./qt/transactiontablemodel.cpp	/^    TransactionNotification() {}$/;"	f	struct:TransactionNotification
TransactionNotification	./qt/transactiontablemodel.cpp	/^    TransactionNotification(uint256 _hash, ChangeType _status, bool _showTransaction):$/;"	f	struct:TransactionNotification
TransactionNotification	./qt/transactiontablemodel.cpp	/^struct TransactionNotification$/;"	s	file:
TransactionRecord	./qt/transactionrecord.h	/^    TransactionRecord():$/;"	f	class:TransactionRecord
TransactionRecord	./qt/transactionrecord.h	/^    TransactionRecord(uint256 _hash, qint64 _time):$/;"	f	class:TransactionRecord
TransactionRecord	./qt/transactionrecord.h	/^    TransactionRecord(uint256 _hash, qint64 _time,$/;"	f	class:TransactionRecord
TransactionRecord	./qt/transactionrecord.h	/^class TransactionRecord$/;"	c
TransactionRemovedFromMempool	./interfaces/chain.h	/^        virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}$/;"	f	class:interfaces::Chain::Notifications
TransactionRemovedFromMempool	./validationinterface.cpp	/^    boost::signals2::scoped_connection TransactionRemovedFromMempool;$/;"	m	struct:ValidationInterfaceConnections	file:
TransactionRemovedFromMempool	./validationinterface.cpp	/^    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;$/;"	m	struct:MainSignalsInstance	file:
TransactionRemovedFromMempool	./validationinterface.h	/^    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}$/;"	f	class:CValidationInterface
TransactionRemovedFromMempool	./wallet/wallet.cpp	/^void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {$/;"	f	class:CWallet
TransactionStatus	./qt/transactionrecord.h	/^    TransactionStatus():$/;"	f	class:TransactionStatus
TransactionStatus	./qt/transactionrecord.h	/^class TransactionStatus$/;"	c
TransactionTableModel	./qt/transactiontablemodel.cpp	/^TransactionTableModel::TransactionTableModel(const PlatformStyle *_platformStyle, WalletModel *parent):$/;"	f	class:TransactionTableModel
TransactionTableModel	./qt/transactiontablemodel.h	/^class TransactionTableModel : public QAbstractTableModel$/;"	c
TransactionTablePriv	./qt/transactiontablemodel.cpp	/^    explicit TransactionTablePriv(TransactionTableModel *_parent) :$/;"	f	class:TransactionTablePriv
TransactionTablePriv	./qt/transactiontablemodel.cpp	/^class TransactionTablePriv$/;"	c	file:
TransactionView	./qt/transactionview.cpp	/^TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :$/;"	f	class:TransactionView
TransactionView	./qt/transactionview.h	/^class TransactionView : public QWidget$/;"	c
Transform	./crypto/ripemd160.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon42::ripemd160
Transform	./crypto/sha1.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon38::sha1
Transform	./crypto/sha256.cpp	/^TransformType Transform = sha256::Transform;$/;"	m	namespace:__anon40	file:
Transform	./crypto/sha256.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:__anon40::sha256
Transform	./crypto/sha256_shani.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:sha256_shani
Transform	./crypto/sha256_sse4.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:sha256_sse4
Transform	./crypto/sha512.cpp	/^void Transform(uint64_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon39::sha512
TransformD64	./crypto/sha256.cpp	/^TransformD64Type TransformD64 = sha256::TransformD64;$/;"	m	namespace:__anon40	file:
TransformD64	./crypto/sha256.cpp	/^void TransformD64(unsigned char* out, const unsigned char* in)$/;"	f	namespace:__anon40::sha256
TransformD64Type	./crypto/sha256.cpp	/^typedef void (*TransformD64Type)(unsigned char*, const unsigned char*);$/;"	t	namespace:__anon40	file:
TransformD64Wrapper	./crypto/sha256.cpp	/^void TransformD64Wrapper(unsigned char* out, const unsigned char* in)$/;"	f	namespace:__anon40
TransformD64_2way	./crypto/sha256.cpp	/^TransformD64Type TransformD64_2way = nullptr;$/;"	m	namespace:__anon40	file:
TransformD64_4way	./crypto/sha256.cpp	/^TransformD64Type TransformD64_4way = nullptr;$/;"	m	namespace:__anon40	file:
TransformD64_8way	./crypto/sha256.cpp	/^TransformD64Type TransformD64_8way = nullptr;$/;"	m	namespace:__anon40	file:
TransformType	./crypto/sha256.cpp	/^typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);$/;"	t	namespace:__anon40	file:
Transform_2way	./crypto/sha256_shani.cpp	/^void Transform_2way(unsigned char* out, const unsigned char* in)$/;"	f	namespace:sha256d64_shani
Transform_4way	./crypto/sha256_sse41.cpp	/^void Transform_4way(unsigned char* out, const unsigned char* in)$/;"	f	namespace:sha256d64_sse41
Transform_8way	./crypto/sha256_avx2.cpp	/^void Transform_8way(unsigned char* out, const unsigned char* in)$/;"	f	namespace:sha256d64_avx2
TraverseAndBuild	./merkleblock.cpp	/^void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) {$/;"	f	class:CPartialMerkleTree
TraverseAndExtract	./merkleblock.cpp	/^uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
Trig	./bench/examples.cpp	/^static void Trig(benchmark::State& state)$/;"	f	file:
TrimSpace	./leveldb/db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon19
TrimSpace	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon32
TrimSpace	./leveldb/doc/bench/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon33
TrimString	./util/system.cpp	/^static std::string TrimString(const std::string& str, const std::string& pattern)$/;"	f	file:
TrimToSize	./txmempool.cpp	/^void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {$/;"	f	class:CTxMemPool
Truncate	./leveldb/db/fault_injection_test.cc	/^Status Truncate(const std::string& filename, uint64_t length) {$/;"	f	namespace:leveldb::__anon20
TruncateFile	./util/system.cpp	/^bool TruncateFile(FILE *file, unsigned int length) {$/;"	f
TryAcquire	./sync.h	/^    bool TryAcquire()$/;"	f	class:CSemaphoreGrant
TryCreateDirectories	./util/system.cpp	/^bool TryCreateDirectories(const fs::path& p)$/;"	f
TryEnter	./sync.h	/^    bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:UniqueLock
TryLock	./fs.cpp	/^bool FileLock::TryLock()$/;"	f	class:fsbridge::FileLock
TryReopen	./leveldb/db/corruption_test.cc	/^  Status TryReopen() {$/;"	f	class:leveldb::CorruptionTest
TryReopen	./leveldb/db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	./leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon17::TwoLevelIterator
TwoLevelIterator	./leveldb/table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon17	file:
TxConfirmStats	./policy/fees.cpp	/^TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,$/;"	f	class:TxConfirmStats
TxConfirmStats	./policy/fees.cpp	/^class TxConfirmStats$/;"	c	file:
TxData	./chainparams.h	/^    const ChainTxData& TxData() const { return chainTxData; }$/;"	f	class:CChainParams
TxDownloadState	./net_processing.cpp	/^    struct TxDownloadState {$/;"	s	struct:__anon89::CNodeState	file:
TxHashRole	./qt/coincontroldialog.h	/^        TxHashRole = Qt::UserRole,$/;"	e	enum:CoinControlDialog::__anon72
TxHashRole	./qt/transactiontablemodel.h	/^        TxHashRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxHexRole	./qt/transactiontablemodel.h	/^        TxHexRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxInErrorToJSON	./rpc/rawtransaction_util.cpp	/^static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)$/;"	f	file:
TxInUndoDeserializer	./undo.h	/^    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}$/;"	f	class:TxInUndoDeserializer
TxInUndoDeserializer	./undo.h	/^class TxInUndoDeserializer$/;"	c
TxInUndoSerializer	./undo.h	/^    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}$/;"	f	class:TxInUndoSerializer
TxInUndoSerializer	./undo.h	/^class TxInUndoSerializer$/;"	c
TxIndex	./index/txindex.cpp	/^TxIndex::TxIndex(size_t n_cache_size, bool f_memory, bool f_wipe)$/;"	f	class:TxIndex
TxInputStream	./script/bitcoinconsensus.cpp	/^    TxInputStream(int nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :$/;"	f	class:__anon81::TxInputStream
TxInputStream	./script/bitcoinconsensus.cpp	/^class TxInputStream$/;"	c	namespace:__anon81	file:
TxItems	./wallet/wallet.h	/^    typedef std::multimap<int64_t, CWalletTx*> TxItems;$/;"	t	class:final
TxLessThan	./qt/transactiontablemodel.cpp	/^struct TxLessThan$/;"	s	file:
TxLinks	./txmempool.h	/^    struct TxLinks {$/;"	s	class:CTxMemPool
TxMempoolInfo	./txmempool.h	/^struct TxMempoolInfo$/;"	s
TxPlainTextRole	./qt/transactiontablemodel.h	/^        TxPlainTextRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxRelayMayResultInDisconnect	./net_processing.cpp	/^static bool TxRelayMayResultInDisconnect(const CValidationState& state)$/;"	f	file:
TxSpends	./wallet/wallet.h	/^    typedef std::multimap<COutPoint, uint256> TxSpends;$/;"	t	class:final
TxStatsInfo	./policy/fees.h	/^        TxStatsInfo() : blockHeight(0), bucketIndex(0) {}$/;"	f	struct:FeeEstimateHorizon::CBlockPolicyEstimator::TxStatsInfo
TxStatsInfo	./policy/fees.h	/^    struct TxStatsInfo$/;"	s	class:FeeEstimateHorizon::CBlockPolicyEstimator
TxToJSON	./rpc/rawtransaction.cpp	/^static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)$/;"	f	file:
TxToUniv	./core_write.cpp	/^void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags)$/;"	f
TxViewDelegate	./qt/overviewpage.cpp	/^    explicit TxViewDelegate(const PlatformStyle *_platformStyle, QObject *parent=nullptr):$/;"	f	class:TxViewDelegate
TxViewDelegate	./qt/overviewpage.cpp	/^class TxViewDelegate : public QAbstractItemDelegate$/;"	c	file:
TxnAbort	./wallet/db.h	/^    bool TxnAbort()$/;"	f	class:BerkeleyBatch
TxnAbort	./wallet/walletdb.cpp	/^bool WalletBatch::TxnAbort()$/;"	f	class:WalletBatch
TxnBegin	./wallet/db.h	/^    DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)$/;"	f	class:BerkeleyEnvironment
TxnBegin	./wallet/db.h	/^    bool TxnBegin()$/;"	f	class:BerkeleyBatch
TxnBegin	./wallet/walletdb.cpp	/^bool WalletBatch::TxnBegin()$/;"	f	class:WalletBatch
TxnCommit	./wallet/db.h	/^    bool TxnCommit()$/;"	f	class:BerkeleyBatch
TxnCommit	./wallet/walletdb.cpp	/^bool WalletBatch::TxnCommit()$/;"	f	class:WalletBatch
Type	./qt/addresstablemodel.cpp	/^    enum Type {$/;"	g	struct:AddressTableEntry	file:
Type	./qt/transactionrecord.h	/^    enum Type$/;"	g	class:TransactionRecord
Type	./qt/transactiontablemodel.h	/^        Type = 3,$/;"	e	enum:TransactionTableModel::ColumnIndex
Type	./rpc/util.h	/^    enum class Type {$/;"	c	struct:RPCArg
TypeRole	./qt/addresstablemodel.h	/^        TypeRole = Qt::UserRole \/**< Type of address (#Send or #Receive) *\/$/;"	e	enum:AddressTableModel::RoleIndex
TypeRole	./qt/transactiontablemodel.h	/^        TypeRole = Qt::UserRole,$/;"	e	enum:TransactionTableModel::RoleIndex
UDP_ASSOCIATE	./netbase.cpp	/^    UDP_ASSOCIATE = 0x03$/;"	e	enum:uint8_t	file:
UIC	./Makefile	/^UIC = $/;"	m
UISignals	./ui_interface.cpp	/^struct UISignals {$/;"	s	file:
UNDEF	./rest.cpp	/^    UNDEF,$/;"	m	class:RetFormat	file:
UNDEFINED	./protocol.h	/^    UNDEFINED = 0,$/;"	e	enum:GetDataMsg
UNDOFILE_CHUNK_SIZE	./validation.h	/^static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; \/\/ 1 MiB$/;"	v
UNHARDENED	./script/descriptor.cpp	/^    UNHARDENED,$/;"	m	class:__anon75::DeriveType	file:
UNIVALUE_CFLAGS	./Makefile	/^UNIVALUE_CFLAGS = -I$(srcdir)\/univalue\/include$/;"	m
UNIVALUE_LIBS	./Makefile	/^UNIVALUE_LIBS = univalue\/libunivalue.la$/;"	m
UNIVALUE_UTFFILTER_H	./univalue/lib/univalue_utffilter.h	/^#define UNIVALUE_UTFFILTER_H$/;"	d
UNKNOWN	./httpserver.h	/^        UNKNOWN,$/;"	e	enum:HTTPRequest::RequestMethod
UNKNOWN	./policy/rbf.h	/^    UNKNOWN,$/;"	m	class:RBFTransactionState
UNKNOWN	./txmempool.h	/^    UNKNOWN = 0, \/\/!< Manually removed or unknown reason$/;"	m	class:MemPoolRemovalReason
UNLOCK_FUNCTION	./leveldb/port/thread_annotations.h	/^#define UNLOCK_FUNCTION(/;"	d
UNLOCK_FUNCTION	./leveldb/util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
UNLOCK_FUNCTION	./sync.h	/^    void unlock() UNLOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
UNLOCK_FUNCTION	./sync.h	/^    ~UniqueLock() UNLOCK_FUNCTION()$/;"	f	class:UniqueLock
UNLOCK_FUNCTION	./threadsafety.h	/^    ~LockAnnotation() UNLOCK_FUNCTION() {}$/;"	f	struct:LockAnnotation
UNLOCK_FUNCTION	./threadsafety.h	/^#define UNLOCK_FUNCTION(/;"	d
UNSET	./policy/fees.h	/^    UNSET,        \/\/!< Use default settings based on other criteria$/;"	m	class:FeeEstimateHorizon::FeeEstimateMode
UNSOLVABLE	./test/descriptor_tests.cpp	/^constexpr int UNSOLVABLE = 4; \/\/ This descriptor is not expected to be solvable$/;"	m	namespace:__anon56	file:
UNUSED	./qt/bitcoinstrings.cpp	/^#define UNUSED /;"	d	file:
UNUSED	./qt/bitcoinstrings.cpp	/^#define UNUSED$/;"	d	file:
UPDATER	./psbt.h	/^    UPDATER,$/;"	m	class:PSBTRole
UPPER_BOUND	./util/strencodings.cpp	/^static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;$/;"	v	file:
URI	./rpc/server.h	/^    std::string URI;$/;"	m	class:JSONRPCRequest
URITests	./qt/test/uritests.h	/^class URITests : public QObject$/;"	c
USER_ABORT	./wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	e	enum:final::ScanResult::__anon118
USER_PASS	./netbase.cpp	/^    USER_PASS = 0x02,     \/\/!< Username\/password$/;"	e	enum:uint8_t	file:
USE_ASM	./config/bitcoin-config.h	/^#define USE_ASM /;"	d
USE_ASM_X86_64	./secp256k1/src/basic-config.h	/^#undef USE_ASM_X86_64$/;"	d
USE_ASM_X86_64	./secp256k1/src/libsecp256k1-config.h	/^#define USE_ASM_X86_64 /;"	d
USE_BASIC_CONFIG	./secp256k1/src/gen_context.c	/^#define USE_BASIC_CONFIG /;"	d	file:
USE_ECMULT_STATIC_PRECOMPUTATION	./secp256k1/src/libsecp256k1-config.h	/^#define USE_ECMULT_STATIC_PRECOMPUTATION /;"	d
USE_ECMULT_STATIC_PRECOMPUTATION	./secp256k1/src/tests_exhaustive.c	/^#undef USE_ECMULT_STATIC_PRECOMPUTATION$/;"	d	file:
USE_ENDOMORPHISM	./secp256k1/src/basic-config.h	/^#undef USE_ENDOMORPHISM$/;"	d
USE_FIELD_10X26	./secp256k1/src/basic-config.h	/^#define USE_FIELD_10X26 /;"	d
USE_FIELD_10X26	./secp256k1/src/basic-config.h	/^#undef USE_FIELD_10X26$/;"	d
USE_FIELD_5X52	./secp256k1/src/basic-config.h	/^#undef USE_FIELD_5X52$/;"	d
USE_FIELD_5X52	./secp256k1/src/libsecp256k1-config.h	/^#define USE_FIELD_5X52 /;"	d
USE_FIELD_INV_BUILTIN	./secp256k1/src/basic-config.h	/^#define USE_FIELD_INV_BUILTIN /;"	d
USE_FIELD_INV_BUILTIN	./secp256k1/src/basic-config.h	/^#undef USE_FIELD_INV_BUILTIN$/;"	d
USE_FIELD_INV_BUILTIN	./secp256k1/src/libsecp256k1-config.h	/^#define USE_FIELD_INV_BUILTIN /;"	d
USE_FIELD_INV_NUM	./secp256k1/src/basic-config.h	/^#undef USE_FIELD_INV_NUM$/;"	d
USE_NUM_GMP	./secp256k1/src/basic-config.h	/^#undef USE_NUM_GMP$/;"	d
USE_NUM_NONE	./secp256k1/src/basic-config.h	/^#define USE_NUM_NONE /;"	d
USE_NUM_NONE	./secp256k1/src/basic-config.h	/^#undef USE_NUM_NONE$/;"	d
USE_NUM_NONE	./secp256k1/src/libsecp256k1-config.h	/^#define USE_NUM_NONE /;"	d
USE_POLL	./compat.h	/^#define USE_POLL$/;"	d
USE_QRCODE	./Makefile	/^USE_QRCODE = $/;"	m
USE_SCALAR_4X64	./secp256k1/src/basic-config.h	/^#undef USE_SCALAR_4X64$/;"	d
USE_SCALAR_4X64	./secp256k1/src/libsecp256k1-config.h	/^#define USE_SCALAR_4X64 /;"	d
USE_SCALAR_8X32	./secp256k1/src/basic-config.h	/^#define USE_SCALAR_8X32 /;"	d
USE_SCALAR_8X32	./secp256k1/src/basic-config.h	/^#undef USE_SCALAR_8X32$/;"	d
USE_SCALAR_INV_BUILTIN	./secp256k1/src/basic-config.h	/^#define USE_SCALAR_INV_BUILTIN /;"	d
USE_SCALAR_INV_BUILTIN	./secp256k1/src/basic-config.h	/^#undef USE_SCALAR_INV_BUILTIN$/;"	d
USE_SCALAR_INV_BUILTIN	./secp256k1/src/libsecp256k1-config.h	/^#define USE_SCALAR_INV_BUILTIN /;"	d
USE_SCALAR_INV_NUM	./secp256k1/src/basic-config.h	/^#undef USE_SCALAR_INV_NUM$/;"	d
USE_UPNP	./Makefile	/^USE_UPNP = $/;"	m
UTILS	./leveldb/Makefile	/^UTILS = \\$/;"	m
Ui	./qt/addressbookpage.h	/^namespace Ui {$/;"	n
Ui	./qt/askpassphrasedialog.h	/^namespace Ui {$/;"	n
Ui	./qt/coincontroldialog.h	/^namespace Ui {$/;"	n
Ui	./qt/editaddressdialog.h	/^namespace Ui {$/;"	n
Ui	./qt/intro.h	/^namespace Ui {$/;"	n
Ui	./qt/modaloverlay.h	/^namespace Ui {$/;"	n
Ui	./qt/openuridialog.h	/^namespace Ui {$/;"	n
Ui	./qt/optionsdialog.h	/^namespace Ui {$/;"	n
Ui	./qt/overviewpage.h	/^namespace Ui {$/;"	n
Ui	./qt/receivecoinsdialog.h	/^namespace Ui {$/;"	n
Ui	./qt/receiverequestdialog.h	/^namespace Ui {$/;"	n
Ui	./qt/rpcconsole.h	/^namespace Ui {$/;"	n
Ui	./qt/sendcoinsdialog.h	/^namespace Ui {$/;"	n
Ui	./qt/sendcoinsentry.h	/^namespace Ui {$/;"	n
Ui	./qt/signverifymessagedialog.h	/^namespace Ui {$/;"	n
Ui	./qt/transactiondescdialog.h	/^namespace Ui {$/;"	n
Ui	./qt/utilitydialog.h	/^namespace Ui {$/;"	n
UintToArith256	./arith_uint256.cpp	/^arith_uint256 UintToArith256(const uint256 &a)$/;"	f
UnSelect	./wallet/coincontrol.h	/^    void UnSelect(const COutPoint& output)$/;"	f	class:CCoinControl
UnSelectAll	./wallet/coincontrol.h	/^    void UnSelectAll()$/;"	f	class:CCoinControl
Unban	./banman.cpp	/^bool BanMan::Unban(const CNetAddr& net_addr)$/;"	f	class:BanMan
Unban	./banman.cpp	/^bool BanMan::Unban(const CSubNet& sub_net)$/;"	f	class:BanMan
Uncache	./coins.cpp	/^void CCoinsViewCache::Uncache(const COutPoint& hash)$/;"	f	class:CCoinsViewCache
Unconfirmed	./qt/transactionrecord.h	/^        Unconfirmed,        \/**< Not yet mined into a block **\/$/;"	e	enum:TransactionStatus::Status
UndoFileSeq	./validation.cpp	/^static FlatFileSeq UndoFileSeq()$/;"	f	file:
UndoReadFromDisk	./validation.cpp	/^bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)$/;"	f
UndoWriteToDisk	./validation.cpp	/^static bool UndoWriteToDisk(const CBlockUndo& blockundo, FlatFilePos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	file:
Unencrypted	./qt/walletmodel.h	/^        Unencrypted,  \/\/ !wallet->IsCrypted()$/;"	e	enum:WalletModel::EncryptionStatus
UniValue	./univalue/include/univalue.h	/^    UniValue() { typ = VNULL; }$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(UniValue::VType initialType, const std::string& initialStr = "") {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(bool val_) {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(const char *val_) {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(const std::string& val_) {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(double val_) {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(int val_) {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(int64_t val_) {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^    UniValue(uint64_t val_) {$/;"	f	class:UniValue
UniValue	./univalue/include/univalue.h	/^class UniValue {$/;"	c
UniValueType	./rpc/util.h	/^    UniValueType() : typeAny(true) {}$/;"	f	struct:UniValueType
UniValueType	./rpc/util.h	/^    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}$/;"	f	struct:UniValueType
UniValueType	./rpc/util.h	/^struct UniValueType {$/;"	s
Uniform	./leveldb/util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
UniqueCheck	./test/checkqueue_tests.cpp	/^    UniqueCheck() : check_id(0){};$/;"	f	struct:UniqueCheck
UniqueCheck	./test/checkqueue_tests.cpp	/^    UniqueCheck(size_t check_id_in) : check_id(check_id_in){};$/;"	f	struct:UniqueCheck
UniqueCheck	./test/checkqueue_tests.cpp	/^struct UniqueCheck {$/;"	s	file:
UniqueLock	./sync.h	/^class SCOPED_LOCKABLE UniqueLock : public Base$/;"	c
Unique_Queue	./test/checkqueue_tests.cpp	/^typedef CCheckQueue<UniqueCheck> Unique_Queue;$/;"	t	file:
Unit	./qt/bitcoinunits.h	/^    enum Unit$/;"	g	class:BitcoinUnits
UnitDisplayStatusBarControl	./qt/bitcoingui.cpp	/^UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :$/;"	f	class:UnitDisplayStatusBarControl
UnitDisplayStatusBarControl	./qt/bitcoingui.h	/^class UnitDisplayStatusBarControl : public QLabel$/;"	c
UnitRole	./qt/bitcoinunits.h	/^        UnitRole = Qt::UserRole$/;"	e	enum:BitcoinUnits::RoleIndex
UnlinkPrunedFiles	./validation.cpp	/^void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)$/;"	f
UnloadBlockIndex	./validation.cpp	/^void CChainState::UnloadBlockIndex() {$/;"	f	class:CChainState
UnloadBlockIndex	./validation.cpp	/^void UnloadBlockIndex()$/;"	f
UnloadWallet	./wallet/wallet.cpp	/^void UnloadWallet(std::shared_ptr<CWallet>&& wallet)$/;"	f
UnloadWallets	./wallet/load.cpp	/^void UnloadWallets()$/;"	f
Unlock	./leveldb/port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Unlock	./leveldb/port/port_win.cc	/^void Mutex::Unlock() {$/;"	f	class:leveldb::port::Mutex
Unlock	./qt/askpassphrasedialog.h	/^        Unlock,     \/**< Ask passphrase and unlock *\/$/;"	e	enum:AskPassphraseDialog::Mode
Unlock	./wallet/crypter.cpp	/^bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)$/;"	f	class:CCryptoKeyStore
Unlock	./wallet/wallet.cpp	/^bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)$/;"	f	class:CWallet
UnlockAllCoins	./wallet/wallet.cpp	/^void CWallet::UnlockAllCoins()$/;"	f	class:CWallet
UnlockCoin	./wallet/wallet.cpp	/^void CWallet::UnlockCoin(const COutPoint& output)$/;"	f	class:CWallet
UnlockCommand	./test/util_tests.cpp	/^static constexpr char UnlockCommand = 'U';$/;"	v	file:
UnlockContext	./qt/walletmodel.cpp	/^WalletModel::UnlockContext::UnlockContext(WalletModel *_wallet, bool _valid, bool _relock):$/;"	f	class:WalletModel::UnlockContext
UnlockContext	./qt/walletmodel.h	/^        UnlockContext(UnlockContext&& obj) { CopyFrom(std::move(obj)); }$/;"	f	class:WalletModel::UnlockContext
UnlockContext	./qt/walletmodel.h	/^    class UnlockContext$/;"	c	class:WalletModel
UnlockDirectory	./util/system.cpp	/^void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name)$/;"	f
UnlockFile	./leveldb/helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon35::InMemoryEnv
UnlockFile	./leveldb/include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	./leveldb/util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon8::PosixEnv
UnlockFile	./leveldb/util/env_win.cc	/^Status Win32Env::UnlockFile( FileLock* lock )$/;"	f	class:leveldb::Win32::Win32Env
Unlocked	./qt/walletmodel.h	/^        Unlocked      \/\/ wallet->IsCrypted() && !wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
Unmask	./leveldb/util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	./leveldb/db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	./leveldb/db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	./leveldb/helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon35::FileState
Unref	./leveldb/util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon4::LRUCache
UnrefEntry	./leveldb/db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
UnregisterAllValidationInterfaces	./validationinterface.cpp	/^void UnregisterAllValidationInterfaces() {$/;"	f
UnregisterBackgroundSignalScheduler	./validationinterface.cpp	/^void CMainSignals::UnregisterBackgroundSignalScheduler() {$/;"	f	class:CMainSignals
UnregisterHTTPHandler	./httpserver.cpp	/^void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)$/;"	f
UnregisterValidationInterface	./validationinterface.cpp	/^void UnregisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
UnregisterWithMempoolSignals	./validationinterface.cpp	/^void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {$/;"	f	class:CMainSignals
Unserialize	./addrman.h	/^    void Unserialize(Stream& s)$/;"	f	class:CAddrMan
Unserialize	./blockfilter.h	/^    void Unserialize(Stream& s) {$/;"	f	class:BlockFilter
Unserialize	./coins.h	/^    void Unserialize(Stream &s) {$/;"	f	class:Coin
Unserialize	./compressor.h	/^    void Unserialize(Stream &s) {$/;"	f	class:CScriptCompressor
Unserialize	./index/blockfilterindex.cpp	/^    void Unserialize(Stream& s)$/;"	f	struct:__anon120::DBHeightKey
Unserialize	./key.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtKey
Unserialize	./primitives/transaction.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:CMutableTransaction
Unserialize	./psbt.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:PSBTInput
Unserialize	./psbt.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:PSBTOutput
Unserialize	./psbt.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:PartiallySignedTransaction
Unserialize	./pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	class:CPubKey
Unserialize	./pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtPubKey
Unserialize	./serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CCompactSize
Unserialize	./serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CVarInt
Unserialize	./serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:BigEndian
Unserialize	./serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:LimitedString
Unserialize	./serialize.h	/^inline void Unserialize(Stream& is, T&& a)$/;"	f
Unserialize	./serialize.h	/^inline void Unserialize(Stream& is, prevector<N, T>& v)$/;"	f
Unserialize	./serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v)$/;"	f
Unserialize	./serialize.h	/^template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(CharCast(span.data()), span.size()); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } \/\/ TODO Get rid of bare char$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }$/;"	f
Unserialize	./serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }$/;"	f
Unserialize	./serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str)$/;"	f
Unserialize	./serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m)$/;"	f
Unserialize	./serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item)$/;"	f
Unserialize	./serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m)$/;"	f
Unserialize	./serialize.h	/^void Unserialize(Stream& is, std::shared_ptr<const T>& p)$/;"	f
Unserialize	./serialize.h	/^void Unserialize(Stream& is, std::unique_ptr<const T>& p)$/;"	f
Unserialize	./txdb.cpp	/^    void Unserialize(Stream &s) {$/;"	f	class:__anon122::CCoins
Unserialize	./txdb.cpp	/^    void Unserialize(Stream& s) {$/;"	f	struct:__anon121::CoinEntry
Unserialize	./uint256.h	/^    void Unserialize(Stream& s)$/;"	f	class:base_blob
Unserialize	./undo.h	/^    void Unserialize(Stream &s) {$/;"	f	class:TxInUndoDeserializer
Unserialize	./undo.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CTxUndo
Unserialize	./wallet/wallet.h	/^    void Unserialize(Stream& s)$/;"	f	class:CWalletTx
UnserializeFromVector	./script/sign.h	/^void UnserializeFromVector(Stream& s, X&... args)$/;"	f
UnserializeMany	./serialize.h	/^inline void UnserializeMany(Stream& s)$/;"	f
UnserializeMany	./serialize.h	/^inline void UnserializeMany(Stream& s, Arg&& arg, Args&&... args)$/;"	f
UnserializeTransaction	./primitives/transaction.h	/^inline void UnserializeTransaction(TxType& tx, Stream& s) {$/;"	f
Unserialize_impl	./serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)$/;"	f
Unserialize_impl	./serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)$/;"	f
Unserialize_impl	./serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)$/;"	f
Unserialize_impl	./serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)$/;"	f
UnsetWalletFlag	./wallet/wallet.cpp	/^void CWallet::UnsetWalletFlag(uint64_t flag)$/;"	f	class:CWallet
Unshuffle	./crypto/sha256_shani.cpp	/^void inline __attribute__((always_inline)) Unshuffle(__m128i& s0, __m128i& s1)$/;"	f	namespace:__anon43
UntrackFile	./leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::UntrackFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
Update	./leveldb/table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateActivationParametersFromArgs	./chainparams.cpp	/^void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)$/;"	f	class:CRegTestParams
UpdateAncestorState	./txmempool.cpp	/^void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)$/;"	f	class:CTxMemPoolEntry
UpdateAncestorsOf	./txmempool.cpp	/^void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateChild	./txmempool.cpp	/^void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)$/;"	f	class:CTxMemPool
UpdateChildrenForRemoval	./txmempool.cpp	/^void CTxMemPool::UpdateChildrenForRemoval(txiter it)$/;"	f	class:CTxMemPool
UpdateCoins	./validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txundo, int nHeight)$/;"	f
UpdateCoins	./validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)$/;"	f
UpdateDescendantState	./txmempool.cpp	/^void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)$/;"	f	class:CTxMemPoolEntry
UpdateEmptyFull	./bloom.cpp	/^void CBloomFilter::UpdateEmptyFull()$/;"	f	class:CBloomFilter
UpdateEntryForAncestors	./txmempool.cpp	/^void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateFeeDelta	./txmempool.cpp	/^void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)$/;"	f	class:CTxMemPoolEntry
UpdateForDescendants	./txmempool.cpp	/^void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)$/;"	f	class:CTxMemPool
UpdateForRemoveFromMempool	./txmempool.cpp	/^void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants)$/;"	f	class:CTxMemPool
UpdateHTTPServerLogging	./httpserver.cpp	/^bool UpdateHTTPServerLogging(bool enable) {$/;"	f
UpdateHeaderSyncLabel	./qt/modaloverlay.cpp	/^void ModalOverlay::UpdateHeaderSyncLabel() {$/;"	f	class:ModalOverlay
UpdateInput	./script/sign.cpp	/^void UpdateInput(CTxIn& input, const SignatureData& data)$/;"	f
UpdateLastBlockAnnounceTime	./net_processing.cpp	/^void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)$/;"	f
UpdateLockPoints	./txmempool.cpp	/^void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)$/;"	f	class:CTxMemPoolEntry
UpdateMovingAverages	./policy/fees.cpp	/^void TxConfirmStats::UpdateMovingAverages()$/;"	f	class:TxConfirmStats
UpdatePackagesForAdded	./miner.cpp	/^int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,$/;"	f	class:BlockAssembler
UpdateParent	./txmempool.cpp	/^void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)$/;"	f	class:CTxMemPool
UpdateStats	./leveldb/db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
UpdateTime	./miner.cpp	/^int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f
UpdateTimeFirstKey	./wallet/wallet.cpp	/^void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)$/;"	f	class:CWallet
UpdateTimer	./bench/bench.cpp	/^bool benchmark::State::UpdateTimer(const benchmark::time_point current_time)$/;"	f	class:benchmark::State
UpdateTip	./validation.cpp	/^void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainParams) {$/;"	f	file:
UpdateTransactionsFromBlock	./txmempool.cpp	/^void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)$/;"	f	class:CTxMemPool
UpdateUncommittedBlockStructures	./validation.cpp	/^void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
UpdateVersionBitsParameters	./chainparams.cpp	/^    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)$/;"	f	class:CRegTestParams
UpdatedBlockTip	./interfaces/chain.h	/^        virtual void UpdatedBlockTip() {}$/;"	f	class:interfaces::Chain::Notifications
UpdatedBlockTip	./net_processing.cpp	/^void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {$/;"	f	class:PeerLogicValidation
UpdatedBlockTip	./validationinterface.cpp	/^    boost::signals2::scoped_connection UpdatedBlockTip;$/;"	m	struct:ValidationInterfaceConnections	file:
UpdatedBlockTip	./validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;$/;"	m	struct:MainSignalsInstance	file:
UpdatedBlockTip	./validationinterface.cpp	/^void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {$/;"	f	class:CMainSignals
UpdatedBlockTip	./validationinterface.h	/^    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}$/;"	f	class:CValidationInterface
UpdatedBlockTip	./wallet/wallet.cpp	/^void CWallet::UpdatedBlockTip()$/;"	f	class:CWallet
UpdatedBlockTip	./zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)$/;"	f	class:CZMQNotificationInterface
Upgrade	./txdb.cpp	/^bool CCoinsViewDB::Upgrade() {$/;"	f	class:CCoinsViewDB
UpgradeKeyMetadata	./wallet/wallet.cpp	/^void CWallet::UpgradeKeyMetadata()$/;"	f	class:CWallet
Usage	./leveldb/db/leveldbutil.cc	/^static void Usage() {$/;"	f	file:
UserNotificationCenter	./qt/notificator.h	/^        UserNotificationCenter      \/**< Use the 10.8+ User Notification Center (Mac only) *\/$/;"	e	enum:Notificator::Mode
UtilBuildAddress	./test/net_tests.cpp	/^CNetAddr UtilBuildAddress(unsigned char p1, unsigned char p2, unsigned char p3, unsigned char p4)$/;"	f
UtxoData	./test/coins_tests.cpp	/^typedef std::map<COutPoint, std::tuple<CTransaction,CTxUndo,Coin>> UtxoData;$/;"	t	file:
VALUE1	./test/coins_tests.cpp	/^const static CAmount VALUE1 = 100;$/;"	v	file:
VALUE2	./test/coins_tests.cpp	/^const static CAmount VALUE2 = 200;$/;"	v	file:
VALUE3	./test/coins_tests.cpp	/^const static CAmount VALUE3 = 300;$/;"	v	file:
VAL_EXPECT_ERROR	./leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
VAL_EXPECT_NO_ERROR	./leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
VARINT	./serialize.h	/^#define VARINT(/;"	d
VARR	./univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VBDeploymentInfo	./versionbitsinfo.h	/^struct VBDeploymentInfo {$/;"	s
VBOOL	./univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VERACK	./protocol.cpp	/^const char *VERACK="verack";$/;"	m	namespace:NetMsgType	file:
VERIFY_BITS	./secp256k1/src/field_10x26_impl.h	/^#define VERIFY_BITS(/;"	d
VERIFY_BITS	./secp256k1/src/field_5x52_int128_impl.h	/^#define VERIFY_BITS(/;"	d
VERIFY_CHECK	./secp256k1/src/util.h	/^#define VERIFY_CHECK /;"	d
VERIFY_CHECK	./secp256k1/src/util.h	/^#define VERIFY_CHECK(/;"	d
VERIFY_OK	./wallet/db.h	/^    enum class VerifyResult { VERIFY_OK,$/;"	m	class:BerkeleyEnvironment::VerifyResult
VERIFY_SETUP	./secp256k1/src/util.h	/^#define VERIFY_SETUP(/;"	d
VERSION	./Makefile	/^VERSION = 0.18.99$/;"	m
VERSION	./protocol.cpp	/^const char *VERSION="version";$/;"	m	namespace:NetMsgType	file:
VERSION	./secp256k1/Makefile	/^VERSION = 0.1$/;"	m
VERSION	./secp256k1/src/libsecp256k1-config.h	/^#define VERSION /;"	d
VERSION	./univalue/Makefile	/^VERSION = 1.0.3$/;"	m
VERSION	./univalue/univalue-config.h	/^#define VERSION /;"	d
VERSIONBITS_LAST_OLD_BLOCK_VERSION	./versionbits.h	/^static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;$/;"	v
VERSIONBITS_NUM_BITS	./versionbits.h	/^static const int32_t VERSIONBITS_NUM_BITS = 29;$/;"	v
VERSIONBITS_TOP_BITS	./versionbits.h	/^static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;$/;"	v
VERSIONBITS_TOP_MASK	./versionbits.h	/^static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;$/;"	v
VERSION_BASIC	./wallet/walletdb.h	/^    static const int VERSION_BASIC=1;$/;"	m	class:CKeyMetadata
VERSION_HD_BASE	./wallet/walletdb.h	/^    static const int VERSION_HD_BASE        = 1;$/;"	m	class:CHDChain
VERSION_HD_CHAIN_SPLIT	./wallet/walletdb.h	/^    static const int VERSION_HD_CHAIN_SPLIT = 2;$/;"	m	class:CHDChain
VERSION_WITH_HDDATA	./wallet/walletdb.h	/^    static const int VERSION_WITH_HDDATA=10;$/;"	m	class:CKeyMetadata
VERSION_WITH_KEY_ORIGIN	./wallet/walletdb.h	/^    static const int VERSION_WITH_KEY_ORIGIN = 12;$/;"	m	class:CKeyMetadata
VG_CHECK	./secp256k1/src/tests.c	/^#  define VG_CHECK(/;"	d	file:
VG_UNDEF	./secp256k1/src/tests.c	/^#  define VG_UNDEF(/;"	d	file:
VNULL	./univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VNUM	./univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VOBJ	./univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VOutRole	./qt/coincontroldialog.h	/^        VOutRole$/;"	e	enum:CoinControlDialog::__anon72
VSTR	./univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VType	./univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	g	class:UniValue
Valid	./dbwrapper.cpp	/^bool CDBIterator::Valid() const { return piter->Valid(); }$/;"	f	class:CDBIterator
Valid	./leveldb/db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon29::DBIter
Valid	./leveldb/db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	./leveldb/db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	./leveldb/db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	./leveldb/db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	./leveldb/table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	./leveldb/table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon12::EmptyIterator
Valid	./leveldb/table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	./leveldb/table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon11::MergingIterator
Valid	./leveldb/table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	./leveldb/table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
Valid	./txdb.cpp	/^bool CCoinsViewDBCursor::Valid() const$/;"	f	class:CCoinsViewDBCursor
ValidSize	./pubkey.h	/^    bool static ValidSize(const std::vector<unsigned char> &vch) {$/;"	f	class:CPubKey
ValidationInterfaceConnections	./validationinterface.cpp	/^struct ValidationInterfaceConnections {$/;"	s	file:
ValidationInvalidReason	./consensus/validation.h	/^enum class ValidationInvalidReason {$/;"	c
Value	./leveldb/db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	./leveldb/db/fault_injection_test.cc	/^  Slice Value(int k, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Value	./leveldb/util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon4::ShardedLRUCache
Value	./leveldb/util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueFromAmount	./core_write.cpp	/^UniValue ValueFromAmount(const CAmount& amount)$/;"	f
ValueFromString	./test/rpc_tests.cpp	/^static UniValue ValueFromString(const std::string &str)$/;"	f	file:
ValueType	./leveldb/db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarIntMode	./serialize.h	/^enum class VarIntMode { DEFAULT, NONNEGATIVE_SIGNED };$/;"	c
VarintLength	./leveldb/util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
VectorReader	./streams.h	/^    VectorReader(int type, int version, const std::vector<unsigned char>& data, size_t pos)$/;"	f	class:VectorReader
VectorReader	./streams.h	/^    VectorReader(int type, int version, const std::vector<unsigned char>& data, size_t pos,$/;"	f	class:VectorReader
VectorReader	./streams.h	/^class VectorReader$/;"	c
Verify	./leveldb/db/fault_injection_test.cc	/^  Status Verify(int start_idx, int num_vals,$/;"	f	class:leveldb::FaultInjectionTest
Verify	./pubkey.cpp	/^bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {$/;"	f	class:CPubKey
Verify	./test/script_p2sh_tests.cpp	/^Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, ScriptError& err)$/;"	f	file:
Verify	./wallet/db.cpp	/^BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename)$/;"	f	class:BerkeleyEnvironment
Verify	./wallet/wallet.cpp	/^bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)$/;"	f	class:CWallet
VerifyChecksum	./bech32.cpp	/^bool VerifyChecksum(const std::string& hrp, const data& values)$/;"	f	namespace:__anon116
VerifyDB	./validation.cpp	/^bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)$/;"	f	class:CVerifyDB
VerifyDatabaseFile	./wallet/db.cpp	/^bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)$/;"	f	class:BerkeleyBatch
VerifyDatabaseFile	./wallet/walletdb.cpp	/^bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)$/;"	f	class:WalletBatch
VerifyEnvironment	./wallet/db.cpp	/^bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)$/;"	f	class:BerkeleyBatch
VerifyEnvironment	./wallet/walletdb.cpp	/^bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr)$/;"	f	class:WalletBatch
VerifyPubKey	./key.cpp	/^bool CKey::VerifyPubKey(const CPubKey& pubkey) const {$/;"	f	class:CKey
VerifyResult	./wallet/db.h	/^    enum class VerifyResult { VERIFY_OK,$/;"	c	class:BerkeleyEnvironment
VerifyScript	./script/interpreter.cpp	/^bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f
VerifyScriptBench	./bench/verify_script.cpp	/^static void VerifyScriptBench(benchmark::State& state)$/;"	f	file:
VerifySignature	./script/interpreter.cpp	/^bool GenericTransactionSignatureChecker<T>::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:GenericTransactionSignatureChecker
VerifySignature	./script/sigcache.cpp	/^bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:CachingTransactionSignatureChecker
VerifyWallets	./wallet/load.cpp	/^bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)$/;"	f
VerifyWithFlag	./test/sigopcount_tests.cpp	/^static ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags)$/;"	f	file:
VerifyWitnessProgram	./script/interpreter.cpp	/^static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f	file:
Version	./leveldb/db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	./leveldb/db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionBitsCache	./versionbits.h	/^struct VersionBitsCache$/;"	s
VersionBitsConditionChecker	./versionbits.cpp	/^    explicit VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}$/;"	f	class:__anon126::VersionBitsConditionChecker
VersionBitsConditionChecker	./versionbits.cpp	/^class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {$/;"	c	namespace:__anon126	file:
VersionBitsDeploymentInfo	./versionbitsinfo.cpp	/^const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {$/;"	v	typeref:struct:VBDeploymentInfo
VersionBitsMask	./versionbits.cpp	/^uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsState	./versionbits.cpp	/^ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsStateSinceHeight	./versionbits.cpp	/^int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsStatistics	./versionbits.cpp	/^BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTester	./test/versionbits_tests.cpp	/^    VersionBitsTester() : num(0) {}$/;"	f	class:VersionBitsTester
VersionBitsTester	./test/versionbits_tests.cpp	/^class VersionBitsTester$/;"	c	file:
VersionBitsTipState	./validation.cpp	/^ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTipStateSinceHeight	./validation.cpp	/^int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTipStatistics	./validation.cpp	/^BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionEdit	./leveldb/db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	./leveldb/db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	./leveldb/db/dumpfile.cc	/^static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
VersionEditTest	./leveldb/db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb	file:
VersionSet	./leveldb/db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	./leveldb/db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
WAIT_LOCK	./sync.h	/^#define WAIT_LOCK(/;"	d
WALLET	./util/system.h	/^    WALLET,$/;"	m	class:OptionsCategory
WALLET_CRYPTO_IV_SIZE	./wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_IV_SIZE = 16;$/;"	v
WALLET_CRYPTO_KEY_SIZE	./wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	./wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WALLET_DEBUG_TEST	./util/system.h	/^    WALLET_DEBUG_TEST,$/;"	m	class:OptionsCategory
WALLET_ENDPOINT_BASE	./wallet/rpcwallet.cpp	/^static const std::string WALLET_ENDPOINT_BASE = "\/wallet\/";$/;"	v	file:
WALLET_ERROR	./wallet/feebumper.h	/^    WALLET_ERROR,$/;"	m	class:feebumper::Result
WALLET_FLAG_BLANK_WALLET	./wallet/wallet.h	/^    WALLET_FLAG_BLANK_WALLET = (1ULL << 33),$/;"	e	enum:uint64_t
WALLET_FLAG_DISABLE_PRIVATE_KEYS	./wallet/wallet.h	/^    WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),$/;"	e	enum:uint64_t
WALLET_FLAG_KEY_ORIGIN_METADATA	./wallet/wallet.h	/^    WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),$/;"	e	enum:uint64_t
WALLET_INCREMENTAL_RELAY_FEE	./wallet/wallet.h	/^static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;$/;"	v
WALLET_UNLOCK_FAILURE	./qt/addresstablemodel.h	/^        WALLET_UNLOCK_FAILURE,  \/**< Wallet could not be unlocked to create new receiving address *\/$/;"	e	enum:AddressTableModel::EditStatus
WARN_CXXFLAGS	./Makefile	/^WARN_CXXFLAGS =  -Wall -Wextra -Wformat -Wvla -Wformat-security -Wthread-safety-analysis -Wrange-loop-analysis -Wredundant-decls$/;"	m
WATCHONLY_COLUMN_WIDTH	./qt/transactionview.h	/^        WATCHONLY_COLUMN_WIDTH = 23,$/;"	e	enum:TransactionView::ColumnWidths
WATCH_ONLY	./script/ismine.cpp	/^    WATCH_ONLY = 1, \/\/!< Included in watch-only balance$/;"	m	class:__anon85::IsMineResult	file:
WIDTH	./arith_uint256.h	/^    static constexpr int WIDTH = BITS \/ 32;$/;"	m	class:base_uint
WIDTH	./uint256.h	/^    static constexpr int WIDTH = BITS \/ 8;$/;"	m	class:base_blob
WIN32_LEAN_AND_MEAN	./compat.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WIN32_LEAN_AND_MEAN	./qt/guiutil.cpp	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WIN32_LEAN_AND_MEAN	./support/lockedpool.cpp	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WIN32_LEAN_AND_MEAN	./util/system.cpp	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WINDOWS_BITS	./Makefile	/^WINDOWS_BITS = $/;"	m
WINDOW_A	./secp256k1/src/ecmult_impl.h	/^#    define WINDOW_A /;"	d
WINDOW_A	./secp256k1/src/ecmult_impl.h	/^#define WINDOW_A /;"	d
WINDOW_G	./secp256k1/src/ecmult_impl.h	/^#    define WINDOW_G /;"	d
WINDOW_G	./secp256k1/src/ecmult_impl.h	/^#define WINDOW_G /;"	d
WINDRES	./Makefile	/^WINDRES = $/;"	m
WITH_LOCK	./sync.h	/^#define WITH_LOCK(/;"	d
WITNESS_SCALE_FACTOR	./consensus/consensus.h	/^static const int WITNESS_SCALE_FACTOR = 4;$/;"	v
WITNESS_V0	./script/interpreter.h	/^    WITNESS_V0 = 1,$/;"	m	class:SigVersion
WITNESS_V0	./script/ismine.cpp	/^    WITNESS_V0 = 2, \/\/!< P2WSH witness script execution$/;"	m	class:__anon85::IsMineSigVersion	file:
WITNESS_V0	./wallet/rpcdump.cpp	/^    WITNESS_V0, \/\/!< P2WSH witnessScript$/;"	m	class:ScriptContext	file:
WITNESS_V0_KEYHASH_SIZE	./script/interpreter.h	/^static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;$/;"	v
WITNESS_V0_SCRIPTHASH_SIZE	./script/interpreter.h	/^static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;$/;"	v
WNAF_BITS	./secp256k1/src/ecmult_const_impl.h	/^    #define WNAF_BITS /;"	d
WNAF_SIZE	./secp256k1/src/ecmult_const_impl.h	/^#define WNAF_SIZE(/;"	d
WORDS_BIGENDIAN	./config/bitcoin-config.h	/^#  define WORDS_BIGENDIAN /;"	d
WORDS_BIGENDIAN	./secp256k1/src/libsecp256k1-config.h	/^#  define WORDS_BIGENDIAN /;"	d
WPKHDescriptor	./script/descriptor.cpp	/^    WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, "wpkh") {}$/;"	f	class:__anon75::final
WSAEADDRINUSE	./compat.h	/^#define WSAEADDRINUSE /;"	d
WSAEALREADY	./compat.h	/^#define WSAEALREADY /;"	d
WSAEINPROGRESS	./compat.h	/^#define WSAEINPROGRESS /;"	d
WSAEINTR	./compat.h	/^#define WSAEINTR /;"	d
WSAEINVAL	./compat.h	/^#define WSAEINVAL /;"	d
WSAEMSGSIZE	./compat.h	/^#define WSAEMSGSIZE /;"	d
WSAENOTSOCK	./compat.h	/^#define WSAENOTSOCK /;"	d
WSAEWOULDBLOCK	./compat.h	/^#define WSAEWOULDBLOCK /;"	d
WSAGetLastError	./compat.h	/^#define WSAGetLastError(/;"	d
WSHDescriptor	./script/descriptor.cpp	/^    WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), "wsh") {}$/;"	f	class:__anon75::final
WWW_AUTH_HEADER_DATA	./httprpc.cpp	/^static const char* WWW_AUTH_HEADER_DATA = "Basic realm=\\"jsonrpc\\"";$/;"	v	file:
Wait	./checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueue
Wait	./checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueueControl
Wait	./leveldb/db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	./leveldb/port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
Wait	./leveldb/port/port_win.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WaitForShutdown	./bitcoind.cpp	/^static void WaitForShutdown()$/;"	f	file:
WakeMessageHandler	./net.cpp	/^void CConnman::WakeMessageHandler()$/;"	f	class:CConnman
WalCheckpoint	./leveldb/doc/bench/db_bench_sqlite3.cc	/^static void WalCheckpoint(sqlite3* db_) {$/;"	f	file:
Wallet	./interfaces/wallet.h	/^class Wallet$/;"	c	namespace:interfaces
WalletAddress	./interfaces/wallet.h	/^    WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)$/;"	f	struct:interfaces::WalletAddress
WalletAddress	./interfaces/wallet.h	/^struct WalletAddress$/;"	s	namespace:interfaces
WalletAppInit	./bitcoin-wallet.cpp	/^static bool WalletAppInit(int argc, char* argv[])$/;"	f	file:
WalletBalance	./bench/wallet_balance.cpp	/^static void WalletBalance(benchmark::State& state, const bool set_dirty, const bool add_watchonly, const bool add_mine)$/;"	f	file:
WalletBalanceClean	./bench/wallet_balance.cpp	/^static void WalletBalanceClean(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ false, \/* add_watchonly *\/ true, \/* add_mine *\/ true); }$/;"	f	file:
WalletBalanceDirty	./bench/wallet_balance.cpp	/^static void WalletBalanceDirty(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ true, \/* add_watchonly *\/ true, \/* add_mine *\/ true); }$/;"	f	file:
WalletBalanceMine	./bench/wallet_balance.cpp	/^static void WalletBalanceMine(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ false, \/* add_watchonly *\/ false, \/* add_mine *\/ true); }$/;"	f	file:
WalletBalanceWatch	./bench/wallet_balance.cpp	/^static void WalletBalanceWatch(benchmark::State& state) { WalletBalance(state, \/* set_dirty *\/ false, \/* add_watchonly *\/ true, \/* add_mine *\/ false); }$/;"	f	file:
WalletBalances	./interfaces/wallet.h	/^struct WalletBalances$/;"	s	namespace:interfaces
WalletBatch	./wallet/walletdb.h	/^    explicit WalletBatch(WalletDatabase& database, const char* pszMode = "r+", bool _fFlushOnClose = true) :$/;"	f	class:WalletBatch
WalletBatch	./wallet/walletdb.h	/^class WalletBatch$/;"	c
WalletClientImpl	./interfaces/wallet.cpp	/^    WalletClientImpl(Chain& chain, std::vector<std::string> wallet_filenames)$/;"	f	class:interfaces::__anon130::WalletClientImpl
WalletClientImpl	./interfaces/wallet.cpp	/^class WalletClientImpl : public ChainClient$/;"	c	namespace:interfaces::__anon130	file:
WalletController	./qt/walletcontroller.cpp	/^WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)$/;"	f	class:WalletController
WalletController	./qt/walletcontroller.h	/^class WalletController : public QObject$/;"	c
WalletDataFilePath	./wallet/db.cpp	/^fs::path WalletDataFilePath(const fs::path& wallet_path)$/;"	f
WalletDatabaseFileId	./wallet/db.h	/^struct WalletDatabaseFileId {$/;"	s
WalletFeature	./wallet/wallet.h	/^enum WalletFeature$/;"	g
WalletFrame	./qt/walletframe.cpp	/^WalletFrame::WalletFrame(const PlatformStyle *_platformStyle, BitcoinGUI *_gui) :$/;"	f	class:WalletFrame
WalletFrame	./qt/walletframe.h	/^class WalletFrame : public QFrame$/;"	c
WalletImpl	./interfaces/wallet.cpp	/^    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_wallet(wallet) {}$/;"	f	class:interfaces::__anon130::WalletImpl
WalletImpl	./interfaces/wallet.cpp	/^class WalletImpl : public Wallet$/;"	c	namespace:interfaces::__anon130	file:
WalletInit	./wallet/init.cpp	/^class WalletInit : public WalletInitInterface {$/;"	c	file:
WalletInitInterface	./walletinitinterface.h	/^class WalletInitInterface {$/;"	c
WalletLocation	./wallet/walletutil.cpp	/^WalletLocation::WalletLocation(const std::string& name)$/;"	f	class:WalletLocation
WalletLocation	./wallet/walletutil.h	/^    explicit WalletLocation() {}$/;"	f	class:final
WalletLogPrintf	./wallet/wallet.h	/^    void WalletLogPrintf(std::string fmt, Params... parameters) const {$/;"	f	class:final
WalletModel	./qt/walletmodel.cpp	/^WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, interfaces::Node& node, const PlatformStyle *platformStyle, OptionsModel *_optionsModel, QObject *parent) :$/;"	f	class:WalletModel
WalletModel	./qt/walletmodel.h	/^class WalletModel : public QObject$/;"	c
WalletModelTransaction	./qt/walletmodeltransaction.cpp	/^WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &_recipients) :$/;"	f	class:WalletModelTransaction
WalletModelTransaction	./qt/walletmodeltransaction.h	/^class WalletModelTransaction$/;"	c
WalletRescanReserver	./wallet/wallet.h	/^    explicit WalletRescanReserver(CWallet* w) : m_wallet(w), m_could_reserve(false) {}$/;"	f	class:WalletRescanReserver
WalletRescanReserver	./wallet/wallet.h	/^class WalletRescanReserver$/;"	c
WalletShowInfo	./wallet/wallettool.cpp	/^static void WalletShowInfo(CWallet* wallet_instance)$/;"	f	namespace:WalletTool
WalletTestingSetup	./wallet/test/wallet_test_fixture.cpp	/^WalletTestingSetup::WalletTestingSetup(const std::string& chainName)$/;"	f	class:WalletTestingSetup
WalletTestingSetup	./wallet/test/wallet_test_fixture.h	/^struct WalletTestingSetup: public TestingSetup {$/;"	s
WalletTests	./qt/test/wallettests.h	/^class WalletTests : public QObject$/;"	c
WalletTool	./wallet/wallettool.cpp	/^namespace WalletTool {$/;"	n	file:
WalletTool	./wallet/wallettool.h	/^namespace WalletTool {$/;"	n
WalletToolReleaseWallet	./wallet/wallettool.cpp	/^static void WalletToolReleaseWallet(CWallet* wallet)$/;"	f	namespace:WalletTool
WalletTx	./interfaces/wallet.h	/^struct WalletTx$/;"	s	namespace:interfaces
WalletTxOut	./interfaces/wallet.h	/^struct WalletTxOut$/;"	s	namespace:interfaces
WalletTxStatus	./interfaces/wallet.h	/^struct WalletTxStatus$/;"	s	namespace:interfaces
WalletTxToJSON	./wallet/rpcwallet.cpp	/^static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx, UniValue& entry)$/;"	f	file:
WalletView	./qt/walletview.cpp	/^WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):$/;"	f	class:WalletView
WalletView	./qt/walletview.h	/^class WalletView : public QStackedWidget$/;"	c
Warning	./qt/notificator.h	/^        Warning,        \/**< Notify user of potential problem *\/$/;"	e	enum:Notificator::Class
WarningBitsConditionChecker	./validation.cpp	/^    explicit WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}$/;"	f	class:WarningBitsConditionChecker
WarningBitsConditionChecker	./validation.cpp	/^class WarningBitsConditionChecker : public AbstractThresholdConditionChecker$/;"	c	file:
WatchOnlyFilter	./qt/transactionfilterproxy.h	/^    enum WatchOnlyFilter$/;"	g	class:TransactionFilterProxy
WatchOnlyFilter_All	./qt/transactionfilterproxy.h	/^        WatchOnlyFilter_All,$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
WatchOnlyFilter_No	./qt/transactionfilterproxy.h	/^        WatchOnlyFilter_No$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
WatchOnlyFilter_Yes	./qt/transactionfilterproxy.h	/^        WatchOnlyFilter_Yes,$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
Watchonly	./qt/transactiontablemodel.h	/^        Watchonly = 1,$/;"	e	enum:TransactionTableModel::ColumnIndex
WatchonlyDecorationRole	./qt/transactiontablemodel.h	/^        WatchonlyDecorationRole,$/;"	e	enum:TransactionTableModel::RoleIndex
WatchonlyRole	./qt/transactiontablemodel.h	/^        WatchonlyRole,$/;"	e	enum:TransactionTableModel::RoleIndex
WillLogCategory	./logging.cpp	/^bool BCLog::Logger::WillLogCategory(BCLog::LogFlags category) const$/;"	f	class:BCLog::Logger
Win32	./leveldb/util/env_win.cc	/^namespace Win32$/;"	n	namespace:leveldb	file:
Win32Env	./leveldb/util/env_win.cc	/^Win32Env::Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
Win32Env	./leveldb/util/env_win.cc	/^class Win32Env : public Env$/;"	c	namespace:leveldb::Win32	file:
Win32FileLock	./leveldb/util/env_win.cc	/^Win32FileLock::Win32FileLock( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32FileLock
Win32FileLock	./leveldb/util/env_win.cc	/^class Win32FileLock : public FileLock$/;"	c	namespace:leveldb::Win32	file:
Win32LockedPageAllocator	./support/lockedpool.cpp	/^Win32LockedPageAllocator::Win32LockedPageAllocator()$/;"	f	class:Win32LockedPageAllocator
Win32LockedPageAllocator	./support/lockedpool.cpp	/^class Win32LockedPageAllocator: public LockedPageAllocator$/;"	c	file:
Win32Logger	./leveldb/util/env_win.cc	/^Win32Logger::Win32Logger(WritableFile* pFile) : _pFileProxy(pFile)$/;"	f	class:leveldb::Win32::Win32Logger
Win32Logger	./leveldb/util/env_win.cc	/^class Win32Logger : public Logger$/;"	c	namespace:leveldb::Win32	file:
Win32RandomAccessFile	./leveldb/util/env_win.cc	/^Win32RandomAccessFile::Win32RandomAccessFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Win32RandomAccessFile	./leveldb/util/env_win.cc	/^class Win32RandomAccessFile : public RandomAccessFile$/;"	c	namespace:leveldb::Win32	file:
Win32SequentialFile	./leveldb/util/env_win.cc	/^Win32SequentialFile::Win32SequentialFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32SequentialFile
Win32SequentialFile	./leveldb/util/env_win.cc	/^class Win32SequentialFile : public SequentialFile$/;"	c	namespace:leveldb::Win32	file:
Win32WritableFile	./leveldb/util/env_win.cc	/^Win32WritableFile::Win32WritableFile(const std::string& fname, bool append)$/;"	f	class:leveldb::Win32::Win32WritableFile
Win32WritableFile	./leveldb/util/env_win.cc	/^class Win32WritableFile : public WritableFile$/;"	c	namespace:leveldb::Win32	file:
WinCmdLineArgs	./util/system.cpp	/^WinCmdLineArgs::WinCmdLineArgs()$/;"	f	class:util::WinCmdLineArgs
WinCmdLineArgs	./util/system.h	/^class WinCmdLineArgs$/;"	c	namespace:util
WinShutdownMonitor	./qt/winshutdownmonitor.h	/^class WinShutdownMonitor : public QAbstractNativeEventFilter$/;"	c
WitnessMode	./test/script_tests.cpp	/^enum class WitnessMode {$/;"	c	namespace:__anon58	file:
WitnessSigOps	./script/interpreter.cpp	/^size_t static WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness)$/;"	f	file:
WitnessUnknown	./script/standard.h	/^struct WitnessUnknown$/;"	s
WitnessV0KeyHash	./script/standard.h	/^    WitnessV0KeyHash() : uint160() {}$/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	./script/standard.h	/^    explicit WitnessV0KeyHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	./script/standard.h	/^struct WitnessV0KeyHash : public uint160$/;"	s
WitnessV0ScriptHash	./script/standard.cpp	/^WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)$/;"	f	class:WitnessV0ScriptHash
WitnessV0ScriptHash	./script/standard.h	/^    WitnessV0ScriptHash() : uint256() {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	./script/standard.h	/^    explicit WitnessV0ScriptHash(const uint256& hash) : uint256(hash) {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	./script/standard.h	/^struct WitnessV0ScriptHash : public uint256$/;"	s
WorkItemWrapper	./leveldb/util/env_win.cc	/^WorkItemWrapper::WorkItemWrapper( ScheduleProc proc_,void* content_ ) :$/;"	f	class:leveldb::Win32::WorkItemWrapper
WorkItemWrapper	./leveldb/util/env_win.cc	/^struct WorkItemWrapper$/;"	s	namespace:leveldb::Win32	file:
WorkItemWrapperProc	./leveldb/util/env_win.cc	/^DWORD WINAPI WorkItemWrapperProc(LPVOID pContent)$/;"	f	namespace:leveldb::Win32
WorkQueue	./httpserver.cpp	/^    explicit WorkQueue(size_t _maxDepth) : running(true),$/;"	f	class:WorkQueue
WorkQueue	./httpserver.cpp	/^class WorkQueue$/;"	c	file:
WrapBigEndian	./serialize.h	/^BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }$/;"	f
WrapVarInt	./serialize.h	/^CVarInt<Mode, I> WrapVarInt(I& n) { return CVarInt<Mode, I>{n}; }$/;"	f
WritableFile	./leveldb/include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	./leveldb/include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
WritableFileClosed	./leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::WritableFileClosed(const FileState& state) {$/;"	f	class:leveldb::FaultInjectionTestEnv
WritableFileImpl	./leveldb/helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon35::WritableFileImpl
WritableFileImpl	./leveldb/helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon35	file:
Write	./addrdb.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
Write	./addrdb.cpp	/^bool CBanDB::Write(const banmap_t& banSet)$/;"	f	class:CBanDB
Write	./crypto/hmac_sha256.h	/^    CHMAC_SHA256& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA256
Write	./crypto/hmac_sha512.h	/^    CHMAC_SHA512& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA512
Write	./crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Write(const unsigned char* data, size_t len)$/;"	f	class:CRIPEMD160
Write	./crypto/sha1.cpp	/^CSHA1& CSHA1::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA1
Write	./crypto/sha256.cpp	/^CSHA256& CSHA256::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA256
Write	./crypto/sha512.cpp	/^CSHA512& CSHA512::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA512
Write	./crypto/siphash.cpp	/^CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)$/;"	f	class:CSipHasher
Write	./crypto/siphash.cpp	/^CSipHasher& CSipHasher::Write(uint64_t data)$/;"	f	class:CSipHasher
Write	./dbwrapper.h	/^    bool Write(const K& key, const V& value, bool fSync = false)$/;"	f	class:CDBWrapper
Write	./dbwrapper.h	/^    void Write(const K& key, const V& value)$/;"	f	class:CDBBatch
Write	./hash.h	/^    CHash160& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash160
Write	./hash.h	/^    CHash256& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash256
Write	./leveldb/db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {$/;"	f	class:leveldb::DBImpl
Write	./leveldb/db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	./leveldb/db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
Write	./leveldb/doc/bench/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark	file:
Write	./policy/fees.cpp	/^bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const$/;"	f	class:CBlockPolicyEstimator
Write	./policy/fees.cpp	/^void TxConfirmStats::Write(CAutoFile& fileout) const$/;"	f	class:TxConfirmStats
Write	./streams.h	/^    void Write(uint64_t data, int nbits) {$/;"	f	class:BitStreamWriter
Write	./wallet/db.h	/^    bool Write(const K& key, const T& value, bool fOverwrite = true)$/;"	f	class:BerkeleyBatch
Write4	./crypto/sha256_sse41.cpp	/^void inline Write4(unsigned char* out, int offset, __m128i v) {$/;"	f	namespace:sha256d64_sse41::__anon41
Write8	./crypto/sha256_avx2.cpp	/^void inline Write8(unsigned char* out, int offset, __m256i v) {$/;"	f	namespace:sha256d64_avx2::__anon37
WriteBE32	./crypto/common.h	/^void static inline WriteBE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteBE64	./crypto/common.h	/^void static inline WriteBE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteBatch	./dbwrapper.cpp	/^bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)$/;"	f	class:CDBWrapper
WriteBatch	./leveldb/db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	./leveldb/include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	./leveldb/db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	./leveldb/db/dumpfile.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon27	file:
WriteBatchPrinter	./leveldb/db/dumpfile.cc	/^static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon27
WriteBatchSync	./txdb.cpp	/^bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {$/;"	f	class:CBlockTreeDB
WriteBatchTest	./leveldb/db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb	file:
WriteBestBlock	./index/base.cpp	/^void BaseIndex::DB::WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator)$/;"	f	class:BaseIndex::DB
WriteBestBlock	./wallet/walletdb.cpp	/^bool WalletBatch::WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:WalletBatch
WriteBinaryFile	./torcontrol.cpp	/^static bool WriteBinaryFile(const fs::path &filename, const std::string &data)$/;"	f	file:
WriteBlock	./index/base.h	/^    virtual bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) { return true; }$/;"	f	class:BaseIndex
WriteBlock	./index/blockfilterindex.cpp	/^bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)$/;"	f	class:BlockFilterIndex
WriteBlock	./index/txindex.cpp	/^bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)$/;"	f	class:TxIndex
WriteBlock	./leveldb/table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteBlockToDisk	./validation.cpp	/^static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	file:
WriteCScript	./wallet/walletdb.cpp	/^bool WalletBatch::WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:WalletBatch
WriteCoinsViewEntry	./test/coins_tests.cpp	/^void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)$/;"	f
WriteCompactSize	./serialize.h	/^inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)$/;"	f
WriteCompactSize	./serialize.h	/^void WriteCompactSize(Stream& os, uint64_t nSize)$/;"	f
WriteCryptedKey	./wallet/walletdb.cpp	/^bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,$/;"	f	class:WalletBatch
WriteDescriptor	./leveldb/db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon30::Repairer	file:
WriteDestData	./wallet/walletdb.cpp	/^bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)$/;"	f	class:WalletBatch
WriteFilterToDisk	./index/blockfilterindex.cpp	/^size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)$/;"	f	class:BlockFilterIndex
WriteFlag	./txdb.cpp	/^bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {$/;"	f	class:CBlockTreeDB
WriteHDChain	./wallet/walletdb.cpp	/^bool WalletBatch::WriteHDChain(const CHDChain& chain)$/;"	f	class:WalletBatch
WriteHDKeypath	./rpc/rawtransaction.cpp	/^static std::string WriteHDKeypath(std::vector<uint32_t>& keypath)$/;"	f	file:
WriteHDKeypath	./util/bip32.cpp	/^std::string WriteHDKeypath(const std::vector<uint32_t>& keypath)$/;"	f
WriteHeader	./httpserver.cpp	/^void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)$/;"	f	class:HTTPRequest
WriteIC	./wallet/walletdb.h	/^    bool WriteIC(const K& key, const T& value, bool fOverwrite = true)$/;"	f	class:WalletBatch
WriteInitialOffsetLog	./leveldb/db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteKey	./wallet/walletdb.cpp	/^bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)$/;"	f	class:WalletBatch
WriteKeyMetadata	./wallet/wallet.cpp	/^bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)$/;"	f	class:CWallet
WriteKeyMetadata	./wallet/walletdb.cpp	/^bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)$/;"	f	class:WalletBatch
WriteLE16	./crypto/common.h	/^void static inline WriteLE16(unsigned char* ptr, uint16_t x)$/;"	f
WriteLE32	./crypto/common.h	/^void static inline WriteLE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteLE64	./crypto/common.h	/^void static inline WriteLE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteLevel0Table	./leveldb/db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteMasterKey	./wallet/walletdb.cpp	/^bool WalletBatch::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:WalletBatch
WriteMinVersion	./wallet/walletdb.cpp	/^bool WalletBatch::WriteMinVersion(int nVersion)$/;"	f	class:WalletBatch
WriteName	./wallet/walletdb.cpp	/^bool WalletBatch::WriteName(const std::string& strAddress, const std::string& strName)$/;"	f	class:WalletBatch
WriteOptions	./leveldb/include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	./leveldb/include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteOrderPos	./wallet/wallet.h	/^static inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
WriteOrderPosNext	./wallet/walletdb.cpp	/^bool WalletBatch::WriteOrderPosNext(int64_t nOrderPosNext)$/;"	f	class:WalletBatch
WritePool	./wallet/walletdb.cpp	/^bool WalletBatch::WritePool(int64_t nPool, const CKeyPool& keypool)$/;"	f	class:WalletBatch
WritePurpose	./wallet/walletdb.cpp	/^bool WalletBatch::WritePurpose(const std::string& strAddress, const std::string& strPurpose)$/;"	f	class:WalletBatch
WriteRandom	./leveldb/db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	./leveldb/table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteReindexing	./txdb.cpp	/^bool CBlockTreeDB::WriteReindexing(bool fReindexing) {$/;"	f	class:CBlockTreeDB
WriteReply	./httpserver.cpp	/^void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)$/;"	f	class:HTTPRequest
WriteSeq	./leveldb/db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	./leveldb/db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	./leveldb/db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	./leveldb/util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	./leveldb/util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	./leveldb/db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
WriteTx	./wallet/walletdb.cpp	/^bool WalletBatch::WriteTx(const CWalletTx& wtx)$/;"	f	class:WalletBatch
WriteTxIndexMigrationBatches	./index/txindex.cpp	/^static void WriteTxIndexMigrationBatches(CDBWrapper& newdb, CDBWrapper& olddb,$/;"	f	file:
WriteTxs	./index/txindex.cpp	/^bool TxIndex::DB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)$/;"	f	class:TxIndex::DB
WriteUndoDataForBlock	./validation.cpp	/^static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)$/;"	f	file:
WriteVarInt	./serialize.h	/^inline void WriteVarInt(CSizeComputer &s, I n)$/;"	f
WriteVarInt	./serialize.h	/^void WriteVarInt(Stream& os, I n)$/;"	f
WriteVersion	./wallet/db.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:BerkeleyBatch
WriteVersion	./wallet/walletdb.cpp	/^bool WalletBatch::WriteVersion(int nVersion)$/;"	f	class:WalletBatch
WriteWalletFlags	./wallet/walletdb.cpp	/^bool WalletBatch::WriteWalletFlags(const uint64_t flags)$/;"	f	class:WalletBatch
WriteWatchOnly	./wallet/walletdb.cpp	/^bool WalletBatch::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)$/;"	f	class:WalletBatch
Writer	./leveldb/db/db_impl.cc	/^  explicit Writer(port::Mutex* mu) : cv(mu) { }$/;"	f	struct:leveldb::DBImpl::Writer
Writer	./leveldb/db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	./leveldb/db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	./leveldb/db/log_writer.cc	/^Writer::Writer(WritableFile* dest, uint64_t dest_length)$/;"	f	class:leveldb::log::Writer
Writer	./leveldb/db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	./leveldb/db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
X	./net.cpp	/^#define X(/;"	d	file:
X	./net.cpp	/^#undef X$/;"	d	file:
X11XCB_CFLAGS	./Makefile	/^X11XCB_CFLAGS = $/;"	m
X11XCB_LIBS	./Makefile	/^X11XCB_LIBS = $/;"	m
X509Deleter	./qt/paymentserver.cpp	/^struct X509Deleter {$/;"	s	file:
X509StoreDeleter	./qt/paymentserver.cpp	/^struct X509StoreDeleter {$/;"	s	file:
XGETTEXT	./Makefile	/^XGETTEXT = $/;"	m
XMARGIN	./qt/trafficgraphwidget.cpp	/^#define XMARGIN /;"	d	file:
Xor	./crypto/sha256_avx2.cpp	/^__m256i inline Xor(__m256i x, __m256i y) { return _mm256_xor_si256(x, y); }$/;"	f	namespace:sha256d64_avx2::__anon37
Xor	./crypto/sha256_avx2.cpp	/^__m256i inline Xor(__m256i x, __m256i y, __m256i z) { return Xor(Xor(x, y), z); }$/;"	f	namespace:sha256d64_avx2::__anon37
Xor	./crypto/sha256_sse41.cpp	/^__m128i inline Xor(__m128i x, __m128i y) { return _mm_xor_si128(x, y); }$/;"	f	namespace:sha256d64_sse41::__anon41
Xor	./crypto/sha256_sse41.cpp	/^__m128i inline Xor(__m128i x, __m128i y, __m128i z) { return Xor(Xor(x, y), z); }$/;"	f	namespace:sha256d64_sse41::__anon41
Xor	./streams.h	/^    void Xor(const std::vector<unsigned char>& key)$/;"	f	class:CDataStream
YMARGIN	./qt/trafficgraphwidget.cpp	/^#define YMARGIN /;"	d	file:
ZMQ	./util/system.h	/^    ZMQ,$/;"	m	class:OptionsCategory
ZMQ_CFLAGS	./Makefile	/^ZMQ_CFLAGS = -I\/usr\/local\/Cellar\/zeromq\/4.2.5\/include$/;"	m
ZMQ_LIBS	./Makefile	/^ZMQ_LIBS = -L\/usr\/local\/Cellar\/zeromq\/4.2.5\/lib -lzmq$/;"	m
ZapSelectTx	./wallet/wallet.cpp	/^DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)$/;"	f	class:CWallet
ZapSelectTx	./wallet/walletdb.cpp	/^DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<uint256>& vTxHashOut)$/;"	f	class:WalletBatch
ZapWalletTx	./wallet/wallet.cpp	/^DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)$/;"	f	class:CWallet
ZapWalletTx	./wallet/walletdb.cpp	/^DBErrors WalletBatch::ZapWalletTx(std::vector<CWalletTx>& vWtx)$/;"	f	class:WalletBatch
ZeroArray	./test/arith_uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroArray	./test/uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroL	./test/arith_uint256_tests.cpp	/^const arith_uint256 ZeroL = arith_uint256V(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroL	./test/uint256_tests.cpp	/^const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroS	./test/uint256_tests.cpp	/^const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));$/;"	v
_	./util/system.h	/^inline std::string _(const char* psz)$/;"	f
_ACJNI_JAVAC	./secp256k1/Makefile	/^_ACJNI_JAVAC = $/;"	m
_CTAES_H_	./crypto/ctaes/ctaes.h	/^#define _CTAES_H_ /;"	d
_CleanUp	./leveldb/util/env_win.cc	/^void Win32FileLock::_CleanUp()$/;"	f	class:leveldb::Win32::Win32FileLock
_CleanUp	./leveldb/util/env_win.cc	/^void Win32RandomAccessFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_CleanUp	./leveldb/util/env_win.cc	/^void Win32SequentialFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_DARWIN_USE_64_BIT_INODE	./config/bitcoin-config.h	/^# define _DARWIN_USE_64_BIT_INODE /;"	d
_Included_org_bitcoin_NativeSecp256k1	./secp256k1/src/java/org_bitcoin_NativeSecp256k1.h	/^#define _Included_org_bitcoin_NativeSecp256k1$/;"	d
_Included_org_bitcoin_Secp256k1Context	./secp256k1/src/java/org_bitcoin_Secp256k1Context.h	/^#define _Included_org_bitcoin_Secp256k1Context$/;"	d
_Init	./leveldb/util/env_win.cc	/^BOOL Win32FileLock::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32FileLock
_Init	./leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_Init	./leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::_Init()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_POSIX_C_SOURCE	./util/system.cpp	/^#define _POSIX_C_SOURCE /;"	d	file:
_POSIX_C_SOURCE	./util/system.cpp	/^#undef _POSIX_C_SOURCE$/;"	d	file:
_SECP256K1_ECMULT_STATIC_CONTEXT_	./secp256k1/src/ecmult_static_context.h	/^#define _SECP256K1_ECMULT_STATIC_CONTEXT_$/;"	d
_WIN32_IE	./qt/guiutil.cpp	/^#define _WIN32_IE /;"	d	file:
_WIN32_IE	./qt/guiutil.cpp	/^#undef _WIN32_IE$/;"	d	file:
_WIN32_IE	./util/system.cpp	/^#define _WIN32_IE /;"	d	file:
_WIN32_IE	./util/system.cpp	/^#undef _WIN32_IE$/;"	d	file:
__UNIVALUE_H__	./univalue/include/univalue.h	/^#define __UNIVALUE_H__$/;"	d
__fdelt_warn	./compat/glibc_compat.cpp	/^extern "C" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)$/;"	f
__pushKV	./univalue/lib/univalue.cpp	/^void UniValue::__pushKV(const std::string& key, const UniValue& val_)$/;"	f	class:UniValue
__wrap___divmoddi4	./compat/glibc_compat.cpp	/^extern "C" int64_t __wrap___divmoddi4(int64_t u, int64_t v, int64_t* rp)$/;"	f
__wrap_log2f	./compat/glibc_compat.cpp	/^extern "C" float __wrap_log2f(float x)$/;"	f
_clear	./txmempool.cpp	/^void CTxMemPool::_clear()$/;"	f	class:CTxMemPool
_filename	./leveldb/util/env_win.cc	/^    const std::string _filename;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_filename	./leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_filename	./leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_hFile	./leveldb/util/env_win.cc	/^    ::HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_hFile	./leveldb/util/env_win.cc	/^    ::HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32WritableFile	file:
_hFile	./leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_hFile	./leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_instance	./support/lockedpool.cpp	/^LockedPoolManager* LockedPoolManager::_instance = nullptr;$/;"	m	class:LockedPoolManager	file:
_instance	./support/lockedpool.h	/^    static LockedPoolManager* _instance;$/;"	m	class:LockedPoolManager
_pFileProxy	./leveldb/util/env_win.cc	/^    WritableFile* _pFileProxy;$/;"	m	class:leveldb::Win32::Win32Logger	file:
_platformStyle	./qt/bitcoingui.cpp	/^    platformStyle(_platformStyle),$/;"	v
_size	./prevector.h	/^    size_type _size = 0;$/;"	m	class:prevector
_union	./prevector.h	/^    } _union = {};$/;"	m	class:prevector	typeref:union:prevector::direct_or_indirect
abandonAction	./qt/transactionview.h	/^    QAction *abandonAction;$/;"	m	class:TransactionView
abandonTx	./qt/transactionview.cpp	/^void TransactionView::abandonTx()$/;"	f	class:TransactionView
abandontransaction	./wallet/rpcwallet.cpp	/^static UniValue abandontransaction(const JSONRPCRequest& request)$/;"	f	file:
abortrescan	./wallet/rpcdump.cpp	/^UniValue abortrescan(const JSONRPCRequest& request)$/;"	f
aboutAction	./qt/bitcoingui.h	/^    QAction* aboutAction = nullptr;$/;"	m	class:BitcoinGUI
aboutClicked	./qt/bitcoingui.cpp	/^void BitcoinGUI::aboutClicked()$/;"	f	class:BitcoinGUI
aboutQtAction	./qt/bitcoingui.h	/^    QAction* aboutQtAction = nullptr;$/;"	m	class:BitcoinGUI
abs64	./timedata.cpp	/^static int64_t abs64(int64_t n)$/;"	f	file:
abs_builddir	./Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src$/;"	m
abs_builddir	./secp256k1/Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_builddir	./univalue/Makefile	/^abs_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
abs_srcdir	./Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src$/;"	m
abs_srcdir	./secp256k1/Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_srcdir	./univalue/Makefile	/^abs_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
abs_top_builddir	./Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_builddir	./secp256k1/Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_top_builddir	./univalue/Makefile	/^abs_top_builddir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
abs_top_srcdir	./Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin$/;"	m
abs_top_srcdir	./secp256k1/Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1$/;"	m
abs_top_srcdir	./univalue/Makefile	/^abs_top_srcdir = \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue$/;"	m
ac_ct_AR	./Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	./secp256k1/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	./univalue/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	./Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	./secp256k1/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	./univalue/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC_FOR_BUILD	./secp256k1/Makefile	/^ac_ct_CC_FOR_BUILD = gcc$/;"	m
ac_ct_CXX	./Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	./univalue/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	./Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	./secp256k1/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	./univalue/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_OBJCXX	./Makefile	/^ac_ct_OBJCXX = $/;"	m
ac_fn_c_check_func	./secp256k1/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	./univalue/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	./secp256k1/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	./univalue/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	./secp256k1/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	./secp256k1/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	./secp256k1/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	./univalue/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	./secp256k1/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	./univalue/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	./secp256k1/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	./univalue/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	./secp256k1/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	./univalue/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_try_compile	./univalue/configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	./univalue/configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	./univalue/configure	/^ac_fn_cxx_try_link ()$/;"	f
accept	./qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::accept()$/;"	f	class:AskPassphraseDialog
accept	./qt/editaddressdialog.cpp	/^void EditAddressDialog::accept()$/;"	f	class:EditAddressDialog
accept	./qt/openuridialog.cpp	/^void OpenURIDialog::accept()$/;"	f	class:OpenURIDialog
accept	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::accept()$/;"	f	class:ReceiveCoinsDialog
accept	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::accept()$/;"	f	class:SendCoinsDialog
active	./logging.h	/^    bool active;$/;"	m	struct:CLogCategoryActive
activeTxn	./wallet/db.h	/^    DbTxn* activeTxn;$/;"	m	class:BerkeleyBatch
actor	./rpc/server.h	/^    Actor actor;$/;"	m	class:CRPCCommand
addCoin	./bench/coin_selection.cpp	/^static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<std::unique_ptr<CWalletTx>>& wtxs)$/;"	f	file:
addColumn	./qt/csvmodelwriter.cpp	/^void CSVModelWriter::addColumn(const QString &title, int column, int role)$/;"	f	class:CSVModelWriter
addEntry	./qt/sendcoinsdialog.cpp	/^SendCoinsEntry *SendCoinsDialog::addEntry()$/;"	f	class:SendCoinsDialog
addNewRequest	./qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)$/;"	f	class:RecentRequestsTableModel
addNewRequest	./qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient)$/;"	f	class:RecentRequestsTableModel
addNewRequest	./qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(const std::string &recipient)$/;"	f	class:RecentRequestsTableModel
addOverriddenOption	./qt/optionsmodel.cpp	/^void OptionsModel::addOverriddenOption(const std::string &option)$/;"	f	class:OptionsModel
addPackageTxs	./miner.cpp	/^void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)$/;"	f	class:BlockAssembler
addRow	./qt/addresstablemodel.cpp	/^QString AddressTableModel::addRow(const QString &type, const QString &label, const QString &address, const OutputType address_type)$/;"	f	class:AddressTableModel
addTransaction	./txmempool.h	/^    void addTransaction(const CTransactionRef& tx)$/;"	f	struct:DisconnectedBlockTransactions
addUnchecked	./txmempool.cpp	/^void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, bool validFeeEstimate)$/;"	f	class:CTxMemPool
addUnchecked	./txmempool.cpp	/^void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)$/;"	f	class:CTxMemPool
addWallet	./qt/bitcoingui.cpp	/^void BitcoinGUI::addWallet(WalletModel* walletModel)$/;"	f	class:BitcoinGUI
addWallet	./qt/rpcconsole.cpp	/^void RPCConsole::addWallet(WalletModel * const walletModel)$/;"	f	class:RPCConsole
addWallet	./qt/walletcontroller.cpp	/^void WalletController::addWallet(WalletModel* wallet_model)$/;"	f	class:WalletController
addWallet	./qt/walletframe.cpp	/^void WalletFrame::addWallet(WalletModel *walletModel)$/;"	f	class:WalletFrame
add_coin	./bench/coin_selection.cpp	/^static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>& set)$/;"	f	file:
add_coin	./wallet/test/coinselector_tests.cpp	/^static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)$/;"	f	file:
add_coin	./wallet/test/coinselector_tests.cpp	/^static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)$/;"	f	file:
add_coin	./wallet/test/coinselector_tests.cpp	/^static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)$/;"	f	file:
add_onion_cb	./torcontrol.cpp	/^void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
added_files	./leveldb/db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
addmultisigaddress	./wallet/rpcwallet.cpp	/^static UniValue addmultisigaddress(const JSONRPCRequest& request)$/;"	f	file:
addnode	./rpc/net.cpp	/^static UniValue addnode(const JSONRPCRequest& request)$/;"	f	file:
addr	./chainparams.h	/^    uint8_t addr[16];$/;"	m	struct:SeedSpec6
addr	./net.cpp	/^    CAddress addr;$/;"	m	struct:NodeEvictionCandidate	file:
addr	./net.h	/^    CAddress addr;$/;"	m	class:CNodeStats
addr	./net.h	/^    const CAddress addr;$/;"	m	class:CNode
addr1	./test/key_tests.cpp	/^static const std::string addr1 = "1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ";$/;"	v	file:
addr1C	./test/key_tests.cpp	/^static const std::string addr1C = "1NoJrossxPBKfCHuJXT4HadJrXRE9Fxiqs";$/;"	v	file:
addr2	./test/key_tests.cpp	/^static const std::string addr2 = "1F5y5E5FMc5YzdJtB9hLaUe43GDxEKXENJ";$/;"	v	file:
addr2C	./test/key_tests.cpp	/^static const std::string addr2C = "1CRj2HyM1CXWzHAXLQtiGLyggNT9WQqsDs";$/;"	v	file:
addrBind	./net.h	/^    CAddress addrBind;$/;"	m	class:CNodeStats
addrBind	./net.h	/^    const CAddress addrBind;$/;"	m	class:CNode
addrKnown	./net.h	/^    CRollingBloomFilter addrKnown;$/;"	m	class:CNode
addrLocal	./net.h	/^    std::string addrLocal;$/;"	m	class:CNodeStats
addrName	./net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
address	./net_processing.cpp	/^    const CService address;$/;"	m	struct:__anon89::CNodeState	file:
address	./qt/addresstablemodel.cpp	/^    QString address;$/;"	m	struct:AddressTableEntry	file:
address	./qt/editaddressdialog.h	/^    QString address;$/;"	m	class:EditAddressDialog
address	./qt/transactionrecord.h	/^    std::string address;$/;"	m	class:TransactionRecord
address	./qt/walletmodel.h	/^    QString address;$/;"	m	class:SendCoinsRecipient
address	./zmq/zmqabstractnotifier.h	/^    std::string address;$/;"	m	class:CZMQAbstractNotifier
addressBookTests	./qt/test/addressbooktests.cpp	/^void AddressBookTests::addressBookTests()$/;"	f	class:AddressBookTests
addressColor	./qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::addressColor(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
addressInArena	./support/lockedpool.h	/^    bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }$/;"	f	class:Arena
addressTableModel	./qt/walletmodel.h	/^    AddressTableModel *addressTableModel;$/;"	m	class:WalletModel
addrman	./net.h	/^    CAddrMan addrman;$/;"	m	class:CConnman
adjustTableColumnsWidth	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
aix_post_process_depfile	./secp256k1/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
aix_post_process_depfile	./univalue/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
align_up	./support/lockedpool.cpp	/^static inline size_t align_up(size_t x, size_t align)$/;"	f	file:
alignment	./support/lockedpool.h	/^    size_t alignment;$/;"	m	class:Arena
allColumnsMinimumWidth	./qt/guiutil.h	/^            int allColumnsMinimumWidth;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
allNetMessageTypes	./protocol.cpp	/^const static std::string allNetMessageTypes[] = {$/;"	v	file:
alloc	./support/lockedpool.cpp	/^void* Arena::alloc(size_t size)$/;"	f	class:Arena
alloc	./support/lockedpool.cpp	/^void* LockedPool::alloc(size_t size)$/;"	f	class:LockedPool
alloc_bytes_remaining_	./leveldb/util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	./leveldb/util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allocate	./support/allocators/secure.h	/^    T* allocate(std::size_t n, const void* hint = 0)$/;"	f
allocated_memory	./prevector.h	/^    size_t allocated_memory() const {$/;"	f	class:prevector
allocator	./support/lockedpool.h	/^        LockedPageAllocator *allocator;$/;"	m	class:LockedPool::LockedPageArena
allocator	./support/lockedpool.h	/^    std::unique_ptr<LockedPageAllocator> allocator;$/;"	m	class:LockedPool
allocator_type	./streams.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
allow_erase	./cuckoocache.h	/^    inline void allow_erase(uint32_t n) const$/;"	f	class:CuckooCache::cache
allowed_	./leveldb/util/env_posix.cc	/^  port::AtomicPointer allowed_;$/;"	m	class:leveldb::__anon8::Limiter	file:
allowed_seeks	./leveldb/db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
almostEqual	./test/arith_uint256_tests.cpp	/^static bool almostEqual(double d1, double d2)$/;"	f	file:
altstacktop	./script/interpreter.cpp	/^#define altstacktop(/;"	d	file:
am__CONFIG_DISTCLEAN_FILES	./secp256k1/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__CONFIG_DISTCLEAN_FILES	./univalue/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	./Makefile	/^am__DEPENDENCIES_1 = $(am__append_18)$/;"	m
am__DEPENDENCIES_10	./Makefile	/^am__DEPENDENCIES_10 = $(LIBBITCOIN_SERVER) \\$/;"	m
am__DEPENDENCIES_11	./Makefile	/^am__DEPENDENCIES_11 =  \\$/;"	m
am__DEPENDENCIES_2	./Makefile	/^am__DEPENDENCIES_2 = $(am__append_19)$/;"	m
am__DEPENDENCIES_2	./secp256k1/Makefile	/^am__DEPENDENCIES_2 =$/;"	m
am__DEPENDENCIES_3	./Makefile	/^am__DEPENDENCIES_3 =$/;"	m
am__DEPENDENCIES_4	./Makefile	/^am__DEPENDENCIES_4 = univalue\/libunivalue.la$/;"	m
am__DIST_COMMON	./Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.bench.include \\$/;"	m
am__DIST_COMMON	./secp256k1/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/libsecp256k1.pc.in \\$/;"	m
am__DIST_COMMON	./univalue/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/univalue-config.h.in \\$/;"	m
am__EXEEXT_1	./Makefile	/^am__EXEEXT_1 = bitcoind$(EXEEXT)$/;"	m
am__EXEEXT_1	./univalue/Makefile	/^am__EXEEXT_1 = test\/object$(EXEEXT) test\/unitester$(EXEEXT) \\$/;"	m
am__EXEEXT_2	./Makefile	/^am__EXEEXT_2 = bitcoin-cli$(EXEEXT)$/;"	m
am__EXEEXT_2	./secp256k1/Makefile	/^am__EXEEXT_2 = tests$(EXEEXT)$/;"	m
am__EXEEXT_3	./Makefile	/^am__EXEEXT_3 = bitcoin-tx$(EXEEXT)$/;"	m
am__EXEEXT_3	./secp256k1/Makefile	/^am__EXEEXT_3 = exhaustive_tests$(EXEEXT)$/;"	m
am__EXEEXT_5	./Makefile	/^am__EXEEXT_5 = test\/test_bitcoin$(EXEEXT)$/;"	m
am__EXEEXT_9	./Makefile	/^am__EXEEXT_9 =  \\$/;"	m
am__aclocal_m4_deps	./Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/ax_boost_base.m4 \\$/;"	m
am__aclocal_m4_deps	./secp256k1/Makefile	/^am__aclocal_m4_deps =  \\$/;"	m
am__aclocal_m4_deps	./univalue/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/libtool.m4 \\$/;"	m
am__append_1	./Makefile	/^am__append_1 = $(LIBBITCOIN_CRYPTO_SSE41)$/;"	m
am__append_13	./secp256k1/Makefile	/^am__append_13 = include\/secp256k1_recovery.h$/;"	m
am__append_14	./secp256k1/Makefile	/^am__append_14 =  \\$/;"	m
am__append_17	./Makefile	/^am__append_17 = $(LIBLEVELDB_INT) \\$/;"	m
am__append_18	./Makefile	/^am__append_18 = $(LIBLEVELDB_INT)$/;"	m
am__append_19	./Makefile	/^am__append_19 = $(LIBMEMENV_INT)$/;"	m
am__append_2	./Makefile	/^am__append_2 = $(LIBBITCOIN_CRYPTO_AVX2)$/;"	m
am__append_2	./secp256k1/Makefile	/^am__append_2 = tests$/;"	m
am__append_20	./Makefile	/^am__append_20 = -I$(srcdir)\/leveldb\/include \\$/;"	m
am__append_22	./Makefile	/^am__append_22 = -DLEVELDB_PLATFORM_POSIX$/;"	m
am__append_24	./Makefile	/^am__append_24 = leveldb\/port\/port_posix.cc$/;"	m
am__append_25	./Makefile	/^am__append_25 = -DLEVELDB_PLATFORM_POSIX_SSE$/;"	m
am__append_26	./Makefile	/^am__append_26 = $(SSE42_CXXFLAGS)$/;"	m
am__append_28	./Makefile	/^am__append_28 = test\/test_bitcoin$/;"	m
am__append_3	./Makefile	/^am__append_3 = $(LIBBITCOIN_CRYPTO_SHANI)$/;"	m
am__append_3	./secp256k1/Makefile	/^am__append_3 = -DVERIFY$/;"	m
am__append_34	./Makefile	/^am__append_34 = $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)$/;"	m
am__append_35	./Makefile	/^am__append_35 = $(CLEAN_BITCOIN_TEST)$/;"	m
am__append_4	./Makefile	/^am__append_4 = bitcoind$/;"	m
am__append_4	./secp256k1/Makefile	/^am__append_4 = tests$/;"	m
am__append_5	./Makefile	/^am__append_5 = bitcoin-cli$/;"	m
am__append_5	./secp256k1/Makefile	/^am__append_5 = exhaustive_tests$/;"	m
am__append_6	./Makefile	/^am__append_6 = bitcoin-tx$/;"	m
am__append_6	./secp256k1/Makefile	/^am__append_6 = -DVERIFY$/;"	m
am__append_7	./secp256k1/Makefile	/^am__append_7 = exhaustive_tests$/;"	m
am__append_8	./Makefile	/^am__append_8 = dummywallet.cpp$/;"	m
am__append_8	./secp256k1/Makefile	/^am__append_8 = -I$(top_srcdir)$/;"	m
am__append_9	./Makefile	/^am__append_9 = crypto\/sha256_sse4.cpp$/;"	m
am__append_9	./secp256k1/Makefile	/^am__append_9 = -Wall -Wextra -Wno-unused-function$/;"	m
am__base_list	./Makefile	/^am__base_list = \\$/;"	m
am__base_list	./secp256k1/Makefile	/^am__base_list = \\$/;"	m
am__base_list	./univalue/Makefile	/^am__base_list = \\$/;"	m
am__bench_bench_bitcoin_SOURCES_DIST	./Makefile	/^am__bench_bench_bitcoin_SOURCES_DIST = bench\/data\/block413567.raw \\$/;"	m
am__bench_ecdh_SOURCES_DIST	./secp256k1/Makefile	/^am__bench_ecdh_SOURCES_DIST = src\/bench_ecdh.c$/;"	m
am__bench_internal_SOURCES_DIST	./secp256k1/Makefile	/^am__bench_internal_SOURCES_DIST = src\/bench_internal.c$/;"	m
am__bench_recover_SOURCES_DIST	./secp256k1/Makefile	/^am__bench_recover_SOURCES_DIST = src\/bench_recover.c$/;"	m
am__bench_sign_SOURCES_DIST	./secp256k1/Makefile	/^am__bench_sign_SOURCES_DIST = src\/bench_sign.c$/;"	m
am__bench_verify_SOURCES_DIST	./secp256k1/Makefile	/^am__bench_verify_SOURCES_DIST = src\/bench_verify.c$/;"	m
am__bitcoin_cli_SOURCES_DIST	./Makefile	/^am__bitcoin_cli_SOURCES_DIST = bitcoin-cli.cpp bitcoin-cli-res.rc$/;"	m
am__bitcoin_tx_SOURCES_DIST	./Makefile	/^am__bitcoin_tx_SOURCES_DIST = bitcoin-tx.cpp bitcoin-tx-res.rc$/;"	m
am__bitcoin_wallet_SOURCES_DIST	./Makefile	/^am__bitcoin_wallet_SOURCES_DIST = bitcoin-wallet.cpp \\$/;"	m
am__bitcoind_SOURCES_DIST	./Makefile	/^am__bitcoind_SOURCES_DIST = bitcoind.cpp bitcoind-res.rc$/;"	m
am__can_run_installinfo	./Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	./secp256k1/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	./univalue/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	./Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	./secp256k1/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	./univalue/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__check_pre	./Makefile	/^am__check_pre = \\$/;"	m
am__check_pre	./secp256k1/Makefile	/^am__check_pre = \\$/;"	m
am__check_pre	./univalue/Makefile	/^am__check_pre = \\$/;"	m
am__common_driver_flags	./Makefile	/^am__common_driver_flags = \\$/;"	m
am__common_driver_flags	./secp256k1/Makefile	/^am__common_driver_flags = \\$/;"	m
am__common_driver_flags	./univalue/Makefile	/^am__common_driver_flags = \\$/;"	m
am__configure_deps	./Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	./secp256k1/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	./univalue/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__copy_in_global_log_rx	./Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__copy_in_global_log_rx	./secp256k1/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__copy_in_global_log_rx	./univalue/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__create_global_log	./Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__create_global_log	./secp256k1/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__create_global_log	./univalue/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__crypto_libbitcoin_crypto_base_a_SOURCES_DIST	./Makefile	/^am__crypto_libbitcoin_crypto_base_a_SOURCES_DIST = crypto\/aes.cpp \\$/;"	m
am__define_uniq_tagged_files	./Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	./secp256k1/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	./univalue/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_remade	./Makefile	/^am__depfiles_remade = .\/$(DEPDIR)\/bitcoin_cli-bitcoin-cli.Po \\$/;"	m
am__depfiles_remade	./secp256k1/Makefile	/^am__depfiles_remade = src\/$(DEPDIR)\/bench_ecdh.Po \\$/;"	m
am__depfiles_remade	./univalue/Makefile	/^am__depfiles_remade = lib\/$(DEPDIR)\/libunivalue_la-univalue.Plo \\$/;"	m
am__dirstamp	./Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	./secp256k1/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	./univalue/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	./secp256k1/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__distuninstallcheck_listfiles	./univalue/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__exhaustive_tests_SOURCES_DIST	./secp256k1/Makefile	/^am__exhaustive_tests_SOURCES_DIST = src\/tests_exhaustive.c$/;"	m
am__global_test_result_rx	./Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__global_test_result_rx	./secp256k1/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__global_test_result_rx	./univalue/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__include	./Makefile	/^am__include = include$/;"	m
am__include	./secp256k1/Makefile	/^am__include = include$/;"	m
am__include	./univalue/Makefile	/^am__include = include$/;"	m
am__include_HEADERS_DIST	./Makefile	/^am__include_HEADERS_DIST = script\/bitcoinconsensus.h$/;"	m
am__include_HEADERS_DIST	./secp256k1/Makefile	/^am__include_HEADERS_DIST = include\/secp256k1.h \\$/;"	m
am__install_max	./Makefile	/^am__install_max = 40$/;"	m
am__install_max	./secp256k1/Makefile	/^am__install_max = 40$/;"	m
am__install_max	./univalue/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	./Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(libdir)" \\$/;"	m
am__installdirs	./secp256k1/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__installdirs	./univalue/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__is_gnu_make	./Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	./secp256k1/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	./univalue/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	./Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	./secp256k1/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	./univalue/Makefile	/^am__leading_dot = .$/;"	m
am__leveldb_libleveldb_a_SOURCES_DIST	./Makefile	/^am__leveldb_libleveldb_a_SOURCES_DIST = leveldb\/port\/atomic_pointer.h \\$/;"	m
am__leveldb_libleveldb_sse42_a_SOURCES_DIST	./Makefile	/^am__leveldb_libleveldb_sse42_a_SOURCES_DIST =  \\$/;"	m
am__leveldb_libmemenv_a_SOURCES_DIST	./Makefile	/^am__leveldb_libmemenv_a_SOURCES_DIST =  \\$/;"	m
am__libbitcoin_server_a_SOURCES_DIST	./Makefile	/^am__libbitcoin_server_a_SOURCES_DIST = addrdb.cpp addrman.cpp \\$/;"	m
am__libbitcoin_util_a_SOURCES_DIST	./Makefile	/^am__libbitcoin_util_a_SOURCES_DIST = support\/lockedpool.cpp \\$/;"	m
am__libbitcoin_zmq_a_SOURCES_DIST	./Makefile	/^am__libbitcoin_zmq_a_SOURCES_DIST = zmq\/zmqabstractnotifier.cpp \\$/;"	m
am__libbitcoinconsensus_la_SOURCES_DIST	./Makefile	/^am__libbitcoinconsensus_la_SOURCES_DIST = crypto\/aes.cpp crypto\/aes.h \\$/;"	m
am__libsecp256k1_common_la_SOURCES_DIST	./secp256k1/Makefile	/^am__libsecp256k1_common_la_SOURCES_DIST = src\/asm\/field_10x26_arm.s$/;"	m
am__list_recheck_tests	./Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__list_recheck_tests	./secp256k1/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__list_recheck_tests	./univalue/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__make_dryrun	./Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	./secp256k1/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	./univalue/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	./Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	./secp256k1/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	./univalue/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	./Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	./secp256k1/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	./univalue/Makefile	/^am__make_running_with_option = \\$/;"	m
am__maybe_remake_depfiles	./Makefile	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__maybe_remake_depfiles	./secp256k1/Makefile	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__maybe_remake_depfiles	./univalue/Makefile	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__mv	./Makefile	/^am__mv = mv -f$/;"	m
am__mv	./secp256k1/Makefile	/^am__mv = mv -f$/;"	m
am__mv	./univalue/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	./Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	./secp256k1/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	./univalue/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	./Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	./secp256k1/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	./univalue/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	./Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	./secp256k1/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	./univalue/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__noinst_HEADERS_DIST	./secp256k1/Makefile	/^am__noinst_HEADERS_DIST = src\/scalar.h src\/scalar_4x64.h \\$/;"	m
am__objects_1	./Makefile	/^am__objects_1 = crypto\/libbitcoin_crypto_base_a-sha256_sse4.$(OBJEXT)$/;"	m
am__objects_21	./Makefile	/^am__objects_21 =  \\$/;"	m
am__objects_22	./Makefile	/^am__objects_22 = crypto\/libbitcoinconsensus_la-aes.lo \\$/;"	m
am__objects_23	./Makefile	/^am__objects_23 = libbitcoinconsensus_la-arith_uint256.lo \\$/;"	m
am__objects_3	./Makefile	/^am__objects_3 = leveldb\/port\/libleveldb_a-port_posix.$(OBJEXT)$/;"	m
am__objects_39	./Makefile	/^am__objects_39 = test\/fuzz_address_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_4	./Makefile	/^am__objects_4 =$/;"	m
am__objects_40	./Makefile	/^am__objects_40 = test\/fuzz_addrman_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_41	./Makefile	/^am__objects_41 = test\/fuzz_banentry_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_42	./Makefile	/^am__objects_42 = test\/fuzz_block_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_43	./Makefile	/^am__objects_43 = test\/fuzz_blockheader_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_44	./Makefile	/^am__objects_44 = test\/fuzz_blocklocator_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_45	./Makefile	/^am__objects_45 = test\/fuzz_blockmerkleroot-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_46	./Makefile	/^am__objects_46 = test\/fuzz_blocktransactions_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_47	./Makefile	/^am__objects_47 = test\/fuzz_blocktransactionsrequest_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_48	./Makefile	/^am__objects_48 = test\/fuzz_blockundo_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_49	./Makefile	/^am__objects_49 = test\/fuzz_bloomfilter_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_5	./Makefile	/^am__objects_5 = libbitcoin_server_a-dummywallet.$(OBJEXT)$/;"	m
am__objects_50	./Makefile	/^am__objects_50 = test\/fuzz_coins_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_51	./Makefile	/^am__objects_51 = test\/fuzz_diskblockindex_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_52	./Makefile	/^am__objects_52 = test\/fuzz_inv_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_53	./Makefile	/^am__objects_53 = test\/fuzz_messageheader_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_54	./Makefile	/^am__objects_54 = test\/fuzz_netaddr_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_55	./Makefile	/^am__objects_55 = test\/fuzz_script_flags-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_56	./Makefile	/^am__objects_56 = test\/fuzz_service_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_57	./Makefile	/^am__objects_57 = test\/fuzz_transaction_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_58	./Makefile	/^am__objects_58 = test\/fuzz_txoutcompressor_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_59	./Makefile	/^am__objects_59 = test\/fuzz_txundo_deserialize-test_bitcoin.$(OBJEXT) \\$/;"	m
am__objects_62	./Makefile	/^am__objects_62 = test\/test_bitcoin-main.$(OBJEXT) \\$/;"	m
am__objects_65	./Makefile	/^am__objects_65 = test\/test_bitcoin-arith_uint256_tests.$(OBJEXT) \\$/;"	m
am__objects_66	./Makefile	/^am__objects_66 = $(am__objects_4) $(am__objects_4)$/;"	m
am__post_remove_distdir	./secp256k1/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__post_remove_distdir	./univalue/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__qt_bitcoin_qt_SOURCES_DIST	./Makefile	/^am__qt_bitcoin_qt_SOURCES_DIST = qt\/main.cpp qt\/res\/bitcoin-qt-res.rc$/;"	m
am__qt_libbitcoinqt_a_SOURCES_DIST	./Makefile	/^am__qt_libbitcoinqt_a_SOURCES_DIST = qt\/bantablemodel.cpp \\$/;"	m
am__qt_test_test_bitcoin_qt_SOURCES_DIST	./Makefile	/^am__qt_test_test_bitcoin_qt_SOURCES_DIST = qt\/test\/apptests.cpp \\$/;"	m
am__quote	./Makefile	/^am__quote = $/;"	m
am__quote	./secp256k1/Makefile	/^am__quote = $/;"	m
am__quote	./univalue/Makefile	/^am__quote = $/;"	m
am__recheck_rx	./Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recheck_rx	./secp256k1/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recheck_rx	./univalue/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recursive_targets	./Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	./Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	./secp256k1/Makefile	/^am__remove_distdir = \\$/;"	m
am__remove_distdir	./univalue/Makefile	/^am__remove_distdir = \\$/;"	m
am__rst_title	./Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__rst_title	./secp256k1/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__rst_title	./univalue/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__set_TESTS_bases	./Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_TESTS_bases	./secp256k1/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_TESTS_bases	./univalue/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_b	./Makefile	/^am__set_b = \\$/;"	m
am__set_b	./secp256k1/Makefile	/^am__set_b = \\$/;"	m
am__set_b	./univalue/Makefile	/^am__set_b = \\$/;"	m
am__sh_e_setup	./Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__sh_e_setup	./secp256k1/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__sh_e_setup	./univalue/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__strip_dir	./Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	./secp256k1/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	./univalue/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	./Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	./secp256k1/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	./univalue/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tar	./Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	./secp256k1/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	./univalue/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__test_fuzz_address_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_address_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_addrman_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_addrman_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_banentry_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_banentry_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_block_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_block_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_blockheader_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_blockheader_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blocklocator_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_blocklocator_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blockmerkleroot_SOURCES_DIST	./Makefile	/^am__test_fuzz_blockmerkleroot_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_blocktransactions_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_blocktransactions_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blocktransactionsrequest_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_blocktransactionsrequest_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_blockundo_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_blockundo_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_bloomfilter_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_bloomfilter_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_coins_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_coins_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_diskblockindex_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_diskblockindex_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_inv_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_inv_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_messageheader_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_messageheader_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_netaddr_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_netaddr_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_script_flags_SOURCES_DIST	./Makefile	/^am__test_fuzz_script_flags_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_service_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_service_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_fuzz_transaction_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_transaction_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_txoutcompressor_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_txoutcompressor_deserialize_SOURCES_DIST =  \\$/;"	m
am__test_fuzz_txundo_deserialize_SOURCES_DIST	./Makefile	/^am__test_fuzz_txundo_deserialize_SOURCES_DIST = test\/test_bitcoin.h \\$/;"	m
am__test_logs1	./Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs1	./secp256k1/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs1	./univalue/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs2	./Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_logs2	./secp256k1/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_logs2	./univalue/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_test_bitcoin_SOURCES_DIST	./Makefile	/^am__test_test_bitcoin_SOURCES_DIST = test\/main.cpp test\/test_bitcoin.h \\$/;"	m
am__tests_SOURCES_DIST	./secp256k1/Makefile	/^am__tests_SOURCES_DIST = src\/tests.c$/;"	m
am__tty_colors	./Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors	./secp256k1/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors	./univalue/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	./Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__tty_colors_dummy	./secp256k1/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__tty_colors_dummy	./univalue/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	./Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	./secp256k1/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	./univalue/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	./Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	./secp256k1/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	./univalue/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	./Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	./secp256k1/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	./univalue/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	./Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	./Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	./Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCAS_	./secp256k1/Makefile	/^am__v_CCAS_ = $(am__v_CCAS_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCAS_0	./secp256k1/Makefile	/^am__v_CCAS_0 = @echo "  CCAS    " $@;$/;"	m
am__v_CCAS_1	./secp256k1/Makefile	/^am__v_CCAS_1 = $/;"	m
am__v_CCLD_	./Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_	./secp256k1/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	./Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	./secp256k1/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	./Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	./secp256k1/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	./Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_	./secp256k1/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	./Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	./secp256k1/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	./Makefile	/^am__v_CC_1 = $/;"	m
am__v_CC_1	./secp256k1/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	./Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_	./univalue/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	./Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_0	./univalue/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	./Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXXLD_1	./univalue/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	./Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_	./univalue/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	./Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_0	./univalue/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	./Makefile	/^am__v_CXX_1 = $/;"	m
am__v_CXX_1	./univalue/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	./Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	./secp256k1/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	./univalue/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	./Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	./secp256k1/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	./univalue/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	./Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	./secp256k1/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	./univalue/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_OBJCXXLD_	./Makefile	/^am__v_OBJCXXLD_ = $(am__v_OBJCXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXXLD_0	./Makefile	/^am__v_OBJCXXLD_0 = @echo "  OBJCXXLD" $@;$/;"	m
am__v_OBJCXXLD_1	./Makefile	/^am__v_OBJCXXLD_1 = $/;"	m
am__v_OBJCXX_	./Makefile	/^am__v_OBJCXX_ = $(am__v_OBJCXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXX_0	./Makefile	/^am__v_OBJCXX_0 = @echo "  OBJCXX  " $@;$/;"	m
am__v_OBJCXX_1	./Makefile	/^am__v_OBJCXX_1 = $/;"	m
am__v_P_	./Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	./secp256k1/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	./univalue/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	./Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	./secp256k1/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	./univalue/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	./Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	./secp256k1/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	./univalue/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	./Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	./secp256k1/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	./univalue/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	./Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	./secp256k1/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	./univalue/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	./Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	./secp256k1/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	./univalue/Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	./Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	./secp256k1/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	./univalue/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	./Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	./secp256k1/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	./univalue/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	./Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	./secp256k1/Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	./univalue/Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	./Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	./secp256k1/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	./univalue/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	./Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	./secp256k1/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	./univalue/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_bitcoin_cli_OBJECTS	./Makefile	/^am_bitcoin_cli_OBJECTS = bitcoin_cli-bitcoin-cli.$(OBJEXT) \\$/;"	m
am_bitcoin_tx_OBJECTS	./Makefile	/^am_bitcoin_tx_OBJECTS = bitcoin_tx-bitcoin-tx.$(OBJEXT) \\$/;"	m
am_bitcoin_wallet_OBJECTS	./Makefile	/^am_bitcoin_wallet_OBJECTS = bitcoin_wallet-bitcoin-wallet.$(OBJEXT) \\$/;"	m
am_bitcoind_OBJECTS	./Makefile	/^am_bitcoind_OBJECTS = bitcoind-bitcoind.$(OBJEXT) $(am__objects_30)$/;"	m
am_crypto_libbitcoin_crypto_avx2_a_OBJECTS	./Makefile	/^am_crypto_libbitcoin_crypto_avx2_a_OBJECTS =  \\$/;"	m
am_crypto_libbitcoin_crypto_base_a_OBJECTS	./Makefile	/^am_crypto_libbitcoin_crypto_base_a_OBJECTS =  \\$/;"	m
am_crypto_libbitcoin_crypto_shani_a_OBJECTS	./Makefile	/^am_crypto_libbitcoin_crypto_shani_a_OBJECTS =  \\$/;"	m
am_crypto_libbitcoin_crypto_sse41_a_OBJECTS	./Makefile	/^am_crypto_libbitcoin_crypto_sse41_a_OBJECTS =  \\$/;"	m
am_exhaustive_tests_OBJECTS	./secp256k1/Makefile	/^am_exhaustive_tests_OBJECTS = src\/exhaustive_tests-tests_exhaustive.$(OBJEXT)$/;"	m
am_leveldb_libleveldb_a_OBJECTS	./Makefile	/^am_leveldb_libleveldb_a_OBJECTS = leveldb\/db\/libleveldb_a-builder.$(OBJEXT) \\$/;"	m
am_leveldb_libleveldb_sse42_a_OBJECTS	./Makefile	/^am_leveldb_libleveldb_sse42_a_OBJECTS = leveldb\/port\/libleveldb_sse42_a-port_posix_sse.$(OBJEXT)$/;"	m
am_leveldb_libmemenv_a_OBJECTS	./Makefile	/^am_leveldb_libmemenv_a_OBJECTS = leveldb\/helpers\/memenv\/libmemenv_a-memenv.$(OBJEXT)$/;"	m
am_libbitcoin_cli_a_OBJECTS	./Makefile	/^am_libbitcoin_cli_a_OBJECTS = rpc\/libbitcoin_cli_a-client.$(OBJEXT) \\$/;"	m
am_libbitcoin_common_a_OBJECTS	./Makefile	/^am_libbitcoin_common_a_OBJECTS = libbitcoin_common_a-base58.$(OBJEXT) \\$/;"	m
am_libbitcoin_consensus_a_OBJECTS	./Makefile	/^am_libbitcoin_consensus_a_OBJECTS =  \\$/;"	m
am_libbitcoin_server_a_OBJECTS	./Makefile	/^am_libbitcoin_server_a_OBJECTS = libbitcoin_server_a-addrdb.$(OBJEXT) \\$/;"	m
am_libbitcoin_util_a_OBJECTS	./Makefile	/^am_libbitcoin_util_a_OBJECTS =  \\$/;"	m
am_libbitcoin_wallet_a_OBJECTS	./Makefile	/^am_libbitcoin_wallet_a_OBJECTS =  \\$/;"	m
am_libbitcoin_wallet_tool_a_OBJECTS	./Makefile	/^am_libbitcoin_wallet_tool_a_OBJECTS =  \\$/;"	m
am_libbitcoin_zmq_a_OBJECTS	./Makefile	/^am_libbitcoin_zmq_a_OBJECTS = zmq\/libbitcoin_zmq_a-zmqabstractnotifier.$(OBJEXT) \\$/;"	m
am_libbitcoinconsensus_la_OBJECTS	./Makefile	/^am_libbitcoinconsensus_la_OBJECTS =  \\$/;"	m
am_libbitcoinconsensus_la_rpath	./Makefile	/^am_libbitcoinconsensus_la_rpath = -rpath \\$/;"	m
am_libsecp256k1_jni_la_OBJECTS	./secp256k1/Makefile	/^am_libsecp256k1_jni_la_OBJECTS =  \\$/;"	m
am_libsecp256k1_la_OBJECTS	./secp256k1/Makefile	/^am_libsecp256k1_la_OBJECTS = src\/libsecp256k1_la-secp256k1.lo$/;"	m
am_libunivalue_la_OBJECTS	./univalue/Makefile	/^am_libunivalue_la_OBJECTS = lib\/libunivalue_la-univalue.lo \\$/;"	m
am_test_no_nul_OBJECTS	./univalue/Makefile	/^am_test_no_nul_OBJECTS = test\/no_nul-no_nul.$(OBJEXT)$/;"	m
am_test_object_OBJECTS	./univalue/Makefile	/^am_test_object_OBJECTS = test\/object-object.$(OBJEXT)$/;"	m
am_test_test_bitcoin_OBJECTS	./Makefile	/^am_test_test_bitcoin_OBJECTS = $(am__objects_62) \\$/;"	m
am_test_test_json_OBJECTS	./univalue/Makefile	/^am_test_test_json_OBJECTS = test\/test_json-test_json.$(OBJEXT)$/;"	m
am_test_unitester_OBJECTS	./univalue/Makefile	/^am_test_unitester_OBJECTS = test\/unitester-unitester.$(OBJEXT)$/;"	m
am_tests_OBJECTS	./secp256k1/Makefile	/^am_tests_OBJECTS = src\/tests-tests.$(OBJEXT)$/;"	m
amount	./qt/bitcoinamountfield.h	/^    AmountSpinBox *amount;$/;"	m	class:BitcoinAmountField
amount	./qt/walletmodel.h	/^    CAmount amount;$/;"	m	class:SendCoinsRecipient
amount	./script/interpreter.h	/^    const CAmount amount;$/;"	m	class:GenericTransactionSignatureChecker
amount	./script/sign.h	/^    CAmount amount;$/;"	m	class:MutableTransactionSignatureCreator
amount	./wallet/wallet.h	/^    CAmount amount;$/;"	m	struct:COutputEntry
amountWidget	./qt/transactionview.h	/^    QLineEdit *amountWidget;$/;"	m	class:TransactionView
analyzepsbt	./rpc/rawtransaction.cpp	/^UniValue analyzepsbt(const JSONRPCRequest& request)$/;"	f
ancestor_score	./txmempool.h	/^struct ancestor_score {};$/;"	s
appIcon	./qt/networkstyle.h	/^    QIcon appIcon;$/;"	m	class:NetworkStyle
appMenuBar	./qt/bitcoingui.h	/^    QMenuBar* appMenuBar = nullptr;$/;"	m	class:BitcoinGUI
appName	./qt/networkstyle.cpp	/^    const char *appName;$/;"	m	struct:__anon65	file:
appName	./qt/networkstyle.h	/^    QString appName;$/;"	m	class:NetworkStyle
appTests	./qt/test/apptests.cpp	/^void AppTests::appTests()$/;"	f	class:AppTests
appToolBar	./qt/bitcoingui.h	/^    QToolBar* appToolBar = nullptr;$/;"	m	class:BitcoinGUI
appendCommand	./rpc/server.cpp	/^bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)$/;"	f	class:CRPCTable
append_codepoint	./univalue/lib/univalue_utffilter.h	/^    void append_codepoint(unsigned int codepoint_)$/;"	f	class:JSONUTF8StringFilter
arbitrary	./test/gen/crypto_gen.h	/^    static Gen<CKey> arbitrary()$/;"	f	struct:rc::Arbitrary
arbitrary	./test/gen/crypto_gen.h	/^    static Gen<CPrivKey> arbitrary()$/;"	f	struct:rc::Arbitrary
arbitrary	./test/gen/crypto_gen.h	/^    static Gen<CPubKey> arbitrary()$/;"	f	struct:rc::Arbitrary
arbitrary	./test/gen/crypto_gen.h	/^    static Gen<uint256> arbitrary()$/;"	f	struct:rc::Arbitrary
arena_	./leveldb/db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	./leveldb/db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	./leveldb/db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arenas	./support/lockedpool.h	/^    std::list<LockedPageArena> arenas;$/;"	m	class:LockedPool
arg	./leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon8::PosixEnv::BGItem	file:
arg	./leveldb/util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon8::__anon9::StartThreadState	file:
arg1	./leveldb/include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	./leveldb/include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
argNames	./rpc/server.h	/^    std::vector<std::string> argNames;$/;"	m	class:CRPCCommand
arg_	./leveldb/table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
argc	./util/system.h	/^    int argc;$/;"	m	class:util::WinCmdLineArgs
args	./util/system.h	/^    std::vector<std::string> args;$/;"	m	class:util::WinCmdLineArgs
argv	./util/system.h	/^    char** argv;$/;"	m	class:util::WinCmdLineArgs
arith_uint256	./arith_uint256.h	/^    arith_uint256() {}$/;"	f	class:arith_uint256
arith_uint256	./arith_uint256.h	/^    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	./arith_uint256.h	/^    arith_uint256(uint64_t b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	./arith_uint256.h	/^    explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}$/;"	f	class:arith_uint256
arith_uint256	./arith_uint256.h	/^class arith_uint256 : public base_uint<256> {$/;"	c
arith_uint256V	./test/arith_uint256_tests.cpp	/^static inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)$/;"	f	file:
as_fn_append	./secp256k1/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	./secp256k1/configure	/^  as_fn_append ()$/;"	f
as_fn_append	./univalue/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	./univalue/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	./secp256k1/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	./secp256k1/configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	./univalue/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	./univalue/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	./secp256k1/config.status	/^as_fn_error ()$/;"	f
as_fn_error	./secp256k1/configure	/^as_fn_error ()$/;"	f
as_fn_error	./univalue/config.status	/^as_fn_error ()$/;"	f
as_fn_error	./univalue/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	./secp256k1/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	./secp256k1/configure	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	./univalue/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	./univalue/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	./secp256k1/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	./secp256k1/configure	/^as_fn_exit ()$/;"	f
as_fn_exit	./univalue/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	./univalue/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	./secp256k1/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	./univalue/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	./secp256k1/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	./secp256k1/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	./univalue/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	./univalue/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	./secp256k1/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	./univalue/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	./secp256k1/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	./univalue/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	./secp256k1/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	./secp256k1/configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	./univalue/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	./univalue/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	./secp256k1/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	./univalue/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	./secp256k1/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	./secp256k1/configure	/^as_fn_unset ()$/;"	f
as_fn_unset	./univalue/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	./univalue/configure	/^as_fn_unset ()$/;"	f
assertEquals	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static void assertEquals( String val, String val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assertEquals	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static void assertEquals( boolean val, boolean val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assertEquals	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^    public static void assertEquals( int val, int val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assign	./prevector.h	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:prevector
assign	./prevector.h	/^    void assign(size_type n, const T& val) {$/;"	f	class:prevector
assign	./test/prevector_tests.cpp	/^    void assign(Size n, const T& value) {$/;"	f	class:prevector_tester
assign_big_endian	./secp256k1/src/tests.c	/^static void assign_big_endian(unsigned char *ptr, size_t ptrlen, uint32_t val) {$/;"	f	file:
async_handler	./torcontrol.cpp	/^    boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;$/;"	m	class:TorControlConnection	file:
atoi	./util/strencodings.cpp	/^int atoi(const std::string& str)$/;"	f
atoi64	./util/strencodings.cpp	/^int64_t atoi64(const char* psz)$/;"	f
atoi64	./util/strencodings.cpp	/^int64_t atoi64(const std::string& str)$/;"	f
authUser	./rpc/server.h	/^    std::string authUser;$/;"	m	class:JSONRPCRequest
auth_cb	./torcontrol.cpp	/^void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
authchallenge_cb	./torcontrol.cpp	/^void TorController::authchallenge_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
authenticatedMerchant	./qt/walletmodel.h	/^    QString authenticatedMerchant;$/;"	m	class:SendCoinsRecipient
autoCompleter	./qt/rpcconsole.h	/^    QCompleter *autoCompleter = nullptr;$/;"	m	class:RPCConsole
available	./sync.cpp	/^    bool available;$/;"	m	struct:LockData	file:
availableUnits	./qt/bitcoinunits.cpp	/^QList<BitcoinUnits::Unit> BitcoinUnits::availableUnits()$/;"	f	class:BitcoinUnits
avg	./policy/fees.cpp	/^    std::vector<double> avg;$/;"	m	class:TxConfirmStats	file:
ax_pthread_config	./Makefile	/^ax_pthread_config = $/;"	m
bOutOfSync	./qt/walletframe.h	/^    bool bOutOfSync;$/;"	m	class:WalletFrame
b_conn	./torcontrol.cpp	/^    struct bufferevent *b_conn;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::bufferevent	file:
back	./prevector.h	/^    T& back() {$/;"	f	class:prevector
back	./prevector.h	/^    const T& back() const {$/;"	f	class:prevector
backing_store_	./leveldb/db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
backupWallet	./qt/walletframe.cpp	/^void WalletFrame::backupWallet()$/;"	f	class:WalletFrame
backupWallet	./qt/walletview.cpp	/^void WalletView::backupWallet()$/;"	f	class:WalletView
backupWalletAction	./qt/bitcoingui.h	/^    QAction* backupWalletAction = nullptr;$/;"	m	class:BitcoinGUI
backupwallet	./wallet/rpcwallet.cpp	/^static UniValue backupwallet(const JSONRPCRequest& request)$/;"	f	file:
balance	./interfaces/wallet.h	/^    CAmount balance = 0;$/;"	m	struct:interfaces::WalletBalances
balance	./wallet/test/coinselector_tests.cpp	/^static CAmount balance = 0;$/;"	v	file:
balanceChanged	./interfaces/wallet.h	/^    bool balanceChanged(const WalletBalances& prev) const$/;"	f	struct:interfaces::WalletBalances
banEntry	./qt/bantablemodel.h	/^    CBanEntry banEntry;$/;"	m	struct:CCombinedBan
banReason	./addrdb.h	/^    uint8_t banReason;$/;"	m	class:CBanEntry
banReasonToString	./addrdb.h	/^    std::string banReasonToString() const$/;"	f	class:CBanEntry
banSelectedNode	./qt/rpcconsole.cpp	/^void RPCConsole::banSelectedNode(int bantime)$/;"	f	class:RPCConsole
banTableContextMenu	./qt/rpcconsole.h	/^    QMenu *banTableContextMenu = nullptr;$/;"	m	class:RPCConsole
banTableModel	./qt/clientmodel.h	/^    BanTableModel *banTableModel;$/;"	m	class:ClientModel
banmap_t	./addrdb.h	/^typedef std::map<CSubNet, CBanEntry> banmap_t;$/;"	t
base	./coins.h	/^    CCoinsView *base;$/;"	m	class:CCoinsViewBacked
base	./httprpc.cpp	/^    struct event_base* base;$/;"	m	class:HTTPRPCTimerInterface	typeref:struct:HTTPRPCTimerInterface::event_base	file:
base	./indirectmap.h	/^    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;$/;"	t	class:indirectmap
base	./leveldb/util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon5::Test	file:
base	./support/allocators/secure.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base	./support/allocators/zeroafterfree.h	/^    typedef std::allocator<T> base;$/;"	t	struct:zero_after_free_allocator
base	./support/lockedpool.h	/^        void *base;$/;"	m	class:LockedPool::LockedPageArena
base	./support/lockedpool.h	/^    char* base;$/;"	m	class:Arena
base	./torcontrol.cpp	/^    struct event_base *base;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::event_base	file:
base	./torcontrol.cpp	/^    struct event_base* base;$/;"	m	class:TorController	typeref:struct:TorController::event_base	file:
base58Prefixes	./chainparams.h	/^    std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];$/;"	m	class:CChainParams
base58_encode_decode	./test/data/base58_encode_decode.json.h	/^static unsigned const char base58_encode_decode[] = {$/;"	m	namespace:json_tests
baseInitialize	./qt/bitcoin.cpp	/^bool BitcoinApplication::baseInitialize()$/;"	f	class:BitcoinApplication
base_	./leveldb/db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder	file:
base_blob	./uint256.cpp	/^base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)$/;"	f	class:base_blob
base_blob	./uint256.h	/^    base_blob()$/;"	f	class:base_blob
base_blob	./uint256.h	/^class base_blob$/;"	c
base_lg_	./leveldb/table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
base_uint	./arith_uint256.cpp	/^base_uint<BITS>::base_uint(const std::string& str)$/;"	f	class:base_uint
base_uint	./arith_uint256.h	/^    base_uint()$/;"	f	class:base_uint
base_uint	./arith_uint256.h	/^    base_uint(const base_uint& b)$/;"	f	class:base_uint
base_uint	./arith_uint256.h	/^    base_uint(uint64_t b)$/;"	f	class:base_uint
base_uint	./arith_uint256.h	/^class base_uint$/;"	c
batch	./dbwrapper.h	/^    leveldb::WriteBatch batch;$/;"	m	class:CDBBatch
batch	./leveldb/db/db_impl.cc	/^  WriteBatch* batch;$/;"	m	struct:leveldb::DBImpl::Writer	file:
be16toh	./compat/endian.h	/^inline uint16_t be16toh(uint16_t big_endian_16bits)$/;"	f
be32toh	./compat/endian.h	/^inline uint32_t be32toh(uint32_t big_endian_32bits)$/;"	f
be64toh	./compat/endian.h	/^inline uint64_t be64toh(uint64_t big_endian_64bits)$/;"	f
bech32	./bech32.cpp	/^namespace bech32$/;"	n	file:
bech32	./bech32.h	/^namespace bech32$/;"	n
bech32_hrp	./chainparams.h	/^    std::string bech32_hrp;$/;"	m	class:CChainParams
begin	./indirectmap.h	/^    const_iterator begin() const    { return m.begin(); }$/;"	f	class:indirectmap
begin	./indirectmap.h	/^    iterator begin()                { return m.begin(); }$/;"	f	class:indirectmap
begin	./key.h	/^    const unsigned char* begin() const { return keydata.data(); }$/;"	f	class:CKey
begin	./leveldb/db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
begin	./limitedmap.h	/^    const_iterator begin() const { return map.begin(); }$/;"	f	class:limitedmap
begin	./prevector.h	/^    const_iterator begin() const { return const_iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	./prevector.h	/^    iterator begin() { return iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	./pubkey.h	/^    const unsigned char* begin() const { return vch; }$/;"	f	class:CPubKey
begin	./streams.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	./streams.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	./uint256.h	/^    const unsigned char* begin() const$/;"	f	class:base_blob
begin	./uint256.h	/^    unsigned char* begin()$/;"	f	class:base_blob
bench_AES128_decrypt	./crypto/ctaes/bench.c	/^static void bench_AES128_decrypt(void* data) {$/;"	f	file:
bench_AES128_encrypt	./crypto/ctaes/bench.c	/^static void bench_AES128_encrypt(void* data) {$/;"	f	file:
bench_AES128_encrypt_setup	./crypto/ctaes/bench.c	/^static void bench_AES128_encrypt_setup(void* data) {$/;"	f	file:
bench_AES128_init	./crypto/ctaes/bench.c	/^static void bench_AES128_init(void* data) {$/;"	f	file:
bench_AES192_decrypt	./crypto/ctaes/bench.c	/^static void bench_AES192_decrypt(void* data) {$/;"	f	file:
bench_AES192_encrypt	./crypto/ctaes/bench.c	/^static void bench_AES192_encrypt(void* data) {$/;"	f	file:
bench_AES192_encrypt_setup	./crypto/ctaes/bench.c	/^static void bench_AES192_encrypt_setup(void* data) {$/;"	f	file:
bench_AES192_init	./crypto/ctaes/bench.c	/^static void bench_AES192_init(void* data) {$/;"	f	file:
bench_AES256_decrypt	./crypto/ctaes/bench.c	/^static void bench_AES256_decrypt(void* data) {$/;"	f	file:
bench_AES256_encrypt	./crypto/ctaes/bench.c	/^static void bench_AES256_encrypt(void* data) {$/;"	f	file:
bench_AES256_encrypt_setup	./crypto/ctaes/bench.c	/^static void bench_AES256_encrypt_setup(void* data) {$/;"	f	file:
bench_AES256_init	./crypto/ctaes/bench.c	/^static void bench_AES256_init(void* data) {$/;"	f	file:
bench_bench_bitcoin_LINK	./Makefile	/^bench_bench_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
bench_bench_bitcoin_OBJECTS	./Makefile	/^bench_bench_bitcoin_OBJECTS = $(am_bench_bench_bitcoin_OBJECTS) \\$/;"	m
bench_context_sign	./secp256k1/src/bench_internal.c	/^void bench_context_sign(void* arg) {$/;"	f
bench_context_verify	./secp256k1/src/bench_internal.c	/^void bench_context_verify(void* arg) {$/;"	f
bench_ecdh	./secp256k1/src/bench_ecdh.c	/^static void bench_ecdh(void* arg) {$/;"	f	file:
bench_ecdh_OBJECTS	./secp256k1/Makefile	/^bench_ecdh_OBJECTS = $(am_bench_ecdh_OBJECTS)$/;"	m
bench_ecdh_setup	./secp256k1/src/bench_ecdh.c	/^static void bench_ecdh_setup(void* arg) {$/;"	f	file:
bench_ecdh_t	./secp256k1/src/bench_ecdh.c	/^} bench_ecdh_t;$/;"	t	typeref:struct:__anon108	file:
bench_ecmult_wnaf	./secp256k1/src/bench_internal.c	/^void bench_ecmult_wnaf(void* arg) {$/;"	f
bench_field_inverse	./secp256k1/src/bench_internal.c	/^void bench_field_inverse(void* arg) {$/;"	f
bench_field_inverse_var	./secp256k1/src/bench_internal.c	/^void bench_field_inverse_var(void* arg) {$/;"	f
bench_field_mul	./secp256k1/src/bench_internal.c	/^void bench_field_mul(void* arg) {$/;"	f
bench_field_normalize	./secp256k1/src/bench_internal.c	/^void bench_field_normalize(void* arg) {$/;"	f
bench_field_normalize_weak	./secp256k1/src/bench_internal.c	/^void bench_field_normalize_weak(void* arg) {$/;"	f
bench_field_sqr	./secp256k1/src/bench_internal.c	/^void bench_field_sqr(void* arg) {$/;"	f
bench_field_sqrt	./secp256k1/src/bench_internal.c	/^void bench_field_sqrt(void* arg) {$/;"	f
bench_group_add_affine	./secp256k1/src/bench_internal.c	/^void bench_group_add_affine(void* arg) {$/;"	f
bench_group_add_affine_var	./secp256k1/src/bench_internal.c	/^void bench_group_add_affine_var(void* arg) {$/;"	f
bench_group_add_var	./secp256k1/src/bench_internal.c	/^void bench_group_add_var(void* arg) {$/;"	f
bench_group_double_var	./secp256k1/src/bench_internal.c	/^void bench_group_double_var(void* arg) {$/;"	f
bench_group_jacobi_var	./secp256k1/src/bench_internal.c	/^void bench_group_jacobi_var(void* arg) {$/;"	f
bench_hmac_sha256	./secp256k1/src/bench_internal.c	/^void bench_hmac_sha256(void* arg) {$/;"	f
bench_internal_OBJECTS	./secp256k1/Makefile	/^bench_internal_OBJECTS = $(am_bench_internal_OBJECTS)$/;"	m
bench_inv_t	./secp256k1/src/bench_internal.c	/^} bench_inv_t;$/;"	t	typeref:struct:__anon109	file:
bench_num_jacobi	./secp256k1/src/bench_internal.c	/^void bench_num_jacobi(void* arg) {$/;"	f
bench_recover	./secp256k1/src/bench_recover.c	/^void bench_recover(void* arg) {$/;"	f
bench_recover_OBJECTS	./secp256k1/Makefile	/^bench_recover_OBJECTS = $(am_bench_recover_OBJECTS)$/;"	m
bench_recover_setup	./secp256k1/src/bench_recover.c	/^void bench_recover_setup(void* arg) {$/;"	f
bench_recover_t	./secp256k1/src/bench_recover.c	/^} bench_recover_t;$/;"	t	typeref:struct:__anon98	file:
bench_rfc6979_hmac_sha256	./secp256k1/src/bench_internal.c	/^void bench_rfc6979_hmac_sha256(void* arg) {$/;"	f
bench_scalar_add	./secp256k1/src/bench_internal.c	/^void bench_scalar_add(void* arg) {$/;"	f
bench_scalar_inverse	./secp256k1/src/bench_internal.c	/^void bench_scalar_inverse(void* arg) {$/;"	f
bench_scalar_inverse_var	./secp256k1/src/bench_internal.c	/^void bench_scalar_inverse_var(void* arg) {$/;"	f
bench_scalar_mul	./secp256k1/src/bench_internal.c	/^void bench_scalar_mul(void* arg) {$/;"	f
bench_scalar_negate	./secp256k1/src/bench_internal.c	/^void bench_scalar_negate(void* arg) {$/;"	f
bench_scalar_split	./secp256k1/src/bench_internal.c	/^void bench_scalar_split(void* arg) {$/;"	f
bench_scalar_sqr	./secp256k1/src/bench_internal.c	/^void bench_scalar_sqr(void* arg) {$/;"	f
bench_setup	./secp256k1/src/bench_internal.c	/^void bench_setup(void* arg) {$/;"	f
bench_sha256	./secp256k1/src/bench_internal.c	/^void bench_sha256(void* arg) {$/;"	f
bench_sign	./secp256k1/src/bench_sign.c	/^static void bench_sign(void* arg) {$/;"	f	file:
bench_sign_OBJECTS	./secp256k1/Makefile	/^bench_sign_OBJECTS = $(am_bench_sign_OBJECTS)$/;"	m
bench_sign_setup	./secp256k1/src/bench_sign.c	/^static void bench_sign_setup(void* arg) {$/;"	f	file:
bench_sign_t	./secp256k1/src/bench_sign.c	/^} bench_sign_t;$/;"	t	typeref:struct:__anon102	file:
bench_verify_OBJECTS	./secp256k1/Makefile	/^bench_verify_OBJECTS = $(am_bench_verify_OBJECTS)$/;"	m
bench_wnaf_const	./secp256k1/src/bench_internal.c	/^void bench_wnaf_const(void* arg) {$/;"	f
benchmark	./bench/bench.h	/^namespace benchmark {$/;"	n
benchmark_verify	./secp256k1/src/bench_verify.c	/^static void benchmark_verify(void* arg) {$/;"	f	file:
benchmark_verify_openssl	./secp256k1/src/bench_verify.c	/^static void benchmark_verify_openssl(void* arg) {$/;"	f	file:
benchmark_verify_t	./secp256k1/src/bench_verify.c	/^} benchmark_verify_t;$/;"	t	typeref:struct:__anon106	file:
benchmarks	./bench/bench.cpp	/^benchmark::BenchRunner::BenchmarkMap& benchmark::BenchRunner::benchmarks()$/;"	f	class:benchmark::BenchRunner
bestHeaderDate	./qt/modaloverlay.h	/^    QDateTime bestHeaderDate;$/;"	m	class:ModalOverlay
bestHeaderHeight	./qt/modaloverlay.h	/^    int bestHeaderHeight; \/\/best known height (based on the headers)$/;"	m	class:ModalOverlay
best_clock	./bench/bench.h	/^struct best_clock {$/;"	s	namespace:benchmark
bg_compaction_scheduled_	./leveldb/db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	./leveldb/db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when background work finishes$/;"	m	class:leveldb::DBImpl
bg_error_	./leveldb/db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bgsignal_	./leveldb/util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
bgthread_	./leveldb/util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
bin_PROGRAMS	./Makefile	/^bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
bindir	./Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	./secp256k1/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	./univalue/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit	./consensus/params.h	/^    int bit;$/;"	m	struct:Consensus::BIP9Deployment
bit	./validation.cpp	/^    int bit;$/;"	m	class:WarningBitsConditionChecker	file:
bit_is_set	./cuckoocache.h	/^    inline bool bit_is_set(uint32_t s) const$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	./cuckoocache.h	/^    explicit bit_packed_atomic_flags(uint32_t size)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	./cuckoocache.h	/^class bit_packed_atomic_flags$/;"	c	namespace:CuckooCache
bit_set	./cuckoocache.h	/^    inline void bit_set(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_unset	./cuckoocache.h	/^    inline void bit_unset(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bitbuf	./random.h	/^    uint64_t bitbuf;$/;"	m	class:FastRandomContext
bitbuf_size	./random.h	/^    int bitbuf_size;$/;"	m	class:FastRandomContext
bitcoin_cli_CPPFLAGS	./Makefile	/^bitcoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)$/;"	m
bitcoin_cli_CXXFLAGS	./Makefile	/^bitcoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_cli_DEPENDENCIES	./Makefile	/^bitcoin_cli_DEPENDENCIES = $(LIBBITCOIN_CLI) $(am__DEPENDENCIES_4) \\$/;"	m
bitcoin_cli_LDADD	./Makefile	/^bitcoin_cli_LDADD = $(LIBBITCOIN_CLI) $(LIBUNIVALUE) \\$/;"	m
bitcoin_cli_LDFLAGS	./Makefile	/^bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_cli_LINK	./Makefile	/^bitcoin_cli_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoin_cli_OBJECTS	./Makefile	/^bitcoin_cli_OBJECTS = $(am_bitcoin_cli_OBJECTS)$/;"	m
bitcoin_cli_SOURCES	./Makefile	/^bitcoin_cli_SOURCES = bitcoin-cli.cpp $(am__append_13)$/;"	m
bitcoin_strings	./qt/bitcoinstrings.cpp	/^static const char UNUSED *bitcoin_strings[] = {$/;"	v	file:
bitcoin_tx_CPPFLAGS	./Makefile	/^bitcoin_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoin_tx_CXXFLAGS	./Makefile	/^bitcoin_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_tx_DEPENDENCIES	./Makefile	/^bitcoin_tx_DEPENDENCIES = $(am__DEPENDENCIES_4) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoin_tx_LDADD	./Makefile	/^bitcoin_tx_LDADD = $(LIBUNIVALUE) $(LIBBITCOIN_COMMON) \\$/;"	m
bitcoin_tx_LDFLAGS	./Makefile	/^bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_tx_LINK	./Makefile	/^bitcoin_tx_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoin_tx_OBJECTS	./Makefile	/^bitcoin_tx_OBJECTS = $(am_bitcoin_tx_OBJECTS)$/;"	m
bitcoin_tx_SOURCES	./Makefile	/^bitcoin_tx_SOURCES = bitcoin-tx.cpp $(am__append_14)$/;"	m
bitcoin_wallet_CPPFLAGS	./Makefile	/^bitcoin_wallet_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoin_wallet_CXXFLAGS	./Makefile	/^bitcoin_wallet_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoin_wallet_DEPENDENCIES	./Makefile	/^bitcoin_wallet_DEPENDENCIES = $(LIBBITCOIN_WALLET_TOOL) \\$/;"	m
bitcoin_wallet_LDADD	./Makefile	/^bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(LIBBITCOIN_WALLET) \\$/;"	m
bitcoin_wallet_LDFLAGS	./Makefile	/^bitcoin_wallet_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoin_wallet_LINK	./Makefile	/^bitcoin_wallet_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
bitcoin_wallet_OBJECTS	./Makefile	/^bitcoin_wallet_OBJECTS = $(am_bitcoin_wallet_OBJECTS)$/;"	m
bitcoin_wallet_SOURCES	./Makefile	/^bitcoin_wallet_SOURCES = bitcoin-wallet.cpp $(am__append_15)$/;"	m
bitcoinconsensus_ERR_AMOUNT_REQUIRED	./script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_AMOUNT_REQUIRED,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_INVALID_FLAGS	./script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_INVALID_FLAGS,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_OK	./script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_OK = 0,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_DESERIALIZE	./script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_DESERIALIZE,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_INDEX	./script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_INDEX,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_SIZE_MISMATCH	./script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_SIZE_MISMATCH,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL                 = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG |$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), \/\/ enable CHECKLOCKTIMEVERIFY (BIP65)$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), \/\/ enable CHECKSEQUENCEVERIFY (BIP112)$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), \/\/ enforce strict DER (BIP66) compliance$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), \/\/ enforce NULLDUMMY (BIP147)$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), \/\/ evaluate P2SH (BIP16) subscripts$/;"	e	enum:__anon80
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS	./script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), \/\/ enable WITNESS (BIP141)$/;"	e	enum:__anon80
bitcoinconsensus_error	./script/bitcoinconsensus.h	/^} bitcoinconsensus_error;$/;"	t	typeref:enum:bitcoinconsensus_error_t
bitcoinconsensus_error_t	./script/bitcoinconsensus.h	/^typedef enum bitcoinconsensus_error_t$/;"	g
bitcoinconsensus_verify_script	./script/bitcoinconsensus.cpp	/^int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,$/;"	f
bitcoinconsensus_verify_script_with_amount	./script/bitcoinconsensus.cpp	/^int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, int64_t amount,$/;"	f
bitcoinconsensus_version	./script/bitcoinconsensus.cpp	/^unsigned int bitcoinconsensus_version()$/;"	f
bitcoind_CPPFLAGS	./Makefile	/^bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
bitcoind_CXXFLAGS	./Makefile	/^bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bitcoind_DEPENDENCIES	./Makefile	/^bitcoind_DEPENDENCIES = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_WALLET) \\$/;"	m
bitcoind_LDADD	./Makefile	/^bitcoind_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_WALLET) \\$/;"	m
bitcoind_LDFLAGS	./Makefile	/^bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bitcoind_LINK	./Makefile	/^bitcoind_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
bitcoind_OBJECTS	./Makefile	/^bitcoind_OBJECTS = $(am_bitcoind_OBJECTS)$/;"	m
bitcoind_SOURCES	./Makefile	/^bitcoind_SOURCES = bitcoind.cpp $(am__append_12)$/;"	m
bits	./arith_uint256.cpp	/^unsigned int base_uint<BITS>::bits() const$/;"	f	class:base_uint
bitsPerSample	./qt/notificator.cpp	/^    int bitsPerSample;$/;"	m	class:FreedesktopImage	file:
bits_per_key_	./leveldb/util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon3::BloomFilterPolicy	file:
blind	./secp256k1/src/ecmult_gen.h	/^    secp256k1_scalar blind;$/;"	m	struct:__anon100
block	./miner.h	/^    CBlock block;$/;"	m	struct:CBlockTemplate
blockHeight	./policy/fees.h	/^        unsigned int blockHeight;$/;"	m	struct:FeeEstimateHorizon::CBlockPolicyEstimator::TxStatsInfo
blockMinFeeRate	./miner.h	/^        CFeeRate blockMinFeeRate;$/;"	m	struct:BlockAssembler::Options
blockMinFeeRate	./miner.h	/^    CFeeRate blockMinFeeRate;$/;"	m	class:BlockAssembler
blockMinFeeRate	./test/miner_tests.cpp	/^static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);$/;"	v	file:
blockProcessTime	./qt/modaloverlay.h	/^    QVector<QPair<qint64, double> > blockProcessTime;$/;"	m	class:ModalOverlay
blockSinceLastRollingFeeBump	./txmempool.h	/^    mutable bool blockSinceLastRollingFeeBump;$/;"	m	class:CTxMemPool
blockToJSON	./rpc/blockchain.cpp	/^UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails)$/;"	f
block_	./leveldb/table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_bench	./bench/checkblock.cpp	/^namespace block_bench {$/;"	n	file:
block_cache	./leveldb/include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	./leveldb/table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
block_height	./interfaces/wallet.h	/^    int block_height;$/;"	m	struct:interfaces::WalletTxStatus
block_offset_	./leveldb/db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_restart_interval	./leveldb/include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	./leveldb/include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
blockfilters	./test/data/blockfilters.json.h	/^static unsigned const char blockfilters[] = {$/;"	m	namespace:json_tests
blockhash	./blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactions
blockhash	./blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactionsRequest
blockheaderToJSON	./rpc/blockchain.cpp	/^UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex)$/;"	f
blockinfo	./test/miner_tests.cpp	/^} blockinfo[] = {$/;"	v	typeref:struct:__anon59	file:
blockingGUIThreadConnection	./qt/guiutil.cpp	/^Qt::ConnectionType blockingGUIThreadConnection()$/;"	f	namespace:GUIUtil
blocksConnected	./validation.cpp	/^    std::vector<PerBlockConnectTrace> blocksConnected;$/;"	m	class:ConnectTrace	file:
blocksDir	./qt/clientmodel.cpp	/^QString ClientModel::blocksDir() const$/;"	f	class:ClientModel
blocks_	./leveldb/helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon35::FileState	file:
blocks_	./leveldb/util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_to_maturity	./interfaces/wallet.h	/^    int blocks_to_maturity;$/;"	m	struct:interfaces::WalletTxStatus
bloomflags	./bloom.h	/^enum bloomflags$/;"	g
bm	./leveldb/db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
body	./bitcoin-cli.cpp	/^    std::string body;$/;"	m	struct:HTTPReply	file:
boolval	./test/serialize_tests.cpp	/^    bool boolval;$/;"	m	class:CSerializeMethodsTestSingle	file:
boost	./init.h	/^namespace boost$/;"	n
boost	./interfaces/handler.h	/^namespace boost {$/;"	n
boost	./ui_interface.h	/^namespace boost {$/;"	n
boostPathToQString	./qt/guiutil.cpp	/^QString boostPathToQString(const fs::path &path)$/;"	f	namespace:GUIUtil
boundSockets	./httpserver.cpp	/^std::vector<evhttp_bound_socket *> boundSockets;$/;"	v
bringToFront	./qt/guiutil.cpp	/^void bringToFront(QWidget* w)$/;"	f	namespace:GUIUtil
browseHistory	./qt/rpcconsole.cpp	/^void RPCConsole::browseHistory(int offset)$/;"	f	class:RPCConsole
bswapTests	./qt/test/compattests.cpp	/^void CompatTests::bswapTests()$/;"	f	class:CompatTests
bswap_16	./compat/byteswap.h	/^#define bswap_16(/;"	d
bswap_16	./compat/byteswap.h	/^inline uint16_t bswap_16(uint16_t x)$/;"	f
bswap_32	./compat/byteswap.h	/^#define bswap_32(/;"	d
bswap_32	./compat/byteswap.h	/^inline uint32_t bswap_32(uint32_t x)$/;"	f
bswap_64	./compat/byteswap.h	/^#define bswap_64(/;"	d
bswap_64	./compat/byteswap.h	/^inline uint64_t bswap_64(uint64_t x)$/;"	f
bucketIndex	./policy/fees.h	/^        unsigned int bucketIndex;$/;"	m	struct:FeeEstimateHorizon::CBlockPolicyEstimator::TxStatsInfo
bucketMap	./policy/fees.cpp	/^    const std::map<double, unsigned int>& bucketMap; \/\/ Map of bucket upper-bound to index into all vectors by bucket$/;"	m	class:TxConfirmStats	file:
buckets	./policy/fees.cpp	/^    const std::vector<double>& buckets;              \/\/ The upper-bound of the range for the bucket (inclusive)$/;"	m	class:TxConfirmStats	file:
buckets_	./leveldb/util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buf	./crypto/ripemd160.h	/^    unsigned char buf[64];$/;"	m	class:CRIPEMD160
buf	./crypto/sha1.h	/^    unsigned char buf[64];$/;"	m	class:CSHA1
buf	./crypto/sha256.h	/^    unsigned char buf[64];$/;"	m	class:CSHA256
buf	./crypto/sha512.h	/^    unsigned char buf[128];$/;"	m	class:CSHA512
buf	./secp256k1/src/hash.h	/^    uint32_t buf[16]; \/* In big endian *\/$/;"	m	struct:__anon111
buffer	./leveldb/db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	./leveldb/db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	./leveldb/table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
build	./Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build	./secp256k1/Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build	./univalue/Makefile	/^build = x86_64-apple-darwin17.7.0$/;"	m
build_alias	./Makefile	/^build_alias = $/;"	m
build_alias	./secp256k1/Makefile	/^build_alias = $/;"	m
build_alias	./univalue/Makefile	/^build_alias = $/;"	m
build_cpu	./Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	./secp256k1/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	./univalue/Makefile	/^build_cpu = x86_64$/;"	m
build_os	./Makefile	/^build_os = darwin17.7.0$/;"	m
build_os	./secp256k1/Makefile	/^build_os = darwin17.7.0$/;"	m
build_os	./univalue/Makefile	/^build_os = darwin17.7.0$/;"	m
build_triplet	./Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_triplet	./secp256k1/Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_triplet	./univalue/Makefile	/^build_triplet = x86_64-apple-darwin17.7.0$/;"	m
build_vendor	./Makefile	/^build_vendor = apple$/;"	m
build_vendor	./secp256k1/Makefile	/^build_vendor = apple$/;"	m
build_vendor	./univalue/Makefile	/^build_vendor = apple$/;"	m
builddir	./Makefile	/^builddir = .$/;"	m
builddir	./secp256k1/Makefile	/^builddir = .$/;"	m
builddir	./univalue/Makefile	/^builddir = .$/;"	m
builder	./leveldb/db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
bumpFee	./qt/transactionview.cpp	/^void TransactionView::bumpFee()$/;"	f	class:TransactionView
bumpFee	./qt/walletmodel.cpp	/^bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)$/;"	f	class:WalletModel
bumpFeeAction	./qt/transactionview.h	/^    QAction *bumpFeeAction;$/;"	m	class:TransactionView
bumpfee	./wallet/rpcwallet.cpp	/^static UniValue bumpfee(const JSONRPCRequest& request)$/;"	f	file:
buttonBoxClicked	./qt/coincontroldialog.cpp	/^void CoinControlDialog::buttonBoxClicked(QAbstractButton* button)$/;"	f	class:CoinControlDialog
buttonSelectAllClicked	./qt/coincontroldialog.cpp	/^void CoinControlDialog::buttonSelectAllClicked()$/;"	f	class:CoinControlDialog
bytebuf	./random.h	/^    unsigned char bytebuf[64];$/;"	m	class:FastRandomContext
bytebuf_size	./random.h	/^    int bytebuf_size;$/;"	m	class:FastRandomContext
bytes	./crypto/ripemd160.h	/^    uint64_t bytes;$/;"	m	class:CRIPEMD160
bytes	./crypto/sha1.h	/^    uint64_t bytes;$/;"	m	class:CSHA1
bytes	./crypto/sha256.h	/^    uint64_t bytes;$/;"	m	class:CSHA256
bytes	./crypto/sha512.h	/^    uint64_t bytes;$/;"	m	class:CSHA512
bytes	./secp256k1/src/hash.h	/^    size_t bytes;$/;"	m	struct:__anon111
bytes_	./leveldb/db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon19::Stats	file:
bytes_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_counter_	./leveldb/db/db_iter.cc	/^  ssize_t bytes_counter_;$/;"	m	class:leveldb::__anon29::DBIter	file:
bytes_read	./leveldb/db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	./leveldb/db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	./leveldb/util/comparator.cc	/^static const Comparator* bytewise;$/;"	m	namespace:leveldb	file:
caCert1_BASE64	./qt/test/paymentrequestdata.h	/^const char* caCert1_BASE64 =$/;"	v
caCert2_BASE64	./qt/test/paymentrequestdata.h	/^const char* caCert2_BASE64 =$/;"	v
cachable	./leveldb/table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache	./cuckoocache.h	/^    cache() : table(), size(), collection_flags(0), epoch_flags(),$/;"	f	class:CuckooCache::cache
cache	./cuckoocache.h	/^class cache$/;"	c	namespace:CuckooCache
cache	./test/versionbits_tests.cpp	/^    mutable ThresholdConditionCache cache;$/;"	m	class:TestConditionChecker	file:
cacheCoins	./coins.h	/^    mutable CCoinsMap cacheCoins;$/;"	m	class:CCoinsViewCache
cacheMap	./txmempool.h	/^    typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;$/;"	t	class:CTxMemPool
cacheStore	./validation.h	/^    bool cacheStore;$/;"	m	class:CScriptCheck
cache_	./leveldb/db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	./leveldb/db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	./leveldb/util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	./leveldb/table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
cachedAddressTable	./qt/addresstablemodel.cpp	/^    QList<AddressTableEntry> cachedAddressTable;$/;"	m	class:AddressTablePriv	file:
cachedBanlist	./qt/bantablemodel.cpp	/^    QList<CCombinedBan> cachedBanlist;$/;"	m	class:BanTablePriv	file:
cachedBestHeaderHeight	./qt/clientmodel.h	/^    mutable std::atomic<int> cachedBestHeaderHeight;$/;"	m	class:ClientModel
cachedBestHeaderTime	./qt/clientmodel.h	/^    mutable std::atomic<int64_t> cachedBestHeaderTime;$/;"	m	class:ClientModel
cachedCoinsUsage	./coins.h	/^    mutable size_t cachedCoinsUsage;$/;"	m	class:CCoinsViewCache
cachedEncryptionStatus	./qt/walletmodel.h	/^    EncryptionStatus cachedEncryptionStatus;$/;"	m	class:WalletModel
cachedInnerUsage	./txmempool.h	/^    uint64_t cachedInnerUsage = 0;$/;"	m	struct:DisconnectedBlockTransactions
cachedInnerUsage	./txmempool.h	/^    uint64_t cachedInnerUsage; \/\/!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)$/;"	m	class:CTxMemPool
cachedMinimumSizeHint	./qt/bitcoinamountfield.cpp	/^    mutable QSize cachedMinimumSizeHint;$/;"	m	class:AmountSpinBox	file:
cachedNodeStats	./qt/peertablemodel.cpp	/^    QList<CNodeCombinedStats> cachedNodeStats;$/;"	m	class:PeerTablePriv	file:
cachedNodeids	./qt/rpcconsole.h	/^    QList<NodeId> cachedNodeids;$/;"	m	class:RPCConsole
cachedNumBlocks	./qt/walletmodel.h	/^    int cachedNumBlocks;$/;"	m	class:WalletModel
cachedWallet	./qt/transactiontablemodel.cpp	/^    QList<TransactionRecord> cachedWallet;$/;"	m	class:TransactionTablePriv	file:
caches	./versionbits.h	/^    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:VersionBitsCache
calculateIdealFontSize	./qt/guiutil.cpp	/^qreal calculateIdealFontSize(int width, const QString& text, QFont font, qreal minPointSize, qreal font_size) {$/;"	f	namespace:GUIUtil
canGetAddresses	./qt/walletmodel.cpp	/^bool WalletModel::canGetAddresses() const$/;"	f	class:WalletModel
capacity	./prevector.h	/^            size_type capacity;$/;"	m	struct:prevector::direct_or_indirect::__anon73
capacity	./prevector.h	/^    size_t capacity() const {$/;"	f	class:prevector
capacity	./test/prevector_tests.cpp	/^    Size capacity() const {$/;"	f	class:prevector_tester
capacity_	./leveldb/util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
category	./logging.cpp	/^    std::string category;$/;"	m	struct:CLogCategoryDesc	file:
category	./logging.h	/^    std::string category;$/;"	m	struct:CLogCategoryActive
category	./rpc/server.h	/^    std::string category;$/;"	m	class:CRPCCommand
categoryClass	./qt/rpcconsole.cpp	/^static QString categoryClass(int category)$/;"	f	file:
cbegin	./indirectmap.h	/^    const_iterator cbegin() const   { return m.cbegin(); }$/;"	f	class:indirectmap
cend	./indirectmap.h	/^    const_iterator cend() const     { return m.cend(); }$/;"	f	class:indirectmap
certStore	./qt/paymentserver.cpp	/^    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;$/;"	m	namespace:__anon70	file:
chRejectCode	./consensus/validation.h	/^    unsigned int chRejectCode;$/;"	m	class:CValidationState
chRejectCode	./net_processing.cpp	/^    unsigned char chRejectCode;$/;"	m	struct:__anon89::CBlockReject	file:
chain	./init.h	/^    std::unique_ptr<interfaces::Chain> chain;$/;"	m	struct:InitInterfaces
chain	./wallet/wallet.h	/^    interfaces::Chain& chain() const { assert(m_chain); return *m_chain; }$/;"	f	class:final
chainTxData	./chainparams.h	/^    ChainTxData chainTxData;$/;"	m	class:CChainParams
chain_clients	./init.h	/^    std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;$/;"	m	struct:InitInterfaces
chaincode	./key.h	/^    ChainCode chaincode;$/;"	m	struct:CExtKey
chaincode	./pubkey.h	/^    ChainCode chaincode;$/;"	m	struct:CExtPubKey
chainparams	./miner.h	/^    const CChainParams& chainparams;$/;"	m	class:BlockAssembler
change	./interfaces/wallet.h	/^    CAmount change;$/;"	m	struct:interfaces::WalletTx
changeEvent	./qt/bitcoingui.cpp	/^void BitcoinGUI::changeEvent(QEvent *e)$/;"	f	class:BitcoinGUI
changePassphrase	./qt/walletframe.cpp	/^void WalletFrame::changePassphrase()$/;"	f	class:WalletFrame
changePassphrase	./qt/walletmodel.cpp	/^bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureString &newPass)$/;"	f	class:WalletModel
changePassphrase	./qt/walletview.cpp	/^void WalletView::changePassphrase()$/;"	f	class:WalletView
changePassphraseAction	./qt/bitcoingui.h	/^    QAction* changePassphraseAction = nullptr;$/;"	m	class:BitcoinGUI
change_capacity	./prevector.h	/^    void change_capacity(size_type new_capacity) {$/;"	f	class:prevector
change_output_size	./wallet/wallet.h	/^    size_t change_output_size = 0;$/;"	m	struct:CoinSelectionParams
change_spend_size	./wallet/wallet.h	/^    size_t change_spend_size = 0;$/;"	m	struct:CoinSelectionParams
changedAmount	./qt/transactionview.cpp	/^void TransactionView::changedAmount()$/;"	f	class:TransactionView
changedSearch	./qt/transactionview.cpp	/^void TransactionView::changedSearch()$/;"	f	class:TransactionView
channels	./qt/notificator.cpp	/^    int channels;$/;"	m	class:FreedesktopImage	file:
charge	./leveldb/util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
charstrval	./test/serialize_tests.cpp	/^    char charstrval[16];$/;"	m	class:CSerializeMethodsTestSingle	file:
check	./qt/intro.cpp	/^void FreespaceChecker::check()$/;"	f	class:FreespaceChecker
check	./txmempool.cpp	/^void CTxMemPool::check(const CCoinsViewCache *pcoins) const$/;"	f	class:CTxMemPool
checkAndMigrate	./qt/optionsmodel.cpp	/^void OptionsModel::checkAndMigrate()$/;"	f	class:OptionsModel
checkBalanceChanged	./qt/walletmodel.cpp	/^void WalletModel::checkBalanceChanged(const interfaces::WalletBalances& new_balances)$/;"	f	class:WalletModel
checkObject	./univalue/lib/univalue.cpp	/^bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const$/;"	f	class:UniValue
checkPath	./qt/intro.cpp	/^void Intro::checkPath(const QString &dataDir)$/;"	f	class:Intro
checkPoint	./qt/guiutil.cpp	/^bool checkPoint(const QPoint &p, const QWidget *w)$/;"	f	namespace:GUIUtil
checkSubtractFeeFromAmount	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::checkSubtractFeeFromAmount()$/;"	f	class:SendCoinsEntry
checkValidator	./qt/qvalidatedlineedit.h	/^    const QValidator *checkValidator;$/;"	m	class:QValidatedLineEdit
checkValidity	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::checkValidity()$/;"	f	class:QValidatedLineEdit
check_fe_equal	./secp256k1/src/tests.c	/^int check_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
check_fe_inverse	./secp256k1/src/tests.c	/^int check_fe_inverse(const secp256k1_fe *a, const secp256k1_fe *ai) {$/;"	f
check_id	./test/checkqueue_tests.cpp	/^    size_t check_id;$/;"	m	struct:UniqueCheck	file:
checked_malloc	./secp256k1/src/util.h	/^static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {$/;"	f
checker	./script/sign.cpp	/^    BaseSignatureChecker& checker;$/;"	m	class:final	file:
checker	./script/sign.h	/^    const MutableTransactionSignatureChecker checker;$/;"	m	class:MutableTransactionSignatureCreator
checker	./test/versionbits_tests.cpp	/^    TestConditionChecker checker[CHECKERS];$/;"	m	class:VersionBitsTester	file:
checker_always	./test/versionbits_tests.cpp	/^    TestAlwaysActiveConditionChecker checker_always[CHECKERS];$/;"	m	class:VersionBitsTester	file:
checkpointData	./chainparams.h	/^    CCheckpointData checkpointData;$/;"	m	class:CChainParams
checksum_	./leveldb/db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children	./txmempool.h	/^        setEntries children;$/;"	m	struct:CTxMemPool::TxLinks
children_	./leveldb/table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
chooseDate	./qt/transactionview.cpp	/^void TransactionView::chooseDate(int idx)$/;"	f	class:TransactionView
chooseType	./qt/transactionview.cpp	/^void TransactionView::chooseType(int idx)$/;"	f	class:TransactionView
chooseWatchonly	./qt/transactionview.cpp	/^void TransactionView::chooseWatchonly(int idx)$/;"	f	class:TransactionView
chunks_free	./support/lockedpool.h	/^        size_t chunks_free;$/;"	m	struct:Arena::Stats
chunks_free	./support/lockedpool.h	/^        size_t chunks_free;$/;"	m	struct:LockedPool::Stats
chunks_free	./support/lockedpool.h	/^    ChunkToSizeMap chunks_free;$/;"	m	class:Arena
chunks_free_end	./support/lockedpool.h	/^    ChunkToSizeMap chunks_free_end;$/;"	m	class:Arena
chunks_used	./support/lockedpool.h	/^        size_t chunks_used;$/;"	m	struct:Arena::Stats
chunks_used	./support/lockedpool.h	/^        size_t chunks_used;$/;"	m	struct:LockedPool::Stats
chunks_used	./support/lockedpool.h	/^    std::unordered_map<char*, size_t> chunks_used;$/;"	m	class:Arena
cipher	./crypto/ctaes/test.c	/^    const char* cipher;$/;"	m	struct:__anon44	file:
class_type	./memusage.h	/^    void* class_type;$/;"	m	struct:memusage::stl_shared_counter
cleanSubVer	./net.h	/^    std::string cleanSubVer;$/;"	m	class:CNodeStats
cleanup	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static synchronized void cleanup() {$/;"	m	class:NativeSecp256k1
cleanup_	./leveldb/include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	./bloom.cpp	/^void CBloomFilter::clear()$/;"	f	class:CBloomFilter
clear	./indirectmap.h	/^    void clear()                    { m.clear(); }$/;"	f	class:indirectmap
clear	./leveldb/include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
clear	./prevector.h	/^    void clear() {$/;"	f	class:prevector
clear	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::clear()$/;"	f	class:BitcoinAmountField
clear	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::clear()$/;"	f	class:QValidatedLineEdit
clear	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::clear()$/;"	f	class:ReceiveCoinsDialog
clear	./qt/rpcconsole.cpp	/^void RPCConsole::clear(bool clearHistory)$/;"	f	class:RPCConsole
clear	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::clear()$/;"	f	class:SendCoinsDialog
clear	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::clear()$/;"	f	class:SendCoinsEntry
clear	./qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::clear()$/;"	f	class:TrafficGraphWidget
clear	./script/script.h	/^    void clear()$/;"	f	class:CScript
clear	./script/sign.h	/^    void clear()$/;"	f	struct:KeyOriginInfo
clear	./streams.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	./test/prevector_tests.cpp	/^    void clear() {$/;"	f	class:prevector_tester
clear	./txmempool.cpp	/^void CTxMemPool::clear()$/;"	f	class:CTxMemPool
clear	./txmempool.h	/^    void clear()$/;"	f	struct:DisconnectedBlockTransactions
clear	./univalue/lib/univalue.cpp	/^void UniValue::clear()$/;"	f	class:UniValue
clearExpect	./univalue/lib/univalue_read.cpp	/^#define clearExpect(/;"	d	file:
clearSelectedNode	./qt/rpcconsole.cpp	/^void RPCConsole::clearSelectedNode()$/;"	f	class:RPCConsole
clearStatusLabel	./qt/optionsdialog.cpp	/^void OptionsDialog::clearStatusLabel()$/;"	f	class:OptionsDialog
clearbanned	./rpc/net.cpp	/^static UniValue clearbanned(const JSONRPCRequest& request)$/;"	f	file:
clientInterface	./net.h	/^    CClientUIInterface* clientInterface;$/;"	m	class:CConnman
clientModel	./qt/bantablemodel.h	/^    ClientModel *clientModel;$/;"	m	class:BanTableModel
clientModel	./qt/bitcoin.h	/^    ClientModel *clientModel;$/;"	m	class:BitcoinApplication
clientModel	./qt/bitcoingui.h	/^    ClientModel* clientModel = nullptr;$/;"	m	class:BitcoinGUI
clientModel	./qt/overviewpage.h	/^    ClientModel *clientModel;$/;"	m	class:OverviewPage
clientModel	./qt/peertablemodel.h	/^    ClientModel *clientModel;$/;"	m	class:PeerTableModel
clientModel	./qt/rpcconsole.h	/^    ClientModel *clientModel = nullptr;$/;"	m	class:RPCConsole
clientModel	./qt/sendcoinsdialog.h	/^    ClientModel *clientModel;$/;"	m	class:SendCoinsDialog
clientModel	./qt/trafficgraphwidget.h	/^    ClientModel *clientModel;$/;"	m	class:TrafficGraphWidget
clientModel	./qt/walletframe.h	/^    ClientModel *clientModel;$/;"	m	class:WalletFrame
clientModel	./qt/walletview.h	/^    ClientModel *clientModel;$/;"	m	class:WalletView
clientNonce	./torcontrol.cpp	/^    std::vector<uint8_t> clientNonce;$/;"	m	class:TorController	file:
clipboardAfterFee	./qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardAfterFee()$/;"	f	class:CoinControlDialog
clipboardAmount	./qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardAmount()$/;"	f	class:CoinControlDialog
clipboardBytes	./qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardBytes()$/;"	f	class:CoinControlDialog
clipboardChange	./qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardChange()$/;"	f	class:CoinControlDialog
clipboardFee	./qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardFee()$/;"	f	class:CoinControlDialog
clipboardLowOutput	./qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardLowOutput()$/;"	f	class:CoinControlDialog
clipboardQuantity	./qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardQuantity()$/;"	f	class:CoinControlDialog
cloneContext	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static long cloneContext() {$/;"	m	class:NativeSecp256k1
close	./fs.cpp	/^void ifstream::close()$/;"	f	class:fsbridge::ifstream
close	./fs.cpp	/^void ofstream::close()$/;"	f	class:fsbridge::ofstream
close	./leveldb/port/port_win.h	/^#define close /;"	d
closeClicked	./qt/modaloverlay.cpp	/^void ModalOverlay::closeClicked()$/;"	f	class:ModalOverlay
closeEvent	./qt/bitcoingui.cpp	/^void BitcoinGUI::closeEvent(QCloseEvent *event)$/;"	f	class:BitcoinGUI
closeEvent	./qt/splashscreen.cpp	/^void SplashScreen::closeEvent(QCloseEvent *event)$/;"	f	class:SplashScreen
closeEvent	./qt/utilitydialog.cpp	/^void ShutdownWindow::closeEvent(QCloseEvent *event)$/;"	f	class:ShutdownWindow
closeWallet	./qt/walletcontroller.cpp	/^void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)$/;"	f	class:WalletController
closed	./leveldb/table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
cmdBeforeBrowsing	./qt/rpcconsole.h	/^    QString cmdBeforeBrowsing;$/;"	m	class:RPCConsole
cmp	./leveldb/table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon16::STLLessThan	file:
code	./leveldb/include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
code	./torcontrol.cpp	/^    int code;$/;"	m	class:TorControlReply	file:
codepoint	./univalue/lib/univalue_utffilter.h	/^    unsigned int codepoint;$/;"	m	class:JSONUTF8StringFilter
coin	./coins.h	/^    Coin coin; \/\/ The actual cached data.$/;"	m	struct:CCoinsCacheEntry
coinControl	./qt/coincontroldialog.cpp	/^CCoinControl* CoinControlDialog::coinControl()$/;"	f	class:CoinControlDialog
coinControlButtonClicked	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlButtonClicked()$/;"	f	class:SendCoinsDialog
coinControlChangeChecked	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlChangeChecked(int state)$/;"	f	class:SendCoinsDialog
coinControlChangeEdited	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlChangeEdited(const QString& text)$/;"	f	class:SendCoinsDialog
coinControlClipboardAfterFee	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardAfterFee()$/;"	f	class:SendCoinsDialog
coinControlClipboardAmount	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardAmount()$/;"	f	class:SendCoinsDialog
coinControlClipboardBytes	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardBytes()$/;"	f	class:SendCoinsDialog
coinControlClipboardChange	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardChange()$/;"	f	class:SendCoinsDialog
coinControlClipboardFee	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardFee()$/;"	f	class:SendCoinsDialog
coinControlClipboardLowOutput	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardLowOutput()$/;"	f	class:SendCoinsDialog
coinControlClipboardQuantity	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardQuantity()$/;"	f	class:SendCoinsDialog
coinControlFeatureChanged	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlFeatureChanged(bool checked)$/;"	f	class:SendCoinsDialog
coinControlUpdateLabels	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlUpdateLabels()$/;"	f	class:SendCoinsDialog
coinEmpty	./coins.cpp	/^static const Coin coinEmpty;$/;"	v	file:
coinbaseKey	./test/setup_common.h	/^    CKey coinbaseKey; \/\/ private\/public key needed to spend coinbase transactions$/;"	m	struct:TestChain100Setup
collection_flags	./cuckoocache.h	/^    mutable bit_packed_atomic_flags collection_flags;$/;"	m	class:CuckooCache::cache
color	./memusage.h	/^    int color;$/;"	m	struct:memusage::stl_tree_node
colorizeIcons	./qt/platformstyle.cpp	/^    const bool colorizeIcons;$/;"	m	struct:__anon66	file:
colorizeIcons	./qt/platformstyle.h	/^    bool colorizeIcons;$/;"	m	class:PlatformStyle
column	./qt/bantablemodel.h	/^    int column;$/;"	m	class:BannedNodeLessThan
column	./qt/csvmodelwriter.h	/^        int column;$/;"	m	struct:CSVModelWriter::Column
column	./qt/peertablemodel.h	/^    int column;$/;"	m	class:NodeLessThan
column	./qt/recentrequeststablemodel.h	/^    int column;$/;"	m	class:RecentRequestEntryLessThan
columnCount	./qt/addresstablemodel.cpp	/^int AddressTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
columnCount	./qt/bantablemodel.cpp	/^int BanTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:BanTableModel
columnCount	./qt/guiutil.h	/^            int columnCount;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
columnCount	./qt/peertablemodel.cpp	/^int PeerTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:PeerTableModel
columnCount	./qt/recentrequeststablemodel.cpp	/^int RecentRequestsTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
columnCount	./qt/transactiontablemodel.cpp	/^int TransactionTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
columnResizingFixer	./qt/receivecoinsdialog.h	/^    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;$/;"	m	class:ReceiveCoinsDialog
columnResizingFixer	./qt/transactionview.h	/^    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;$/;"	m	class:TransactionView
column_alignments	./qt/transactiontablemodel.cpp	/^static int column_alignments[] = {$/;"	v	file:
columns	./qt/addresstablemodel.h	/^    QStringList columns;$/;"	m	class:AddressTableModel
columns	./qt/bantablemodel.h	/^    QStringList columns;$/;"	m	class:BanTableModel
columns	./qt/csvmodelwriter.h	/^    QList<Column> columns;$/;"	m	class:CSVModelWriter
columns	./qt/peertablemodel.h	/^    QStringList columns;$/;"	m	class:PeerTableModel
columns	./qt/recentrequeststablemodel.h	/^    QStringList columns;$/;"	m	class:RecentRequestsTableModel
columns	./qt/transactiontablemodel.h	/^    QStringList columns;$/;"	m	class:TransactionTableModel
combinepsbt	./rpc/rawtransaction.cpp	/^UniValue combinepsbt(const JSONRPCRequest& request)$/;"	f
combinerawtransaction	./rpc/rawtransaction.cpp	/^static UniValue combinerawtransaction(const JSONRPCRequest& request)$/;"	f	file:
command	./net.h	/^    std::string command;$/;"	m	struct:CSerializedNetMsg
commands	./rpc/blockchain.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	./rpc/mining.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	./rpc/misc.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	./rpc/net.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	./rpc/rawtransaction.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	./wallet/rpcwallet.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	./zmq/zmqrpc.cpp	/^const CRPCCommand commands[] =$/;"	m	namespace:__anon127	file:
comment	./test/script_tests.cpp	/^    std::string comment;$/;"	m	class:__anon58::TestBuilder	file:
comp_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark	file:
compact_pointer_	./leveldb/db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	./leveldb/db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	./leveldb/db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_level_	./leveldb/db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	./leveldb/db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	./leveldb/db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	./leveldb/include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	./leveldb/db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	./leveldb/db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	./leveldb/table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	./leveldb/table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
comparator_	./leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	./leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	./leveldb/include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	./leveldb/db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t	file:
compare_	./leveldb/db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
complete	./net.h	/^    bool complete() const$/;"	f	class:CNetMessage
complete	./script/sign.h	/^    bool complete = false; \/\/\/< Stores whether the scriptSig and scriptWitness are complete$/;"	m	struct:SignatureData
compressed_output	./leveldb/table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	./leveldb/include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
computePubkey	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] computePubkey(byte[] seckey) throws AssertFailException{$/;"	m	class:NativeSecp256k1
compute_hashes	./cuckoocache.h	/^    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const$/;"	f	class:CuckooCache::cache
cond	./httpserver.cpp	/^    std::condition_variable cond;$/;"	m	class:WorkQueue	file:
cond	./threadinterrupt.h	/^    std::condition_variable cond;$/;"	m	class:CThreadInterrupt
condMaster	./checkqueue.h	/^    boost::condition_variable condMaster;$/;"	m	class:CCheckQueue
condMsgProc	./net.h	/^    std::condition_variable condMsgProc;$/;"	m	class:CConnman
condWorker	./checkqueue.h	/^    boost::condition_variable condWorker;$/;"	m	class:CCheckQueue
cond_blockchange	./rpc/blockchain.cpp	/^static std::condition_variable cond_blockchange;$/;"	v	file:
condition	./sync.h	/^    std::condition_variable condition;$/;"	m	class:CSemaphore
confAvg	./policy/fees.cpp	/^    std::vector<std::vector<double>> confAvg; \/\/ confAvg[Y][X]$/;"	m	class:TxConfirmStats	file:
confTargets	./qt/sendcoinsdialog.cpp	/^static const std::array<int, 9> confTargets = { {2, 4, 6, 12, 24, 48, 144, 504, 1008} };$/;"	v	file:
conf_mine	./wallet/coinselection.h	/^    const int conf_mine;$/;"	m	struct:CoinEligibilityFilter
conf_theirs	./wallet/coinselection.h	/^    const int conf_theirs;$/;"	m	struct:CoinEligibilityFilter
config	./leveldb/db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
conflictedTxs	./validation.cpp	/^    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;$/;"	m	struct:PerBlockConnectTrace	file:
conn	./torcontrol.cpp	/^    TorControlConnection conn;$/;"	m	class:TorController	file:
connectViewHeadersSignals	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::connectViewHeadersSignals()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
connected	./torcontrol.cpp	/^    std::function<void(TorControlConnection&)> connected;$/;"	m	class:TorControlConnection	file:
connected_cb	./torcontrol.cpp	/^void TorController::connected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
connectionsControl	./qt/bitcoingui.h	/^    GUIUtil::ClickableLabel* connectionsControl = nullptr;$/;"	m	class:BitcoinGUI
connman	./net_processing.h	/^    CConnman* const connman;$/;"	m	class:final
consensus	./chainparams.h	/^    Consensus::Params consensus;$/;"	m	class:CChainParams
consoleCtrlHandler	./init.cpp	/^static BOOL WINAPI consoleCtrlHandler(DWORD dwCtrlType)$/;"	f	file:
consoleFontSize	./qt/rpcconsole.h	/^    int consoleFontSize = 0;$/;"	m	class:RPCConsole
consoleTests	./qt/test/apptests.cpp	/^void AppTests::consoleTests(RPCConsole* console)$/;"	f	class:AppTests
const_iterator	./indirectmap.h	/^    typedef typename base::const_iterator const_iterator;$/;"	t	class:indirectmap
const_iterator	./limitedmap.h	/^    typedef typename std::map<K, V>::const_iterator const_iterator;$/;"	t	class:limitedmap
const_iterator	./prevector.h	/^        const_iterator(const T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_iterator
const_iterator	./prevector.h	/^        const_iterator(iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_iterator
const_iterator	./prevector.h	/^    class const_iterator {$/;"	c	class:prevector
const_iterator	./streams.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	./prevector.h	/^    typedef const value_type* const_pointer;$/;"	t	class:prevector
const_pointer	./support/allocators/secure.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_pointer	./support/allocators/zeroafterfree.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:zero_after_free_allocator
const_reference	./prevector.h	/^    typedef const value_type& const_reference;$/;"	t	class:prevector
const_reference	./streams.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
const_reference	./support/allocators/secure.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	./support/allocators/zeroafterfree.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:zero_after_free_allocator
const_reverse_iterator	./prevector.h	/^        const_reverse_iterator(const T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	./prevector.h	/^        const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	./prevector.h	/^    class const_reverse_iterator {$/;"	c	class:prevector
constructor_	./leveldb/table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
contains	./bloom.cpp	/^bool CBloomFilter::contains(const COutPoint& outpoint) const$/;"	f	class:CBloomFilter
contains	./bloom.cpp	/^bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CBloomFilter
contains	./bloom.cpp	/^bool CBloomFilter::contains(const uint256& hash) const$/;"	f	class:CBloomFilter
contains	./bloom.cpp	/^bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CRollingBloomFilter
contains	./bloom.cpp	/^bool CRollingBloomFilter::contains(const uint256& hash) const$/;"	f	class:CRollingBloomFilter
contains	./cuckoocache.h	/^    inline bool contains(const Element& e, const bool erase) const$/;"	f	class:CuckooCache::cache
contents	./leveldb/table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	./leveldb/db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	./leveldb/db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	./leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	./leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
context	./secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  private static final long context; \/\/ref to pointer to context obj$/;"	f	class:Secp256k1Context	file:
contextMenu	./qt/addressbookpage.h	/^    QMenu *contextMenu;$/;"	m	class:AddressBookPage
contextMenu	./qt/coincontroldialog.h	/^    QMenu *contextMenu;$/;"	m	class:CoinControlDialog
contextMenu	./qt/qrimagewidget.h	/^    QMenu *contextMenu;$/;"	m	class:QRImageWidget
contextMenu	./qt/receivecoinsdialog.h	/^    QMenu *contextMenu;$/;"	m	class:ReceiveCoinsDialog
contextMenu	./qt/transactionview.h	/^    QMenu *contextMenu;$/;"	m	class:TransactionView
contextMenuEvent	./qt/qrimagewidget.cpp	/^void QRImageWidget::contextMenuEvent(QContextMenuEvent *event)$/;"	f	class:QRImageWidget
contextMenuItem	./qt/coincontroldialog.h	/^    QTreeWidgetItem *contextMenuItem;$/;"	m	class:CoinControlDialog
contextualMenu	./qt/addressbookpage.cpp	/^void AddressBookPage::contextualMenu(const QPoint &point)$/;"	f	class:AddressBookPage
contextualMenu	./qt/transactionview.cpp	/^void TransactionView::contextualMenu(const QPoint &point)$/;"	f	class:TransactionView
convert	./rpc/client.cpp	/^    bool convert(const std::string& method, const std::string& name) {$/;"	f	class:CRPCConvertTable
convert	./rpc/client.cpp	/^    bool convert(const std::string& method, int idx) {$/;"	f	class:CRPCConvertTable
convertSeed6	./net.cpp	/^static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn)$/;"	f	file:
convertToInt	./tinyformat.h	/^struct convertToInt$/;"	s	namespace:tinyformat::detail
convertToInt	./tinyformat.h	/^struct convertToInt<T,true>$/;"	s	namespace:tinyformat::detail
converttopsbt	./rpc/rawtransaction.cpp	/^UniValue converttopsbt(const JSONRPCRequest& request)$/;"	f
cookie	./torcontrol.cpp	/^    std::vector<uint8_t> cookie;$/;"	m	class:TorController	file:
copy	./test/prevector_tests.cpp	/^    void copy() {$/;"	f	class:prevector_tester
copyAddress	./qt/coincontroldialog.cpp	/^void CoinControlDialog::copyAddress()$/;"	f	class:CoinControlDialog
copyAddress	./qt/transactionview.cpp	/^void TransactionView::copyAddress()$/;"	f	class:TransactionView
copyAmount	./qt/coincontroldialog.cpp	/^void CoinControlDialog::copyAmount()$/;"	f	class:CoinControlDialog
copyAmount	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyAmount()$/;"	f	class:ReceiveCoinsDialog
copyAmount	./qt/transactionview.cpp	/^void TransactionView::copyAmount()$/;"	f	class:TransactionView
copyColumnToClipboard	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyColumnToClipboard(int column)$/;"	f	class:ReceiveCoinsDialog
copyEntryData	./qt/guiutil.cpp	/^void copyEntryData(QAbstractItemView *view, int column, int role)$/;"	f	namespace:GUIUtil
copyImage	./qt/qrimagewidget.cpp	/^void QRImageWidget::copyImage()$/;"	f	class:QRImageWidget
copyLabel	./qt/coincontroldialog.cpp	/^void CoinControlDialog::copyLabel()$/;"	f	class:CoinControlDialog
copyLabel	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyLabel()$/;"	f	class:ReceiveCoinsDialog
copyLabel	./qt/transactionview.cpp	/^void TransactionView::copyLabel()$/;"	f	class:TransactionView
copyMessage	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyMessage()$/;"	f	class:ReceiveCoinsDialog
copyStats	./net.cpp	/^void CNode::copyStats(CNodeStats &stats)$/;"	f	class:CNode
copyTransactionHash	./qt/coincontroldialog.cpp	/^void CoinControlDialog::copyTransactionHash()$/;"	f	class:CoinControlDialog
copyTransactionHashAction	./qt/coincontroldialog.h	/^    QAction *copyTransactionHashAction;$/;"	m	class:CoinControlDialog
copyTxHex	./qt/transactionview.cpp	/^void TransactionView::copyTxHex()$/;"	f	class:TransactionView
copyTxID	./qt/transactionview.cpp	/^void TransactionView::copyTxID()$/;"	f	class:TransactionView
copyTxPlainText	./qt/transactionview.cpp	/^void TransactionView::copyTxPlainText()$/;"	f	class:TransactionView
copyURI	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyURI()$/;"	f	class:ReceiveCoinsDialog
coreThread	./qt/bitcoin.h	/^    QThread *coreThread;$/;"	m	class:BitcoinApplication
count	./crypto/siphash.h	/^    int count;$/;"	m	class:CSipHasher
count	./indirectmap.h	/^    size_type count(const K& key) const             { return m.count(&key); }$/;"	f	class:indirectmap
count	./limitedmap.h	/^    size_type count(const key_type& k) const { return map.count(k); }$/;"	f	class:limitedmap
count	./secp256k1/src/tests.c	/^static int count = 64;$/;"	v	file:
count	./test/allocator_tests.cpp	/^    int count;$/;"	m	class:TestLockedPageAllocator	file:
count	./versionbits.h	/^    int count;$/;"	m	struct:BIP9Stats
countDown	./qt/sendcoinsdialog.cpp	/^void SendConfirmationDialog::countDown()$/;"	f	class:SendConfirmationDialog
countDownTimer	./qt/sendcoinsdialog.h	/^    QTimer countDownTimer;$/;"	m	class:SendConfirmationDialog
count_	./leveldb/db/db_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon23::AtomicCounter	file:
count_random_reads_	./leveldb/db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv	file:
counter	./leveldb/db/db_test.cc	/^  port::AtomicPointer counter[kNumThreads];$/;"	m	struct:leveldb::__anon24::MTState	file:
counter_	./leveldb/table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
counting_illegal_callback_fn	./secp256k1/src/tests.c	/^static void counting_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
countsForBalance	./qt/transactionrecord.h	/^    bool countsForBalance;$/;"	m	class:TransactionStatus
cpuid	./crypto/sha256.cpp	/^void inline cpuid(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)$/;"	f	namespace:__anon40
crc32c	./leveldb/util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	./leveldb/util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	./leveldb/util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
createActions	./qt/bitcoingui.cpp	/^void BitcoinGUI::createActions()$/;"	f	class:BitcoinGUI
createContextMenu	./qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::createContextMenu()$/;"	f	class:UnitDisplayStatusBarControl
createDateRangeWidget	./qt/transactionview.cpp	/^QWidget *TransactionView::createDateRangeWidget()$/;"	f	class:TransactionView
createECDHSecret	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] createECDHSecret(byte[] seckey, byte[] pubkey) throws AssertFailException{$/;"	m	class:NativeSecp256k1
createMenuBar	./qt/bitcoingui.cpp	/^void BitcoinGUI::createMenuBar()$/;"	f	class:BitcoinGUI
createOptionsModel	./qt/bitcoin.cpp	/^void BitcoinApplication::createOptionsModel(bool resetSettings)$/;"	f	class:BitcoinApplication
createPaymentServer	./qt/bitcoin.cpp	/^void BitcoinApplication::createPaymentServer()$/;"	f	class:BitcoinApplication
createSplashScreen	./qt/bitcoin.cpp	/^void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)$/;"	f	class:BitcoinApplication
createToolBars	./qt/bitcoingui.cpp	/^void BitcoinGUI::createToolBars()$/;"	f	class:BitcoinGUI
createTrayIcon	./qt/bitcoingui.cpp	/^void BitcoinGUI::createTrayIcon()$/;"	f	class:BitcoinGUI
createTrayIconMenu	./qt/bitcoingui.cpp	/^void BitcoinGUI::createTrayIconMenu()$/;"	f	class:BitcoinGUI
createWindow	./qt/bitcoin.cpp	/^void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)$/;"	f	class:BitcoinApplication
create_	./leveldb/db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t	file:
create_if_missing	./leveldb/include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
createmultisig	./rpc/misc.cpp	/^static UniValue createmultisig(const JSONRPCRequest& request)$/;"	f	file:
createpsbt	./rpc/rawtransaction.cpp	/^UniValue createpsbt(const JSONRPCRequest& request)$/;"	f
createrawtransaction	./rpc/rawtransaction.cpp	/^static UniValue createrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
createwallet	./wallet/rpcwallet.cpp	/^static UniValue createwallet(const JSONRPCRequest& request)$/;"	f	file:
credit	./interfaces/wallet.h	/^    CAmount credit;$/;"	m	struct:interfaces::WalletTx
credit	./qt/transactionrecord.h	/^    CAmount credit;$/;"	m	class:TransactionRecord
creditTx	./test/script_tests.cpp	/^    CTransactionRef creditTx;$/;"	m	class:__anon58::TestBuilder	file:
crypto_libbitcoin_crypto_avx2_a_AR	./Makefile	/^crypto_libbitcoin_crypto_avx2_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_avx2_a_CPPFLAGS	./Makefile	/^crypto_libbitcoin_crypto_avx2_a_CPPFLAGS = $(AM_CPPFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_avx2_a_CXXFLAGS	./Makefile	/^crypto_libbitcoin_crypto_avx2_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) \\$/;"	m
crypto_libbitcoin_crypto_avx2_a_LIBADD	./Makefile	/^crypto_libbitcoin_crypto_avx2_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_avx2_a_OBJECTS	./Makefile	/^crypto_libbitcoin_crypto_avx2_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_avx2_a_SOURCES	./Makefile	/^crypto_libbitcoin_crypto_avx2_a_SOURCES = crypto\/sha256_avx2.cpp$/;"	m
crypto_libbitcoin_crypto_base_a_AR	./Makefile	/^crypto_libbitcoin_crypto_base_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_base_a_CPPFLAGS	./Makefile	/^crypto_libbitcoin_crypto_base_a_CPPFLAGS = $(AM_CPPFLAGS)$/;"	m
crypto_libbitcoin_crypto_base_a_CXXFLAGS	./Makefile	/^crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
crypto_libbitcoin_crypto_base_a_LIBADD	./Makefile	/^crypto_libbitcoin_crypto_base_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_base_a_OBJECTS	./Makefile	/^crypto_libbitcoin_crypto_base_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_base_a_SOURCES	./Makefile	/^crypto_libbitcoin_crypto_base_a_SOURCES = crypto\/aes.cpp crypto\/aes.h \\$/;"	m
crypto_libbitcoin_crypto_shani_a_AR	./Makefile	/^crypto_libbitcoin_crypto_shani_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_shani_a_CPPFLAGS	./Makefile	/^crypto_libbitcoin_crypto_shani_a_CPPFLAGS = $(AM_CPPFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_shani_a_CXXFLAGS	./Makefile	/^crypto_libbitcoin_crypto_shani_a_CXXFLAGS = $(AM_CXXFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_shani_a_LIBADD	./Makefile	/^crypto_libbitcoin_crypto_shani_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_shani_a_OBJECTS	./Makefile	/^crypto_libbitcoin_crypto_shani_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_shani_a_SOURCES	./Makefile	/^crypto_libbitcoin_crypto_shani_a_SOURCES = crypto\/sha256_shani.cpp$/;"	m
crypto_libbitcoin_crypto_sse41_a_AR	./Makefile	/^crypto_libbitcoin_crypto_sse41_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_sse41_a_CPPFLAGS	./Makefile	/^crypto_libbitcoin_crypto_sse41_a_CPPFLAGS = $(AM_CPPFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_sse41_a_CXXFLAGS	./Makefile	/^crypto_libbitcoin_crypto_sse41_a_CXXFLAGS = $(AM_CXXFLAGS) \\$/;"	m
crypto_libbitcoin_crypto_sse41_a_LIBADD	./Makefile	/^crypto_libbitcoin_crypto_sse41_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_sse41_a_OBJECTS	./Makefile	/^crypto_libbitcoin_crypto_sse41_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_sse41_a_SOURCES	./Makefile	/^crypto_libbitcoin_crypto_sse41_a_SOURCES = crypto\/sha256_sse41.cpp$/;"	m
cs	./addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
cs	./httpserver.cpp	/^    Mutex cs;$/;"	m	class:WorkQueue	file:
cs	./sync.h	/^void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs);$/;"	v
cs	./txmempool.h	/^    mutable RecursiveMutex cs;$/;"	m	class:CTxMemPool
csPathCached	./util/system.cpp	/^static CCriticalSection csPathCached;$/;"	v	file:
cs_	./leveldb/port/port_win.h	/^  void * cs_;$/;"	m	class:leveldb::port::Mutex
cs_KeyStore	./keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CBasicKeyStore
cs_LastBlockFile	./validation.cpp	/^    CCriticalSection cs_LastBlockFile;$/;"	m	namespace:__anon50	file:
cs_SubVer	./net.h	/^    RecursiveMutex cs_SubVer;$/;"	m	class:CNode
cs_addrLocal	./net.h	/^    mutable CCriticalSection cs_addrLocal;$/;"	m	class:CNode
cs_addrName	./net.h	/^    mutable CCriticalSection cs_addrName;$/;"	m	class:CNode
cs_args	./util/system.h	/^    mutable CCriticalSection cs_args;$/;"	m	class:ArgsManager
cs_blockchange	./rpc/blockchain.cpp	/^static Mutex cs_blockchange;$/;"	v	file:
cs_db	./wallet/db.cpp	/^CCriticalSection cs_db;$/;"	m	namespace:__anon117	file:
cs_dir_locks	./util/system.cpp	/^static std::mutex cs_dir_locks;$/;"	v	file:
cs_feeFilter	./net.h	/^    CCriticalSection cs_feeFilter;$/;"	m	class:CNode
cs_filter	./net.h	/^    mutable CCriticalSection cs_filter;$/;"	m	class:CNode
cs_hSocket	./net.h	/^    CCriticalSection cs_hSocket;$/;"	m	class:CNode
cs_inventory	./net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_main	./net_processing.cpp	/^    int g_outbound_peers_with_protect_from_disconnect GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	./net_processing.cpp	/^    int nPeersWithValidatedDownloads GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	./net_processing.cpp	/^    int nPreferredDownload GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	./net_processing.cpp	/^    int nSyncStarted GUARDED_BY(cs_main) = 0;$/;"	m	namespace:__anon88	file:
cs_main	./net_processing.cpp	/^void Misbehaving(NodeId nodeid, int howmuch, const std::string& message="") EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./rpc/blockchain.h	/^UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	./rpc/blockchain.h	/^UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	./validation.cpp	/^RecursiveMutex cs_main;$/;"	v
cs_main	./validation.h	/^                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	./validation.h	/^bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	./validation.h	/^bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	./validation.h	/^bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	./validation.h	/^bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);$/;"	v
cs_main	./validation.h	/^bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validation.h	/^void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	./validationinterface.h	/^void SyncWithValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main);$/;"	v
cs_mapLocalHost	./net.cpp	/^CCriticalSection cs_mapLocalHost;$/;"	v
cs_mapLocalHost	./net.cpp	/^static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};$/;"	v	file:
cs_most_recent_block	./net_processing.cpp	/^static CCriticalSection cs_most_recent_block;$/;"	v	file:
cs_nBlockSequenceId	./validation.cpp	/^    CCriticalSection cs_nBlockSequenceId;$/;"	m	class:CChainState	file:
cs_nTimeOffset	./timedata.cpp	/^static CCriticalSection cs_nTimeOffset;$/;"	v	file:
cs_nTimeOffset	./timedata.cpp	/^static int64_t nTimeOffset GUARDED_BY(cs_nTimeOffset) = 0;$/;"	v	file:
cs_proxyInfos	./netbase.cpp	/^static CCriticalSection cs_proxyInfos;$/;"	v	file:
cs_rpcWarmup	./rpc/server.cpp	/^static CCriticalSection cs_rpcWarmup;$/;"	v	file:
cs_rpcWarmup	./rpc/server.cpp	/^static bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;$/;"	v	file:
cs_rpcWarmup	./rpc/server.cpp	/^static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = "RPC server started";$/;"	v	file:
cs_sendProcessing	./net.h	/^    CCriticalSection cs_sendProcessing;$/;"	m	class:CNode
cs_sigcache	./script/sigcache.cpp	/^    boost::shared_mutex cs_sigcache;$/;"	m	class:__anon84::CSignatureCache	file:
cs_totalBytesRecv	./net.h	/^    CCriticalSection cs_totalBytesRecv;$/;"	m	class:CConnman
cs_totalBytesSent	./net.h	/^    CCriticalSection cs_totalBytesSent;$/;"	m	class:CConnman
cs_vAddedNodes	./net.h	/^    CCriticalSection cs_vAddedNodes;$/;"	m	class:CConnman
cs_vNodes	./net.h	/^    mutable CCriticalSection cs_vNodes;$/;"	m	class:CConnman
cs_vOneShots	./net.h	/^    CCriticalSection cs_vOneShots;$/;"	m	class:CConnman
cs_vProcessMsg	./net.h	/^    CCriticalSection cs_vProcessMsg;$/;"	m	class:CNode
cs_vRecv	./net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	./net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_wallet	./wallet/wallet.h	/^    WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;$/;"	m	class:final
cs_wallet	./wallet/wallet.h	/^    int nWalletMaxVersion GUARDED_BY(cs_wallet) = FEATURE_BASE;$/;"	m	class:final
cs_wallet	./wallet/wallet.h	/^    int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;$/;"	m	class:final
cs_wallet	./wallet/wallet.h	/^    int64_t nOrderPosNext GUARDED_BY(cs_wallet) = 0;$/;"	m	class:final
cs_wallet	./wallet/wallet.h	/^    int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;$/;"	m	class:final
cs_wallet	./wallet/wallet.h	/^    mutable CCriticalSection cs_wallet;$/;"	m	class:final
cs_wallets	./wallet/wallet.cpp	/^static CCriticalSection cs_wallets;$/;"	v	file:
cs_warnings	./warnings.cpp	/^CCriticalSection cs_warnings;$/;"	v
cs_warnings	./warnings.cpp	/^bool fLargeWorkForkFound GUARDED_BY(cs_warnings) = false;$/;"	v
cs_warnings	./warnings.cpp	/^bool fLargeWorkInvalidChainFound GUARDED_BY(cs_warnings) = false;$/;"	v
ctaes_test	./crypto/ctaes/test.c	/^} ctaes_test;$/;"	t	typeref:struct:__anon44	file:
ctaes_tests	./crypto/ctaes/test.c	/^static const ctaes_test ctaes_tests[] = {$/;"	v	file:
ctx	./crypto/aes.h	/^    AES256_ctx ctx;$/;"	m	class:AES256Decrypt
ctx	./crypto/aes.h	/^    AES256_ctx ctx;$/;"	m	class:AES256Encrypt
ctx	./hash.h	/^    CHash256 ctx;$/;"	m	class:CHashWriter
ctx	./secp256k1/src/bench_ecdh.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon108	file:
ctx	./secp256k1/src/bench_recover.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon98	file:
ctx	./secp256k1/src/bench_sign.c	/^    secp256k1_context* ctx;$/;"	m	struct:__anon102	file:
ctx	./secp256k1/src/bench_verify.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon106	file:
ctx	./secp256k1/src/tests.c	/^static secp256k1_context *ctx = NULL;$/;"	v	file:
ctz	./test/merkle_tests.cpp	/^static inline int ctz(uint32_t i) {$/;"	f	file:
cuckoocache_tests	./test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_SUITE(cuckoocache_tests);$/;"	v
cumulative_bytes_locked	./support/lockedpool.h	/^    size_t cumulative_bytes_locked;$/;"	m	class:LockedPool
curAlignment	./qt/splashscreen.h	/^    int curAlignment;$/;"	m	class:SplashScreen
curColor	./qt/splashscreen.h	/^    QColor curColor;$/;"	m	class:SplashScreen
curMessage	./qt/splashscreen.h	/^    QString curMessage;$/;"	m	class:SplashScreen
cur_num_blocks	./qt/transactionrecord.h	/^    int cur_num_blocks;$/;"	m	class:TransactionStatus
current	./leveldb/db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
currentWalletModel	./qt/walletframe.cpp	/^WalletModel* WalletFrame::currentWalletModel() const$/;"	f	class:WalletFrame
currentWalletView	./qt/walletframe.cpp	/^WalletView* WalletFrame::currentWalletView() const$/;"	f	class:WalletFrame
current_	./leveldb/db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	./leveldb/db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	./leveldb/table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	./leveldb/table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
current_	./leveldb/util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	./leveldb/util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	./leveldb/db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
cv	./leveldb/db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon19::SharedState	file:
cv	./leveldb/db/db_impl.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::DBImpl::Writer	file:
cv	./test/checkqueue_tests.cpp	/^    static std::condition_variable cv;$/;"	m	struct:FrozenCleanupCheck	file:
cv_	./leveldb/port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
d	./secp256k1/src/scalar_4x64.h	/^    uint64_t d[4];$/;"	m	struct:__anon99
d	./secp256k1/src/scalar_8x32.h	/^    uint32_t d[8];$/;"	m	struct:__anon114
dMinPing	./net.h	/^    double dMinPing;$/;"	m	class:CNodeStats
dPingTime	./net.h	/^    double dPingTime;$/;"	m	class:CNodeStats
dPingWait	./net.h	/^    double dPingWait;$/;"	m	class:CNodeStats
dTxRate	./chainparams.h	/^    double dTxRate;   \/\/!< estimated number of transactions per second after that timestamp$/;"	m	struct:ChainTxData
d_assert	./univalue/test/unitester.cpp	/^#define d_assert(/;"	d	file:
damage_array	./secp256k1/src/tests.c	/^static void damage_array(unsigned char *sig, size_t *len) {$/;"	f	file:
data	./bech32.cpp	/^typedef std::vector<uint8_t> data;$/;"	t	namespace:__anon116	file:
data	./bloom.h	/^    std::vector<uint64_t> data;$/;"	m	class:CRollingBloomFilter
data	./leveldb/include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	./leveldb/table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	./leveldb/table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data	./net.h	/^    std::vector<unsigned char> data;$/;"	m	struct:CSerializedNetMsg
data	./prevector.h	/^    const value_type* data() const {$/;"	f	class:prevector
data	./prevector.h	/^    value_type* data() {$/;"	f	class:prevector
data	./pubkey.h	/^    const unsigned char* data() const { return vch; }$/;"	f	class:CPubKey
data	./qt/addresstablemodel.cpp	/^QVariant AddressTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:AddressTableModel
data	./qt/bantablemodel.cpp	/^QVariant BanTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:BanTableModel
data	./qt/bitcoinunits.cpp	/^QVariant BitcoinUnits::data(const QModelIndex &index, int role) const$/;"	f	class:BitcoinUnits
data	./qt/optionsmodel.cpp	/^QVariant OptionsModel::data(const QModelIndex & index, int role) const$/;"	f	class:OptionsModel
data	./qt/peertablemodel.cpp	/^QVariant PeerTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:PeerTableModel
data	./qt/recentrequeststablemodel.cpp	/^QVariant RecentRequestsTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:RecentRequestsTableModel
data	./qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:TransactionTableModel
data	./secp256k1/include/secp256k1.h	/^    unsigned char data[64];$/;"	m	struct:__anon92
data	./secp256k1/include/secp256k1.h	/^    unsigned char data[64];$/;"	m	struct:__anon93
data	./secp256k1/include/secp256k1_recovery.h	/^    unsigned char data[65];$/;"	m	struct:__anon91
data	./secp256k1/src/bench_internal.c	/^    unsigned char data[64];$/;"	m	struct:__anon109	file:
data	./secp256k1/src/num_gmp.h	/^    mp_limb_t data[2*NUM_LIMBS];$/;"	m	struct:__anon110
data	./secp256k1/src/util.h	/^    const void* data;$/;"	m	struct:__anon107
data	./streams.h	/^    const value_type* data() const                   { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	./streams.h	/^    value_type* data()                               { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	./uint256.h	/^    uint8_t data[WIDTH];$/;"	m	class:base_blob
dataDir	./qt/clientmodel.cpp	/^QString ClientModel::dataDir() const$/;"	f	class:ClientModel
data_	./leveldb/db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon19::RandomGenerator	file:
data_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon32::RandomGenerator	file:
data_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon33::RandomGenerator	file:
data_	./leveldb/include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	./leveldb/table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	./leveldb/table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	./leveldb/table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	./leveldb/table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_	./leveldb/table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor	file:
data_block	./leveldb/table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	./leveldb/table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
data_hash	./net.h	/^    mutable uint256 data_hash;$/;"	m	class:CNetMessage
data_iter_	./leveldb/table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
data_sync_error_	./leveldb/db/db_test.cc	/^  port::AtomicPointer data_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
database	./wallet/wallet.h	/^    std::unique_ptr<WalletDatabase> database;$/;"	m	class:final
datadir	./Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	./secp256k1/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	./univalue/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	./Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	./secp256k1/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	./univalue/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
date	./qt/recentrequeststablemodel.h	/^    QDateTime date;$/;"	m	class:RecentRequestEntry
dateFrom	./qt/transactionfilterproxy.h	/^    QDateTime dateFrom;$/;"	m	class:TransactionFilterProxy
dateFrom	./qt/transactionview.h	/^    QDateTimeEdit *dateFrom;$/;"	m	class:TransactionView
dateRangeChanged	./qt/transactionview.cpp	/^void TransactionView::dateRangeChanged()$/;"	f	class:TransactionView
dateRangeWidget	./qt/transactionview.h	/^    QFrame *dateRangeWidget;$/;"	m	class:TransactionView
dateTimeStr	./qt/guiutil.cpp	/^QString dateTimeStr(const QDateTime &date)$/;"	f	namespace:GUIUtil
dateTimeStr	./qt/guiutil.cpp	/^QString dateTimeStr(qint64 nTime)$/;"	f	namespace:GUIUtil
dateTo	./qt/transactionfilterproxy.h	/^    QDateTime dateTo;$/;"	m	class:TransactionFilterProxy
dateTo	./qt/transactionview.h	/^    QDateTimeEdit *dateTo;$/;"	m	class:TransactionView
dateWidget	./qt/transactionview.h	/^    QComboBox *dateWidget;$/;"	m	class:TransactionView
db	./leveldb/table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	./leveldb/table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	./leveldb/table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db	./txdb.h	/^    CDBWrapper db;$/;"	m	class:final
db_	./leveldb/db/autocompact_test.cc	/^  DB* db_;$/;"	m	class:leveldb::AutoCompactTest	file:
db_	./leveldb/db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	./leveldb/db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	./leveldb/db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon29::DBIter	file:
db_	./leveldb/db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	./leveldb/db/fault_injection_test.cc	/^  DB* db_;$/;"	m	class:leveldb::FaultInjectionTest	file:
db_	./leveldb/db/recovery_test.cc	/^  DB* db_;$/;"	m	class:leveldb::RecoveryTest	file:
db_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	./leveldb/table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_file_state_	./leveldb/db/fault_injection_test.cc	/^  std::map<std::string, FileState> db_file_state_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
db_lock_	./leveldb/db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_num_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
dbenv	./wallet/db.h	/^    std::unique_ptr<DbEnv> dbenv;$/;"	m	class:BerkeleyEnvironment
dbfull	./leveldb/db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbfull	./leveldb/db/recovery_test.cc	/^  DBImpl* dbfull() const { return reinterpret_cast<DBImpl*>(db_); }$/;"	f	class:leveldb::RecoveryTest
dbname	./leveldb/db/c_test.c	/^static char dbname[200];$/;"	v	file:
dbname_	./leveldb/db/autocompact_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::AutoCompactTest	file:
dbname_	./leveldb/db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	./leveldb/db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	./leveldb/db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	./leveldb/db/fault_injection_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::FaultInjectionTest	file:
dbname_	./leveldb/db/recovery_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::RecoveryTest	file:
dbname_	./leveldb/db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon30::Repairer::std	file:
dbname_	./leveldb/db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	./leveldb/db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
dbwrapper_error	./dbwrapper.h	/^    explicit dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}$/;"	f	class:dbwrapper_error
dbwrapper_error	./dbwrapper.h	/^class dbwrapper_error : public std::runtime_error$/;"	c
dbwrapper_private	./dbwrapper.cpp	/^namespace dbwrapper_private {$/;"	n	file:
dbwrapper_private	./dbwrapper.h	/^namespace dbwrapper_private {$/;"	n
dd_mutex	./sync.cpp	/^    std::mutex dd_mutex;$/;"	m	struct:LockData	file:
deadlineTimers	./rpc/server.cpp	/^static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;$/;"	v	file:
deallocate	./support/allocators/secure.h	/^    void deallocate(T* p, std::size_t n)$/;"	f
deallocate	./support/allocators/zeroafterfree.h	/^    void deallocate(T* p, std::size_t n)$/;"	f
debit	./interfaces/wallet.h	/^    CAmount debit;$/;"	m	struct:interfaces::WalletTx
debit	./qt/transactionrecord.h	/^    CAmount debit;$/;"	m	class:TransactionRecord
dec	./crypto/aes.h	/^    const AES256Decrypt dec;$/;"	m	class:AES256CBCDecrypt
decay	./policy/fees.cpp	/^    double decay;$/;"	m	class:TxConfirmStats	file:
decay	./policy/fees.h	/^    double decay = 0;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
decimals	./qt/bitcoinunits.cpp	/^int BitcoinUnits::decimals(int unit)$/;"	f	class:BitcoinUnits
decltype	./reverse_iterator.h	/^    auto begin() const -> decltype(this->m_x.rbegin())$/;"	f	class:reverse_range
decltype	./reverse_iterator.h	/^    auto end() const -> decltype(this->m_x.rend())$/;"	f	class:reverse_range
decodepsbt	./rpc/rawtransaction.cpp	/^UniValue decodepsbt(const JSONRPCRequest& request)$/;"	f
decoderawtransaction	./rpc/rawtransaction.cpp	/^static UniValue decoderawtransaction(const JSONRPCRequest& request)$/;"	f	file:
decodescript	./rpc/rawtransaction.cpp	/^static UniValue decodescript(const JSONRPCRequest& request)$/;"	f	file:
decomposeTransaction	./qt/transactionrecord.cpp	/^QList<TransactionRecord> TransactionRecord::decomposeTransaction(const interfaces::WalletTx& wtx)$/;"	f	class:TransactionRecord
defaultAssumeValid	./consensus/params.h	/^    uint256 defaultAssumeValid;$/;"	m	struct:Consensus::Params
default_env	./leveldb/util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
default_env	./leveldb/util/env_win.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
default_error_callback	./secp256k1/src/gen_context.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback	./secp256k1/src/secp256k1.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback_fn	./secp256k1/src/gen_context.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_error_callback_fn	./secp256k1/src/secp256k1.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_illegal_callback	./secp256k1/src/secp256k1.c	/^static const secp256k1_callback default_illegal_callback = {$/;"	v	file:
default_illegal_callback_fn	./secp256k1/src/secp256k1.c	/^static void default_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
delay_data_sync_	./leveldb/db/db_test.cc	/^  port::AtomicPointer delay_data_sync_;$/;"	m	class:leveldb::SpecialEnv	file:
deleteAction	./qt/addressbookpage.h	/^    QAction *deleteAction; \/\/ to be able to explicitly disable it$/;"	m	class:AddressBookPage
deleteClicked	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::deleteClicked()$/;"	f	class:SendCoinsEntry
deleteWhenTriggered	./httpserver.h	/^    bool deleteWhenTriggered;$/;"	m	class:HTTPEvent
deleted_files	./leveldb/db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	./leveldb/db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	./leveldb/util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_values_	./leveldb/util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	./leveldb/util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
depcomp	./Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	./secp256k1/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	./univalue/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depth	./qt/transactionrecord.h	/^    qint64 depth;$/;"	m	class:TransactionStatus
depth_in_main_chain	./interfaces/wallet.h	/^    int depth_in_main_chain = -1;$/;"	m	struct:interfaces::WalletTxOut
depth_in_main_chain	./interfaces/wallet.h	/^    int depth_in_main_chain;$/;"	m	struct:interfaces::WalletTxStatus
depth_limit	./cuckoocache.h	/^    uint8_t depth_limit;$/;"	m	class:CuckooCache::cache
deriveaddresses	./rpc/misc.cpp	/^UniValue deriveaddresses(const JSONRPCRequest& request)$/;"	f
descendant_score	./txmempool.h	/^struct descendant_score {};$/;"	s
descending	./wallet/coinselection.cpp	/^} descending;$/;"	v	typeref:struct:__anon119
describe	./qt/transactiontablemodel.cpp	/^    QString describe(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)$/;"	f	class:TransactionTablePriv
description	./qt/bitcoinunits.cpp	/^QString BitcoinUnits::description(int unit)$/;"	f	class:BitcoinUnits
descriptor_file_	./leveldb/db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	./leveldb/db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
deserialize_type	./serialize.h	/^struct deserialize_type {};$/;"	s
desiredTarget	./policy/fees.h	/^    int desiredTarget = 0;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
dest	./interfaces/wallet.h	/^    CTxDestination dest;$/;"	m	struct:interfaces::WalletAddress
destChange	./wallet/coincontrol.h	/^    CTxDestination destChange;$/;"	m	class:CCoinControl
dest_	./leveldb/db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	./leveldb/db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destdata	./wallet/wallet.h	/^    StringMap destdata;$/;"	m	class:CAddressBookData
destination	./wallet/wallet.h	/^    CTxDestination destination;$/;"	m	struct:COutputEntry
destructor_	./leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	./leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
detail	./tinyformat.h	/^namespace detail {$/;"	n	namespace:tinyformat
details	./qt/paymentrequestplus.h	/^    payments::PaymentDetails details;$/;"	m	class:PaymentRequestPlus
detectShutdown	./qt/bitcoingui.cpp	/^void BitcoinGUI::detectShutdown()$/;"	f	class:BitcoinGUI
difference_type	./prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_iterator
difference_type	./prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_reverse_iterator
difference_type	./prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::iterator
difference_type	./prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::reverse_iterator
difference_type	./prevector.h	/^    typedef Diff difference_type;$/;"	t	class:prevector
difference_type	./streams.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
difference_type	./support/allocators/secure.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:secure_allocator
difference_type	./support/allocators/zeroafterfree.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:zero_after_free_allocator
dir_locks	./util/system.cpp	/^static std::map<std::string, std::unique_ptr<fsbridge::FileLock>> dir_locks;$/;"	v	file:
direct	./prevector.h	/^        char direct[sizeof(T) * N];$/;"	m	union:prevector::direct_or_indirect
direct_or_indirect	./prevector.h	/^    union direct_or_indirect {$/;"	u	class:prevector
direct_ptr	./prevector.h	/^    T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }$/;"	f	class:prevector
direct_ptr	./prevector.h	/^    const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }$/;"	f	class:prevector
direction_	./leveldb/db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon29::DBIter	file:
direction_	./leveldb/table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
disconnectSelectedNode	./qt/rpcconsole.cpp	/^void RPCConsole::disconnectSelectedNode()$/;"	f	class:RPCConsole
disconnectViewHeadersSignals	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
disconnected	./torcontrol.cpp	/^    std::function<void(TorControlConnection&)> disconnected;$/;"	m	class:TorControlConnection	file:
disconnected_cb	./torcontrol.cpp	/^void TorController::disconnected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
disconnectnode	./rpc/net.cpp	/^static UniValue disconnectnode(const JSONRPCRequest& request)$/;"	f	file:
disjoint_sorted_files_	./leveldb/db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest	file:
distcleancheck_listfiles	./secp256k1/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcleancheck_listfiles	./univalue/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	./secp256k1/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	./univalue/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	./secp256k1/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
distuninstallcheck_listfiles	./univalue/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
docdir	./Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	./secp256k1/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	./univalue/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
done	./leveldb/db/db_impl.cc	/^  bool done;$/;"	m	struct:leveldb::DBImpl::Writer	file:
done	./leveldb/db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done	./qt/addressbookpage.cpp	/^void AddressBookPage::done(int retval)$/;"	f	class:AddressBookPage
done_	./leveldb/db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon19::Stats	file:
done_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
dragEnterEvent	./qt/bitcoingui.cpp	/^void BitcoinGUI::dragEnterEvent(QDragEnterEvent *event)$/;"	f	class:BitcoinGUI
dropEvent	./qt/bitcoingui.cpp	/^void BitcoinGUI::dropEvent(QDropEvent *event)$/;"	f	class:BitcoinGUI
dropped_bytes_	./leveldb/db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
dst_	./leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon27::CorruptionReporter	file:
dst_	./leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon27::WriteBatchItemPrinter	file:
dummy	./tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	m	struct:tinyformat::detail::is_convertible::fail
dummy	./tinyformat.h	/^        struct succeed { char dummy; };$/;"	m	struct:tinyformat::detail::is_convertible::succeed
dummy_versions_	./leveldb/db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
dummydata	./qt/guiutil.cpp	/^static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};$/;"	m	namespace:GUIUtil	file:
dumpprivkey	./wallet/rpcdump.cpp	/^UniValue dumpprivkey(const JSONRPCRequest& request)$/;"	f
dumpwallet	./wallet/rpcdump.cpp	/^UniValue dumpwallet(const JSONRPCRequest& request)$/;"	f
dustRelayFee	./policy/settings.cpp	/^CFeeRate dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);$/;"	v
dvidir	./Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	./secp256k1/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	./univalue/Makefile	/^dvidir = ${docdir}$/;"	m
ec_group	./secp256k1/src/bench_verify.c	/^    EC_GROUP* ec_group;$/;"	m	struct:__anon106	file:
ec_privkey_export_der	./key.cpp	/^static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, bool compressed) {$/;"	f	file:
ec_privkey_export_der	./secp256k1/contrib/lax_der_privatekey_parsing.c	/^int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {$/;"	f
ec_privkey_import_der	./key.cpp	/^static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {$/;"	f	file:
ec_privkey_import_der	./secp256k1/contrib/lax_der_privatekey_parsing.c	/^int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {$/;"	f
ec_pubkey_parse_pointtest	./secp256k1/src/tests.c	/^void ec_pubkey_parse_pointtest(const unsigned char *input, int xvalid, int yvalid) {$/;"	f
ecdsa_signature_parse_der_lax	./pubkey.cpp	/^static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f	file:
ecdsa_signature_parse_der_lax	./secp256k1/contrib/lax_der_parsing.c	/^int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f
echo	./rpc/misc.cpp	/^static UniValue echo(const JSONRPCRequest& request)$/;"	f	file:
ecmult_const_chain_multiply	./secp256k1/src/tests.c	/^void ecmult_const_chain_multiply(void) {$/;"	f
ecmult_const_commutativity	./secp256k1/src/tests.c	/^void ecmult_const_commutativity(void) {$/;"	f
ecmult_const_mult_zero_one	./secp256k1/src/tests.c	/^void ecmult_const_mult_zero_one(void) {$/;"	f
ecmult_const_random_mult	./secp256k1/src/tests.c	/^void ecmult_const_random_mult(void) {$/;"	f
ecmult_ctx	./secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_context ecmult_ctx;$/;"	m	struct:secp256k1_context_struct	file:
ecmult_gen_ctx	./secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_gen_context ecmult_gen_ctx;$/;"	m	struct:secp256k1_context_struct	file:
edit	./leveldb/db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
editLabel	./qt/transactionview.cpp	/^void TransactionView::editLabel()$/;"	f	class:TransactionView
editStatus	./qt/addresstablemodel.h	/^    EditStatus editStatus = OK;$/;"	m	class:AddressTableModel
edit_	./leveldb/db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon30::Repairer	file:
edit_	./leveldb/db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
effective_fee	./wallet/wallet.h	/^    CFeeRate effective_fee = CFeeRate(0);$/;"	m	struct:CoinSelectionParams
effective_value	./wallet/coinselection.h	/^    CAmount effective_value;$/;"	m	class:CInputCoin
elapsed	./versionbits.h	/^    int elapsed;$/;"	m	struct:BIP9Stats
elems_	./leveldb/util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon4::HandleTable	file:
emitDataChanged	./qt/addresstablemodel.cpp	/^void AddressTableModel::emitDataChanged(int idx)$/;"	f	class:AddressTableModel
empty	./indirectmap.h	/^    bool empty() const              { return m.empty(); }$/;"	f	class:indirectmap
empty	./leveldb/db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	./leveldb/include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	./leveldb/table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
empty	./limitedmap.h	/^    bool empty() const { return map.empty(); }$/;"	f	class:limitedmap
empty	./prevector.h	/^    bool empty() const {$/;"	f	class:prevector
empty	./streams.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
empty	./streams.h	/^    bool empty() const { return m_data.size() == m_pos; }$/;"	f	class:VectorReader
empty	./univalue/include/univalue.h	/^    bool empty() const { return (values.size() == 0); }$/;"	f	class:UniValue
empty_string	./util/threadnames.cpp	/^static const std::string empty_string;$/;"	v	file:
empty_wallet	./wallet/test/coinselector_tests.cpp	/^static void empty_wallet(void)$/;"	f	file:
enableWallet	./qt/bitcoingui.h	/^    bool enableWallet = false;$/;"	m	class:BitcoinGUI
enabled	./secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  private static final boolean enabled; \/\/true if the library is loaded$/;"	f	class:Secp256k1Context	file:
enc	./crypto/aes.h	/^    const AES256Encrypt enc;$/;"	m	class:AES256CBCEncrypt
encryptWallet	./qt/walletframe.cpp	/^void WalletFrame::encryptWallet(bool status)$/;"	f	class:WalletFrame
encryptWallet	./qt/walletview.cpp	/^void WalletView::encryptWallet(bool status)$/;"	f	class:WalletView
encryptWalletAction	./qt/bitcoingui.h	/^    QAction* encryptWalletAction = nullptr;$/;"	m	class:BitcoinGUI
encryptwallet	./wallet/rpcwallet.cpp	/^static UniValue encryptwallet(const JSONRPCRequest& request)$/;"	f	file:
end	./indirectmap.h	/^    const_iterator end() const      { return m.end(); }$/;"	f	class:indirectmap
end	./indirectmap.h	/^    iterator end()                  { return m.end(); }$/;"	f	class:indirectmap
end	./key.h	/^    const unsigned char* end() const { return keydata.data() + size(); }$/;"	f	class:CKey
end	./leveldb/db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end	./limitedmap.h	/^    const_iterator end() const { return map.end(); }$/;"	f	class:limitedmap
end	./policy/fees.h	/^    double end = -1;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
end	./prevector.h	/^    const_iterator end() const { return const_iterator(item_ptr(size())); }$/;"	f	class:prevector
end	./prevector.h	/^    iterator end() { return iterator(item_ptr(size())); }$/;"	f	class:prevector
end	./pubkey.h	/^    const unsigned char* end() const { return vch + size(); }$/;"	f	class:CPubKey
end	./streams.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	./streams.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	./support/lockedpool.h	/^    char* end;$/;"	m	class:Arena
end	./uint256.h	/^    const unsigned char* end() const$/;"	f	class:base_blob
end	./uint256.h	/^    unsigned char* end()$/;"	f	class:base_blob
end_	./leveldb/db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	./leveldb/db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
entries_per_batch_	./leveldb/db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
entry	./qt/recentrequeststablemodel.h	/^    const RecentRequestEntry &entry(int row) const { return list[row]; }$/;"	f	class:RecentRequestsTableModel
entryHeight	./txmempool.h	/^    const unsigned int entryHeight; \/\/!< Chain height when entering the mempool$/;"	m	class:CTxMemPoolEntry
entry_time	./txmempool.h	/^struct entry_time {};$/;"	s
env	./leveldb/db/recovery_test.cc	/^  Env* env() const { return env_; }$/;"	f	class:leveldb::RecoveryTest
env	./leveldb/include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env	./wallet/db.h	/^    BerkeleyEnvironment *env;$/;"	m	class:BerkeleyBatch
env	./wallet/db.h	/^    std::shared_ptr<BerkeleyEnvironment> env;$/;"	m	class:BerkeleyDatabase
env_	./leveldb/db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	./leveldb/db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	./leveldb/db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest	file:
env_	./leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::FaultInjectionTest	file:
env_	./leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::TestWritableFile	file:
env_	./leveldb/db/recovery_test.cc	/^  Env* env_;$/;"	m	class:leveldb::RecoveryTest	file:
env_	./leveldb/db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon30::Repairer	file:
env_	./leveldb/db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	./leveldb/db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	./leveldb/helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest	file:
env_	./leveldb/util/env_posix_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
env_	./leveldb/util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvTest	file:
eof	./streams.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
eof	./streams.h	/^    bool eof() const {$/;"	f	class:CBufferedFile
eof_	./leveldb/db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
epoch_check	./cuckoocache.h	/^    void epoch_check()$/;"	f	class:CuckooCache::cache
epoch_flags	./cuckoocache.h	/^    mutable std::vector<bool> epoch_flags;$/;"	m	class:CuckooCache::cache
epoch_heuristic_counter	./cuckoocache.h	/^    uint32_t epoch_heuristic_counter;$/;"	m	class:CuckooCache::cache
epoch_size	./cuckoocache.h	/^    uint32_t epoch_size;$/;"	m	class:CuckooCache::cache
equal_sets	./wallet/test/coinselector_tests.cpp	/^static bool equal_sets(CoinSet a, CoinSet b)$/;"	f	file:
erase	./indirectmap.h	/^    size_type erase(const K& key)                   { return m.erase(&key); }$/;"	f	class:indirectmap
erase	./limitedmap.h	/^    void erase(const key_type& k)$/;"	f	class:limitedmap
erase	./prevector.h	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:prevector
erase	./prevector.h	/^    iterator erase(iterator pos) {$/;"	f	class:prevector
erase	./streams.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	./streams.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
erase	./test/prevector_tests.cpp	/^    void erase(Size first, Size last) {$/;"	f	class:prevector_tester
erase	./test/prevector_tests.cpp	/^    void erase(Size position) {$/;"	f	class:prevector_tester
err	./test/script_tests.cpp	/^    ScriptError_t err;$/;"	m	struct:ScriptErrorDesc	file:
error	./bitcoin-cli.cpp	/^    int error;$/;"	m	struct:HTTPReply	file:
error	./util/system.h	/^bool error(const char* fmt, const Args&... args)$/;"	f
error	./validation.h	/^    ScriptError error;$/;"	m	class:CScriptCheck
error_callback	./secp256k1/src/secp256k1.c	/^    secp256k1_callback error_callback;$/;"	m	struct:secp256k1_context_struct	file:
error_if_exists	./leveldb/include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
escapes	./univalue/gen/gen.cpp	/^static std::string escapes[256];$/;"	v	file:
escapes	./univalue/lib/univalue_escapes.h	/^static const char *escapes[256] = {$/;"	v
est	./policy/fees.h	/^    EstimationResult est;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
estimateCombinedFee	./policy/fees.cpp	/^double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const$/;"	f	class:CBlockPolicyEstimator
estimateConservativeFee	./policy/fees.cpp	/^double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const$/;"	f	class:CBlockPolicyEstimator
estimateFee	./policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const$/;"	f	class:CBlockPolicyEstimator
estimateRawFee	./policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const$/;"	f	class:CBlockPolicyEstimator
estimateSmartFee	./policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const$/;"	f	class:CBlockPolicyEstimator
estimated_feerate	./node/psbt.h	/^    Optional<CFeeRate> estimated_feerate;  \/\/!< Estimated feerate (fee \/ weight) of the transaction$/;"	m	struct:PSBTAnalysis
estimated_vsize	./node/psbt.h	/^    Optional<size_t> estimated_vsize;      \/\/!< Estimated weight of the transaction$/;"	m	struct:PSBTAnalysis
estimaterawfee	./rpc/mining.cpp	/^static UniValue estimaterawfee(const JSONRPCRequest& request)$/;"	f	file:
estimatesmartfee	./rpc/mining.cpp	/^static UniValue estimatesmartfee(const JSONRPCRequest& request)$/;"	f	file:
ev	./httprpc.cpp	/^    HTTPEvent ev;$/;"	m	class:HTTPRPCTimer	file:
ev	./httpserver.h	/^    struct event* ev;$/;"	m	class:HTTPEvent	typeref:struct:HTTPEvent::event
event	./qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::event(QEvent *event)$/;"	f	class:AskPassphraseDialog
event	./qt/bitcoinamountfield.cpp	/^    bool event(QEvent *event)$/;"	f	class:AmountSpinBox
event	./qt/modaloverlay.cpp	/^bool ModalOverlay::event(QEvent* ev) {$/;"	f	class:ModalOverlay
event	./support/events.h	/^MAKE_RAII(event);$/;"	v
eventBase	./httpserver.cpp	/^static struct event_base* eventBase = nullptr;$/;"	v	typeref:struct:event_base	file:
eventFilter	./qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:AskPassphraseDialog
eventFilter	./qt/bitcoinamountfield.cpp	/^bool BitcoinAmountField::eventFilter(QObject *object, QEvent *event)$/;"	f	class:BitcoinAmountField
eventFilter	./qt/bitcoingui.cpp	/^bool BitcoinGUI::eventFilter(QObject *object, QEvent *event)$/;"	f	class:BitcoinGUI
eventFilter	./qt/guiutil.cpp	/^bool ItemDelegate::eventFilter(QObject *object, QEvent *event)$/;"	f	class:GUIUtil::ItemDelegate
eventFilter	./qt/guiutil.cpp	/^bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
eventFilter	./qt/modaloverlay.cpp	/^bool ModalOverlay::eventFilter(QObject * obj, QEvent * ev) {$/;"	f	class:ModalOverlay
eventFilter	./qt/paymentserver.cpp	/^bool PaymentServer::eventFilter(QObject *object, QEvent *event)$/;"	f	class:PaymentServer
eventFilter	./qt/rpcconsole.cpp	/^bool RPCConsole::eventFilter(QObject* obj, QEvent *event)$/;"	f	class:RPCConsole
eventFilter	./qt/signverifymessagedialog.cpp	/^bool SignVerifyMessageDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:SignVerifyMessageDialog
eventFilter	./qt/splashscreen.cpp	/^bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {$/;"	f	class:SplashScreen
eventFilter	./qt/transactionview.cpp	/^bool TransactionView::eventFilter(QObject *obj, QEvent *event)$/;"	f	class:TransactionView
eventHTTP	./httpserver.cpp	/^struct evhttp* eventHTTP = nullptr;$/;"	v	typeref:struct:evhttp
event_base	./support/events.h	/^MAKE_RAII(event_base);$/;"	v
eventcb	./torcontrol.cpp	/^void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ctx)$/;"	f	class:TorControlConnection
events_	./leveldb/util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvTest	file:
evhttp	./support/events.h	/^MAKE_RAII(evhttp);$/;"	v
evhttp_connection	./support/events.h	/^MAKE_RAII(evhttp_connection);$/;"	v
evhttp_request	./support/events.h	/^MAKE_RAII(evhttp_request);$/;"	v
exactMatch	./httpserver.cpp	/^    bool exactMatch;$/;"	m	struct:HTTPPathHandler	file:
exec	./qt/sendcoinsdialog.cpp	/^int SendConfirmationDialog::exec()$/;"	f	class:SendConfirmationDialog
exec_prefix	./Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	./secp256k1/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	./univalue/Makefile	/^exec_prefix = ${prefix}$/;"	m
execute	./rpc/server.cpp	/^UniValue CRPCTable::execute(const JSONRPCRequest &request) const$/;"	f	class:CRPCTable
exhaustive_tests_CPPFLAGS	./secp256k1/Makefile	/^exhaustive_tests_CPPFLAGS =  \\$/;"	m
exhaustive_tests_DEPENDENCIES	./secp256k1/Makefile	/^exhaustive_tests_DEPENDENCIES =  \\$/;"	m
exhaustive_tests_LDADD	./secp256k1/Makefile	/^exhaustive_tests_LDADD = $(SECP_LIBS)$/;"	m
exhaustive_tests_LDFLAGS	./secp256k1/Makefile	/^exhaustive_tests_LDFLAGS = -static$/;"	m
exhaustive_tests_LINK	./secp256k1/Makefile	/^exhaustive_tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\$/;"	m
exhaustive_tests_OBJECTS	./secp256k1/Makefile	/^exhaustive_tests_OBJECTS = $(am_exhaustive_tests_OBJECTS)$/;"	m
exhaustive_tests_SOURCES	./secp256k1/Makefile	/^exhaustive_tests_SOURCES = src\/tests_exhaustive.c$/;"	m
exists	./txmempool.h	/^    bool exists(const uint256& hash) const$/;"	f	class:CTxMemPool
exists	./univalue/include/univalue.h	/^    bool exists(const std::string& key) const { size_t i; return findKey(key, i); }$/;"	f	class:UniValue
expect	./univalue/lib/univalue_read.cpp	/^#define expect(/;"	d	file:
expectCallback	./qt/test/apptests.h	/^    void expectCallback(std::string callback) { m_callbacks.emplace(std::move(callback)); }$/;"	f	class:AppTests
expect_bits	./univalue/lib/univalue_read.cpp	/^enum expect_bits {$/;"	g	file:
exportClicked	./qt/transactionview.cpp	/^void TransactionView::exportClicked()$/;"	f	class:TransactionView
exportImage	./qt/qrimagewidget.cpp	/^QImage QRImageWidget::exportImage()$/;"	f	class:QRImageWidget
extra_count	./blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
extra_txn	./test/blockencodings_tests.cpp	/^std::vector<std::pair<uint256, CTransactionRef>> extra_txn;$/;"	v
extract	./secp256k1/src/scalar_4x64_impl.h	/^#define extract(/;"	d
extract	./secp256k1/src/scalar_4x64_impl.h	/^#undef extract$/;"	d
extract	./secp256k1/src/scalar_8x32_impl.h	/^#define extract(/;"	d
extract	./secp256k1/src/scalar_8x32_impl.h	/^#undef extract$/;"	d
extract_fast	./secp256k1/src/scalar_4x64_impl.h	/^#define extract_fast(/;"	d
extract_fast	./secp256k1/src/scalar_4x64_impl.h	/^#undef extract_fast$/;"	d
extract_fast	./secp256k1/src/scalar_8x32_impl.h	/^#define extract_fast(/;"	d
extract_fast	./secp256k1/src/scalar_8x32_impl.h	/^#undef extract_fast$/;"	d
extranonce	./test/miner_tests.cpp	/^    unsigned char extranonce;$/;"	m	struct:__anon59	file:
f1	./crypto/ripemd160.cpp	/^uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }$/;"	f	namespace:__anon42::ripemd160
f1	./crypto/sha1.cpp	/^uint32_t inline f1(uint32_t b, uint32_t c, uint32_t d) { return d ^ (b & (c ^ d)); }$/;"	f	namespace:__anon38::sha1
f2	./crypto/ripemd160.cpp	/^uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }$/;"	f	namespace:__anon42::ripemd160
f2	./crypto/sha1.cpp	/^uint32_t inline f2(uint32_t b, uint32_t c, uint32_t d) { return b ^ c ^ d; }$/;"	f	namespace:__anon38::sha1
f3	./crypto/ripemd160.cpp	/^uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }$/;"	f	namespace:__anon42::ripemd160
f3	./crypto/sha1.cpp	/^uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (b | c)); }$/;"	f	namespace:__anon38::sha1
f4	./crypto/ripemd160.cpp	/^uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }$/;"	f	namespace:__anon42::ripemd160
f5	./crypto/ripemd160.cpp	/^uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }$/;"	f	namespace:__anon42::ripemd160
fAcceptDatacarrier	./script/standard.cpp	/^bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;$/;"	v
fAllOk	./checkqueue.h	/^    bool fAllOk;$/;"	m	class:CCheckQueue
fAllowOtherInputs	./wallet/coincontrol.h	/^    bool fAllowOtherInputs;$/;"	m	class:CCoinControl
fAllowWatchOnly	./wallet/coincontrol.h	/^    bool fAllowWatchOnly;$/;"	m	class:CCoinControl
fAnyoneCanPay	./script/interpreter.cpp	/^    const bool fAnyoneCanPay;  \/\/!< whether the hashtype has the SIGHASH_ANYONECANPAY flag set$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
fBad	./merkleblock.h	/^    bool fBad;$/;"	m	class:CPartialMerkleTree
fBloomFilter	./net.cpp	/^    bool fBloomFilter;$/;"	m	struct:NodeEvictionCandidate	file:
fBroadcastTransactions	./wallet/wallet.h	/^    bool fBroadcastTransactions = false;$/;"	m	class:final
fCapsLock	./qt/askpassphrasedialog.h	/^    bool fCapsLock;$/;"	m	class:AskPassphraseDialog
fChangeCached	./wallet/wallet.h	/^    mutable bool fChangeCached;$/;"	m	class:CWalletTx
fCheckBlockIndex	./validation.cpp	/^bool fCheckBlockIndex = false;$/;"	v
fCheckForPruning	./validation.cpp	/^    bool fCheckForPruning = false;$/;"	m	namespace:__anon50	file:
fChecked	./primitives/block.h	/^    mutable bool fChecked;$/;"	m	class:CBlock
fCheckpointsEnabled	./validation.cpp	/^bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;$/;"	v
fCoinBase	./txdb.cpp	/^    bool fCoinBase;$/;"	m	class:__anon122::CCoins	file:
fCoinControlFeatures	./qt/optionsmodel.h	/^    bool fCoinControlFeatures;$/;"	m	class:OptionsModel
fCompressed	./key.h	/^    bool fCompressed;$/;"	m	class:CKey
fConnected	./net.h	/^    bool fConnected;$/;"	m	struct:AddedNodeInfo
fCreateBlank	./bitcoin-tx.cpp	/^static bool fCreateBlank;$/;"	v	file:
fCurrentlyConnected	./net_processing.cpp	/^    bool fCurrentlyConnected;$/;"	m	struct:__anon89::CNodeState	file:
fDbEnvInit	./wallet/db.h	/^    bool fDbEnvInit;$/;"	m	class:BerkeleyEnvironment
fDecryptionThoroughlyChecked	./wallet/crypter.h	/^    bool fDecryptionThoroughlyChecked;$/;"	m	class:CCryptoKeyStore
fDefaultConsistencyChecks	./chainparams.h	/^    bool fDefaultConsistencyChecks;$/;"	m	class:CChainParams
fDiscover	./net.cpp	/^bool fDiscover = true;$/;"	v
fDone	./checkqueue.h	/^    bool fDone;$/;"	m	class:CCheckQueueControl
fEnableReplacement	./validation.cpp	/^bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;$/;"	v
fFeeEstimatesInitialized	./init.cpp	/^bool fFeeEstimatesInitialized = false;$/;"	v
fFeeMinimized	./qt/sendcoinsdialog.h	/^    bool fFeeMinimized;$/;"	m	class:SendCoinsDialog
fFlushOnClose	./wallet/db.h	/^    bool fFlushOnClose;$/;"	m	class:BerkeleyBatch
fFromMe	./wallet/wallet.h	/^    char fFromMe;$/;"	m	class:CWalletTx
fHashNone	./script/interpreter.cpp	/^    const bool fHashNone;      \/\/!< whether the hashtype is SIGHASH_NONE$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
fHashSingle	./script/interpreter.cpp	/^    const bool fHashSingle;    \/\/!< whether the hashtype is SIGHASH_SINGLE$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
fHaveGenesis	./init.cpp	/^static bool fHaveGenesis = false;$/;"	v	file:
fHaveGrant	./sync.h	/^    bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fHavePruned	./validation.cpp	/^bool fHavePruned = false;$/;"	v
fHaveWatchOnly	./qt/walletmodel.h	/^    bool fHaveWatchOnly;$/;"	m	class:WalletModel
fHaveWitness	./net_processing.cpp	/^    bool fHaveWitness;$/;"	m	struct:__anon89::CNodeState	file:
fHelp	./rpc/server.h	/^    bool fHelp;$/;"	m	class:JSONRPCRequest
fHideTrayIcon	./qt/optionsmodel.h	/^    bool fHideTrayIcon;$/;"	m	class:OptionsModel
fInMempool	./wallet/wallet.h	/^    mutable bool fInMempool;$/;"	m	class:CWalletTx
fInbound	./net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fInbound	./net.h	/^    bool fInbound;$/;"	m	struct:AddedNodeInfo
fInbound	./net.h	/^    const bool fInbound;$/;"	m	class:CNode
fIncludeWitness	./miner.h	/^    bool fIncludeWitness;$/;"	m	class:BlockAssembler
fInternal	./wallet/wallet.h	/^    bool fInternal;$/;"	m	class:CKeyPool
fIsBareMultisigStd	./policy/settings.cpp	/^bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;$/;"	v
fKeySet	./wallet/crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fListen	./net.cpp	/^bool fListen = true;$/;"	v
fLogIPs	./logging.cpp	/^bool fLogIPs = DEFAULT_LOGIPS;$/;"	v
fMax	./qt/trafficgraphwidget.h	/^    float fMax;$/;"	m	class:TrafficGraphWidget
fMineBlocksOnDemand	./chainparams.h	/^    bool fMineBlocksOnDemand;$/;"	m	class:CChainParams
fMinimizeOnClose	./qt/optionsmodel.h	/^    bool fMinimizeOnClose;$/;"	m	class:OptionsModel
fMinimizeToTray	./qt/optionsmodel.h	/^    bool fMinimizeToTray;$/;"	m	class:OptionsModel
fMockDb	./wallet/db.h	/^    bool fMockDb;$/;"	m	class:BerkeleyEnvironment
fMsgProcWake	./net.h	/^    bool fMsgProcWake;$/;"	m	class:CConnman
fNameLookup	./netbase.cpp	/^bool fNameLookup = DEFAULT_NAME_LOOKUP;$/;"	v
fNewRecipientAllowed	./qt/sendcoinsdialog.h	/^    bool fNewRecipientAllowed;$/;"	m	class:SendCoinsDialog
fNodeStateStatsAvailable	./qt/peertablemodel.h	/^    bool fNodeStateStatsAvailable;$/;"	m	struct:CNodeCombinedStats
fOverrideFeeRate	./wallet/coincontrol.h	/^    bool fOverrideFeeRate;$/;"	m	class:CCoinControl
fPowAllowMinDifficultyBlocks	./consensus/params.h	/^    bool fPowAllowMinDifficultyBlocks;$/;"	m	struct:Consensus::Params
fPowNoRetargeting	./consensus/params.h	/^    bool fPowNoRetargeting;$/;"	m	struct:Consensus::Params
fPreferHeaderAndIDs	./net_processing.cpp	/^    bool fPreferHeaderAndIDs;$/;"	m	struct:__anon89::CNodeState	file:
fPreferHeaders	./net_processing.cpp	/^    bool fPreferHeaders;$/;"	m	struct:__anon89::CNodeState	file:
fPreferredDownload	./net_processing.cpp	/^    bool fPreferredDownload;$/;"	m	struct:__anon89::CNodeState	file:
fProcessingQueuedTransactions	./qt/transactiontablemodel.h	/^    bool fProcessingQueuedTransactions;$/;"	m	class:TransactionTableModel
fProvidesHeaderAndIDs	./net_processing.cpp	/^    bool fProvidesHeaderAndIDs;$/;"	m	struct:__anon89::CNodeState	file:
fPruneMode	./validation.cpp	/^bool fPruneMode = false;$/;"	v
fQueueNotifications	./qt/transactiontablemodel.cpp	/^static bool fQueueNotifications = false;$/;"	v	file:
fReadOnly	./wallet/db.h	/^    bool fReadOnly;$/;"	m	class:BerkeleyBatch
fRelayTxes	./net.cpp	/^    bool fRelayTxes;$/;"	m	struct:NodeEvictionCandidate	file:
fRelayTxes	./net.h	/^    bool fRelayTxes;$/;"	m	class:CNodeStats
fRelevantServices	./net.cpp	/^    bool fRelevantServices;$/;"	m	struct:NodeEvictionCandidate	file:
fRequireStandard	./chainparams.h	/^    bool fRequireStandard;$/;"	m	class:CChainParams
fRequireStandard	./validation.cpp	/^bool fRequireStandard = true;$/;"	v
fSafe	./wallet/wallet.h	/^    bool fSafe;$/;"	m	class:COutput
fShouldBan	./net_processing.cpp	/^    bool fShouldBan;$/;"	m	struct:__anon89::CNodeState	file:
fSolvable	./wallet/wallet.h	/^    bool fSolvable;$/;"	m	class:COutput
fSpendable	./wallet/wallet.h	/^    bool fSpendable;$/;"	m	class:COutput
fSubtractFeeFromAmount	./qt/coincontroldialog.cpp	/^bool CoinControlDialog::fSubtractFeeFromAmount = false;$/;"	m	class:CoinControlDialog	file:
fSubtractFeeFromAmount	./qt/coincontroldialog.h	/^    static bool fSubtractFeeFromAmount;$/;"	m	class:CoinControlDialog
fSubtractFeeFromAmount	./qt/walletmodel.h	/^    bool fSubtractFeeFromAmount; \/\/ memory only$/;"	m	class:SendCoinsRecipient
fSubtractFeeFromAmount	./wallet/wallet.h	/^    bool fSubtractFeeFromAmount;$/;"	m	struct:CRecipient
fSupportsDesiredCmpctVersion	./net_processing.cpp	/^    bool fSupportsDesiredCmpctVersion;$/;"	m	struct:__anon89::CNodeState	file:
fSyncStarted	./net_processing.cpp	/^    bool fSyncStarted;$/;"	m	struct:__anon89::CNodeState	file:
fTimeReceivedIsTxTime	./wallet/wallet.h	/^    unsigned int fTimeReceivedIsTxTime;$/;"	m	class:CWalletTx
fTry	./sync.cpp	/^    bool fTry;$/;"	m	struct:CLockLocation	file:
fUseCrypto	./wallet/crypter.h	/^    std::atomic<bool> fUseCrypto;$/;"	m	class:CCryptoKeyStore
fValid	./key.h	/^    bool fValid;$/;"	m	class:CKey
fValidatedHeaders	./net_processing.cpp	/^        bool fValidatedHeaders;                                  \/\/!< Whether this block has validated headers at the time of request.$/;"	m	struct:__anon88::QueuedBlock	file:
fWantsCmpctWitness	./net_processing.cpp	/^    bool fWantsCmpctWitness;$/;"	m	struct:__anon89::CNodeState	file:
fWhitelisted	./net.h	/^    bool fWhitelisted;$/;"	m	class:CNodeStats
f_assert	./univalue/test/unitester.cpp	/^#define f_assert(/;"	d	file:
factor	./qt/bitcoinunits.cpp	/^qint64 BitcoinUnits::factor(int unit)$/;"	f	class:BitcoinUnits
fail	./policy/fees.h	/^    EstimatorBucket fail;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
fail	./tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	s	struct:tinyformat::detail::is_convertible
failAvg	./policy/fees.cpp	/^    std::vector<std::vector<double>> failAvg; \/\/ failAvg[Y][X]$/;"	m	class:TxConfirmStats	file:
fails	./test/checkqueue_tests.cpp	/^    bool fails;$/;"	m	struct:FailingCheck	file:
fake_allocated_memory	./test/checkqueue_tests.cpp	/^    static std::atomic<size_t> fake_allocated_memory;$/;"	m	struct:MemoryCheck	file:
fake_filter_result	./leveldb/db/c_test.c	/^static unsigned char fake_filter_result = 1;$/;"	v	file:
fclose	./streams.h	/^    void fclose()$/;"	f	class:CAutoFile
fclose	./streams.h	/^    void fclose()$/;"	f	class:CBufferedFile
fd	./fs.h	/^        int fd = -1;$/;"	m	class:fsbridge::FileLock
fd_	./leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon8::PosixFileLock	file:
fd_	./leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
fd_limit_	./leveldb/util/env_posix.cc	/^  Limiter fd_limit_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
fdatasync	./leveldb/port/port_posix.h	/^#define fdatasync /;"	d
fdatasync	./leveldb/port/port_posix.h	/^#define fdatasync(/;"	d
fe_memcmp	./secp256k1/src/tests.c	/^int fe_memcmp(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
fe_x	./secp256k1/src/bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon109	file:
fe_y	./secp256k1/src/bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon109	file:
fee	./node/psbt.h	/^    Optional<CAmount> fee;                 \/\/!< Amount of fee being paid by the transaction$/;"	m	struct:PSBTAnalysis
fee	./qt/walletmodeltransaction.h	/^    CAmount fee;$/;"	m	class:WalletModelTransaction
feeDelta	./txmempool.h	/^    int64_t feeDelta;          \/\/!< Used for determining the priority of the transaction for mining in a block$/;"	m	class:CTxMemPoolEntry
feeDelta	./txmempool.h	/^    int64_t feeDelta;$/;"	m	struct:update_fee_delta
feeEstimator	./validation.cpp	/^CBlockPolicyEstimator feeEstimator;$/;"	v
feeEstimator	./validation.cpp	/^CTxMemPool mempool(&feeEstimator);$/;"	v
feeRate	./txmempool.h	/^    CFeeRate feeRate;$/;"	m	struct:TxMempoolInfo
feebumper	./wallet/feebumper.cpp	/^namespace feebumper {$/;"	n	file:
feebumper	./wallet/feebumper.h	/^namespace feebumper {$/;"	n
feeset	./policy/fees.h	/^    std::set<double> feeset;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
fetchPaymentACK	./qt/paymentserver.cpp	/^void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction)$/;"	f	class:PaymentServer
fetchRequest	./qt/paymentserver.cpp	/^void PaymentServer::fetchRequest(const QUrl& url)$/;"	f	class:PaymentServer
fflush_unlocked	./leveldb/port/port_posix.h	/^#define fflush_unlocked /;"	d
file	./leveldb/db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	./leveldb/table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	./leveldb/table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file	./streams.h	/^    FILE* file;$/;"	m	class:CAutoFile
file_	./leveldb/db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	./leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon35::RandomAccessFileImpl	file:
file_	./leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon35::SequentialFileImpl	file:
file_	./leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon35::WritableFileImpl	file:
file_	./leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon8::PosixSequentialFile	file:
file_	./leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon8::PosixWritableFile	file:
file_	./leveldb/util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_map_	./leveldb/helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon35::InMemoryEnv	file:
file_size	./leveldb/db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	./leveldb/db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	./leveldb/db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	./leveldb/db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename	./qt/csvmodelwriter.h	/^    QString filename;$/;"	m	class:CSVModelWriter
filename_	./leveldb/db/fault_injection_test.cc	/^  std::string filename_;$/;"	m	struct:leveldb::__anon20::FileState	file:
filename_	./leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
filename_	./leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
filename_	./leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixSequentialFile	file:
filename_	./leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon8::PosixWritableFile	file:
filename_	./leveldb/util/env_win.cc	/^    std::string filename_;$/;"	m	class:leveldb::Win32::Win32WritableFile	file:
filenames	./univalue/test/unitester.cpp	/^static const char *filenames[] = {$/;"	v	file:
files_	./leveldb/db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	./leveldb/db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest	file:
filesystem_active_	./leveldb/db/fault_injection_test.cc	/^  bool filesystem_active_;  \/\/ Record flushes, syncs, writes$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
fill	./prevector.h	/^    void fill(T* dst, InputIterator first, InputIterator last) {$/;"	f	class:prevector
fill	./prevector.h	/^    void fill(T* dst, ptrdiff_t count, const T& value = T{}) {$/;"	f	class:prevector
fill_cache	./leveldb/include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
filter	./leveldb/table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter	./qt/overviewpage.h	/^    std::unique_ptr<TransactionFilterProxy> filter;$/;"	m	class:OverviewPage
filterAcceptsRow	./qt/addressbookpage.cpp	/^    bool filterAcceptsRow(int row, const QModelIndex& parent) const$/;"	f	class:final
filterAcceptsRow	./qt/transactionfilterproxy.cpp	/^bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &sourceParent) const$/;"	f	class:TransactionFilterProxy
filter_	./leveldb/util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest	file:
filter_block	./leveldb/table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_data	./leveldb/table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	./leveldb/table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	./leveldb/include/leveldb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	./leveldb/db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
filter_policy_	./leveldb/db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest	file:
final	./httpserver.cpp	/^class HTTPWorkItem final : public HTTPClosure$/;"	c	file:
final	./index/blockfilterindex.h	/^class BlockFilterIndex final : public BaseIndex$/;"	c
final	./index/txindex.h	/^class TxIndex final : public BaseIndex$/;"	c
final	./init.cpp	/^class CCoinsViewErrorCatcher final : public CCoinsViewBacked$/;"	c	file:
final	./net_processing.h	/^class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {$/;"	c
final	./qt/addressbookpage.cpp	/^class AddressBookSortFilterProxyModel final : public QSortFilterProxyModel$/;"	c	file:
final	./qt/macos_appnap.h	/^class CAppNapInhibitor final$/;"	c
final	./script/descriptor.cpp	/^class AddressDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class BIP32PubkeyProvider final : public PubkeyProvider$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class ComboDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class ConstPubkeyProvider final : public PubkeyProvider$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class MultisigDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class OriginPubkeyProvider final : public PubkeyProvider$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class PKDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class PKHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class RawDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class SHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class WPKHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/descriptor.cpp	/^class WSHDescriptor final : public DescriptorImpl$/;"	c	namespace:__anon75	file:
final	./script/sign.cpp	/^class DummySignatureChecker final : public BaseSignatureChecker$/;"	c	namespace:__anon83	file:
final	./script/sign.cpp	/^class DummySignatureCreator final : public BaseSignatureCreator {$/;"	c	namespace:__anon83	file:
final	./script/sign.cpp	/^class SignatureExtractorChecker final : public BaseSignatureChecker$/;"	c	file:
final	./script/sign.h	/^struct FlatSigningProvider final : public SigningProvider$/;"	s
final	./txdb.h	/^class CCoinsViewDB final : public CCoinsView$/;"	c
final	./util/bytevectorhash.h	/^class ByteVectorHash final$/;"	c
final	./wallet/db.h	/^    class SafeDbt final$/;"	c	class:BerkeleyBatch
final	./wallet/wallet.h	/^class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notifications$/;"	c
final	./wallet/walletutil.h	/^class WalletLocation final$/;"	c
final	./zmq/zmqnotificationinterface.h	/^class CZMQNotificationInterface final : public CValidationInterface$/;"	c
final_script_sig	./psbt.h	/^    CScript final_script_sig;$/;"	m	struct:PSBTInput
final_script_witness	./psbt.h	/^    CScriptWitness final_script_witness;$/;"	m	struct:PSBTInput
finalize	./univalue/lib/univalue_utffilter.h	/^    bool finalize()$/;"	f	class:JSONUTF8StringFilter
finalizepsbt	./rpc/rawtransaction.cpp	/^UniValue finalizepsbt(const JSONRPCRequest& request)$/;"	f
find	./indirectmap.h	/^    const_iterator find(const K& key) const         { return m.find(&key); }$/;"	f	class:indirectmap
find	./indirectmap.h	/^    iterator find(const K& key)                     { return m.find(&key); }$/;"	f	class:indirectmap
find	./limitedmap.h	/^    const_iterator find(const key_type& k) const { return map.find(k); }$/;"	f	class:limitedmap
findKey	./univalue/lib/univalue.cpp	/^bool UniValue::findKey(const std::string& key, size_t& retIdx) const$/;"	f	class:UniValue
findSighashFlags	./bitcoin-tx.cpp	/^static bool findSighashFlags(int& flags, const std::string& flagStr)$/;"	f	file:
findStartupItemInList	./qt/guiutil.cpp	/^LSSharedFileListItemRef findStartupItemInList(CFArrayRef listSnapshot, LSSharedFileListRef list, CFURLRef findUrl)$/;"	f	namespace:GUIUtil
find_value	./univalue/lib/univalue.cpp	/^const UniValue& find_value(const UniValue& obj, const std::string& name)$/;"	f
fingerprint	./script/sign.h	/^    unsigned char fingerprint[4]; \/\/!< First 32 bits of the Hash160 of the public key at the root of the path$/;"	m	struct:KeyOriginInfo
finish	./qt/splashscreen.cpp	/^void SplashScreen::finish()$/;"	f	class:SplashScreen
finish_	./leveldb/db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon19::Stats	file:
finished_	./leveldb/table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
fixedPitchFont	./qt/guiutil.cpp	/^QFont fixedPitchFont()$/;"	f	namespace:GUIUtil
fixup	./qt/bitcoinamountfield.cpp	/^    void fixup(QString &input) const$/;"	f	class:AmountSpinBox
flag	./logging.cpp	/^    BCLog::LogFlags flag;$/;"	m	struct:CLogCategoryDesc	file:
flag	./threadinterrupt.h	/^    std::atomic<bool> flag;$/;"	m	class:CThreadInterrupt
flagStr	./bitcoin-tx.cpp	/^    const char *flagStr;$/;"	m	struct:__anon87	file:
flags	./bitcoin-tx.cpp	/^    int flags;$/;"	m	struct:__anon87	file:
flags	./coins.h	/^    unsigned char flags;$/;"	m	struct:CCoinsCacheEntry
flags	./qt/addresstablemodel.cpp	/^Qt::ItemFlags AddressTableModel::flags(const QModelIndex &index) const$/;"	f	class:AddressTableModel
flags	./qt/bantablemodel.cpp	/^Qt::ItemFlags BanTableModel::flags(const QModelIndex &index) const$/;"	f	class:BanTableModel
flags	./qt/peertablemodel.cpp	/^Qt::ItemFlags PeerTableModel::flags(const QModelIndex &index) const$/;"	f	class:PeerTableModel
flags	./qt/recentrequeststablemodel.cpp	/^Qt::ItemFlags RecentRequestsTableModel::flags(const QModelIndex &index) const$/;"	f	class:RecentRequestsTableModel
flags	./test/script_tests.cpp	/^    int flags;$/;"	m	class:__anon58::TestBuilder	file:
flist_	./leveldb/db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
fn	./secp256k1/src/util.h	/^    void (*fn)(const char *text, void* data);$/;"	m	struct:__anon107
fname_	./leveldb/util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
focusInEvent	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::focusInEvent(QFocusEvent *evt)$/;"	f	class:QValidatedLineEdit
focusOutEvent	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::focusOutEvent(QFocusEvent *evt)$/;"	f	class:QValidatedLineEdit
focusTransaction	./qt/transactionview.cpp	/^void TransactionView::focusTransaction(const QModelIndex &idx)$/;"	f	class:TransactionView
focusTransaction	./qt/transactionview.cpp	/^void TransactionView::focusTransaction(const uint256& txid)$/;"	f	class:TransactionView
fontBigger	./qt/rpcconsole.cpp	/^void RPCConsole::fontBigger()$/;"	f	class:RPCConsole
fontSizeSettingsKey	./qt/rpcconsole.cpp	/^const char fontSizeSettingsKey[] = "consoleFontSize";$/;"	v
fontSmaller	./qt/rpcconsole.cpp	/^void RPCConsole::fontSmaller()$/;"	f	class:RPCConsole
footer	./bench/bench.cpp	/^void benchmark::ConsolePrinter::footer() {}$/;"	f	class:benchmark::ConsolePrinter
footer	./bench/bench.cpp	/^void benchmark::PlotlyPrinter::footer()$/;"	f	class:benchmark::PlotlyPrinter
fopen	./fs.cpp	/^FILE *fopen(const fs::path& p, const char *mode)$/;"	f	namespace:fsbridge
force_error_	./leveldb/db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
format	./qt/bitcoinunits.cpp	/^QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators)$/;"	f	class:BitcoinUnits
format	./tinyformat.h	/^        void format(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
format	./tinyformat.h	/^inline std::string format(const char* fmt)$/;"	f	namespace:tinyformat
format	./tinyformat.h	/^inline void format(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat
format	./tinyformat.h	/^std::string format(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	./tinyformat.h	/^std::string format(const std::string &fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	./tinyformat.h	/^void format(std::ostream& out, const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
formatBitcoinURI	./qt/guiutil.cpp	/^QString formatBitcoinURI(const SendCoinsRecipient &info)$/;"	f	namespace:GUIUtil
formatBytes	./qt/guiutil.cpp	/^QString formatBytes(uint64_t bytes)$/;"	f	namespace:GUIUtil
formatClientStartupTime	./qt/clientmodel.cpp	/^QString ClientModel::formatClientStartupTime() const$/;"	f	class:ClientModel
formatDurationStr	./qt/guiutil.cpp	/^QString formatDurationStr(int secs)$/;"	f	namespace:GUIUtil
formatFullVersion	./qt/clientmodel.cpp	/^QString ClientModel::formatFullVersion() const$/;"	f	class:ClientModel
formatHtmlWithUnit	./qt/bitcoinunits.cpp	/^QString BitcoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)$/;"	f	class:BitcoinUnits
formatImpl	./tinyformat.h	/^        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
formatImpl	./tinyformat.h	/^inline void formatImpl(std::ostream& out, const char* fmt,$/;"	f	namespace:tinyformat::detail
formatNiceTimeOffset	./qt/guiutil.cpp	/^QString formatNiceTimeOffset(qint64 secs)$/;"	f	namespace:GUIUtil
formatPingTime	./qt/guiutil.cpp	/^QString formatPingTime(double dPingTime)$/;"	f	namespace:GUIUtil
formatServicesStr	./qt/guiutil.cpp	/^QString formatServicesStr(quint64 mask)$/;"	f	namespace:GUIUtil
formatSubVersion	./qt/clientmodel.cpp	/^QString ClientModel::formatSubVersion() const$/;"	f	class:ClientModel
formatTimeOffset	./qt/guiutil.cpp	/^QString formatTimeOffset(int64_t nTimeOffset)$/;"	f	namespace:GUIUtil
formatTooltip	./qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTooltip(const TransactionRecord *rec) const$/;"	f	class:TransactionTableModel
formatTruncated	./tinyformat.h	/^inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)$/;"	f	namespace:tinyformat::detail
formatTxAmount	./qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxAmount(const TransactionRecord *wtx, bool showUnconfirmed, BitcoinUnits::SeparatorStyle separators) const$/;"	f	class:TransactionTableModel
formatTxDate	./qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxDate(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxStatus	./qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxToAddress	./qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const$/;"	f	class:TransactionTableModel
formatTxType	./qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatValue	./tinyformat.h	/^inline void formatValue(std::ostream& out, const char* \/*fmtBegin*\/,$/;"	f	namespace:tinyformat
formatValueAsType	./tinyformat.h	/^struct formatValueAsType$/;"	s	namespace:tinyformat::detail
formatValueAsType	./tinyformat.h	/^struct formatValueAsType<T,fmtT,true>$/;"	s	namespace:tinyformat::detail
formatWithUnit	./qt/bitcoinunits.cpp	/^QString BitcoinUnits::formatWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)$/;"	f	class:BitcoinUnits
formatZeroIntegerWorkaround	./tinyformat.h	/^struct formatZeroIntegerWorkaround$/;"	s	namespace:tinyformat::detail
formatZeroIntegerWorkaround	./tinyformat.h	/^struct formatZeroIntegerWorkaround<T,true>$/;"	s	namespace:tinyformat::detail
format_error	./tinyformat.h	/^    explicit format_error(const std::string &what): std::runtime_error(what) {$/;"	f	class:tinyformat::format_error
format_error	./tinyformat.h	/^class format_error: public std::runtime_error$/;"	c	namespace:tinyformat
found	./rpc/mining.cpp	/^    bool found;$/;"	m	class:submitblock_StateCatcher	file:
fread_unlocked	./leveldb/port/port_posix.h	/^#define fread_unlocked /;"	d
fread_unlocked	./leveldb/port/port_win.h	/^#define fread_unlocked /;"	d
free	./support/lockedpool.cpp	/^void Arena::free(void *ptr)$/;"	f	class:Arena
free	./support/lockedpool.cpp	/^void LockedPool::free(void *ptr)$/;"	f	class:LockedPool
free	./support/lockedpool.h	/^        size_t free;$/;"	m	struct:Arena::Stats
free	./support/lockedpool.h	/^        size_t free;$/;"	m	struct:LockedPool::Stats
fromPeer	./net_processing.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
fromPeer	./test/denialofservice_tests.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
from_hex	./crypto/ctaes/test.c	/^static void from_hex(unsigned char* data, int len, const char* hex) {$/;"	f	file:
front	./prevector.h	/^    T& front() {$/;"	f	class:prevector
front	./prevector.h	/^    const T& front() const {$/;"	f	class:prevector
fsbridge	./fs.cpp	/^namespace fsbridge {$/;"	n	file:
fsbridge	./fs.h	/^namespace fsbridge {$/;"	n
func	./bench/bench.h	/^        BenchFunction func;$/;"	m	struct:benchmark::BenchRunner::Bench
func	./httpserver.cpp	/^    HTTPRequestHandler func;$/;"	m	class:final	file:
func	./leveldb/util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon5::Test	file:
func	./qt/rpcconsole.cpp	/^    std::function<void()> func;$/;"	m	class:QtRPCTimerBase	file:
func_add_hook	./secp256k1/build-aux/ltmain.sh	/^func_add_hook ()$/;"	f
func_add_hook	./secp256k1/libtool	/^func_add_hook ()$/;"	f
func_add_hook	./univalue/build-aux/ltmain.sh	/^func_add_hook ()$/;"	f
func_add_hook	./univalue/libtool	/^func_add_hook ()$/;"	f
func_append	./secp256k1/build-aux/ltmain.sh	/^  func_append ()$/;"	f
func_append	./secp256k1/libtool	/^  func_append ()$/;"	f
func_append	./univalue/build-aux/ltmain.sh	/^  func_append ()$/;"	f
func_append	./univalue/libtool	/^  func_append ()$/;"	f
func_append_quoted	./secp256k1/build-aux/ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_quoted	./secp256k1/libtool	/^  func_append_quoted ()$/;"	f
func_append_quoted	./univalue/build-aux/ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_quoted	./univalue/libtool	/^  func_append_quoted ()$/;"	f
func_append_uniq	./secp256k1/build-aux/ltmain.sh	/^func_append_uniq ()$/;"	f
func_append_uniq	./secp256k1/libtool	/^func_append_uniq ()$/;"	f
func_append_uniq	./univalue/build-aux/ltmain.sh	/^func_append_uniq ()$/;"	f
func_append_uniq	./univalue/libtool	/^func_append_uniq ()$/;"	f
func_arith	./secp256k1/build-aux/ltmain.sh	/^  func_arith ()$/;"	f
func_arith	./secp256k1/libtool	/^  func_arith ()$/;"	f
func_arith	./univalue/build-aux/ltmain.sh	/^  func_arith ()$/;"	f
func_arith	./univalue/libtool	/^  func_arith ()$/;"	f
func_cc_basename	./secp256k1/config.status	/^func_cc_basename ()$/;"	f
func_cc_basename	./secp256k1/configure	/^func_cc_basename ()$/;"	f
func_cc_basename	./secp256k1/libtool	/^func_cc_basename ()$/;"	f
func_cc_basename	./univalue/config.status	/^func_cc_basename ()$/;"	f
func_cc_basename	./univalue/configure	/^func_cc_basename ()$/;"	f
func_cc_basename	./univalue/libtool	/^func_cc_basename ()$/;"	f
func_check_prog_grep	./secp256k1/build-aux/ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	./secp256k1/libtool	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	./univalue/build-aux/ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_grep	./univalue/libtool	/^  func_check_prog_grep ()$/;"	f
func_check_prog_sed	./secp256k1/build-aux/ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	./secp256k1/libtool	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	./univalue/build-aux/ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_prog_sed	./univalue/libtool	/^  func_check_prog_sed ()$/;"	f
func_check_version_match	./secp256k1/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	./secp256k1/libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	./univalue/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	./univalue/libtool	/^func_check_version_match ()$/;"	f
func_cl_dashL	./secp256k1/build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashL	./univalue/build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	./secp256k1/build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_dashl	./univalue/build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	./secp256k1/build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_cl_wrapper	./univalue/build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_config	./secp256k1/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	./secp256k1/libtool	/^func_config ()$/;"	f
func_config	./univalue/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	./univalue/libtool	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	./secp256k1/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	./univalue/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	./secp256k1/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	./univalue/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	./secp256k1/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	./univalue/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	./secp256k1/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	./secp256k1/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	./univalue/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	./univalue/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	./secp256k1/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	./univalue/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	./secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	./secp256k1/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	./univalue/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	./univalue/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	./secp256k1/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	./univalue/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	./secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	./secp256k1/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	./univalue/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	./univalue/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	./secp256k1/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	./univalue/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	./secp256k1/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	./secp256k1/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	./univalue/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	./univalue/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	./secp256k1/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	./univalue/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	./univalue/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	./secp256k1/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	./univalue/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	./secp256k1/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	./univalue/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	./univalue/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	./secp256k1/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	./univalue/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	./univalue/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	./secp256k1/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	./univalue/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	./secp256k1/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	./univalue/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	./univalue/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	./secp256k1/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	./univalue/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	./univalue/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	./secp256k1/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	./secp256k1/libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	./univalue/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	./univalue/libtool	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	./secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	./secp256k1/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	./univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	./univalue/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	./secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	./secp256k1/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	./univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	./univalue/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	./secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	./secp256k1/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	./univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	./univalue/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	./secp256k1/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	./secp256k1/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	./univalue/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	./univalue/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	./secp256k1/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	./secp256k1/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	./univalue/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	./univalue/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	./secp256k1/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	./secp256k1/libtool	/^func_cygpath ()$/;"	f
func_cygpath	./univalue/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	./univalue/libtool	/^func_cygpath ()$/;"	f
func_dll_def_p	./secp256k1/build-aux/ltmain.sh	/^func_dll_def_p ()$/;"	f
func_dll_def_p	./secp256k1/libtool	/^func_dll_def_p ()$/;"	f
func_dll_def_p	./univalue/build-aux/ltmain.sh	/^func_dll_def_p ()$/;"	f
func_dll_def_p	./univalue/libtool	/^func_dll_def_p ()$/;"	f
func_echo	./secp256k1/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	./secp256k1/libtool	/^func_echo ()$/;"	f
func_echo	./univalue/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	./univalue/libtool	/^func_echo ()$/;"	f
func_echo_all	./secp256k1/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	./secp256k1/configure	/^func_echo_all ()$/;"	f
func_echo_all	./secp256k1/libtool	/^func_echo_all ()$/;"	f
func_echo_all	./univalue/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	./univalue/configure	/^func_echo_all ()$/;"	f
func_echo_all	./univalue/libtool	/^func_echo_all ()$/;"	f
func_echo_infix_1	./secp256k1/build-aux/ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	./secp256k1/libtool	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	./univalue/build-aux/ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_echo_infix_1	./univalue/libtool	/^func_echo_infix_1 ()$/;"	f
func_emit_cwrapperexe_src	./secp256k1/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	./secp256k1/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	./univalue/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	./univalue/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	./secp256k1/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	./secp256k1/libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	./univalue/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	./univalue/libtool	/^func_emit_wrapper ()$/;"	f
func_enable_tag	./secp256k1/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	./secp256k1/libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	./univalue/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	./univalue/libtool	/^func_enable_tag ()$/;"	f
func_error	./secp256k1/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	./secp256k1/libtool	/^func_error ()$/;"	f
func_error	./univalue/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	./univalue/libtool	/^func_error ()$/;"	f
func_exec_program	./secp256k1/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	./secp256k1/libtool	/^func_exec_program ()$/;"	f
func_exec_program	./univalue/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	./univalue/libtool	/^func_exec_program ()$/;"	f
func_exec_program_core	./secp256k1/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	./secp256k1/libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	./univalue/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	./univalue/libtool	/^func_exec_program_core ()$/;"	f
func_executable_p	./secp256k1/build-aux/ltmain.sh	/^func_executable_p ()$/;"	f
func_executable_p	./secp256k1/libtool	/^func_executable_p ()$/;"	f
func_executable_p	./univalue/build-aux/ltmain.sh	/^func_executable_p ()$/;"	f
func_executable_p	./univalue/libtool	/^func_executable_p ()$/;"	f
func_execute_cmds	./secp256k1/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	./secp256k1/libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	./univalue/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	./univalue/libtool	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	./secp256k1/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	./secp256k1/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	./univalue/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	./univalue/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	./secp256k1/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	./secp256k1/libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	./univalue/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	./univalue/libtool	/^func_extract_archives ()$/;"	f
func_fallback_echo	./secp256k1/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	./secp256k1/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	./secp256k1/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	./secp256k1/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	./secp256k1/libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	./univalue/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	./univalue/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	./univalue/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	./univalue/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	./univalue/libtool	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	./secp256k1/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	./secp256k1/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	./univalue/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	./univalue/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_error	./secp256k1/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	./secp256k1/libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	./univalue/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	./univalue/libtool	/^func_fatal_error ()$/;"	f
func_fatal_help	./secp256k1/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	./secp256k1/libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	./univalue/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	./univalue/libtool	/^func_fatal_help ()$/;"	f
func_features	./secp256k1/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	./secp256k1/libtool	/^func_features ()$/;"	f
func_features	./univalue/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	./univalue/libtool	/^func_features ()$/;"	f
func_file_conv	./secp256k1/build-aux/compile	/^func_file_conv ()$/;"	f
func_file_conv	./univalue/build-aux/compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	./secp256k1/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	./secp256k1/libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	./univalue/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	./univalue/libtool	/^func_generate_dlsyms ()$/;"	f
func_generated_by_libtool_p	./secp256k1/build-aux/ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	./secp256k1/libtool	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	./univalue/build-aux/ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_generated_by_libtool_p	./univalue/libtool	/^func_generated_by_libtool_p ()$/;"	f
func_grep	./secp256k1/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	./secp256k1/libtool	/^func_grep ()$/;"	f
func_grep	./univalue/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	./univalue/libtool	/^func_grep ()$/;"	f
func_help	./secp256k1/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	./secp256k1/libtool	/^func_help ()$/;"	f
func_help	./univalue/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	./univalue/libtool	/^func_help ()$/;"	f
func_hookable	./secp256k1/build-aux/ltmain.sh	/^func_hookable ()$/;"	f
func_hookable	./secp256k1/libtool	/^func_hookable ()$/;"	f
func_hookable	./univalue/build-aux/ltmain.sh	/^func_hookable ()$/;"	f
func_hookable	./univalue/libtool	/^func_hookable ()$/;"	f
func_infer_tag	./secp256k1/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	./secp256k1/libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	./univalue/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	./univalue/libtool	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	./secp256k1/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	./secp256k1/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	./univalue/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	./univalue/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	./secp256k1/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	./secp256k1/libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	./univalue/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	./univalue/libtool	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	./secp256k1/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	./secp256k1/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	./univalue/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	./univalue/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_len	./secp256k1/build-aux/ltmain.sh	/^  func_len ()$/;"	f
func_len	./secp256k1/libtool	/^  func_len ()$/;"	f
func_len	./univalue/build-aux/ltmain.sh	/^  func_len ()$/;"	f
func_len	./univalue/libtool	/^  func_len ()$/;"	f
func_lo2o	./secp256k1/build-aux/ltmain.sh	/^  func_lo2o ()$/;"	f
func_lo2o	./secp256k1/libtool	/^  func_lo2o ()$/;"	f
func_lo2o	./univalue/build-aux/ltmain.sh	/^  func_lo2o ()$/;"	f
func_lo2o	./univalue/libtool	/^  func_lo2o ()$/;"	f
func_lt_dump_args	./secp256k1/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	./secp256k1/libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	./univalue/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	./univalue/libtool	/^func_lt_dump_args ()$/;"	f
func_lt_ver	./secp256k1/build-aux/ltmain.sh	/^func_lt_ver ()$/;"	f
func_lt_ver	./secp256k1/libtool	/^func_lt_ver ()$/;"	f
func_lt_ver	./univalue/build-aux/ltmain.sh	/^func_lt_ver ()$/;"	f
func_lt_ver	./univalue/libtool	/^func_lt_ver ()$/;"	f
func_ltwrapper_executable_p	./secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	./secp256k1/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	./univalue/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	./univalue/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	./secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	./secp256k1/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	./univalue/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	./univalue/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	./secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	./secp256k1/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	./univalue/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	./univalue/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	./secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	./secp256k1/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	./univalue/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	./univalue/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	./secp256k1/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	./secp256k1/libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	./univalue/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	./univalue/libtool	/^func_missing_arg ()$/;"	f
func_mkdir_p	./secp256k1/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	./secp256k1/libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	./univalue/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	./univalue/libtool	/^func_mkdir_p ()$/;"	f
func_mktempdir	./secp256k1/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	./secp256k1/libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	./univalue/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	./univalue/libtool	/^func_mktempdir ()$/;"	f
func_mode_compile	./secp256k1/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	./secp256k1/libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	./univalue/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	./univalue/libtool	/^func_mode_compile ()$/;"	f
func_mode_execute	./secp256k1/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	./secp256k1/libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	./univalue/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	./univalue/libtool	/^func_mode_execute ()$/;"	f
func_mode_finish	./secp256k1/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	./secp256k1/libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	./univalue/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	./univalue/libtool	/^func_mode_finish ()$/;"	f
func_mode_help	./secp256k1/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	./secp256k1/libtool	/^func_mode_help ()$/;"	f
func_mode_help	./univalue/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	./univalue/libtool	/^func_mode_help ()$/;"	f
func_mode_install	./secp256k1/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	./secp256k1/libtool	/^func_mode_install ()$/;"	f
func_mode_install	./univalue/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	./univalue/libtool	/^func_mode_install ()$/;"	f
func_mode_link	./secp256k1/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	./secp256k1/libtool	/^func_mode_link ()$/;"	f
func_mode_link	./univalue/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	./univalue/libtool	/^func_mode_link ()$/;"	f
func_mode_uninstall	./secp256k1/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	./secp256k1/libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	./univalue/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	./univalue/libtool	/^func_mode_uninstall ()$/;"	f
func_munge_path_list	./secp256k1/config.status	/^func_munge_path_list ()$/;"	f
func_munge_path_list	./secp256k1/configure	/^func_munge_path_list ()$/;"	f
func_munge_path_list	./secp256k1/libtool	/^func_munge_path_list ()$/;"	f
func_munge_path_list	./univalue/config.status	/^func_munge_path_list ()$/;"	f
func_munge_path_list	./univalue/configure	/^func_munge_path_list ()$/;"	f
func_munge_path_list	./univalue/libtool	/^func_munge_path_list ()$/;"	f
func_normal_abspath	./secp256k1/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	./secp256k1/libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	./univalue/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	./univalue/libtool	/^func_normal_abspath ()$/;"	f
func_notquiet	./secp256k1/build-aux/ltmain.sh	/^func_notquiet ()$/;"	f
func_notquiet	./secp256k1/libtool	/^func_notquiet ()$/;"	f
func_notquiet	./univalue/build-aux/ltmain.sh	/^func_notquiet ()$/;"	f
func_notquiet	./univalue/libtool	/^func_notquiet ()$/;"	f
func_options	./secp256k1/build-aux/ltmain.sh	/^func_options ()$/;"	f
func_options	./secp256k1/libtool	/^func_options ()$/;"	f
func_options	./univalue/build-aux/ltmain.sh	/^func_options ()$/;"	f
func_options	./univalue/libtool	/^func_options ()$/;"	f
func_options_prep	./secp256k1/build-aux/ltmain.sh	/^func_options_prep ()$/;"	f
func_options_prep	./secp256k1/libtool	/^func_options_prep ()$/;"	f
func_options_prep	./univalue/build-aux/ltmain.sh	/^func_options_prep ()$/;"	f
func_options_prep	./univalue/libtool	/^func_options_prep ()$/;"	f
func_parse_lt_options	./secp256k1/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	./secp256k1/libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	./univalue/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	./univalue/libtool	/^func_parse_lt_options ()$/;"	f
func_parse_options	./secp256k1/build-aux/ltmain.sh	/^func_parse_options ()$/;"	f
func_parse_options	./secp256k1/libtool	/^func_parse_options ()$/;"	f
func_parse_options	./univalue/build-aux/ltmain.sh	/^func_parse_options ()$/;"	f
func_parse_options	./univalue/libtool	/^func_parse_options ()$/;"	f
func_path_progs	./secp256k1/build-aux/ltmain.sh	/^func_path_progs ()$/;"	f
func_path_progs	./secp256k1/libtool	/^func_path_progs ()$/;"	f
func_path_progs	./univalue/build-aux/ltmain.sh	/^func_path_progs ()$/;"	f
func_path_progs	./univalue/libtool	/^func_path_progs ()$/;"	f
func_quote_for_eval	./secp256k1/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	./secp256k1/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	./univalue/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	./univalue/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	./secp256k1/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	./secp256k1/libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	./univalue/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	./univalue/libtool	/^func_quote_for_expand ()$/;"	f
func_relative_path	./secp256k1/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	./secp256k1/libtool	/^func_relative_path ()$/;"	f
func_relative_path	./univalue/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	./univalue/libtool	/^func_relative_path ()$/;"	f
func_remove_hook	./secp256k1/build-aux/ltmain.sh	/^func_remove_hook ()$/;"	f
func_remove_hook	./secp256k1/libtool	/^func_remove_hook ()$/;"	f
func_remove_hook	./univalue/build-aux/ltmain.sh	/^func_remove_hook ()$/;"	f
func_remove_hook	./univalue/libtool	/^func_remove_hook ()$/;"	f
func_replace_sysroot	./secp256k1/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	./secp256k1/libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	./univalue/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	./univalue/libtool	/^func_replace_sysroot ()$/;"	f
func_require_term_colors	./secp256k1/build-aux/ltmain.sh	/^func_require_term_colors ()$/;"	f
func_require_term_colors	./secp256k1/libtool	/^func_require_term_colors ()$/;"	f
func_require_term_colors	./univalue/build-aux/ltmain.sh	/^func_require_term_colors ()$/;"	f
func_require_term_colors	./univalue/libtool	/^func_require_term_colors ()$/;"	f
func_resolve_sysroot	./secp256k1/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	./secp256k1/libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	./univalue/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	./univalue/libtool	/^func_resolve_sysroot ()$/;"	f
func_run_hooks	./secp256k1/build-aux/ltmain.sh	/^func_run_hooks ()$/;"	f
func_run_hooks	./secp256k1/libtool	/^func_run_hooks ()$/;"	f
func_run_hooks	./univalue/build-aux/ltmain.sh	/^func_run_hooks ()$/;"	f
func_run_hooks	./univalue/libtool	/^func_run_hooks ()$/;"	f
func_show_eval	./secp256k1/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	./secp256k1/libtool	/^func_show_eval ()$/;"	f
func_show_eval	./univalue/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	./univalue/libtool	/^func_show_eval ()$/;"	f
func_show_eval_locale	./secp256k1/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	./secp256k1/libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	./univalue/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	./univalue/libtool	/^func_show_eval_locale ()$/;"	f
func_sort_ver	./secp256k1/build-aux/ltmain.sh	/^func_sort_ver ()$/;"	f
func_sort_ver	./secp256k1/libtool	/^func_sort_ver ()$/;"	f
func_sort_ver	./univalue/build-aux/ltmain.sh	/^func_sort_ver ()$/;"	f
func_sort_ver	./univalue/libtool	/^func_sort_ver ()$/;"	f
func_source	./secp256k1/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	./secp256k1/libtool	/^func_source ()$/;"	f
func_source	./univalue/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	./univalue/libtool	/^func_source ()$/;"	f
func_split_equals	./secp256k1/build-aux/ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_equals	./secp256k1/libtool	/^  func_split_equals ()$/;"	f
func_split_equals	./univalue/build-aux/ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_equals	./univalue/libtool	/^  func_split_equals ()$/;"	f
func_split_short_opt	./secp256k1/build-aux/ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	./secp256k1/libtool	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	./univalue/build-aux/ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_split_short_opt	./univalue/libtool	/^  func_split_short_opt ()$/;"	f
func_stripname	./secp256k1/build-aux/ltmain.sh	/^  func_stripname ()$/;"	f
func_stripname	./secp256k1/libtool	/^  func_stripname ()$/;"	f
func_stripname	./univalue/build-aux/ltmain.sh	/^  func_stripname ()$/;"	f
func_stripname	./univalue/libtool	/^  func_stripname ()$/;"	f
func_stripname_cnf	./univalue/configure	/^func_stripname_cnf ()$/;"	f
func_suncc_cstd_abi	./secp256k1/build-aux/ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	./secp256k1/libtool	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	./univalue/build-aux/ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_suncc_cstd_abi	./univalue/libtool	/^func_suncc_cstd_abi ()$/;"	f
func_to_host_file	./secp256k1/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	./secp256k1/libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	./univalue/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	./univalue/libtool	/^func_to_host_file ()$/;"	f
func_to_host_path	./secp256k1/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	./secp256k1/libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	./univalue/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	./univalue/libtool	/^func_to_host_path ()$/;"	f
func_to_tool_file	./secp256k1/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	./secp256k1/libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	./univalue/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	./univalue/libtool	/^func_to_tool_file ()$/;"	f
func_tr_sh	./secp256k1/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	./secp256k1/libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	./univalue/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	./univalue/libtool	/^func_tr_sh ()$/;"	f
func_usage	./secp256k1/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	./secp256k1/libtool	/^func_usage ()$/;"	f
func_usage	./univalue/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	./univalue/libtool	/^func_usage ()$/;"	f
func_usage_message	./secp256k1/build-aux/ltmain.sh	/^func_usage_message ()$/;"	f
func_usage_message	./secp256k1/libtool	/^func_usage_message ()$/;"	f
func_usage_message	./univalue/build-aux/ltmain.sh	/^func_usage_message ()$/;"	f
func_usage_message	./univalue/libtool	/^func_usage_message ()$/;"	f
func_validate_options	./secp256k1/build-aux/ltmain.sh	/^func_validate_options ()$/;"	f
func_validate_options	./secp256k1/libtool	/^func_validate_options ()$/;"	f
func_validate_options	./univalue/build-aux/ltmain.sh	/^func_validate_options ()$/;"	f
func_validate_options	./univalue/libtool	/^func_validate_options ()$/;"	f
func_verbose	./secp256k1/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	./secp256k1/libtool	/^func_verbose ()$/;"	f
func_verbose	./univalue/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	./univalue/libtool	/^func_verbose ()$/;"	f
func_version	./secp256k1/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	./secp256k1/libtool	/^func_version ()$/;"	f
func_version	./univalue/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	./univalue/libtool	/^func_version ()$/;"	f
func_warn_and_continue	./secp256k1/build-aux/ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	./secp256k1/libtool	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	./univalue/build-aux/ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warn_and_continue	./univalue/libtool	/^func_warn_and_continue ()$/;"	f
func_warning	./secp256k1/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	./secp256k1/libtool	/^func_warning ()$/;"	f
func_warning	./univalue/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	./univalue/libtool	/^func_warning ()$/;"	f
func_win32_import_lib_p	./secp256k1/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	./secp256k1/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	./univalue/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	./univalue/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	./secp256k1/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	./secp256k1/libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	./univalue/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	./univalue/libtool	/^func_win32_libid ()$/;"	f
func_write_libtool_object	./secp256k1/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	./secp256k1/libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	./univalue/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	./univalue/libtool	/^func_write_libtool_object ()$/;"	f
func_xform	./secp256k1/build-aux/ltmain.sh	/^  func_xform ()$/;"	f
func_xform	./secp256k1/libtool	/^  func_xform ()$/;"	f
func_xform	./univalue/build-aux/ltmain.sh	/^  func_xform ()$/;"	f
func_xform	./univalue/libtool	/^  func_xform ()$/;"	f
function	./leveldb/include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	./leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon8::PosixEnv::BGItem	file:
fundrawtransaction	./wallet/rpcwallet.cpp	/^static UniValue fundrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
fwrite_unlocked	./leveldb/port/port_posix.h	/^#define fwrite_unlocked /;"	d
gArgs	./util/system.cpp	/^ArgsManager gArgs;$/;"	v
gBase	./torcontrol.cpp	/^static struct event_base *gBase;$/;"	v	typeref:struct:event_base	file:
gFlags	./test/script_tests.cpp	/^static const unsigned int gFlags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;$/;"	v	file:
g_PageSize	./leveldb/util/env_win.cc	/^const size_t g_PageSize = GetPageSize();$/;"	m	namespace:leveldb::Win32	file:
g_banman	./init.cpp	/^std::unique_ptr<BanMan> g_banman;$/;"	v
g_best_block	./validation.cpp	/^uint256 g_best_block;$/;"	v
g_best_block_cv	./validation.cpp	/^std::condition_variable g_best_block_cv;$/;"	v
g_best_block_mutex	./validation.cpp	/^Mutex g_best_block_mutex;$/;"	v
g_blocks_path_cache_net_specific	./util/system.cpp	/^static fs::path g_blocks_path_cache_net_specific;$/;"	v	file:
g_chainstate	./validation.cpp	/^} g_chainstate;$/;"	v	typeref:class:CChainState
g_connNotifyEntryRemoved	./validationinterface.cpp	/^static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_connNotifyEntryRemoved;$/;"	v	file:
g_connman	./init.cpp	/^std::unique_ptr<CConnman> g_connman;$/;"	v
g_cs_orphans	./net_processing.cpp	/^    static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;$/;"	m	namespace:__anon88	file:
g_cs_orphans	./net_processing.cpp	/^CCriticalSection g_cs_orphans;$/;"	v
g_debug_lockorder_abort	./sync.cpp	/^bool g_debug_lockorder_abort = true;$/;"	v
g_enabled_filter_types	./init.cpp	/^std::vector<BlockFilterType> g_enabled_filter_types;$/;"	m	namespace:__anon123	file:
g_env	./leveldb/db/db_bench.cc	/^leveldb::Env* g_env = NULL;$/;"	m	namespace:leveldb::__anon19	file:
g_filter_indexes	./index/blockfilterindex.cpp	/^static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;$/;"	v	file:
g_filter_types	./blockfilter.cpp	/^static const std::map<BlockFilterType, std::string> g_filter_types = {$/;"	v	file:
g_genesis_wait_cv	./init.cpp	/^static std::condition_variable g_genesis_wait_cv;$/;"	v	file:
g_genesis_wait_mutex	./init.cpp	/^static Mutex g_genesis_wait_mutex;$/;"	v	file:
g_insecure_rand_ctx	./test/setup_common.cpp	/^FastRandomContext g_insecure_rand_ctx;$/;"	v
g_internal_prefix	./netaddress.cpp	/^static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };$/;"	v	file:
g_known_wallet_flags	./wallet/wallet.h	/^static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;$/;"	v
g_lockstack	./sync.cpp	/^static thread_local LockStack g_lockstack;$/;"	v	file:
g_rdrand_supported	./random.cpp	/^static bool g_rdrand_supported = false;$/;"	v	file:
g_rdseed_supported	./random.cpp	/^static bool g_rdseed_supported = false;$/;"	v	file:
g_relay_txes	./net.cpp	/^bool g_relay_txes = !DEFAULT_BLOCKSONLY;$/;"	v
g_rpcSignals	./rpc/server.cpp	/^} g_rpcSignals;$/;"	v	typeref:struct:CRPCSignals	file:
g_rpc_interfaces	./rpc/util.cpp	/^InitInterfaces* g_rpc_interfaces = nullptr;$/;"	v
g_rpc_server_info	./rpc/server.cpp	/^static RPCServerInfo g_rpc_server_info;$/;"	v	file:
g_scan_in_progress	./rpc/blockchain.cpp	/^static std::atomic<bool> g_scan_in_progress;$/;"	v	file:
g_scan_progress	./rpc/blockchain.cpp	/^static std::atomic<int> g_scan_progress;$/;"	v	file:
g_should_abort_scan	./rpc/blockchain.cpp	/^static std::atomic<bool> g_should_abort_scan;$/;"	v	file:
g_signals	./validationinterface.cpp	/^static CMainSignals g_signals;$/;"	v	file:
g_thread_http_workers	./httpserver.cpp	/^static std::vector<std::thread> g_thread_http_workers;$/;"	v	file:
g_thread_name	./util/threadnames.cpp	/^static thread_local std::string g_thread_name;$/;"	v	file:
g_txindex	./index/txindex.cpp	/^std::unique_ptr<TxIndex> g_txindex;$/;"	v
g_ui_signals	./ui_interface.cpp	/^} g_ui_signals;$/;"	v	typeref:struct:UISignals
g_unloading_wallet_set	./wallet/wallet.cpp	/^static std::set<CWallet*> g_unloading_wallet_set;$/;"	v	file:
g_upnp_interrupt	./net.cpp	/^static CThreadInterrupt g_upnp_interrupt;$/;"	v	file:
g_upnp_thread	./net.cpp	/^static std::thread g_upnp_thread;$/;"	v	file:
g_utxosetscan	./rpc/blockchain.cpp	/^static std::mutex g_utxosetscan;$/;"	v	file:
g_wallet_init_interface	./dummywallet.cpp	/^const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();$/;"	v
g_wallet_init_interface	./wallet/init.cpp	/^const WalletInitInterface& g_wallet_init_interface = WalletInit();$/;"	v
g_wallet_release_cv	./wallet/wallet.cpp	/^static std::condition_variable g_wallet_release_cv;$/;"	v	file:
g_wallet_release_mutex	./wallet/wallet.cpp	/^static Mutex g_wallet_release_mutex;$/;"	v	file:
g_zmq_notification_interface	./zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface* g_zmq_notification_interface = nullptr;$/;"	v
gbt_force	./versionbitsinfo.h	/^    bool gbt_force;$/;"	m	struct:VBDeploymentInfo
gbt_vb_name	./rpc/mining.cpp	/^static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {$/;"	f	file:
ge_equals_ge	./secp256k1/src/tests.c	/^void ge_equals_ge(const secp256k1_ge *a, const secp256k1_ge *b) {$/;"	f
ge_equals_ge	./secp256k1/src/tests_exhaustive.c	/^void ge_equals_ge(const secp256k1_ge *a, const secp256k1_ge *b) {$/;"	f
ge_equals_gej	./secp256k1/src/tests.c	/^void ge_equals_gej(const secp256k1_ge *a, const secp256k1_gej *b) {$/;"	f
ge_equals_gej	./secp256k1/src/tests_exhaustive.c	/^void ge_equals_gej(const secp256k1_ge *a, const secp256k1_gej *b) {$/;"	f
ge_x	./secp256k1/src/bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon109	file:
ge_y	./secp256k1/src/bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon109	file:
gej_x	./secp256k1/src/bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon109	file:
gej_xyz_equals_gej	./secp256k1/src/tests.c	/^int gej_xyz_equals_gej(const secp256k1_gej *a, const secp256k1_gej *b) {$/;"	f
gej_y	./secp256k1/src/bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon109	file:
gen	./leveldb/db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_context_BIN	./secp256k1/Makefile	/^gen_context_BIN = gen_context$(BUILD_EXEEXT)$/;"	m
gen_context_OBJECTS	./secp256k1/Makefile	/^gen_context_OBJECTS = gen_context.o$/;"	m
generateBlocks	./rpc/mining.cpp	/^static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)$/;"	f	file:
generatetoaddress	./rpc/mining.cpp	/^static UniValue generatetoaddress(const JSONRPCRequest& request)$/;"	f	file:
generatetoaddress	./test/util.cpp	/^CTxIn generatetoaddress(const std::string& address)$/;"	f
generation	./leveldb/db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
genesis	./chainparams.h	/^    CBlock genesis;$/;"	m	class:CChainParams
get	./txmempool.cpp	/^CTransactionRef CTxMemPool::get(const uint256& hash) const$/;"	f	class:CTxMemPool
get	./util/system.cpp	/^std::pair<int, char**> WinCmdLineArgs::get()$/;"	f	class:util::WinCmdLineArgs
getAddress	./qt/editaddressdialog.cpp	/^QString EditAddressDialog::getAddress() const$/;"	f	class:EditAddressDialog
getAddressData	./qt/addresstablemodel.cpp	/^bool AddressTableModel::getAddressData(const QString &address,$/;"	f	class:AddressTableModel
getAddressTableModel	./qt/walletmodel.cpp	/^AddressTableModel *WalletModel::getAddressTableModel()$/;"	f	class:WalletModel
getAddressTableModel	./qt/walletmodel.h	/^    AddressTableModel* getAddressTableModel() const { return addressTableModel; }$/;"	f	class:WalletModel
getAllNetMessageTypes	./protocol.cpp	/^const std::vector<std::string> &getAllNetMessageTypes()$/;"	f
getAmountColumnTitle	./qt/bitcoinunits.cpp	/^QString BitcoinUnits::getAmountColumnTitle(int unit)$/;"	f	class:BitcoinUnits
getAmountTitle	./qt/recentrequeststablemodel.cpp	/^QString RecentRequestsTableModel::getAmountTitle()$/;"	f	class:RecentRequestsTableModel
getAppIcon	./qt/networkstyle.h	/^    const QIcon &getAppIcon() const { return appIcon; }$/;"	f	class:NetworkStyle
getAppName	./qt/networkstyle.h	/^    const QString &getAppName() const { return appName; }$/;"	f	class:NetworkStyle
getAvailableWidthForColumn	./qt/guiutil.cpp	/^int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
getBanTableModel	./qt/clientmodel.cpp	/^BanTableModel *ClientModel::getBanTableModel()$/;"	f	class:ClientModel
getBlock13b8a	./test/setup_common.cpp	/^CBlock getBlock13b8a()$/;"	f
getBlockSource	./qt/clientmodel.cpp	/^enum BlockSource ClientModel::getBlockSource() const$/;"	f	class:ClientModel
getBool	./univalue/include/univalue.h	/^    bool getBool() const { return isTrue(); }$/;"	f	class:UniValue
getCertStore	./qt/paymentserver.cpp	/^X509_STORE* PaymentServer::getCertStore()$/;"	f	class:PaymentServer
getCoinControlFeatures	./qt/optionsmodel.h	/^    bool getCoinControlFeatures() const { return fCoinControlFeatures; }$/;"	f	class:OptionsModel
getColumnsWidth	./qt/guiutil.cpp	/^int TableViewLastColumnResizingFixer::getColumnsWidth()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
getConfTargetForIndex	./qt/sendcoinsdialog.cpp	/^int getConfTargetForIndex(int index) {$/;"	f
getContext	./secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  public static long getContext() {$/;"	m	class:Secp256k1Context
getDataDirectory	./qt/intro.cpp	/^QString Intro::getDataDirectory()$/;"	f	class:Intro
getDefaultDataDirectory	./qt/guiutil.cpp	/^QString getDefaultDataDirectory()$/;"	f	namespace:GUIUtil
getDetails	./qt/paymentrequestplus.h	/^    const payments::PaymentDetails& getDetails() const { return details; }$/;"	f	class:PaymentRequestPlus
getDisplayName	./qt/walletmodel.cpp	/^QString WalletModel::getDisplayName() const$/;"	f	class:WalletModel
getDisplayUnit	./qt/optionsmodel.h	/^    int getDisplayUnit() const { return nDisplayUnit; }$/;"	f	class:OptionsModel
getDuplicateAddressWarning	./qt/editaddressdialog.cpp	/^QString EditAddressDialog::getDuplicateAddressWarning() const$/;"	f	class:EditAddressDialog
getEditStatus	./qt/addresstablemodel.h	/^    EditStatus getEditStatus() const { return editStatus; }$/;"	f	class:AddressTableModel
getEncryptionStatus	./qt/walletmodel.cpp	/^WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const$/;"	f	class:WalletModel
getEntryData	./qt/guiutil.cpp	/^QList<QModelIndex> getEntryData(QAbstractItemView *view, int column)$/;"	f	namespace:GUIUtil
getGraphRangeMins	./qt/trafficgraphwidget.cpp	/^int TrafficGraphWidget::getGraphRangeMins() const$/;"	f	class:TrafficGraphWidget
getHeaderTipHeight	./qt/clientmodel.cpp	/^int ClientModel::getHeaderTipHeight() const$/;"	f	class:ClientModel
getHeaderTipTime	./qt/clientmodel.cpp	/^int64_t ClientModel::getHeaderTipTime() const$/;"	f	class:ClientModel
getHideTrayIcon	./qt/optionsmodel.h	/^    bool getHideTrayIcon() const { return fHideTrayIcon; }$/;"	f	class:OptionsModel
getImagesOnButtons	./qt/platformstyle.h	/^    bool getImagesOnButtons() const { return imagesOnButtons; }$/;"	f	class:PlatformStyle
getIndexForConfTarget	./qt/sendcoinsdialog.cpp	/^int getIndexForConfTarget(int target) {$/;"	f
getJsonToken	./univalue/lib/univalue_read.cpp	/^enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,$/;"	f
getKeys	./univalue/lib/univalue_get.cpp	/^const std::vector<std::string>& UniValue::getKeys() const$/;"	f	class:UniValue
getMainWinId	./qt/bitcoin.cpp	/^WId BitcoinApplication::getMainWinId() const$/;"	f	class:BitcoinApplication
getMerchant	./qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) const$/;"	f	class:PaymentRequestPlus
getMinimizeOnClose	./qt/optionsmodel.h	/^    bool getMinimizeOnClose() const { return fMinimizeOnClose; }$/;"	f	class:OptionsModel
getMinimizeToTray	./qt/optionsmodel.h	/^    bool getMinimizeToTray() const { return fMinimizeToTray; }$/;"	f	class:OptionsModel
getName	./qt/platformstyle.h	/^    const QString &getName() const { return name; }$/;"	f	class:PlatformStyle
getNodeStats	./qt/peertablemodel.cpp	/^const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)$/;"	f	class:PeerTableModel
getNumConnections	./qt/clientmodel.cpp	/^int ClientModel::getNumConnections(unsigned int flags) const$/;"	f	class:ClientModel
getObjMap	./univalue/lib/univalue.cpp	/^void UniValue::getObjMap(std::map<std::string,UniValue>& kv) const$/;"	f	class:UniValue
getOpenFileName	./qt/guiutil.cpp	/^QString getOpenFileName(QWidget *parent, const QString &caption, const QString &dir,$/;"	f	namespace:GUIUtil
getOptionsModel	./qt/clientmodel.cpp	/^OptionsModel *ClientModel::getOptionsModel()$/;"	f	class:ClientModel
getOptionsModel	./qt/walletmodel.cpp	/^OptionsModel *WalletModel::getOptionsModel()$/;"	f	class:WalletModel
getOrCreateWallet	./qt/walletcontroller.cpp	/^WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet)$/;"	f	class:WalletController
getOutputIndex	./qt/transactionrecord.cpp	/^int TransactionRecord::getOutputIndex() const$/;"	f	class:TransactionRecord
getOverriddenByCommandLine	./qt/optionsmodel.h	/^    const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }$/;"	f	class:OptionsModel
getPathToCheck	./qt/intro.cpp	/^QString Intro::getPathToCheck()$/;"	f	class:Intro
getPayTo	./qt/paymentrequestplus.cpp	/^QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const$/;"	f	class:PaymentRequestPlus
getPeerTableModel	./qt/clientmodel.cpp	/^PeerTableModel *ClientModel::getPeerTableModel()$/;"	f	class:ClientModel
getProxyInfo	./qt/clientmodel.cpp	/^bool ClientModel::getProxyInfo(std::string& ip_port) const$/;"	f	class:ClientModel
getProxySettings	./qt/optionsmodel.cpp	/^bool OptionsModel::getProxySettings(QNetworkProxy& proxy) const$/;"	f	class:OptionsModel
getQueueInfo	./scheduler.cpp	/^size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,$/;"	f	class:CScheduler
getRecentRequestsTableModel	./qt/walletmodel.cpp	/^RecentRequestsTableModel *WalletModel::getRecentRequestsTableModel()$/;"	f	class:WalletModel
getRecipient	./qt/test/paymentservertests.cpp	/^void RecipientCatcher::getRecipient(const SendCoinsRecipient& r)$/;"	f	class:RecipientCatcher
getRecipients	./qt/walletmodeltransaction.cpp	/^QList<SendCoinsRecipient> WalletModelTransaction::getRecipients() const$/;"	f	class:WalletModelTransaction
getReturnValue	./qt/addressbookpage.h	/^    const QString &getReturnValue() const { return returnValue; }$/;"	f	class:AddressBookPage
getReturnValue	./qt/bitcoin.h	/^    int getReturnValue() const { return returnValue; }$/;"	f	class:BitcoinApplication
getRowByNodeId	./qt/peertablemodel.cpp	/^int PeerTableModel::getRowByNodeId(NodeId nodeid)$/;"	f	class:PeerTableModel
getSaveFileName	./qt/guiutil.cpp	/^QString getSaveFileName(QWidget *parent, const QString &caption, const QString &dir,$/;"	f	namespace:GUIUtil
getStatusBarWarnings	./qt/clientmodel.cpp	/^QString ClientModel::getStatusBarWarnings() const$/;"	f	class:ClientModel
getThirdPartyTxUrls	./qt/optionsmodel.h	/^    QString getThirdPartyTxUrls() const { return strThirdPartyTxUrls; }$/;"	f	class:OptionsModel
getTitleAddText	./qt/networkstyle.h	/^    const QString &getTitleAddText() const { return titleAddText; }$/;"	f	class:NetworkStyle
getTotalTransactionAmount	./qt/walletmodeltransaction.cpp	/^CAmount WalletModelTransaction::getTotalTransactionAmount() const$/;"	f	class:WalletModelTransaction
getTransactionFee	./qt/walletmodeltransaction.cpp	/^CAmount WalletModelTransaction::getTransactionFee() const$/;"	f	class:WalletModelTransaction
getTransactionSize	./qt/walletmodeltransaction.cpp	/^unsigned int WalletModelTransaction::getTransactionSize()$/;"	f	class:WalletModelTransaction
getTransactionTableModel	./qt/walletmodel.cpp	/^TransactionTableModel *WalletModel::getTransactionTableModel()$/;"	f	class:WalletModel
getTrayAndWindowIcon	./qt/networkstyle.h	/^    const QIcon &getTrayAndWindowIcon() const { return trayAndWindowIcon; }$/;"	f	class:NetworkStyle
getTxHash	./qt/transactionrecord.cpp	/^QString TransactionRecord::getTxHash() const$/;"	f	class:TransactionRecord
getTxHex	./qt/transactiontablemodel.cpp	/^    QString getTxHex(interfaces::Wallet& wallet, TransactionRecord *rec)$/;"	f	class:TransactionTablePriv
getType	./univalue/include/univalue.h	/^    enum VType getType() const { return typ; }$/;"	f	class:UniValue
getURI	./qt/openuridialog.cpp	/^QString OpenURIDialog::getURI()$/;"	f	class:OpenURIDialog
getUseExtraSpacing	./qt/platformstyle.h	/^    bool getUseExtraSpacing() const { return useExtraSpacing; }$/;"	f	class:PlatformStyle
getValStr	./univalue/include/univalue.h	/^    const std::string& getValStr() const { return val; }$/;"	f	class:UniValue
getValue	./qt/sendcoinsentry.cpp	/^SendCoinsRecipient SendCoinsEntry::getValue()$/;"	f	class:SendCoinsEntry
getValues	./univalue/lib/univalue_get.cpp	/^const std::vector<UniValue>& UniValue::getValues() const$/;"	f	class:UniValue
getWalletModel	./qt/walletview.h	/^    WalletModel *getWalletModel() { return walletModel; }$/;"	f	class:WalletView
getWalletName	./qt/walletmodel.cpp	/^QString WalletModel::getWalletName() const$/;"	f	class:WalletModel
getWallets	./qt/walletcontroller.cpp	/^std::vector<WalletModel*> WalletController::getWallets() const$/;"	f	class:WalletController
getWalletsAvailableToOpen	./qt/walletcontroller.cpp	/^std::vector<std::string> WalletController::getWalletsAvailableToOpen() const$/;"	f	class:WalletController
getWtx	./qt/walletmodeltransaction.cpp	/^std::unique_ptr<interfaces::PendingWalletTx>& WalletModelTransaction::getWtx()$/;"	f	class:WalletModelTransaction
get_array	./univalue/lib/univalue_get.cpp	/^const UniValue& UniValue::get_array() const$/;"	f	class:UniValue
get_bool	./univalue/lib/univalue_get.cpp	/^bool UniValue::get_bool() const$/;"	f	class:UniValue
get_data	./wallet/db.cpp	/^const void* BerkeleyBatch::SafeDbt::get_data() const$/;"	f	class:BerkeleyBatch::SafeDbt
get_filesystem_error_message	./fs.cpp	/^std::string get_filesystem_error_message(const fs::filesystem_error& e)$/;"	f	namespace:fsbridge
get_int	./univalue/lib/univalue_get.cpp	/^int UniValue::get_int() const$/;"	f	class:UniValue
get_int64	./univalue/lib/univalue_get.cpp	/^int64_t UniValue::get_int64() const$/;"	f	class:UniValue
get_obj	./univalue/lib/univalue_get.cpp	/^const UniValue& UniValue::get_obj() const$/;"	f	class:UniValue
get_openssl_key	./secp256k1/src/tests.c	/^EC_KEY *get_openssl_key(const unsigned char *key32) {$/;"	f
get_real	./univalue/lib/univalue_get.cpp	/^double UniValue::get_real() const$/;"	f	class:UniValue
get_size	./wallet/db.cpp	/^u_int32_t BerkeleyBatch::SafeDbt::get_size() const$/;"	f	class:BerkeleyBatch::SafeDbt
get_str	./univalue/lib/univalue_get.cpp	/^const std::string& UniValue::get_str() const$/;"	f	class:UniValue
getaddednodeinfo	./rpc/net.cpp	/^static UniValue getaddednodeinfo(const JSONRPCRequest& request)$/;"	f	file:
getaddressesbylabel	./wallet/rpcwallet.cpp	/^static UniValue getaddressesbylabel(const JSONRPCRequest& request)$/;"	f	file:
getaddressinfo	./wallet/rpcwallet.cpp	/^UniValue getaddressinfo(const JSONRPCRequest& request)$/;"	f
getbalance	./wallet/rpcwallet.cpp	/^static UniValue getbalance(const JSONRPCRequest& request)$/;"	f	file:
getbalances	./wallet/rpcwallet.cpp	/^static UniValue getbalances(const JSONRPCRequest& request)$/;"	f	file:
getbestblockhash	./rpc/blockchain.cpp	/^static UniValue getbestblockhash(const JSONRPCRequest& request)$/;"	f	file:
getblock	./rpc/blockchain.cpp	/^static UniValue getblock(const JSONRPCRequest& request)$/;"	f	file:
getblockchaininfo	./rpc/blockchain.cpp	/^UniValue getblockchaininfo(const JSONRPCRequest& request)$/;"	f
getblockcount	./rpc/blockchain.cpp	/^static UniValue getblockcount(const JSONRPCRequest& request)$/;"	f	file:
getblockfilter	./rpc/blockchain.cpp	/^static UniValue getblockfilter(const JSONRPCRequest& request)$/;"	f	file:
getblockhash	./rpc/blockchain.cpp	/^static UniValue getblockhash(const JSONRPCRequest& request)$/;"	f	file:
getblockheader	./rpc/blockchain.cpp	/^static UniValue getblockheader(const JSONRPCRequest& request)$/;"	f	file:
getblockstats	./rpc/blockchain.cpp	/^static UniValue getblockstats(const JSONRPCRequest& request)$/;"	f	file:
getblocktemplate	./rpc/mining.cpp	/^static UniValue getblocktemplate(const JSONRPCRequest& request)$/;"	f	file:
getchaintips	./rpc/blockchain.cpp	/^static UniValue getchaintips(const JSONRPCRequest& request)$/;"	f	file:
getchaintxstats	./rpc/blockchain.cpp	/^static UniValue getchaintxstats(const JSONRPCRequest& request)$/;"	f	file:
getconnectioncount	./rpc/net.cpp	/^static UniValue getconnectioncount(const JSONRPCRequest& request)$/;"	f	file:
getdescriptorinfo	./rpc/misc.cpp	/^UniValue getdescriptorinfo(const JSONRPCRequest& request)$/;"	f
getdifficulty	./rpc/blockchain.cpp	/^static UniValue getdifficulty(const JSONRPCRequest& request)$/;"	f	file:
getdouble	./arith_uint256.cpp	/^double base_uint<BITS>::getdouble() const$/;"	f	class:base_uint
getint	./script/script.h	/^    int getint() const$/;"	f	class:CScriptNum
getint	./test/scriptnum10.h	/^    int getint() const$/;"	f	class:CScriptNum10
getmemoryinfo	./rpc/misc.cpp	/^static UniValue getmemoryinfo(const JSONRPCRequest& request)$/;"	f	file:
getmempoolancestors	./rpc/blockchain.cpp	/^static UniValue getmempoolancestors(const JSONRPCRequest& request)$/;"	f	file:
getmempooldescendants	./rpc/blockchain.cpp	/^static UniValue getmempooldescendants(const JSONRPCRequest& request)$/;"	f	file:
getmempoolentry	./rpc/blockchain.cpp	/^static UniValue getmempoolentry(const JSONRPCRequest& request)$/;"	f	file:
getmempoolinfo	./rpc/blockchain.cpp	/^static UniValue getmempoolinfo(const JSONRPCRequest& request)$/;"	f	file:
getmininginfo	./rpc/mining.cpp	/^static UniValue getmininginfo(const JSONRPCRequest& request)$/;"	f	file:
getnettotals	./rpc/net.cpp	/^static UniValue getnettotals(const JSONRPCRequest& request)$/;"	f	file:
getnetworkhashps	./rpc/mining.cpp	/^static UniValue getnetworkhashps(const JSONRPCRequest& request)$/;"	f	file:
getnetworkinfo	./rpc/net.cpp	/^static UniValue getnetworkinfo(const JSONRPCRequest& request)$/;"	f	file:
getnewaddress	./test/util.cpp	/^std::string getnewaddress(CWallet& w)$/;"	f
getnewaddress	./wallet/rpcwallet.cpp	/^static UniValue getnewaddress(const JSONRPCRequest& request)$/;"	f	file:
getnodeaddresses	./rpc/net.cpp	/^static UniValue getnodeaddresses(const JSONRPCRequest& request)$/;"	f	file:
getpeerinfo	./rpc/net.cpp	/^static UniValue getpeerinfo(const JSONRPCRequest& request)$/;"	f	file:
getrawchangeaddress	./wallet/rpcwallet.cpp	/^static UniValue getrawchangeaddress(const JSONRPCRequest& request)$/;"	f	file:
getrawmempool	./rpc/blockchain.cpp	/^static UniValue getrawmempool(const JSONRPCRequest& request)$/;"	f	file:
getrawtransaction	./rpc/rawtransaction.cpp	/^static UniValue getrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
getreceivedbyaddress	./wallet/rpcwallet.cpp	/^static UniValue getreceivedbyaddress(const JSONRPCRequest& request)$/;"	f	file:
getreceivedbylabel	./wallet/rpcwallet.cpp	/^static UniValue getreceivedbylabel(const JSONRPCRequest& request)$/;"	f	file:
getrpcinfo	./rpc/server.cpp	/^static UniValue getrpcinfo(const JSONRPCRequest& request)$/;"	f	file:
gettid	./leveldb/util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon8::PosixEnv
gettid_	./leveldb/util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
gettimedouble	./crypto/ctaes/bench.c	/^static double gettimedouble(void) {$/;"	f	file:
gettimedouble	./secp256k1/src/bench.h	/^static double gettimedouble(void) {$/;"	f
gettransaction	./wallet/rpcwallet.cpp	/^static UniValue gettransaction(const JSONRPCRequest& request)$/;"	f	file:
gettxout	./rpc/blockchain.cpp	/^UniValue gettxout(const JSONRPCRequest& request)$/;"	f
gettxoutproof	./rpc/rawtransaction.cpp	/^static UniValue gettxoutproof(const JSONRPCRequest& request)$/;"	f	file:
gettxoutsetinfo	./rpc/blockchain.cpp	/^static UniValue gettxoutsetinfo(const JSONRPCRequest& request)$/;"	f	file:
getunconfirmedbalance	./wallet/rpcwallet.cpp	/^static UniValue getunconfirmedbalance(const JSONRPCRequest &request)$/;"	f	file:
getvch	./script/script.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum
getvch	./test/scriptnum10.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum10
getwalletinfo	./wallet/rpcwallet.cpp	/^static UniValue getwalletinfo(const JSONRPCRequest& request)$/;"	f	file:
getzmqnotifications	./zmq/zmqrpc.cpp	/^UniValue getzmqnotifications(const JSONRPCRequest& request)$/;"	f	namespace:__anon127
give_advice	./secp256k1/build-aux/missing	/^give_advice ()$/;"	f
give_advice	./univalue/build-aux/missing	/^give_advice ()$/;"	f
glibc_sanity_test	./compat/glibc_sanity.cpp	/^bool glibc_sanity_test()$/;"	f
glibcxx_sanity_test	./compat/glibcxx_sanity.cpp	/^bool glibcxx_sanity_test()$/;"	f
globalChainBaseParams	./chainparamsbase.cpp	/^static std::unique_ptr<CBaseChainParams> globalChainBaseParams;$/;"	v	file:
globalChainParams	./chainparams.cpp	/^static std::unique_ptr<const CChainParams> globalChainParams;$/;"	v	file:
globalVerifyHandle	./bitcoin-tx.cpp	/^    ECCVerifyHandle globalVerifyHandle;$/;"	m	class:Secp256k1Init	file:
globalVerifyHandle	./init.cpp	/^static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;$/;"	v	file:
globalVerifyHandle	./test/setup_common.h	/^    ECCVerifyHandle globalVerifyHandle;$/;"	m	struct:BasicTestingSetup
gotoHistoryPage	./qt/bitcoingui.cpp	/^void BitcoinGUI::gotoHistoryPage()$/;"	f	class:BitcoinGUI
gotoHistoryPage	./qt/walletframe.cpp	/^void WalletFrame::gotoHistoryPage()$/;"	f	class:WalletFrame
gotoHistoryPage	./qt/walletview.cpp	/^void WalletView::gotoHistoryPage()$/;"	f	class:WalletView
gotoOverviewPage	./qt/bitcoingui.cpp	/^void BitcoinGUI::gotoOverviewPage()$/;"	f	class:BitcoinGUI
gotoOverviewPage	./qt/walletframe.cpp	/^void WalletFrame::gotoOverviewPage()$/;"	f	class:WalletFrame
gotoOverviewPage	./qt/walletview.cpp	/^void WalletView::gotoOverviewPage()$/;"	f	class:WalletView
gotoReceiveCoinsPage	./qt/bitcoingui.cpp	/^void BitcoinGUI::gotoReceiveCoinsPage()$/;"	f	class:BitcoinGUI
gotoReceiveCoinsPage	./qt/walletframe.cpp	/^void WalletFrame::gotoReceiveCoinsPage()$/;"	f	class:WalletFrame
gotoReceiveCoinsPage	./qt/walletview.cpp	/^void WalletView::gotoReceiveCoinsPage()$/;"	f	class:WalletView
gotoSendCoinsPage	./qt/bitcoingui.cpp	/^void BitcoinGUI::gotoSendCoinsPage(QString addr)$/;"	f	class:BitcoinGUI
gotoSendCoinsPage	./qt/walletframe.cpp	/^void WalletFrame::gotoSendCoinsPage(QString addr)$/;"	f	class:WalletFrame
gotoSendCoinsPage	./qt/walletview.cpp	/^void WalletView::gotoSendCoinsPage(QString addr)$/;"	f	class:WalletView
gotoSignMessageTab	./qt/bitcoingui.cpp	/^void BitcoinGUI::gotoSignMessageTab(QString addr)$/;"	f	class:BitcoinGUI
gotoSignMessageTab	./qt/walletframe.cpp	/^void WalletFrame::gotoSignMessageTab(QString addr)$/;"	f	class:WalletFrame
gotoSignMessageTab	./qt/walletview.cpp	/^void WalletView::gotoSignMessageTab(QString addr)$/;"	f	class:WalletView
gotoVerifyMessageTab	./qt/bitcoingui.cpp	/^void BitcoinGUI::gotoVerifyMessageTab(QString addr)$/;"	f	class:BitcoinGUI
gotoVerifyMessageTab	./qt/walletframe.cpp	/^void WalletFrame::gotoVerifyMessageTab(QString addr)$/;"	f	class:WalletFrame
gotoVerifyMessageTab	./qt/walletview.cpp	/^void WalletView::gotoVerifyMessageTab(QString addr)$/;"	f	class:WalletView
grandparent_index_	./leveldb/db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	./leveldb/db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
grantOutbound	./net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
gui	./qt/walletframe.h	/^    BitcoinGUI *gui;$/;"	m	class:WalletFrame
guiTests	./qt/test/apptests.cpp	/^void AppTests::guiTests(BitcoinGUI* window)$/;"	f	class:AppTests
hFile	./fs.h	/^        void* hFile = (void*)-1; \/\/ INVALID_HANDLE_VALUE$/;"	m	class:fsbridge::FileLock
handle	./script/bitcoinconsensus.cpp	/^    ECCVerifyHandle handle;$/;"	m	struct:__anon81::ECCryptoClosure	file:
handleNotifications	./wallet/wallet.cpp	/^void CWallet::handleNotifications()$/;"	f	class:CWallet
handleOutOfSyncWarningClicks	./qt/overviewpage.cpp	/^void OverviewPage::handleOutOfSyncWarningClicks()$/;"	f	class:OverviewPage
handlePaymentACK	./qt/paymentserver.cpp	/^void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)$/;"	f	class:PaymentServer
handlePaymentRequest	./qt/bitcoingui.cpp	/^bool BitcoinGUI::handlePaymentRequest(const SendCoinsRecipient& recipient)$/;"	f	class:BitcoinGUI
handlePaymentRequest	./qt/sendcoinsdialog.cpp	/^bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)$/;"	f	class:SendCoinsDialog
handlePaymentRequest	./qt/walletframe.cpp	/^bool WalletFrame::handlePaymentRequest(const SendCoinsRecipient &recipient)$/;"	f	class:WalletFrame
handlePaymentRequest	./qt/walletview.cpp	/^bool WalletView::handlePaymentRequest(const SendCoinsRecipient& recipient)$/;"	f	class:WalletView
handleRequest	./qt/test/paymentservertests.cpp	/^static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsigned char>& data)$/;"	f	file:
handleRunawayException	./qt/bitcoin.cpp	/^void BitcoinApplication::handleRunawayException(const QString &message)$/;"	f	class:BitcoinApplication
handleRunawayException	./qt/bitcoin.cpp	/^void BitcoinCore::handleRunawayException(const std::exception *e)$/;"	f	class:BitcoinCore
handleSelectionChanged	./qt/qvaluecombobox.cpp	/^void QValueComboBox::handleSelectionChanged(int idx)$/;"	f	class:QValueComboBox
handleTransactionClicked	./qt/overviewpage.cpp	/^void OverviewPage::handleTransactionClicked(const QModelIndex &index)$/;"	f	class:OverviewPage
handleURIConnection	./qt/paymentserver.cpp	/^void PaymentServer::handleURIConnection()$/;"	f	class:PaymentServer
handleURIOrFile	./qt/paymentserver.cpp	/^void PaymentServer::handleURIOrFile(const QString& s)$/;"	f	class:PaymentServer
handler	./httpserver.cpp	/^    HTTPRequestHandler handler;$/;"	m	struct:HTTPPathHandler	file:
handler	./httpserver.h	/^    std::function<void()> handler;$/;"	m	class:HTTPEvent
handler	./rest.cpp	/^    bool (*handler)(HTTPRequest* req, const std::string& strReq);$/;"	m	struct:__anon2	file:
hasAlpha	./qt/notificator.cpp	/^    bool hasAlpha;$/;"	m	class:FreedesktopImage	file:
hasTrayIcon	./qt/bitcoingui.h	/^    bool hasTrayIcon() const { return trayIcon; }$/;"	f	class:BitcoinGUI
has_comparator_	./leveldb/db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	./leveldb/db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_key_origin	./wallet/walletdb.h	/^    bool has_key_origin = false; \/\/< Whether the key_origin is useful$/;"	m	class:CKeyMetadata
has_last_sequence_	./leveldb/db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	./leveldb/db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	./leveldb/db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	./leveldb/db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
has_utxo	./node/psbt.h	/^    bool has_utxo; \/\/!< Whether we have UTXO information for this input$/;"	m	struct:PSBTInputAnalysis
hash	./index/blockfilterindex.cpp	/^    uint256 hash;$/;"	m	struct:__anon120::DBHashKey	file:
hash	./index/blockfilterindex.cpp	/^    uint256 hash;$/;"	m	struct:__anon120::DBVal	file:
hash	./leveldb/db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
hash	./leveldb/util/cache.cc	/^  uint32_t hash;      \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
hash	./net_processing.cpp	/^        uint256 hash;$/;"	m	struct:__anon88::QueuedBlock	file:
hash	./primitives/transaction.h	/^    const uint256 hash;$/;"	m	class:CTransaction
hash	./primitives/transaction.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	./protocol.h	/^    uint256 hash;$/;"	m	class:CInv
hash	./qt/transactionrecord.h	/^    uint256 hash;$/;"	m	class:TransactionRecord
hash	./qt/transactiontablemodel.cpp	/^    uint256 hash;$/;"	m	struct:TransactionNotification	file:
hash	./rpc/blockchain.cpp	/^    uint256 hash;$/;"	m	struct:CUpdatedBlock	file:
hash	./rpc/mining.cpp	/^    uint256 hash;$/;"	m	class:submitblock_StateCatcher	file:
hashAssumeValid	./validation.cpp	/^uint256 hashAssumeValid;$/;"	v
hashBestBlock_	./test/coins_tests.cpp	/^    uint256 hashBestBlock_;$/;"	m	class:__anon60::CCoinsViewTest	file:
hashBlock	./coins.h	/^    mutable uint256 hashBlock;$/;"	m	class:CCoinsViewCache
hashBlock	./coins.h	/^    uint256 hashBlock;$/;"	m	class:CCoinsViewCursor
hashBlock	./net_processing.cpp	/^    uint256 hashBlock;$/;"	m	struct:__anon89::CBlockReject	file:
hashBlock	./rpc/blockchain.cpp	/^    uint256 hashBlock;$/;"	m	struct:CCoinsStats	file:
hashBlock	./wallet/wallet.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	./net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashGenesisBlock	./consensus/params.h	/^    uint256 hashGenesisBlock;$/;"	m	struct:Consensus::Params
hashLastUnknownBlock	./net_processing.cpp	/^    uint256 hashLastUnknownBlock;$/;"	m	struct:__anon89::CNodeState	file:
hashMerkleRoot	./chain.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashMerkleRoot	./primitives/block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockHeader
hashOutputs	./script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashPrev	./chain.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	./primitives/block.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlockHeader
hashPrevouts	./script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashSequence	./script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashSerialized	./rpc/blockchain.cpp	/^    uint256 hashSerialized;$/;"	m	struct:CCoinsStats	file:
hashUnset	./wallet/wallet.h	/^    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }$/;"	f	class:CMerkleTx
hash_function	./cuckoocache.h	/^    const Hash hash_function;$/;"	m	class:CuckooCache::cache
hasher	./net.h	/^    mutable CHash256 hasher;$/;"	m	class:CNetMessage
hatoui	./univalue/lib/univalue_read.cpp	/^static const char *hatoui(const char *first, const char *last,$/;"	f	file:
havePush	./test/script_tests.cpp	/^    bool havePush;$/;"	m	class:__anon58::TestBuilder	file:
have_flag	./secp256k1/src/bench_internal.c	/^int have_flag(int argc, char** argv, char *flag) {$/;"	f
have_watch_only	./interfaces/wallet.h	/^    bool have_watch_only = false;$/;"	m	struct:interfaces::WalletBalances
hdChain	./wallet/wallet.h	/^    CHDChain hdChain;$/;"	m	class:final
hdKeypath	./wallet/walletdb.h	/^    std::string hdKeypath; \/\/optional HD\/bip32 keypath. Still used to determine whether a key is a seed. Also kept for backwards compatibility$/;"	m	class:CKeyMetadata
hd_keypaths	./psbt.h	/^    std::map<CPubKey, KeyOriginInfo> hd_keypaths;$/;"	m	struct:PSBTInput
hd_keypaths	./psbt.h	/^    std::map<CPubKey, KeyOriginInfo> hd_keypaths;$/;"	m	struct:PSBTOutput
hd_seed_id	./wallet/walletdb.h	/^    CKeyID hd_seed_id; \/\/id of the HD seed used to derive this key$/;"	m	class:CKeyMetadata
hdr	./net.h	/^    CMessageHeader hdr;             \/\/ complete header$/;"	m	class:CNetMessage
hdrbuf	./net.h	/^    CDataStream hdrbuf;             \/\/ partially received header$/;"	m	class:CNetMessage
head_	./leveldb/db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
header	./bench/bench.cpp	/^void benchmark::ConsolePrinter::header()$/;"	f	class:benchmark::ConsolePrinter
header	./bench/bench.cpp	/^void benchmark::PlotlyPrinter::header()$/;"	f	class:benchmark::PlotlyPrinter
header	./blockencodings.h	/^    CBlockHeader header;$/;"	m	class:CBlockHeaderAndShortTxIDs
header	./blockencodings.h	/^    CBlockHeader header;$/;"	m	class:PartiallyDownloadedBlock
header	./index/blockfilterindex.cpp	/^    uint256 header;$/;"	m	struct:__anon120::DBVal	file:
header	./merkleblock.h	/^    CBlockHeader header;$/;"	m	class:CMerkleBlock
header	./test/blockencodings_tests.cpp	/^    CBlockHeader header;$/;"	m	class:TestHeaderAndShortIDs	file:
headerData	./qt/addresstablemodel.cpp	/^QVariant AddressTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:AddressTableModel
headerData	./qt/bantablemodel.cpp	/^QVariant BanTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:BanTableModel
headerData	./qt/peertablemodel.cpp	/^QVariant PeerTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:PeerTableModel
headerData	./qt/recentrequeststablemodel.cpp	/^QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:RecentRequestsTableModel
headerData	./qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:TransactionTableModel
headerSectionClicked	./qt/coincontroldialog.cpp	/^void CoinControlDialog::headerSectionClicked(int logicalIndex)$/;"	f	class:CoinControlDialog
heap_allocated	./leveldb/table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	./leveldb/db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
height	./index/blockfilterindex.cpp	/^    int height;$/;"	m	struct:__anon120::DBHeightKey	file:
height	./qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
height	./rpc/blockchain.cpp	/^    int height;$/;"	m	struct:CUpdatedBlock	file:
height	./txmempool.h	/^    int height;$/;"	m	struct:LockPoints
help	./rpc/server.cpp	/^UniValue help(const JSONRPCRequest& jsonRequest)$/;"	f
help	./rpc/server.cpp	/^std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const$/;"	f	class:CRPCTable
helpMessageDialog	./qt/bitcoingui.h	/^    HelpMessageDialog* helpMessageDialog = nullptr;$/;"	m	class:BitcoinGUI
hideEvent	./qt/rpcconsole.cpp	/^void RPCConsole::hideEvent(QHideEvent *event)$/;"	f	class:RPCConsole
hist_	./leveldb/db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon19::Stats	file:
hist_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hist_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
history	./qt/rpcconsole.h	/^    QStringList history;$/;"	m	class:RPCConsole
historyAction	./qt/bitcoingui.h	/^    QAction* historyAction = nullptr;$/;"	m	class:BitcoinGUI
historyFilter	./qt/rpcconsole.cpp	/^const QStringList historyFilter = QStringList()$/;"	m	namespace:__anon69	file:
historyPtr	./qt/rpcconsole.h	/^    int historyPtr = 0;$/;"	m	class:RPCConsole
host	./Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host	./secp256k1/Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host	./univalue/Makefile	/^host = x86_64-apple-darwin17.7.0$/;"	m
host_alias	./Makefile	/^host_alias = $/;"	m
host_alias	./secp256k1/Makefile	/^host_alias = $/;"	m
host_alias	./univalue/Makefile	/^host_alias = $/;"	m
host_cpu	./Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	./secp256k1/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	./univalue/Makefile	/^host_cpu = x86_64$/;"	m
host_os	./Makefile	/^host_os = darwin17.7.0$/;"	m
host_os	./secp256k1/Makefile	/^host_os = darwin17.7.0$/;"	m
host_os	./univalue/Makefile	/^host_os = darwin17.7.0$/;"	m
host_triplet	./Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_triplet	./secp256k1/Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_triplet	./univalue/Makefile	/^host_triplet = x86_64-apple-darwin17.7.0$/;"	m
host_vendor	./Makefile	/^host_vendor = apple$/;"	m
host_vendor	./secp256k1/Makefile	/^host_vendor = apple$/;"	m
host_vendor	./univalue/Makefile	/^host_vendor = apple$/;"	m
htmldir	./Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	./secp256k1/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	./univalue/Makefile	/^htmldir = ${docdir}$/;"	m
htobe16	./compat/endian.h	/^inline uint16_t htobe16(uint16_t host_16bits)$/;"	f
htobe32	./compat/endian.h	/^inline uint32_t htobe32(uint32_t host_32bits)$/;"	f
htobe64	./compat/endian.h	/^inline uint64_t htobe64(uint64_t host_64bits)$/;"	f
htole16	./compat/endian.h	/^inline uint16_t htole16(uint16_t host_16bits)$/;"	f
htole32	./compat/endian.h	/^inline uint32_t htole32(uint32_t host_32bits)$/;"	f
htole64	./compat/endian.h	/^inline uint64_t htole64(uint64_t host_64bits)$/;"	f
httpRPCTimerInterface	./httprpc.cpp	/^static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;$/;"	v	file:
http_error_cb	./bitcoin-cli.cpp	/^static void http_error_cb(enum evhttp_request_error err, void *ctx)$/;"	f	file:
http_errorstring	./bitcoin-cli.cpp	/^static const char *http_errorstring(int code)$/;"	f	file:
http_reject_request_cb	./httpserver.cpp	/^static void http_reject_request_cb(struct evhttp_request* req, void*)$/;"	f	file:
http_request_cb	./httpserver.cpp	/^static void http_request_cb(struct evhttp_request* req, void* arg)$/;"	f	file:
http_request_done	./bitcoin-cli.cpp	/^static void http_request_done(struct evhttp_request *req, void *ctx)$/;"	f	file:
httpevent_callback_fn	./httpserver.cpp	/^static void httpevent_callback_fn(evutil_socket_t, short, void* data)$/;"	f	file:
i	./wallet/wallet.h	/^    int i;$/;"	m	class:COutput
i64tostr	./util/strencodings.cpp	/^std::string i64tostr(int64_t n)$/;"	f
icmp_	./leveldb/db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon30::Repairer	file:
icmp_	./leveldb/db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	./leveldb/db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
iconColorHueShift	./qt/networkstyle.cpp	/^    const int iconColorHueShift;$/;"	m	struct:__anon65	file:
iconColorSaturationReduction	./qt/networkstyle.cpp	/^    const int iconColorSaturationReduction;$/;"	m	struct:__anon65	file:
id	./leveldb/db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon24::MTThread	file:
id	./net.cpp	/^    NodeId id;$/;"	m	struct:NodeEvictionCandidate	file:
id	./net.h	/^    const NodeId id;$/;"	m	class:CNode
id	./qt/recentrequeststablemodel.h	/^    int64_t id;$/;"	m	class:RecentRequestEntry
id	./rpc/server.h	/^    UniValue id;$/;"	m	class:JSONRPCRequest
id	./test/denialofservice_tests.cpp	/^static NodeId id = 0;$/;"	v	file:
id	./versionbits.cpp	/^    const Consensus::DeploymentPos id;$/;"	m	class:__anon126::VersionBitsConditionChecker	file:
id_mutex_	./leveldb/util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon4::ShardedLRUCache	file:
idx	./qt/transactionrecord.h	/^    int idx;$/;"	m	class:TransactionRecord
ifstream	./fs.h	/^        explicit ifstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in) { open(p, mode); }$/;"	f	class:fsbridge::ifstream
ifstream	./fs.h	/^    class ifstream : public std::istream$/;"	c	namespace:fsbridge
ifstream	./fs.h	/^    typedef fs::ifstream ifstream;$/;"	t	namespace:fsbridge
ignore	./hash.h	/^    void ignore(size_t nSize)$/;"	f	class:CHashVerifier
ignore	./streams.h	/^    void ignore(int nSize)$/;"	f	class:CDataStream
ignore	./streams.h	/^    void ignore(size_t nSize)$/;"	f	class:CAutoFile
illegal_callback	./secp256k1/src/secp256k1.c	/^    secp256k1_callback illegal_callback;$/;"	m	struct:secp256k1_context_struct	file:
image	./qt/notificator.cpp	/^    QByteArray image;$/;"	m	class:FreedesktopImage	file:
imagesOnButtons	./qt/platformstyle.cpp	/^    const bool imagesOnButtons;$/;"	m	struct:__anon66	file:
imagesOnButtons	./qt/platformstyle.h	/^    bool imagesOnButtons;$/;"	m	class:PlatformStyle
imm	./leveldb/db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon18::IterState	file:
imm_	./leveldb/db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
immature_balance	./interfaces/wallet.h	/^    CAmount immature_balance = 0;$/;"	m	struct:interfaces::WalletBalances
immature_watch_only_balance	./interfaces/wallet.h	/^    CAmount immature_watch_only_balance = 0;$/;"	m	struct:interfaces::WalletBalances
impl	./qt/macos_appnap.h	/^    std::unique_ptr<CAppNapImpl> impl;$/;"	m	class:final
import_scripts	./wallet/rpcdump.cpp	/^    std::set<CScript> import_scripts;$/;"	m	struct:ImportData	file:
importaddress	./test/util.cpp	/^void importaddress(CWallet& wallet, const std::string& address)$/;"	f
importaddress	./wallet/rpcdump.cpp	/^UniValue importaddress(const JSONRPCRequest& request)$/;"	f
importmulti	./wallet/rpcdump.cpp	/^UniValue importmulti(const JSONRPCRequest& mainRequest)$/;"	f
importprivkey	./wallet/rpcdump.cpp	/^UniValue importprivkey(const JSONRPCRequest& request)$/;"	f
importprunedfunds	./wallet/rpcdump.cpp	/^UniValue importprunedfunds(const JSONRPCRequest& request)$/;"	f
importpubkey	./wallet/rpcdump.cpp	/^UniValue importpubkey(const JSONRPCRequest& request)$/;"	f
importwallet	./wallet/rpcdump.cpp	/^UniValue importwallet(const JSONRPCRequest& request)$/;"	f
inBlock	./miner.h	/^    CTxMemPool::setEntries inBlock;$/;"	m	class:BlockAssembler
inMempool	./policy/fees.h	/^    double inMempool = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
in_avail	./streams.h	/^    int in_avail() const         { return size(); }$/;"	f	class:CDataStream
in_cache	./leveldb/util/cache.cc	/^  bool in_cache;      \/\/ Whether entry is in the cache.$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
in_data	./net.h	/^    bool in_data;                   \/\/ parsing header (false) or data (true)$/;"	m	class:CNetMessage
in_use_	./leveldb/util/cache.cc	/^  LRUHandle in_use_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
include_HEADERS	./Makefile	/^include_HEADERS = script\/bitcoinconsensus.h$/;"	m
include_HEADERS	./secp256k1/Makefile	/^include_HEADERS = include\/secp256k1.h $(am__append_10) \\$/;"	m
include_HEADERS	./univalue/Makefile	/^include_HEADERS = include\/univalue.h$/;"	m
includedir	./Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	./secp256k1/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	./univalue/Makefile	/^includedir = ${prefix}\/include$/;"	m
incomingTransaction	./qt/bitcoingui.cpp	/^void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName)$/;"	f	class:BitcoinGUI
incrementalRelayFee	./policy/settings.cpp	/^CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);$/;"	v
indentStr	./univalue/lib/univalue_write.cpp	/^static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, std::string& s)$/;"	f	file:
index	./blockencodings.h	/^    uint16_t index;$/;"	m	struct:PrefilledTransaction
index	./qt/addresstablemodel.cpp	/^    AddressTableEntry *index(int idx)$/;"	f	class:AddressTablePriv
index	./qt/addresstablemodel.cpp	/^QModelIndex AddressTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:AddressTableModel
index	./qt/bantablemodel.cpp	/^    CCombinedBan *index(int idx)$/;"	f	class:BanTablePriv
index	./qt/bantablemodel.cpp	/^QModelIndex BanTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:BanTableModel
index	./qt/peertablemodel.cpp	/^    CNodeCombinedStats *index(int idx)$/;"	f	class:PeerTablePriv
index	./qt/peertablemodel.cpp	/^QModelIndex PeerTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:PeerTableModel
index	./qt/recentrequeststablemodel.cpp	/^QModelIndex RecentRequestsTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
index	./qt/transactiontablemodel.cpp	/^    TransactionRecord *index(interfaces::Wallet& wallet, int idx)$/;"	f	class:TransactionTablePriv
index	./qt/transactiontablemodel.cpp	/^QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
index_	./leveldb/db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	./leveldb/table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	./leveldb/table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	./leveldb/table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	./leveldb/table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	./leveldb/table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	./leveldb/table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
indexed_disconnected_transactions	./txmempool.h	/^    > indexed_disconnected_transactions;$/;"	t	struct:DisconnectedBlockTransactions
indexed_modified_transaction_set	./miner.h	/^> indexed_modified_transaction_set;$/;"	t
indexed_transaction_set	./txmempool.h	/^    > indexed_transaction_set;$/;"	t	class:CTxMemPool
indexes	./blockencodings.h	/^    std::vector<uint16_t> indexes;$/;"	m	class:BlockTransactionsRequest
indirect	./prevector.h	/^            char* indirect;$/;"	m	struct:prevector::direct_or_indirect::__anon73
indirect_ptr	./prevector.h	/^    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirect_ptr	./prevector.h	/^    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirectmap	./indirectmap.h	/^class indirectmap {$/;"	c
infinity	./secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon103
infinity	./secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon104
info	./qt/receiverequestdialog.h	/^    SendCoinsRecipient info;$/;"	m	class:ReceiveRequestDialog
info	./txmempool.cpp	/^TxMempoolInfo CTxMemPool::info(const uint256& hash) const$/;"	f	class:CTxMemPool
infoAll	./txmempool.cpp	/^std::vector<TxMempoolInfo> CTxMemPool::infoAll() const$/;"	f	class:CTxMemPool
info_log	./leveldb/include/leveldb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
infodir	./Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	./secp256k1/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	./univalue/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
initEscapes	./univalue/gen/gen.cpp	/^static bool initEscapes;$/;"	v	file:
initJsonEscape	./univalue/gen/gen.cpp	/^static void initJsonEscape()$/;"	f	file:
initNetManager	./qt/paymentserver.cpp	/^void PaymentServer::initNetManager()$/;"	f	class:PaymentServer
initTranslations	./qt/bitcoin.cpp	/^static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)$/;"	f	file:
init_	./leveldb/port/port_win.h	/^    bool init_;$/;"	m	class:leveldb::port::OnceType
init_flag	./support/lockedpool.cpp	/^std::once_flag LockedPoolManager::init_flag;$/;"	m	class:LockedPoolManager	file:
init_flag	./support/lockedpool.h	/^    static std::once_flag init_flag;$/;"	m	class:LockedPoolManager
initial	./secp256k1/src/ecmult_gen.h	/^    secp256k1_gej initial;$/;"	m	struct:__anon100
initial_offset_	./leveldb/db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	./leveldb/db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_last_record_offsets_	./leveldb/db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] =$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	./leveldb/db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	./leveldb/db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] =$/;"	m	class:leveldb::log::LogTest	file:
initialize	./qt/bitcoin.cpp	/^void BitcoinCore::initialize()$/;"	f	class:BitcoinCore
initialize	./test/fuzz/fuzz.cpp	/^static void initialize()$/;"	f	file:
initializeResult	./qt/bitcoin.cpp	/^void BitcoinApplication::initializeResult(bool success)$/;"	f	class:BitcoinApplication
inner	./crypto/hmac_sha256.h	/^    CSHA256 inner;$/;"	m	class:CHMAC_SHA256
inner	./crypto/hmac_sha512.h	/^    CSHA512 inner;$/;"	m	class:CHMAC_SHA512
inner	./secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon112
input	./crypto/chacha20.h	/^    uint32_t input[16];$/;"	m	class:ChaCha20
input	./leveldb/db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input	./timedata.h	/^    void input(T value)$/;"	f	class:CMedianFilter
input_version_	./leveldb/db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs	./node/psbt.h	/^    std::vector<PSBTInputAnalysis> inputs; \/\/!< More information about the individual inputs of the transaction$/;"	m	struct:PSBTAnalysis
inputs	./psbt.h	/^    std::vector<PSBTInput> inputs;$/;"	m	struct:PartiallySignedTransaction
inputs_	./leveldb/db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
insecure_rand	./addrman.h	/^    FastRandomContext insecure_rand;$/;"	m	class:CAddrMan
insecure_rand	./policy/fees.h	/^    FastRandomContext insecure_rand;$/;"	m	class:FeeEstimateHorizon::FeeFilterRounder
insert	./bloom.cpp	/^void CBloomFilter::insert(const COutPoint& outpoint)$/;"	f	class:CBloomFilter
insert	./bloom.cpp	/^void CBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CBloomFilter
insert	./bloom.cpp	/^void CBloomFilter::insert(const uint256& hash)$/;"	f	class:CBloomFilter
insert	./bloom.cpp	/^void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CRollingBloomFilter
insert	./bloom.cpp	/^void CRollingBloomFilter::insert(const uint256& hash)$/;"	f	class:CRollingBloomFilter
insert	./cuckoocache.h	/^    inline void insert(Element e)$/;"	f	class:CuckooCache::cache
insert	./indirectmap.h	/^    std::pair<iterator, bool> insert(const value_type& value) { return m.insert(value); }$/;"	f	class:indirectmap
insert	./limitedmap.h	/^    void insert(const value_type& x)$/;"	f	class:limitedmap
insert	./prevector.h	/^    iterator insert(iterator pos, const T& value) {$/;"	f	class:prevector
insert	./prevector.h	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:prevector
insert	./prevector.h	/^    void insert(iterator pos, size_type count, const T& value) {$/;"	f	class:prevector
insert	./streams.h	/^    iterator insert(iterator it, const char x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	./streams.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	./streams.h	/^    void insert(iterator it, size_type n, const char x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	./streams.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
insert	./test/prevector_tests.cpp	/^    void insert(Size position, Size count, const T& value) {$/;"	f	class:prevector_tester
insert	./test/prevector_tests.cpp	/^    void insert(Size position, const T& value) {$/;"	f	class:prevector_tester
insert	./util/system.h	/^inline void insert(Tdst& dst, const Tsrc& src) {$/;"	f	namespace:util
insert	./util/system.h	/^inline void insert(std::set<TsetT>& dst, const Tsrc& src) {$/;"	f	namespace:util
insert_range	./test/prevector_tests.cpp	/^    void insert_range(Size position, I first, I last) {$/;"	f	class:prevector_tester
insertion_order	./txmempool.h	/^struct insertion_order {};$/;"	s
install_sh	./Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/build-aux\/install-sh$/;"	m
install_sh	./secp256k1/Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/secp256k1\/build-aux\/install-sh$/;"	m
install_sh	./univalue/Makefile	/^install_sh = ${SHELL} \/Users\/christophercoverdale\/desktop\/projects\/bitcoin\/src\/univalue\/build-aux\/install-sh$/;"	m
install_sh_DATA	./Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	./secp256k1/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	./univalue/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	./Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	./secp256k1/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	./univalue/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	./Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	./secp256k1/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	./univalue/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance_of_cmaincleanup	./validation.cpp	/^} instance_of_cmaincleanup;$/;"	v	typeref:class:CMainCleanup
instance_of_cnetcleanup	./net.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
instance_of_cnetprocessingcleanup	./net_processing.cpp	/^} instance_of_cnetprocessingcleanup;$/;"	v	typeref:class:CNetProcessingCleanup
instance_of_eccryptoclosure	./script/bitcoinconsensus.cpp	/^ECCryptoClosure instance_of_eccryptoclosure;$/;"	m	namespace:__anon81	file:
instantiate	./qt/networkstyle.cpp	/^const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)$/;"	f	class:NetworkStyle
instantiate	./qt/platformstyle.cpp	/^const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)$/;"	f	class:PlatformStyle
int16_t	./leveldb/port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	./leveldb/port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_t	./leveldb/port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	./leveldb/port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
interface	./qt/notificator.h	/^    QDBusInterface *interface;$/;"	m	class:Notificator
interfaces	./dummywallet.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	./init.h	/^namespace interfaces {$/;"	n
interfaces	./interfaces/chain.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	./interfaces/chain.h	/^namespace interfaces {$/;"	n
interfaces	./interfaces/handler.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	./interfaces/handler.h	/^namespace interfaces {$/;"	n
interfaces	./interfaces/node.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	./interfaces/node.h	/^namespace interfaces {$/;"	n
interfaces	./interfaces/wallet.cpp	/^namespace interfaces {$/;"	n	file:
interfaces	./interfaces/wallet.h	/^namespace interfaces {$/;"	n
interfaces	./qt/addresstablemodel.h	/^namespace interfaces {$/;"	n
interfaces	./qt/bantablemodel.h	/^namespace interfaces {$/;"	n
interfaces	./qt/bitcoin.h	/^namespace interfaces {$/;"	n
interfaces	./qt/bitcoingui.h	/^namespace interfaces {$/;"	n
interfaces	./qt/clientmodel.h	/^namespace interfaces {$/;"	n
interfaces	./qt/guiutil.h	/^namespace interfaces$/;"	n
interfaces	./qt/intro.h	/^namespace interfaces {$/;"	n
interfaces	./qt/optionsmodel.h	/^namespace interfaces {$/;"	n
interfaces	./qt/peertablemodel.h	/^namespace interfaces {$/;"	n
interfaces	./qt/rpcconsole.h	/^namespace interfaces {$/;"	n
interfaces	./qt/splashscreen.h	/^namespace interfaces {$/;"	n
interfaces	./qt/transactiondesc.h	/^namespace interfaces {$/;"	n
interfaces	./qt/transactionrecord.h	/^namespace interfaces {$/;"	n
interfaces	./qt/transactiontablemodel.h	/^namespace interfaces {$/;"	n
interfaces	./qt/utilitydialog.h	/^namespace interfaces {$/;"	n
interfaces	./qt/walletcontroller.h	/^namespace interfaces {$/;"	n
interfaces	./qt/walletmodel.h	/^namespace interfaces {$/;"	n
interfaces	./qt/walletmodeltransaction.h	/^namespace interfaces {$/;"	n
interfaces	./ui_interface.h	/^namespace interfaces {$/;"	n
interfaces	./wallet/load.h	/^namespace interfaces {$/;"	n
interfaces	./wallet/rpcwallet.h	/^namespace interfaces {$/;"	n
internal_comparator	./leveldb/db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator_	./leveldb/db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	./leveldb/table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
internal_filter_policy_	./leveldb/db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	./leveldb/db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
interruptNet	./net.h	/^    CThreadInterrupt interruptNet;$/;"	m	class:CConnman
intro	./qt/intro.cpp	/^    Intro *intro;$/;"	m	class:FreespaceChecker	file:
intval	./test/serialize_tests.cpp	/^    int intval;$/;"	m	class:CSerializeMethodsTestSingle	file:
invalid	./cuckoocache.h	/^    constexpr uint32_t invalid() const$/;"	f	class:CuckooCache::cache
invalidateblock	./rpc/blockchain.cpp	/^static UniValue invalidateblock(const JSONRPCRequest& request)$/;"	f	file:
invlockorders	./sync.cpp	/^    InvLockOrders invlockorders;$/;"	m	struct:LockData	file:
invoke	./qt/transactiontablemodel.cpp	/^    void invoke(QObject *ttm)$/;"	f	struct:TransactionNotification
invoke	./tinyformat.h	/^    static bool invoke(std::ostream& \/**\/, const T& \/**\/) { return false; }$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	./tinyformat.h	/^    static bool invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	./tinyformat.h	/^    static int invoke(const T& \/*value*\/)$/;"	f	struct:tinyformat::detail::convertToInt
invoke	./tinyformat.h	/^    static int invoke(const T& value) { return static_cast<int>(value); }$/;"	f	struct:tinyformat::detail::convertToInt
invoke	./tinyformat.h	/^    static void invoke(std::ostream& \/*out*\/, const T& \/*value*\/) { assert(0); }$/;"	f	struct:tinyformat::detail::formatValueAsType
invoke	./tinyformat.h	/^    static void invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatValueAsType
involvesWatchAddress	./qt/transactionrecord.h	/^    bool involvesWatchAddress;$/;"	m	class:TransactionRecord
ip	./netaddress.h	/^        unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
ip	./qt/optionsmodel.cpp	/^    QString ip;$/;"	m	struct:ProxySetting	file:
ip	./test/denialofservice_tests.cpp	/^static CService ip(uint32_t i)$/;"	f	file:
ipcParseCommandLine	./qt/paymentserver.cpp	/^void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char* argv[])$/;"	f	class:PaymentServer
ipcSendCommandLine	./qt/paymentserver.cpp	/^bool PaymentServer::ipcSendCommandLine()$/;"	f	class:PaymentServer
ipcServerName	./qt/paymentserver.cpp	/^static QString ipcServerName()$/;"	f	file:
ipolicy_	./leveldb/db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon30::Repairer	file:
isAbandoned	./wallet/wallet.h	/^    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }$/;"	f	class:CMerkleTx
isArray	./univalue/include/univalue.h	/^    bool isArray() const { return (typ == VARR); }$/;"	f	class:UniValue
isBool	./univalue/include/univalue.h	/^    bool isBool() const { return (typ == VBOOL); }$/;"	f	class:UniValue
isCanonicalException	./test/serialize_tests.cpp	/^static bool isCanonicalException(const std::ios_base::failure& ex)$/;"	f	file:
isClear	./qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::isClear()$/;"	f	class:SendCoinsEntry
isDust	./qt/guiutil.cpp	/^bool isDust(interfaces::Node& node, const QString& address, const CAmount& amount)$/;"	f	namespace:GUIUtil
isEmpty	./bloom.h	/^    bool isEmpty;$/;"	m	class:CBloomFilter
isEnable	./leveldb/util/env_win.cc	/^BOOL Win32FileLock::isEnable()$/;"	f	class:leveldb::Win32::Win32FileLock
isEnable	./leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::isEnable()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
isEnable	./leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::isEnable()$/;"	f	class:leveldb::Win32::Win32SequentialFile
isEnable	./leveldb/util/env_win.cc	/^BOOL Win32WritableFile::isEnable()$/;"	f	class:leveldb::Win32::Win32WritableFile
isEnabled	./secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  public static boolean isEnabled() {$/;"	m	class:Secp256k1Context
isFalse	./univalue/include/univalue.h	/^    bool isFalse() const { return (typ == VBOOL) && (val != "1"); }$/;"	f	class:UniValue
isFull	./bloom.h	/^    bool isFull;$/;"	m	class:CBloomFilter
isLayerVisible	./qt/modaloverlay.h	/^    bool isLayerVisible() const { return layerIsVisible; }$/;"	f	class:ModalOverlay
isMultiwallet	./qt/walletmodel.cpp	/^bool WalletModel::isMultiwallet()$/;"	f	class:WalletModel
isNull	./univalue/include/univalue.h	/^    bool isNull() const { return (typ == VNULL); }$/;"	f	class:UniValue
isNum	./univalue/include/univalue.h	/^    bool isNum() const { return (typ == VNUM); }$/;"	f	class:UniValue
isObject	./univalue/include/univalue.h	/^    bool isObject() const { return (typ == VOBJ); }$/;"	f	class:UniValue
isObscured	./qt/guiutil.cpp	/^bool isObscured(QWidget *w)$/;"	f	namespace:GUIUtil
isReleaseVersion	./qt/clientmodel.cpp	/^bool ClientModel::isReleaseVersion() const$/;"	f	class:ClientModel
isReserved	./wallet/wallet.h	/^    bool isReserved() const$/;"	f	class:WalletRescanReserver
isRestartRequired	./qt/optionsmodel.cpp	/^bool OptionsModel::isRestartRequired() const$/;"	f	class:OptionsModel
isSpent	./txmempool.cpp	/^bool CTxMemPool::isSpent(const COutPoint& outpoint) const$/;"	f	class:CTxMemPool
isStr	./univalue/include/univalue.h	/^    bool isStr() const { return (typ == VSTR); }$/;"	f	class:UniValue
isTrue	./univalue/include/univalue.h	/^    bool isTrue() const { return (typ == VBOOL) && (val == "1"); }$/;"	f	class:UniValue
isValid	./qt/qvalidatedlineedit.cpp	/^bool QValidatedLineEdit::isValid()$/;"	f	class:QValidatedLineEdit
isValid	./qt/walletmodel.h	/^        bool isValid() const { return valid; }$/;"	f	class:WalletModel::UnlockContext
isWalletEnabled	./qt/walletmodel.cpp	/^bool WalletModel::isWalletEnabled()$/;"	f	class:WalletModel
is_abandoned	./interfaces/wallet.h	/^    bool is_abandoned;$/;"	m	struct:interfaces::WalletTxStatus
is_coinbase	./interfaces/wallet.h	/^    bool is_coinbase;$/;"	m	struct:interfaces::WalletTx
is_coinbase	./interfaces/wallet.h	/^    bool is_coinbase;$/;"	m	struct:interfaces::WalletTxStatus
is_convertible	./tinyformat.h	/^struct is_convertible$/;"	s	namespace:tinyformat::detail
is_default	./leveldb/db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
is_direct	./prevector.h	/^    bool is_direct() const { return _size <= N; }$/;"	f	class:prevector
is_empty_signature	./secp256k1/src/tests.c	/^int is_empty_signature(const secp256k1_ecdsa_signature *sig) {$/;"	f
is_final	./interfaces/wallet.h	/^    bool is_final;$/;"	m	struct:interfaces::WalletTxStatus
is_final	./node/psbt.h	/^    bool is_final; \/\/!< Whether the input has all required information including signatures$/;"	m	struct:PSBTInputAnalysis
is_in_main_chain	./interfaces/wallet.h	/^    bool is_in_main_chain;$/;"	m	struct:interfaces::WalletTxStatus
is_mine	./interfaces/wallet.h	/^    isminetype is_mine;$/;"	m	struct:interfaces::WalletAddress
is_null_key	./test/dbwrapper_tests.cpp	/^static bool is_null_key(const std::vector<unsigned char>& key) {$/;"	f	file:
is_open	./fs.h	/^        bool is_open() { return m_filebuf.is_open(); }$/;"	f	class:fsbridge::ifstream
is_open	./fs.h	/^        bool is_open() { return m_filebuf.is_open(); }$/;"	f	class:fsbridge::ofstream
is_set	./qt/optionsmodel.cpp	/^    bool is_set;$/;"	m	struct:ProxySetting	file:
is_spent	./interfaces/wallet.h	/^    bool is_spent = false;$/;"	m	struct:interfaces::WalletTxOut
is_trusted	./interfaces/wallet.h	/^    bool is_trusted;$/;"	m	struct:interfaces::WalletTxStatus
is_valid	./univalue/lib/univalue_utffilter.h	/^    bool is_valid;$/;"	m	class:JSONUTF8StringFilter
is_wchar	./tinyformat.h	/^template<> struct is_wchar<const wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	./tinyformat.h	/^template<> struct is_wchar<wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	./tinyformat.h	/^template<int n> struct is_wchar<const wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	./tinyformat.h	/^template<int n> struct is_wchar<wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	./tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	s	namespace:tinyformat::detail
isminefilter	./script/ismine.h	/^typedef uint8_t isminefilter;$/;"	t
isminetype	./script/ismine.h	/^enum isminetype$/;"	g
it	./rpc/server.cpp	/^    std::list<RPCCommandExecutionInfo>::iterator it;$/;"	m	struct:RPCCommandExecution	file:
item_ptr	./prevector.h	/^    T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
item_ptr	./prevector.h	/^    const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
iter	./leveldb/table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter	./miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:CTxMemPoolModifiedEntry
iter	./miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:update_for_parent_inclusion
iter_	./leveldb/db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon29::DBIter	file:
iter_	./leveldb/db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	./leveldb/db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	./leveldb/table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	./leveldb/table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
iterator	./indirectmap.h	/^    typedef typename base::iterator iterator;$/;"	t	class:indirectmap
iterator	./limitedmap.h	/^    typedef typename std::map<K, V>::iterator iterator;$/;"	t	class:limitedmap
iterator	./prevector.h	/^        iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::iterator
iterator	./prevector.h	/^    class iterator {$/;"	c	class:prevector
iterator	./streams.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iterator_category	./prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::const_reverse_iterator
iterator_category	./prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::reverse_iterator
iterator_category	./prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::const_iterator
iterator_category	./prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::iterator
iteroptions	./dbwrapper.h	/^    leveldb::ReadOptions iteroptions;$/;"	m	class:CDBWrapper
itostr	./util/strencodings.cpp	/^std::string itostr(int n)$/;"	f
iv	./crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES256CBCDecrypt
iv	./crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES256CBCEncrypt
joinpsbts	./rpc/rawtransaction.cpp	/^UniValue joinpsbts(const JSONRPCRequest& request)$/;"	f
json1	./univalue/test/object.cpp	/^static const char *json1 =$/;"	v	file:
jsonTokenIsValue	./univalue/include/univalue.h	/^static inline bool jsonTokenIsValue(enum jtokentype jtt)$/;"	f
json_escape	./univalue/lib/univalue_write.cpp	/^static std::string json_escape(const std::string& inS)$/;"	f	file:
json_isdigit	./univalue/lib/univalue_read.cpp	/^static bool json_isdigit(int ch)$/;"	f	file:
json_isspace	./univalue/include/univalue.h	/^static inline bool json_isspace(int ch)$/;"	f
json_tests	./test/data/base58_encode_decode.json.h	/^namespace json_tests{$/;"	n
json_tests	./test/data/blockfilters.json.h	/^namespace json_tests{$/;"	n
json_tests	./test/data/key_io_invalid.json.h	/^namespace json_tests{$/;"	n
json_tests	./test/data/key_io_valid.json.h	/^namespace json_tests{$/;"	n
json_tests	./test/data/script_tests.json.h	/^namespace json_tests{$/;"	n
json_tests	./test/data/sighash.json.h	/^namespace json_tests{$/;"	n
json_tests	./test/data/tx_invalid.json.h	/^namespace json_tests{$/;"	n
json_tests	./test/data/tx_valid.json.h	/^namespace json_tests{$/;"	n
jtokentype	./univalue/include/univalue.h	/^enum jtokentype {$/;"	g
k	./secp256k1/src/hash.h	/^    unsigned char k[32];$/;"	m	struct:__anon113
k0	./coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedOutpointHasher
k0	./txmempool.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
k1	./coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedOutpointHasher
k1	./crypto/sha1.cpp	/^const uint32_t k1 = 0x5A827999ul;$/;"	m	namespace:__anon38::sha1	file:
k1	./txmempool.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
k2	./crypto/sha1.cpp	/^const uint32_t k2 = 0x6ED9EBA1ul;$/;"	m	namespace:__anon38::sha1	file:
k3	./crypto/sha1.cpp	/^const uint32_t k3 = 0x8F1BBCDCul;$/;"	m	namespace:__anon38::sha1	file:
k4	./crypto/sha1.cpp	/^const uint32_t k4 = 0xCA62C1D6ul;$/;"	m	namespace:__anon38::sha1	file:
kBadRecord	./leveldb/db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon28
kBlockSize	./leveldb/db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	./leveldb/helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon35::FileState::__anon36	file:
kBlockSize	./leveldb/util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	./leveldb/table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	./leveldb/util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	./leveldb/util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	./leveldb/util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	./leveldb/db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	./leveldb/db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	./leveldb/db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kCorruption	./leveldb/include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCount	./leveldb/db/autocompact_test.cc	/^static const int kCount = kTotalSize \/ kValueSize;$/;"	m	namespace:leveldb	file:
kCurrentFile	./leveldb/db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	./leveldb/db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	./leveldb/db/db_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kDelayMicros	./leveldb/util/env_posix_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDelayMicros	./leveldb/util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeleted	./leveldb/db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kDeletedFile	./leveldb/db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	./leveldb/db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	./leveldb/table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon14
kEnd	./leveldb/db/db_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kEof	./leveldb/db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon28
kFilter	./leveldb/db/db_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kFilterBase	./leveldb/table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	./leveldb/table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	./leveldb/db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	./leveldb/db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon29::DBIter::Direction	file:
kForward	./leveldb/table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon11::MergingIterator::Direction	file:
kFound	./leveldb/db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kFullType	./leveldb/db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	./leveldb/db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	./leveldb/db/log_format.h	/^static const int kHeaderSize = 4 + 2 + 1;$/;"	m	namespace:leveldb::log
kIOError	./leveldb/include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	./leveldb/db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	./leveldb/include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	./leveldb/db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	./leveldb/db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	./leveldb/db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	./leveldb/db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	./leveldb/db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	./leveldb/port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	./leveldb/port/port_posix.h	/^static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLittleEndian	./leveldb/port/port_win.h	/^static const bool kLittleEndian = true;$/;"	m	namespace:leveldb::port
kLogFile	./leveldb/db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	./leveldb/db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMMapLimit	./leveldb/util/env_posix_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMMapLimit	./leveldb/util/env_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMajorVersion	./leveldb/include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	./leveldb/util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	./leveldb/table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon13
kMaxHeight	./leveldb/db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon21
kMaxMemCompactLevel	./leveldb/db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxNumValues	./leveldb/db/fault_injection_test.cc	/^static const int kMaxNumValues = 2000;$/;"	m	namespace:leveldb	file:
kMaxRecordType	./leveldb/db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	./leveldb/db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	./leveldb/db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	./leveldb/include/leveldb/db.h	/^static const int kMinorVersion = 20;$/;"	m	namespace:leveldb
kNewFile	./leveldb/db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	./leveldb/db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	./leveldb/include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	./leveldb/db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon26::SaverState	file:
kNotFound	./leveldb/include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	./leveldb/include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	./leveldb/util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon6
kNumIterations	./leveldb/db/fault_injection_test.cc	/^static const size_t kNumIterations = 3;$/;"	m	namespace:leveldb	file:
kNumKeys	./leveldb/db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon24	file:
kNumKeys	./leveldb/issues/issue178_test.cc	/^const int kNumKeys = 1100000;$/;"	m	namespace:__anon34	file:
kNumLevels	./leveldb/db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	./leveldb/db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	./leveldb/util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon4	file:
kNumShards	./leveldb/util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon4	file:
kNumTestArgs	./leveldb/table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kNumThreads	./leveldb/db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon24	file:
kOk	./leveldb/include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	./leveldb/db/version_edit.cc	/^  kPrevLogNumber        = 9$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	./leveldb/db/dbformat.h	/^static const int kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReadOnlyFileLimit	./leveldb/util/env_posix_test.cc	/^static const int kReadOnlyFileLimit = 4;$/;"	m	namespace:leveldb	file:
kReadOnlyFileLimit	./leveldb/util/env_test.cc	/^static const int kReadOnlyFileLimit = 4;$/;"	m	namespace:leveldb	file:
kReuse	./leveldb/db/db_test.cc	/^    kReuse,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kReverse	./leveldb/db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon29::DBIter::Direction	file:
kReverse	./leveldb/table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon11::MergingIterator::Direction	file:
kSnappyCompression	./leveldb/include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kTableFile	./leveldb/db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	./leveldb/table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTempFile	./leveldb/db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	./leveldb/table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTestSeconds	./leveldb/db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon24	file:
kTotalSize	./leveldb/db/autocompact_test.cc	/^static const int kTotalSize = 100 * 1024 * 1024;$/;"	m	namespace:leveldb	file:
kTypeDeletion	./leveldb/db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	./leveldb/db/dbformat.h	/^  kTypeValue = 0x1$/;"	e	enum:leveldb::ValueType
kUncompressed	./leveldb/db/db_test.cc	/^    kUncompressed,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kValueSize	./leveldb/db/autocompact_test.cc	/^static const int kValueSize = 200 * 1024;$/;"	m	namespace:leveldb	file:
kValueSize	./leveldb/db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueSize	./leveldb/db/fault_injection_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	./leveldb/db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	./leveldb/util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb	file:
kZeroType	./leveldb/db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	./leveldb/util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon3::BloomFilterPolicy	file:
key	./crypto/ctaes/test.c	/^    const char* key;$/;"	m	struct:__anon44	file:
key	./key.h	/^    CKey key;$/;"	m	struct:CExtKey
key	./leveldb/db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon29::DBIter
key	./leveldb/db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	./leveldb/db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	./leveldb/db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	./leveldb/db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	./leveldb/db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	./leveldb/db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	./leveldb/table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	./leveldb/table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon12::EmptyIterator
key	./leveldb/table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	./leveldb/table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon11::MergingIterator
key	./leveldb/table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	./leveldb/table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
key	./leveldb/util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon4::LRUHandle
key	./secp256k1/src/bench_sign.c	/^    unsigned char key[32];$/;"	m	struct:__anon102	file:
key	./secp256k1/src/bench_verify.c	/^    unsigned char key[32];$/;"	m	struct:__anon106	file:
key	./txdb.cpp	/^    char key;$/;"	m	struct:__anon121::CoinEntry	file:
key0	./test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key0C	./test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key1	./test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key1C	./test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key2	./test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
key2C	./test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon58::KeyData	file:
keyPressEvent	./qt/coincontroltreewidget.cpp	/^void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)$/;"	f	class:CoinControlTreeWidget
keyPressEvent	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)$/;"	f	class:ReceiveCoinsDialog
keyPressEvent	./qt/rpcconsole.cpp	/^void RPCConsole::keyPressEvent(QKeyEvent *event)$/;"	f	class:RPCConsole
keyTmp	./txdb.h	/^    std::pair<char, COutPoint> keyTmp;$/;"	m	class:CCoinsViewDBCursor
key_	./leveldb/table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	./leveldb/table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	./leveldb/util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
key_io_invalid	./test/data/key_io_invalid.json.h	/^static unsigned const char key_io_invalid[] = {$/;"	m	namespace:json_tests
key_io_valid	./test/data/key_io_valid.json.h	/^static unsigned const char key_io_valid[] = {$/;"	m	namespace:json_tests
key_length	./leveldb/util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
key_match_	./leveldb/db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t	file:
key_origin	./wallet/walletdb.h	/^    KeyOriginInfo key_origin; \/\/ Key origin info with path and fingerprint$/;"	m	class:CKeyMetadata
key_origins	./wallet/rpcdump.cpp	/^    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> key_origins;$/;"	m	struct:ImportData	file:
key_type	./limitedmap.h	/^    typedef K key_type;$/;"	t	class:limitedmap
keydata	./key.h	/^    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;$/;"	m	class:CKey
keypoolrefill	./wallet/rpcwallet.cpp	/^static UniValue keypoolrefill(const JSONRPCRequest& request)$/;"	f	file:
keys	./script/sign.h	/^    std::map<CKeyID, CKey> keys;$/;"	m	struct:final
keys	./univalue/include/univalue.h	/^    std::vector<std::string> keys;$/;"	m	class:UniValue
keys_	./leveldb/table/filter_block.h	/^  std::string keys_;              \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	./leveldb/util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest	file:
keysize	./crypto/ctaes/test.c	/^    int keysize;$/;"	m	struct:__anon44	file:
kstart_	./leveldb/db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
label	./qt/addresstablemodel.cpp	/^    QString label;$/;"	m	struct:AddressTableEntry	file:
label	./qt/walletmodel.h	/^    QString label;$/;"	m	class:SendCoinsRecipient
labelBlocksIcon	./qt/bitcoingui.h	/^    GUIUtil::ClickableLabel* labelBlocksIcon = nullptr;$/;"	m	class:BitcoinGUI
labelForAddress	./qt/addresstablemodel.cpp	/^QString AddressTableModel::labelForAddress(const QString &address) const$/;"	f	class:AddressTableModel
labelProxyIcon	./qt/bitcoingui.h	/^    GUIUtil::ClickableLabel* labelProxyIcon = nullptr;$/;"	m	class:BitcoinGUI
labelWalletEncryptionIcon	./qt/bitcoingui.h	/^    QLabel* labelWalletEncryptionIcon = nullptr;$/;"	m	class:BitcoinGUI
labelWalletHDStatusIcon	./qt/bitcoingui.h	/^    QLabel* labelWalletHDStatusIcon = nullptr;$/;"	m	class:BitcoinGUI
language	./qt/optionsmodel.h	/^    QString language;$/;"	m	class:OptionsModel
largest	./leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	./leveldb/db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
lastColumnIndex	./qt/guiutil.h	/^            int lastColumnIndex;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
lastColumnMinimumWidth	./qt/guiutil.h	/^            int lastColumnMinimumWidth;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
lastRollingFeeUpdate	./txmempool.h	/^    mutable int64_t lastRollingFeeUpdate;$/;"	m	class:CTxMemPool
last_failed_block	./wallet/wallet.h	/^        uint256 last_failed_block;$/;"	m	struct:final::ScanResult
last_id_	./leveldb/util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon4::ShardedLRUCache	file:
last_key	./leveldb/table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	./leveldb/table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	./leveldb/db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon19::Stats	file:
last_op_finish_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_op_finish_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	./leveldb/db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_record_offset_	./leveldb/db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_scanned_block	./wallet/wallet.h	/^        uint256 last_scanned_block;$/;"	m	struct:final::ScanResult
last_scanned_height	./wallet/wallet.h	/^        Optional<int> last_scanned_height;$/;"	m	struct:final::ScanResult
last_sequence_	./leveldb/db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	./leveldb/db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
latestblock	./rpc/blockchain.cpp	/^static CUpdatedBlock latestblock;$/;"	v	file:
layerIsVisible	./qt/modaloverlay.h	/^    bool layerIsVisible;$/;"	m	class:ModalOverlay
le16toh	./compat/endian.h	/^inline uint16_t le16toh(uint16_t little_endian_16bits)$/;"	f
le32toh	./compat/endian.h	/^inline uint32_t le32toh(uint32_t little_endian_32bits)$/;"	f
le64toh	./compat/endian.h	/^inline uint64_t le64toh(uint64_t little_endian_64bits)$/;"	f
left	./crypto/sha1.cpp	/^uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }$/;"	f	namespace:__anon38::sha1
left	./memusage.h	/^    void* left;$/;"	m	struct:memusage::stl_tree_node
leftMempool	./policy/fees.h	/^    double leftMempool = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
length	./script/standard.h	/^    unsigned int length;$/;"	m	struct:WitnessUnknown
length_	./leveldb/util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon4::HandleTable	file:
length_	./leveldb/util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
level	./leveldb/db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	./leveldb/db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	./leveldb/db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	./leveldb/db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	./leveldb/db/autocompact_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/builder.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/corruption_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/dumpfile.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/fault_injection_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/filename.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/leveldbutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/recovery_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/version_set_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/doc/bench/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/doc/bench/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/dumpfile.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/issues/issue200_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/port/port_posix_sse.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/port/port_win.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/port/port_win.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/block.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/table/filter_block_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/format.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/merger.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/arena.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/bloom_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/coding.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/env_posix_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/env_posix_test_helper.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/env_win.cc	/^namespace leveldb$/;"	n	file:
leveldb	./leveldb/util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/hash.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/hash_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/logging.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/random.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	./leveldb/util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	./leveldb/util/testutil.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	./leveldb/db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_cache_create_lru	./leveldb/db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	./leveldb/db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	./leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s	file:
leveldb_cache_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	./leveldb/db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	./leveldb/db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	./leveldb/db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	./leveldb/db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	./leveldb/db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	./leveldb/db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	./leveldb/db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	./leveldb/db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	./leveldb/db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	./leveldb/db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_env_destroy	./leveldb/db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	./leveldb/db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	./leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s	file:
leveldb_filelock_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	./leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	./leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	./leveldb/db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	./leveldb/db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	./leveldb/db/c.cc	/^void leveldb_free(void* ptr) {$/;"	f
leveldb_get	./leveldb/db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	./leveldb/db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	./leveldb/db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	./leveldb/db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	./leveldb/db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	./leveldb/db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	./leveldb/db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	./leveldb/db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	./leveldb/db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	./leveldb/db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	./leveldb/db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	./leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s	file:
leveldb_iterator_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_libleveldb_a_AR	./Makefile	/^leveldb_libleveldb_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_a_CPPFLAGS	./Makefile	/^leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)$/;"	m
leveldb_libleveldb_a_CXXFLAGS	./Makefile	/^leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
leveldb_libleveldb_a_LIBADD	./Makefile	/^leveldb_libleveldb_a_LIBADD =$/;"	m
leveldb_libleveldb_a_OBJECTS	./Makefile	/^leveldb_libleveldb_a_OBJECTS = $(am_leveldb_libleveldb_a_OBJECTS)$/;"	m
leveldb_libleveldb_a_SOURCES	./Makefile	/^leveldb_libleveldb_a_SOURCES =  \\$/;"	m
leveldb_libleveldb_sse42_a_AR	./Makefile	/^leveldb_libleveldb_sse42_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_sse42_a_CPPFLAGS	./Makefile	/^leveldb_libleveldb_sse42_a_CPPFLAGS =  \\$/;"	m
leveldb_libleveldb_sse42_a_CXXFLAGS	./Makefile	/^leveldb_libleveldb_sse42_a_CXXFLAGS =  \\$/;"	m
leveldb_libleveldb_sse42_a_LIBADD	./Makefile	/^leveldb_libleveldb_sse42_a_LIBADD =$/;"	m
leveldb_libleveldb_sse42_a_OBJECTS	./Makefile	/^leveldb_libleveldb_sse42_a_OBJECTS =  \\$/;"	m
leveldb_libleveldb_sse42_a_SOURCES	./Makefile	/^leveldb_libleveldb_sse42_a_SOURCES = leveldb\/port\/port_posix_sse.cc$/;"	m
leveldb_libmemenv_a_AR	./Makefile	/^leveldb_libmemenv_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libmemenv_a_CPPFLAGS	./Makefile	/^leveldb_libmemenv_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)$/;"	m
leveldb_libmemenv_a_CXXFLAGS	./Makefile	/^leveldb_libmemenv_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)$/;"	m
leveldb_libmemenv_a_LIBADD	./Makefile	/^leveldb_libmemenv_a_LIBADD =$/;"	m
leveldb_libmemenv_a_OBJECTS	./Makefile	/^leveldb_libmemenv_a_OBJECTS = $(am_leveldb_libmemenv_a_OBJECTS)$/;"	m
leveldb_libmemenv_a_SOURCES	./Makefile	/^leveldb_libmemenv_a_SOURCES =  \\$/;"	m
leveldb_logger_t	./leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s	file:
leveldb_logger_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	./leveldb/db/c.cc	/^int leveldb_major_version() {$/;"	f
leveldb_minor_version	./leveldb/db/c.cc	/^int leveldb_minor_version() {$/;"	f
leveldb_no_compression	./leveldb/include/leveldb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon10
leveldb_open	./leveldb/db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	./leveldb/db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	./leveldb/db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	./leveldb/db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	./leveldb/db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	./leveldb/db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	./leveldb/db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	./leveldb/db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	./leveldb/db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	./leveldb/db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	./leveldb/db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	./leveldb/db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	./leveldb/db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	./leveldb/db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	./leveldb/db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	./leveldb/db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	./leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s	file:
leveldb_options_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	./leveldb/db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	./leveldb/db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	./leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s	file:
leveldb_randomfile_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	./leveldb/db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	./leveldb/db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	./leveldb/db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	./leveldb/db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	./leveldb/db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	./leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s	file:
leveldb_readoptions_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	./leveldb/db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	./leveldb/db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	./leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s	file:
leveldb_seqfile_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	./leveldb/include/leveldb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon10
leveldb_snapshot_t	./leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s	file:
leveldb_snapshot_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	./leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s	file:
leveldb_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	./leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s	file:
leveldb_writablefile_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	./leveldb/db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	./leveldb/db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	./leveldb/db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	./leveldb/db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	./leveldb/db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	./leveldb/db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	./leveldb/db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	./leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s	file:
leveldb_writebatch_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	./leveldb/db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	./leveldb/db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	./leveldb/db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	./leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s	file:
leveldb_writeoptions_t	./leveldb/include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	./leveldb/db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
lf_cb	./support/lockedpool.h	/^    LockingFailed_Callback lf_cb;$/;"	m	class:LockedPool
lib_LTLIBRARIES	./Makefile	/^lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)$/;"	m
lib_LTLIBRARIES	./secp256k1/Makefile	/^lib_LTLIBRARIES = libsecp256k1.la$/;"	m
lib_LTLIBRARIES	./univalue/Makefile	/^lib_LTLIBRARIES = libunivalue.la$/;"	m
libbitcoin_cli_a_AR	./Makefile	/^libbitcoin_cli_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_cli_a_CPPFLAGS	./Makefile	/^libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_cli_a_CXXFLAGS	./Makefile	/^libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_cli_a_LIBADD	./Makefile	/^libbitcoin_cli_a_LIBADD =$/;"	m
libbitcoin_cli_a_OBJECTS	./Makefile	/^libbitcoin_cli_a_OBJECTS = $(am_libbitcoin_cli_a_OBJECTS)$/;"	m
libbitcoin_cli_a_SOURCES	./Makefile	/^libbitcoin_cli_a_SOURCES = \\$/;"	m
libbitcoin_common_a_AR	./Makefile	/^libbitcoin_common_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_common_a_CPPFLAGS	./Makefile	/^libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_common_a_CXXFLAGS	./Makefile	/^libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_common_a_LIBADD	./Makefile	/^libbitcoin_common_a_LIBADD =$/;"	m
libbitcoin_common_a_OBJECTS	./Makefile	/^libbitcoin_common_a_OBJECTS = $(am_libbitcoin_common_a_OBJECTS)$/;"	m
libbitcoin_common_a_SOURCES	./Makefile	/^libbitcoin_common_a_SOURCES = \\$/;"	m
libbitcoin_consensus_a_AR	./Makefile	/^libbitcoin_consensus_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_consensus_a_CPPFLAGS	./Makefile	/^libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_consensus_a_CXXFLAGS	./Makefile	/^libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_consensus_a_LIBADD	./Makefile	/^libbitcoin_consensus_a_LIBADD =$/;"	m
libbitcoin_consensus_a_OBJECTS	./Makefile	/^libbitcoin_consensus_a_OBJECTS = $(am_libbitcoin_consensus_a_OBJECTS)$/;"	m
libbitcoin_consensus_a_SOURCES	./Makefile	/^libbitcoin_consensus_a_SOURCES = \\$/;"	m
libbitcoin_server_a_AR	./Makefile	/^libbitcoin_server_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_server_a_CPPFLAGS	./Makefile	/^libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)$/;"	m
libbitcoin_server_a_CXXFLAGS	./Makefile	/^libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_server_a_LIBADD	./Makefile	/^libbitcoin_server_a_LIBADD =$/;"	m
libbitcoin_server_a_OBJECTS	./Makefile	/^libbitcoin_server_a_OBJECTS = $(am_libbitcoin_server_a_OBJECTS)$/;"	m
libbitcoin_server_a_SOURCES	./Makefile	/^libbitcoin_server_a_SOURCES = addrdb.cpp addrman.cpp banman.cpp \\$/;"	m
libbitcoin_util_a_AR	./Makefile	/^libbitcoin_util_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_util_a_CPPFLAGS	./Makefile	/^libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_util_a_CXXFLAGS	./Makefile	/^libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_util_a_LIBADD	./Makefile	/^libbitcoin_util_a_LIBADD =$/;"	m
libbitcoin_util_a_OBJECTS	./Makefile	/^libbitcoin_util_a_OBJECTS = $(am_libbitcoin_util_a_OBJECTS) \\$/;"	m
libbitcoin_util_a_SOURCES	./Makefile	/^libbitcoin_util_a_SOURCES = support\/lockedpool.cpp chainparamsbase.cpp \\$/;"	m
libbitcoin_wallet_a_AR	./Makefile	/^libbitcoin_wallet_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_wallet_a_CPPFLAGS	./Makefile	/^libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_wallet_a_CXXFLAGS	./Makefile	/^libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_wallet_a_LIBADD	./Makefile	/^libbitcoin_wallet_a_LIBADD =$/;"	m
libbitcoin_wallet_a_OBJECTS	./Makefile	/^libbitcoin_wallet_a_OBJECTS = $(am_libbitcoin_wallet_a_OBJECTS)$/;"	m
libbitcoin_wallet_a_SOURCES	./Makefile	/^libbitcoin_wallet_a_SOURCES = \\$/;"	m
libbitcoin_wallet_tool_a_AR	./Makefile	/^libbitcoin_wallet_tool_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_wallet_tool_a_CPPFLAGS	./Makefile	/^libbitcoin_wallet_tool_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_wallet_tool_a_CXXFLAGS	./Makefile	/^libbitcoin_wallet_tool_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_wallet_tool_a_LIBADD	./Makefile	/^libbitcoin_wallet_tool_a_LIBADD =$/;"	m
libbitcoin_wallet_tool_a_OBJECTS	./Makefile	/^libbitcoin_wallet_tool_a_OBJECTS =  \\$/;"	m
libbitcoin_wallet_tool_a_SOURCES	./Makefile	/^libbitcoin_wallet_tool_a_SOURCES = \\$/;"	m
libbitcoin_zmq_a_AR	./Makefile	/^libbitcoin_zmq_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_zmq_a_CPPFLAGS	./Makefile	/^libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)$/;"	m
libbitcoin_zmq_a_CXXFLAGS	./Makefile	/^libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoin_zmq_a_LIBADD	./Makefile	/^libbitcoin_zmq_a_LIBADD =$/;"	m
libbitcoin_zmq_a_OBJECTS	./Makefile	/^libbitcoin_zmq_a_OBJECTS = $(am_libbitcoin_zmq_a_OBJECTS)$/;"	m
libbitcoin_zmq_a_SOURCES	./Makefile	/^libbitcoin_zmq_a_SOURCES = \\$/;"	m
libbitcoinconsensus_la_CPPFLAGS	./Makefile	/^libbitcoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)\/obj -I$(srcdir)\/secp256k1\/include -DBUILD_BITCOIN_INTERNAL$/;"	m
libbitcoinconsensus_la_CXXFLAGS	./Makefile	/^libbitcoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libbitcoinconsensus_la_DEPENDENCIES	./Makefile	/^libbitcoinconsensus_la_DEPENDENCIES =  \\$/;"	m
libbitcoinconsensus_la_LDFLAGS	./Makefile	/^libbitcoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)$/;"	m
libbitcoinconsensus_la_LIBADD	./Makefile	/^libbitcoinconsensus_la_LIBADD = $(LIBSECP256K1)$/;"	m
libbitcoinconsensus_la_LINK	./Makefile	/^libbitcoinconsensus_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libbitcoinconsensus_la_OBJECTS	./Makefile	/^libbitcoinconsensus_la_OBJECTS = $(am_libbitcoinconsensus_la_OBJECTS)$/;"	m
libbitcoinconsensus_la_SOURCES	./Makefile	/^libbitcoinconsensus_la_SOURCES = $(crypto_libbitcoin_crypto_base_a_SOURCES) \\$/;"	m
libdir	./Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	./secp256k1/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	./univalue/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libevent_log_cb	./bitcoin-cli.cpp	/^static void libevent_log_cb(int severity, const char *msg)$/;"	f	file:
libevent_log_cb	./httpserver.cpp	/^static void libevent_log_cb(int severity, const char *msg)$/;"	f	file:
libexecdir	./Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	./secp256k1/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	./univalue/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libsecp256k1_common_la_LIBADD	./secp256k1/Makefile	/^libsecp256k1_common_la_LIBADD =$/;"	m
libsecp256k1_common_la_OBJECTS	./secp256k1/Makefile	/^libsecp256k1_common_la_OBJECTS = $(am_libsecp256k1_common_la_OBJECTS)$/;"	m
libsecp256k1_jni_la_CPPFLAGS	./secp256k1/Makefile	/^libsecp256k1_jni_la_CPPFLAGS = -DSECP256K1_BUILD $(JNI_INCLUDES)$/;"	m
libsecp256k1_jni_la_LIBADD	./secp256k1/Makefile	/^libsecp256k1_jni_la_LIBADD =$/;"	m
libsecp256k1_jni_la_OBJECTS	./secp256k1/Makefile	/^libsecp256k1_jni_la_OBJECTS = $(am_libsecp256k1_jni_la_OBJECTS)$/;"	m
libsecp256k1_jni_la_SOURCES	./secp256k1/Makefile	/^libsecp256k1_jni_la_SOURCES = src\/java\/org_bitcoin_NativeSecp256k1.c src\/java\/org_bitcoin_Secp256k1Context.c$/;"	m
libsecp256k1_la_CPPFLAGS	./secp256k1/Makefile	/^libsecp256k1_la_CPPFLAGS = -DSECP256K1_BUILD -I$(top_srcdir)\/include -I$(top_srcdir)\/src $(SECP_INCLUDES)$/;"	m
libsecp256k1_la_DEPENDENCIES	./secp256k1/Makefile	/^libsecp256k1_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
libsecp256k1_la_LIBADD	./secp256k1/Makefile	/^libsecp256k1_la_LIBADD = $(JNI_LIB) $(SECP_LIBS) $(COMMON_LIB)$/;"	m
libsecp256k1_la_OBJECTS	./secp256k1/Makefile	/^libsecp256k1_la_OBJECTS = $(am_libsecp256k1_la_OBJECTS)$/;"	m
libsecp256k1_la_SOURCES	./secp256k1/Makefile	/^libsecp256k1_la_SOURCES = src\/secp256k1.c$/;"	m
libtool_options_prep	./secp256k1/build-aux/ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_options_prep	./secp256k1/libtool	/^libtool_options_prep ()$/;"	f
libtool_options_prep	./univalue/build-aux/ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_options_prep	./univalue/libtool	/^libtool_options_prep ()$/;"	f
libtool_parse_options	./secp256k1/build-aux/ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_parse_options	./secp256k1/libtool	/^libtool_parse_options ()$/;"	f
libtool_parse_options	./univalue/build-aux/ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_parse_options	./univalue/libtool	/^libtool_parse_options ()$/;"	f
libtool_validate_options	./secp256k1/build-aux/ltmain.sh	/^libtool_validate_options ()$/;"	f
libtool_validate_options	./secp256k1/libtool	/^libtool_validate_options ()$/;"	f
libtool_validate_options	./univalue/build-aux/ltmain.sh	/^libtool_validate_options ()$/;"	f
libtool_validate_options	./univalue/libtool	/^libtool_validate_options ()$/;"	f
libunivalue_la_CXXFLAGS	./univalue/Makefile	/^libunivalue_la_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
libunivalue_la_LDFLAGS	./univalue/Makefile	/^libunivalue_la_LDFLAGS = \\$/;"	m
libunivalue_la_LIBADD	./univalue/Makefile	/^libunivalue_la_LIBADD =$/;"	m
libunivalue_la_LINK	./univalue/Makefile	/^libunivalue_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libunivalue_la_OBJECTS	./univalue/Makefile	/^libunivalue_la_OBJECTS = $(am_libunivalue_la_OBJECTS)$/;"	m
libunivalue_la_SOURCES	./univalue/Makefile	/^libunivalue_la_SOURCES = \\$/;"	m
limbs	./secp256k1/src/num_gmp.h	/^    int limbs;$/;"	m	struct:__anon110
limit	./leveldb/include/leveldb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limitRows	./qt/transactionfilterproxy.h	/^    int limitRows;$/;"	m	class:TransactionFilterProxy
limitedmap	./limitedmap.h	/^    explicit limitedmap(size_type nMaxSizeIn)$/;"	f	class:limitedmap
limitedmap	./limitedmap.h	/^class limitedmap$/;"	c
limiter_	./leveldb/util/env_posix.cc	/^  Limiter* limiter_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
limiter_	./leveldb/util/env_posix.cc	/^  Limiter* limiter_;$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
line_	./leveldb/util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
lines	./torcontrol.cpp	/^    std::vector<std::string> lines;$/;"	m	class:TorControlReply	file:
list	./qt/recentrequeststablemodel.h	/^    QList<RecentRequestEntry> list;$/;"	m	class:RecentRequestsTableModel
listCommands	./rpc/server.cpp	/^std::vector<std::string> CRPCTable::listCommands() const$/;"	f	class:CRPCTable
list_	./leveldb/db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	./leveldb/db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	./leveldb/db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	./leveldb/db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	./leveldb/util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon4::HandleTable	file:
list_pos	./net_processing.cpp	/^    size_t list_pos;$/;"	m	struct:COrphanTx	file:
listaddressgroupings	./wallet/rpcwallet.cpp	/^static UniValue listaddressgroupings(const JSONRPCRequest& request)$/;"	f	file:
listbanned	./rpc/net.cpp	/^static UniValue listbanned(const JSONRPCRequest& request)$/;"	f	file:
listlabels	./wallet/rpcwallet.cpp	/^static UniValue listlabels(const JSONRPCRequest& request)$/;"	f	file:
listlockunspent	./wallet/rpcwallet.cpp	/^static UniValue listlockunspent(const JSONRPCRequest& request)$/;"	f	file:
listreceivedbyaddress	./wallet/rpcwallet.cpp	/^static UniValue listreceivedbyaddress(const JSONRPCRequest& request)$/;"	f	file:
listreceivedbylabel	./wallet/rpcwallet.cpp	/^static UniValue listreceivedbylabel(const JSONRPCRequest& request)$/;"	f	file:
listsinceblock	./wallet/rpcwallet.cpp	/^static UniValue listsinceblock(const JSONRPCRequest& request)$/;"	f	file:
listtransactions	./wallet/rpcwallet.cpp	/^UniValue listtransactions(const JSONRPCRequest& request)$/;"	f
listunspent	./wallet/rpcwallet.cpp	/^static UniValue listunspent(const JSONRPCRequest& request)$/;"	f	file:
listwalletdir	./wallet/rpcwallet.cpp	/^static UniValue listwalletdir(const JSONRPCRequest& request)$/;"	f	file:
listwallets	./wallet/rpcwallet.cpp	/^static UniValue listwallets(const JSONRPCRequest& request)$/;"	f	file:
loadReceiveRequests	./qt/walletmodel.cpp	/^void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)$/;"	f	class:WalletModel
loadRow	./qt/editaddressdialog.cpp	/^void EditAddressDialog::loadRow(int row)$/;"	f	class:EditAddressDialog
loadwallet	./wallet/rpcwallet.cpp	/^static UniValue loadwallet(const JSONRPCRequest& request)$/;"	f	file:
local_check	./test/prevector_tests.cpp	/^    void local_check(bool b)$/;"	f	class:prevector_tester	file:
local_check_equal	./test/prevector_tests.cpp	/^        void local_check_equal(A a, B b)$/;"	f	class:prevector_tester	file:
localedir	./Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	./secp256k1/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	./univalue/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	./Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	./secp256k1/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	./univalue/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	./reverselock.h	/^    Lock& lock;$/;"	m	class:reverse_lock
lockAction	./qt/coincontroldialog.h	/^    QAction *lockAction;$/;"	m	class:CoinControlDialog
lockCoin	./qt/coincontroldialog.cpp	/^void CoinControlDialog::lockCoin()$/;"	f	class:CoinControlDialog
lockPoints	./txmempool.h	/^    LockPoints lockPoints;     \/\/!< Track the height and time at which tx was final$/;"	m	class:CTxMemPoolEntry
lock_time	./interfaces/wallet.h	/^    uint32_t lock_time;$/;"	m	struct:interfaces::WalletTxStatus
locked	./support/lockedpool.h	/^        size_t locked;$/;"	m	struct:LockedPool::Stats
locked_files_	./leveldb/util/env_posix.cc	/^  std::set<std::string> locked_files_;$/;"	m	class:leveldb::__anon8::PosixLockTable	file:
lockedcount	./test/allocator_tests.cpp	/^    int lockedcount;$/;"	m	class:TestLockedPageAllocator	file:
lockorders	./sync.cpp	/^    LockOrders lockorders;$/;"	m	struct:LockData	file:
locks_	./leveldb/util/env_posix.cc	/^  PosixLockTable locks_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
lockunspent	./wallet/rpcwallet.cpp	/^static UniValue lockunspent(const JSONRPCRequest& request)$/;"	f	file:
log	./leveldb/db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	./leveldb/db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	./leveldb/db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	./leveldb/db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	./leveldb/db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	./leveldb/db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	./leveldb/db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	./leveldb/db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	./leveldb/db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	./leveldb/db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	./leveldb/db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	./leveldb/db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logging	./rpc/misc.cpp	/^UniValue logging(const JSONRPCRequest& request)$/;"	f
logs_	./leveldb/db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon30::Repairer	file:
longName	./qt/bitcoinunits.cpp	/^QString BitcoinUnits::longName(int unit)$/;"	f	class:BitcoinUnits
lookupAddress	./qt/addresstablemodel.cpp	/^int AddressTableModel::lookupAddress(const QString &address) const$/;"	f	class:AddressTableModel
lookupAddress	./qt/transactiontablemodel.cpp	/^QString TransactionTableModel::lookupAddress(const std::string &address, bool tooltip) const$/;"	f	class:TransactionTableModel
lower_bound	./indirectmap.h	/^    const_iterator lower_bound(const K& key) const  { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lower_bound	./indirectmap.h	/^    iterator lower_bound(const K& key)              { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lp	./test/setup_common.h	/^    LockPoints lp;$/;"	m	struct:TestMemPoolEntryHelper
lp	./txmempool.h	/^    const LockPoints& lp;$/;"	m	struct:update_lock_points
lru_	./leveldb/util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
m	./indirectmap.h	/^    base m;$/;"	m	class:indirectmap
m	./test/checkqueue_tests.cpp	/^    static std::mutex m;$/;"	m	struct:FrozenCleanupCheck	file:
m	./test/checkqueue_tests.cpp	/^    static std::mutex m;$/;"	m	struct:UniqueCheck	file:
m	./test/checkqueue_tests.cpp	/^std::mutex UniqueCheck::m;$/;"	m	class:UniqueCheck	file:
mBTC	./qt/bitcoinunits.h	/^        mBTC,$/;"	e	enum:BitcoinUnits::Unit
m_F	./blockfilter.h	/^    uint64_t m_F;  \/\/!< Range of element hashes, F = N * M$/;"	m	class:GCSFilter
m_M	./blockfilter.h	/^        uint32_t m_M;  \/\/!< Inverse false positive rate$/;"	m	struct:GCSFilter::Params
m_N	./blockfilter.h	/^    uint32_t m_N;  \/\/!< Number of elements in the filter$/;"	m	class:GCSFilter
m_N	./tinyformat.h	/^        int m_N;$/;"	m	class:tinyformat::FormatList
m_P	./blockfilter.h	/^        uint8_t m_P;  \/\/!< Golomb-Rice coding parameter$/;"	m	struct:GCSFilter::Params
m_activity_thread	./qt/walletcontroller.h	/^    QThread m_activity_thread;$/;"	m	class:WalletController
m_added_nodes	./net.h	/^        std::vector<std::string> m_added_nodes;$/;"	m	struct:CConnman::Options
m_amounts	./wallet/wallet.h	/^    mutable CachableAmount m_amounts[AMOUNTTYPE_ENUM_ELEMENTS];$/;"	m	class:CWalletTx
m_app	./qt/test/apptests.h	/^    BitcoinApplication& m_app;$/;"	m	class:AppTests
m_app_nap_inhibitor	./qt/bitcoingui.h	/^    CAppNapInhibitor* m_app_nap_inhibitor = nullptr;$/;"	m	class:BitcoinGUI
m_app_tests	./qt/test/apptests.h	/^        AppTests& m_app_tests;$/;"	m	struct:AppTests::HandleCallback
m_args	./rpc/util.h	/^    const std::vector<RPCArg> m_args;$/;"	m	class:RPCHelpMan
m_assumed_blockchain_size	./chainparams.h	/^    uint64_t m_assumed_blockchain_size;$/;"	m	class:CChainParams
m_assumed_chain_state_size	./chainparams.h	/^    uint64_t m_assumed_chain_state_size;$/;"	m	class:CChainParams
m_avoid_partial_spends	./wallet/coincontrol.h	/^    bool m_avoid_partial_spends;$/;"	m	class:CCoinControl
m_balances	./qt/overviewpage.h	/^    interfaces::WalletBalances m_balances;$/;"	m	class:OverviewPage
m_ban_db	./banman.h	/^    CBanDB m_ban_db;$/;"	m	class:BanMan
m_ban_list_path	./addrdb.h	/^    const fs::path m_ban_list_path;$/;"	m	class:CBanDB
m_banman	./net.h	/^        BanMan* m_banman = nullptr;$/;"	m	struct:CConnman::Options
m_banman	./net.h	/^    BanMan* m_banman;$/;"	m	class:CConnman
m_banman	./net_processing.h	/^    BanMan* const m_banman;$/;"	m	class:final
m_batch	./wallet/walletdb.h	/^    BerkeleyBatch m_batch;$/;"	m	class:WalletBatch
m_block_hash	./blockfilter.h	/^    uint256 m_block_hash;$/;"	m	class:BlockFilter
m_blockchain_size	./qt/intro.h	/^    uint64_t m_blockchain_size;$/;"	m	class:Intro
m_cached	./script/ismine.h	/^    std::bitset<ISMINE_ENUM_ELEMENTS> m_cached;$/;"	m	struct:CachableAmount
m_cached_balances	./qt/walletmodel.h	/^    interfaces::WalletBalances m_cached_balances;$/;"	m	class:WalletModel
m_callback	./qt/test/apptests.h	/^        std::string m_callback;$/;"	m	struct:AppTests::HandleCallback
m_callbacks	./qt/test/apptests.h	/^    std::multiset<std::string> m_callbacks;$/;"	m	class:AppTests
m_chain	./interfaces/chain.cpp	/^    Chain& m_chain;$/;"	m	class:interfaces::__anon129::NotificationsHandlerImpl	file:
m_chain	./interfaces/wallet.cpp	/^    Chain& m_chain;$/;"	m	class:interfaces::__anon130::WalletClientImpl	file:
m_chain	./validation.cpp	/^    CChain m_chain;$/;"	m	class:CChainState	file:
m_chain	./wallet/test/init_test_fixture.h	/^    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();$/;"	m	struct:InitWalletDirTestingSetup
m_chain	./wallet/test/wallet_test_fixture.h	/^    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();$/;"	m	struct:WalletTestingSetup
m_chain	./wallet/test/wallet_tests.cpp	/^    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();$/;"	m	class:ListCoinsTestingSetup	file:
m_chain	./wallet/wallet.h	/^    interfaces::Chain* m_chain;$/;"	m	class:final
m_chain_client	./wallet/test/init_test_fixture.h	/^    std::unique_ptr<interfaces::ChainClient> m_chain_client;$/;"	m	struct:InitWalletDirTestingSetup
m_chain_client	./wallet/test/wallet_test_fixture.h	/^    std::unique_ptr<interfaces::ChainClient> m_chain_client = interfaces::MakeWalletClient(*m_chain, {});$/;"	m	struct:WalletTestingSetup
m_chain_notifications_handler	./wallet/wallet.h	/^    std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;$/;"	m	class:final
m_chain_state_size	./qt/intro.h	/^    uint64_t m_chain_state_size;$/;"	m	class:Intro
m_chain_sync	./net_processing.cpp	/^    ChainSyncTimeoutState m_chain_sync;$/;"	m	struct:__anon89::CNodeState	file:
m_change_type	./wallet/coincontrol.h	/^    boost::optional<OutputType> m_change_type;$/;"	m	class:CCoinControl
m_chunk_size	./flatfile.h	/^    const size_t m_chunk_size;$/;"	m	class:FlatFileSeq
m_client_interface	./banman.h	/^    CClientUIInterface* m_client_interface = nullptr;$/;"	m	class:BanMan
m_coinbase_txns	./test/setup_common.h	/^    std::vector<CTransactionRef> m_coinbase_txns; \/\/ For convenience, coinbase transactions$/;"	m	struct:TestChain100Setup
m_command	./interfaces/chain.cpp	/^    CRPCCommand m_command;$/;"	m	class:interfaces::__anon129::RpcHandlerImpl	file:
m_cond	./rpc/util.h	/^    const std::string m_cond;$/;"	m	struct:RPCResult
m_confirm_target	./wallet/coincontrol.h	/^    boost::optional<unsigned int> m_confirm_target;$/;"	m	class:CCoinControl
m_connMainSignals	./validationinterface.cpp	/^    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;$/;"	m	struct:MainSignalsInstance	file:
m_connNotifyEntryRemoved	./validation.cpp	/^    boost::signals2::scoped_connection m_connNotifyEntryRemoved;$/;"	m	class:ConnectTrace	file:
m_connected_wallet_handlers	./qt/splashscreen.h	/^    std::list<std::unique_ptr<interfaces::Handler>> m_connected_wallet_handlers;$/;"	m	class:SplashScreen
m_connected_wallets	./qt/splashscreen.h	/^    std::list<std::unique_ptr<interfaces::Wallet>> m_connected_wallets;$/;"	m	class:SplashScreen
m_connection	./interfaces/handler.cpp	/^    boost::signals2::scoped_connection m_connection;$/;"	m	class:interfaces::__anon131::HandlerImpl	file:
m_could_reserve	./rpc/blockchain.cpp	/^    bool m_could_reserve;$/;"	m	class:CoinsViewScanReserver	file:
m_could_reserve	./wallet/wallet.h	/^    bool m_could_reserve;$/;"	m	class:WalletRescanReserver
m_cs_banned	./banman.h	/^    CCriticalSection m_cs_banned;$/;"	m	class:BanMan
m_cs_callbacks_pending	./scheduler.h	/^    CCriticalSection m_cs_callbacks_pending;$/;"	m	class:SingleThreadedSchedulerClient
m_cs_callbacks_pending	./scheduler.h	/^    bool m_are_callbacks_running GUARDED_BY(m_cs_callbacks_pending) = false;$/;"	m	class:SingleThreadedSchedulerClient
m_cs_chainstate	./validation.cpp	/^    CCriticalSection m_cs_chainstate;$/;"	m	class:CChainState	file:
m_cs_fee_estimator	./policy/fees.h	/^    mutable CCriticalSection m_cs_fee_estimator;$/;"	m	class:FeeEstimateHorizon::CBlockPolicyEstimator
m_cwd	./wallet/test/init_test_fixture.h	/^    fs::path m_cwd;$/;"	m	struct:InitWalletDirTestingSetup
m_data	./script/bitcoinconsensus.cpp	/^    const unsigned char* m_data;$/;"	m	class:__anon81::TxInputStream	file:
m_data	./span.h	/^    C* m_data;$/;"	m	class:Span
m_data	./streams.h	/^    const std::vector<unsigned char>& m_data;$/;"	m	class:VectorReader
m_database	./wallet/walletdb.h	/^    WalletDatabase& m_database;$/;"	m	class:WalletBatch
m_databases	./wallet/db.h	/^    std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;$/;"	m	class:BerkeleyEnvironment
m_datadir	./wallet/test/init_test_fixture.h	/^    fs::path m_datadir;$/;"	m	struct:InitWalletDirTestingSetup
m_db	./index/blockfilterindex.h	/^    std::unique_ptr<BaseIndex::DB> m_db;$/;"	m	class:final
m_db	./index/txindex.h	/^    const std::unique_ptr<DB> m_db;$/;"	m	class:final
m_db	./wallet/db.h	/^    std::unique_ptr<Db> m_db;$/;"	m	class:BerkeleyDatabase
m_db_in_use	./wallet/db.h	/^    std::condition_variable_any m_db_in_use;$/;"	m	class:BerkeleyEnvironment
m_dbt	./wallet/db.h	/^        Dbt m_dbt;$/;"	m	class:BerkeleyBatch::final
m_debug_only	./util/system.h	/^        bool m_debug_only;$/;"	m	struct:ArgsManager::Arg
m_default_ban_time	./banman.h	/^    const int64_t m_default_ban_time;$/;"	m	class:BanMan
m_derive	./script/descriptor.cpp	/^    DeriveType m_derive;$/;"	m	class:__anon75::final	file:
m_description	./rpc/util.h	/^    const std::string m_description;$/;"	m	class:RPCHelpMan
m_description	./rpc/util.h	/^    const std::string m_description;$/;"	m	struct:RPCArg
m_destination	./script/descriptor.cpp	/^    const CTxDestination m_destination;$/;"	m	class:__anon75::final	file:
m_dir	./flatfile.h	/^    const fs::path m_dir;$/;"	m	class:FlatFileSeq
m_elapsed_results	./bench/bench.h	/^    std::vector<double> m_elapsed_results;$/;"	m	class:benchmark::State
m_enable_bip61	./net_processing.h	/^    const bool m_enable_bip61;$/;"	m	class:final
m_encoded	./blockfilter.h	/^    std::vector<unsigned char> m_encoded;$/;"	m	class:GCSFilter
m_examples	./rpc/util.h	/^    const RPCExamples m_examples;$/;"	m	class:RPCHelpMan
m_examples	./rpc/util.h	/^    const std::string m_examples;$/;"	m	struct:RPCExamples
m_expected_tip	./test/validation_block_tests.cpp	/^    uint256 m_expected_tip;$/;"	m	struct:TestSubscriber	file:
m_extkey	./script/descriptor.cpp	/^    CExtPubKey m_extkey;$/;"	m	class:__anon75::final	file:
m_failed_blocks	./validation.cpp	/^    std::set<CBlockIndex*> m_failed_blocks;$/;"	m	class:CChainState	file:
m_fallback	./rpc/util.h	/^    const Fallback m_fallback;$/;"	m	struct:RPCArg
m_fallback_fee_enabled	./chainparams.h	/^    bool m_fallback_fee_enabled;$/;"	m	class:CChainParams
m_fee_mode	./wallet/coincontrol.h	/^    FeeEstimateMode m_fee_mode;$/;"	m	class:CCoinControl
m_feerate	./wallet/coincontrol.h	/^    boost::optional<CFeeRate> m_feerate;$/;"	m	class:CCoinControl
m_file	./fs.h	/^        FILE* m_file = nullptr;$/;"	m	class:fsbridge::ifstream
m_file	./fs.h	/^        FILE* m_file = nullptr;$/;"	m	class:fsbridge::ofstream
m_file	./util/system.h	/^    std::string m_file;$/;"	m	struct:SectionInfo
m_file_mutex	./logging.h	/^        std::mutex m_file_mutex;$/;"	m	class:BCLog::Logger
m_file_path	./logging.h	/^        fs::path m_file_path;$/;"	m	class:BCLog::Logger
m_filebuf	./fs.h	/^        __gnu_cxx::stdio_filebuf<char> m_filebuf;$/;"	m	class:fsbridge::ifstream
m_filebuf	./fs.h	/^        __gnu_cxx::stdio_filebuf<char> m_filebuf;$/;"	m	class:fsbridge::ofstream
m_fileids	./wallet/db.h	/^    std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;$/;"	m	class:BerkeleyEnvironment
m_fileout	./logging.h	/^        FILE* m_fileout = nullptr;$/;"	m	class:BCLog::Logger
m_filter	./blockfilter.h	/^    GCSFilter m_filter;$/;"	m	class:BlockFilter
m_filter_fileseq	./index/blockfilterindex.h	/^    std::unique_ptr<FlatFileSeq> m_filter_fileseq;$/;"	m	class:final
m_filter_type	./blockfilter.h	/^    BlockFilterType m_filter_type = BlockFilterType::INVALID;$/;"	m	class:BlockFilter
m_filter_type	./index/blockfilterindex.h	/^    BlockFilterType m_filter_type;$/;"	m	class:final
m_formatImpl	./tinyformat.h	/^        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,$/;"	m	class:tinyformat::detail::FormatArg
m_formatterStore	./tinyformat.h	/^        FormatArg m_formatterStore[N];$/;"	m	class:tinyformat::detail::FormatListN
m_formatters	./tinyformat.h	/^        const detail::FormatArg* m_formatters;$/;"	m	class:tinyformat::FormatList
m_handler_address_book_changed	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_address_book_changed;$/;"	m	class:WalletModel
m_handler_banned_list_changed	./qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_banned_list_changed;$/;"	m	class:ClientModel
m_handler_can_get_addrs_changed	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_can_get_addrs_changed;$/;"	m	class:WalletModel
m_handler_init_message	./qt/splashscreen.h	/^    std::unique_ptr<interfaces::Handler> m_handler_init_message;$/;"	m	class:SplashScreen
m_handler_load_wallet	./qt/splashscreen.h	/^    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;$/;"	m	class:SplashScreen
m_handler_load_wallet	./qt/walletcontroller.h	/^    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;$/;"	m	class:WalletController
m_handler_message_box	./qt/bitcoingui.h	/^    std::unique_ptr<interfaces::Handler> m_handler_message_box;$/;"	m	class:BitcoinGUI
m_handler_notify_alert_changed	./qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_alert_changed;$/;"	m	class:ClientModel
m_handler_notify_block_tip	./qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_block_tip;$/;"	m	class:ClientModel
m_handler_notify_header_tip	./qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_header_tip;$/;"	m	class:ClientModel
m_handler_notify_network_active_changed	./qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_network_active_changed;$/;"	m	class:ClientModel
m_handler_notify_num_connections_changed	./qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_notify_num_connections_changed;$/;"	m	class:ClientModel
m_handler_question	./qt/bitcoingui.h	/^    std::unique_ptr<interfaces::Handler> m_handler_question;$/;"	m	class:BitcoinGUI
m_handler_show_progress	./qt/clientmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:ClientModel
m_handler_show_progress	./qt/splashscreen.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:SplashScreen
m_handler_show_progress	./qt/transactiontablemodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:TransactionTableModel
m_handler_show_progress	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_show_progress;$/;"	m	class:WalletModel
m_handler_status_changed	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_status_changed;$/;"	m	class:WalletModel
m_handler_transaction_changed	./qt/transactiontablemodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_transaction_changed;$/;"	m	class:TransactionTableModel
m_handler_transaction_changed	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_transaction_changed;$/;"	m	class:WalletModel
m_handler_unload	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_unload;$/;"	m	class:WalletModel
m_handler_watch_only_changed	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Handler> m_handler_watch_only_changed;$/;"	m	class:WalletModel
m_height	./bench/bench.h	/^    int64_t m_height;$/;"	m	class:benchmark::PlotlyPrinter
m_help_param	./util/system.h	/^        std::string m_help_param;$/;"	m	struct:ArgsManager::Arg
m_help_text	./util/system.h	/^        std::string m_help_text;$/;"	m	struct:ArgsManager::Arg
m_hide_origin	./script/sign.h	/^    const bool m_hide_origin;$/;"	m	class:HidingSigningProvider
m_hide_secret	./script/sign.h	/^    const bool m_hide_secret;$/;"	m	class:HidingSigningProvider
m_inner	./rpc/util.h	/^    const std::vector<RPCArg> m_inner; \/\/!< Only used for arrays or dicts$/;"	m	struct:RPCArg
m_interfaces	./interfaces/node.cpp	/^    InitInterfaces m_interfaces;$/;"	m	class:interfaces::__anon128::NodeImpl	file:
m_internals	./validationinterface.h	/^    std::unique_ptr<MainSignalsInstance> m_internals;$/;"	m	class:CMainSignals
m_interrupt	./index/base.h	/^    CThreadInterrupt m_interrupt;$/;"	m	class:BaseIndex
m_is_inbound	./net_processing.cpp	/^    bool m_is_inbound;$/;"	m	struct:__anon89::CNodeState	file:
m_is_manual_connection	./net_processing.cpp	/^    bool m_is_manual_connection;$/;"	m	struct:__anon89::CNodeState	file:
m_istream	./streams.h	/^    IStream& m_istream;$/;"	m	class:BitStreamReader
m_it_wtxOrdered	./wallet/wallet.h	/^    std::multimap<int64_t, CWalletTx*>::const_iterator m_it_wtxOrdered;$/;"	m	class:CWalletTx
m_k0	./util/bytevectorhash.h	/^    uint64_t m_k0, m_k1;$/;"	m	class:final
m_k1	./util/bytevectorhash.h	/^    uint64_t m_k0, m_k1;$/;"	m	class:final
m_key	./interfaces/wallet.cpp	/^    CReserveKey m_key;$/;"	m	class:interfaces::__anon130::PendingWalletTxImpl	file:
m_last_block_announcement	./net_processing.cpp	/^    int64_t m_last_block_announcement;$/;"	m	struct:__anon89::CNodeState	file:
m_last_block_num_txs	./miner.h	/^    static Optional<int64_t> m_last_block_num_txs;$/;"	m	class:BlockAssembler
m_last_block_weight	./miner.h	/^    static Optional<int64_t> m_last_block_weight;$/;"	m	class:BlockAssembler
m_left	./rpc/util.cpp	/^    const std::string m_left;$/;"	m	struct:Section	file:
m_line	./util/system.h	/^    int m_line;$/;"	m	struct:SectionInfo
m_location	./wallet/wallet.h	/^    WalletLocation m_location;$/;"	m	class:final
m_log_threadnames	./logging.h	/^        bool m_log_threadnames = DEFAULT_LOGTHREADNAMES;$/;"	m	class:BCLog::Logger
m_log_time_micros	./logging.h	/^        bool m_log_time_micros = DEFAULT_LOGTIMEMICROS;$/;"	m	class:BCLog::Logger
m_log_timestamps	./logging.h	/^        bool m_log_timestamps = DEFAULT_LOGTIMESTAMPS;$/;"	m	class:BCLog::Logger
m_manual_connection	./net.h	/^    bool m_manual_connection;$/;"	m	class:CNodeStats
m_msgproc	./net.h	/^        NetEventsInterface* m_msgproc = nullptr;$/;"	m	struct:CConnman::Options
m_msgproc	./net.h	/^    NetEventsInterface* m_msgproc;$/;"	m	class:CConnman
m_msgs_before_open	./logging.h	/^        std::list<std::string> m_msgs_before_open;$/;"	m	class:BCLog::Logger
m_mutex	./qt/walletcontroller.h	/^    mutable QMutex m_mutex;$/;"	m	class:WalletController
m_mutex	./random.cpp	/^    Mutex m_mutex;$/;"	m	class:__anon61::RNGState	file:
m_mutex	./random.cpp	/^    bool m_strongly_seeded GUARDED_BY(m_mutex) = false;$/;"	m	class:__anon61::RNGState	file:
m_mutex	./random.cpp	/^    uint64_t m_counter GUARDED_BY(m_mutex) = 0;$/;"	m	class:__anon61::RNGState	file:
m_mutex	./random.cpp	/^    unsigned char m_state[32] GUARDED_BY(m_mutex) = {0};$/;"	m	class:__anon61::RNGState	file:
m_mutex_openssl	./random.cpp	/^    std::unique_ptr<Mutex[]> m_mutex_openssl;$/;"	m	class:__anon61::RNGState	file:
m_name	./bench/bench.h	/^    std::string m_name;$/;"	m	class:benchmark::State
m_name	./dbwrapper.h	/^    std::string m_name;$/;"	m	class:CDBWrapper
m_name	./index/blockfilterindex.h	/^    std::string m_name;$/;"	m	class:final
m_name	./qt/walletcontroller.h	/^    std::string const m_name;$/;"	m	class:OpenWalletActivity::std
m_name	./rpc/util.h	/^    const std::string m_name; \/\/!< The name of the arg (can be empty for inner args)$/;"	m	struct:RPCArg
m_name	./rpc/util.h	/^    const std::string m_name;$/;"	m	class:RPCHelpMan
m_name	./script/descriptor.cpp	/^    const std::string m_name;$/;"	m	class:__anon75::DescriptorImpl	file:
m_name	./util/system.h	/^    std::string m_name;$/;"	m	struct:SectionInfo
m_name	./wallet/walletutil.h	/^    std::string m_name;$/;"	m	class:final
m_network_style	./qt/bitcoingui.cpp	/^    m_network_style(networkStyle)$/;"	f
m_network_style	./qt/bitcoingui.h	/^    const NetworkStyle* const m_network_style;$/;"	m	class:BitcoinGUI
m_next_filter_pos	./index/blockfilterindex.h	/^    FlatFilePos m_next_filter_pos;$/;"	m	class:final
m_node	./qt/bantablemodel.h	/^    interfaces::Node& m_node;$/;"	m	class:BanTableModel
m_node	./qt/bitcoin.h	/^    interfaces::Node& m_node;$/;"	m	class:BitcoinApplication
m_node	./qt/bitcoin.h	/^    interfaces::Node& m_node;$/;"	m	class:BitcoinCore
m_node	./qt/bitcoingui.h	/^    interfaces::Node& m_node;$/;"	m	class:BitcoinGUI
m_node	./qt/clientmodel.h	/^    interfaces::Node& m_node;$/;"	m	class:ClientModel
m_node	./qt/optionsmodel.h	/^    interfaces::Node& m_node;$/;"	m	class:OptionsModel
m_node	./qt/peertablemodel.h	/^    interfaces::Node& m_node;$/;"	m	class:PeerTableModel
m_node	./qt/rpcconsole.cpp	/^    interfaces::Node& m_node;$/;"	m	class:RPCExecutor	file:
m_node	./qt/rpcconsole.h	/^    interfaces::Node& m_node;$/;"	m	class:RPCConsole
m_node	./qt/splashscreen.h	/^    interfaces::Node& m_node;$/;"	m	class:SplashScreen
m_node	./qt/walletcontroller.h	/^    interfaces::Node& m_node;$/;"	m	class:WalletController
m_node	./qt/walletmodel.h	/^    interfaces::Node& m_node;$/;"	m	class:WalletModel
m_notifications	./interfaces/chain.cpp	/^    Chain::Notifications* m_notifications;$/;"	m	class:interfaces::__anon129::NotificationsHandlerImpl	file:
m_num_evals	./bench/bench.h	/^    const uint64_t m_num_evals;$/;"	m	class:benchmark::State
m_num_iters	./bench/bench.h	/^    const uint64_t m_num_iters;$/;"	m	class:benchmark::State
m_num_iters_left	./bench/bench.h	/^    uint64_t m_num_iters_left;$/;"	m	class:benchmark::State
m_oneline_description	./rpc/util.h	/^    const std::string m_oneline_description; \/\/!< Should be empty unless it is supposed to override the auto-generated summary line$/;"	m	struct:RPCArg
m_options_model	./qt/walletcontroller.h	/^    OptionsModel* const m_options_model;$/;"	m	class:WalletController
m_origin	./script/descriptor.cpp	/^    KeyOriginInfo m_origin;$/;"	m	class:__anon75::final	file:
m_ostream	./streams.h	/^    OStream& m_ostream;$/;"	m	class:BitStreamWriter
m_outputs	./wallet/coinselection.h	/^    std::vector<CInputCoin> m_outputs;$/;"	m	struct:OutputGroup
m_params	./blockfilter.h	/^    Params m_params;$/;"	m	class:GCSFilter
m_params	./key_io.cpp	/^    const CChainParams& m_params;$/;"	m	class:__anon54::DestinationEncoder	file:
m_path	./script/descriptor.cpp	/^    KeyPath m_path;$/;"	m	class:__anon75::final	file:
m_path	./wallet/walletutil.h	/^    fs::path m_path;$/;"	m	class:final
m_path_root	./test/setup_common.h	/^    const fs::path m_path_root;$/;"	m	struct:BasicTestingSetup
m_peer_connect_timeout	./net.h	/^        int64_t m_peer_connect_timeout = DEFAULT_PEER_CONNECT_TIMEOUT;$/;"	m	struct:CConnman::Options
m_peer_connect_timeout	./net.h	/^    int64_t m_peer_connect_timeout;$/;"	m	class:CConnman
m_platform_style	./qt/walletcontroller.h	/^    const PlatformStyle* const m_platform_style;$/;"	m	class:WalletController
m_plotly_url	./bench/bench.h	/^    std::string m_plotly_url;$/;"	m	class:benchmark::PlotlyPrinter
m_pool_key_to_index	./wallet/wallet.h	/^    std::map<CKeyID, int64_t> m_pool_key_to_index;$/;"	m	class:final
m_pos	./streams.h	/^    size_t m_pos = 0;$/;"	m	class:VectorReader
m_pre_split	./wallet/wallet.h	/^    bool m_pre_split;$/;"	m	class:CKeyPool
m_prefix	./flatfile.h	/^    const char* const m_prefix;$/;"	m	class:FlatFileSeq
m_print_to_console	./logging.h	/^        bool m_print_to_console = false;$/;"	m	class:BCLog::Logger
m_print_to_file	./logging.h	/^        bool m_print_to_file = false;$/;"	m	class:BCLog::Logger
m_prk	./crypto/hkdf_sha256_32.h	/^    unsigned char m_prk[32];$/;"	m	class:CHKDF_HMAC_SHA256_L32
m_protect	./net_processing.cpp	/^        bool m_protect;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_provider	./script/descriptor.cpp	/^    std::unique_ptr<PubkeyProvider> m_provider;$/;"	m	class:__anon75::final	file:
m_provider	./script/sign.h	/^    const SigningProvider* m_provider;$/;"	m	class:HidingSigningProvider
m_pscheduler	./scheduler.h	/^    CScheduler *m_pscheduler;$/;"	m	class:SingleThreadedSchedulerClient
m_pubkey	./script/descriptor.cpp	/^    CPubKey m_pubkey;$/;"	m	class:__anon75::final	file:
m_pubkey_args	./script/descriptor.cpp	/^    const std::vector<std::unique_ptr<PubkeyProvider>> m_pubkey_args;$/;"	m	class:__anon75::DescriptorImpl	file:
m_r_len	./script/sign.cpp	/^    char m_r_len = 32;$/;"	m	class:__anon83::final	file:
m_reason	./consensus/validation.h	/^    ValidationInvalidReason m_reason;$/;"	m	class:CValidationState
m_reason	./test/miner_tests.cpp	/^    const std::string m_reason;$/;"	m	class:HasReason	file:
m_remaining	./script/bitcoinconsensus.cpp	/^    size_t m_remaining;$/;"	m	class:__anon81::TxInputStream	file:
m_result	./rpc/util.h	/^    const std::string m_result;$/;"	m	struct:RPCResult
m_results	./rpc/util.h	/^    const RPCResults m_results;$/;"	m	class:RPCHelpMan
m_results	./rpc/util.h	/^    const std::vector<RPCResult> m_results;$/;"	m	struct:RPCResults
m_right	./rpc/util.cpp	/^    const std::string m_right;$/;"	m	struct:Section	file:
m_rpc_handlers	./interfaces/wallet.cpp	/^    std::vector<std::unique_ptr<Handler>> m_rpc_handlers;$/;"	m	class:interfaces::__anon130::WalletClientImpl	file:
m_s_len	./script/sign.cpp	/^    char m_s_len = 32;$/;"	m	class:__anon83::final	file:
m_schedulerClient	./validationinterface.cpp	/^    SingleThreadedSchedulerClient m_schedulerClient;$/;"	m	struct:MainSignalsInstance	file:
m_script	./script/descriptor.cpp	/^    const CScript m_script;$/;"	m	class:__anon75::final	file:
m_script_arg	./script/descriptor.cpp	/^    const std::unique_ptr<DescriptorImpl> m_script_arg;$/;"	m	class:__anon75::DescriptorImpl	file:
m_search_string	./qt/transactionfilterproxy.h	/^    QString m_search_string;$/;"	m	class:TransactionFilterProxy
m_sections	./rpc/util.cpp	/^    std::vector<Section> m_sections;$/;"	m	struct:Sections	file:
m_sent_getheaders	./net_processing.cpp	/^        bool m_sent_getheaders;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_signal_bip125_rbf	./wallet/coincontrol.h	/^    boost::optional<bool> m_signal_bip125_rbf;$/;"	m	class:CCoinControl
m_siphash_k0	./blockfilter.h	/^        uint64_t m_siphash_k0;$/;"	m	struct:GCSFilter::Params
m_siphash_k1	./blockfilter.h	/^        uint64_t m_siphash_k1;$/;"	m	struct:GCSFilter::Params
m_size	./span.h	/^    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}$/;"	f	class:Span
m_size	./span.h	/^    std::ptrdiff_t m_size;$/;"	m	class:Span
m_specified_outgoing	./net.h	/^        std::vector<std::string> m_specified_outgoing;$/;"	m	struct:CConnman::Options
m_stale_tip_check_time	./net_processing.h	/^    int64_t m_stale_tip_check_time; \/\/!< Next time to check for stale tip$/;"	m	class:final
m_start_time	./bench/bench.h	/^    time_point m_start_time;$/;"	m	class:benchmark::State
m_thread_name	./sync.cpp	/^    const std::string& m_thread_name;$/;"	m	struct:CLockLocation	file:
m_thread_sync	./index/base.h	/^    std::thread m_thread_sync;$/;"	m	class:BaseIndex
m_threshold	./script/descriptor.cpp	/^    const int m_threshold;$/;"	m	class:__anon75::final	file:
m_timeout	./net_processing.cpp	/^        int64_t m_timeout;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_toIntImpl	./tinyformat.h	/^        int (*m_toIntImpl)(const void* value);$/;"	m	class:tinyformat::detail::FormatArg
m_tried_collisions	./addrman.h	/^    std::set<int> m_tried_collisions;$/;"	m	class:CAddrMan
m_try_another_outbound_peer	./net.h	/^    std::atomic_bool m_try_another_outbound_peer;$/;"	m	class:CConnman
m_tx	./interfaces/wallet.cpp	/^    CTransactionRef m_tx;$/;"	m	class:interfaces::__anon130::PendingWalletTxImpl	file:
m_tx_announced	./net_processing.cpp	/^        std::set<uint256> m_tx_announced;$/;"	m	struct:__anon89::CNodeState::TxDownloadState	file:
m_tx_download	./net_processing.cpp	/^    TxDownloadState m_tx_download;$/;"	m	struct:__anon89::CNodeState	file:
m_tx_in_flight	./net_processing.cpp	/^        std::set<uint256> m_tx_in_flight;$/;"	m	struct:__anon89::CNodeState::TxDownloadState	file:
m_tx_out	./validation.h	/^    CTxOut m_tx_out;$/;"	m	class:CScriptCheck
m_tx_process_time	./net_processing.cpp	/^        std::multimap<int64_t, uint256> m_tx_process_time;$/;"	m	struct:__anon89::CNodeState::TxDownloadState	file:
m_type	./qt/addressbookpage.cpp	/^    const QString m_type;$/;"	m	class:final	file:
m_type	./rpc/util.h	/^    const Type m_type;$/;"	m	struct:RPCArg
m_type	./script/bitcoinconsensus.cpp	/^    const int m_type;$/;"	m	class:__anon81::TxInputStream	file:
m_type	./streams.h	/^    const int m_type;$/;"	m	class:VectorReader
m_type_str	./rpc/util.h	/^    const std::vector<std::string> m_type_str; \/\/!< Should be empty unless it is supposed to override the auto-generated type strings. Vector length is either 0 or 2, m_type_str.at(0) will override the type of the value in a key-value pair, m_type_str.at(1) will override the type in the argument description.$/;"	m	struct:RPCArg
m_use_addrman_outgoing	./net.h	/^        bool m_use_addrman_outgoing = true;$/;"	m	struct:CConnman::Options
m_use_addrman_outgoing	./net.h	/^    bool m_use_addrman_outgoing;$/;"	m	class:CConnman
m_val	./serialize.h	/^    I& m_val;$/;"	m	class:BigEndian
m_value	./script/ismine.h	/^    CAmount m_value[ISMINE_ENUM_ELEMENTS];$/;"	m	struct:CachableAmount
m_value	./script/script.h	/^    int64_t m_value;$/;"	m	class:CScriptNum
m_value	./test/scriptnum10.h	/^    int64_t m_value;$/;"	m	class:CScriptNum10
m_value	./tinyformat.h	/^        const void* m_value;$/;"	m	class:tinyformat::detail::FormatArg
m_version	./script/bitcoinconsensus.cpp	/^    const int m_version;$/;"	m	class:__anon81::TxInputStream	file:
m_version	./streams.h	/^    const int m_version;$/;"	m	class:VectorReader
m_wallet	./interfaces/wallet.cpp	/^    CWallet& m_wallet;$/;"	m	class:interfaces::__anon130::PendingWalletTxImpl	file:
m_wallet	./interfaces/wallet.cpp	/^    std::shared_ptr<CWallet> m_wallet;$/;"	m	class:interfaces::__anon130::WalletImpl	file:
m_wallet	./qt/walletmodel.h	/^    std::unique_ptr<interfaces::Wallet> m_wallet;$/;"	m	class:WalletModel
m_wallet	./wallet/test/wallet_test_fixture.h	/^    CWallet m_wallet;$/;"	m	struct:WalletTestingSetup
m_wallet	./wallet/wallet.h	/^    CWallet* m_wallet;$/;"	m	class:WalletRescanReserver
m_wallet_controller	./qt/walletcontroller.h	/^    WalletController* const m_wallet_controller;$/;"	m	class:OpenWalletActivity
m_wallet_filenames	./interfaces/wallet.cpp	/^    std::vector<std::string> m_wallet_filenames;$/;"	m	class:interfaces::__anon130::WalletClientImpl	file:
m_wallet_selector	./qt/bitcoingui.h	/^    QComboBox* m_wallet_selector = nullptr;$/;"	m	class:BitcoinGUI
m_wallet_selector_action	./qt/bitcoingui.h	/^    QAction* m_wallet_selector_action = nullptr;$/;"	m	class:BitcoinGUI
m_wallet_selector_label	./qt/bitcoingui.h	/^    QLabel *m_wallet_selector_label = nullptr;$/;"	m	class:BitcoinGUI
m_wallet_selector_label_action	./qt/bitcoingui.h	/^    QAction* m_wallet_selector_label_action = nullptr;$/;"	m	class:BitcoinGUI
m_walletdir_path_cases	./wallet/test/init_test_fixture.h	/^    std::map<std::string, fs::path> m_walletdir_path_cases;$/;"	m	struct:InitWalletDirTestingSetup
m_wallets	./qt/walletcontroller.h	/^    std::vector<WalletModel*> m_wallets;$/;"	m	class:WalletController
m_width	./bench/bench.h	/^    int64_t m_width;$/;"	m	class:benchmark::PlotlyPrinter
m_witness_hash	./primitives/transaction.h	/^    const uint256 m_witness_hash;$/;"	m	class:CTransaction
m_work_header	./net_processing.cpp	/^        const CBlockIndex * m_work_header;$/;"	m	struct:__anon89::CNodeState::ChainSyncTimeoutState	file:
m_wrapped_command	./interfaces/chain.cpp	/^    const CRPCCommand* m_wrapped_command;$/;"	m	class:interfaces::__anon129::RpcHandlerImpl	file:
m_x	./reverse_iterator.h	/^    T &m_x;$/;"	m	class:reverse_range
macosDockIconActivated	./qt/bitcoingui.cpp	/^void BitcoinGUI::macosDockIconActivated()$/;"	f	class:BitcoinGUI
magnitude	./secp256k1/src/field_10x26.h	/^    int magnitude;$/;"	m	struct:__anon94
magnitude	./secp256k1/src/field_5x52.h	/^    int magnitude;$/;"	m	struct:__anon96
main	./bench/bench_bitcoin.cpp	/^int main(int argc, char** argv)$/;"	f
main	./bitcoin-cli.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./bitcoin-tx.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./bitcoin-wallet.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./bitcoind.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./crypto/ctaes/bench.c	/^int main(void) {$/;"	f
main	./crypto/ctaes/test.c	/^int main(void) {$/;"	f
main	./leveldb/db/autocompact_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/corruption_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/fault_injection_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/leveldbutil.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/recovery_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/version_set_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/doc/bench/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/doc/bench/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/issues/issue178_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/issues/issue200_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/table/filter_block_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/bloom_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/env_posix_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./leveldb/util/hash_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./qt/main.cpp	/^int main(int argc, char* argv[]) { return GuiMain(argc, argv); }$/;"	f
main	./qt/test/test_main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	./secp256k1/build-aux/config.guess	/^		main()$/;"	f
main	./secp256k1/build-aux/config.guess	/^	main ()$/;"	f
main	./secp256k1/src/bench_ecdh.c	/^int main(void) {$/;"	f
main	./secp256k1/src/bench_internal.c	/^int main(int argc, char **argv) {$/;"	f
main	./secp256k1/src/bench_recover.c	/^int main(void) {$/;"	f
main	./secp256k1/src/bench_sign.c	/^int main(void) {$/;"	f
main	./secp256k1/src/bench_verify.c	/^int main(void) {$/;"	f
main	./secp256k1/src/gen_context.c	/^int main(int argc, char **argv) {$/;"	f
main	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void main(String[] args) throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
main	./secp256k1/src/tests.c	/^int main(int argc, char **argv) {$/;"	f
main	./secp256k1/src/tests_exhaustive.c	/^int main(void) {$/;"	f
main	./test/fuzz/fuzz.cpp	/^int main(int argc, char **argv)$/;"	f
main	./univalue/build-aux/config.guess	/^		main()$/;"	f
main	./univalue/build-aux/config.guess	/^	main ()$/;"	f
main	./univalue/gen/gen.cpp	/^int main (int argc, char *argv[])$/;"	f
main	./univalue/test/no_nul.cpp	/^int main (int argc, char *argv[])$/;"	f
main	./univalue/test/object.cpp	/^int main (int argc, char *argv[])$/;"	f
main	./univalue/test/test_json.cpp	/^int main (int argc, char *argv[])$/;"	f
main	./univalue/test/unitester.cpp	/^int main (int argc, char *argv[])$/;"	f
makeFormatList	./tinyformat.h	/^detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)$/;"	f	namespace:tinyformat
make_dummy_depfile	./secp256k1/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_dummy_depfile	./univalue/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_hard_case	./bench/coin_selection.cpp	/^static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)$/;"	f	file:
make_hard_case	./wallet/test/coinselector_tests.cpp	/^static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)$/;"	f	file:
make_tx	./test/mempool_tests.cpp	/^inline CTransactionRef make_tx(std::vector<CAmount>&& output_values, std::vector<CTransactionRef>&& inputs=std::vector<CTransactionRef>(), std::vector<uint32_t>&& input_indices=std::vector<uint32_t>())$/;"	f
mandir	./Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	./secp256k1/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	./univalue/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
manifest_file_number_	./leveldb/db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifest_sync_error_	./leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifest_write_error_	./leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_write_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifests_	./leveldb/db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon30::Repairer	file:
manual_compaction_	./leveldb/db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
map	./limitedmap.h	/^    std::map<K, V> map;$/;"	m	class:limitedmap
map	./test/coins_tests.cpp	/^    CCoinsMap& map() const { return cacheCoins; }$/;"	f	class:__anon60::CCoinsViewCacheTest
mapBase58	./base58.cpp	/^static const int8_t mapBase58[256] = {$/;"	v	file:
mapBlockIndex	./validation.cpp	/^BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;$/;"	v
mapBlocksUnlinked	./validation.cpp	/^    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;$/;"	m	class:CChainState	file:
mapBlocksUnlinked	./validation.cpp	/^    std::multimap<CBlockIndex*, CBlockIndex*>& mapBlocksUnlinked = g_chainstate.mapBlocksUnlinked;$/;"	m	namespace:__anon50	file:
mapCheckpoints	./chainparams.h	/^    MapCheckpoints mapCheckpoints;$/;"	m	struct:CCheckpointData
mapCommands	./rpc/server.h	/^    std::map<std::string, std::vector<const CRPCCommand*>> mapCommands;$/;"	m	class:CRPCTable
mapDeltas	./txmempool.h	/^    std::map<uint256, CAmount> mapDeltas;$/;"	m	class:CTxMemPool
mapFileUseCount	./wallet/db.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:BerkeleyEnvironment
mapFlagNames	./test/transaction_tests.cpp	/^static std::map<std::string, unsigned int> mapFlagNames = {$/;"	v	file:
mapLinks	./txmempool.h	/^    txlinksMap mapLinks;$/;"	m	class:CTxMemPool
mapMasterKeys	./wallet/wallet.h	/^    MasterKeyMap mapMasterKeys;$/;"	m	class:final
mapMsgCmdSize	./net.h	/^typedef std::map<std::string, uint64_t> mapMsgCmdSize; \/\/command, total bytes$/;"	t
mapNodeRows	./qt/peertablemodel.cpp	/^    std::map<NodeId, int> mapNodeRows;$/;"	m	class:PeerTablePriv	file:
mapPublishNotifiers	./zmq/zmqpublishnotifier.cpp	/^static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;$/;"	v	file:
mapRecvBytesPerMsgCmd	./net.h	/^    mapMsgCmdSize mapRecvBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapSendBytesPerMsgCmd	./net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNode
mapSendBytesPerMsgCmd	./net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapSigHashTypes	./core_write.cpp	/^const std::map<unsigned char, std::string> mapSigHashTypes = {$/;"	v
mapValue	./wallet/wallet.h	/^    mapValue_t mapValue;$/;"	m	class:CWalletTx
mapValue_t	./wallet/wallet.h	/^typedef std::map<std::string, std::string> mapValue_t;$/;"	t
mapWalletViews	./qt/walletframe.h	/^    QMap<WalletModel*, WalletView*> mapWalletViews;$/;"	m	class:WalletFrame
map_	./leveldb/db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot	file:
map_	./leveldb/db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	./leveldb/db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
map_	./test/coins_tests.cpp	/^    std::map<COutPoint, Coin> map_;$/;"	m	class:__anon60::CCoinsViewTest	file:
map_type	./script/sigcache.cpp	/^    typedef CuckooCache::cache<uint256, SignatureCacheHasher> map_type;$/;"	t	class:__anon84::CSignatureCache	file:
mapped_type	./limitedmap.h	/^    typedef V mapped_type;$/;"	t	class:limitedmap
mapper	./qt/editaddressdialog.h	/^    QDataWidgetMapper *mapper;$/;"	m	class:EditAddressDialog
mapper	./qt/optionsdialog.h	/^    QDataWidgetMapper *mapper;$/;"	m	class:OptionsDialog
mapperThirdPartyTxUrls	./qt/transactionview.h	/^    QSignalMapper *mapperThirdPartyTxUrls;$/;"	m	class:TransactionView
markValid	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::markValid()$/;"	f	class:QValidatedLineEdit
matures_in	./qt/transactionrecord.h	/^    int matures_in;$/;"	m	class:TransactionStatus
max	./leveldb/util/env_win.cc	/^#undef max$/;"	d	file:
max	./random.h	/^    static constexpr uint64_t max() { return std::numeric_limits<uint64_t>::max(); }$/;"	f	class:FastRandomContext
maxDepth	./httpserver.cpp	/^    size_t maxDepth;$/;"	m	class:WorkQueue	file:
maxInputBlock	./txmempool.h	/^    CBlockIndex* maxInputBlock;$/;"	m	struct:LockPoints
maxMoney	./qt/bitcoinunits.cpp	/^CAmount BitcoinUnits::maxMoney()$/;"	f	class:BitcoinUnits
max_	./leveldb/util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_ancestors	./wallet/coinselection.h	/^    const uint64_t max_ancestors;$/;"	m	struct:CoinEligibilityFilter
max_char	./test/util.h	/^void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {$/;"	v
max_descendants	./wallet/coinselection.h	/^    const uint64_t max_descendants;$/;"	m	struct:CoinEligibilityFilter
max_file_size	./leveldb/include/leveldb/options.h	/^  size_t max_file_size;$/;"	m	struct:leveldb::Options
max_filter_index_cache	./txdb.h	/^static const int64_t max_filter_index_cache = 1024;$/;"	v
max_height_	./leveldb/db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	./leveldb/include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	./leveldb/db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	./leveldb/db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon30::Repairer::TableInfo	file:
max_size	./indirectmap.h	/^    size_type max_size() const      { return m.max_size(); }$/;"	f	class:indirectmap
max_size	./limitedmap.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:limitedmap
max_size	./limitedmap.h	/^    size_type max_size(size_type s)$/;"	f	class:limitedmap
median	./timedata.h	/^    T median() const$/;"	f	class:CMedianFilter
mem	./cuckoocache.h	/^    std::unique_ptr<std::atomic<uint8_t>[]> mem;$/;"	m	class:CuckooCache::bit_packed_atomic_flags
mem	./leveldb/db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon18::IterState	file:
mem_	./leveldb/db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	./leveldb/db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon22::MemTableInserter	file:
members	./rpc/client.cpp	/^    std::set<std::pair<std::string, int>> members;$/;"	m	class:CRPCConvertTable	file:
membersByName	./rpc/client.cpp	/^    std::set<std::pair<std::string, std::string>> membersByName;$/;"	m	class:CRPCConvertTable	file:
memcpy	./compat/glibc_compat.cpp	/^extern "C" void* memcpy(void* a, const void* b, size_t c)$/;"	f
memcpy_int	./compat/glibc_sanity.cpp	/^void* memcpy_int(void* a, const void* b, size_t c)$/;"	f
memory_cleanse	./support/cleanse.cpp	/^void memory_cleanse(void *ptr, size_t len)$/;"	f
memory_usage_	./leveldb/util/arena.h	/^  port::AtomicPointer memory_usage_;$/;"	m	class:leveldb::Arena
mempool	./txmempool.h	/^    const CTxMemPool& mempool;$/;"	m	class:CCoinsViewMemPool
mempool_count	./blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
mempoolentry_txid	./txmempool.h	/^struct mempoolentry_txid$/;"	s
memtable_	./leveldb/table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
memtable_key	./leveldb/db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
memusage	./memusage.h	/^namespace memusage$/;"	n
menu	./qt/bitcoingui.h	/^    QMenu* menu;$/;"	m	class:UnitDisplayStatusBarControl
message	./qt/bitcoingui.cpp	/^void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)$/;"	f	class:BitcoinGUI
message	./qt/rpcconsole.cpp	/^void RPCConsole::message(int category, const QString &message, bool html)$/;"	f	class:RPCConsole
message	./qt/rpcconsole.h	/^    void message(int category, const QString &msg) { message(category, msg, false); }$/;"	f	class:RPCConsole
message	./qt/walletmodel.h	/^    QString message;$/;"	m	class:SendCoinsRecipient
message	./torcontrol.cpp	/^    TorControlReply message;$/;"	m	class:TorControlConnection	file:
message_	./leveldb/db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon19::Stats	file:
message_	./leveldb/db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
message_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
meta	./leveldb/db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon30::Repairer::TableInfo	file:
metaType	./qt/notificator.cpp	/^int FreedesktopImage::metaType()$/;"	f	class:FreedesktopImage
metaindex_handle	./leveldb/table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	./leveldb/table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	./leveldb/table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	./leveldb/db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
method	./rpc/server.cpp	/^    std::string method;$/;"	m	struct:RPCCommandExecutionInfo	file:
methodName	./rpc/client.cpp	/^    std::string methodName; \/\/!< method whose params want conversion$/;"	m	class:CRPCConvertParam	file:
microTask	./test/scheduler_tests.cpp	/^static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, boost::chrono::system_clock::time_point rescheduleTime)$/;"	f	file:
micros	./leveldb/db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
min	./random.h	/^    static constexpr uint64_t min() { return 0; }$/;"	f	class:FastRandomContext
minAmount	./qt/transactionfilterproxy.h	/^    CAmount minAmount;$/;"	m	class:TransactionFilterProxy
minFeeFilter	./net.h	/^    CAmount minFeeFilter;$/;"	m	class:CNodeStats
minRelayTxFee	./validation.cpp	/^CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);$/;"	v
min_	./leveldb/util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
min_char	./test/util.h	/^bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)$/;"	v
min_char	./test/util.h	/^void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {$/;"	v
minerPolicyEstimator	./txmempool.h	/^    CBlockPolicyEstimator* minerPolicyEstimator;$/;"	m	class:CTxMemPool
minimizeFeeSection	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::minimizeFeeSection(bool fMinimize)$/;"	f	class:SendCoinsDialog
minimumSizeHint	./qt/bitcoinamountfield.cpp	/^    QSize minimumSizeHint() const$/;"	f	class:AmountSpinBox
misc_pubkeys	./script/sign.h	/^    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;$/;"	m	struct:SignatureData
missing_pubkeys	./node/psbt.h	/^    std::vector<CKeyID> missing_pubkeys; \/\/!< Pubkeys whose BIP32 derivation path is missing$/;"	m	struct:PSBTInputAnalysis
missing_pubkeys	./script/sign.h	/^    std::vector<CKeyID> missing_pubkeys; \/\/\/< KeyIDs of pubkeys which could not be found$/;"	m	struct:SignatureData
missing_redeem_script	./node/psbt.h	/^    uint160 missing_redeem_script;       \/\/!< Hash160 of redeem script, if missing$/;"	m	struct:PSBTInputAnalysis
missing_redeem_script	./script/sign.h	/^    uint160 missing_redeem_script; \/\/\/< ScriptID of the missing redeemScript (if any)$/;"	m	struct:SignatureData
missing_sigs	./node/psbt.h	/^    std::vector<CKeyID> missing_sigs;    \/\/!< Pubkeys whose signatures are missing$/;"	m	struct:PSBTInputAnalysis
missing_sigs	./script/sign.h	/^    std::vector<CKeyID> missing_sigs; \/\/\/< KeyIDs of pubkeys for signatures which could not be found$/;"	m	struct:SignatureData
missing_witness_script	./node/psbt.h	/^    uint256 missing_witness_script;      \/\/!< SHA256 of witness script, if missing$/;"	m	struct:PSBTInputAnalysis
missing_witness_script	./script/sign.h	/^    uint256 missing_witness_script; \/\/\/< SHA256 of the missing witnessScript (if any)$/;"	m	struct:SignatureData
mkdir_p	./Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	./secp256k1/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	./univalue/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	./Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	./secp256k1/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	./univalue/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmap_limit	./leveldb/util/env_posix.cc	/^static int mmap_limit = -1;$/;"	m	namespace:leveldb::__anon8	file:
mmap_limit_	./leveldb/util/env_posix.cc	/^  Limiter mmap_limit_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
mmapped_region_	./leveldb/util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon8::PosixMmapReadableFile	file:
modalOverlay	./qt/bitcoingui.h	/^    ModalOverlay* modalOverlay = nullptr;$/;"	m	class:BitcoinGUI
mode	./consensus/validation.h	/^    } mode;$/;"	m	class:CValidationState	typeref:enum:CValidationState::mode_state
mode	./qt/addressbookpage.h	/^    Mode mode;$/;"	m	class:AddressBookPage
mode	./qt/askpassphrasedialog.h	/^    Mode mode;$/;"	m	class:AskPassphraseDialog
mode	./qt/editaddressdialog.h	/^    Mode mode;$/;"	m	class:EditAddressDialog
mode	./qt/notificator.h	/^    Mode mode;$/;"	m	class:Notificator
mode_state	./consensus/validation.h	/^    enum mode_state {$/;"	g	class:CValidationState
model	./qt/addressbookpage.h	/^    AddressTableModel *model;$/;"	m	class:AddressBookPage
model	./qt/askpassphrasedialog.h	/^    WalletModel *model;$/;"	m	class:AskPassphraseDialog
model	./qt/coincontroldialog.h	/^    WalletModel *model;$/;"	m	class:CoinControlDialog
model	./qt/csvmodelwriter.h	/^    const QAbstractItemModel *model;$/;"	m	class:CSVModelWriter
model	./qt/editaddressdialog.h	/^    AddressTableModel *model;$/;"	m	class:EditAddressDialog
model	./qt/optionsdialog.h	/^    OptionsModel *model;$/;"	m	class:OptionsDialog
model	./qt/receivecoinsdialog.h	/^    WalletModel *model;$/;"	m	class:ReceiveCoinsDialog
model	./qt/receiverequestdialog.h	/^    WalletModel *model;$/;"	m	class:ReceiveRequestDialog
model	./qt/sendcoinsdialog.h	/^    WalletModel *model;$/;"	m	class:SendCoinsDialog
model	./qt/sendcoinsentry.h	/^    WalletModel *model;$/;"	m	class:SendCoinsEntry
model	./qt/signverifymessagedialog.h	/^    WalletModel *model;$/;"	m	class:SignVerifyMessageDialog
model	./qt/transactionview.h	/^    WalletModel *model;$/;"	m	class:TransactionView
modifiedentry_iter	./miner.h	/^struct modifiedentry_iter {$/;"	s
modifyCount	./txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_ancestor_state
modifyCount	./txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_descendant_state
modifyFee	./txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_ancestor_state
modifyFee	./txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_descendant_state
modifySigOpsCost	./txmempool.h	/^        int64_t modifySigOpsCost;$/;"	m	struct:update_ancestor_state
modifySize	./txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_ancestor_state
modifySize	./txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_descendant_state
modtxiter	./miner.h	/^typedef indexed_modified_transaction_set::nth_index<0>::type::iterator modtxiter;$/;"	t
modtxscoreiter	./miner.h	/^typedef indexed_modified_transaction_set::index<ancestor_score>::type::iterator modtxscoreiter;$/;"	t
mousePressEvent	./qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)$/;"	f	class:UnitDisplayStatusBarControl
mousePressEvent	./qt/qrimagewidget.cpp	/^void QRImageWidget::mousePressEvent(QMouseEvent *event)$/;"	f	class:QRImageWidget
mouseReleaseEvent	./qt/guiutil.cpp	/^void ClickableLabel::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:GUIUtil::ClickableLabel
mouseReleaseEvent	./qt/guiutil.cpp	/^void ClickableProgressBar::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:GUIUtil::ClickableProgressBar
move	./test/prevector_tests.cpp	/^    void move() {$/;"	f	class:prevector_tester
mp	./net_processing.cpp	/^    CTxMemPool *mp;$/;"	m	class:__anon90::CompareInvMempoolOrder	file:
msg	./net.h	/^    CSerializedNetMsg(const CSerializedNetMsg& msg) = delete;$/;"	m	struct:CSerializedNetMsg
msg	./secp256k1/src/bench_recover.c	/^    unsigned char msg[32];$/;"	m	struct:__anon98	file:
msg	./secp256k1/src/bench_sign.c	/^    unsigned char msg[32];$/;"	m	struct:__anon102	file:
msg	./secp256k1/src/bench_verify.c	/^    unsigned char msg[32];$/;"	m	struct:__anon106	file:
msgIndent	./util/system.cpp	/^static const int msgIndent = 7;$/;"	v	file:
mu	./leveldb/db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon19::SharedState	file:
mu	./leveldb/db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon18::IterState	file:
mu	./leveldb/util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State	file:
mu_	./leveldb/db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon23::AtomicCounter	file:
mu_	./leveldb/db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	./leveldb/port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	./leveldb/port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	./leveldb/port/port_win.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	./leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon8::Limiter	file:
mu_	./leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon8::PosixLockTable	file:
mu_	./leveldb/util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
mu_	./leveldb/util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvTest	file:
mu_	./leveldb/util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
mul32x32_64	./crypto/poly1305.cpp	/^#define mul32x32_64(/;"	d	file:
muladd	./secp256k1/src/scalar_4x64_impl.h	/^#define muladd(/;"	d
muladd	./secp256k1/src/scalar_4x64_impl.h	/^#undef muladd$/;"	d
muladd	./secp256k1/src/scalar_8x32_impl.h	/^#define muladd(/;"	d
muladd	./secp256k1/src/scalar_8x32_impl.h	/^#undef muladd$/;"	d
muladd2	./secp256k1/src/scalar_4x64_impl.h	/^#define muladd2(/;"	d
muladd2	./secp256k1/src/scalar_4x64_impl.h	/^#undef muladd2$/;"	d
muladd2	./secp256k1/src/scalar_8x32_impl.h	/^#define muladd2(/;"	d
muladd2	./secp256k1/src/scalar_8x32_impl.h	/^#undef muladd2$/;"	d
muladd_fast	./secp256k1/src/scalar_4x64_impl.h	/^#define muladd_fast(/;"	d
muladd_fast	./secp256k1/src/scalar_4x64_impl.h	/^#undef muladd_fast$/;"	d
muladd_fast	./secp256k1/src/scalar_8x32_impl.h	/^#define muladd_fast(/;"	d
muladd_fast	./secp256k1/src/scalar_8x32_impl.h	/^#undef muladd_fast$/;"	d
multiUserAuthorized	./httprpc.cpp	/^static bool multiUserAuthorized(std::string strUserPass)$/;"	f	file:
mut	./threadinterrupt.h	/^    Mutex mut;$/;"	m	class:CThreadInterrupt
mutex	./checkqueue.h	/^    boost::mutex mutex;$/;"	m	class:CCheckQueue
mutex	./qt/intro.h	/^    QMutex mutex;$/;"	m	class:Intro
mutex	./rpc/server.cpp	/^    Mutex mutex;$/;"	m	struct:RPCServerInfo	file:
mutex	./support/lockedpool.h	/^    mutable std::mutex mutex;$/;"	m	class:LockedPool
mutex	./sync.h	/^    std::mutex mutex;$/;"	m	class:CSemaphore
mutexMsgProc	./net.h	/^    Mutex mutexMsgProc;$/;"	m	class:CConnman
mutexName	./sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
mutexScanning	./wallet/wallet.h	/^    std::mutex mutexScanning;$/;"	m	class:final
mutex_	./leveldb/db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	./leveldb/db/fault_injection_test.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
mutex_	./leveldb/helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon35::InMemoryEnv	file:
mutex_	./leveldb/port/port_win.h	/^    Mutex mutex_;$/;"	m	class:leveldb::port::OnceType
mutex_	./leveldb/util/cache.cc	/^  mutable port::Mutex mutex_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
n	./primitives/transaction.h	/^    uint32_t n;$/;"	m	class:COutPoint
n	./secp256k1/src/field_10x26.h	/^    uint32_t n[10];$/;"	m	struct:__anon94
n	./secp256k1/src/field_10x26.h	/^    uint32_t n[8];$/;"	m	struct:__anon95
n	./secp256k1/src/field_5x52.h	/^    uint64_t n[4];$/;"	m	struct:__anon97
n	./secp256k1/src/field_5x52.h	/^    uint64_t n[5];$/;"	m	struct:__anon96
n	./serialize.h	/^    I &n;$/;"	m	class:CVarInt
n	./serialize.h	/^    uint64_t &n;$/;"	m	class:CCompactSize
nAccountingEntryNumber	./wallet/wallet.h	/^    uint64_t nAccountingEntryNumber = 0;$/;"	m	class:final
nAmount	./wallet/wallet.h	/^    CAmount nAmount;$/;"	m	struct:CRecipient
nBanUntil	./addrdb.h	/^    int64_t nBanUntil;$/;"	m	class:CBanEntry
nBatchSize	./checkqueue.h	/^    unsigned int nBatchSize;$/;"	m	class:CCheckQueue
nBestHeight	./net.h	/^        int nBestHeight = 0;$/;"	m	struct:CConnman::Options
nBestHeight	./net.h	/^    std::atomic<int> nBestHeight;$/;"	m	class:CConnman
nBits	./chain.h	/^    uint32_t nBits;$/;"	m	class:CBlockIndex
nBits	./primitives/block.h	/^    uint32_t nBits;$/;"	m	class:CBlockHeader
nBlockMaxWeight	./miner.h	/^        size_t nBlockMaxWeight;$/;"	m	struct:BlockAssembler::Options
nBlockMaxWeight	./miner.h	/^    unsigned int nBlockMaxWeight;$/;"	m	class:BlockAssembler
nBlockReverseSequenceId	./validation.cpp	/^    int32_t nBlockReverseSequenceId = -1;$/;"	m	class:CChainState	file:
nBlockSequenceId	./validation.cpp	/^    int32_t nBlockSequenceId = 1;$/;"	m	class:CChainState	file:
nBlockSigOpsCost	./miner.h	/^    uint64_t nBlockSigOpsCost;$/;"	m	class:BlockAssembler
nBlockTx	./miner.h	/^    uint64_t nBlockTx;$/;"	m	class:BlockAssembler
nBlockWeight	./miner.h	/^    uint64_t nBlockWeight;$/;"	m	class:BlockAssembler
nBlocks	./chain.h	/^    unsigned int nBlocks;      \/\/!< number of blocks stored in file$/;"	m	class:CBlockFileInfo
nBlocksInFlight	./net_processing.cpp	/^    int nBlocksInFlight;$/;"	m	struct:__anon89::CNodeState	file:
nBlocksInFlightValidHeaders	./net_processing.cpp	/^    int nBlocksInFlightValidHeaders;$/;"	m	struct:__anon89::CNodeState	file:
nBlocksTotal	./validation.cpp	/^static int64_t nBlocksTotal = 0;$/;"	v	file:
nBogoSize	./rpc/blockchain.cpp	/^    uint64_t nBogoSize;$/;"	m	struct:CCoinsStats	file:
nBytesPerSigOp	./policy/settings.cpp	/^unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;$/;"	v
nChainTx	./chain.h	/^    unsigned int nChainTx;$/;"	m	class:CBlockIndex
nChainWork	./chain.h	/^    arith_uint256 nChainWork;$/;"	m	class:CBlockIndex
nChangeCached	./wallet/wallet.h	/^    mutable CAmount nChangeCached;$/;"	m	class:CWalletTx
nChild	./key.h	/^    unsigned int nChild;$/;"	m	struct:CExtKey
nChild	./pubkey.h	/^    unsigned int nChild;$/;"	m	struct:CExtPubKey
nChild	./test/bip32_tests.cpp	/^    unsigned int nChild;$/;"	m	struct:TestDerivation	file:
nCoinCacheUsage	./validation.cpp	/^size_t nCoinCacheUsage = 5000 * 300;$/;"	v
nCommonHeight	./net_processing.h	/^    int nCommonHeight = -1;$/;"	m	struct:CNodeStateStats
nConnectTimeout	./netbase.cpp	/^int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;$/;"	v
nCountWithAncestors	./txmempool.h	/^    uint64_t nCountWithAncestors;$/;"	m	class:CTxMemPoolEntry
nCountWithDescendants	./txmempool.h	/^    uint64_t nCountWithDescendants;  \/\/!< number of descendant transactions$/;"	m	class:CTxMemPoolEntry
nCreateTime	./addrdb.h	/^    int64_t nCreateTime;$/;"	m	class:CBanEntry
nCreateTime	./wallet/walletdb.h	/^    int64_t nCreateTime; \/\/ 0 means unknown$/;"	m	class:CKeyMetadata
nDataPos	./chain.h	/^    unsigned int nDataPos;$/;"	m	class:CBlockIndex
nDataPos	./net.h	/^    unsigned int nDataPos;$/;"	m	class:CNetMessage
nDefaultDbBatchSize	./txdb.h	/^static const int64_t nDefaultDbBatchSize = 16 << 20;$/;"	v
nDefaultDbCache	./txdb.h	/^static const int64_t nDefaultDbCache = 450;$/;"	v
nDefaultMaxNumSize	./script/script.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum
nDefaultMaxNumSize	./test/scriptnum10.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum10
nDefaultPort	./chainparams.h	/^    int nDefaultPort;$/;"	m	class:CChainParams
nDepth	./key.h	/^    unsigned char nDepth;$/;"	m	struct:CExtKey
nDepth	./pubkey.h	/^    unsigned char nDepth;$/;"	m	struct:CExtPubKey
nDepth	./wallet/wallet.h	/^    int nDepth;$/;"	m	class:COutput
nDerivationMethod	./wallet/crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	./wallet/crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nDiskSize	./rpc/blockchain.cpp	/^    uint64_t nDiskSize;$/;"	m	struct:CCoinsStats	file:
nDisplayUnit	./qt/optionsmodel.h	/^    int nDisplayUnit;$/;"	m	class:OptionsModel
nDownloadingSince	./net_processing.cpp	/^    int64_t nDownloadingSince;$/;"	m	struct:__anon89::CNodeState	file:
nEntriesPerGeneration	./bloom.h	/^    int nEntriesPerGeneration;$/;"	m	class:CRollingBloomFilter
nEntriesThisGeneration	./bloom.h	/^    int nEntriesThisGeneration;$/;"	m	class:CRollingBloomFilter
nExternalChainCounter	./wallet/walletdb.h	/^    uint32_t nExternalChainCounter;$/;"	m	class:CHDChain
nFD	./init.cpp	/^int nFD;$/;"	m	namespace:__anon123	file:
nFee	./test/setup_common.h	/^    CAmount nFee;$/;"	m	struct:TestMemPoolEntryHelper
nFee	./txmempool.h	/^    const CAmount nFee;             \/\/!< Cached to avoid expensive parent-transaction lookups$/;"	m	class:CTxMemPoolEntry
nFeeDelta	./txmempool.h	/^    int64_t nFeeDelta;$/;"	m	struct:TxMempoolInfo
nFees	./miner.h	/^    CAmount nFees;$/;"	m	class:BlockAssembler
nFile	./chain.h	/^    int nFile;$/;"	m	class:CBlockIndex
nFile	./flatfile.h	/^    int nFile;$/;"	m	struct:FlatFilePos
nFlags	./bloom.h	/^    unsigned char nFlags;$/;"	m	class:CBloomFilter
nFlags	./validation.h	/^    unsigned int nFlags;$/;"	m	class:CScriptCheck
nFrozen	./test/checkqueue_tests.cpp	/^    static std::atomic<uint64_t> nFrozen;$/;"	m	struct:FrozenCleanupCheck	file:
nGeneration	./bloom.h	/^    int nGeneration;$/;"	m	class:CRollingBloomFilter
nHashFuncs	./bloom.h	/^    int nHashFuncs;$/;"	m	class:CRollingBloomFilter
nHashFuncs	./bloom.h	/^    unsigned int nHashFuncs;$/;"	m	class:CBloomFilter
nHashType	./script/sign.h	/^    int nHashType;$/;"	m	class:MutableTransactionSignatureCreator
nHdrPos	./net.h	/^    unsigned int nHdrPos;$/;"	m	class:CNetMessage
nHeadersSyncTimeout	./net_processing.cpp	/^    int64_t nHeadersSyncTimeout;$/;"	m	struct:__anon89::CNodeState	file:
nHeight	./chain.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nHeight	./miner.h	/^    int nHeight;$/;"	m	class:BlockAssembler
nHeight	./rest.cpp	/^    uint32_t nHeight;$/;"	m	struct:CCoin	file:
nHeight	./rpc/blockchain.cpp	/^    int nHeight;$/;"	m	struct:CCoinsStats	file:
nHeight	./test/setup_common.h	/^    unsigned int nHeight;$/;"	m	struct:TestMemPoolEntryHelper
nHeight	./txdb.cpp	/^    int nHeight;$/;"	m	class:__anon122::CCoins	file:
nHeightFirst	./chain.h	/^    unsigned int nHeightFirst; \/\/!< lowest height of block in file$/;"	m	class:CBlockFileInfo
nHeightLast	./chain.h	/^    unsigned int nHeightLast;  \/\/!< highest height of block in file$/;"	m	class:CBlockFileInfo
nIdle	./checkqueue.h	/^    int nIdle;$/;"	m	class:CCheckQueue
nIn	./script/interpreter.cpp	/^    const unsigned int nIn;    \/\/!< input index of txTo being signed$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
nIn	./script/interpreter.h	/^    unsigned int nIn;$/;"	m	class:GenericTransactionSignatureChecker
nIn	./script/sign.h	/^    unsigned int nIn;$/;"	m	class:MutableTransactionSignatureCreator
nIn	./validation.h	/^    unsigned int nIn;$/;"	m	class:CScriptCheck
nIndex	./wallet/wallet.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nInputBytes	./wallet/wallet.h	/^    int nInputBytes;$/;"	m	class:COutput
nInternalChainCounter	./wallet/walletdb.h	/^    uint32_t nInternalChainCounter;$/;"	m	class:CHDChain
nKey	./addrman.h	/^    uint256 nKey;$/;"	m	class:CAddrMan
nKeyedNetGroup	./net.cpp	/^    uint64_t nKeyedNetGroup;$/;"	m	struct:NodeEvictionCandidate	file:
nKeyedNetGroup	./net.h	/^    const uint64_t nKeyedNetGroup;$/;"	m	class:CNode
nLastBlockFile	./validation.cpp	/^    int nLastBlockFile = 0;$/;"	m	namespace:__anon50	file:
nLastBlockTime	./net.cpp	/^    int64_t nLastBlockTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastBlockTipUpdateNotification	./qt/clientmodel.cpp	/^static int64_t nLastBlockTipUpdateNotification = 0;$/;"	v	file:
nLastBytesIn	./qt/trafficgraphwidget.h	/^    quint64 nLastBytesIn;$/;"	m	class:TrafficGraphWidget
nLastBytesOut	./qt/trafficgraphwidget.h	/^    quint64 nLastBytesOut;$/;"	m	class:TrafficGraphWidget
nLastFlushed	./wallet/db.h	/^    unsigned int nLastFlushed;$/;"	m	class:BerkeleyDatabase
nLastHeaderTipUpdateNotification	./qt/clientmodel.cpp	/^static int64_t nLastHeaderTipUpdateNotification = 0;$/;"	v	file:
nLastPreciousChainwork	./validation.cpp	/^    arith_uint256 nLastPreciousChainwork = 0;$/;"	m	class:CChainState	file:
nLastRecv	./net.h	/^    int64_t nLastRecv;$/;"	m	class:CNodeStats
nLastResend	./wallet/wallet.h	/^    int64_t nLastResend = 0;$/;"	m	class:final
nLastSeen	./wallet/db.h	/^    unsigned int nLastSeen;$/;"	m	class:BerkeleyDatabase
nLastSend	./net.h	/^    int64_t nLastSend;$/;"	m	class:CNodeStats
nLastTXTime	./net.cpp	/^    int64_t nLastTXTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastWalletUpdate	./wallet/db.h	/^    int64_t nLastWalletUpdate;$/;"	m	class:BerkeleyDatabase
nLocalHostNonce	./net.h	/^    const uint64_t nLocalHostNonce;$/;"	m	class:CNode
nLocalServices	./init.cpp	/^ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);$/;"	m	namespace:__anon123	file:
nLocalServices	./net.h	/^        ServiceFlags nLocalServices = NODE_NONE;$/;"	m	struct:CConnman::Options
nLocalServices	./net.h	/^    ServiceFlags nLocalServices;$/;"	m	class:CConnman
nLocalServices	./net.h	/^    const ServiceFlags nLocalServices;$/;"	m	class:CNode
nLockTime	./primitives/transaction.h	/^    const uint32_t nLockTime;$/;"	m	class:CTransaction
nLockTime	./primitives/transaction.h	/^    uint32_t nLockTime;$/;"	m	struct:CMutableTransaction
nLockTimeCutoff	./miner.h	/^    int64_t nLockTimeCutoff;$/;"	m	class:BlockAssembler
nMasterKeyMaxID	./wallet/wallet.h	/^    unsigned int nMasterKeyMaxID = 0;$/;"	m	class:final
nMaxAddnode	./net.h	/^        int nMaxAddnode = 0;$/;"	m	struct:CConnman::Options
nMaxAddnode	./net.h	/^    int nMaxAddnode;$/;"	m	class:CConnman
nMaxBlockDBCache	./txdb.h	/^static const int64_t nMaxBlockDBCache = 2;$/;"	v
nMaxCoinsDBCache	./txdb.h	/^static const int64_t nMaxCoinsDBCache = 8;$/;"	v
nMaxConnections	./init.cpp	/^int nMaxConnections;$/;"	m	namespace:__anon123	file:
nMaxConnections	./net.h	/^        int nMaxConnections = 0;$/;"	m	struct:CConnman::Options
nMaxConnections	./net.h	/^    int nMaxConnections;$/;"	m	class:CConnman
nMaxDatacarrierBytes	./script/standard.cpp	/^unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;$/;"	v
nMaxDbCache	./txdb.h	/^static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;$/;"	v
nMaxFeeler	./net.h	/^        int nMaxFeeler = 0;$/;"	m	struct:CConnman::Options
nMaxFeeler	./net.h	/^    int nMaxFeeler;$/;"	m	class:CConnman
nMaxOutbound	./net.h	/^        int nMaxOutbound = 0;$/;"	m	struct:CConnman::Options
nMaxOutbound	./net.h	/^    int nMaxOutbound;$/;"	m	class:CConnman
nMaxOutboundLimit	./net.h	/^        uint64_t nMaxOutboundLimit = 0;$/;"	m	struct:CConnman::Options
nMaxOutboundTimeframe	./net.h	/^        uint64_t nMaxOutboundTimeframe = 0;$/;"	m	struct:CConnman::Options
nMaxSize	./limitedmap.h	/^    size_type nMaxSize;$/;"	m	class:limitedmap
nMaxTipAge	./validation.cpp	/^int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;$/;"	v
nMaxTxIndexCache	./txdb.h	/^static const int64_t nMaxTxIndexCache = 1024;$/;"	v
nMedianTimeSpan	./chain.h	/^    static constexpr int nMedianTimeSpan = 11;$/;"	m	class:CBlockIndex
nMessageSize	./protocol.h	/^    uint32_t nMessageSize;$/;"	m	class:CMessageHeader
nMinDbCache	./txdb.h	/^static const int64_t nMinDbCache = 4;$/;"	v
nMinPingUsecTime	./net.cpp	/^    int64_t nMinPingUsecTime;$/;"	m	struct:NodeEvictionCandidate	file:
nMinerConfirmationWindow	./consensus/params.h	/^    uint32_t nMinerConfirmationWindow;$/;"	m	struct:Consensus::Params
nMinimumChainWork	./consensus/params.h	/^    uint256 nMinimumChainWork;$/;"	m	struct:Consensus::Params
nMinimumChainWork	./validation.cpp	/^arith_uint256 nMinimumChainWork;$/;"	v
nMins	./qt/trafficgraphwidget.h	/^    int nMins;$/;"	m	class:TrafficGraphWidget
nMisbehavior	./net_processing.cpp	/^    int nMisbehavior;$/;"	m	struct:__anon89::CNodeState	file:
nMisbehavior	./net_processing.h	/^    int nMisbehavior = 0;$/;"	m	struct:CNodeStateStats
nModFeesWithAncestors	./miner.h	/^    CAmount nModFeesWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nModFeesWithAncestors	./txmempool.h	/^    CAmount nModFeesWithAncestors;$/;"	m	class:CTxMemPoolEntry
nModFeesWithDescendants	./txmempool.h	/^    CAmount nModFeesWithDescendants; \/\/!< ... and total fees (all including us)$/;"	m	class:CTxMemPoolEntry
nMyStartingHeight	./net.h	/^    const int nMyStartingHeight;$/;"	m	class:CNode
nNextResend	./wallet/wallet.h	/^    int64_t nNextResend = 0;$/;"	m	class:final
nNonce	./chain.h	/^    uint32_t nNonce;$/;"	m	class:CBlockIndex
nNonce	./primitives/block.h	/^    uint32_t nNonce;$/;"	m	class:CBlockHeader
nOrderPos	./wallet/wallet.h	/^    int64_t nOrderPos; \/\/!< position in ordered transaction list$/;"	m	class:CWalletTx
nPort	./net.h	/^    int nPort;$/;"	m	struct:LocalServiceInfo
nPos	./flatfile.h	/^    unsigned int nPos;$/;"	m	struct:FlatFilePos
nPos	./streams.h	/^    size_t nPos;$/;"	m	class:CVectorWriter
nPowTargetSpacing	./consensus/params.h	/^    int64_t nPowTargetSpacing;$/;"	m	struct:Consensus::Params
nPowTargetTimespan	./consensus/params.h	/^    int64_t nPowTargetTimespan;$/;"	m	struct:Consensus::Params
nPruneAfterHeight	./chainparams.h	/^    uint64_t nPruneAfterHeight;$/;"	m	class:CChainParams
nPruneTarget	./validation.cpp	/^uint64_t nPruneTarget = 0;$/;"	v
nRPCPort	./chainparamsbase.h	/^    int nRPCPort;$/;"	m	class:CBaseChainParams
nReadLimit	./streams.h	/^    uint64_t nReadLimit;  \/\/!< up to which position we're allowed to read$/;"	m	class:CBufferedFile
nReadPos	./streams.h	/^    uint64_t nReadPos;    \/\/!< how many bytes have been read from this$/;"	m	class:CBufferedFile
nReadPos	./streams.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nReceiveFloodSize	./net.h	/^        unsigned int nReceiveFloodSize = 0;$/;"	m	struct:CConnman::Options
nRecvBytes	./net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNodeStats
nRelockTime	./wallet/wallet.h	/^    int64_t nRelockTime = 0;$/;"	m	class:final
nRewind	./streams.h	/^    uint64_t nRewind;     \/\/!< how many bytes we guarantee to rewind$/;"	m	class:CBufferedFile
nRuleChangeActivationThreshold	./consensus/params.h	/^    uint32_t nRuleChangeActivationThreshold;$/;"	m	struct:Consensus::Params
nSatoshisPerK	./policy/feerate.h	/^    CAmount nSatoshisPerK; \/\/ unit is satoshis-per-1,000-bytes$/;"	m	class:CFeeRate
nScore	./net.h	/^    int nScore;$/;"	m	struct:LocalServiceInfo
nScriptCheckThreads	./validation.cpp	/^int nScriptCheckThreads = 0;$/;"	v
nSeed0	./net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSeed1	./net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSendBufferMaxSize	./net.h	/^        unsigned int nSendBufferMaxSize = 0;$/;"	m	struct:CConnman::Options
nSendBytes	./net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNodeStats
nSequence	./primitives/transaction.h	/^    uint32_t nSequence;$/;"	m	class:CTxIn
nSequenceId	./chain.h	/^    int32_t nSequenceId;$/;"	m	class:CBlockIndex
nServices	./net.h	/^    ServiceFlags nServices;$/;"	m	class:CNodeStats
nServices	./protocol.h	/^    ServiceFlags nServices;$/;"	m	class:CAddress
nSigOpCostWithAncestors	./miner.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSigOpCostWithAncestors	./txmempool.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSize	./chain.h	/^    unsigned int nSize;        \/\/!< number of used bytes of block file$/;"	m	class:CBlockFileInfo
nSize	./serialize.h	/^    size_t nSize;$/;"	m	class:CSizeComputer
nSize	./timedata.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nSizeWithAncestors	./miner.h	/^    uint64_t nSizeWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSizeWithAncestors	./txmempool.h	/^    uint64_t nSizeWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSizeWithDescendants	./txmempool.h	/^    uint64_t nSizeWithDescendants;   \/\/!< ... and size$/;"	m	class:CTxMemPoolEntry
nSpecialScripts	./compressor.h	/^    static const unsigned int nSpecialScripts = 6;$/;"	m	class:CScriptCompressor
nSrcPos	./streams.h	/^    uint64_t nSrcPos;     \/\/!< how many bytes have been read from source$/;"	m	class:CBufferedFile
nStallingSince	./net_processing.cpp	/^    int64_t nStallingSince;$/;"	m	struct:__anon89::CNodeState	file:
nStartTime	./consensus/params.h	/^    int64_t nStartTime;$/;"	m	struct:Consensus::BIP9Deployment
nStartingHeight	./net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nStartupTime	./util/system.cpp	/^const int64_t nStartupTime = GetTime();$/;"	v
nStatus	./chain.h	/^    uint32_t nStatus;$/;"	m	class:CBlockIndex
nSubsidyHalvingInterval	./consensus/params.h	/^    int nSubsidyHalvingInterval;$/;"	m	struct:Consensus::Params
nSyncHeight	./net_processing.h	/^    int nSyncHeight = -1;$/;"	m	struct:CNodeStateStats
nThreadsServicingQueue	./scheduler.h	/^    int nThreadsServicingQueue;$/;"	m	class:CScheduler
nTime	./chain.h	/^    uint32_t nTime;$/;"	m	class:CBlockIndex
nTime	./chainparams.h	/^    int64_t nTime;    \/\/!< UNIX timestamp of last known number of transactions$/;"	m	struct:ChainTxData
nTime	./net.h	/^    int64_t nTime;                  \/\/ time (in microseconds) of message receipt.$/;"	m	class:CNetMessage
nTime	./primitives/block.h	/^    uint32_t nTime;$/;"	m	class:CBlockHeader
nTime	./protocol.h	/^    unsigned int nTime;$/;"	m	class:CAddress
nTime	./test/setup_common.h	/^    int64_t nTime;$/;"	m	struct:TestMemPoolEntryHelper
nTime	./txmempool.h	/^    const int64_t nTime;            \/\/!< Local time when entering the mempool$/;"	m	class:CTxMemPoolEntry
nTime	./txmempool.h	/^    int64_t nTime;$/;"	m	struct:TxMempoolInfo
nTime	./wallet/wallet.h	/^    int64_t nTime;$/;"	m	class:CKeyPool
nTimeCallbacks	./validation.cpp	/^static int64_t nTimeCallbacks = 0;$/;"	v	file:
nTimeChainState	./validation.cpp	/^static int64_t nTimeChainState = 0;$/;"	v	file:
nTimeCheck	./validation.cpp	/^static int64_t nTimeCheck = 0;$/;"	v	file:
nTimeConnect	./validation.cpp	/^static int64_t nTimeConnect = 0;$/;"	v	file:
nTimeConnectTotal	./validation.cpp	/^static int64_t nTimeConnectTotal = 0;$/;"	v	file:
nTimeConnected	./net.cpp	/^    int64_t nTimeConnected;$/;"	m	struct:NodeEvictionCandidate	file:
nTimeConnected	./net.h	/^    const int64_t nTimeConnected;$/;"	m	class:CNode
nTimeConnected	./net.h	/^    int64_t nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	./wallet/wallet.h	/^    int64_t nTimeCreated;$/;"	m	class:CWalletKey
nTimeExpire	./net_processing.cpp	/^    int64_t nTimeExpire;$/;"	m	struct:COrphanTx	file:
nTimeExpire	./test/denialofservice_tests.cpp	/^    int64_t nTimeExpire;$/;"	m	struct:COrphanTx	file:
nTimeExpires	./wallet/wallet.h	/^    int64_t nTimeExpires;$/;"	m	class:CWalletKey
nTimeFirst	./chain.h	/^    uint64_t nTimeFirst;       \/\/!< earliest time of block in file$/;"	m	class:CBlockFileInfo
nTimeFlush	./validation.cpp	/^static int64_t nTimeFlush = 0;$/;"	v	file:
nTimeForks	./validation.cpp	/^static int64_t nTimeForks = 0;$/;"	v	file:
nTimeIndex	./validation.cpp	/^static int64_t nTimeIndex = 0;$/;"	v	file:
nTimeLast	./chain.h	/^    uint64_t nTimeLast;        \/\/!< latest time of block in file$/;"	m	class:CBlockFileInfo
nTimeMax	./chain.h	/^    unsigned int nTimeMax;$/;"	m	class:CBlockIndex
nTimeOffset	./net.h	/^    int64_t nTimeOffset;$/;"	m	class:CNodeStats
nTimePostConnect	./validation.cpp	/^static int64_t nTimePostConnect = 0;$/;"	v	file:
nTimeReadFromDisk	./validation.cpp	/^static int64_t nTimeReadFromDisk = 0;$/;"	v	file:
nTimeReceived	./wallet/wallet.h	/^    unsigned int nTimeReceived; \/\/!< time received by this node$/;"	m	class:CWalletTx
nTimeSmart	./wallet/wallet.h	/^    unsigned int nTimeSmart;$/;"	m	class:CWalletTx
nTimeTotal	./validation.cpp	/^static int64_t nTimeTotal = 0;$/;"	v	file:
nTimeVerify	./validation.cpp	/^static int64_t nTimeVerify = 0;$/;"	v	file:
nTimeout	./consensus/params.h	/^    int64_t nTimeout;$/;"	m	struct:Consensus::BIP9Deployment
nTodo	./checkqueue.h	/^    unsigned int nTodo;$/;"	m	class:CCheckQueue
nTotal	./checkqueue.h	/^    int nTotal;$/;"	m	class:CCheckQueue
nTotalAmount	./rpc/blockchain.cpp	/^    CAmount nTotalAmount;$/;"	m	struct:CCoinsStats	file:
nTransactionOutputs	./rpc/blockchain.cpp	/^    uint64_t nTransactionOutputs;$/;"	m	struct:CCoinsStats	file:
nTransactions	./merkleblock.h	/^    unsigned int nTransactions;$/;"	m	class:CPartialMerkleTree
nTransactions	./rpc/blockchain.cpp	/^    uint64_t nTransactions;$/;"	m	struct:CCoinsStats	file:
nTransactionsUpdated	./txmempool.h	/^    unsigned int nTransactionsUpdated; \/\/!< Used by getblocktemplate to trigger CreateNewBlock() invocation$/;"	m	class:CTxMemPool
nTweak	./bloom.h	/^    unsigned int nTweak;$/;"	m	class:CBloomFilter
nTweak	./bloom.h	/^    unsigned int nTweak;$/;"	m	class:CRollingBloomFilter
nTx	./chain.h	/^    unsigned int nTx;$/;"	m	class:CBlockIndex
nTxCount	./chainparams.h	/^    int64_t nTxCount; \/\/!< total number of transactions between genesis and that timestamp$/;"	m	struct:ChainTxData
nTxOffset	./index/txindex.cpp	/^    unsigned int nTxOffset; \/\/ after header$/;"	m	struct:CDiskTxPos	file:
nTxWeight	./txmempool.h	/^    const size_t nTxWeight;         \/\/!< ... and avoid recomputing tx weight (also used for GetTxSize())$/;"	m	class:CTxMemPoolEntry
nType	./hash.h	/^    const int nType;$/;"	m	class:CHashWriter
nType	./streams.h	/^    const int nType;$/;"	m	class:CAutoFile
nType	./streams.h	/^    const int nType;$/;"	m	class:CBufferedFile
nType	./streams.h	/^    const int nType;$/;"	m	class:CVectorWriter
nType	./streams.h	/^    const int nType;$/;"	m	class:OverrideStream
nType	./streams.h	/^    int nType;$/;"	m	class:CDataStream
nUnconnectingHeaders	./net_processing.cpp	/^    int nUnconnectingHeaders;$/;"	m	struct:__anon89::CNodeState	file:
nUndoPos	./chain.h	/^    unsigned int nUndoPos;$/;"	m	class:CBlockIndex
nUndoSize	./chain.h	/^    unsigned int nUndoSize;    \/\/!< number of used bytes in the undo file$/;"	m	class:CBlockFileInfo
nUpdateCounter	./wallet/db.h	/^    std::atomic<unsigned int> nUpdateCounter;$/;"	m	class:BerkeleyDatabase
nUsageSize	./txmempool.h	/^    const size_t nUsageSize;        \/\/!< ... and total memory usage$/;"	m	class:CTxMemPoolEntry
nUserMaxConnections	./init.cpp	/^int nUserMaxConnections;$/;"	m	namespace:__anon123	file:
nValue	./primitives/transaction.h	/^    CAmount nValue;$/;"	m	class:CTxOut
nValue	./test/script_tests.cpp	/^    CAmount nValue;$/;"	m	class:__anon58::TestBuilder	file:
nVersion	./addrdb.h	/^    int nVersion;$/;"	m	class:CBanEntry
nVersion	./chain.h	/^    int32_t nVersion;$/;"	m	class:CBlockIndex
nVersion	./hash.h	/^    const int nVersion;$/;"	m	class:CHashWriter
nVersion	./net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nVersion	./netmessagemaker.h	/^    const int nVersion;$/;"	m	class:CNetMsgMaker
nVersion	./primitives/block.h	/^    int32_t nVersion;$/;"	m	class:CBlockHeader
nVersion	./primitives/transaction.h	/^    const int32_t nVersion;$/;"	m	class:CTransaction
nVersion	./primitives/transaction.h	/^    int32_t nVersion;$/;"	m	struct:CMutableTransaction
nVersion	./qt/recentrequeststablemodel.h	/^    int nVersion;$/;"	m	class:RecentRequestEntry
nVersion	./qt/walletmodel.h	/^    int nVersion;$/;"	m	class:SendCoinsRecipient
nVersion	./serialize.h	/^    const int nVersion;$/;"	m	class:CSizeComputer
nVersion	./streams.h	/^    const int nVersion;$/;"	m	class:CAutoFile
nVersion	./streams.h	/^    const int nVersion;$/;"	m	class:CBufferedFile
nVersion	./streams.h	/^    const int nVersion;$/;"	m	class:CVectorWriter
nVersion	./streams.h	/^    const int nVersion;$/;"	m	class:OverrideStream
nVersion	./streams.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	./wallet/walletdb.h	/^    int nVersion;$/;"	m	class:CHDChain
nVersion	./wallet/walletdb.h	/^    int nVersion;$/;"	m	class:CKeyMetadata
n_	./leveldb/table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon11::MergingIterator	file:
n_calls	./test/checkqueue_tests.cpp	/^    static std::atomic<size_t> n_calls;$/;"	m	struct:FakeCheckCheckCompletion	file:
name	./interfaces/wallet.h	/^    std::string name;$/;"	m	struct:interfaces::WalletAddress
name	./leveldb/util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon5::Test	file:
name	./net_processing.cpp	/^    const std::string name;$/;"	m	struct:__anon89::CNodeState	file:
name	./qt/platformstyle.h	/^    QString name;$/;"	m	class:PlatformStyle
name	./rest.cpp	/^    const char* name;$/;"	m	struct:__anon1	file:
name	./rpc/server.h	/^    std::string name;$/;"	m	class:CRPCCommand
name	./test/script_tests.cpp	/^    const char *name;$/;"	m	struct:ScriptErrorDesc	file:
name	./versionbitsinfo.h	/^    const char *name;$/;"	m	struct:VBDeploymentInfo
name	./wallet/wallet.h	/^    std::string name;$/;"	m	class:CAddressBookData
name_	./leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	./leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	./leveldb/util/env_posix.cc	/^  std::string name_;$/;"	m	class:leveldb::__anon8::PosixFileLock	file:
nativeECDSABuffer	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static ThreadLocal<ByteBuffer> nativeECDSABuffer = new ThreadLocal<ByteBuffer>();$/;"	f	class:NativeSecp256k1	file:
nativeEventFilter	./qt/winshutdownmonitor.cpp	/^bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pMessage, long *pnResult)$/;"	f	class:WinShutdownMonitor
needsUpdate	./qt/transactionrecord.h	/^    bool needsUpdate;$/;"	m	class:TransactionStatus
neg	./secp256k1/src/num_gmp.h	/^    int neg;$/;"	m	struct:__anon110
netManager	./qt/paymentserver.h	/^    QNetworkAccessManager* netManager;  \/\/ Used to fetch payment requests$/;"	m	class:PaymentServer
netRequestFinished	./qt/paymentserver.cpp	/^void PaymentServer::netRequestFinished(QNetworkReply* reply)$/;"	f	class:PaymentServer
netmask	./netaddress.h	/^        uint8_t netmask[16];$/;"	m	class:CSubNet
network	./netaddress.h	/^        CNetAddr network;$/;"	m	class:CSubNet
networkId	./qt/networkstyle.cpp	/^    const char *networkId;$/;"	m	struct:__anon65	file:
network_styles	./qt/networkstyle.cpp	/^} network_styles[] = {$/;"	v	typeref:struct:__anon65	file:
network_styles_count	./qt/networkstyle.cpp	/^static const unsigned network_styles_count = sizeof(network_styles)\/sizeof(*network_styles);$/;"	v	file:
newAddressToSelect	./qt/addressbookpage.h	/^    QString newAddressToSelect;$/;"	m	class:AddressBookPage
newTaskMutex	./scheduler.h	/^    mutable boost::mutex newTaskMutex;$/;"	m	class:CScheduler
newTaskScheduled	./scheduler.h	/^    boost::condition_variable newTaskScheduled;$/;"	m	class:CScheduler
new_arena	./support/lockedpool.cpp	/^bool LockedPool::new_arena(size_t size, size_t align)$/;"	f	class:LockedPool
new_files_	./leveldb/db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
new_files_since_last_dir_sync_	./leveldb/db/fault_injection_test.cc	/^  std::set<std::string> new_files_since_last_dir_sync_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
new_handler_terminate	./init.cpp	/^[[noreturn]] static void new_handler_terminate()$/;"	f	file:
newest	./leveldb/db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	./leveldb/include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	./leveldb/util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
next	./node/psbt.h	/^    PSBTRole next;                         \/\/!< Which of the BIP 174 roles needs to handle the transaction next$/;"	m	struct:PSBTAnalysis
next	./node/psbt.h	/^    PSBTRole next; \/\/!< Which of the BIP 174 roles needs to handle this input next$/;"	m	struct:PSBTInputAnalysis
next_	./leveldb/db/skiplist.h	/^  port::AtomicPointer next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	./leveldb/db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	./leveldb/db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	./leveldb/db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon30::Repairer	file:
next_file_number_	./leveldb/db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	./leveldb/db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	./leveldb/util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
next_report_	./leveldb/db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon19::Stats	file:
next_report_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_report_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
no_space_	./leveldb/db/db_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv	file:
node	./qt/clientmodel.h	/^    interfaces::Node& node() const { return m_node; }$/;"	f	class:ClientModel
node	./qt/optionsmodel.h	/^    interfaces::Node& node() const { return m_node; }$/;"	f	class:OptionsModel
node	./qt/walletmodel.h	/^    interfaces::Node& node() const { return m_node; }$/;"	f	class:WalletModel
nodeStateStats	./qt/peertablemodel.h	/^    CNodeStateStats nodeStateStats;$/;"	m	struct:CNodeCombinedStats
nodeStats	./qt/peertablemodel.h	/^    CNodeStats nodeStats;$/;"	m	struct:CNodeCombinedStats
node_	./leveldb/db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
nodeid	./net.h	/^    NodeId nodeid;$/;"	m	class:CNodeStats
nodist_libbitcoin_util_a_OBJECTS	./Makefile	/^nodist_libbitcoin_util_a_OBJECTS =$/;"	m
nodist_libbitcoin_util_a_SOURCES	./Makefile	/^nodist_libbitcoin_util_a_SOURCES = $(srcdir)\/obj\/build.h$/;"	m
nodist_test_test_bitcoin_OBJECTS	./Makefile	/^nodist_test_test_bitcoin_OBJECTS =  \\$/;"	m
nodist_test_test_bitcoin_SOURCES	./Makefile	/^nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)$/;"	m
noexcept	./random.h	/^    FastRandomContext& operator=(FastRandomContext&& from) noexcept;$/;"	m	class:FastRandomContext
noexcept	./random.h	/^    explicit FastRandomContext(bool fDeterministic = false) noexcept;$/;"	m	class:FastRandomContext
noexcept	./random.h	/^    explicit FastRandomContext(const uint256& seed) noexcept;$/;"	m	class:FastRandomContext
noexcept	./random.h	/^    uint256 rand256() noexcept;$/;"	m	class:FastRandomContext
noexcept	./support/allocators/secure.h	/^    secure_allocator(const secure_allocator& a) noexcept : base(a) {}$/;"	m	struct:secure_allocator
noexcept	./support/allocators/zeroafterfree.h	/^    zero_after_free_allocator(const zero_after_free_allocator& a) noexcept : base(a) {}$/;"	m	struct:zero_after_free_allocator
noinst_HEADERS	./secp256k1/Makefile	/^noinst_HEADERS = src\/scalar.h src\/scalar_4x64.h src\/scalar_8x32.h \\$/;"	m
noinst_HEADERS	./univalue/Makefile	/^noinst_HEADERS = lib\/univalue_escapes.h lib\/univalue_utffilter.h$/;"	m
noinst_PROGRAMS	./Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_10)$/;"	m
noinst_PROGRAMS	./secp256k1/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
noinst_PROGRAMS	./univalue/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1) test\/test_json$(EXEEXT)$/;"	m
non_witness_utxo	./psbt.h	/^    CTransactionRef non_witness_utxo;$/;"	m	struct:PSBTInput
non_writable_	./leveldb/db/db_test.cc	/^  port::AtomicPointer non_writable_;$/;"	m	class:leveldb::SpecialEnv	file:
nonce	./blockencodings.h	/^    uint64_t nonce;$/;"	m	class:CBlockHeaderAndShortTxIDs
nonce	./script/sigcache.cpp	/^    uint256 nonce;$/;"	m	class:__anon84::CSignatureCache	file:
nonce	./test/blockencodings_tests.cpp	/^    uint64_t nonce;$/;"	m	class:TestHeaderAndShortIDs	file:
nonce	./test/miner_tests.cpp	/^    unsigned int nonce;$/;"	m	struct:__anon59	file:
nonce_function_rfc6979	./secp256k1/src/secp256k1.c	/^static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nonce_function_test_fail	./secp256k1/src/tests.c	/^static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nonce_function_test_retry	./secp256k1/src/tests.c	/^static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nontrivial_t	./bench/prevector.cpp	/^    nontrivial_t() :x(-1) {}$/;"	f	struct:nontrivial_t
nontrivial_t	./bench/prevector.cpp	/^struct nontrivial_t {$/;"	s	file:
normalize_hit_rate	./test/cuckoocache_tests.cpp	/^static double normalize_hit_rate(double hits, double load)$/;"	f	file:
normalized	./secp256k1/src/field_10x26.h	/^    int normalized;$/;"	m	struct:__anon94
normalized	./secp256k1/src/field_5x52.h	/^    int normalized;$/;"	m	struct:__anon96
notificator	./qt/bitcoingui.h	/^    Notificator* notificator = nullptr;$/;"	m	class:BitcoinGUI
notifiers	./zmq/zmqnotificationinterface.h	/^    std::list<CZMQAbstractNotifier*> notifiers;$/;"	m	class:final
notify	./qt/notificator.cpp	/^void Notificator::notify(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyDBus	./qt/notificator.cpp	/^void Notificator::notifyDBus(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyMacUserNotificationCenter	./qt/notificator.cpp	/^void Notificator::notifyMacUserNotificationCenter(const QString &title, const QString &text)$/;"	f	class:Notificator
notifySystray	./qt/notificator.cpp	/^void Notificator::notifySystray(Class cls, const QString &title, const QString &text, int millisTimeout)$/;"	f	class:Notificator
noui_InitMessage	./noui.cpp	/^void noui_InitMessage(const std::string& message)$/;"	f
noui_ThreadSafeMessageBox	./noui.cpp	/^bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)$/;"	f
noui_ThreadSafeQuestion	./noui.cpp	/^bool noui_ThreadSafeQuestion(const std::string& \/* ignored interactive message *\/, const std::string& message, const std::string& caption, unsigned int style)$/;"	f
noui_connect	./noui.cpp	/^void noui_connect()$/;"	f
nullopt	./optional.h	/^static auto& nullopt = boost::none;$/;"	v
num	./test/versionbits_tests.cpp	/^    int num;$/;"	m	class:VersionBitsTester	file:
num_	./leveldb/db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	./leveldb/table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	./leveldb/util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_done	./leveldb/db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon19::SharedState	file:
num_entries	./leveldb/table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_initial_offset_records_	./leveldb/db/log_test.cc	/^  static int num_initial_offset_records_;$/;"	m	class:leveldb::log::LogTest	file:
num_initial_offset_records_	./leveldb/db/log_test.cc	/^int LogTest::num_initial_offset_records_ =$/;"	m	class:leveldb::log::LogTest	file:
num_initialized	./leveldb/db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon19::SharedState	file:
num_input_files	./leveldb/db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_iters_for_one_second	./bench/bench.h	/^        uint64_t num_iters_for_one_second;$/;"	m	struct:benchmark::BenchRunner::Bench
num_restarts_	./leveldb/table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_running	./leveldb/util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State	file:
num_writable_file_errors_	./leveldb/util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	./leveldb/db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	./leveldb/db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	./leveldb/db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
obfuscate_key	./dbwrapper.h	/^    std::vector<unsigned char> obfuscate_key;$/;"	m	class:CDBWrapper
obtain_event	./support/events.h	/^inline raii_event obtain_event(struct event_base* base, evutil_socket_t s, short events, event_callback_fn cb, void* arg) {$/;"	f
obtain_event_base	./support/events.h	/^inline raii_event_base obtain_event_base() {$/;"	f
obtain_evhttp	./support/events.h	/^inline raii_evhttp obtain_evhttp(struct event_base* base) {$/;"	f
obtain_evhttp_connection_base	./support/events.h	/^inline raii_evhttp_connection obtain_evhttp_connection_base(struct event_base* base, std::string host, uint16_t port) {$/;"	f
obtain_evhttp_request	./support/events.h	/^inline raii_evhttp_request obtain_evhttp_request(void(*cb)(struct evhttp_request *, void *), void *arg) {$/;"	f
offset	./leveldb/table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	./leveldb/table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	./leveldb/table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	./leveldb/table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
offsets	./test/scriptnum_tests.cpp	/^static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};$/;"	v	file:
ofstream	./fs.h	/^        explicit ofstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out) { open(p, mode); }$/;"	f	class:fsbridge::ofstream
ofstream	./fs.h	/^    class ofstream : public std::ostream$/;"	c	namespace:fsbridge
ofstream	./fs.h	/^    typedef fs::ofstream ofstream;$/;"	t	namespace:fsbridge
ok	./leveldb/include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	./leveldb/include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
ok_	./leveldb/util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldUnconfTxs	./policy/fees.cpp	/^    std::vector<int> oldUnconfTxs;$/;"	m	class:TxConfirmStats	file:
oldest	./leveldb/db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
oldincludedir	./Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	./secp256k1/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	./univalue/Makefile	/^oldincludedir = \/usr\/include$/;"	m
onCopyLabelAction	./qt/addressbookpage.cpp	/^void AddressBookPage::onCopyLabelAction()$/;"	f	class:AddressBookPage
onDisplayUnitsClicked	./qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::onDisplayUnitsClicked(const QPoint& point)$/;"	f	class:UnitDisplayStatusBarControl
onEditAction	./qt/addressbookpage.cpp	/^void AddressBookPage::onEditAction()$/;"	f	class:AddressBookPage
onMenuSelection	./qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::onMenuSelection(QAction* action)$/;"	f	class:UnitDisplayStatusBarControl
on_addressBookButton_SM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_VM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_clicked	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_addressBookButton_clicked()$/;"	f	class:SendCoinsEntry
on_btnCopyAddress_clicked	./qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::on_btnCopyAddress_clicked()$/;"	f	class:ReceiveRequestDialog
on_btnCopyURI_clicked	./qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::on_btnCopyURI_clicked()$/;"	f	class:ReceiveRequestDialog
on_buttonChooseFee_clicked	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_buttonChooseFee_clicked()$/;"	f	class:SendCoinsDialog
on_buttonMinimizeFee_clicked	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_buttonMinimizeFee_clicked()$/;"	f	class:SendCoinsDialog
on_cancelButton_clicked	./qt/optionsdialog.cpp	/^void OptionsDialog::on_cancelButton_clicked()$/;"	f	class:OptionsDialog
on_clearButton_SM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_clearButton_VM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_copyAddress_clicked	./qt/addressbookpage.cpp	/^void AddressBookPage::on_copyAddress_clicked()$/;"	f	class:AddressBookPage
on_copySignatureButton_SM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_dataDirCustom_clicked	./qt/intro.cpp	/^void Intro::on_dataDirCustom_clicked()$/;"	f	class:Intro
on_dataDirDefault_clicked	./qt/intro.cpp	/^void Intro::on_dataDirDefault_clicked()$/;"	f	class:Intro
on_dataDirectory_textChanged	./qt/intro.cpp	/^void Intro::on_dataDirectory_textChanged(const QString &dataDirStr)$/;"	f	class:Intro
on_deleteAddress_clicked	./qt/addressbookpage.cpp	/^void AddressBookPage::on_deleteAddress_clicked()$/;"	f	class:AddressBookPage
on_ellipsisButton_clicked	./qt/intro.cpp	/^void Intro::on_ellipsisButton_clicked()$/;"	f	class:Intro
on_exportButton_clicked	./qt/addressbookpage.cpp	/^void AddressBookPage::on_exportButton_clicked()$/;"	f	class:AddressBookPage
on_geometriesChanged	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::on_geometriesChanged()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
on_hideTrayIcon_stateChanged	./qt/optionsdialog.cpp	/^void OptionsDialog::on_hideTrayIcon_stateChanged(int fState)$/;"	f	class:OptionsDialog
on_lineEdit_returnPressed	./qt/rpcconsole.cpp	/^void RPCConsole::on_lineEdit_returnPressed()$/;"	f	class:RPCConsole
on_newAddress_clicked	./qt/addressbookpage.cpp	/^void AddressBookPage::on_newAddress_clicked()$/;"	f	class:AddressBookPage
on_okButton_accepted	./qt/utilitydialog.cpp	/^void HelpMessageDialog::on_okButton_accepted()$/;"	f	class:HelpMessageDialog
on_okButton_clicked	./qt/optionsdialog.cpp	/^void OptionsDialog::on_okButton_clicked()$/;"	f	class:OptionsDialog
on_openBitcoinConfButton_clicked	./qt/optionsdialog.cpp	/^void OptionsDialog::on_openBitcoinConfButton_clicked()$/;"	f	class:OptionsDialog
on_openDebugLogfileButton_clicked	./qt/rpcconsole.cpp	/^void RPCConsole::on_openDebugLogfileButton_clicked()$/;"	f	class:RPCConsole
on_pasteButton_SM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_pasteButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_pasteButton_clicked	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_pasteButton_clicked()$/;"	f	class:SendCoinsEntry
on_payTo_textChanged	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_payTo_textChanged(const QString &address)$/;"	f	class:SendCoinsEntry
on_receiveButton_clicked	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_receiveButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_recentRequestsView_doubleClicked	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_recentRequestsView_doubleClicked(const QModelIndex &index)$/;"	f	class:ReceiveCoinsDialog
on_removeRequestButton_clicked	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_removeRequestButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_resetButton_clicked	./qt/optionsdialog.cpp	/^void OptionsDialog::on_resetButton_clicked()$/;"	f	class:OptionsDialog
on_sectionResized	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int oldSize, int newSize)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
on_selectFileButton_clicked	./qt/openuridialog.cpp	/^void OpenURIDialog::on_selectFileButton_clicked()$/;"	f	class:OpenURIDialog
on_sendButton_clicked	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_sendButton_clicked()$/;"	f	class:SendCoinsDialog
on_showRequestButton_clicked	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_showRequestButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_signMessageButton_SM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_sldGraphRange_valueChanged	./qt/rpcconsole.cpp	/^void RPCConsole::on_sldGraphRange_valueChanged(int value)$/;"	f	class:RPCConsole
on_tabWidget_currentChanged	./qt/rpcconsole.cpp	/^void RPCConsole::on_tabWidget_currentChanged(int index)$/;"	f	class:RPCConsole
on_verifyMessageButton_VM_clicked	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
once	./leveldb/util/comparator.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	./leveldb/util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	./leveldb/util/env_win.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
onlyUnconfirmed	./miner.cpp	/^void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)$/;"	f	class:BlockAssembler
opcodetype	./script/script.h	/^enum opcodetype$/;"	g
open	./fs.cpp	/^void ifstream::open(const fs::path& p, std::ios_base::openmode mode)$/;"	f	class:fsbridge::ifstream
open	./fs.cpp	/^void ofstream::open(const fs::path& p, std::ios_base::openmode mode)$/;"	f	class:fsbridge::ofstream
open	./qt/walletcontroller.cpp	/^void OpenWalletActivity::open()$/;"	f	class:OpenWalletActivity
openAction	./qt/bitcoingui.h	/^    QAction* openAction = nullptr;$/;"	m	class:BitcoinGUI
openBitcoinConf	./qt/guiutil.cpp	/^bool openBitcoinConf()$/;"	f	namespace:GUIUtil
openClicked	./qt/bitcoingui.cpp	/^void BitcoinGUI::openClicked()$/;"	f	class:BitcoinGUI
openDebugLogfile	./qt/guiutil.cpp	/^void openDebugLogfile()$/;"	f	namespace:GUIUtil
openOptionsDialogWithTab	./qt/bitcoingui.cpp	/^void BitcoinGUI::openOptionsDialogWithTab(OptionsDialog::Tab tab)$/;"	f	class:BitcoinGUI
openRPCConsoleAction	./qt/bitcoingui.h	/^    QAction* openRPCConsoleAction = nullptr;$/;"	m	class:BitcoinGUI
openThirdPartyTxUrl	./qt/transactionview.cpp	/^void TransactionView::openThirdPartyTxUrl(QString url)$/;"	f	class:TransactionView
openWallet	./qt/walletcontroller.cpp	/^OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidget* parent)$/;"	f	class:WalletController
open_for	./qt/transactionrecord.h	/^    qint64 open_for; \/**< Timestamp if status==OpenUntilDate, otherwise number$/;"	m	class:TransactionStatus
open_read_only_file_limit	./leveldb/util/env_posix.cc	/^static int open_read_only_file_limit = -1;$/;"	m	namespace:leveldb::__anon8	file:
openmodeToStr	./fs.cpp	/^static std::string openmodeToStr(std::ios_base::openmode mode)$/;"	f	namespace:fsbridge
operator !=	./arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }$/;"	f	class:base_uint
operator !=	./arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }$/;"	f	class:base_uint
operator !=	./flatfile.h	/^    friend bool operator!=(const FlatFilePos &a, const FlatFilePos &b) {$/;"	f	struct:FlatFilePos
operator !=	./leveldb/include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator !=	./netaddress.h	/^        friend bool operator!=(const CNetAddr& a, const CNetAddr& b) { return !(a == b); }$/;"	f	class:CNetAddr
operator !=	./netaddress.h	/^        friend bool operator!=(const CService& a, const CService& b) { return !(a == b); }$/;"	f	class:CService
operator !=	./netaddress.h	/^        friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }$/;"	f	class:CSubNet
operator !=	./policy/feerate.h	/^    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator !=	./prevector.h	/^        bool operator!=(const_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_iterator
operator !=	./prevector.h	/^        bool operator!=(const_reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator !=	./prevector.h	/^        bool operator!=(iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::iterator
operator !=	./prevector.h	/^        bool operator!=(reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator !=	./prevector.h	/^    bool operator!=(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator !=	./primitives/transaction.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	./primitives/transaction.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	./primitives/transaction.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	./primitives/transaction.h	/^    friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	./pubkey.h	/^    friend bool operator!=(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator !=	./script/script.h	/^    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum
operator !=	./script/script.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum
operator !=	./test/scriptnum10.h	/^    inline bool operator!=(const CScriptNum10& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator !=	./test/scriptnum10.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum10
operator !=	./uint256.h	/^    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }$/;"	f	class:base_blob
operator !=	./wallet/coinselection.h	/^    bool operator!=(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator &	./arith_uint256.h	/^    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }$/;"	f	class:base_uint
operator &	./script/script.h	/^    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }$/;"	f	class:CScriptNum
operator &	./script/script.h	/^    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}$/;"	f	class:CScriptNum
operator &=	./arith_uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator &=	./script/script.h	/^    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator &=	./script/script.h	/^    inline CScriptNum& operator&=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ()	./coins.h	/^    size_t operator()(const COutPoint& id) const {$/;"	f	class:SaltedOutpointHasher
operator ()	./indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	f	struct:DereferencingComparator
operator ()	./key_io.cpp	/^    std::string operator()(const CNoDestination& no) const { return {}; }$/;"	f	class:__anon54::DestinationEncoder
operator ()	./key_io.cpp	/^    std::string operator()(const PKHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	./key_io.cpp	/^    std::string operator()(const ScriptHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	./key_io.cpp	/^    std::string operator()(const WitnessUnknown& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	./key_io.cpp	/^    std::string operator()(const WitnessV0KeyHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	./key_io.cpp	/^    std::string operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:__anon54::DestinationEncoder
operator ()	./leveldb/db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	./leveldb/db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	./leveldb/db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	./leveldb/table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon16::STLLessThan
operator ()	./miner.h	/^    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b) const$/;"	f	struct:CompareTxIterByAncestorCount
operator ()	./miner.h	/^    bool operator()(const CTxMemPool::txiter& a, const CTxMemPool::txiter& b) const$/;"	f	struct:CompareCTxMemPoolIter
operator ()	./miner.h	/^    result_type operator() (const CTxMemPoolModifiedEntry &entry) const$/;"	f	struct:modifiedentry_iter
operator ()	./miner.h	/^    void operator() (CTxMemPoolModifiedEntry &e)$/;"	f	struct:update_for_parent_inclusion
operator ()	./net.h	/^    bool operator()(I first, I last) const$/;"	f	struct:CombinerAll
operator ()	./net_processing.cpp	/^        bool operator()(const I& a, const I& b) const$/;"	f	struct:__anon88::IteratorComparator
operator ()	./net_processing.cpp	/^    bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)$/;"	f	class:__anon90::CompareInvMempoolOrder
operator ()	./qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	./qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const QString &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	./qt/addresstablemodel.cpp	/^    bool operator()(const QString &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	./qt/bantablemodel.cpp	/^bool BannedNodeLessThan::operator()(const CCombinedBan& left, const CCombinedBan& right) const$/;"	f	class:BannedNodeLessThan
operator ()	./qt/paymentserver.cpp	/^      void operator()(X509* b) { X509_free(b); }$/;"	f	struct:X509Deleter
operator ()	./qt/paymentserver.cpp	/^      void operator()(X509_STORE* b) {$/;"	f	struct:X509StoreDeleter
operator ()	./qt/peertablemodel.cpp	/^bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombinedStats &right) const$/;"	f	class:NodeLessThan
operator ()	./qt/recentrequeststablemodel.cpp	/^bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const$/;"	f	class:RecentRequestEntryLessThan
operator ()	./qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	./qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const uint256 &b) const$/;"	f	struct:TxLessThan
operator ()	./qt/transactiontablemodel.cpp	/^    bool operator()(const uint256 &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	./rpc/blockchain.cpp	/^    bool operator()(const CBlockIndex* a, const CBlockIndex* b) const$/;"	f	struct:CompareBlocksByHeight
operator ()	./rpc/util.cpp	/^    UniValue operator()(const CNoDestination& dest) const$/;"	f	class:DescribeAddressVisitor
operator ()	./rpc/util.cpp	/^    UniValue operator()(const PKHash& keyID) const$/;"	f	class:DescribeAddressVisitor
operator ()	./rpc/util.cpp	/^    UniValue operator()(const ScriptHash& scriptID) const$/;"	f	class:DescribeAddressVisitor
operator ()	./rpc/util.cpp	/^    UniValue operator()(const WitnessUnknown& id) const$/;"	f	class:DescribeAddressVisitor
operator ()	./rpc/util.cpp	/^    UniValue operator()(const WitnessV0KeyHash& id) const$/;"	f	class:DescribeAddressVisitor
operator ()	./rpc/util.cpp	/^    UniValue operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:DescribeAddressVisitor
operator ()	./script/sigcache.h	/^    uint32_t operator()(const uint256& key) const$/;"	f	class:SignatureCacheHasher
operator ()	./script/standard.cpp	/^    bool operator()(const CNoDestination &dest) const {$/;"	f	class:__anon86::CScriptVisitor
operator ()	./script/standard.cpp	/^    bool operator()(const PKHash &keyID) const {$/;"	f	class:__anon86::CScriptVisitor
operator ()	./script/standard.cpp	/^    bool operator()(const ScriptHash &scriptID) const {$/;"	f	class:__anon86::CScriptVisitor
operator ()	./script/standard.cpp	/^    bool operator()(const WitnessUnknown& id) const$/;"	f	class:__anon86::CScriptVisitor
operator ()	./script/standard.cpp	/^    bool operator()(const WitnessV0KeyHash& id) const$/;"	f	class:__anon86::CScriptVisitor
operator ()	./script/standard.cpp	/^    bool operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:__anon86::CScriptVisitor
operator ()	./test/bip32_tests.cpp	/^    TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {$/;"	f	struct:TestVector
operator ()	./test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FailingCheck
operator ()	./test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FakeCheck
operator ()	./test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FakeCheckCheckCompletion
operator ()	./test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FrozenCleanupCheck
operator ()	./test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:MemoryCheck
operator ()	./test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:UniqueCheck
operator ()	./test/miner_tests.cpp	/^    bool operator() (const std::runtime_error& e) const {$/;"	f	class:HasReason
operator ()	./threadinterrupt.cpp	/^void CThreadInterrupt::operator()()$/;"	f	class:CThreadInterrupt
operator ()	./txmempool.cpp	/^    bool operator()(const CTxMemPool::indexed_transaction_set::const_iterator& a, const CTxMemPool::indexed_transaction_set::const_iterator& b)$/;"	f	class:__anon74::DepthAndScoreComparator
operator ()	./txmempool.h	/^        bool operator()(const txiter &a, const txiter &b) const {$/;"	f	struct:CTxMemPool::CompareIteratorByHash
operator ()	./txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
operator ()	./txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const$/;"	f	class:CompareTxMemPoolEntryByEntryTime
operator ()	./txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const$/;"	f	class:CompareTxMemPoolEntryByScore
operator ()	./txmempool.h	/^    bool operator()(const T& a, const T& b) const$/;"	f	class:CompareTxMemPoolEntryByAncestorFee
operator ()	./txmempool.h	/^    result_type operator() (const CTransactionRef& tx) const$/;"	f	struct:mempoolentry_txid
operator ()	./txmempool.h	/^    result_type operator() (const CTxMemPoolEntry &entry) const$/;"	f	struct:mempoolentry_txid
operator ()	./txmempool.h	/^    size_t operator()(const uint256& txid) const {$/;"	f	class:SaltedTxidHasher
operator ()	./txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }$/;"	f	struct:update_fee_delta
operator ()	./txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateLockPoints(lp); }$/;"	f	struct:update_lock_points
operator ()	./txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_ancestor_state
operator ()	./txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_descendant_state
operator ()	./util/bytevectorhash.cpp	/^size_t ByteVectorHash::operator()(const std::vector<unsigned char>& input) const$/;"	f	class:ByteVectorHash
operator ()	./validation.cpp	/^        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {$/;"	f	struct:__anon49::CBlockIndexWorkComparator
operator ()	./validation.cpp	/^bool CScriptCheck::operator()() {$/;"	f	class:CScriptCheck
operator ()	./validation.h	/^    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }$/;"	f	struct:BlockHasher
operator ()	./wallet/coinselection.cpp	/^    bool operator()(const OutputGroup& a, const OutputGroup& b) const$/;"	f	struct:__anon119
operator ()	./wallet/rpcwallet.cpp	/^    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }$/;"	f	class:DescribeWalletAddressVisitor
operator ()	./wallet/rpcwallet.cpp	/^    UniValue operator()(const PKHash& pkhash) const$/;"	f	class:DescribeWalletAddressVisitor
operator ()	./wallet/rpcwallet.cpp	/^    UniValue operator()(const ScriptHash& scripthash) const$/;"	f	class:DescribeWalletAddressVisitor
operator ()	./wallet/rpcwallet.cpp	/^    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }$/;"	f	class:DescribeWalletAddressVisitor
operator ()	./wallet/rpcwallet.cpp	/^    UniValue operator()(const WitnessV0KeyHash& id) const$/;"	f	class:DescribeWalletAddressVisitor
operator ()	./wallet/rpcwallet.cpp	/^    UniValue operator()(const WitnessV0ScriptHash& id) const$/;"	f	class:DescribeWalletAddressVisitor
operator *	./arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	./arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	./prevector.h	/^        T& operator*() const { return *ptr; }$/;"	f	class:prevector::iterator
operator *	./prevector.h	/^        T& operator*() { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *	./prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_iterator
operator *	./prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator *	./prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *=	./arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)$/;"	f	class:base_uint
operator *=	./arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)$/;"	f	class:base_uint
operator +	./arith_uint256.h	/^    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }$/;"	f	class:base_uint
operator +	./prevector.h	/^        const_iterator operator+(size_type n) { return const_iterator(ptr + n); }$/;"	f	class:prevector::const_iterator
operator +	./prevector.h	/^        iterator operator+(size_type n) { return iterator(ptr + n); }$/;"	f	class:prevector::iterator
operator +	./script/script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	./script/script.h	/^    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum
operator +	./script/script.h	/^    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}$/;"	f	class:CScriptNum
operator +	./streams.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	./test/scriptnum10.h	/^    inline CScriptNum10 operator+(   const CScriptNum10& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum10
operator +	./test/scriptnum10.h	/^    inline CScriptNum10 operator+(   const int64_t& rhs)    const { return CScriptNum10(m_value + rhs);}$/;"	f	class:CScriptNum10
operator ++	./arith_uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	./arith_uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator ++	./prevector.h	/^        const_iterator operator++(int) { const_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator ++	./prevector.h	/^        const_iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::const_iterator
operator ++	./prevector.h	/^        const_reverse_iterator operator++(int) { const_reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	./prevector.h	/^        const_reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	./prevector.h	/^        iterator operator++(int) { iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::iterator
operator ++	./prevector.h	/^        iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::iterator
operator ++	./prevector.h	/^        reverse_iterator operator++(int) { reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator ++	./prevector.h	/^        reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::reverse_iterator
operator +=	./arith_uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	./arith_uint256.h	/^    base_uint& operator+=(uint64_t b64)$/;"	f	class:base_uint
operator +=	./policy/feerate.h	/^    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }$/;"	f	class:CFeeRate
operator +=	./prevector.h	/^        const_iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::const_iterator
operator +=	./prevector.h	/^        iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::iterator
operator +=	./script/script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	./script/script.h	/^    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator +=	./script/script.h	/^    inline CScriptNum& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator +=	./streams.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator +=	./test/dbwrapper_tests.cpp	/^    StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }$/;"	f	struct:StringContentsSerializer
operator +=	./test/dbwrapper_tests.cpp	/^    StringContentsSerializer& operator+=(const std::string& s) {$/;"	f	struct:StringContentsSerializer
operator +=	./test/scriptnum10.h	/^    inline CScriptNum10& operator+=( const CScriptNum10& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum10
operator +=	./test/scriptnum10.h	/^    inline CScriptNum10& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator -	./arith_uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	./arith_uint256.h	/^    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }$/;"	f	class:base_uint
operator -	./prevector.h	/^        const_iterator operator-(size_type n) { return const_iterator(ptr - n); }$/;"	f	class:prevector::const_iterator
operator -	./prevector.h	/^        difference_type friend operator-(const_iterator a, const_iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::const_iterator
operator -	./prevector.h	/^        difference_type friend operator-(iterator a, iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::iterator
operator -	./prevector.h	/^        iterator operator-(size_type n) { return iterator(ptr - n); }$/;"	f	class:prevector::iterator
operator -	./script/script.h	/^    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum
operator -	./script/script.h	/^    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}$/;"	f	class:CScriptNum
operator -	./script/script.h	/^    inline CScriptNum operator-()                         const$/;"	f	class:CScriptNum
operator -	./test/scriptnum10.h	/^    inline CScriptNum10 operator-(   const CScriptNum10& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum10
operator -	./test/scriptnum10.h	/^    inline CScriptNum10 operator-(   const int64_t& rhs)    const { return CScriptNum10(m_value - rhs);}$/;"	f	class:CScriptNum10
operator -	./test/scriptnum10.h	/^    inline CScriptNum10 operator-()                         const$/;"	f	class:CScriptNum10
operator --	./arith_uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	./arith_uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator --	./prevector.h	/^        const_iterator operator--(int) { const_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator --	./prevector.h	/^        const_iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::const_iterator
operator --	./prevector.h	/^        const_reverse_iterator operator--(int) { const_reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator --	./prevector.h	/^        const_reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator --	./prevector.h	/^        iterator operator--(int) { iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::iterator
operator --	./prevector.h	/^        iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::iterator
operator --	./prevector.h	/^        reverse_iterator operator--(int) { reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator --	./prevector.h	/^        reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::reverse_iterator
operator -=	./arith_uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	./arith_uint256.h	/^    base_uint& operator-=(uint64_t b64)$/;"	f	class:base_uint
operator -=	./prevector.h	/^        const_iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::const_iterator
operator -=	./prevector.h	/^        iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::iterator
operator -=	./script/script.h	/^    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator -=	./script/script.h	/^    inline CScriptNum& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator -=	./test/scriptnum10.h	/^    inline CScriptNum10& operator-=( const CScriptNum10& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum10
operator -=	./test/scriptnum10.h	/^    inline CScriptNum10& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator ->	./prevector.h	/^        T* operator->() const { return ptr; }$/;"	f	class:prevector::iterator
operator ->	./prevector.h	/^        T* operator->() { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator ->	./prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_iterator
operator ->	./prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ->	./prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator /	./arith_uint256.h	/^    friend inline const base_uint operator\/(const base_uint& a, const base_uint& b) { return base_uint(a) \/= b; }$/;"	f	class:base_uint
operator /=	./arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator\/=(const base_uint& b)$/;"	f	class:base_uint
operator <	./arith_uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }$/;"	f	class:base_uint
operator <	./netaddress.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	./netaddress.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	./netaddress.cpp	/^bool operator<(const CSubNet& a, const CSubNet& b)$/;"	f
operator <	./policy/feerate.h	/^    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <	./prevector.h	/^        bool operator<(const_iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::const_iterator
operator <	./prevector.h	/^        bool operator<(iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::iterator
operator <	./prevector.h	/^    bool operator<(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator <	./primitives/transaction.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	./protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	./pubkey.h	/^    friend bool operator<(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator <	./qt/coincontroldialog.cpp	/^bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {$/;"	f	class:CCoinControlWidgetItem
operator <	./script/script.h	/^    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum
operator <	./script/script.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum
operator <	./script/standard.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	./script/standard.h	/^    friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator <	./test/scriptnum10.h	/^    inline bool operator< (const CScriptNum10& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum10
operator <	./test/scriptnum10.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum10
operator <	./uint256.h	/^    friend inline bool operator<(const base_blob& a, const base_blob& b) { return a.Compare(b) < 0; }$/;"	f	class:base_blob
operator <	./wallet/coinselection.h	/^    bool operator<(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator <<	./arith_uint256.h	/^    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }$/;"	f	class:base_uint
operator <<	./hash.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<	./leveldb/util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator <<	./qt/notificator.cpp	/^QDBusArgument &operator<<(QDBusArgument &a, const FreedesktopImage &i)$/;"	f
operator <<	./script/script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	./script/script.h	/^    CScript& operator<<(const CScriptNum& b)$/;"	f	class:CScript
operator <<	./script/script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	./script/script.h	/^    CScript& operator<<(int64_t b) { return push_int64(b); }$/;"	f	class:CScript
operator <<	./script/script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	./serialize.h	/^    CSizeComputer& operator<<(const T& obj)$/;"	f	class:CSizeComputer
operator <<	./streams.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	./streams.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	./streams.h	/^    CVectorWriter& operator<<(const T& obj)$/;"	f	class:CVectorWriter
operator <<	./streams.h	/^    OverrideStream<Stream>& operator<<(const T& obj)$/;"	f	class:OverrideStream
operator <<	./test/setup_common.cpp	/^std::ostream& operator<<(std::ostream& os, const uint256& num)$/;"	f
operator <<	./test/setup_common.h	/^std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::ostream>::type& stream, const T& e)$/;"	f
operator <<=	./arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	./arith_uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }$/;"	f	class:base_uint
operator <=	./policy/feerate.h	/^    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <=	./prevector.h	/^        bool operator<=(const_iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::const_iterator
operator <=	./prevector.h	/^        bool operator<=(iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::iterator
operator <=	./script/script.h	/^    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum
operator <=	./script/script.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum
operator <=	./test/scriptnum10.h	/^    inline bool operator<=(const CScriptNum10& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator <=	./test/scriptnum10.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum10
operator =	./arith_uint256.h	/^    base_uint& operator=(const base_uint& b)$/;"	f	class:base_uint
operator =	./arith_uint256.h	/^    base_uint& operator=(uint64_t b)$/;"	f	class:base_uint
operator =	./leveldb/include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator =	./prevector.h	/^    prevector& operator=(const prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
operator =	./prevector.h	/^    prevector& operator=(prevector<N, T, Size, Diff>&& other) {$/;"	f	class:prevector
operator =	./qt/walletmodel.h	/^        UnlockContext& operator=(UnlockContext&& rhs) { CopyFrom(std::move(rhs)); return *this; }$/;"	f	class:WalletModel::UnlockContext
operator =	./script/script.h	/^    inline CScriptNum& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator =	./test/scriptnum10.h	/^    inline CScriptNum10& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator ==	./arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }$/;"	f	class:base_uint
operator ==	./arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }$/;"	f	class:base_uint
operator ==	./chain.h	/^    friend bool operator==(const CChain &a, const CChain &b) {$/;"	f	class:CChain
operator ==	./flatfile.h	/^    friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {$/;"	f	struct:FlatFilePos
operator ==	./key.h	/^    friend bool operator==(const CExtKey& a, const CExtKey& b)$/;"	f	struct:CExtKey
operator ==	./key.h	/^    friend bool operator==(const CKey& a, const CKey& b)$/;"	f	class:CKey
operator ==	./leveldb/include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ==	./netaddress.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	./netaddress.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	./netaddress.cpp	/^bool operator==(const CSubNet& a, const CSubNet& b)$/;"	f
operator ==	./policy/feerate.h	/^    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator ==	./prevector.h	/^        bool operator==(const_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_iterator
operator ==	./prevector.h	/^        bool operator==(const_reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ==	./prevector.h	/^        bool operator==(iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::iterator
operator ==	./prevector.h	/^        bool operator==(reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator ==	./prevector.h	/^    bool operator==(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator ==	./primitives/transaction.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	./primitives/transaction.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	./primitives/transaction.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	./primitives/transaction.h	/^    friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	./pubkey.h	/^    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)$/;"	f	struct:CExtPubKey
operator ==	./pubkey.h	/^    friend bool operator==(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator ==	./script/script.h	/^    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum
operator ==	./script/script.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum
operator ==	./script/sign.h	/^    friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)$/;"	f	struct:KeyOriginInfo
operator ==	./script/standard.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	./script/standard.h	/^    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator ==	./test/coins_tests.cpp	/^bool operator==(const Coin &a, const Coin &b) {$/;"	f	namespace:__anon60
operator ==	./test/scriptnum10.h	/^    inline bool operator==(const CScriptNum10& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum10
operator ==	./test/scriptnum10.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum10
operator ==	./test/serialize_tests.cpp	/^    bool operator==(const CSerializeMethodsTestSingle& rhs)$/;"	f	class:CSerializeMethodsTestSingle
operator ==	./uint256.h	/^    friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }$/;"	f	class:base_blob
operator ==	./wallet/coinselection.h	/^    bool operator==(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator ==	./wallet/db.cpp	/^bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const$/;"	f	class:WalletDatabaseFileId
operator >	./arith_uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }$/;"	f	class:base_uint
operator >	./policy/feerate.h	/^    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >	./prevector.h	/^        bool operator>(const_iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::const_iterator
operator >	./prevector.h	/^        bool operator>(iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::iterator
operator >	./script/script.h	/^    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum
operator >	./script/script.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum
operator >	./test/scriptnum10.h	/^    inline bool operator> (const CScriptNum10& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum10
operator >	./test/scriptnum10.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum10
operator >=	./arith_uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }$/;"	f	class:base_uint
operator >=	./policy/feerate.h	/^    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >=	./prevector.h	/^        bool operator>=(const_iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::const_iterator
operator >=	./prevector.h	/^        bool operator>=(iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::iterator
operator >=	./script/script.h	/^    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum
operator >=	./script/script.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum
operator >=	./test/scriptnum10.h	/^    inline bool operator>=(const CScriptNum10& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator >=	./test/scriptnum10.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum10
operator >>	./arith_uint256.h	/^    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }$/;"	f	class:base_uint
operator >>	./hash.h	/^    CHashVerifier<Source>& operator>>(T&& obj)$/;"	f	class:CHashVerifier
operator >>	./qt/notificator.cpp	/^const QDBusArgument &operator>>(const QDBusArgument &a, FreedesktopImage &i)$/;"	f
operator >>	./script/bitcoinconsensus.cpp	/^    TxInputStream& operator>>(T&& obj)$/;"	f	class:__anon81::TxInputStream
operator >>	./streams.h	/^    CAutoFile& operator>>(T&& obj)$/;"	f	class:CAutoFile
operator >>	./streams.h	/^    CBufferedFile& operator>>(T&& obj) {$/;"	f	class:CBufferedFile
operator >>	./streams.h	/^    CDataStream& operator>>(T&& obj)$/;"	f	class:CDataStream
operator >>	./streams.h	/^    OverrideStream<Stream>& operator>>(T&& obj)$/;"	f	class:OverrideStream
operator >>	./streams.h	/^    VectorReader& operator>>(T& obj)$/;"	f	class:VectorReader
operator >>=	./arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator Dbt*	./wallet/db.cpp	/^BerkeleyBatch::SafeDbt::operator Dbt*()$/;"	f	class:BerkeleyBatch::SafeDbt
operator []	./chain.h	/^    CBlockIndex *operator[](int nHeight) const {$/;"	f	class:CChain
operator []	./leveldb/include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
operator []	./prevector.h	/^        T& operator[](size_type pos) { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	./prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::const_iterator
operator []	./prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	./prevector.h	/^    T& operator[](size_type pos) {$/;"	f	class:prevector
operator []	./prevector.h	/^    const T& operator[](size_type pos) const {$/;"	f	class:prevector
operator []	./pubkey.h	/^    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }$/;"	f	class:CPubKey
operator []	./streams.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	./streams.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	./univalue/lib/univalue.cpp	/^const UniValue& UniValue::operator[](const std::string& key) const$/;"	f	class:UniValue
operator []	./univalue/lib/univalue.cpp	/^const UniValue& UniValue::operator[](size_t index) const$/;"	f	class:UniValue
operator ^	./arith_uint256.h	/^    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }$/;"	f	class:base_uint
operator ^=	./arith_uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	./arith_uint256.h	/^    base_uint& operator^=(uint64_t b)$/;"	f	class:base_uint
operator bool	./sync.h	/^    operator bool() const$/;"	f	class:CSemaphoreGrant
operator bool	./sync.h	/^    operator bool()$/;"	f	class:UniqueLock
operator bool	./threadinterrupt.cpp	/^CThreadInterrupt::operator bool() const$/;"	f	class:CThreadInterrupt
operator |	./arith_uint256.h	/^    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }$/;"	f	class:base_uint
operator |=	./arith_uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	./arith_uint256.h	/^    base_uint& operator|=(uint64_t b)$/;"	f	class:base_uint
operator ~	./arith_uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
optIndent	./util/system.cpp	/^static const int optIndent = 2;$/;"	v	file:
option_config_	./leveldb/db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest	file:
options	./dbwrapper.h	/^    leveldb::Options options;$/;"	m	class:CDBWrapper
options	./leveldb/table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	./leveldb/table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
optionsAction	./qt/bitcoingui.h	/^    QAction* optionsAction = nullptr;$/;"	m	class:BitcoinGUI
optionsClicked	./qt/bitcoingui.cpp	/^void BitcoinGUI::optionsClicked()$/;"	f	class:BitcoinGUI
optionsModel	./qt/bitcoin.h	/^    OptionsModel *optionsModel;$/;"	m	class:BitcoinApplication
optionsModel	./qt/bitcoingui.h	/^    OptionsModel *optionsModel;$/;"	m	class:UnitDisplayStatusBarControl
optionsModel	./qt/clientmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:ClientModel
optionsModel	./qt/paymentserver.h	/^    OptionsModel *optionsModel;$/;"	m	class:PaymentServer
optionsModel	./qt/walletmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:WalletModel
options_	./leveldb/db/autocompact_test.cc	/^  Options options_;$/;"	m	class:leveldb::AutoCompactTest	file:
options_	./leveldb/db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	./leveldb/db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	./leveldb/db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	./leveldb/db/fault_injection_test.cc	/^  Options options_;$/;"	m	class:leveldb::FaultInjectionTest	file:
options_	./leveldb/db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon30::Repairer	file:
options_	./leveldb/db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	./leveldb/db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	./leveldb/table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	./leveldb/table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	./leveldb/table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
order	./qt/bantablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:BannedNodeLessThan
order	./qt/peertablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:NodeLessThan
order	./qt/recentrequeststablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:RecentRequestEntryLessThan
orders	./test/raii_event_tests.cpp	/^static std::map<void*, uint16_t> orders;$/;"	v	file:
org.bitcoin	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^package org.bitcoin;$/;"	p
org.bitcoin	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^package org.bitcoin;$/;"	p
org.bitcoin	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java	/^package org.bitcoin;$/;"	p
org.bitcoin	./secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^package org.bitcoin;$/;"	p
origins	./script/sign.h	/^    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;$/;"	m	struct:final
orphan_work_set	./net.h	/^    std::set<uint256> orphan_work_set;$/;"	m	class:CNode
other	./support/lockedpool.h	/^    Arena(const Arena& other) = delete; \/\/ non construction-copyable$/;"	m	class:Arena
other	./support/lockedpool.h	/^    LockedPool(const LockedPool& other) = delete; \/\/ non construction-copyable$/;"	m	class:LockedPool
out	./coins.h	/^    CTxOut out;$/;"	m	class:Coin
out	./rest.cpp	/^    CTxOut out;$/;"	m	struct:CCoin	file:
outOfSyncWarningClicked	./qt/walletframe.cpp	/^void WalletFrame::outOfSyncWarningClicked()$/;"	f	class:WalletFrame
outbound_message_high_water_mark	./zmq/zmqabstractnotifier.h	/^    int outbound_message_high_water_mark; \/\/ aka SNDHWM$/;"	m	class:CZMQAbstractNotifier
outer	./crypto/hmac_sha256.h	/^    CSHA256 outer;$/;"	m	class:CHMAC_SHA256
outer	./crypto/hmac_sha512.h	/^    CSHA512 outer;$/;"	m	class:CHMAC_SHA512
outer	./secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon112
outfile	./leveldb/db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outpoint	./txdb.cpp	/^    COutPoint* outpoint;$/;"	m	struct:__anon121::CoinEntry	file:
outpoint	./wallet/coinselection.h	/^    COutPoint outpoint;$/;"	m	class:CInputCoin
outputEscape	./univalue/gen/gen.cpp	/^static void outputEscape()$/;"	f	file:
outputs	./leveldb/db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outputs	./psbt.h	/^    std::vector<PSBTOutput> outputs;$/;"	m	struct:PartiallySignedTransaction
overlapped_bytes_	./leveldb/db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
override	./bench/bench.h	/^    void footer() override;$/;"	m	class:benchmark::ConsolePrinter
override	./bench/bench.h	/^    void footer() override;$/;"	m	class:benchmark::PlotlyPrinter
override	./bench/bench.h	/^    void header() override;$/;"	m	class:benchmark::ConsolePrinter
override	./bench/bench.h	/^    void header() override;$/;"	m	class:benchmark::PlotlyPrinter
override	./bench/bench.h	/^    void result(const State& state) override;$/;"	m	class:benchmark::ConsolePrinter
override	./bench/bench.h	/^    void result(const State& state) override;$/;"	m	class:benchmark::PlotlyPrinter
override	./coins.h	/^    CCoinsViewCursor *Cursor() const override;$/;"	m	class:CCoinsViewBacked
override	./coins.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:CCoinsViewBacked
override	./coins.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:CCoinsViewCache
override	./coins.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewBacked
override	./coins.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewCache
override	./coins.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:CCoinsViewBacked
override	./coins.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:CCoinsViewCache
override	./coins.h	/^    size_t EstimateSize() const override;$/;"	m	class:CCoinsViewBacked
override	./coins.h	/^    std::vector<uint256> GetHeadBlocks() const override;$/;"	m	class:CCoinsViewBacked
override	./coins.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:CCoinsViewBacked
override	./coins.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:CCoinsViewCache
override	./dummywallet.cpp	/^    void AddWalletOptions() const override;$/;"	m	class:DummyWalletInit	file:
override	./index/base.h	/^                        const std::vector<CTransactionRef>& txn_conflicted) override;$/;"	m	class:BaseIndex
override	./index/base.h	/^    void ChainStateFlushed(const CBlockLocator& locator) override;$/;"	m	class:BaseIndex
override	./index/blockfilterindex.h	/^    bool CommitInternal(CDBBatch& batch) override;$/;"	m	class:final
override	./index/blockfilterindex.h	/^    bool Init() override;$/;"	m	class:final
override	./index/blockfilterindex.h	/^    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;$/;"	m	class:final
override	./index/blockfilterindex.h	/^    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;$/;"	m	class:final
override	./index/txindex.h	/^    BaseIndex::DB& GetDB() const override;$/;"	m	class:final
override	./index/txindex.h	/^    bool Init() override;$/;"	m	class:final
override	./index/txindex.h	/^    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;$/;"	m	class:final
override	./index/txindex.h	/^    virtual ~TxIndex() override;$/;"	m	class:final
override	./keystore.h	/^    bool AddCScript(const CScript& redeemScript) override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool AddWatchOnly(const CScript &dest) override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool GetKey(const CKeyID &address, CKey &keyOut) const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool HaveCScript(const CScriptID &hash) const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool HaveKey(const CKeyID &address) const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool HaveWatchOnly() const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool HaveWatchOnly(const CScript &dest) const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    bool RemoveWatchOnly(const CScript &dest) override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    std::set<CKeyID> GetKeys() const override;$/;"	m	class:CBasicKeyStore
override	./keystore.h	/^    std::set<CScriptID> GetCScripts() const override;$/;"	m	class:CBasicKeyStore
override	./net_processing.h	/^    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;$/;"	m	class:final
override	./net_processing.h	/^    void BlockChecked(const CBlock& block, const CValidationState& state) override;$/;"	m	class:final
override	./net_processing.h	/^    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:final
override	./net_processing.h	/^    void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;$/;"	m	class:final
override	./net_processing.h	/^    void InitializeNode(CNode* pnode) override;$/;"	m	class:final
override	./net_processing.h	/^    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;$/;"	m	class:final
override	./net_processing.h	/^    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;$/;"	m	class:final
override	./script/interpreter.h	/^    bool CheckLockTime(const CScriptNum& nLockTime) const override;$/;"	m	class:GenericTransactionSignatureChecker
override	./script/interpreter.h	/^    bool CheckSequence(const CScriptNum& nSequence) const override;$/;"	m	class:GenericTransactionSignatureChecker
override	./script/interpreter.h	/^    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:GenericTransactionSignatureChecker
override	./script/sigcache.h	/^    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const override;$/;"	m	class:CachingTransactionSignatureChecker
override	./script/sign.cpp	/^    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:final	file:
override	./script/sign.h	/^    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:MutableTransactionSignatureCreator
override	./script/sign.h	/^    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;$/;"	m	class:HidingSigningProvider
override	./script/sign.h	/^    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;$/;"	m	struct:final
override	./script/sign.h	/^    bool GetKey(const CKeyID& keyid, CKey& key) const override;$/;"	m	class:HidingSigningProvider
override	./script/sign.h	/^    bool GetKey(const CKeyID& keyid, CKey& key) const override;$/;"	m	struct:final
override	./script/sign.h	/^    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;$/;"	m	class:HidingSigningProvider
override	./script/sign.h	/^    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;$/;"	m	struct:final
override	./script/sign.h	/^    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;$/;"	m	class:HidingSigningProvider
override	./script/sign.h	/^    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;$/;"	m	struct:final
override	./support/lockedpool.cpp	/^    size_t GetLimit() override;$/;"	m	class:PosixLockedPageAllocator	file:
override	./support/lockedpool.cpp	/^    size_t GetLimit() override;$/;"	m	class:Win32LockedPageAllocator	file:
override	./support/lockedpool.cpp	/^    void FreeLocked(void* addr, size_t len) override;$/;"	m	class:PosixLockedPageAllocator	file:
override	./support/lockedpool.cpp	/^    void FreeLocked(void* addr, size_t len) override;$/;"	m	class:Win32LockedPageAllocator	file:
override	./support/lockedpool.cpp	/^    void* AllocateLocked(size_t len, bool *lockingSuccess) override;$/;"	m	class:PosixLockedPageAllocator	file:
override	./support/lockedpool.cpp	/^    void* AllocateLocked(size_t len, bool *lockingSuccess) override;$/;"	m	class:Win32LockedPageAllocator	file:
override	./txdb.h	/^    CCoinsViewCursor *Cursor() const override;$/;"	m	class:final
override	./txdb.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:final
override	./txdb.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:final
override	./txdb.h	/^    bool GetKey(COutPoint &key) const override;$/;"	m	class:CCoinsViewDBCursor
override	./txdb.h	/^    bool GetValue(Coin &coin) const override;$/;"	m	class:CCoinsViewDBCursor
override	./txdb.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:final
override	./txdb.h	/^    bool Valid() const override;$/;"	m	class:CCoinsViewDBCursor
override	./txdb.h	/^    size_t EstimateSize() const override;$/;"	m	class:final
override	./txdb.h	/^    std::vector<uint256> GetHeadBlocks() const override;$/;"	m	class:final
override	./txdb.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:final
override	./txdb.h	/^    unsigned int GetValueSize() const override;$/;"	m	class:CCoinsViewDBCursor
override	./txdb.h	/^    void Next() override;$/;"	m	class:CCoinsViewDBCursor
override	./txmempool.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewMemPool
override	./wallet/crypter.h	/^    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;$/;"	m	class:CCryptoKeyStore
override	./wallet/crypter.h	/^    bool GetKey(const CKeyID &address, CKey& keyOut) const override;$/;"	m	class:CCryptoKeyStore
override	./wallet/crypter.h	/^    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;$/;"	m	class:CCryptoKeyStore
override	./wallet/crypter.h	/^    bool HaveKey(const CKeyID &address) const override;$/;"	m	class:CCryptoKeyStore
override	./wallet/crypter.h	/^    std::set<CKeyID> GetKeys() const override;$/;"	m	class:CCryptoKeyStore
override	./wallet/init.cpp	/^    bool ParameterInteraction() const override;$/;"	m	class:WalletInit	file:
override	./wallet/init.cpp	/^    void AddWalletOptions() const override;$/;"	m	class:WalletInit	file:
override	./wallet/init.cpp	/^    void Construct(InitInterfaces& interfaces) const override;$/;"	m	class:WalletInit	file:
override	./wallet/wallet.h	/^    bool AddCScript(const CScript& redeemScript) override;$/;"	m	class:final
override	./wallet/wallet.h	/^    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;$/;"	m	class:final
override	./wallet/wallet.h	/^    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;$/;"	m	class:final
override	./wallet/wallet.h	/^    void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:final
override	./wallet/wallet.h	/^    void BlockDisconnected(const CBlock& block) override;$/;"	m	class:final
override	./wallet/wallet.h	/^    void ChainStateFlushed(const CBlockLocator& loc) override;$/;"	m	class:final
override	./wallet/wallet.h	/^    void TransactionAddedToMempool(const CTransactionRef& tx) override;$/;"	m	class:final
override	./wallet/wallet.h	/^    void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;$/;"	m	class:final
override	./wallet/wallet.h	/^    void UpdatedBlockTip() override;$/;"	m	class:final
override	./zmq/zmqnotificationinterface.h	/^    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:final
override	./zmq/zmqnotificationinterface.h	/^    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;$/;"	m	class:final
override	./zmq/zmqnotificationinterface.h	/^    void TransactionAddedToMempool(const CTransactionRef& tx) override;$/;"	m	class:final
override	./zmq/zmqnotificationinterface.h	/^    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;$/;"	m	class:final
override	./zmq/zmqpublishnotifier.h	/^    bool Initialize(void *pcontext) override;$/;"	m	class:CZMQAbstractPublishNotifier
override	./zmq/zmqpublishnotifier.h	/^    bool NotifyBlock(const CBlockIndex *pindex) override;$/;"	m	class:CZMQPublishHashBlockNotifier
override	./zmq/zmqpublishnotifier.h	/^    bool NotifyBlock(const CBlockIndex *pindex) override;$/;"	m	class:CZMQPublishRawBlockNotifier
override	./zmq/zmqpublishnotifier.h	/^    bool NotifyTransaction(const CTransaction &transaction) override;$/;"	m	class:CZMQPublishHashTransactionNotifier
override	./zmq/zmqpublishnotifier.h	/^    bool NotifyTransaction(const CTransaction &transaction) override;$/;"	m	class:CZMQPublishRawTransactionNotifier
override	./zmq/zmqpublishnotifier.h	/^    void Shutdown() override;$/;"	m	class:CZMQAbstractPublishNotifier
overviewAction	./qt/bitcoingui.h	/^    QAction* overviewAction = nullptr;$/;"	m	class:BitcoinGUI
overviewPage	./qt/walletview.h	/^    OverviewPage *overviewPage;$/;"	m	class:WalletView
owned_	./leveldb/db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owned_	./leveldb/table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	./leveldb/db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	./leveldb/db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon30::Repairer	file:
owns_info_log_	./leveldb/db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	./leveldb/db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon30::Repairer	file:
pContent	./leveldb/util/env_win.cc	/^    void* pContent;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
p_util_hexdigit	./util/strencodings.cpp	/^const signed char p_util_hexdigit[256] =$/;"	v
pad	./crypto/aes.h	/^    const bool pad;$/;"	m	class:AES256CBCDecrypt
pad	./crypto/aes.h	/^    const bool pad;$/;"	m	class:AES256CBCEncrypt
page_size	./support/lockedpool.cpp	/^    size_t page_size;$/;"	m	class:PosixLockedPageAllocator	file:
page_size	./support/lockedpool.cpp	/^    size_t page_size;$/;"	m	class:Win32LockedPageAllocator	file:
paint	./qt/overviewpage.cpp	/^    inline void paint(QPainter *painter, const QStyleOptionViewItem &option,$/;"	f	class:TxViewDelegate
paintEvent	./qt/splashscreen.cpp	/^void SplashScreen::paintEvent(QPaintEvent *event)$/;"	f	class:SplashScreen
paintEvent	./qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::paintEvent(QPaintEvent *)$/;"	f	class:TrafficGraphWidget
paintPath	./qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::paintPath(QPainterPath &path, QQueue<float> &samples)$/;"	f	class:TrafficGraphWidget
paramIdx	./rpc/client.cpp	/^    int paramIdx;           \/\/!< 0-based idx of param to convert$/;"	m	class:CRPCConvertParam	file:
paramName	./rpc/client.cpp	/^    std::string paramName;  \/\/!< parameter name$/;"	m	class:CRPCConvertParam	file:
parameterSetup	./qt/bitcoin.cpp	/^void BitcoinApplication::parameterSetup()$/;"	f	class:BitcoinApplication
params	./rpc/server.h	/^    UniValue params;$/;"	m	class:JSONRPCRequest
paramsDummy	./test/versionbits_tests.cpp	/^static const Consensus::Params paramsDummy = Consensus::Params();$/;"	v	file:
paranoid_checks	./leveldb/include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
parent	./dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBBatch
parent	./dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBIterator
parent	./memusage.h	/^    void* parent;$/;"	m	struct:memusage::stl_tree_node
parent	./qt/addresstablemodel.cpp	/^    AddressTableModel *parent;$/;"	m	class:AddressTablePriv	file:
parent	./qt/notificator.h	/^    QWidget *parent;$/;"	m	class:Notificator
parent	./qt/transactiontablemodel.cpp	/^    TransactionTableModel *parent;$/;"	m	class:TransactionTablePriv	file:
parents	./txmempool.h	/^        setEntries parents;$/;"	m	struct:CTxMemPool::TxLinks
parse	./qt/bitcoinamountfield.cpp	/^    CAmount parse(const QString &text, bool *valid_out=nullptr) const$/;"	f	class:AmountSpinBox	file:
parse	./qt/bitcoinunits.cpp	/^bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)$/;"	f	class:BitcoinUnits
parse	./qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::parse(const QByteArray& data)$/;"	f	class:PaymentRequestPlus
parse	./rpc/server.cpp	/^void JSONRPCRequest::parse(const UniValue& valRequest)$/;"	f	class:JSONRPCRequest
parseBitcoinURI	./qt/guiutil.cpp	/^bool parseBitcoinURI(QString uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
parseBitcoinURI	./qt/guiutil.cpp	/^bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
parseIntAndAdvance	./tinyformat.h	/^inline int parseIntAndAdvance(const char*& c)$/;"	f	namespace:tinyformat::detail
parse_b64der_cert	./qt/test/paymentservertests.cpp	/^X509 *parse_b64der_cert(const char* cert_data)$/;"	f
partialBlock	./net_processing.cpp	/^        std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  \/\/!< Optional, used for CMPCTBLOCK downloads$/;"	m	struct:__anon88::QueuedBlock	file:
partial_sigs	./psbt.h	/^    std::map<CKeyID, SigPair> partial_sigs;$/;"	m	struct:PSBTInput
pass	./policy/fees.h	/^    EstimatorBucket pass;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
passed	./test/prevector_tests.cpp	/^    bool passed = true;$/;"	m	class:prevector_tester	file:
password	./netbase.cpp	/^    std::string password;$/;"	m	struct:ProxyCredentials	file:
pasteEntry	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)$/;"	f	class:SendCoinsDialog
path	./httpserver.cpp	/^    std::string path;$/;"	m	class:final	file:
path	./script/sign.h	/^    std::vector<uint32_t> path;$/;"	m	struct:KeyOriginInfo
pathAddr	./addrdb.h	/^    fs::path pathAddr;$/;"	m	class:CAddrDB
pathCached	./util/system.cpp	/^static fs::path pathCached;$/;"	v	file:
pathCachedNetSpecific	./util/system.cpp	/^static fs::path pathCachedNetSpecific;$/;"	v	file:
pathHandlers	./httpserver.cpp	/^std::vector<HTTPPathHandler> pathHandlers;$/;"	v
pathToCheck	./qt/intro.h	/^    QString pathToCheck;$/;"	m	class:Intro
payAmounts	./qt/coincontroldialog.cpp	/^QList<CAmount> CoinControlDialog::payAmounts;$/;"	m	class:CoinControlDialog	file:
payAmounts	./qt/coincontroldialog.h	/^    static QList<CAmount> payAmounts;$/;"	m	class:CoinControlDialog
paymentRequest	./qt/paymentrequestplus.h	/^    payments::PaymentRequest paymentRequest;$/;"	m	class:PaymentRequestPlus
paymentRequest	./qt/walletmodel.h	/^    PaymentRequestPlus paymentRequest;$/;"	m	class:SendCoinsRecipient
paymentServerTests	./qt/test/paymentservertests.cpp	/^void PaymentServerTests::paymentServerTests()$/;"	f	class:PaymentServerTests
paymentrequest1_cert1_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest1_cert1_BASE64 =$/;"	v
paymentrequest1_cert2_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest1_cert2_BASE64 =$/;"	v
paymentrequest2_cert1_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest2_cert1_BASE64 =$/;"	v
paymentrequest2_cert2_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest2_cert2_BASE64 =$/;"	v
paymentrequest3_cert1_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest3_cert1_BASE64 =$/;"	v
paymentrequest3_cert2_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest3_cert2_BASE64 =$/;"	v
paymentrequest4_cert1_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest4_cert1_BASE64 =$/;"	v
paymentrequest4_cert2_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest4_cert2_BASE64 =$/;"	v
paymentrequest5_cert1_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest5_cert1_BASE64 =$/;"	v
paymentrequest5_cert2_BASE64	./qt/test/paymentrequestdata.h	/^const char* paymentrequest5_cert2_BASE64 =$/;"	v
pblock	./miner.h	/^    CBlock* pblock;$/;"	m	class:BlockAssembler
pblock	./validation.cpp	/^    std::shared_ptr<const CBlock> pblock;$/;"	m	struct:PerBlockConnectTrace	file:
pblocktemplate	./miner.h	/^    std::unique_ptr<CBlockTemplate> pblocktemplate;$/;"	m	class:BlockAssembler
pblocktree	./validation.cpp	/^std::unique_ptr<CBlockTreeDB> pblocktree;$/;"	v
pchChecksum	./protocol.h	/^    uint8_t pchChecksum[CHECKSUM_SIZE];$/;"	m	class:CMessageHeader
pchCommand	./protocol.h	/^    char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchIPv4	./netaddress.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	./chainparams.h	/^    CMessageHeader::MessageStartChars pchMessageStart;$/;"	m	class:CChainParams
pchMessageStart	./protocol.h	/^    char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	./netaddress.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pcoinsTip	./validation.cpp	/^std::unique_ptr<CCoinsViewCache> pcoinsTip;$/;"	v
pcoinscatcher	./init.cpp	/^static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;$/;"	v	file:
pcoinsdbview	./validation.cpp	/^std::unique_ptr<CCoinsViewDB> pcoinsdbview;$/;"	v
pcontext	./zmq/zmqnotificationinterface.h	/^    void *pcontext;$/;"	m	class:final
pcursor	./txdb.h	/^    std::unique_ptr<CDBIterator> pcursor;$/;"	m	class:CCoinsViewDBCursor
pdb	./dbwrapper.h	/^    leveldb::DB* pdb;$/;"	m	class:CDBWrapper
pdb	./wallet/db.h	/^    Db* pdb;$/;"	m	class:BerkeleyBatch
pdfdir	./Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	./secp256k1/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	./univalue/Makefile	/^pdfdir = ${docdir}$/;"	m
peerAddr	./rpc/server.h	/^    std::string peerAddr;$/;"	m	class:JSONRPCRequest
peerLayoutAboutToChange	./qt/rpcconsole.cpp	/^void RPCConsole::peerLayoutAboutToChange()$/;"	f	class:RPCConsole
peerLayoutChanged	./qt/rpcconsole.cpp	/^void RPCConsole::peerLayoutChanged()$/;"	f	class:RPCConsole
peerLogic	./init.cpp	/^std::unique_ptr<PeerLogicValidation> peerLogic;$/;"	v
peerSelected	./qt/rpcconsole.cpp	/^void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelection &deselected)$/;"	f	class:RPCConsole
peerTableModel	./qt/clientmodel.h	/^    PeerTableModel *peerTableModel;$/;"	m	class:ClientModel
peer_connect_timeout	./init.cpp	/^int64_t peer_connect_timeout;$/;"	m	namespace:__anon123	file:
peersTableContextMenu	./qt/rpcconsole.h	/^    QMenu *peersTableContextMenu = nullptr;$/;"	m	class:RPCConsole
pending_handle	./leveldb/table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	./leveldb/table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	./leveldb/db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
penv	./dbwrapper.h	/^    leveldb::Env* penv;$/;"	m	class:CDBWrapper
period	./versionbits.h	/^    int period;$/;"	m	struct:BIP9Stats
phase	./leveldb/db/c_test.c	/^const char* phase = "";$/;"	v
phashBlock	./chain.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
pickDataDirectory	./qt/intro.cpp	/^bool Intro::pickDataDirectory(interfaces::Node& node)$/;"	f	class:Intro
pindex	./net_processing.cpp	/^        const CBlockIndex* pindex;                               \/\/!< Optional.$/;"	m	struct:__anon88::QueuedBlock	file:
pindex	./validation.cpp	/^    CBlockIndex* pindex = nullptr;$/;"	m	struct:PerBlockConnectTrace	file:
pindexBestForkBase	./validation.cpp	/^CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;$/;"	v
pindexBestForkTip	./validation.cpp	/^CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;$/;"	v
pindexBestHeader	./validation.cpp	/^CBlockIndex *pindexBestHeader = nullptr;$/;"	v
pindexBestHeaderSent	./net_processing.cpp	/^    const CBlockIndex *pindexBestHeaderSent;$/;"	m	struct:__anon89::CNodeState	file:
pindexBestInvalid	./validation.cpp	/^    CBlockIndex *&pindexBestInvalid = g_chainstate.pindexBestInvalid;$/;"	m	namespace:__anon50	file:
pindexBestInvalid	./validation.cpp	/^    CBlockIndex *pindexBestInvalid = nullptr;$/;"	m	class:CChainState	file:
pindexBestKnownBlock	./net_processing.cpp	/^    const CBlockIndex *pindexBestKnownBlock;$/;"	m	struct:__anon89::CNodeState	file:
pindexLastCommonBlock	./net_processing.cpp	/^    const CBlockIndex *pindexLastCommonBlock;$/;"	m	struct:__anon89::CNodeState	file:
ping	./rpc/net.cpp	/^static UniValue ping(const JSONRPCRequest& request)$/;"	f	file:
piter	./dbwrapper.h	/^    leveldb::Iterator *piter;$/;"	m	class:CDBIterator
pixmap	./qt/splashscreen.h	/^    QPixmap pixmap;$/;"	m	class:SplashScreen
pkgconfig_DATA	./secp256k1/Makefile	/^pkgconfig_DATA = libsecp256k1.pc$/;"	m
pkgconfig_DATA	./univalue/Makefile	/^pkgconfig_DATA = pc\/libunivalue.pc$/;"	m
pkgconfigdir	./secp256k1/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgconfigdir	./univalue/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	./Makefile	/^pkgdatadir = $(datadir)\/bitcoin$/;"	m
pkgdatadir	./secp256k1/Makefile	/^pkgdatadir = $(datadir)\/libsecp256k1$/;"	m
pkgdatadir	./univalue/Makefile	/^pkgdatadir = $(datadir)\/univalue$/;"	m
pkgincludedir	./Makefile	/^pkgincludedir = $(includedir)\/bitcoin$/;"	m
pkgincludedir	./secp256k1/Makefile	/^pkgincludedir = $(includedir)\/libsecp256k1$/;"	m
pkgincludedir	./univalue/Makefile	/^pkgincludedir = $(includedir)\/univalue$/;"	m
pkglibdir	./Makefile	/^pkglibdir = $(libdir)\/bitcoin$/;"	m
pkglibdir	./secp256k1/Makefile	/^pkglibdir = $(libdir)\/libsecp256k1$/;"	m
pkglibdir	./univalue/Makefile	/^pkglibdir = $(libdir)\/univalue$/;"	m
pkglibexecdir	./Makefile	/^pkglibexecdir = $(libexecdir)\/bitcoin$/;"	m
pkglibexecdir	./secp256k1/Makefile	/^pkglibexecdir = $(libexecdir)\/libsecp256k1$/;"	m
pkglibexecdir	./univalue/Makefile	/^pkglibexecdir = $(libexecdir)\/univalue$/;"	m
plain	./crypto/ctaes/test.c	/^    const char* plain;$/;"	m	struct:__anon44	file:
platformId	./qt/platformstyle.cpp	/^    const char *platformId;$/;"	m	struct:__anon66	file:
platformStyle	./qt/bitcoin.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:BitcoinApplication
platformStyle	./qt/bitcoingui.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:BitcoinGUI
platformStyle	./qt/coincontroldialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:CoinControlDialog
platformStyle	./qt/overviewpage.cpp	/^    const PlatformStyle *platformStyle;$/;"	m	class:TxViewDelegate	file:
platformStyle	./qt/receivecoinsdialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:ReceiveCoinsDialog
platformStyle	./qt/rpcconsole.h	/^    const PlatformStyle* const platformStyle;$/;"	m	class:RPCConsole
platformStyle	./qt/sendcoinsdialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SendCoinsDialog
platformStyle	./qt/sendcoinsentry.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SendCoinsEntry
platformStyle	./qt/signverifymessagedialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SignVerifyMessageDialog
platformStyle	./qt/transactiontablemodel.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:TransactionTableModel
platformStyle	./qt/walletframe.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:WalletFrame
platformStyle	./qt/walletview.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:WalletView
platform_styles	./qt/platformstyle.cpp	/^} platform_styles[] = {$/;"	v	typeref:struct:__anon66	file:
platform_styles_count	./qt/platformstyle.cpp	/^static const unsigned platform_styles_count = sizeof(platform_styles)\/sizeof(*platform_styles);$/;"	v	file:
please_keep	./cuckoocache.h	/^    inline void please_keep(uint32_t n) const$/;"	f	class:CuckooCache::cache
pn	./arith_uint256.h	/^    uint32_t pn[WIDTH];$/;"	m	class:base_uint
pnSeed6_main	./chainparamsseeds.h	/^static SeedSpec6 pnSeed6_main[] = {$/;"	v
pnSeed6_test	./chainparamsseeds.h	/^static SeedSpec6 pnSeed6_test[] = {$/;"	v
point	./secp256k1/src/bench_ecdh.c	/^    secp256k1_pubkey point;$/;"	m	struct:__anon108	file:
pointer	./prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::iterator
pointer	./prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::reverse_iterator
pointer	./prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_iterator
pointer	./prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_reverse_iterator
pointer	./prevector.h	/^    typedef value_type* pointer;$/;"	t	class:prevector
pointer	./support/allocators/secure.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pointer	./support/allocators/zeroafterfree.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:zero_after_free_allocator
policy_	./leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	./leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	./leveldb/table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest	file:
policy_	./leveldb/util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest	file:
pollBalanceChanged	./qt/walletmodel.cpp	/^void WalletModel::pollBalanceChanged()$/;"	f	class:WalletModel
pollShutdownTimer	./qt/bitcoin.h	/^    QTimer *pollShutdownTimer;$/;"	m	class:BitcoinApplication
pollTimer	./qt/clientmodel.h	/^    QTimer *pollTimer;$/;"	m	class:ClientModel
pollTimer	./qt/walletmodel.h	/^    QTimer *pollTimer;$/;"	m	class:WalletModel
poly1305_auth	./crypto/poly1305.cpp	/^void poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m, size_t inlen, const unsigned char key[POLY1305_KEYLEN]) {$/;"	f
pool	./blockencodings.h	/^    CTxMemPool* pool;$/;"	m	class:PartiallyDownloadedBlock
pool	./validation.cpp	/^    CTxMemPool &pool;$/;"	m	class:ConnectTrace	file:
pop_back	./prevector.h	/^    void pop_back() {$/;"	f	class:prevector
pop_back	./test/prevector_tests.cpp	/^    void pop_back() {$/;"	f	class:prevector_tester
pop_lock	./sync.cpp	/^static void pop_lock()$/;"	f	file:
popstack	./script/interpreter.cpp	/^static inline void popstack(std::vector<valtype>& stack)$/;"	f	file:
port	./chainparams.h	/^    uint16_t port;$/;"	m	struct:SeedSpec6
port	./leveldb/port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	./leveldb/port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	./leveldb/port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	./leveldb/port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
port	./leveldb/port/port_posix_sse.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	./leveldb/port/port_win.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	./leveldb/port/port_win.h	/^namespace port {$/;"	n	namespace:leveldb
port	./netaddress.h	/^        uint16_t port; \/\/ host order$/;"	m	class:CService
port	./qt/optionsmodel.cpp	/^    QString port;$/;"	m	struct:ProxySetting	file:
pos	./index/blockfilterindex.cpp	/^    FlatFilePos pos;$/;"	m	struct:__anon120::DBVal	file:
pos_	./leveldb/db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon19::RandomGenerator	file:
pos_	./leveldb/db/fault_injection_test.cc	/^  ssize_t pos_;$/;"	m	struct:leveldb::__anon20::FileState	file:
pos_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon32::RandomGenerator	file:
pos_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon33::RandomGenerator	file:
pos_	./leveldb/helpers/memenv/memenv.cc	/^  uint64_t pos_;$/;"	m	class:leveldb::__anon35::SequentialFileImpl	file:
pos_at_last_flush_	./leveldb/db/fault_injection_test.cc	/^  ssize_t pos_at_last_flush_;$/;"	m	struct:leveldb::__anon20::FileState	file:
pos_at_last_sync_	./leveldb/db/fault_injection_test.cc	/^  ssize_t pos_at_last_sync_;$/;"	m	struct:leveldb::__anon20::FileState	file:
possible	./versionbits.h	/^    bool possible;$/;"	m	struct:BIP9Stats
post	./sync.h	/^    void post()$/;"	f	class:CSemaphore
postInitProcess	./wallet/wallet.cpp	/^void CWallet::postInitProcess()$/;"	f	class:CWallet
potential_deadlock_detected	./sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
powLimit	./consensus/params.h	/^    uint256 powLimit;$/;"	m	struct:Consensus::Params
pprev	./chain.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
pqueue	./checkqueue.h	/^    CCheckQueue<T> * const pqueue;$/;"	m	class:CCheckQueueControl
pre_g	./secp256k1/src/ecmult.h	/^    secp256k1_ge_storage (*pre_g)[];    \/* odd multiples of the generator *\/$/;"	m	struct:__anon101
pre_g_128	./secp256k1/src/ecmult.h	/^    secp256k1_ge_storage (*pre_g_128)[]; \/* odd multiples of 2^128*generator *\/$/;"	m	struct:__anon101
pre_vector	./test/prevector_tests.cpp	/^    pretype pre_vector;$/;"	m	class:prevector_tester	file:
pre_vector_alt	./test/prevector_tests.cpp	/^    pretype pre_vector_alt;$/;"	m	class:prevector_tester	file:
prec	./secp256k1/src/ecmult_gen.h	/^    secp256k1_ge_storage (*prec)[64][16]; \/* prec[j][i] = 16^j * i * G + U_i *\/$/;"	m	struct:__anon100
preciousblock	./rpc/blockchain.cpp	/^static UniValue preciousblock(const JSONRPCRequest& request)$/;"	f	file:
precomputed_nonce_function	./secp256k1/src/tests.c	/^static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
prefer_evict	./net.cpp	/^    bool prefer_evict;$/;"	m	struct:NodeEvictionCandidate	file:
prefilled_count	./blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
prefilledtxn	./blockencodings.h	/^    std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:CBlockHeaderAndShortTxIDs
prefilledtxn	./test/blockencodings_tests.cpp	/^    std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:TestHeaderAndShortIDs	file:
prefix	./Makefile	/^prefix = \/usr\/local$/;"	m
prefix	./httpserver.cpp	/^    std::string prefix;$/;"	m	struct:HTTPPathHandler	file:
prefix	./rest.cpp	/^    const char* prefix;$/;"	m	struct:__anon2	file:
prefix	./secp256k1/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	./univalue/Makefile	/^prefix = \/usr\/local$/;"	m
prepareTransaction	./qt/walletmodel.cpp	/^WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)$/;"	f	class:WalletModel
pretype	./test/prevector_tests.cpp	/^    typedef prevector<N, T> pretype;$/;"	t	class:prevector_tester	file:
prev	./leveldb/util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
prevBlocks	./qt/bitcoingui.h	/^    int prevBlocks = 0;$/;"	m	class:BitcoinGUI
prev_	./leveldb/db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	./leveldb/db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	./leveldb/db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	./leveldb/db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
prevector	./prevector.h	/^    explicit prevector(size_type n) {$/;"	f	class:prevector
prevector	./prevector.h	/^    explicit prevector(size_type n, const T& val) {$/;"	f	class:prevector
prevector	./prevector.h	/^    prevector() {}$/;"	f	class:prevector
prevector	./prevector.h	/^    prevector(InputIterator first, InputIterator last) {$/;"	f	class:prevector
prevector	./prevector.h	/^    prevector(const prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
prevector	./prevector.h	/^    prevector(prevector<N, T, Size, Diff>&& other) {$/;"	f	class:prevector
prevector	./prevector.h	/^class prevector {$/;"	c
prevector_tester	./test/prevector_tests.cpp	/^    prevector_tester() {$/;"	f	class:prevector_tester
prevector_tester	./test/prevector_tests.cpp	/^class prevector_tester {$/;"	c	file:
prevout	./primitives/transaction.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
printFormatStringLiteral	./tinyformat.h	/^inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat::detail
printToConsole	./qt/utilitydialog.cpp	/^void HelpMessageDialog::printToConsole()$/;"	f	class:HelpMessageDialog
print_number	./crypto/ctaes/bench.c	/^static void print_number(double x) {$/;"	f	file:
print_number	./secp256k1/src/bench.h	/^void print_number(double x) {$/;"	f
print_usage	./secp256k1/build-aux/test-driver	/^print_usage ()$/;"	f
print_usage	./univalue/build-aux/test-driver	/^print_usage ()$/;"	f
printchunk	./support/lockedpool.cpp	/^static void printchunk(char* base, size_t sz, bool used) {$/;"	f	file:
printf	./tinyformat.h	/^inline void printf(const char* fmt)$/;"	f	namespace:tinyformat
printf	./tinyformat.h	/^void printf(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
printfln	./tinyformat.h	/^inline void printfln(const char* fmt)$/;"	f	namespace:tinyformat
printfln	./tinyformat.h	/^void printfln(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
prioritisetransaction	./rpc/mining.cpp	/^static UniValue prioritisetransaction(const JSONRPCRequest& request)$/;"	f	file:
priv	./qt/addresstablemodel.h	/^    AddressTablePriv *priv = nullptr;$/;"	m	class:AddressTableModel
priv	./qt/bantablemodel.h	/^    std::unique_ptr<BanTablePriv> priv;$/;"	m	class:BanTableModel
priv	./qt/peertablemodel.h	/^    std::unique_ptr<PeerTablePriv> priv;$/;"	m	class:PeerTableModel
priv	./qt/transactiontablemodel.h	/^    TransactionTablePriv *priv;$/;"	m	class:TransactionTableModel
privKeyTweakAdd	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] privKeyTweakAdd(byte[] privkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
privKeyTweakMul	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] privKeyTweakMul(byte[] privkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
privateKeysDisabled	./qt/walletmodel.cpp	/^bool WalletModel::privateKeysDisabled() const$/;"	f	class:WalletModel
private_key	./torcontrol.cpp	/^    std::string private_key;$/;"	m	class:TorController	file:
proc	./leveldb/util/env_win.cc	/^    ScheduleProc proc;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
processBlock	./policy/fees.cpp	/^void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,$/;"	f	class:CBlockPolicyEstimator
processBlockTx	./policy/fees.cpp	/^bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)$/;"	f	class:CBlockPolicyEstimator
processNewTransaction	./qt/walletview.cpp	/^void WalletView::processNewTransaction(const QModelIndex& parent, int start, int \/*end*\/)$/;"	f	class:WalletView
processPaymentRequest	./qt/paymentserver.cpp	/^bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient)$/;"	f	class:PaymentServer
processSendCoinsReturn	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg)$/;"	f	class:SendCoinsDialog
processTransaction	./policy/fees.cpp	/^void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)$/;"	f	class:CBlockPolicyEstimator
processingQueuedTransactions	./qt/transactiontablemodel.h	/^    bool processingQueuedTransactions() const { return fProcessingQueuedTransactions; }$/;"	f	class:TransactionTableModel
program	./script/standard.h	/^    unsigned char program[40];$/;"	m	struct:WitnessUnknown
programName	./qt/notificator.h	/^    QString programName;$/;"	m	class:Notificator
program_details	./secp256k1/build-aux/missing	/^program_details ()$/;"	f
program_details	./univalue/build-aux/missing	/^program_details ()$/;"	f
program_transform_name	./Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	./secp256k1/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	./univalue/Makefile	/^program_transform_name = s,x,x,$/;"	m
progressBar	./qt/bitcoingui.h	/^    GUIUtil::ClickableProgressBar* progressBar = nullptr;$/;"	m	class:BitcoinGUI
progressBarLabel	./qt/bitcoingui.h	/^    QLabel* progressBarLabel = nullptr;$/;"	m	class:BitcoinGUI
progressDialog	./qt/bitcoingui.h	/^    QProgressDialog* progressDialog = nullptr;$/;"	m	class:BitcoinGUI
progressDialog	./qt/walletview.h	/^    QProgressDialog *progressDialog;$/;"	m	class:WalletView
protocolinfo_cb	./torcontrol.cpp	/^void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
prototypes	./secp256k1/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	./univalue/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxy	./netbase.h	/^    CService proxy;$/;"	m	class:proxyType
proxyModel	./qt/addressbookpage.h	/^    AddressBookSortFilterProxyModel *proxyModel;$/;"	m	class:AddressBookPage
proxyType	./netbase.h	/^    explicit proxyType(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}$/;"	f	class:proxyType
proxyType	./netbase.h	/^    proxyType(): randomize_credentials(false) {}$/;"	f	class:proxyType
proxyType	./netbase.h	/^class proxyType$/;"	c
pruneblockchain	./rpc/blockchain.cpp	/^static UniValue pruneblockchain(const JSONRPCRequest& request)$/;"	f	file:
prv	./test/bip32_tests.cpp	/^    std::string prv;$/;"	m	struct:TestDerivation	file:
psdir	./Makefile	/^psdir = ${docdir}$/;"	m
psdir	./secp256k1/Makefile	/^psdir = ${docdir}$/;"	m
psdir	./univalue/Makefile	/^psdir = ${docdir}$/;"	m
pskip	./chain.h	/^    CBlockIndex* pskip;$/;"	m	class:CBlockIndex
psocket	./zmq/zmqabstractnotifier.h	/^    void *psocket;$/;"	m	class:CZMQAbstractNotifier
pszBase58	./base58.cpp	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v	file:
ptr	./memusage.h	/^    void* ptr;$/;"	m	struct:memusage::unordered_node
ptr	./prevector.h	/^        T* ptr;$/;"	m	class:prevector::iterator
ptr	./prevector.h	/^        T* ptr;$/;"	m	class:prevector::reverse_iterator
ptr	./prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_iterator
ptr	./prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_reverse_iterator
ptxTo	./validation.h	/^    const CTransaction *ptxTo;$/;"	m	class:CScriptCheck
pub	./test/bip32_tests.cpp	/^    std::string pub;$/;"	m	struct:TestDerivation	file:
pubKeyTweakAdd	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] pubKeyTweakAdd(byte[] pubkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
pubKeyTweakMul	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] pubKeyTweakMul(byte[] pubkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
pubkey	./pubkey.h	/^    CPubKey pubkey;$/;"	m	struct:CExtPubKey
pubkey	./secp256k1/src/bench_verify.c	/^    unsigned char pubkey[33];$/;"	m	struct:__anon106	file:
pubkey0	./test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon58::KeyData	file:
pubkey0C	./test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon58::KeyData	file:
pubkey0H	./test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon58::KeyData	file:
pubkey1	./test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon58::KeyData	file:
pubkey1C	./test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon58::KeyData	file:
pubkey2	./test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon58::KeyData	file:
pubkey2C	./test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon58::KeyData	file:
pubkeylen	./secp256k1/src/bench_verify.c	/^    size_t pubkeylen;$/;"	m	struct:__anon106	file:
pubkeys	./script/sign.h	/^    std::map<CKeyID, CPubKey> pubkeys;$/;"	m	struct:final
purpose	./interfaces/wallet.h	/^    std::string purpose;$/;"	m	struct:interfaces::WalletAddress
purpose	./wallet/wallet.h	/^    std::string purpose;$/;"	m	class:CAddressBookData
purposeForAddress	./qt/addresstablemodel.cpp	/^QString AddressTableModel::purposeForAddress(const QString &address) const$/;"	f	class:AddressTableModel
push	./test/script_tests.cpp	/^    std::vector<unsigned char> push;$/;"	m	class:__anon58::TestBuilder	file:
pushKV	./univalue/include/univalue.h	/^    bool pushKV(const std::string& key, bool val_) {$/;"	f	class:UniValue
pushKV	./univalue/include/univalue.h	/^    bool pushKV(const std::string& key, const char *val_) {$/;"	f	class:UniValue
pushKV	./univalue/include/univalue.h	/^    bool pushKV(const std::string& key, const std::string& val_) {$/;"	f	class:UniValue
pushKV	./univalue/include/univalue.h	/^    bool pushKV(const std::string& key, double val_) {$/;"	f	class:UniValue
pushKV	./univalue/include/univalue.h	/^    bool pushKV(const std::string& key, int val_) {$/;"	f	class:UniValue
pushKV	./univalue/include/univalue.h	/^    bool pushKV(const std::string& key, int64_t val_) {$/;"	f	class:UniValue
pushKV	./univalue/include/univalue.h	/^    bool pushKV(const std::string& key, uint64_t val_) {$/;"	f	class:UniValue
pushKV	./univalue/lib/univalue.cpp	/^bool UniValue::pushKV(const std::string& key, const UniValue& val_)$/;"	f	class:UniValue
pushKVs	./univalue/lib/univalue.cpp	/^bool UniValue::pushKVs(const UniValue& obj)$/;"	f	class:UniValue
push_back	./prevector.h	/^    void push_back(const T& value) {$/;"	f	class:prevector
push_back	./test/prevector_tests.cpp	/^    void push_back(const T& value) {$/;"	f	class:prevector_tester
push_back	./univalue/include/univalue.h	/^    bool push_back(const char *val_) {$/;"	f	class:UniValue
push_back	./univalue/include/univalue.h	/^    bool push_back(const std::string& val_) {$/;"	f	class:UniValue
push_back	./univalue/include/univalue.h	/^    bool push_back(double val_) {$/;"	f	class:UniValue
push_back	./univalue/include/univalue.h	/^    bool push_back(int val_) {$/;"	f	class:UniValue
push_back	./univalue/include/univalue.h	/^    bool push_back(int64_t val_) {$/;"	f	class:UniValue
push_back	./univalue/include/univalue.h	/^    bool push_back(uint64_t val_) {$/;"	f	class:UniValue
push_back	./univalue/lib/univalue.cpp	/^bool UniValue::push_back(const UniValue& val_)$/;"	f	class:UniValue
push_back	./univalue/lib/univalue_utffilter.h	/^    void push_back(unsigned char ch)$/;"	f	class:JSONUTF8StringFilter
push_backV	./univalue/lib/univalue.cpp	/^bool UniValue::push_backV(const std::vector<UniValue>& vec)$/;"	f	class:UniValue
push_back_u	./univalue/lib/univalue_utffilter.h	/^    void push_back_u(unsigned int codepoint_)$/;"	f	class:JSONUTF8StringFilter
push_int64	./script/script.h	/^    CScript& push_int64(int64_t n)$/;"	f	class:CScript
push_lock	./sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation)$/;"	f	file:
pwallet	./wallet/rpcwallet.cpp	/^    CWallet * const pwallet;$/;"	m	class:DescribeWalletAddressVisitor	file:
pwallet	./wallet/wallet.h	/^    CWallet* pwallet;$/;"	m	class:CReserveKey
pwallet	./wallet/wallet.h	/^    const CWallet* pwallet;$/;"	m	class:CWalletTx
qstringToBoostPath	./qt/guiutil.cpp	/^fs::path qstringToBoostPath(const QString &path)$/;"	f	namespace:GUIUtil
qt_bitcoin_qt_LINK	./Makefile	/^qt_bitcoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
qt_bitcoin_qt_OBJECTS	./Makefile	/^qt_bitcoin_qt_OBJECTS = $(am_qt_bitcoin_qt_OBJECTS)$/;"	m
qt_libbitcoinqt_a_AR	./Makefile	/^qt_libbitcoinqt_a_AR = $(AR) $(ARFLAGS)$/;"	m
qt_libbitcoinqt_a_LIBADD	./Makefile	/^qt_libbitcoinqt_a_LIBADD =$/;"	m
qt_libbitcoinqt_a_OBJECTS	./Makefile	/^qt_libbitcoinqt_a_OBJECTS = $(am_qt_libbitcoinqt_a_OBJECTS) \\$/;"	m
qt_test_test_bitcoin_qt_LINK	./Makefile	/^qt_test_test_bitcoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
qt_test_test_bitcoin_qt_OBJECTS	./Makefile	/^qt_test_test_bitcoin_qt_OBJECTS =  \\$/;"	m
queryHashes	./txmempool.cpp	/^void CTxMemPool::queryHashes(std::vector<uint256>& vtxid) const$/;"	f	class:CTxMemPool
queue	./checkqueue.h	/^    std::vector<T> queue;$/;"	m	class:CCheckQueue
queue	./httpserver.cpp	/^    std::deque<std::unique_ptr<WorkItem>> queue;$/;"	m	class:WorkQueue	file:
queue_	./leveldb/util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
queuedTx	./txmempool.h	/^    indexed_disconnected_transactions queuedTx;$/;"	m	struct:DisconnectedBlockTransactions
quitAction	./qt/bitcoingui.h	/^    QAction* quitAction = nullptr;$/;"	m	class:BitcoinGUI
quit_flag_	./leveldb/db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState	file:
r	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static final Lock r = rwl.readLock();$/;"	f	class:NativeSecp256k1	file:
r_from_k	./secp256k1/src/tests_exhaustive.c	/^void r_from_k(secp256k1_scalar *r, const secp256k1_ge *group, int k) {$/;"	f
radioListMode	./qt/coincontroldialog.cpp	/^void CoinControlDialog::radioListMode(bool checked)$/;"	f	class:CoinControlDialog
radioTreeMode	./qt/coincontroldialog.cpp	/^void CoinControlDialog::radioTreeMode(bool checked)$/;"	f	class:CoinControlDialog
rand	./leveldb/db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon19::ThreadState	file:
rand_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_cache	./test/prevector_tests.cpp	/^    FastRandomContext rand_cache;$/;"	m	class:prevector_tester	file:
rand_seed	./test/prevector_tests.cpp	/^    uint256 rand_seed;$/;"	m	class:prevector_tester	file:
randbytes	./random.cpp	/^std::vector<unsigned char> FastRandomContext::randbytes(size_t len)$/;"	f	class:FastRandomContext
random_ber_signature	./secp256k1/src/tests.c	/^static void random_ber_signature(unsigned char *sig, size_t *len, int* certainly_der, int* certainly_not_der) {$/;"	f	file:
random_fe	./secp256k1/src/tests.c	/^void random_fe(secp256k1_fe *x) {$/;"	f
random_fe	./secp256k1/src/tests_exhaustive.c	/^void random_fe(secp256k1_fe *x) {$/;"	f
random_fe_non_square	./secp256k1/src/tests.c	/^void random_fe_non_square(secp256k1_fe *ns) {$/;"	f
random_fe_non_zero	./secp256k1/src/tests.c	/^void random_fe_non_zero(secp256k1_fe *nz) {$/;"	f
random_fe_test	./secp256k1/src/tests.c	/^void random_fe_test(secp256k1_fe *x) {$/;"	f
random_field_element_magnitude	./secp256k1/src/tests.c	/^void random_field_element_magnitude(secp256k1_fe *fe) {$/;"	f
random_field_element_test	./secp256k1/src/tests.c	/^void random_field_element_test(secp256k1_fe *fe) {$/;"	f
random_group_element_jacobian_test	./secp256k1/src/tests.c	/^void random_group_element_jacobian_test(secp256k1_gej *gej, const secp256k1_ge *ge) {$/;"	f
random_group_element_test	./secp256k1/src/tests.c	/^void random_group_element_test(secp256k1_ge *ge) {$/;"	f
random_num_negate	./secp256k1/src/tests.c	/^void random_num_negate(secp256k1_num *num) {$/;"	f
random_num_order	./secp256k1/src/tests.c	/^void random_num_order(secp256k1_num *num) {$/;"	f
random_num_order_test	./secp256k1/src/tests.c	/^void random_num_order_test(secp256k1_num *num) {$/;"	f
random_read_counter_	./leveldb/db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv	file:
random_scalar_order	./secp256k1/src/tests.c	/^void random_scalar_order(secp256k1_scalar *num) {$/;"	f
random_scalar_order_test	./secp256k1/src/tests.c	/^void random_scalar_order_test(secp256k1_scalar *num) {$/;"	f
random_sign	./secp256k1/src/tests.c	/^void random_sign(secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *key, const secp256k1_scalar *msg, int *recid) {$/;"	f
randomize	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static synchronized boolean randomize(byte[] seed) throws AssertFailException{$/;"	m	class:NativeSecp256k1
randomize_credentials	./netbase.h	/^    bool randomize_credentials;$/;"	m	class:proxyType
rbegin	./prevector.h	/^    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rbegin	./prevector.h	/^    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rc	./test/gen/crypto_gen.h	/^namespace rc$/;"	n
rdbuf	./streams.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
read	./hash.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CHashVerifier
read	./script/bitcoinconsensus.cpp	/^    void read(char* pch, size_t nSize)$/;"	f	class:__anon81::TxInputStream
read	./streams.h	/^    void read(char *pch, size_t nSize) {$/;"	f	class:CBufferedFile
read	./streams.h	/^    void read(char* dst, size_t n)$/;"	f	class:VectorReader
read	./streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	./streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CDataStream
read	./streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:OverrideStream
read	./univalue/include/univalue.h	/^    bool read(const char *raw) { return read(raw, strlen(raw)); }$/;"	f	class:UniValue
read	./univalue/include/univalue.h	/^    bool read(const std::string& rawStr) {$/;"	f	class:UniValue
read	./univalue/lib/univalue_read.cpp	/^bool UniValue::read(const char *raw, size_t size)$/;"	f	class:UniValue
readData	./net.cpp	/^int CNetMessage::readData(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readHeader	./net.cpp	/^int CNetMessage::readHeader(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readPaymentRequestFromFile	./qt/paymentserver.cpp	/^bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)$/;"	f	class:PaymentServer
readStdin	./bitcoin-tx.cpp	/^static std::string readStdin()$/;"	f	file:
read_json	./test/script_tests.cpp	/^read_json(const std::string& jsondata)$/;"	f
read_stdin	./test/fuzz/fuzz.cpp	/^static bool read_stdin(std::vector<uint8_t>& data)$/;"	f	file:
readcb	./torcontrol.cpp	/^void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)$/;"	f	class:TorControlConnection
reader_	./leveldb/db/log_test.cc	/^  Reader* reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	./leveldb/db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
readoptions	./dbwrapper.h	/^    leveldb::ReadOptions readoptions;$/;"	m	class:CDBWrapper
reads_	./leveldb/db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
ready	./script/interpreter.h	/^    bool ready = false;$/;"	m	struct:PrecomputedTransactionData
real_vector	./test/prevector_tests.cpp	/^    realtype real_vector;$/;"	m	class:prevector_tester	file:
real_vector_alt	./test/prevector_tests.cpp	/^    realtype real_vector_alt;$/;"	m	class:prevector_tester	file:
realtype	./test/prevector_tests.cpp	/^    typedef std::vector<T> realtype;$/;"	t	class:prevector_tester	file:
reason	./fs.h	/^        std::string reason;$/;"	m	class:fsbridge::FileLock
reason	./policy/fees.h	/^    FeeReason reason = FeeReason::NONE;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
reasonCommitFailed	./qt/walletmodel.h	/^        QString reasonCommitFailed;$/;"	m	struct:WalletModel::SendCoinsReturn
reassignAmounts	./qt/walletmodeltransaction.cpp	/^void WalletModelTransaction::reassignAmounts(int nChangePosRet)$/;"	f	class:WalletModelTransaction
receiveCoinsAction	./qt/bitcoingui.h	/^    QAction* receiveCoinsAction = nullptr;$/;"	m	class:BitcoinGUI
receiveCoinsMenuAction	./qt/bitcoingui.h	/^    QAction* receiveCoinsMenuAction = nullptr;$/;"	m	class:BitcoinGUI
receiveCoinsPage	./qt/walletview.h	/^    ReceiveCoinsDialog *receiveCoinsPage;$/;"	m	class:WalletView
recentRequestsTableModel	./qt/walletmodel.h	/^    RecentRequestsTableModel *recentRequestsTableModel;$/;"	m	class:WalletModel
recentRequestsView_selectionChanged	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::recentRequestsView_selectionChanged(const QItemSelection &selected, const QItemSelection &deselected)$/;"	f	class:ReceiveCoinsDialog
recipient	./qt/recentrequeststablemodel.h	/^    SendCoinsRecipient recipient;$/;"	m	class:RecentRequestEntry
recipient	./qt/sendcoinsentry.h	/^    SendCoinsRecipient recipient;$/;"	m	class:SendCoinsEntry
recipient	./qt/test/paymentservertests.h	/^    SendCoinsRecipient recipient;$/;"	m	class:RecipientCatcher
recipients	./qt/walletmodeltransaction.h	/^    QList<SendCoinsRecipient> recipients;$/;"	m	class:WalletModelTransaction
reconnect	./torcontrol.cpp	/^    bool reconnect;$/;"	m	class:TorController	file:
reconnect_cb	./torcontrol.cpp	/^void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	class:TorController
reconnect_ev	./torcontrol.cpp	/^    struct event *reconnect_ev;$/;"	m	class:TorController	typeref:struct:TorController::event	file:
reconnect_timeout	./torcontrol.cpp	/^    float reconnect_timeout;$/;"	m	class:TorController	file:
reconsiderblock	./rpc/blockchain.cpp	/^static UniValue reconsiderblock(const JSONRPCRequest& request)$/;"	f	file:
recoverFunc_type	./wallet/db.h	/^    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);$/;"	t	class:BerkeleyEnvironment
recovery_test_nonce_function	./secp256k1/src/modules/recovery/tests_impl.h	/^static int recovery_test_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f
redeem_script	./psbt.h	/^    CScript redeem_script;$/;"	m	struct:PSBTInput
redeem_script	./psbt.h	/^    CScript redeem_script;$/;"	m	struct:PSBTOutput
redeem_script	./script/sign.h	/^    CScript redeem_script; \/\/\/< The redeemScript (if any) for the input$/;"	m	struct:SignatureData
redeemscript	./test/script_tests.cpp	/^    CScript redeemscript;$/;"	m	class:__anon58::TestBuilder	file:
redeemscript	./wallet/rpcdump.cpp	/^    std::unique_ptr<CScript> redeemscript; \/\/!< Provided redeemScript; will be moved to `import_scripts` if relevant.$/;"	m	struct:ImportData	file:
refcount	./pubkey.cpp	/^\/* static *\/ int ECCVerifyHandle::refcount = 0;$/;"	m	class:ECCVerifyHandle	file:
refcount	./pubkey.h	/^    static int refcount;$/;"	m	class:ECCVerifyHandle
reference	./prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::iterator
reference	./prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::reverse_iterator
reference	./prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_iterator
reference	./prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_reverse_iterator
reference	./prevector.h	/^    typedef value_type& reference;$/;"	t	class:prevector
reference	./streams.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
reference	./support/allocators/secure.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	./support/allocators/zeroafterfree.h	/^    typedef typename base::reference reference;$/;"	t	struct:zero_after_free_allocator
refresh	./qt/bantablemodel.cpp	/^void BanTableModel::refresh()$/;"	f	class:BanTableModel
refresh	./qt/peertablemodel.cpp	/^void PeerTableModel::refresh()$/;"	f	class:PeerTableModel
refreshAddressTable	./qt/addresstablemodel.cpp	/^    void refreshAddressTable(interfaces::Wallet& wallet)$/;"	f	class:AddressTablePriv
refreshBanlist	./qt/bantablemodel.cpp	/^    void refreshBanlist(interfaces::Node& node)$/;"	f	class:BanTablePriv
refreshPeers	./qt/peertablemodel.cpp	/^    void refreshPeers(interfaces::Node& node)$/;"	f	class:PeerTablePriv
refreshWallet	./qt/transactiontablemodel.cpp	/^    void refreshWallet(interfaces::Wallet& wallet)$/;"	f	class:TransactionTablePriv
refs	./leveldb/db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	./leveldb/util/cache.cc	/^  uint32_t refs;      \/\/ References, including cache reference, if present.$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
refs_	./leveldb/db/memtable.h	/^  int refs_;$/;"	m	class:leveldb::MemTable
refs_	./leveldb/db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	./leveldb/helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon35::FileState	file:
refs_mutex_	./leveldb/helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon35::FileState	file:
registerShutdownBlockReason	./qt/winshutdownmonitor.cpp	/^void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)$/;"	f	class:WinShutdownMonitor
registerSignalHandler	./init.cpp	/^static void registerSignalHandler(int signal, void(*handler)(int))$/;"	f	file:
registers	./bitcoin-tx.cpp	/^static std::map<std::string,UniValue> registers;$/;"	v	file:
reject	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::reject()$/;"	f	class:ReceiveCoinsDialog
reject	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::reject()$/;"	f	class:SendCoinsDialog
rejects	./net_processing.cpp	/^    std::vector<CBlockReject> rejects;$/;"	m	struct:__anon89::CNodeState	file:
release	./streams.h	/^    FILE* release()             { FILE* ret = file; file = nullptr; return ret; }$/;"	f	class:CAutoFile
relock	./qt/walletmodel.h	/^        mutable bool relock; \/\/ mutable, as it can be set to false by copying$/;"	m	class:WalletModel::UnlockContext
removeAllWallets	./qt/bitcoingui.cpp	/^void BitcoinGUI::removeAllWallets()$/;"	f	class:BitcoinGUI
removeAllWallets	./qt/walletframe.cpp	/^void WalletFrame::removeAllWallets()$/;"	f	class:WalletFrame
removeAndDeleteWallet	./qt/walletcontroller.cpp	/^void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)$/;"	f	class:WalletController
removeCommand	./rpc/server.cpp	/^bool CRPCTable::removeCommand(const std::string& name, const CRPCCommand* pcmd)$/;"	f	class:CRPCTable
removeConflicts	./txmempool.cpp	/^void CTxMemPool::removeConflicts(const CTransaction &tx)$/;"	f	class:CTxMemPool
removeEntry	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::removeEntry(SendCoinsEntry* entry)$/;"	f	class:SendCoinsDialog
removeEntry	./txmempool.h	/^    void removeEntry(indexed_disconnected_transactions::index<insertion_order>::type::iterator entry)$/;"	f	struct:DisconnectedBlockTransactions
removeForBlock	./txmempool.cpp	/^void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)$/;"	f	class:CTxMemPool
removeForBlock	./txmempool.h	/^    void removeForBlock(const std::vector<CTransactionRef>& vtx)$/;"	f	struct:DisconnectedBlockTransactions
removeForReorg	./txmempool.cpp	/^void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)$/;"	f	class:CTxMemPool
removeRecursive	./txmempool.cpp	/^void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
removeRows	./qt/addresstablemodel.cpp	/^bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent)$/;"	f	class:AddressTableModel
removeRows	./qt/recentrequeststablemodel.cpp	/^bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex &parent)$/;"	f	class:RecentRequestsTableModel
removeSpaces	./qt/bitcoinunits.h	/^    static QString removeSpaces(QString text)$/;"	f	class:BitcoinUnits
removeTx	./policy/fees.cpp	/^bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)$/;"	f	class:CBlockPolicyEstimator
removeTx	./policy/fees.cpp	/^void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex, bool inBlock)$/;"	f	class:TxConfirmStats
removeUnchecked	./txmempool.cpp	/^void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
removeWallet	./qt/bitcoingui.cpp	/^void BitcoinGUI::removeWallet(WalletModel* walletModel)$/;"	f	class:BitcoinGUI
removeWallet	./qt/rpcconsole.cpp	/^void RPCConsole::removeWallet(WalletModel * const walletModel)$/;"	f	class:RPCConsole
removeWallet	./qt/walletframe.cpp	/^void WalletFrame::removeWallet(WalletModel* wallet_model)$/;"	f	class:WalletFrame
remove_prefix	./leveldb/include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
removeprunedfunds	./wallet/rpcdump.cpp	/^UniValue removeprunedfunds(const JSONRPCRequest& request)$/;"	f
rend	./prevector.h	/^    const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
rend	./prevector.h	/^    reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
rep	./leveldb/db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t	file:
rep	./leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t	file:
rep_	./leveldb/db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	./leveldb/include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	./leveldb/include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	./leveldb/include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	./leveldb/include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	./leveldb/port/atomic_pointer.h	/^  std::atomic<void*> rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	./leveldb/port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	./leveldb/port/port_win.h	/^  void * rep_;$/;"	m	class:leveldb::port::AtomicPointer
replySent	./httpserver.h	/^    bool replySent;$/;"	m	class:HTTPRequest
reply_handlers	./torcontrol.cpp	/^    std::deque<ReplyHandlerCB> reply_handlers;$/;"	m	class:TorControlConnection	file:
reportSslErrors	./qt/paymentserver.cpp	/^void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError> &errs)$/;"	f	class:PaymentServer
report_	./leveldb/db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
reporter_	./leveldb/db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
req	./httpserver.cpp	/^    std::unique_ptr<HTTPRequest> req;$/;"	m	class:final	file:
req	./httpserver.h	/^    struct evhttp_request* req;$/;"	m	class:HTTPRequest	typeref:struct:HTTPRequest::evhttp_request
request	./qt/rpcconsole.cpp	/^void RPCExecutor::request(const QString &command, const WalletModel* wallet_model)$/;"	f	class:RPCExecutor
requestInitialize	./qt/bitcoin.cpp	/^void BitcoinApplication::requestInitialize()$/;"	f	class:BitcoinApplication
requestShutdown	./qt/bitcoin.cpp	/^void BitcoinApplication::requestShutdown()$/;"	f	class:BitcoinApplication
requestUnlock	./qt/walletmodel.cpp	/^WalletModel::UnlockContext WalletModel::requestUnlock()$/;"	f	class:WalletModel
requestedSyncWarningInfo	./qt/walletview.cpp	/^void WalletView::requestedSyncWarningInfo()$/;"	f	class:WalletView
requiredSpace	./qt/intro.cpp	/^static uint64_t requiredSpace;$/;"	v	file:
requires_seed	./random.h	/^    bool requires_seed;$/;"	m	class:FastRandomContext
rescanblockchain	./wallet/rpcwallet.cpp	/^UniValue rescanblockchain(const JSONRPCRequest& request)$/;"	f
reserve	./prevector.h	/^    void reserve(size_type new_capacity) {$/;"	f	class:prevector
reserve	./rpc/blockchain.cpp	/^    bool reserve() {$/;"	f	class:CoinsViewScanReserver
reserve	./streams.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
reserve	./test/prevector_tests.cpp	/^    void reserve(Size s) {$/;"	f	class:prevector_tester
reserve	./wallet/wallet.h	/^    bool reserve()$/;"	f	class:WalletRescanReserver
reset	./bloom.cpp	/^void CBloomFilter::reset(const unsigned int nNewTweak)$/;"	f	class:CBloomFilter
reset	./bloom.cpp	/^void CRollingBloomFilter::reset()$/;"	f	class:CRollingBloomFilter
reset	./threadinterrupt.cpp	/^void CThreadInterrupt::reset()$/;"	f	class:CThreadInterrupt
resetBlock	./miner.cpp	/^void BlockAssembler::resetBlock()$/;"	f	class:BlockAssembler
resize	./prevector.h	/^    void resize(size_type new_size) {$/;"	f	class:prevector
resize	./streams.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
resize	./test/prevector_tests.cpp	/^    void resize(Size s) {$/;"	f	class:prevector_tester
resizeColumn	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::resizeColumn(int nColumnIndex, int width)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
resizeEvent	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::resizeEvent(QResizeEvent *event)$/;"	f	class:ReceiveCoinsDialog
resizeEvent	./qt/rpcconsole.cpp	/^void RPCConsole::resizeEvent(QResizeEvent *event)$/;"	f	class:RPCConsole
resizeEvent	./qt/transactionview.cpp	/^void TransactionView::resizeEvent(QResizeEvent* event)$/;"	f	class:TransactionView
resizeInMemoryCounters	./policy/fees.cpp	/^void TxConfirmStats::resizeInMemoryCounters(size_t newbuckets) {$/;"	f	class:TxConfirmStats
resolvedAddress	./net.h	/^    CService resolvedAddress;$/;"	m	struct:AddedNodeInfo
rest_block	./rest.cpp	/^static bool rest_block(HTTPRequest* req,$/;"	f	file:
rest_block_extended	./rest.cpp	/^static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_block_notxdetails	./rest.cpp	/^static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_blockhash_by_height	./rest.cpp	/^static bool rest_blockhash_by_height(HTTPRequest* req,$/;"	f	file:
rest_chaininfo	./rest.cpp	/^static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_getutxos	./rest.cpp	/^static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_headers	./rest.cpp	/^static bool rest_headers(HTTPRequest* req,$/;"	f	file:
rest_mempool_contents	./rest.cpp	/^static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_mempool_info	./rest.cpp	/^static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_tx	./rest.cpp	/^static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
restart_index_	./leveldb/table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	./leveldb/table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_offset_	./leveldb/table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	./leveldb/table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	./leveldb/table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result	./bench/bench.cpp	/^void benchmark::ConsolePrinter::result(const State& state)$/;"	f	class:benchmark::ConsolePrinter
result	./bench/bench.cpp	/^void benchmark::PlotlyPrinter::result(const State& state)$/;"	f	class:benchmark::PlotlyPrinter
result_	./leveldb/table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
result_type	./miner.h	/^    typedef CTxMemPool::txiter result_type;$/;"	t	struct:modifiedentry_iter
result_type	./net.h	/^    typedef bool result_type;$/;"	t	struct:CombinerAll
result_type	./random.h	/^    typedef uint64_t result_type;$/;"	t	class:FastRandomContext
result_type	./txmempool.h	/^    typedef uint256 result_type;$/;"	t	struct:mempoolentry_txid
results	./test/checkqueue_tests.cpp	/^    static std::unordered_multiset<size_t> results;$/;"	m	struct:UniqueCheck	file:
results	./test/checkqueue_tests.cpp	/^std::unordered_multiset<size_t> UniqueCheck::results;$/;"	m	class:UniqueCheck	file:
resyncing_	./leveldb/db/log_reader.h	/^  bool resyncing_;$/;"	m	class:leveldb::log::Reader
retry	./secp256k1/src/hash.h	/^    int retry;$/;"	m	struct:__anon113
returnValue	./qt/addressbookpage.h	/^    QString returnValue;$/;"	m	class:AddressBookPage
returnValue	./qt/bitcoin.h	/^    int returnValue;$/;"	m	class:BitcoinApplication
returnedTarget	./policy/fees.h	/^    int returnedTarget = 0;$/;"	m	struct:FeeEstimateHorizon::FeeCalculation
returned_partial_	./leveldb/db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
reuse_logs	./leveldb/include/leveldb/options.h	/^  bool reuse_logs;$/;"	m	struct:leveldb::Options
reverse_compare	./leveldb/table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_iterate	./reverse_iterator.h	/^reverse_range<T> reverse_iterate(T &x)$/;"	f
reverse_iterator	./prevector.h	/^        reverse_iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::reverse_iterator
reverse_iterator	./prevector.h	/^    class reverse_iterator {$/;"	c	class:prevector
reverse_iterator	./streams.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
reverse_key_comparator	./leveldb/table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
reverse_lock	./reverselock.h	/^    explicit reverse_lock(Lock& _lock) : lock(_lock) {$/;"	f	class:reverse_lock
reverse_lock	./reverselock.h	/^class reverse_lock$/;"	c
reverse_range	./reverse_iterator.h	/^    explicit reverse_range(T &x) : m_x(x) {}$/;"	f	class:reverse_range
reverse_range	./reverse_iterator.h	/^class reverse_range$/;"	c
rf	./rest.cpp	/^    RetFormat rf;$/;"	m	struct:__anon1	file:
rf_names	./rest.cpp	/^} rf_names[] = {$/;"	v	typeref:struct:__anon1	file:
right	./memusage.h	/^    void* right;$/;"	m	struct:memusage::stl_tree_node
ripemd160	./crypto/ripemd160.cpp	/^namespace ripemd160$/;"	n	namespace:__anon42	file:
rk	./crypto/ctaes/ctaes.h	/^    AES_state rk[11];$/;"	m	struct:__anon46
rk	./crypto/ctaes/ctaes.h	/^    AES_state rk[13];$/;"	m	struct:__anon47
rk	./crypto/ctaes/ctaes.h	/^    AES_state rk[15];$/;"	m	struct:__anon48
rmap	./limitedmap.h	/^    std::multimap<V, iterator> rmap;$/;"	m	class:limitedmap
rmap_iterator	./limitedmap.h	/^    typedef typename std::multimap<V, iterator>::iterator rmap_iterator;$/;"	t	class:limitedmap
rnd_	./leveldb/db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon29::DBIter	file:
rnd_	./leveldb/db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
rng	./random.h	/^    ChaCha20 rng;$/;"	m	class:FastRandomContext
rol	./crypto/ripemd160.cpp	/^uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }$/;"	f	namespace:__anon42::ripemd160
role	./qt/csvmodelwriter.h	/^        int role;$/;"	m	struct:CSVModelWriter::Column
role	./qt/qvaluecombobox.h	/^    int role;$/;"	m	class:QValueComboBox
rollingMinimumFeeRate	./txmempool.h	/^    mutable double rollingMinimumFeeRate; \/\/!< minimum fee to get into the pool, decreases exponentially$/;"	m	class:CTxMemPool
root	./test/coins_tests.cpp	/^    CCoinsView root;$/;"	m	class:SingleEntryCacheTest	file:
rotl32	./crypto/chacha20.cpp	/^constexpr static inline uint32_t rotl32(uint32_t v, int c) { return (v << c) | (v >> (32 - c)); }$/;"	f	file:
round	./policy/fees.cpp	/^CAmount FeeFilterRounder::round(CAmount currentMinFee)$/;"	f	class:FeeFilterRounder
rowCount	./qt/addresstablemodel.cpp	/^int AddressTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
rowCount	./qt/bantablemodel.cpp	/^int BanTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:BanTableModel
rowCount	./qt/bitcoinunits.cpp	/^int BitcoinUnits::rowCount(const QModelIndex &parent) const$/;"	f	class:BitcoinUnits
rowCount	./qt/optionsmodel.cpp	/^int OptionsModel::rowCount(const QModelIndex & parent) const$/;"	f	class:OptionsModel
rowCount	./qt/peertablemodel.cpp	/^int PeerTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:PeerTableModel
rowCount	./qt/recentrequeststablemodel.cpp	/^int RecentRequestsTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
rowCount	./qt/transactionfilterproxy.cpp	/^int TransactionFilterProxy::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionFilterProxy
rowCount	./qt/transactiontablemodel.cpp	/^int TransactionTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
rpcConsole	./qt/bitcoingui.h	/^    RPCConsole* rpcConsole = nullptr;$/;"	m	class:BitcoinGUI
rpcCvtTable	./rpc/client.cpp	/^static CRPCConvertTable rpcCvtTable;$/;"	v	file:
rpcNestedTest_rpc	./qt/test/rpcnestedtests.cpp	/^static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)$/;"	f	file:
rpcNestedTests	./qt/test/rpcnestedtests.cpp	/^void RPCNestedTests::rpcNestedTests()$/;"	f	class:RPCNestedTests
rpcTimerInterface	./qt/rpcconsole.h	/^    RPCTimerInterface *rpcTimerInterface = nullptr;$/;"	m	class:RPCConsole
rpc_allow_subnets	./httpserver.cpp	/^static std::vector<CSubNet> rpc_allow_subnets;$/;"	v	file:
rpc_notify_block_change_connection	./init.cpp	/^static boost::signals2::connection rpc_notify_block_change_connection;$/;"	v	file:
rpcfn_type	./rpc/server.h	/^typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);$/;"	t
rtrim	./univalue/test/unitester.cpp	/^static std::string rtrim(std::string s)$/;"	f	file:
runCommand	./util/system.cpp	/^void runCommand(const std::string& strCommand)$/;"	f
run_benchmark	./crypto/ctaes/bench.c	/^static void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f	file:
run_benchmark	./secp256k1/src/bench.h	/^void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f
run_context_tests	./secp256k1/src/tests.c	/^void run_context_tests(void) {$/;"	f
run_ec_combine	./secp256k1/src/tests.c	/^void run_ec_combine(void) {$/;"	f
run_ec_pubkey_parse_test	./secp256k1/src/tests.c	/^void run_ec_pubkey_parse_test(void) {$/;"	f
run_ecdh_tests	./secp256k1/src/modules/ecdh/tests_impl.h	/^void run_ecdh_tests(void) {$/;"	f
run_ecdsa_der_parse	./secp256k1/src/tests.c	/^void run_ecdsa_der_parse(void) {$/;"	f
run_ecdsa_edge_cases	./secp256k1/src/tests.c	/^void run_ecdsa_edge_cases(void) {$/;"	f
run_ecdsa_end_to_end	./secp256k1/src/tests.c	/^void run_ecdsa_end_to_end(void) {$/;"	f
run_ecdsa_openssl	./secp256k1/src/tests.c	/^void run_ecdsa_openssl(void) {$/;"	f
run_ecdsa_sign_verify	./secp256k1/src/tests.c	/^void run_ecdsa_sign_verify(void) {$/;"	f
run_eckey_edge_case_test	./secp256k1/src/tests.c	/^void run_eckey_edge_case_test(void) {$/;"	f
run_ecmult_chain	./secp256k1/src/tests.c	/^void run_ecmult_chain(void) {$/;"	f
run_ecmult_const_tests	./secp256k1/src/tests.c	/^void run_ecmult_const_tests(void) {$/;"	f
run_ecmult_constants	./secp256k1/src/tests.c	/^void run_ecmult_constants(void) {$/;"	f
run_ecmult_gen_blind	./secp256k1/src/tests.c	/^void run_ecmult_gen_blind(void) {$/;"	f
run_endomorphism_tests	./secp256k1/src/tests.c	/^void run_endomorphism_tests(void) {$/;"	f
run_field_convert	./secp256k1/src/tests.c	/^void run_field_convert(void) {$/;"	f
run_field_inv	./secp256k1/src/tests.c	/^void run_field_inv(void) {$/;"	f
run_field_inv_all_var	./secp256k1/src/tests.c	/^void run_field_inv_all_var(void) {$/;"	f
run_field_inv_var	./secp256k1/src/tests.c	/^void run_field_inv_var(void) {$/;"	f
run_field_misc	./secp256k1/src/tests.c	/^void run_field_misc(void) {$/;"	f
run_ge	./secp256k1/src/tests.c	/^void run_ge(void) {$/;"	f
run_group_decompress	./secp256k1/src/tests.c	/^void run_group_decompress(void) {$/;"	f
run_hmac_sha256_tests	./secp256k1/src/tests.c	/^void run_hmac_sha256_tests(void) {$/;"	f
run_num_smalltests	./secp256k1/src/tests.c	/^void run_num_smalltests(void) {$/;"	f
run_point_times_order	./secp256k1/src/tests.c	/^void run_point_times_order(void) {$/;"	f
run_rand_bits	./secp256k1/src/tests.c	/^void run_rand_bits(void) {$/;"	f
run_rand_int	./secp256k1/src/tests.c	/^void run_rand_int(void) {$/;"	f
run_random_pubkeys	./secp256k1/src/tests.c	/^void run_random_pubkeys(void) {$/;"	f
run_recovery_tests	./secp256k1/src/modules/recovery/tests_impl.h	/^void run_recovery_tests(void) {$/;"	f
run_rfc6979_hmac_sha256_tests	./secp256k1/src/tests.c	/^void run_rfc6979_hmac_sha256_tests(void) {$/;"	f
run_scalar_tests	./secp256k1/src/tests.c	/^void run_scalar_tests(void) {$/;"	f
run_sha256_tests	./secp256k1/src/tests.c	/^void run_sha256_tests(void) {$/;"	f
run_sqr	./secp256k1/src/tests.c	/^void run_sqr(void) {$/;"	f
run_sqrt	./secp256k1/src/tests.c	/^void run_sqrt(void) {$/;"	f
run_wnaf	./secp256k1/src/tests.c	/^void run_wnaf(void) {$/;"	f
running	./httpserver.cpp	/^    bool running;$/;"	m	class:WorkQueue	file:
runtest	./univalue/test/unitester.cpp	/^static void runtest(std::string filename, const std::string& jdata)$/;"	f	file:
runtest_file	./univalue/test/unitester.cpp	/^static void runtest_file(const char *filename_)$/;"	f	file:
rwl	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();$/;"	f	class:NativeSecp256k1	file:
s	./crypto/ripemd160.h	/^    uint32_t s[5];$/;"	m	class:CRIPEMD160
s	./crypto/sha1.h	/^    uint32_t s[5];$/;"	m	class:CSHA1
s	./crypto/sha256.h	/^    uint32_t s[8];$/;"	m	class:CSHA256
s	./crypto/sha512.h	/^    uint64_t s[8];$/;"	m	class:CSHA512
s	./secp256k1/src/hash.h	/^    uint32_t s[8];$/;"	m	struct:__anon111
sPaymentRequest	./qt/walletmodel.h	/^    std::string sPaymentRequest;$/;"	m	class:SendCoinsRecipient
sanity_test_fdelt	./compat/glibc_sanity.cpp	/^bool sanity_test_fdelt()$/;"	f	namespace:__anon51
sanity_test_list	./compat/glibcxx_sanity.cpp	/^bool sanity_test_list(unsigned int size)$/;"	f	namespace:__anon52
sanity_test_memcpy	./compat/glibc_sanity.cpp	/^bool sanity_test_memcpy()$/;"	f	namespace:__anon51
sanity_test_range_fmt	./compat/glibcxx_sanity.cpp	/^bool sanity_test_range_fmt()$/;"	f
sanity_test_widen	./compat/glibcxx_sanity.cpp	/^bool sanity_test_widen(char testchar)$/;"	f	namespace:__anon52
saveCurrentRow	./qt/editaddressdialog.cpp	/^bool EditAddressDialog::saveCurrentRow()$/;"	f	class:EditAddressDialog
saveImage	./qt/qrimagewidget.cpp	/^void QRImageWidget::saveImage()$/;"	f	class:QRImageWidget
saveReceiveRequest	./qt/walletmodel.cpp	/^bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)$/;"	f	class:WalletModel
saveURIs	./qt/paymentserver.h	/^    bool saveURIs;                      \/\/ true during startup$/;"	m	class:PaymentServer
savedPaymentRequests	./qt/paymentserver.cpp	/^static QList<QString> savedPaymentRequests;$/;"	v	file:
saved_key_	./leveldb/db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon29::DBIter	file:
saved_value_	./leveldb/db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon29::DBIter	file:
savemempool	./rpc/blockchain.cpp	/^static UniValue savemempool(const JSONRPCRequest& request)$/;"	f	file:
sbindir	./Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	./secp256k1/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	./univalue/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scalar	./secp256k1/src/bench_ecdh.c	/^    unsigned char scalar[32];$/;"	m	struct:__anon108	file:
scalar_test	./secp256k1/src/tests.c	/^void scalar_test(void) {$/;"	f
scalar_x	./secp256k1/src/bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon109	file:
scalar_y	./secp256k1/src/bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon109	file:
scale	./policy/fees.cpp	/^    unsigned int scale;$/;"	m	class:TxConfirmStats	file:
scale	./policy/fees.h	/^    unsigned int scale = 0;$/;"	m	struct:FeeEstimateHorizon::EstimationResult
scantxoutset	./rpc/blockchain.cpp	/^UniValue scantxoutset(const JSONRPCRequest& request)$/;"	f
schedule	./scheduler.cpp	/^void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)$/;"	f	class:CScheduler
scheduleEvery	./scheduler.cpp	/^void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	class:CScheduler
scheduleFromNow	./scheduler.cpp	/^void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	class:CScheduler
scheduler	./init.cpp	/^static CScheduler scheduler;$/;"	v	file:
scheduler	./test/setup_common.h	/^    CScheduler scheduler;$/;"	m	struct:TestingSetup
screenWidth	./util/system.cpp	/^static const int screenWidth = 79;$/;"	v	file:
script	./compressor.h	/^    CScript &script;$/;"	m	class:CScriptCompressor
script	./script/sign.cpp	/^    std::vector<valtype> script;$/;"	m	struct:__anon82::Stacks	file:
script	./script/standard.cpp	/^    CScript *script;$/;"	m	class:__anon86::CScriptVisitor	file:
script	./test/script_tests.cpp	/^    CScript script;$/;"	m	class:__anon58::TestBuilder	file:
scriptCode	./script/interpreter.cpp	/^    const CScript& scriptCode; \/\/!< output script being consumed$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
scriptError	./test/script_tests.cpp	/^    int scriptError;$/;"	m	class:__anon58::TestBuilder	file:
scriptExecutionCache	./validation.cpp	/^static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;$/;"	v	file:
scriptPubKey	./primitives/transaction.h	/^    CScript scriptPubKey;$/;"	m	class:CTxOut
scriptPubKey	./wallet/wallet.h	/^    CScript scriptPubKey;$/;"	m	struct:CRecipient
scriptSig	./primitives/transaction.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
scriptSig	./script/sign.h	/^    CScript scriptSig; \/\/\/< The scriptSig of an input. Contains complete signatures or the traditional partial signatures format$/;"	m	struct:SignatureData
scriptWitness	./primitives/transaction.h	/^    CScriptWitness scriptWitness; \/\/!< Only serialized through CTransaction$/;"	m	class:CTxIn
scriptWitness	./script/sign.h	/^    CScriptWitness scriptWitness; \/\/\/< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.$/;"	m	struct:SignatureData
scriptWitness	./test/script_tests.cpp	/^    CScriptWitness scriptWitness;$/;"	m	class:__anon58::TestBuilder	file:
script_errors	./test/script_tests.cpp	/^static ScriptErrorDesc script_errors[]={$/;"	v	file:
script_tests	./test/data/script_tests.json.h	/^static unsigned const char script_tests[] = {$/;"	m	namespace:json_tests
scriptnum10_error	./test/scriptnum10.h	/^    explicit scriptnum10_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum10_error
scriptnum10_error	./test/scriptnum10.h	/^class scriptnum10_error : public std::runtime_error$/;"	c
scriptnum_error	./script/script.h	/^    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum_error
scriptnum_error	./script/script.h	/^class scriptnum_error : public std::runtime_error$/;"	c
scripts	./script/sign.h	/^    std::map<CScriptID, CScript> scripts;$/;"	m	struct:final
scrollToEnd	./qt/rpcconsole.cpp	/^void RPCConsole::scrollToEnd()$/;"	f	class:RPCConsole
search_widget	./qt/transactionview.h	/^    QLineEdit *search_widget;$/;"	m	class:TransactionView
secDelay	./qt/sendcoinsdialog.h	/^    int secDelay;$/;"	m	class:SendConfirmationDialog
secKeyVerify	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static boolean secKeyVerify(byte[] seckey) {$/;"	m	class:NativeSecp256k1
secondToLastColumnIndex	./qt/guiutil.h	/^            int secondToLastColumnIndex;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
seconds_	./leveldb/db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon19::Stats	file:
secp256k1_callback	./secp256k1/src/util.h	/^} secp256k1_callback;$/;"	t	typeref:struct:__anon107
secp256k1_callback_call	./secp256k1/src/util.h	/^static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {$/;"	f
secp256k1_context	./secp256k1/include/secp256k1.h	/^typedef struct secp256k1_context_struct secp256k1_context;$/;"	t	typeref:struct:secp256k1_context_struct
secp256k1_context_clone	./secp256k1/src/secp256k1.c	/^secp256k1_context* secp256k1_context_clone(const secp256k1_context* ctx) {$/;"	f
secp256k1_context_create	./secp256k1/src/secp256k1.c	/^secp256k1_context* secp256k1_context_create(unsigned int flags) {$/;"	f
secp256k1_context_destroy	./secp256k1/src/secp256k1.c	/^void secp256k1_context_destroy(secp256k1_context* ctx) {$/;"	f
secp256k1_context_randomize	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native int secp256k1_context_randomize(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_context_randomize	./secp256k1/src/secp256k1.c	/^int secp256k1_context_randomize(secp256k1_context* ctx, const unsigned char *seed32) {$/;"	f
secp256k1_context_set_error_callback	./secp256k1/src/secp256k1.c	/^void secp256k1_context_set_error_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_set_illegal_callback	./secp256k1/src/secp256k1.c	/^void secp256k1_context_set_illegal_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_sign	./key.cpp	/^static secp256k1_context* secp256k1_context_sign = nullptr;$/;"	v	file:
secp256k1_context_struct	./secp256k1/src/secp256k1.c	/^struct secp256k1_context_struct {$/;"	s	file:
secp256k1_context_verify	./pubkey.cpp	/^secp256k1_context* secp256k1_context_verify = nullptr;$/;"	m	namespace:__anon55	file:
secp256k1_ctx_clone	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native long secp256k1_ctx_clone(long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_der_parse_integer	./secp256k1/src/ecdsa_impl.h	/^static int secp256k1_der_parse_integer(secp256k1_scalar *r, const unsigned char **sig, const unsigned char *sigend) {$/;"	f
secp256k1_der_read_len	./secp256k1/src/ecdsa_impl.h	/^static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned char *sigend) {$/;"	f
secp256k1_destroy_context	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native void secp256k1_destroy_context(long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_privkey_negate	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_negate(const secp256k1_context* ctx, unsigned char *seckey) {$/;"	f
secp256k1_ec_privkey_tweak_add	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_privkey_tweak_mul	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_mul(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_combine	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, const secp256k1_pubkey * const *pubnonces, size_t n) {$/;"	f
secp256k1_ec_pubkey_create	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ec_pubkey_create(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_pubkey_create	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {$/;"	f
secp256k1_ec_pubkey_negate	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_negate(const secp256k1_context* ctx, secp256k1_pubkey *pubkey) {$/;"	f
secp256k1_ec_pubkey_parse	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ec_pubkey_parse(ByteBuffer byteBuff, long context, int inputLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_pubkey_parse	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_parse(const secp256k1_context* ctx, secp256k1_pubkey* pubkey, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ec_pubkey_serialize	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {$/;"	f
secp256k1_ec_pubkey_tweak_add	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_add(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_tweak_mul	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_seckey_verify	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native int secp256k1_ec_seckey_verify(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_seckey_verify	./secp256k1/src/secp256k1.c	/^int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {$/;"	f
secp256k1_ecdh	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ecdh(ByteBuffer byteBuff, long context, int inputLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdh	./secp256k1/src/modules/ecdh/main_impl.h	/^int secp256k1_ecdh(const secp256k1_context* ctx, unsigned char *result, const secp256k1_pubkey *point, const unsigned char *scalar) {$/;"	f
secp256k1_ecdsa_const_order_as_fe	./secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_const_p_minus_order	./secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_recover	./secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32) {$/;"	f
secp256k1_ecdsa_recoverable_signature	./secp256k1/include/secp256k1_recovery.h	/^} secp256k1_ecdsa_recoverable_signature;$/;"	t	typeref:struct:__anon91
secp256k1_ecdsa_recoverable_signature_convert	./secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_convert(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const secp256k1_ecdsa_recoverable_signature* sigin) {$/;"	f
secp256k1_ecdsa_recoverable_signature_load	./secp256k1/src/modules/recovery/main_impl.h	/^static void secp256k1_ecdsa_recoverable_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, int* recid, const secp256k1_ecdsa_recoverable_signature* sig) {$/;"	f
secp256k1_ecdsa_recoverable_signature_parse_compact	./secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature* sig, const unsigned char *input64, int recid) {$/;"	f
secp256k1_ecdsa_recoverable_signature_save	./secp256k1/src/modules/recovery/main_impl.h	/^static void secp256k1_ecdsa_recoverable_signature_save(secp256k1_ecdsa_recoverable_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s, int recid) {$/;"	f
secp256k1_ecdsa_recoverable_signature_serialize_compact	./secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature* sig) {$/;"	f
secp256k1_ecdsa_sig_parse	./secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *rr, secp256k1_scalar *rs, const unsigned char *sig, size_t size) {$/;"	f
secp256k1_ecdsa_sig_recover	./secp256k1/src/modules/recovery/main_impl.h	/^static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar* sigs, secp256k1_ge *pubkey, const secp256k1_scalar *message, int recid) {$/;"	f
secp256k1_ecdsa_sig_serialize	./secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar* ar, const secp256k1_scalar* as) {$/;"	f
secp256k1_ecdsa_sig_sign	./secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid) {$/;"	f
secp256k1_ecdsa_sig_verify	./secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, const secp256k1_ge *pubkey, const secp256k1_scalar *message) {$/;"	f
secp256k1_ecdsa_sign	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ecdsa_sign(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdsa_sign	./secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_sign_recoverable	./secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_signature	./secp256k1/include/secp256k1.h	/^} secp256k1_ecdsa_signature;$/;"	t	typeref:struct:__anon93
secp256k1_ecdsa_signature_load	./secp256k1/src/secp256k1.c	/^static void secp256k1_ecdsa_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_ecdsa_signature* sig) {$/;"	f	file:
secp256k1_ecdsa_signature_normalize	./secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_normalize(const secp256k1_context* ctx, secp256k1_ecdsa_signature *sigout, const secp256k1_ecdsa_signature *sigin) {$/;"	f
secp256k1_ecdsa_signature_parse_compact	./secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input64) {$/;"	f
secp256k1_ecdsa_signature_parse_der	./secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_parse_der(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ecdsa_signature_save	./secp256k1/src/secp256k1.c	/^static void secp256k1_ecdsa_signature_save(secp256k1_ecdsa_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s) {$/;"	f	file:
secp256k1_ecdsa_signature_serialize_compact	./secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_signature_serialize_der	./secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_der(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_verify	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native int secp256k1_ecdsa_verify(ByteBuffer byteBuff, long context, int sigLen, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdsa_verify	./secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_verify(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {$/;"	f
secp256k1_eckey_privkey_tweak_add	./secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_privkey_tweak_mul	./secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_parse	./secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {$/;"	f
secp256k1_eckey_pubkey_serialize	./secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {$/;"	f
secp256k1_eckey_pubkey_tweak_add	./secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_tweak_mul	./secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_ecmult	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {$/;"	f
secp256k1_ecmult_const	./secp256k1/src/ecmult_const_impl.h	/^static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *scalar) {$/;"	f
secp256k1_ecmult_context	./secp256k1/src/ecmult.h	/^} secp256k1_ecmult_context;$/;"	t	typeref:struct:__anon101
secp256k1_ecmult_context_build	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_context_clear	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_clone	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,$/;"	f
secp256k1_ecmult_context_init	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_is_built	./secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_gen	./secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {$/;"	f
secp256k1_ecmult_gen_blind	./secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32) {$/;"	f
secp256k1_ecmult_gen_context	./secp256k1/src/ecmult_gen.h	/^} secp256k1_ecmult_gen_context;$/;"	t	typeref:struct:__anon100
secp256k1_ecmult_gen_context_build	./secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback* cb) {$/;"	f
secp256k1_ecmult_gen_context_clear	./secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_clone	./secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,$/;"	f
secp256k1_ecmult_gen_context_init	./secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_is_built	./secp256k1/src/ecmult_gen_impl.h	/^static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {$/;"	f
secp256k1_ecmult_odd_multiples_table	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_globalz_windowa	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_storage_var	./secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_static_context	./secp256k1/src/ecmult_static_context.h	/^static const secp256k1_ge_storage secp256k1_ecmult_static_context[64][16] = {$/;"	v
secp256k1_ecmult_wnaf	./secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {$/;"	f
secp256k1_fe	./secp256k1/src/field_10x26.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon94
secp256k1_fe	./secp256k1/src/field_5x52.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon96
secp256k1_fe_add	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_add	./secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	./secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_cmov	./secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmov	./secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmp_var	./secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_cmp_var	./secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal	./secp256k1/src/field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal_var	./secp256k1/src/field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_from_storage	./secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_from_storage	./secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_get_b32	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_get_b32	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv	./secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv_all_var	./secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_all_var(secp256k1_fe *r, const secp256k1_fe *a, size_t len) {$/;"	f
secp256k1_fe_inv_var	./secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	./secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_quad_var	./secp256k1/src/field_impl.h	/^static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	./secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_mul	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	./secp256k1/src/asm/field_10x26_arm.s	/^secp256k1_fe_mul_inner:$/;"	l
secp256k1_fe_mul_inner	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	./secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	./secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_int	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_mul_int	./secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_negate	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_negate	./secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_normalize	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	./secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	./secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	./secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	./secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_set_b32	./secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_b32	./secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_int	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_set_int	./secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_sqr	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr_inner	./secp256k1/src/asm/field_10x26_arm.s	/^secp256k1_fe_sqr_inner:$/;"	l
secp256k1_fe_sqr_inner	./secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {$/;"	f
secp256k1_fe_sqr_inner	./secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqr_inner	./secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqrt	./secp256k1/src/field_impl.h	/^static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_storage	./secp256k1/src/field_10x26.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon95
secp256k1_fe_storage	./secp256k1/src/field_5x52.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon97
secp256k1_fe_storage_cmov	./secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_storage_cmov	./secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_to_storage	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_to_storage	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	./secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	./secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_ge	./secp256k1/src/group.h	/^} secp256k1_ge;$/;"	t	typeref:struct:__anon103
secp256k1_ge_clear	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_clear(secp256k1_ge *r) {$/;"	f
secp256k1_ge_const_g	./secp256k1/src/group_impl.h	/^const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_const_g	./secp256k1/src/group_impl.h	/^static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_from_storage	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {$/;"	f
secp256k1_ge_globalz_set_table_gej	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr) {$/;"	f
secp256k1_ge_is_infinity	./secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_is_valid_var	./secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_valid_var(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_mul_lambda	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_neg	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_set_all_gej_var	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_all_gej_var(secp256k1_ge *r, const secp256k1_gej *a, size_t len, const secp256k1_callback *cb) {$/;"	f
secp256k1_ge_set_gej	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_var	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_zinv	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {$/;"	f
secp256k1_ge_set_table_gej_var	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_table_gej_var(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr, size_t len) {$/;"	f
secp256k1_ge_set_xo_var	./secp256k1/src/group_impl.h	/^static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {$/;"	f
secp256k1_ge_set_xquad	./secp256k1/src/group_impl.h	/^static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x) {$/;"	f
secp256k1_ge_set_xy	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {$/;"	f
secp256k1_ge_storage	./secp256k1/src/group.h	/^} secp256k1_ge_storage;$/;"	t	typeref:struct:__anon105
secp256k1_ge_storage_cmov	./secp256k1/src/group_impl.h	/^static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {$/;"	f
secp256k1_ge_to_storage	./secp256k1/src/group_impl.h	/^static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej	./secp256k1/src/group.h	/^} secp256k1_gej;$/;"	t	typeref:struct:__anon104
secp256k1_gej_add_ge	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {$/;"	f
secp256k1_gej_add_ge_var	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_var	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_zinv_var	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {$/;"	f
secp256k1_gej_clear	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_clear(secp256k1_gej *r) {$/;"	f
secp256k1_gej_double_nonzero	./secp256k1/src/group_impl.h	/^static SECP256K1_INLINE void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_double_var	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_eq_x_var	./secp256k1/src/group_impl.h	/^static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_has_quad_y_var	./secp256k1/src/group_impl.h	/^static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_infinity	./secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_valid_var	./secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_valid_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_neg	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_rescale	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {$/;"	f
secp256k1_gej_set_ge	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej_set_infinity	./secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_infinity(secp256k1_gej *r) {$/;"	f
secp256k1_hmac_sha256_finalize	./secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_hmac_sha256_initialize	./secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_hmac_sha256_t	./secp256k1/src/hash.h	/^} secp256k1_hmac_sha256_t;$/;"	t	typeref:struct:__anon112
secp256k1_hmac_sha256_write	./secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {$/;"	f
secp256k1_init_context	./secp256k1/src/java/org/bitcoin/Secp256k1Context.java	/^  private static native long secp256k1_init_context();$/;"	m	class:Secp256k1Context	file:
secp256k1_nonce_function	./secp256k1/include/secp256k1.h	/^typedef int (*secp256k1_nonce_function)($/;"	t
secp256k1_nonce_function_default	./secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_rfc6979	./secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_smallint	./secp256k1/src/tests_exhaustive.c	/^int secp256k1_nonce_function_smallint(unsigned char *nonce32, const unsigned char *msg32,$/;"	f
secp256k1_num	./secp256k1/src/num_gmp.h	/^} secp256k1_num;$/;"	t	typeref:struct:__anon110
secp256k1_num_add	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_add_abs	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_cmp	./secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_copy	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a) {$/;"	f
secp256k1_num_eq	./secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_get_bin	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a) {$/;"	f
secp256k1_num_is_neg	./secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_neg(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_one	./secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_one(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_zero	./secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_zero(const secp256k1_num *a) {$/;"	f
secp256k1_num_jacobi	./secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_jacobi(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_mod	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m) {$/;"	f
secp256k1_num_mod_inverse	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m) {$/;"	f
secp256k1_num_mul	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_negate	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_negate(secp256k1_num *r) {$/;"	f
secp256k1_num_sanity	./secp256k1/src/num_gmp_impl.h	/^#define secp256k1_num_sanity(/;"	d
secp256k1_num_sanity	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sanity(const secp256k1_num *a) {$/;"	f
secp256k1_num_set_bin	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen) {$/;"	f
secp256k1_num_shift	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_shift(secp256k1_num *r, int bits) {$/;"	f
secp256k1_num_sub	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_sub_abs	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_subadd	./secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_subadd(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b, int bneg) {$/;"	f
secp256k1_privkey_tweak_add	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_privkey_tweak_add(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_privkey_tweak_mul	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_privkey_tweak_mul(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_pubkey	./secp256k1/include/secp256k1.h	/^} secp256k1_pubkey;$/;"	t	typeref:struct:__anon92
secp256k1_pubkey_load	./secp256k1/src/secp256k1.c	/^static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {$/;"	f	file:
secp256k1_pubkey_save	./secp256k1/src/secp256k1.c	/^static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {$/;"	f	file:
secp256k1_pubkey_tweak_add	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_pubkey_tweak_add(ByteBuffer byteBuff, long context, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_pubkey_tweak_mul	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_pubkey_tweak_mul(ByteBuffer byteBuff, long context, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_rand256	./secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256(unsigned char *b32) {$/;"	f
secp256k1_rand256_test	./secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256_test(unsigned char *b32) {$/;"	f
secp256k1_rand32	./secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {$/;"	f
secp256k1_rand_bits	./secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_rand_bits(int bits) {$/;"	f
secp256k1_rand_bytes_test	./secp256k1/src/testrand_impl.h	/^static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len) {$/;"	f
secp256k1_rand_int	./secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_rand_int(uint32_t range) {$/;"	f
secp256k1_rand_seed	./secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16) {$/;"	f
secp256k1_rfc6979_hmac_sha256_finalize	./secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {$/;"	f
secp256k1_rfc6979_hmac_sha256_generate	./secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_initialize	./secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_t	./secp256k1/src/hash.h	/^} secp256k1_rfc6979_hmac_sha256_t;$/;"	t	typeref:struct:__anon113
secp256k1_scalar	./secp256k1/src/scalar_4x64.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon99
secp256k1_scalar	./secp256k1/src/scalar_8x32.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon114
secp256k1_scalar	./secp256k1/src/scalar_low.h	/^typedef uint32_t secp256k1_scalar;$/;"	t
secp256k1_scalar_add	./secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	./secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	./secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_cadd_bit	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	./secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_check_overflow	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) { return *a >= EXHAUSTIVE_TEST_ORDER; }$/;"	f
secp256k1_scalar_clear	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) { *r = 0; }$/;"	f
secp256k1_scalar_cond_negate	./secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	./secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	./secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_eq	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_get_b32	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	./secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_bits	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_num	./secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_get_num(secp256k1_num *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_inverse	./secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_inverse_var	./secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_is_even	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_even(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	./secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	./secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	./secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_mul	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	./secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_shift_var	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_mul_shift_var	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_negate	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	./secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_order_get_num	./secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_order_get_num(secp256k1_num *r) {$/;"	f
secp256k1_scalar_reduce	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {$/;"	f
secp256k1_scalar_reduce	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {$/;"	f
secp256k1_scalar_reduce_512	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l) {$/;"	f
secp256k1_scalar_reduce_512	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint32_t *l) {$/;"	f
secp256k1_scalar_set_b32	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	./secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_int	./secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	./secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	./secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) { *r = v; }$/;"	f
secp256k1_scalar_shr_int	./secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	./secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	./secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_split_128	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	./secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_lambda	./secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	./secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	./secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	./secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar *a) {$/;"	f
secp256k1_sha256_finalize	./secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_sha256_initialize	./secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {$/;"	f
secp256k1_sha256_t	./secp256k1/src/hash.h	/^} secp256k1_sha256_t;$/;"	t	typeref:struct:__anon111
secp256k1_sha256_transform	./secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {$/;"	f
secp256k1_sha256_write	./secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {$/;"	f
secp256k1_test_rng	./secp256k1/src/testrand_impl.h	/^static secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng;$/;"	v
secp256k1_test_rng_integer	./secp256k1/src/testrand_impl.h	/^static uint64_t secp256k1_test_rng_integer;$/;"	v
secp256k1_test_rng_integer_bits_left	./secp256k1/src/testrand_impl.h	/^static int secp256k1_test_rng_integer_bits_left = 0;$/;"	v
secp256k1_test_rng_precomputed	./secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_test_rng_precomputed[8];$/;"	v
secp256k1_test_rng_precomputed_used	./secp256k1/src/testrand_impl.h	/^static int secp256k1_test_rng_precomputed_used = 8;$/;"	v
secp256k1_wnaf_const	./secp256k1/src/ecmult_const_impl.h	/^static int secp256k1_wnaf_const(int *wnaf, secp256k1_scalar s, int w) {$/;"	f
secureClearPassFields	./qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::secureClearPassFields()$/;"	f	class:AskPassphraseDialog
secure_allocator	./support/allocators/secure.h	/^struct secure_allocator : public std::allocator<T> {$/;"	s
seed_	./leveldb/db/db_impl.h	/^  uint32_t seed_;                \/\/ For sampling.$/;"	m	class:leveldb::DBImpl
seed_	./leveldb/db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	./leveldb/util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seed_id	./wallet/walletdb.h	/^    CKeyID seed_id; \/\/!< seed hash160$/;"	m	class:CHDChain
seek	./serialize.h	/^    void seek(size_t _nSize)$/;"	f	class:CSizeComputer
seek_file	./leveldb/db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	./leveldb/db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seen_key_	./leveldb/db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
selectNewAddress	./qt/addressbookpage.cpp	/^void AddressBookPage::selectNewAddress(const QModelIndex &parent, int begin, int \/*end*\/)$/;"	f	class:AddressBookPage
selectedRow	./qt/receivecoinsdialog.cpp	/^QModelIndex ReceiveCoinsDialog::selectedRow()$/;"	f	class:ReceiveCoinsDialog
selectionChanged	./qt/addressbookpage.cpp	/^void AddressBookPage::selectionChanged()$/;"	f	class:AddressBookPage
sem	./sync.h	/^    CSemaphore* sem;$/;"	m	class:CSemaphoreGrant
sem1_	./leveldb/port/port_win.h	/^  void * sem1_;$/;"	m	class:leveldb::port::CondVar
sem2_	./leveldb/port/port_win.h	/^  void * sem2_;$/;"	m	class:leveldb::port::CondVar
semAddnode	./net.h	/^    std::unique_ptr<CSemaphore> semAddnode;$/;"	m	class:CConnman
semOutbound	./net.h	/^    std::unique_ptr<CSemaphore> semOutbound;$/;"	m	class:CConnman
sendCoins	./qt/walletmodel.cpp	/^WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &transaction)$/;"	f	class:WalletModel
sendCoinsAction	./qt/bitcoingui.h	/^    QAction* sendCoinsAction = nullptr;$/;"	m	class:BitcoinGUI
sendCoinsMenuAction	./qt/bitcoingui.h	/^    QAction* sendCoinsMenuAction = nullptr;$/;"	m	class:BitcoinGUI
sendCoinsPage	./qt/walletview.h	/^    SendCoinsDialog *sendCoinsPage;$/;"	m	class:WalletView
sendmany	./wallet/rpcwallet.cpp	/^static UniValue sendmany(const JSONRPCRequest& request)$/;"	f	file:
sendrawtransaction	./rpc/rawtransaction.cpp	/^static UniValue sendrawtransaction(const JSONRPCRequest& request)$/;"	f	file:
sendtoaddress	./wallet/rpcwallet.cpp	/^static UniValue sendtoaddress(const JSONRPCRequest& request)$/;"	f	file:
separatorAlways	./qt/bitcoinunits.h	/^        separatorAlways$/;"	e	enum:BitcoinUnits::SeparatorStyle
separatorNever	./qt/bitcoinunits.h	/^        separatorNever,$/;"	e	enum:BitcoinUnits::SeparatorStyle
separatorStandard	./qt/bitcoinunits.h	/^        separatorStandard,$/;"	e	enum:BitcoinUnits::SeparatorStyle
sequence	./leveldb/db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	./leveldb/db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon29::DBIter	file:
sequence_	./leveldb/db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon22::MemTableInserter	file:
ser_double_to_uint64	./serialize.h	/^inline uint64_t ser_double_to_uint64(double x)$/;"	f
ser_float_to_uint32	./serialize.h	/^inline uint32_t ser_float_to_uint32(float x)$/;"	f
ser_readdata16	./serialize.h	/^template<typename Stream> inline uint16_t ser_readdata16(Stream &s)$/;"	f
ser_readdata16be	./serialize.h	/^template<typename Stream> inline uint16_t ser_readdata16be(Stream &s)$/;"	f
ser_readdata32	./serialize.h	/^template<typename Stream> inline uint32_t ser_readdata32(Stream &s)$/;"	f
ser_readdata32be	./serialize.h	/^template<typename Stream> inline uint32_t ser_readdata32be(Stream &s)$/;"	f
ser_readdata64	./serialize.h	/^template<typename Stream> inline uint64_t ser_readdata64(Stream &s)$/;"	f
ser_readdata8	./serialize.h	/^template<typename Stream> inline uint8_t ser_readdata8(Stream &s)$/;"	f
ser_uint32_to_float	./serialize.h	/^inline float ser_uint32_to_float(uint32_t y)$/;"	f
ser_uint64_to_double	./serialize.h	/^inline double ser_uint64_to_double(uint64_t y)$/;"	f
ser_writedata16	./serialize.h	/^template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)$/;"	f
ser_writedata16be	./serialize.h	/^template<typename Stream> inline void ser_writedata16be(Stream &s, uint16_t obj)$/;"	f
ser_writedata32	./serialize.h	/^template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)$/;"	f
ser_writedata32be	./serialize.h	/^template<typename Stream> inline void ser_writedata32be(Stream &s, uint32_t obj)$/;"	f
ser_writedata64	./serialize.h	/^template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)$/;"	f
ser_writedata8	./serialize.h	/^template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)$/;"	f
serialize	./script/script.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum
serialize	./test/scriptnum10.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum10
service	./torcontrol.cpp	/^    CService service;$/;"	m	class:TorController	file:
serviceQueue	./scheduler.cpp	/^void CScheduler::serviceQueue()$/;"	f	class:CScheduler
service_id	./torcontrol.cpp	/^    std::string service_id;$/;"	m	class:TorController	file:
setAbandoned	./wallet/wallet.h	/^    void setAbandoned() { hashBlock = ABANDON_HASH; }$/;"	f	class:CMerkleTx
setAddress	./qt/editaddressdialog.cpp	/^void EditAddressDialog::setAddress(const QString &_address)$/;"	f	class:EditAddressDialog
setAddress	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setAddress(const QString &address)$/;"	f	class:SendCoinsDialog
setAddress	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setAddress(const QString &address)$/;"	f	class:SendCoinsEntry
setAddress_SM	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_SM(const QString &address)$/;"	f	class:SignVerifyMessageDialog
setAddress_VM	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_VM(const QString &address)$/;"	f	class:SignVerifyMessageDialog
setAmount	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setAmount(const CAmount &amount)$/;"	f	class:SendCoinsEntry
setArray	./univalue/lib/univalue.cpp	/^bool UniValue::setArray()$/;"	f	class:UniValue
setBalance	./qt/overviewpage.cpp	/^void OverviewPage::setBalance(const interfaces::WalletBalances& balances)$/;"	f	class:OverviewPage
setBalance	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setBalance(const interfaces::WalletBalances& balances)$/;"	f	class:SendCoinsDialog
setBitcoinGUI	./qt/walletview.cpp	/^void WalletView::setBitcoinGUI(BitcoinGUI *gui)$/;"	f	class:WalletView
setBlockIndexCandidates	./validation.cpp	/^    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;$/;"	m	class:CChainState	file:
setBool	./univalue/lib/univalue.cpp	/^bool UniValue::setBool(bool val_)$/;"	f	class:UniValue
setCheckValidator	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setCheckValidator(const QValidator *v)$/;"	f	class:QValidatedLineEdit
setClientModel	./qt/bitcoingui.cpp	/^void BitcoinGUI::setClientModel(ClientModel *_clientModel)$/;"	f	class:BitcoinGUI
setClientModel	./qt/overviewpage.cpp	/^void OverviewPage::setClientModel(ClientModel *model)$/;"	f	class:OverviewPage
setClientModel	./qt/rpcconsole.cpp	/^void RPCConsole::setClientModel(ClientModel *model)$/;"	f	class:RPCConsole
setClientModel	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setClientModel(ClientModel *_clientModel)$/;"	f	class:SendCoinsDialog
setClientModel	./qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::setClientModel(ClientModel *model)$/;"	f	class:TrafficGraphWidget
setClientModel	./qt/walletframe.cpp	/^void WalletFrame::setClientModel(ClientModel *_clientModel)$/;"	f	class:WalletFrame
setClientModel	./qt/walletview.cpp	/^void WalletView::setClientModel(ClientModel *_clientModel)$/;"	f	class:WalletView
setClipboard	./qt/guiutil.cpp	/^void setClipboard(const QString& str)$/;"	f	namespace:GUIUtil
setCurrentTab	./qt/optionsdialog.cpp	/^void OptionsDialog::setCurrentTab(OptionsDialog::Tab tab)$/;"	f	class:OptionsDialog
setCurrentWallet	./qt/bitcoingui.cpp	/^void BitcoinGUI::setCurrentWallet(WalletModel* wallet_model)$/;"	f	class:BitcoinGUI
setCurrentWallet	./qt/walletframe.cpp	/^void WalletFrame::setCurrentWallet(WalletModel* wallet_model)$/;"	f	class:WalletFrame
setCurrentWalletBySelectorIndex	./qt/bitcoingui.cpp	/^void BitcoinGUI::setCurrentWalletBySelectorIndex(int index)$/;"	f	class:BitcoinGUI
setData	./qt/addresstablemodel.cpp	/^bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value, int role)$/;"	f	class:AddressTableModel
setData	./qt/optionsmodel.cpp	/^bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)$/;"	f	class:OptionsModel
setData	./qt/recentrequeststablemodel.cpp	/^bool RecentRequestsTableModel::setData(const QModelIndex &index, const QVariant &value, int role)$/;"	f	class:RecentRequestsTableModel
setDataDirectory	./qt/intro.cpp	/^void Intro::setDataDirectory(const QString &dataDir)$/;"	f	class:Intro
setDateRange	./qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setDateRange(const QDateTime &from, const QDateTime &to)$/;"	f	class:TransactionFilterProxy
setDirtyBlockIndex	./validation.cpp	/^    std::set<CBlockIndex*> setDirtyBlockIndex;$/;"	m	namespace:__anon50	file:
setDirtyFileInfo	./validation.cpp	/^    std::set<int> setDirtyFileInfo;$/;"	m	namespace:__anon50	file:
setDisplayUnit	./qt/bitcoinamountfield.cpp	/^    void setDisplayUnit(int unit)$/;"	f	class:AmountSpinBox
setDisplayUnit	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setDisplayUnit(int newUnit)$/;"	f	class:BitcoinAmountField
setDisplayUnit	./qt/optionsmodel.cpp	/^void OptionsModel::setDisplayUnit(const QVariant &value)$/;"	f	class:OptionsModel
setEnabled	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setEnabled(bool fEnabled)$/;"	f	class:BitcoinAmountField
setEnabled	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setEnabled(bool enabled)$/;"	f	class:QValidatedLineEdit
setEncryptionStatus	./qt/bitcoingui.cpp	/^void BitcoinGUI::setEncryptionStatus(int status)$/;"	f	class:BitcoinGUI
setEntries	./txmempool.h	/^    typedef std::set<txiter, CompareIteratorByHash> setEntries;$/;"	t	class:CTxMemPool
setExpect	./univalue/lib/univalue_read.cpp	/^#define setExpect(/;"	d	file:
setFloat	./univalue/lib/univalue.cpp	/^bool UniValue::setFloat(double val_)$/;"	f	class:UniValue
setFocus	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setFocus()$/;"	f	class:SendCoinsEntry
setFontSize	./qt/rpcconsole.cpp	/^void RPCConsole::setFontSize(int newSize)$/;"	f	class:RPCConsole
setGraphRangeMins	./qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::setGraphRangeMins(int mins)$/;"	f	class:TrafficGraphWidget
setHDStatus	./qt/bitcoingui.cpp	/^void BitcoinGUI::setHDStatus(bool privkeyDisabled, int hdEnabled)$/;"	f	class:BitcoinGUI
setInfo	./qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::setInfo(const SendCoinsRecipient &_info)$/;"	f	class:ReceiveRequestDialog
setInt	./univalue/include/univalue.h	/^    bool setInt(int val_) { return setInt((int64_t)val_); }$/;"	f	class:UniValue
setInt	./univalue/lib/univalue.cpp	/^bool UniValue::setInt(int64_t val_)$/;"	f	class:UniValue
setInt	./univalue/lib/univalue.cpp	/^bool UniValue::setInt(uint64_t val_)$/;"	f	class:UniValue
setInventoryTxToSend	./net.h	/^    std::set<uint256> setInventoryTxToSend;$/;"	m	class:CNode
setKnown	./net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setKnownBestHeight	./qt/modaloverlay.cpp	/^void ModalOverlay::setKnownBestHeight(int count, const QDateTime& blockDate)$/;"	f	class:ModalOverlay
setLimit	./qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setLimit(int limit)$/;"	f	class:TransactionFilterProxy
setMapper	./qt/optionsdialog.cpp	/^void OptionsDialog::setMapper()$/;"	f	class:OptionsDialog
setMempoolSize	./qt/rpcconsole.cpp	/^void RPCConsole::setMempoolSize(long numberOfTxs, size_t dynUsage)$/;"	f	class:RPCConsole
setMinAmount	./qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setMinAmount(const CAmount& minimum)$/;"	f	class:TransactionFilterProxy
setModel	./qt/addressbookpage.cpp	/^void AddressBookPage::setModel(AddressTableModel *_model)$/;"	f	class:AddressBookPage
setModel	./qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::setModel(WalletModel *_model)$/;"	f	class:AskPassphraseDialog
setModel	./qt/coincontroldialog.cpp	/^void CoinControlDialog::setModel(WalletModel *_model)$/;"	f	class:CoinControlDialog
setModel	./qt/csvmodelwriter.cpp	/^void CSVModelWriter::setModel(const QAbstractItemModel *_model)$/;"	f	class:CSVModelWriter
setModel	./qt/editaddressdialog.cpp	/^void EditAddressDialog::setModel(AddressTableModel *_model)$/;"	f	class:EditAddressDialog
setModel	./qt/optionsdialog.cpp	/^void OptionsDialog::setModel(OptionsModel *_model)$/;"	f	class:OptionsDialog
setModel	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::setModel(WalletModel *_model)$/;"	f	class:ReceiveCoinsDialog
setModel	./qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::setModel(WalletModel *_model)$/;"	f	class:ReceiveRequestDialog
setModel	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setModel(WalletModel *_model)$/;"	f	class:SendCoinsDialog
setModel	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setModel(WalletModel *_model)$/;"	f	class:SendCoinsEntry
setModel	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setModel(WalletModel *_model)$/;"	f	class:SignVerifyMessageDialog
setModel	./qt/transactionview.cpp	/^void TransactionView::setModel(WalletModel *_model)$/;"	f	class:TransactionView
setNetworkActive	./qt/bitcoingui.cpp	/^void BitcoinGUI::setNetworkActive(bool networkActive)$/;"	f	class:BitcoinGUI
setNetworkActive	./qt/rpcconsole.cpp	/^void RPCConsole::setNetworkActive(bool networkActive)$/;"	f	class:RPCConsole
setNull	./univalue/lib/univalue.cpp	/^bool UniValue::setNull()$/;"	f	class:UniValue
setNumBlocks	./qt/bitcoingui.cpp	/^void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)$/;"	f	class:BitcoinGUI
setNumBlocks	./qt/rpcconsole.cpp	/^void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers)$/;"	f	class:RPCConsole
setNumConnections	./qt/bitcoingui.cpp	/^void BitcoinGUI::setNumConnections(int count)$/;"	f	class:BitcoinGUI
setNumConnections	./qt/rpcconsole.cpp	/^void RPCConsole::setNumConnections(int count)$/;"	f	class:RPCConsole
setNumStr	./univalue/lib/univalue.cpp	/^bool UniValue::setNumStr(const std::string& val_)$/;"	f	class:UniValue
setObject	./univalue/lib/univalue.cpp	/^bool UniValue::setObject()$/;"	f	class:UniValue
setOkButtonState	./qt/optionsdialog.cpp	/^void OptionsDialog::setOkButtonState(bool fState)$/;"	f	class:OptionsDialog
setOptionsModel	./qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::setOptionsModel(OptionsModel *_optionsModel)$/;"	f	class:UnitDisplayStatusBarControl
setOptionsModel	./qt/paymentserver.cpp	/^void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)$/;"	f	class:PaymentServer
setProcessingQueuedTransactions	./qt/transactiontablemodel.h	/^    void setProcessingQueuedTransactions(bool value) { fProcessingQueuedTransactions = value; }$/;"	f	class:TransactionTableModel
setQR	./qt/qrimagewidget.cpp	/^bool QRImageWidget::setQR(const QString& data, const QString& text)$/;"	f	class:QRImageWidget
setReadOnly	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setReadOnly(bool fReadOnly)$/;"	f	class:BitcoinAmountField
setRestartRequired	./qt/optionsmodel.cpp	/^void OptionsModel::setRestartRequired(bool fRequired)$/;"	f	class:OptionsModel
setRole	./qt/qvaluecombobox.cpp	/^void QValueComboBox::setRole(int _role)$/;"	f	class:QValueComboBox
setSanityCheck	./txmempool.h	/^    void setSanityCheck(double dFrequency = 1.0) { LOCK(cs); nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }$/;"	f	class:CTxMemPool
setSearchString	./qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setSearchString(const QString &search_string)$/;"	f	class:TransactionFilterProxy
setSelected	./wallet/coincontrol.h	/^    std::set<COutPoint> setSelected;$/;"	m	class:CCoinControl
setShowInactive	./qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setShowInactive(bool _showInactive)$/;"	f	class:TransactionFilterProxy
setSingleStep	./qt/bitcoinamountfield.cpp	/^    void setSingleStep(const CAmount& step)$/;"	f	class:AmountSpinBox
setSingleStep	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setSingleStep(const CAmount& step)$/;"	f	class:BitcoinAmountField
setStatus	./qt/intro.cpp	/^void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable)$/;"	f	class:Intro
setStr	./univalue/lib/univalue.cpp	/^bool UniValue::setStr(const std::string& val_)$/;"	f	class:UniValue
setTabFocus	./qt/rpcconsole.cpp	/^void RPCConsole::setTabFocus(enum TabTypes tabType)$/;"	f	class:RPCConsole
setTrafficGraphRange	./qt/rpcconsole.cpp	/^void RPCConsole::setTrafficGraphRange(int mins)$/;"	f	class:RPCConsole
setTransactionFee	./qt/walletmodeltransaction.cpp	/^void WalletModelTransaction::setTransactionFee(const CAmount& newFee)$/;"	f	class:WalletModelTransaction
setTrayIconVisible	./qt/bitcoingui.cpp	/^void BitcoinGUI::setTrayIconVisible(bool fHideTrayIcon)$/;"	f	class:BitcoinGUI
setTypeFilter	./qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setTypeFilter(quint32 modes)$/;"	f	class:TransactionFilterProxy
setValid	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setValid(bool valid)$/;"	f	class:BitcoinAmountField
setValid	./qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setValid(bool _valid)$/;"	f	class:QValidatedLineEdit
setValid	./script/sigcache.cpp	/^    map_type setValid;$/;"	m	class:__anon84::CSignatureCache	file:
setValue	./qt/bitcoinamountfield.cpp	/^    void setValue(const CAmount& value)$/;"	f	class:AmountSpinBox
setValue	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setValue(const CAmount& value)$/;"	f	class:BitcoinAmountField
setValue	./qt/qvaluecombobox.cpp	/^void QValueComboBox::setValue(const QVariant &value)$/;"	f	class:QValueComboBox
setValue	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setValue(const SendCoinsRecipient &value)$/;"	f	class:SendCoinsEntry
setViewHeaderResizeMode	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
setWalletActionsEnabled	./qt/bitcoingui.cpp	/^void BitcoinGUI::setWalletActionsEnabled(bool enabled)$/;"	f	class:BitcoinGUI
setWalletController	./qt/bitcoingui.cpp	/^void BitcoinGUI::setWalletController(WalletController* wallet_controller)$/;"	f	class:BitcoinGUI
setWalletEncrypted	./qt/walletmodel.cpp	/^bool WalletModel::setWalletEncrypted(bool encrypted, const SecureString &passphrase)$/;"	f	class:WalletModel
setWalletLocked	./qt/walletmodel.cpp	/^bool WalletModel::setWalletLocked(bool locked, const SecureString &passPhrase)$/;"	f	class:WalletModel
setWalletModel	./qt/overviewpage.cpp	/^void OverviewPage::setWalletModel(WalletModel *model)$/;"	f	class:OverviewPage
setWalletModel	./qt/walletview.cpp	/^void WalletView::setWalletModel(WalletModel *_walletModel)$/;"	f	class:WalletView
setWatchOnlyFilter	./qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setWatchOnlyFilter(WatchOnlyFilter filter)$/;"	f	class:TransactionFilterProxy
set_base_from	./secp256k1/build-aux/depcomp	/^set_base_from ()$/;"	f
set_base_from	./univalue/build-aux/depcomp	/^set_base_from ()$/;"	f
set_dir_from	./secp256k1/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_dir_from	./univalue/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_error	./script/bitcoinconsensus.cpp	/^inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)$/;"	f	namespace:__anon81
set_error	./script/interpreter.cpp	/^inline bool set_error(ScriptError* ret, const ScriptError serror)$/;"	f	namespace:__anon76
set_index_handle	./leveldb/table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	./leveldb/table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	./leveldb/table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	./leveldb/table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
set_success	./script/interpreter.cpp	/^inline bool set_success(ScriptError* ret)$/;"	f	namespace:__anon76
set_vch	./script/script.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum
set_vch	./test/scriptnum10.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum10
setban	./rpc/net.cpp	/^static UniValue setban(const JSONRPCRequest& request)$/;"	f	file:
sethdseed	./wallet/rpcwallet.cpp	/^UniValue sethdseed(const JSONRPCRequest& request)$/;"	f
setlabel	./wallet/rpcwallet.cpp	/^static UniValue setlabel(const JSONRPCRequest& request)$/;"	f	file:
setmocktime	./rpc/misc.cpp	/^static UniValue setmocktime(const JSONRPCRequest& request)$/;"	f	file:
setnetworkactive	./rpc/net.cpp	/^static UniValue setnetworkactive(const JSONRPCRequest& request)$/;"	f	file:
settxfee	./wallet/rpcwallet.cpp	/^static UniValue settxfee(const JSONRPCRequest& request)$/;"	f	file:
setup	./cuckoocache.h	/^    inline void setup(uint32_t b)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
setup	./cuckoocache.h	/^    uint32_t setup(uint32_t new_size)$/;"	f	class:CuckooCache::cache
setupAddressWidget	./qt/guiutil.cpp	/^void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)$/;"	f	namespace:GUIUtil
setupPlatformStyle	./qt/bitcoin.cpp	/^void BitcoinApplication::setupPlatformStyle()$/;"	f	class:BitcoinApplication
setupTabChain	./qt/bitcoinamountfield.cpp	/^QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)$/;"	f	class:BitcoinAmountField
setupTabChain	./qt/sendcoinsdialog.cpp	/^QWidget *SendCoinsDialog::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsDialog
setupTabChain	./qt/sendcoinsentry.cpp	/^QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsEntry
setup_bytes	./cuckoocache.h	/^    uint32_t setup_bytes(size_t bytes)$/;"	f	class:CuckooCache::cache
setup_bytes	./script/sigcache.cpp	/^    uint32_t setup_bytes(size_t n)$/;"	f	class:__anon84::CSignatureCache
sha	./hash.h	/^    CSHA256 sha;$/;"	m	class:CHash160
sha	./hash.h	/^    CSHA256 sha;$/;"	m	class:CHash256
sha1	./crypto/sha1.cpp	/^namespace sha1$/;"	n	namespace:__anon38	file:
sha256	./crypto/sha256.cpp	/^namespace sha256$/;"	n	namespace:__anon40	file:
sha256_shani	./crypto/sha256.cpp	/^namespace sha256_shani$/;"	n	file:
sha256_shani	./crypto/sha256_shani.cpp	/^namespace sha256_shani {$/;"	n	file:
sha256_sse4	./crypto/sha256.cpp	/^namespace sha256_sse4$/;"	n	file:
sha256_sse4	./crypto/sha256_sse4.cpp	/^namespace sha256_sse4$/;"	n	file:
sha256d64_avx2	./crypto/sha256.cpp	/^namespace sha256d64_avx2$/;"	n	file:
sha256d64_avx2	./crypto/sha256_avx2.cpp	/^namespace sha256d64_avx2 {$/;"	n	file:
sha256d64_shani	./crypto/sha256.cpp	/^namespace sha256d64_shani$/;"	n	file:
sha256d64_shani	./crypto/sha256_shani.cpp	/^namespace sha256d64_shani {$/;"	n	file:
sha256d64_sse41	./crypto/sha256.cpp	/^namespace sha256d64_sse41$/;"	n	file:
sha256d64_sse41	./crypto/sha256_sse41.cpp	/^namespace sha256d64_sse41 {$/;"	n	file:
sha512	./crypto/sha512.cpp	/^namespace sha512$/;"	n	namespace:__anon39	file:
shard_	./leveldb/util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon4::ShardedLRUCache	file:
shared	./leveldb/db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	./leveldb/db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon19::ThreadState	file:
sharedstatedir	./Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	./secp256k1/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	./univalue/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shiftArrayLeft	./test/arith_uint256_tests.cpp	/^static void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f	file:
shiftArrayRight	./test/arith_uint256_tests.cpp	/^static void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f	file:
shortName	./qt/bitcoinunits.cpp	/^QString BitcoinUnits::shortName(int unit)$/;"	f	class:BitcoinUnits
shorttxidk0	./blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxidk1	./blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	./blockencodings.h	/^    std::vector<uint64_t> shorttxids;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	./test/blockencodings_tests.cpp	/^    std::vector<uint64_t> shorttxids;$/;"	m	class:TestHeaderAndShortIDs	file:
shouldShow	./qt/bantablemodel.cpp	/^bool BanTableModel::shouldShow()$/;"	f	class:BanTableModel
shouldStop	./scheduler.h	/^    bool shouldStop() const { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }$/;"	f	class:CScheduler
showBanTableContextMenu	./qt/rpcconsole.cpp	/^void RPCConsole::showBanTableContextMenu(const QPoint& point)$/;"	f	class:RPCConsole
showDebugWindow	./qt/bitcoingui.cpp	/^void BitcoinGUI::showDebugWindow()$/;"	f	class:BitcoinGUI
showDebugWindowActivateConsole	./qt/bitcoingui.cpp	/^void BitcoinGUI::showDebugWindowActivateConsole()$/;"	f	class:BitcoinGUI
showDetails	./qt/transactionview.cpp	/^void TransactionView::showDetails()$/;"	f	class:TransactionView
showEvent	./qt/bitcoingui.cpp	/^void BitcoinGUI::showEvent(QShowEvent *event)$/;"	f	class:BitcoinGUI
showEvent	./qt/rpcconsole.cpp	/^void RPCConsole::showEvent(QShowEvent *event)$/;"	f	class:RPCConsole
showHelpMessageAction	./qt/bitcoingui.h	/^    QAction* showHelpMessageAction = nullptr;$/;"	m	class:BitcoinGUI
showHelpMessageClicked	./qt/bitcoingui.cpp	/^void BitcoinGUI::showHelpMessageClicked()$/;"	f	class:BitcoinGUI
showHide	./qt/modaloverlay.cpp	/^void ModalOverlay::showHide(bool hide, bool userRequested)$/;"	f	class:ModalOverlay
showInactive	./qt/transactionfilterproxy.h	/^    bool showInactive;$/;"	m	class:TransactionFilterProxy
showMenu	./qt/coincontroldialog.cpp	/^void CoinControlDialog::showMenu(const QPoint &point)$/;"	f	class:CoinControlDialog
showMenu	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::showMenu(const QPoint &point)$/;"	f	class:ReceiveCoinsDialog
showMessage	./qt/splashscreen.cpp	/^void SplashScreen::showMessage(const QString &message, int alignment, const QColor &color)$/;"	f	class:SplashScreen
showModalOverlay	./qt/bitcoingui.cpp	/^void BitcoinGUI::showModalOverlay()$/;"	f	class:BitcoinGUI
showNormalIfMinimized	./qt/bitcoingui.cpp	/^void BitcoinGUI::showNormalIfMinimized(bool fToggleHidden)$/;"	f	class:BitcoinGUI
showNormalIfMinimized	./qt/bitcoingui.h	/^    void showNormalIfMinimized() { showNormalIfMinimized(false); }$/;"	f	class:BitcoinGUI
showOrHideBanTableIfRequired	./qt/rpcconsole.cpp	/^void RPCConsole::showOrHideBanTableIfRequired()$/;"	f	class:RPCConsole
showOrPrint	./qt/utilitydialog.cpp	/^void HelpMessageDialog::showOrPrint()$/;"	f	class:HelpMessageDialog
showOutOfSyncWarning	./qt/overviewpage.cpp	/^void OverviewPage::showOutOfSyncWarning(bool fShow)$/;"	f	class:OverviewPage
showOutOfSyncWarning	./qt/walletframe.cpp	/^void WalletFrame::showOutOfSyncWarning(bool fShow)$/;"	f	class:WalletFrame
showOutOfSyncWarning	./qt/walletview.cpp	/^void WalletView::showOutOfSyncWarning(bool fShow)$/;"	f	class:WalletView
showPeersTableContextMenu	./qt/rpcconsole.cpp	/^void RPCConsole::showPeersTableContextMenu(const QPoint& point)$/;"	f	class:RPCConsole
showProgress	./qt/bitcoingui.cpp	/^void BitcoinGUI::showProgress(const QString &title, int nProgress)$/;"	f	class:BitcoinGUI
showProgress	./qt/walletview.cpp	/^void WalletView::showProgress(const QString &title, int nProgress)$/;"	f	class:WalletView
showRestartWarning	./qt/optionsdialog.cpp	/^void OptionsDialog::showRestartWarning(bool fPersistent)$/;"	f	class:OptionsDialog
showShutdownWindow	./qt/utilitydialog.cpp	/^QWidget *ShutdownWindow::showShutdownWindow(BitcoinGUI *window)$/;"	f	class:ShutdownWindow
showTab_SM	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_SM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTab_VM	./qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_VM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTransaction	./qt/transactionrecord.cpp	/^bool TransactionRecord::showTransaction()$/;"	f	class:TransactionRecord
showTransaction	./qt/transactiontablemodel.cpp	/^    bool showTransaction;$/;"	m	struct:TransactionNotification	file:
shrink_to_fit	./prevector.h	/^    void shrink_to_fit() {$/;"	f	class:prevector
shrink_to_fit	./test/prevector_tests.cpp	/^    void shrink_to_fit() {$/;"	f	class:prevector_tester
shutdown	./qt/bitcoin.cpp	/^void BitcoinCore::shutdown()$/;"	f	class:BitcoinCore
shutdownResult	./qt/bitcoin.cpp	/^void BitcoinApplication::shutdownResult()$/;"	f	class:BitcoinApplication
shutdownWindow	./qt/bitcoin.h	/^    std::unique_ptr<QWidget> shutdownWindow;$/;"	m	class:BitcoinApplication
shutting_down_	./leveldb/db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
sig	./secp256k1/src/bench_recover.c	/^    unsigned char sig[64];$/;"	m	struct:__anon98	file:
sig	./secp256k1/src/bench_verify.c	/^    unsigned char sig[72];$/;"	m	struct:__anon106	file:
sigOpCost	./test/setup_common.h	/^    unsigned int sigOpCost;$/;"	m	struct:TestMemPoolEntryHelper
sigOpCost	./txmempool.h	/^    const int64_t sigOpCost;        \/\/!< Total sigop cost$/;"	m	class:CTxMemPoolEntry
sigdata	./script/sign.cpp	/^    SignatureData& sigdata;$/;"	m	class:final	file:
sighash	./test/data/sighash.json.h	/^static unsigned const char sighash[] = {$/;"	m	namespace:json_tests
sighashOptions	./bitcoin-tx.cpp	/^} sighashOptions[N_SIGHASH_OPTS] = {$/;"	v	typeref:struct:__anon87	file:
sighash_type	./psbt.h	/^    int sighash_type = 0;$/;"	m	struct:PSBTInput
siglen	./secp256k1/src/bench_verify.c	/^    size_t siglen;$/;"	m	struct:__anon106	file:
sigma	./crypto/chacha20.cpp	/^static const unsigned char sigma[] = "expand 32-byte k";$/;"	v	file:
sigma0	./crypto/sha256.cpp	/^uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }$/;"	f	namespace:__anon40::sha256
sigma0	./crypto/sha256_avx2.cpp	/^__m256i inline sigma0(__m256i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }$/;"	f	namespace:sha256d64_avx2::__anon37
sigma0	./crypto/sha256_sse41.cpp	/^__m128i inline sigma0(__m128i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }$/;"	f	namespace:sha256d64_sse41::__anon41
sigma0	./crypto/sha512.cpp	/^uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x << 56) ^ (x >> 7); }$/;"	f	namespace:__anon39::sha512
sigma0	./secp256k1/src/hash_impl.h	/^#define sigma0(/;"	d
sigma0	./secp256k1/src/hash_impl.h	/^#undef sigma0$/;"	d
sigma1	./crypto/sha256.cpp	/^uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }$/;"	f	namespace:__anon40::sha256
sigma1	./crypto/sha256_avx2.cpp	/^__m256i inline sigma1(__m256i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }$/;"	f	namespace:sha256d64_avx2::__anon37
sigma1	./crypto/sha256_sse41.cpp	/^__m128i inline sigma1(__m128i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }$/;"	f	namespace:sha256d64_sse41::__anon41
sigma1	./crypto/sha512.cpp	/^uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }$/;"	f	namespace:__anon39::sha512
sigma1	./secp256k1/src/hash_impl.h	/^#define sigma1(/;"	d
sigma1	./secp256k1/src/hash_impl.h	/^#undef sigma1$/;"	d
sign	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static byte[] sign(byte[] data, byte[] sec) throws AssertFailException{$/;"	m	class:NativeSecp256k1
signMessageAction	./qt/bitcoingui.h	/^    QAction* signMessageAction = nullptr;$/;"	m	class:BitcoinGUI
sign_multisig	./test/multisig_tests.cpp	/^sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction, int whichIn)$/;"	f	file:
sign_multisig	./test/script_tests.cpp	/^sign_multisig(const CScript& scriptPubKey, const CKey& key, const CTransaction& transaction)$/;"	f	file:
sign_multisig	./test/script_tests.cpp	/^sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction)$/;"	f	file:
signalled	./qt/intro.h	/^    bool signalled;$/;"	m	class:Intro
signals2	./interfaces/handler.h	/^namespace signals2 {$/;"	n	namespace:boost
signals2	./ui_interface.h	/^namespace signals2 {$/;"	n	namespace:boost
signatureCache	./script/sigcache.cpp	/^static CSignatureCache signatureCache;$/;"	m	namespace:__anon84	file:
signatures	./script/sign.h	/^    std::map<CKeyID, SigPair> signatures; \/\/\/< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.$/;"	m	struct:SignatureData
signmessage	./wallet/rpcwallet.cpp	/^static UniValue signmessage(const JSONRPCRequest& request)$/;"	f	file:
signmessagewithprivkey	./rpc/misc.cpp	/^static UniValue signmessagewithprivkey(const JSONRPCRequest& request)$/;"	f	file:
signrawtransactionwithkey	./rpc/rawtransaction.cpp	/^static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)$/;"	f	file:
signrawtransactionwithwallet	./wallet/rpcwallet.cpp	/^UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)$/;"	f
singleColor	./qt/platformstyle.h	/^    QColor singleColor;$/;"	m	class:PlatformStyle
siphash_4_2_testvec	./test/hash_tests.cpp	/^uint64_t siphash_4_2_testvec[] = {$/;"	v
size	./addrman.h	/^    size_t size() const$/;"	f	class:CAddrMan
size	./arith_uint256.h	/^    unsigned int size() const$/;"	f	class:base_uint
size	./cuckoocache.h	/^    uint32_t size;$/;"	m	class:CuckooCache::cache
size	./indirectmap.h	/^    size_type size() const          { return m.size(); }$/;"	f	class:indirectmap
size	./key.h	/^    unsigned int size() const { return (fValid ? keydata.size() : 0); }$/;"	f	class:CKey
size	./leveldb/include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	./leveldb/table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	./leveldb/table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size	./limitedmap.h	/^    size_type size() const { return map.size(); }$/;"	f	class:limitedmap
size	./prevector.h	/^    size_type size() const {$/;"	f	class:prevector
size	./pubkey.h	/^    unsigned int size() const { return GetLen(vch[0]); }$/;"	f	class:CPubKey
size	./qt/addresstablemodel.cpp	/^    int size()$/;"	f	class:AddressTablePriv
size	./qt/bantablemodel.cpp	/^    int size() const$/;"	f	class:BanTablePriv
size	./qt/peertablemodel.cpp	/^    int size() const$/;"	f	class:PeerTablePriv
size	./qt/transactiontablemodel.cpp	/^    int size()$/;"	f	class:TransactionTablePriv
size	./serialize.h	/^    size_t size() const {$/;"	f	class:CSizeComputer
size	./streams.h	/^    size_t size() const { return m_data.size() - m_pos; }$/;"	f	class:VectorReader
size	./streams.h	/^    size_t size() const { return stream->size(); }$/;"	f	class:OverrideStream
size	./streams.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	./support/lockedpool.h	/^        size_t size;$/;"	m	class:LockedPool::LockedPageArena
size	./test/prevector_tests.cpp	/^    Size size() const {$/;"	f	class:prevector_tester
size	./timedata.h	/^    int size() const$/;"	f	class:CMedianFilter
size	./txmempool.h	/^    unsigned long size() const$/;"	f	class:CTxMemPool
size	./uint256.h	/^    unsigned int size() const$/;"	f	class:base_blob
size	./univalue/include/univalue.h	/^    size_t size() const { return values.size(); }$/;"	f	class:UniValue
sizeHint	./qt/overviewpage.cpp	/^    inline QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const$/;"	f	class:TxViewDelegate
size_	./leveldb/helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon35::FileState	file:
size_	./leveldb/include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	./leveldb/table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	./leveldb/table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
size_estimate	./dbwrapper.h	/^    size_t size_estimate;$/;"	m	class:CDBBatch
size_threshold	./qt/guiutil.h	/^        int size_threshold;$/;"	m	class:GUIUtil::ToolTipToRichTextFilter
size_to_free_chunk	./support/lockedpool.h	/^    SizeToChunkSortedMap size_to_free_chunk;$/;"	m	class:Arena
size_type	./indirectmap.h	/^    typedef typename base::size_type size_type;$/;"	t	class:indirectmap
size_type	./limitedmap.h	/^    typedef typename std::map<K, V>::size_type size_type;$/;"	t	class:limitedmap
size_type	./prevector.h	/^    typedef Size size_type;$/;"	t	class:prevector
size_type	./streams.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
size_type	./support/allocators/secure.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	./support/allocators/zeroafterfree.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:zero_after_free_allocator
sizeof	./compat/assumptions.h	/^static_assert(sizeof(size_t) == 4 || sizeof(size_t) == 8, "size_t assumed to be 32-bit or 64-bit");$/;"	v
sizeof	./compat/assumptions.h	/^static_assert(sizeof(size_t) == sizeof(void*), "Sizes of size_t and void* assumed to be equal");$/;"	v
sleep_for	./threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::milliseconds rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	./threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::minutes rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	./threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::seconds rel_time)$/;"	f	class:CThreadInterrupt
slice	./crypto/ctaes/ctaes.h	/^    uint16_t slice[8];$/;"	m	struct:__anon45
smallest	./leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	./leveldb/db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	./leveldb/db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	./leveldb/include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	./leveldb/db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
snprintf	./leveldb/port/port_win.h	/^#define snprintf /;"	d
socket	./net.h	/^        SOCKET socket;$/;"	m	struct:CConnman::ListenSocket
sockopt_arg_type	./compat.h	/^typedef char* sockopt_arg_type;$/;"	t
sockopt_arg_type	./compat.h	/^typedef void* sockopt_arg_type;$/;"	t
sort	./qt/bantablemodel.cpp	/^void BanTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:BanTableModel
sort	./qt/peertablemodel.cpp	/^void PeerTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:PeerTableModel
sort	./qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:RecentRequestsTableModel
sortColumn	./qt/coincontroldialog.h	/^    int sortColumn;$/;"	m	class:CoinControlDialog
sortKey	./qt/transactionrecord.h	/^    std::string sortKey;$/;"	m	class:TransactionStatus
sortOrder	./qt/bantablemodel.cpp	/^    Qt::SortOrder sortOrder;$/;"	m	class:BanTablePriv	file:
sortOrder	./qt/coincontroldialog.h	/^    Qt::SortOrder sortOrder;$/;"	m	class:CoinControlDialog
sortOrder	./qt/peertablemodel.cpp	/^    Qt::SortOrder sortOrder;$/;"	m	class:PeerTablePriv	file:
sortView	./qt/coincontroldialog.cpp	/^void CoinControlDialog::sortView(int column, Qt::SortOrder order)$/;"	f	class:CoinControlDialog
sorted	./timedata.h	/^    std::vector<T> sorted() const$/;"	f	class:CMedianFilter
source	./addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
source	./hash.h	/^    Source* source;$/;"	m	class:CHashVerifier
source	./qt/rpcconsole.cpp	/^    const char *source;$/;"	m	struct:__anon68	file:
sourceFile	./sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	./sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
source_	./leveldb/db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	./leveldb/table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
space_	./leveldb/db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
spendTx	./test/script_tests.cpp	/^    CMutableTransaction spendTx;$/;"	m	class:__anon58::TestBuilder	file:
spendsCoinbase	./test/setup_common.h	/^    bool spendsCoinbase;$/;"	m	struct:TestMemPoolEntryHelper
spendsCoinbase	./txmempool.h	/^    const bool spendsCoinbase;      \/\/!< keep track of transactions that spend a coinbase$/;"	m	class:CTxMemPoolEntry
spinnerFrame	./qt/bitcoingui.h	/^    int spinnerFrame = 0;$/;"	m	class:BitcoinGUI
src	./streams.h	/^    FILE *src;            \/\/!< source file$/;"	m	class:CBufferedFile
srcdir	./Makefile	/^srcdir = .$/;"	m
srcdir	./secp256k1/Makefile	/^srcdir = .$/;"	m
srcdir	./univalue/Makefile	/^srcdir = .$/;"	m
ssKey	./dbwrapper.h	/^    CDataStream ssKey;$/;"	m	class:CDBBatch
ssValue	./dbwrapper.h	/^    CDataStream ssValue;$/;"	m	class:CDBBatch
ss_	./leveldb/util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
ssize_t	./compat.h	/^typedef int32_t ssize_t;$/;"	t
ssize_t	./compat.h	/^typedef int64_t ssize_t;$/;"	t
ssize_t	./leveldb/port/port_win.h	/^#define ssize_t /;"	d
stack	./script/script.h	/^    std::vector<std::vector<unsigned char> > stack;$/;"	m	struct:CScriptWitness
stacktop	./script/interpreter.cpp	/^#define stacktop(/;"	d	file:
start	./leveldb/db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon19::SharedState	file:
start	./leveldb/include/leveldb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start	./policy/fees.h	/^    double start = -1;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
start	./rpc/server.cpp	/^    int64_t start;$/;"	m	struct:RPCCommandExecutionInfo	file:
startAutoRefresh	./qt/peertablemodel.cpp	/^void PeerTableModel::startAutoRefresh()$/;"	f	class:PeerTableModel
startExecutor	./qt/rpcconsole.cpp	/^void RPCConsole::startExecutor()$/;"	f	class:RPCConsole
startThread	./qt/bitcoin.cpp	/^void BitcoinApplication::startThread()$/;"	f	class:BitcoinApplication
startThread	./qt/intro.cpp	/^void Intro::startThread()$/;"	f	class:Intro
start_	./leveldb/db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon19::Stats	file:
start_	./leveldb/db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	./leveldb/doc/bench/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	./leveldb/table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
started_bgthread_	./leveldb/util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon8::PosixEnv	file:
starts_with	./leveldb/include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	./leveldb/db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon24::MTThread	file:
state	./leveldb/db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon26::Saver	file:
state	./rpc/mining.cpp	/^    CValidationState state;$/;"	m	class:submitblock_StateCatcher	file:
state	./univalue/lib/univalue_utffilter.h	/^    int state; \/\/ Top bit to be filled in for next UTF-8 byte, or 0$/;"	m	class:JSONUTF8StringFilter
state_	./leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	./leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	./leveldb/db/fault_injection_test.cc	/^  FileState state_;$/;"	m	class:leveldb::TestWritableFile	file:
state_	./leveldb/db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState	file:
state_	./leveldb/include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
state_cv_	./leveldb/db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState	file:
stats	./leveldb/db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon19::ThreadState	file:
stats	./support/lockedpool.cpp	/^Arena::Stats Arena::stats() const$/;"	f	class:Arena
stats	./support/lockedpool.cpp	/^LockedPool::Stats LockedPool::stats() const$/;"	f	class:LockedPool
stats_	./leveldb/db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	./bitcoin-cli.cpp	/^    int status;$/;"	m	struct:HTTPReply	file:
status	./leveldb/db/db_impl.cc	/^  Status status;$/;"	m	struct:leveldb::DBImpl::Writer	file:
status	./leveldb/db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon29::DBIter
status	./leveldb/db/db_test.cc	/^    virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::ModelDB::ModelIter
status	./leveldb/db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	./leveldb/db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	./leveldb/table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	./leveldb/table/iterator.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon12::EmptyIterator
status	./leveldb/table/iterator_wrapper.h	/^  Status status() const     { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	./leveldb/table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon11::MergingIterator
status	./leveldb/table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	./leveldb/table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	./leveldb/table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	./leveldb/table/table_test.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	./leveldb/table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
status	./qt/transactionrecord.h	/^    Status status;$/;"	m	class:TransactionStatus
status	./qt/transactionrecord.h	/^    TransactionStatus status;$/;"	m	class:TransactionRecord
status	./qt/transactiontablemodel.cpp	/^    ChangeType status;$/;"	m	struct:TransactionNotification	file:
status	./qt/walletmodel.h	/^        StatusCode status;$/;"	m	struct:WalletModel::SendCoinsReturn
status	./wallet/wallet.h	/^        enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;$/;"	m	struct:final::ScanResult	typeref:enum:final::ScanResult::__anon118
statusUpdateNeeded	./qt/transactionrecord.cpp	/^bool TransactionRecord::statusUpdateNeeded(int numBlocks) const$/;"	f	class:TransactionRecord
status_	./leveldb/db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon29::DBIter	file:
status_	./leveldb/table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	./leveldb/table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon12::EmptyIterator	file:
status_	./leveldb/table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	./leveldb/table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon17::TwoLevelIterator	file:
stepBy	./qt/bitcoinamountfield.cpp	/^    void stepBy(int steps)$/;"	f	class:AmountSpinBox
stepEnabled	./qt/bitcoinamountfield.cpp	/^    StepEnabled stepEnabled() const$/;"	f	class:AmountSpinBox
stl_shared_counter	./memusage.h	/^struct stl_shared_counter$/;"	s	namespace:memusage
stl_tree_node	./memusage.h	/^struct stl_tree_node$/;"	s	namespace:memusage
stop	./leveldb/db/db_test.cc	/^  port::AtomicPointer stop;$/;"	m	struct:leveldb::__anon24::MTState	file:
stop	./rpc/server.cpp	/^UniValue stop(const JSONRPCRequest& jsonRequest)$/;"	f
stop	./scheduler.cpp	/^void CScheduler::stop(bool drain)$/;"	f	class:CScheduler
stopAutoRefresh	./qt/peertablemodel.cpp	/^void PeerTableModel::stopAutoRefresh()$/;"	f	class:PeerTableModel
stopRequested	./scheduler.h	/^    bool stopRequested;$/;"	m	class:CScheduler
stopWhenEmpty	./scheduler.h	/^    bool stopWhenEmpty;$/;"	m	class:CScheduler
store	./script/sigcache.h	/^    bool store;$/;"	m	class:CachingTransactionSignatureChecker
str	./streams.h	/^    std::string str() const$/;"	f	class:CDataStream
str	./test/dbwrapper_tests.cpp	/^    std::string str;$/;"	m	struct:StringContentsSerializer	file:
str	./univalue/lib/univalue_utffilter.h	/^    std::string &str;$/;"	m	class:JSONUTF8StringFilter
strAddedNode	./net.h	/^    std::string strAddedNode;$/;"	m	struct:AddedNodeInfo
strAddressBad	./test/key_tests.cpp	/^static const std::string strAddressBad = "1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF";$/;"	v	file:
strComment	./wallet/wallet.h	/^    std::string strComment;$/;"	m	class:CWalletKey
strDataDir	./chainparamsbase.h	/^    std::string strDataDir;$/;"	m	class:CBaseChainParams
strDebugMessage	./consensus/validation.h	/^    std::string strDebugMessage;$/;"	m	class:CValidationState
strFile	./wallet/db.h	/^    std::string strFile;$/;"	m	class:BerkeleyBatch
strFile	./wallet/db.h	/^    std::string strFile;$/;"	m	class:BerkeleyDatabase
strHexMaster	./test/bip32_tests.cpp	/^    std::string strHexMaster;$/;"	m	struct:TestVector	file:
strMessageMagic	./util/validation.cpp	/^const std::string strMessageMagic = "Bitcoin Signed Message:\\n";$/;"	v
strMethod	./rpc/server.h	/^    std::string strMethod;$/;"	m	class:JSONRPCRequest
strNetworkID	./chainparams.h	/^    std::string strNetworkID;$/;"	m	class:CChainParams
strOverriddenByCommandLine	./qt/optionsmodel.h	/^    QString strOverriddenByCommandLine;$/;"	m	class:OptionsModel
strPath	./wallet/db.h	/^    std::string strPath;$/;"	m	class:BerkeleyEnvironment
strRPCUserColonPass	./httprpc.cpp	/^static std::string strRPCUserColonPass;$/;"	v	file:
strRejectReason	./consensus/validation.h	/^    std::string strRejectReason;$/;"	m	class:CValidationState
strRejectReason	./net_processing.cpp	/^    std::string strRejectReason;$/;"	m	struct:__anon89::CBlockReject	file:
strSecret1	./test/key_tests.cpp	/^static const std::string strSecret1 = "5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj";$/;"	v	file:
strSecret1C	./test/key_tests.cpp	/^static const std::string strSecret1C = "Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw";$/;"	v	file:
strSecret2	./test/key_tests.cpp	/^static const std::string strSecret2 = "5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3";$/;"	v	file:
strSecret2C	./test/key_tests.cpp	/^static const std::string strSecret2C = "L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g";$/;"	v	file:
strSubVersion	./net.cpp	/^std::string strSubVersion;$/;"	v
strThirdPartyTxUrls	./qt/optionsmodel.h	/^    QString strThirdPartyTxUrls;$/;"	m	class:OptionsModel
stream	./streams.h	/^    Stream* stream;$/;"	m	class:OverrideStream
streamStateFromFormat	./tinyformat.h	/^inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,$/;"	f	namespace:tinyformat::detail
stretchColumnWidth	./qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::stretchColumnWidth(int column)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
stride	./qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
string	./serialize.h	/^    std::string& string;$/;"	m	class:LimitedString
stringval	./test/serialize_tests.cpp	/^    std::string stringval;$/;"	m	class:CSerializeMethodsTestSingle	file:
strnlen	./compat/strnlen.cpp	/^size_t strnlen( const char *start, size_t max_len)$/;"	f
strprintf	./tinyformat.h	/^#define strprintf /;"	d
subdir	./Makefile	/^subdir = src$/;"	m
subdir	./secp256k1/Makefile	/^subdir = .$/;"	m
subdir	./univalue/Makefile	/^subdir = .$/;"	m
subdirs	./Makefile	/^subdirs =  src\/univalue src\/secp256k1$/;"	m
submitblock	./rpc/mining.cpp	/^static UniValue submitblock(const JSONRPCRequest& request)$/;"	f	file:
submitblock_StateCatcher	./rpc/mining.cpp	/^    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}$/;"	f	class:submitblock_StateCatcher
submitblock_StateCatcher	./rpc/mining.cpp	/^class submitblock_StateCatcher : public CValidationInterface$/;"	c	file:
submitheader	./rpc/mining.cpp	/^static UniValue submitheader(const JSONRPCRequest& request)$/;"	f	file:
subnet	./qt/bantablemodel.h	/^    CSubNet subnet;$/;"	m	struct:CCombinedBan
subscribeToCoreSignals	./qt/bitcoingui.cpp	/^void BitcoinGUI::subscribeToCoreSignals()$/;"	f	class:BitcoinGUI
subscribeToCoreSignals	./qt/clientmodel.cpp	/^void ClientModel::subscribeToCoreSignals()$/;"	f	class:ClientModel
subscribeToCoreSignals	./qt/splashscreen.cpp	/^void SplashScreen::subscribeToCoreSignals()$/;"	f	class:SplashScreen
subscribeToCoreSignals	./qt/transactiontablemodel.cpp	/^void TransactionTableModel::subscribeToCoreSignals()$/;"	f	class:TransactionTableModel
subscribeToCoreSignals	./qt/walletmodel.cpp	/^void WalletModel::subscribeToCoreSignals()$/;"	f	class:WalletModel
succeed	./tinyformat.h	/^        struct succeed { char dummy; };$/;"	s	struct:tinyformat::detail::is_convertible
sum	./bench/examples.cpp	/^volatile double sum = 0.0; \/\/ volatile, global so not optimized away$/;"	v
sum_	./leveldb/util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	./leveldb/util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sumadd	./secp256k1/src/scalar_4x64_impl.h	/^#define sumadd(/;"	d
sumadd	./secp256k1/src/scalar_4x64_impl.h	/^#undef sumadd$/;"	d
sumadd	./secp256k1/src/scalar_8x32_impl.h	/^#define sumadd(/;"	d
sumadd	./secp256k1/src/scalar_8x32_impl.h	/^#undef sumadd$/;"	d
sumadd_fast	./secp256k1/src/scalar_4x64_impl.h	/^#define sumadd_fast(/;"	d
sumadd_fast	./secp256k1/src/scalar_4x64_impl.h	/^#undef sumadd_fast$/;"	d
sumadd_fast	./secp256k1/src/scalar_8x32_impl.h	/^#define sumadd_fast(/;"	d
sumadd_fast	./secp256k1/src/scalar_8x32_impl.h	/^#undef sumadd_fast$/;"	d
surpair	./univalue/lib/univalue_utffilter.h	/^    unsigned int surpair; \/\/ First half of open UTF-16 surrogate pair, or 0$/;"	m	class:JSONUTF8StringFilter
swap	./prevector.h	/^    void swap(prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
swap	./test/checkqueue_tests.cpp	/^    void swap(FailingCheck& x)$/;"	f	struct:FailingCheck
swap	./test/checkqueue_tests.cpp	/^    void swap(FakeCheck& x){};$/;"	f	struct:FakeCheck
swap	./test/checkqueue_tests.cpp	/^    void swap(FakeCheckCheckCompletion& x){};$/;"	f	struct:FakeCheckCheckCompletion
swap	./test/checkqueue_tests.cpp	/^    void swap(FrozenCleanupCheck& x){std::swap(should_freeze, x.should_freeze);};$/;"	f	struct:FrozenCleanupCheck
swap	./test/checkqueue_tests.cpp	/^    void swap(MemoryCheck& x) { std::swap(b, x.b); };$/;"	f	struct:MemoryCheck
swap	./test/checkqueue_tests.cpp	/^    void swap(UniqueCheck& x) { std::swap(x.check_id, check_id); };$/;"	f	struct:UniqueCheck
swap	./test/prevector_tests.cpp	/^    void swap() {$/;"	f	class:prevector_tester
swap	./validation.h	/^    void swap(CScriptCheck &check) {$/;"	f	class:CScriptCheck
sync	./leveldb/db/db_impl.cc	/^  bool sync;$/;"	m	struct:leveldb::DBImpl::Writer	file:
sync	./leveldb/include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
syncoptions	./dbwrapper.h	/^    leveldb::WriteOptions syncoptions;$/;"	m	class:CDBWrapper
syncwithvalidationinterfacequeue	./rpc/blockchain.cpp	/^static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)$/;"	f	file:
sysconfdir	./Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	./secp256k1/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	./univalue/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t_	./leveldb/db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
tab	./qt/addressbookpage.h	/^    Tabs tab;$/;"	m	class:AddressBookPage
tabFocus	./qt/rpcconsole.cpp	/^RPCConsole::TabTypes RPCConsole::tabFocus() const$/;"	f	class:RPCConsole
tabTitle	./qt/rpcconsole.cpp	/^QString RPCConsole::tabTitle(TabTypes tab_type) const$/;"	f	class:RPCConsole
table	./cuckoocache.h	/^    std::vector<Element> table;$/;"	m	class:CuckooCache::cache
table	./leveldb/db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table0_	./leveldb/util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table1_	./leveldb/util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table2_	./leveldb/util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table3_	./leveldb/util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
tableRPC	./rpc/server.cpp	/^CRPCTable tableRPC;$/;"	v
tableView	./qt/guiutil.h	/^            QTableView* tableView;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
table_	./leveldb/db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	./leveldb/table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_	./leveldb/util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
table_cache_	./leveldb/db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	./leveldb/db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon30::Repairer	file:
table_cache_	./leveldb/db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	./leveldb/db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon30::Repairer	file:
tables_	./leveldb/db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon30::Repairer	file:
tabs	./qt/rpcconsole.h	/^    std::vector<TabTypes> tabs() const { return {TAB_INFO, TAB_CONSOLE, TAB_GRAPH, TAB_PEERS}; }$/;"	f	class:RPCConsole
tagSequence	./test/raii_event_tests.cpp	/^static uint16_t tagSequence = 0;$/;"	v	file:
tag_free	./test/raii_event_tests.cpp	/^static void tag_free(void* mem) {$/;"	f	file:
tag_malloc	./test/raii_event_tests.cpp	/^static void* tag_malloc(size_t sz) {$/;"	f	file:
tags	./test/raii_event_tests.cpp	/^static std::map<void*, short> tags;$/;"	v	file:
tallyitem	./wallet/rpcwallet.cpp	/^    tallyitem()$/;"	f	struct:tallyitem
tallyitem	./wallet/rpcwallet.cpp	/^struct tallyitem$/;"	s	file:
tardir	./secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	./secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	./secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	./secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz$/;"	m
tardir	./secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	./univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	./univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	./univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	./univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz$/;"	m
tardir	./univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target	./leveldb/include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target	./torcontrol.cpp	/^    std::string target;$/;"	m	class:TorController	file:
target_	./leveldb/db/fault_injection_test.cc	/^  WritableFile* target_;$/;"	m	class:leveldb::TestWritableFile	file:
target_	./leveldb/include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
target_alias	./Makefile	/^target_alias = $/;"	m
target_alias	./secp256k1/Makefile	/^target_alias = $/;"	m
target_alias	./univalue/Makefile	/^target_alias = $/;"	m
taskQueue	./scheduler.h	/^    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;$/;"	m	class:CScheduler
tau	./crypto/chacha20.cpp	/^static const unsigned char tau[] = "expand 16-byte k";$/;"	v	file:
templock	./reverselock.h	/^    Lock templock;$/;"	m	class:reverse_lock
temporary_fd_	./leveldb/util/env_posix.cc	/^  bool temporary_fd_;  \/\/ If true, fd_ is -1 and we open on every read.$/;"	m	class:leveldb::__anon8::PosixRandomAccessFile	file:
test	./leveldb/db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon24::MTState	file:
test	./leveldb/util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	./leveldb/util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	./leveldb/util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	./leveldb/util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
test	./test/prevector_tests.cpp	/^    void test() {$/;"	f	class:prevector_tester	file:
test1	./test/bip32_tests.cpp	/^TestVector test1 =$/;"	v
test1	./test/crypto_tests.cpp	/^const std::string test1 = LongTestString();$/;"	v
test2	./test/bip32_tests.cpp	/^TestVector test2 =$/;"	v
test3	./test/bip32_tests.cpp	/^TestVector test3 =$/;"	v
testChain	./bench/coin_selection.cpp	/^static auto testChain = interfaces::MakeChain();$/;"	v	file:
testChain	./wallet/test/coinselector_tests.cpp	/^static auto testChain = interfaces::MakeChain();$/;"	v	file:
testCreateECDHSecret	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testCreateECDHSecret() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakAdd_1	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakAdd_1() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakAdd_2	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakAdd_2() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakMul_1	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakMul_1() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakMul_2	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakMul_2() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPubKeyCreateNeg	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPubKeyCreateNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testPubKeyCreatePos	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testPubKeyCreatePos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testRandomize	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testRandomize() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testSecKeyVerifyNeg	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSecKeyVerifyNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSecKeyVerifyPos	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSecKeyVerifyPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSignNeg	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSignNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSignPos	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testSignPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testVerifyNeg	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testVerifyNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testVerifyPos	./secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java	/^    public static void testVerifyPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
test_add_neg_y_diff_x	./secp256k1/src/tests.c	/^void test_add_neg_y_diff_x(void) {$/;"	f
test_bad_scalar	./secp256k1/src/modules/ecdh/tests_impl.h	/^void test_bad_scalar(void) {$/;"	f
test_cache	./test/cuckoocache_tests.cpp	/^static double test_cache(size_t megabytes, double load)$/;"	f	file:
test_cache_erase	./test/cuckoocache_tests.cpp	/^static void test_cache_erase(size_t megabytes)$/;"	f	file:
test_cache_erase_parallel	./test/cuckoocache_tests.cpp	/^static void test_cache_erase_parallel(size_t megabytes)$/;"	f	file:
test_cache_generations	./test/cuckoocache_tests.cpp	/^static void test_cache_generations()$/;"	f	file:
test_constant_wnaf	./secp256k1/src/tests.c	/^void test_constant_wnaf(const secp256k1_scalar *number, int w) {$/;"	f
test_constant_wnaf_negate	./secp256k1/src/tests.c	/^void test_constant_wnaf_negate(const secp256k1_scalar *number) {$/;"	f
test_ec_combine	./secp256k1/src/tests.c	/^void test_ec_combine(void) {$/;"	f
test_ecdh_api	./secp256k1/src/modules/ecdh/tests_impl.h	/^void test_ecdh_api(void) {$/;"	f
test_ecdh_generator_basepoint	./secp256k1/src/modules/ecdh/tests_impl.h	/^void test_ecdh_generator_basepoint(void) {$/;"	f
test_ecdsa_der_parse	./secp256k1/src/tests.c	/^int test_ecdsa_der_parse(const unsigned char *sig, size_t siglen, int certainly_der, int certainly_not_der) {$/;"	f
test_ecdsa_edge_cases	./secp256k1/src/tests.c	/^void test_ecdsa_edge_cases(void) {$/;"	f
test_ecdsa_end_to_end	./secp256k1/src/tests.c	/^void test_ecdsa_end_to_end(void) {$/;"	f
test_ecdsa_openssl	./secp256k1/src/tests.c	/^void test_ecdsa_openssl(void) {$/;"	f
test_ecdsa_recovery_api	./secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_api(void) {$/;"	f
test_ecdsa_recovery_edge_cases	./secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_edge_cases(void) {$/;"	f
test_ecdsa_recovery_end_to_end	./secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_end_to_end(void) {$/;"	f
test_ecdsa_sign_verify	./secp256k1/src/tests.c	/^void test_ecdsa_sign_verify(void) {$/;"	f
test_ecmult_constants	./secp256k1/src/tests.c	/^void test_ecmult_constants(void) {$/;"	f
test_ecmult_gen_blind	./secp256k1/src/tests.c	/^void test_ecmult_gen_blind(void) {$/;"	f
test_ecmult_gen_blind_reset	./secp256k1/src/tests.c	/^void test_ecmult_gen_blind_reset(void) {$/;"	f
test_exhaustive_addition	./secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_addition(const secp256k1_ge *group, const secp256k1_gej *groupj, int order) {$/;"	f
test_exhaustive_ecmult	./secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_ecmult(const secp256k1_context *ctx, const secp256k1_ge *group, const secp256k1_gej *groupj, int order) {$/;"	f
test_exhaustive_endomorphism	./secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_endomorphism(const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_recovery_sign	./secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_recovery_verify	./secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_sign	./secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_verify	./secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_failed	./univalue/test/unitester.cpp	/^static bool test_failed = false;$/;"	v	file:
test_fuzz_address_deserialize_LINK	./Makefile	/^test_fuzz_address_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_address_deserialize_OBJECTS	./Makefile	/^test_fuzz_address_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_addrman_deserialize_LINK	./Makefile	/^test_fuzz_addrman_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_addrman_deserialize_OBJECTS	./Makefile	/^test_fuzz_addrman_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_banentry_deserialize_LINK	./Makefile	/^test_fuzz_banentry_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_banentry_deserialize_OBJECTS	./Makefile	/^test_fuzz_banentry_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_block_deserialize_LINK	./Makefile	/^test_fuzz_block_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_block_deserialize_OBJECTS	./Makefile	/^test_fuzz_block_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blockheader_deserialize_LINK	./Makefile	/^test_fuzz_blockheader_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_blockheader_deserialize_OBJECTS	./Makefile	/^test_fuzz_blockheader_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blocklocator_deserialize_LINK	./Makefile	/^test_fuzz_blocklocator_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_blocklocator_deserialize_OBJECTS	./Makefile	/^test_fuzz_blocklocator_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blockmerkleroot_LINK	./Makefile	/^test_fuzz_blockmerkleroot_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_blockmerkleroot_OBJECTS	./Makefile	/^test_fuzz_blockmerkleroot_OBJECTS =  \\$/;"	m
test_fuzz_blocktransactions_deserialize_LINK	./Makefile	/^test_fuzz_blocktransactions_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_blocktransactions_deserialize_OBJECTS	./Makefile	/^test_fuzz_blocktransactions_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blocktransactionsrequest_deserialize_LINK	./Makefile	/^test_fuzz_blocktransactionsrequest_deserialize_LINK = $(LIBTOOL) \\$/;"	m
test_fuzz_blocktransactionsrequest_deserialize_OBJECTS	./Makefile	/^test_fuzz_blocktransactionsrequest_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_blockundo_deserialize_LINK	./Makefile	/^test_fuzz_blockundo_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_blockundo_deserialize_OBJECTS	./Makefile	/^test_fuzz_blockundo_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_bloomfilter_deserialize_LINK	./Makefile	/^test_fuzz_bloomfilter_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_bloomfilter_deserialize_OBJECTS	./Makefile	/^test_fuzz_bloomfilter_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_coins_deserialize_LINK	./Makefile	/^test_fuzz_coins_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_coins_deserialize_OBJECTS	./Makefile	/^test_fuzz_coins_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_diskblockindex_deserialize_LINK	./Makefile	/^test_fuzz_diskblockindex_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_diskblockindex_deserialize_OBJECTS	./Makefile	/^test_fuzz_diskblockindex_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_inv_deserialize_LINK	./Makefile	/^test_fuzz_inv_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_inv_deserialize_OBJECTS	./Makefile	/^test_fuzz_inv_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_messageheader_deserialize_LINK	./Makefile	/^test_fuzz_messageheader_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_messageheader_deserialize_OBJECTS	./Makefile	/^test_fuzz_messageheader_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_netaddr_deserialize_LINK	./Makefile	/^test_fuzz_netaddr_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_netaddr_deserialize_OBJECTS	./Makefile	/^test_fuzz_netaddr_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_script_flags_LINK	./Makefile	/^test_fuzz_script_flags_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_script_flags_OBJECTS	./Makefile	/^test_fuzz_script_flags_OBJECTS = $(am_test_fuzz_script_flags_OBJECTS)$/;"	m
test_fuzz_service_deserialize_LINK	./Makefile	/^test_fuzz_service_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_service_deserialize_OBJECTS	./Makefile	/^test_fuzz_service_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_transaction_deserialize_LINK	./Makefile	/^test_fuzz_transaction_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_transaction_deserialize_OBJECTS	./Makefile	/^test_fuzz_transaction_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_txoutcompressor_deserialize_LINK	./Makefile	/^test_fuzz_txoutcompressor_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
test_fuzz_txoutcompressor_deserialize_OBJECTS	./Makefile	/^test_fuzz_txoutcompressor_deserialize_OBJECTS =  \\$/;"	m
test_fuzz_txundo_deserialize_LINK	./Makefile	/^test_fuzz_txundo_deserialize_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_fuzz_txundo_deserialize_OBJECTS	./Makefile	/^test_fuzz_txundo_deserialize_OBJECTS =  \\$/;"	m
test_ge	./secp256k1/src/tests.c	/^void test_ge(void) {$/;"	f
test_group_decompress	./secp256k1/src/tests.c	/^void test_group_decompress(const secp256k1_fe* x) {$/;"	f
test_no_nul_CXXFLAGS	./univalue/Makefile	/^test_no_nul_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
test_no_nul_DEPENDENCIES	./univalue/Makefile	/^test_no_nul_DEPENDENCIES = libunivalue.la$/;"	m
test_no_nul_LDADD	./univalue/Makefile	/^test_no_nul_LDADD = libunivalue.la$/;"	m
test_no_nul_LDFLAGS	./univalue/Makefile	/^test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_no_nul_LINK	./univalue/Makefile	/^test_no_nul_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
test_no_nul_OBJECTS	./univalue/Makefile	/^test_no_nul_OBJECTS = $(am_test_no_nul_OBJECTS)$/;"	m
test_no_nul_SOURCES	./univalue/Makefile	/^test_no_nul_SOURCES = test\/no_nul.cpp$/;"	m
test_num_add_sub	./secp256k1/src/tests.c	/^void test_num_add_sub(void) {$/;"	f
test_num_jacobi	./secp256k1/src/tests.c	/^void test_num_jacobi(void) {$/;"	f
test_num_mod	./secp256k1/src/tests.c	/^void test_num_mod(void) {$/;"	f
test_num_negate	./secp256k1/src/tests.c	/^void test_num_negate(void) {$/;"	f
test_object_CXXFLAGS	./univalue/Makefile	/^test_object_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
test_object_DEPENDENCIES	./univalue/Makefile	/^test_object_DEPENDENCIES = libunivalue.la$/;"	m
test_object_LDADD	./univalue/Makefile	/^test_object_LDADD = libunivalue.la$/;"	m
test_object_LDFLAGS	./univalue/Makefile	/^test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_object_LINK	./univalue/Makefile	/^test_object_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
test_object_OBJECTS	./univalue/Makefile	/^test_object_OBJECTS = $(am_test_object_OBJECTS)$/;"	m
test_object_SOURCES	./univalue/Makefile	/^test_object_SOURCES = test\/object.cpp$/;"	m
test_one_input	./test/fuzz/deserialize.cpp	/^void test_one_input(std::vector<uint8_t> buffer)$/;"	f
test_one_input	./test/fuzz/script_flags.cpp	/^void test_one_input(std::vector<uint8_t> buffer)$/;"	f
test_point_times_order	./secp256k1/src/tests.c	/^void test_point_times_order(const secp256k1_gej *point) {$/;"	f
test_rand_bits	./secp256k1/src/tests.c	/^void test_rand_bits(int rand32, int bits) {$/;"	f
test_rand_int	./secp256k1/src/tests.c	/^void test_rand_int(uint32_t range, uint32_t subrange) {$/;"	f
test_random_pubkeys	./secp256k1/src/tests.c	/^void test_random_pubkeys(void) {$/;"	f
test_scalar_split	./secp256k1/src/tests.c	/^void test_scalar_split(void) {$/;"	f
test_sqrt	./secp256k1/src/tests.c	/^void test_sqrt(const secp256k1_fe *a, const secp256k1_fe *k) {$/;"	f
test_test_bitcoin_CPPFLAGS	./Makefile	/^test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)$/;"	m
test_test_bitcoin_CXXFLAGS	./Makefile	/^test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
test_test_bitcoin_DEPENDENCIES	./Makefile	/^test_test_bitcoin_DEPENDENCIES = $(am__append_33) \\$/;"	m
test_test_bitcoin_LDADD	./Makefile	/^test_test_bitcoin_LDADD = $(am__append_33) \\$/;"	m
test_test_bitcoin_LDFLAGS	./Makefile	/^test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static$/;"	m
test_test_bitcoin_LINK	./Makefile	/^test_test_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_bitcoin_OBJECTS	./Makefile	/^test_test_bitcoin_OBJECTS = $(am_test_test_bitcoin_OBJECTS) \\$/;"	m
test_test_bitcoin_SOURCES	./Makefile	/^test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)$/;"	m
test_test_json_CXXFLAGS	./univalue/Makefile	/^test_test_json_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
test_test_json_DEPENDENCIES	./univalue/Makefile	/^test_test_json_DEPENDENCIES = libunivalue.la$/;"	m
test_test_json_LDADD	./univalue/Makefile	/^test_test_json_LDADD = libunivalue.la$/;"	m
test_test_json_LDFLAGS	./univalue/Makefile	/^test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_test_json_LINK	./univalue/Makefile	/^test_test_json_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_json_OBJECTS	./univalue/Makefile	/^test_test_json_OBJECTS = $(am_test_test_json_OBJECTS)$/;"	m
test_test_json_SOURCES	./univalue/Makefile	/^test_test_json_SOURCES = test\/test_json.cpp$/;"	m
test_unitester_CXXFLAGS	./univalue/Makefile	/^test_unitester_CXXFLAGS = -I$(top_srcdir)\/include -DJSON_TEST_SRC=\\"$(srcdir)\/$(TEST_DATA_DIR)\\"$/;"	m
test_unitester_DEPENDENCIES	./univalue/Makefile	/^test_unitester_DEPENDENCIES = libunivalue.la$/;"	m
test_unitester_LDADD	./univalue/Makefile	/^test_unitester_LDADD = libunivalue.la$/;"	m
test_unitester_LDFLAGS	./univalue/Makefile	/^test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_unitester_LINK	./univalue/Makefile	/^test_unitester_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_unitester_OBJECTS	./univalue/Makefile	/^test_unitester_OBJECTS = $(am_test_unitester_OBJECTS)$/;"	m
test_unitester_SOURCES	./univalue/Makefile	/^test_unitester_SOURCES = test\/unitester.cpp$/;"	m
test_wnaf	./secp256k1/src/tests.c	/^void test_wnaf(const secp256k1_scalar *number, int w) {$/;"	f
testmempoolaccept	./rpc/rawtransaction.cpp	/^static UniValue testmempoolaccept(const JSONRPCRequest& request)$/;"	f	file:
tests	./leveldb/util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon5	file:
tests_CPPFLAGS	./secp256k1/Makefile	/^tests_CPPFLAGS = -DSECP256K1_BUILD -I$(top_srcdir)\/src \\$/;"	m
tests_DEPENDENCIES	./secp256k1/Makefile	/^tests_DEPENDENCIES = $(am__DEPENDENCIES_2) \\$/;"	m
tests_LDADD	./secp256k1/Makefile	/^tests_LDADD = $(SECP_LIBS) $(SECP_TEST_LIBS) $(COMMON_LIB)$/;"	m
tests_LDFLAGS	./secp256k1/Makefile	/^tests_LDFLAGS = -static$/;"	m
tests_LINK	./secp256k1/Makefile	/^tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
tests_OBJECTS	./secp256k1/Makefile	/^tests_OBJECTS = $(am_tests_OBJECTS)$/;"	m
tests_SOURCES	./secp256k1/Makefile	/^tests_SOURCES = src\/tests.c$/;"	m
text	./qt/utilitydialog.h	/^    QString text;$/;"	m	class:HelpMessageDialog
textChanged	./qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::textChanged()$/;"	f	class:AskPassphraseDialog
textColor	./qt/platformstyle.h	/^    QColor textColor;$/;"	m	class:PlatformStyle
thread	./leveldb/db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
thread	./qt/intro.h	/^    QThread *thread;$/;"	m	class:Intro
thread	./qt/rpcconsole.h	/^    QThread thread;$/;"	m	class:RPCConsole
threadDNSAddressSeed	./net.h	/^    std::thread threadDNSAddressSeed;$/;"	m	class:CConnman
threadGroup	./init.cpp	/^static boost::thread_group threadGroup;$/;"	v	file:
threadGroup	./test/setup_common.h	/^    boost::thread_group threadGroup;$/;"	m	struct:TestingSetup
threadHTTP	./httpserver.cpp	/^std::thread threadHTTP;$/;"	v
threadMessageHandler	./net.h	/^    std::thread threadMessageHandler;$/;"	m	class:CConnman
threadOpenAddedConnections	./net.h	/^    std::thread threadOpenAddedConnections;$/;"	m	class:CConnman
threadOpenConnections	./net.h	/^    std::thread threadOpenConnections;$/;"	m	class:CConnman
threadSocketHandler	./net.h	/^    std::thread threadSocketHandler;$/;"	m	class:CConnman
thread_done	./leveldb/db/db_test.cc	/^  port::AtomicPointer thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon24::MTState	file:
threshold	./versionbits.h	/^    int threshold;$/;"	m	struct:BIP9Stats
tid	./leveldb/db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon19::ThreadState	file:
time	./interfaces/wallet.h	/^    int64_t time;$/;"	m	struct:interfaces::WalletTx
time	./interfaces/wallet.h	/^    int64_t time;$/;"	m	struct:interfaces::WalletTxOut
time	./qt/transactionrecord.h	/^    qint64 time;$/;"	m	class:TransactionRecord
time	./txmempool.h	/^    int64_t time;$/;"	m	struct:LockPoints
time_received	./interfaces/wallet.h	/^    unsigned int time_received;$/;"	m	struct:interfaces::WalletTxStatus
timer	./qt/peertablemodel.h	/^    QTimer *timer;$/;"	m	class:PeerTableModel
timer	./qt/rpcconsole.cpp	/^    QTimer timer;$/;"	m	class:QtRPCTimerBase	file:
timer	./qt/trafficgraphwidget.h	/^    QTimer *timer;$/;"	m	class:TrafficGraphWidget
timerInterface	./rpc/server.cpp	/^static RPCTimerInterface* timerInterface = nullptr;$/;"	v	file:
tiny_cache_	./leveldb/db/autocompact_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::AutoCompactTest	file:
tiny_cache_	./leveldb/db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tiny_cache_	./leveldb/db/fault_injection_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::FaultInjectionTest	file:
tinyformat	./tinyformat.h	/^namespace tinyformat {$/;"	n
tinyformat	./tinyformat.h	/^namespace tinyformat {}$/;"	n
tinyformat_wchar_is_not_supported	./tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	t	struct:tinyformat::detail::is_wchar
tipUpdate	./qt/modaloverlay.cpp	/^void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVerificationProgress)$/;"	f	class:ModalOverlay
title	./qt/csvmodelwriter.h	/^        QString title;$/;"	m	struct:CSVModelWriter::Column
titleAddText	./qt/networkstyle.cpp	/^    const char *titleAddText;$/;"	m	struct:__anon65	file:
titleAddText	./qt/networkstyle.h	/^    QString titleAddText;$/;"	m	class:NetworkStyle
tmp	./crypto/siphash.h	/^    uint64_t tmp;$/;"	m	class:CSipHasher
tmp_	./leveldb/db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_batch_	./leveldb/db/db_impl.h	/^  WriteBatch* tmp_batch_;$/;"	m	class:leveldb::DBImpl
tmp_keys_	./leveldb/table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	./leveldb/db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
toHTML	./qt/transactiondesc.cpp	/^QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)$/;"	f	class:TransactionDesc
toInt	./tinyformat.h	/^        int toInt() const$/;"	f	class:tinyformat::detail::FormatArg
toIntImpl	./tinyformat.h	/^        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)$/;"	f	class:tinyformat::detail::FormatArg
toPosixTime	./scheduler.cpp	/^static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)$/;"	f	file:
toVariant	./qt/notificator.cpp	/^QVariant FreedesktopImage::toVariant(const QImage &img)$/;"	f	class:FreedesktopImage
toggleHidden	./qt/bitcoingui.cpp	/^void BitcoinGUI::toggleHidden()$/;"	f	class:BitcoinGUI
toggleHideAction	./qt/bitcoingui.h	/^    QAction* toggleHideAction = nullptr;$/;"	m	class:BitcoinGUI
togglePruneWarning	./qt/optionsdialog.cpp	/^void OptionsDialog::togglePruneWarning(bool enabled)$/;"	f	class:OptionsDialog
toggleShowPassword	./qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::toggleShowPassword(bool show)$/;"	f	class:AskPassphraseDialog
toggleVisibility	./qt/modaloverlay.cpp	/^void ModalOverlay::toggleVisibility()$/;"	f	class:ModalOverlay
top_build_prefix	./Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	./secp256k1/Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	./univalue/Makefile	/^top_build_prefix = $/;"	m
top_builddir	./Makefile	/^top_builddir = ..$/;"	m
top_builddir	./secp256k1/Makefile	/^top_builddir = .$/;"	m
top_builddir	./univalue/Makefile	/^top_builddir = .$/;"	m
top_distdir	./secp256k1/Makefile	/^top_distdir = $(distdir)$/;"	m
top_distdir	./univalue/Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	./Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	./secp256k1/Makefile	/^top_srcdir = .$/;"	m
top_srcdir	./univalue/Makefile	/^top_srcdir = .$/;"	m
torControlThread	./torcontrol.cpp	/^static std::thread torControlThread;$/;"	v	file:
total	./leveldb/db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon19::SharedState	file:
total	./support/lockedpool.h	/^        size_t total;$/;"	m	struct:Arena::Stats
total	./support/lockedpool.h	/^        size_t total;$/;"	m	struct:LockedPool::Stats
totalConfirmed	./policy/fees.h	/^    double totalConfirmed = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
totalTxSize	./txmempool.h	/^    uint64_t totalTxSize;      \/\/!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.$/;"	m	class:CTxMemPool
total_bytes	./leveldb/db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
trackPackageRemoved	./txmempool.cpp	/^void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {$/;"	f	class:CTxMemPool
transactionProxyModel	./qt/transactionview.h	/^    TransactionFilterProxy *transactionProxyModel;$/;"	m	class:TransactionView
transactionTableModel	./qt/walletmodel.h	/^    TransactionTableModel *transactionTableModel;$/;"	m	class:WalletModel
transactionView	./qt/transactionview.h	/^    QTableView *transactionView;$/;"	m	class:TransactionView
transactionView	./qt/walletview.h	/^    TransactionView *transactionView;$/;"	m	class:WalletView
transactionsPage	./qt/walletview.h	/^    QWidget *transactionsPage;$/;"	m	class:WalletView
transform	./Makefile	/^transform = $(program_transform_name)$/;"	m
transform	./secp256k1/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	./univalue/Makefile	/^transform = $(program_transform_name)$/;"	m
transformNamedArguments	./rpc/server.cpp	/^static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)$/;"	f	file:
translateTransactionType	./qt/addresstablemodel.cpp	/^static AddressTableEntry::Type translateTransactionType(const QString &strPurpose, bool isMine)$/;"	f	file:
trayAndWindowIcon	./qt/networkstyle.h	/^    QIcon trayAndWindowIcon;$/;"	m	class:NetworkStyle
trayIcon	./qt/bitcoingui.h	/^    QSystemTrayIcon* trayIcon = nullptr;$/;"	m	class:BitcoinGUI
trayIcon	./qt/notificator.h	/^    QSystemTrayIcon *trayIcon;$/;"	m	class:Notificator
trayIconActivated	./qt/bitcoingui.cpp	/^void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)$/;"	f	class:BitcoinGUI
trayIconMenu	./qt/bitcoingui.h	/^    const std::unique_ptr<QMenu> trayIconMenu;$/;"	m	class:BitcoinGUI
trigger	./httpserver.cpp	/^void HTTPEvent::trigger(struct timeval* tv)$/;"	f	class:HTTPEvent
trivial_t	./bench/prevector.cpp	/^typedef unsigned char trivial_t;$/;"	t	file:
try_wait	./sync.h	/^    bool try_wait()$/;"	f	class:CSemaphore
tx	./blockencodings.h	/^    CTransactionRef tx;$/;"	m	struct:PrefilledTransaction
tx	./blockencodings.h	/^    CTransactionRef& tx;$/;"	m	struct:TransactionCompressor
tx	./interfaces/wallet.h	/^    CTransactionRef tx;$/;"	m	struct:interfaces::WalletTx
tx	./net_processing.cpp	/^    CTransactionRef tx;$/;"	m	struct:COrphanTx	file:
tx	./psbt.h	/^    boost::optional<CMutableTransaction> tx;$/;"	m	struct:PartiallySignedTransaction
tx	./test/denialofservice_tests.cpp	/^    CTransactionRef tx;$/;"	m	struct:COrphanTx	file:
tx	./txmempool.h	/^    CTransactionRef tx;$/;"	m	struct:TxMempoolInfo
tx	./txmempool.h	/^    const CTransactionRef tx;$/;"	m	class:CTxMemPoolEntry
tx	./wallet/wallet.h	/^    CTransactionRef tx;$/;"	m	class:CMerkleTx
tx	./wallet/wallet.h	/^    const CWalletTx *tx;$/;"	m	class:COutput
txAddressDecoration	./qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txCtAvg	./policy/fees.cpp	/^    std::vector<double> txCtAvg;$/;"	m	class:TxConfirmStats	file:
txStatusDecoration	./qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txTo	./script/interpreter.cpp	/^    const T& txTo;             \/\/!< reference to the spending transaction (the one being serialized)$/;"	m	class:__anon77::CTransactionSignatureSerializer	file:
txTo	./script/interpreter.h	/^    const T* txTo;$/;"	m	class:GenericTransactionSignatureChecker
txTo	./script/sign.h	/^    const CMutableTransaction* txTo;$/;"	m	class:MutableTransactionSignatureCreator
txWatchonlyDecoration	./qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txWatchonlyDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
tx_invalid	./test/data/tx_invalid.json.h	/^static unsigned const char tx_invalid[] = {$/;"	m	namespace:json_tests
tx_noinputs_size	./wallet/wallet.h	/^    size_t tx_noinputs_size = 0;$/;"	m	struct:CoinSelectionParams
tx_valid	./test/data/tx_valid.json.h	/^static unsigned const char tx_valid[] = {$/;"	m	namespace:json_tests
txdata	./script/interpreter.h	/^    const PrecomputedTransactionData* txdata;$/;"	m	class:GenericTransactionSignatureChecker
txdata	./validation.h	/^    PrecomputedTransactionData *txdata;$/;"	m	class:CScriptCheck
txdelegate	./qt/overviewpage.h	/^    TxViewDelegate *txdelegate;$/;"	m	class:OverviewPage
txid_index	./txmempool.h	/^struct txid_index {};$/;"	s
txids	./wallet/rpcwallet.cpp	/^    std::vector<uint256> txids;$/;"	m	struct:tallyitem	file:
txin_is_mine	./interfaces/wallet.h	/^    std::vector<isminetype> txin_is_mine;$/;"	m	struct:interfaces::WalletTx
txlinksMap	./txmempool.h	/^    typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;$/;"	t	class:CTxMemPool
txn	./blockencodings.h	/^    std::vector<CTransactionRef> txn;$/;"	m	class:BlockTransactions
txn	./merkleblock.h	/^    CPartialMerkleTree txn;$/;"	m	class:CMerkleBlock
txn_available	./blockencodings.h	/^    std::vector<CTransactionRef> txn_available;$/;"	m	class:PartiallyDownloadedBlock
txnouttype	./script/standard.h	/^enum txnouttype$/;"	g
txout	./compressor.h	/^    CTxOut &txout;$/;"	m	class:CTxOutCompressor
txout	./interfaces/wallet.h	/^    CTxOut txout;$/;"	m	struct:interfaces::WalletTxOut
txout	./undo.h	/^    Coin* txout;$/;"	m	class:TxInUndoDeserializer
txout	./undo.h	/^    const Coin* txout;$/;"	m	class:TxInUndoSerializer
txout	./wallet/coinselection.h	/^    CTxOut txout;$/;"	m	class:CInputCoin
txout_address	./interfaces/wallet.h	/^    std::vector<CTxDestination> txout_address;$/;"	m	struct:interfaces::WalletTx
txout_address_is_mine	./interfaces/wallet.h	/^    std::vector<isminetype> txout_address_is_mine;$/;"	m	struct:interfaces::WalletTx
txout_is_mine	./interfaces/wallet.h	/^    std::vector<isminetype> txout_is_mine;$/;"	m	struct:interfaces::WalletTx
txval	./test/serialize_tests.cpp	/^    CTransactionRef txval;$/;"	m	class:CSerializeMethodsTestSingle	file:
typ	./univalue/include/univalue.h	/^    UniValue::VType typ;$/;"	m	class:UniValue
type	./leveldb/db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	./leveldb/table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type	./protocol.h	/^    int type;$/;"	m	class:CInv
type	./qt/addresstablemodel.cpp	/^    Type type;$/;"	m	struct:AddressTableEntry	file:
type	./qt/transactionrecord.h	/^    Type type;$/;"	m	class:TransactionRecord
type	./rpc/util.h	/^    UniValue::VType type;$/;"	m	struct:UniValueType
type	./univalue/include/univalue.h	/^    enum VType type() const { return getType(); }$/;"	f	class:UniValue
type	./zmq/zmqabstractnotifier.h	/^    std::string type;$/;"	m	class:CZMQAbstractNotifier
typeAny	./rpc/util.h	/^    bool typeAny;$/;"	m	struct:UniValueType
typeFilter	./qt/transactionfilterproxy.h	/^    quint32 typeFilter;$/;"	m	class:TransactionFilterProxy
typeWidget	./qt/transactionview.h	/^    QComboBox *typeWidget;$/;"	m	class:TransactionView
type_crc_	./leveldb/db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
uBTC	./qt/bitcoinunits.h	/^        uBTC,$/;"	e	enum:BitcoinUnits::Unit
ucmp	./leveldb/db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon26::Saver	file:
ui	./qt/addressbookpage.h	/^    Ui::AddressBookPage *ui;$/;"	m	class:AddressBookPage
ui	./qt/askpassphrasedialog.h	/^    Ui::AskPassphraseDialog *ui;$/;"	m	class:AskPassphraseDialog
ui	./qt/coincontroldialog.h	/^    Ui::CoinControlDialog *ui;$/;"	m	class:CoinControlDialog
ui	./qt/editaddressdialog.h	/^    Ui::EditAddressDialog *ui;$/;"	m	class:EditAddressDialog
ui	./qt/intro.h	/^    Ui::Intro *ui;$/;"	m	class:Intro
ui	./qt/modaloverlay.h	/^    Ui::ModalOverlay *ui;$/;"	m	class:ModalOverlay
ui	./qt/openuridialog.h	/^    Ui::OpenURIDialog *ui;$/;"	m	class:OpenURIDialog
ui	./qt/optionsdialog.h	/^    Ui::OptionsDialog *ui;$/;"	m	class:OptionsDialog
ui	./qt/overviewpage.h	/^    Ui::OverviewPage *ui;$/;"	m	class:OverviewPage
ui	./qt/receivecoinsdialog.h	/^    Ui::ReceiveCoinsDialog *ui;$/;"	m	class:ReceiveCoinsDialog
ui	./qt/receiverequestdialog.h	/^    Ui::ReceiveRequestDialog *ui;$/;"	m	class:ReceiveRequestDialog
ui	./qt/rpcconsole.h	/^    Ui::RPCConsole* const ui;$/;"	m	class:RPCConsole::Ui
ui	./qt/sendcoinsdialog.h	/^    Ui::SendCoinsDialog *ui;$/;"	m	class:SendCoinsDialog
ui	./qt/sendcoinsentry.h	/^    Ui::SendCoinsEntry *ui;$/;"	m	class:SendCoinsEntry
ui	./qt/signverifymessagedialog.h	/^    Ui::SignVerifyMessageDialog *ui;$/;"	m	class:SignVerifyMessageDialog
ui	./qt/transactiondescdialog.h	/^    Ui::TransactionDescDialog *ui;$/;"	m	class:TransactionDescDialog
ui	./qt/utilitydialog.h	/^    Ui::HelpMessageDialog *ui;$/;"	m	class:HelpMessageDialog
uiInterface	./net.h	/^        CClientUIInterface* uiInterface = nullptr;$/;"	m	struct:CConnman::Options
uiInterface	./ui_interface.cpp	/^CClientUIInterface uiInterface;$/;"	v
uiReady	./qt/paymentserver.cpp	/^void PaymentServer::uiReady()$/;"	f	class:PaymentServer
uint128_t	./secp256k1/src/util.h	/^SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;$/;"	t
uint160	./uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}$/;"	f	class:uint160
uint160	./uint256.h	/^    uint160() {}$/;"	f	class:uint160
uint160	./uint256.h	/^class uint160 : public base_blob<160> {$/;"	c
uint160S	./test/uint256_tests.cpp	/^inline uint160 uint160S(const char *str)$/;"	f
uint160S	./test/uint256_tests.cpp	/^inline uint160 uint160S(const std::string& str)$/;"	f
uint16_t	./leveldb/port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint256	./uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}$/;"	f	class:uint256
uint256	./uint256.h	/^    uint256() {}$/;"	f	class:uint256
uint256	./uint256.h	/^class uint256 : public base_blob<256> {$/;"	c
uint256S	./uint256.h	/^inline uint256 uint256S(const char *str)$/;"	f
uint256S	./uint256.h	/^inline uint256 uint256S(const std::string& str)$/;"	f
uint32_t	./chain.h	/^enum BlockStatus: uint32_t {$/;"	g
uint32_t	./leveldb/port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_t	./leveldb/port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint64_t	./protocol.h	/^enum ServiceFlags : uint64_t {$/;"	g
uint64_t	./wallet/wallet.h	/^enum WalletFlags : uint64_t {$/;"	g
uint8_t	./leveldb/port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
uint8_t	./netbase.cpp	/^enum SOCKS5Atyp: uint8_t {$/;"	g	file:
uint8_t	./netbase.cpp	/^enum SOCKS5Command: uint8_t {$/;"	g	file:
uint8_t	./netbase.cpp	/^enum SOCKS5Method: uint8_t {$/;"	g	file:
uint8_t	./netbase.cpp	/^enum SOCKS5Reply: uint8_t {$/;"	g	file:
uint8_t	./netbase.cpp	/^enum SOCKSVersion: uint8_t {$/;"	g	file:
uint_error	./arith_uint256.h	/^    explicit uint_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:uint_error
uint_error	./arith_uint256.h	/^class uint_error : public std::runtime_error {$/;"	c
unbanSelectedNode	./qt/rpcconsole.cpp	/^void RPCConsole::unbanSelectedNode()$/;"	f	class:RPCConsole
unconfTxs	./policy/fees.cpp	/^    std::vector<std::vector<int> > unconfTxs;  \/\/unconfTxs[Y][X]$/;"	m	class:TxConfirmStats	file:
unconfirmed_balance	./interfaces/wallet.h	/^    CAmount unconfirmed_balance = 0;$/;"	m	struct:interfaces::WalletBalances
unconfirmed_watch_only_balance	./interfaces/wallet.h	/^    CAmount unconfirmed_watch_only_balance = 0;$/;"	m	struct:interfaces::WalletBalances
uncounting_illegal_callback_fn	./secp256k1/src/tests.c	/^static void uncounting_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
unescape_unicode_test	./univalue/test/unitester.cpp	/^void unescape_unicode_test()$/;"	f
unique_id	./rpc/server.h	/^    intptr_t unique_id;$/;"	m	class:CRPCCommand
unit	./qt/bitcoinamountfield.h	/^    QValueComboBox *unit;$/;"	m	class:BitcoinAmountField
unit	./qt/overviewpage.cpp	/^    int unit;$/;"	m	class:TxViewDelegate	file:
unitChanged	./qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::unitChanged(int idx)$/;"	f	class:BitcoinAmountField
unitDisplayControl	./qt/bitcoingui.h	/^    UnitDisplayStatusBarControl* unitDisplayControl = nullptr;$/;"	m	class:BitcoinGUI
unitlist	./qt/bitcoinunits.h	/^    QList<BitcoinUnits::Unit> unitlist;$/;"	m	class:BitcoinUnits
unknown	./psbt.h	/^    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;$/;"	m	struct:PSBTInput
unknown	./psbt.h	/^    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;$/;"	m	struct:PSBTOutput
unknown	./psbt.h	/^    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;$/;"	m	struct:PartiallySignedTransaction
unloadwallet	./wallet/rpcwallet.cpp	/^static UniValue unloadwallet(const JSONRPCRequest& request)$/;"	f	file:
unlockAction	./qt/coincontroldialog.h	/^    QAction *unlockAction;$/;"	m	class:CoinControlDialog
unlockCoin	./qt/coincontroldialog.cpp	/^void CoinControlDialog::unlockCoin()$/;"	f	class:CoinControlDialog
unlockWallet	./qt/walletframe.cpp	/^void WalletFrame::unlockWallet()$/;"	f	class:WalletFrame
unlockWallet	./qt/walletview.cpp	/^void WalletView::unlockWallet()$/;"	f	class:WalletView
unordered_node	./memusage.h	/^struct unordered_node : private X$/;"	s	namespace:memusage
unsubscribeFromCoreSignals	./qt/bitcoingui.cpp	/^void BitcoinGUI::unsubscribeFromCoreSignals()$/;"	f	class:BitcoinGUI
unsubscribeFromCoreSignals	./qt/clientmodel.cpp	/^void ClientModel::unsubscribeFromCoreSignals()$/;"	f	class:ClientModel
unsubscribeFromCoreSignals	./qt/splashscreen.cpp	/^void SplashScreen::unsubscribeFromCoreSignals()$/;"	f	class:SplashScreen
unsubscribeFromCoreSignals	./qt/transactiontablemodel.cpp	/^void TransactionTableModel::unsubscribeFromCoreSignals()$/;"	f	class:TransactionTableModel
unsubscribeFromCoreSignals	./qt/walletmodel.cpp	/^void WalletModel::unsubscribeFromCoreSignals()$/;"	f	class:WalletModel
update	./limitedmap.h	/^    void update(const_iterator itIn, const mapped_type& v)$/;"	f	class:limitedmap
update	./qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::update()$/;"	f	class:ReceiveRequestDialog
update	./test/prevector_tests.cpp	/^    void update(Size pos, const T& value) {$/;"	f	class:prevector_tester
updateAddressBook	./qt/walletmodel.cpp	/^void WalletModel::updateAddressBook(const QString &address, const QString &label,$/;"	f	class:WalletModel
updateAlert	./qt/clientmodel.cpp	/^void ClientModel::updateAlert()$/;"	f	class:ClientModel
updateAlerts	./qt/overviewpage.cpp	/^void OverviewPage::updateAlerts(const QString &warnings)$/;"	f	class:OverviewPage
updateAmountColumnTitle	./qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::updateAmountColumnTitle()$/;"	f	class:RecentRequestsTableModel
updateAmountColumnTitle	./qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateAmountColumnTitle()$/;"	f	class:TransactionTableModel
updateBanlist	./qt/clientmodel.cpp	/^void ClientModel::updateBanlist()$/;"	f	class:ClientModel
updateCoinControlState	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)$/;"	f	class:SendCoinsDialog
updateConfirmations	./qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateConfirmations()$/;"	f	class:TransactionTableModel
updateDefaultProxyNets	./qt/optionsdialog.cpp	/^void OptionsDialog::updateDefaultProxyNets()$/;"	f	class:OptionsDialog
updateDisplayUnit	./qt/bitcoingui.cpp	/^void UnitDisplayStatusBarControl::updateDisplayUnit(int newUnits)$/;"	f	class:UnitDisplayStatusBarControl
updateDisplayUnit	./qt/overviewpage.cpp	/^void OverviewPage::updateDisplayUnit()$/;"	f	class:OverviewPage
updateDisplayUnit	./qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::updateDisplayUnit()$/;"	f	class:ReceiveCoinsDialog
updateDisplayUnit	./qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::updateDisplayUnit()$/;"	f	class:RecentRequestsTableModel
updateDisplayUnit	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateDisplayUnit()$/;"	f	class:SendCoinsDialog
updateDisplayUnit	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::updateDisplayUnit()$/;"	f	class:SendCoinsEntry
updateDisplayUnit	./qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateDisplayUnit()$/;"	f	class:TransactionTableModel
updateEncryptionStatus	./qt/walletview.cpp	/^void WalletView::updateEncryptionStatus()$/;"	f	class:WalletView
updateEntry	./qt/addresstablemodel.cpp	/^    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status)$/;"	f	class:AddressTablePriv
updateEntry	./qt/addresstablemodel.cpp	/^void AddressTableModel::updateEntry(const QString &address,$/;"	f	class:AddressTableModel
updateFeeMinimizedLabel	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateFeeMinimizedLabel()$/;"	f	class:SendCoinsDialog
updateFeeSectionControls	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateFeeSectionControls()$/;"	f	class:SendCoinsDialog
updateHeadersSyncProgressLabel	./qt/bitcoingui.cpp	/^void BitcoinGUI::updateHeadersSyncProgressLabel()$/;"	f	class:BitcoinGUI
updateLabel	./qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::updateLabel(const QString &address)$/;"	f	class:SendCoinsEntry
updateLabelLocked	./qt/coincontroldialog.cpp	/^void CoinControlDialog::updateLabelLocked()$/;"	f	class:CoinControlDialog
updateLabels	./qt/coincontroldialog.cpp	/^void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)$/;"	f	class:CoinControlDialog
updateNetworkActive	./qt/clientmodel.cpp	/^void ClientModel::updateNetworkActive(bool networkActive)$/;"	f	class:ClientModel
updateNetworkState	./qt/bitcoingui.cpp	/^void BitcoinGUI::updateNetworkState()$/;"	f	class:BitcoinGUI
updateNetworkState	./qt/rpcconsole.cpp	/^void RPCConsole::updateNetworkState()$/;"	f	class:RPCConsole
updateNodeDetail	./qt/rpcconsole.cpp	/^void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)$/;"	f	class:RPCConsole
updateNumConnections	./qt/clientmodel.cpp	/^void ClientModel::updateNumConnections(int numConnections)$/;"	f	class:ClientModel
updateProxyIcon	./qt/bitcoingui.cpp	/^void BitcoinGUI::updateProxyIcon()$/;"	f	class:BitcoinGUI
updateProxyValidationState	./qt/optionsdialog.cpp	/^void OptionsDialog::updateProxyValidationState()$/;"	f	class:OptionsDialog
updateRates	./qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::updateRates()$/;"	f	class:TrafficGraphWidget
updateSmartFeeLabel	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateSmartFeeLabel()$/;"	f	class:SendCoinsDialog
updateStatus	./qt/transactionrecord.cpp	/^void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t block_time)$/;"	f	class:TransactionRecord
updateStatus	./qt/walletmodel.cpp	/^void WalletModel::updateStatus()$/;"	f	class:WalletModel
updateTabsAndLabels	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateTabsAndLabels()$/;"	f	class:SendCoinsDialog
updateTimer	./qt/clientmodel.cpp	/^void ClientModel::updateTimer()$/;"	f	class:ClientModel
updateTrafficStats	./qt/rpcconsole.cpp	/^void RPCConsole::updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut)$/;"	f	class:RPCConsole
updateTransaction	./qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)$/;"	f	class:TransactionTableModel
updateTransaction	./qt/walletmodel.cpp	/^void WalletModel::updateTransaction()$/;"	f	class:WalletModel
updateView	./qt/coincontroldialog.cpp	/^void CoinControlDialog::updateView()$/;"	f	class:CoinControlDialog
updateWallet	./qt/transactiontablemodel.cpp	/^    void updateWallet(interfaces::Wallet& wallet, const uint256 &hash, int status, bool showTransaction)$/;"	f	class:TransactionTablePriv
updateWalletStatus	./qt/bitcoingui.cpp	/^void BitcoinGUI::updateWalletStatus()$/;"	f	class:BitcoinGUI
updateWatchOnlyColumn	./qt/transactionview.cpp	/^void TransactionView::updateWatchOnlyColumn(bool fHaveWatchOnly)$/;"	f	class:TransactionView
updateWatchOnlyFlag	./qt/walletmodel.cpp	/^void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)$/;"	f	class:WalletModel
updateWatchOnlyLabels	./qt/overviewpage.cpp	/^void OverviewPage::updateWatchOnlyLabels(bool showWatchOnly)$/;"	f	class:OverviewPage
updateWindowTitle	./qt/bitcoingui.cpp	/^void BitcoinGUI::updateWindowTitle()$/;"	f	class:BitcoinGUI
updateYesButton	./qt/sendcoinsdialog.cpp	/^void SendConfirmationDialog::updateYesButton()$/;"	f	class:SendConfirmationDialog
update_ancestor_state	./txmempool.h	/^    update_ancestor_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost) :$/;"	f	struct:update_ancestor_state
update_ancestor_state	./txmempool.h	/^struct update_ancestor_state$/;"	s
update_descendant_state	./txmempool.h	/^    update_descendant_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount) :$/;"	f	struct:update_descendant_state
update_descendant_state	./txmempool.h	/^struct update_descendant_state$/;"	s
update_fee_delta	./txmempool.h	/^    explicit update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }$/;"	f	struct:update_fee_delta
update_fee_delta	./txmempool.h	/^struct update_fee_delta$/;"	s
update_for_parent_inclusion	./miner.h	/^    explicit update_for_parent_inclusion(CTxMemPool::txiter it) : iter(it) {}$/;"	f	struct:update_for_parent_inclusion
update_for_parent_inclusion	./miner.h	/^struct update_for_parent_inclusion$/;"	s
update_lock_points	./txmempool.h	/^    explicit update_lock_points(const LockPoints& _lp) : lp(_lp) { }$/;"	f	struct:update_lock_points
update_lock_points	./txmempool.h	/^struct update_lock_points$/;"	s
uptime	./rpc/server.cpp	/^static UniValue uptime(const JSONRPCRequest& jsonRequest)$/;"	f	file:
uriServer	./qt/paymentserver.h	/^    QLocalServer* uriServer;$/;"	m	class:PaymentServer
uriTests	./qt/test/uritests.cpp	/^void URITests::uriTests()$/;"	f	class:URITests
uri_prefixes	./rest.cpp	/^} uri_prefixes[] = {$/;"	v	typeref:struct:__anon2	file:
url	./qt/rpcconsole.cpp	/^    const char *url;$/;"	m	struct:__anon68	file:
urlDecode	./util/url.cpp	/^std::string urlDecode(const std::string &urlEncoded) {$/;"	f
usage	./test/coins_tests.cpp	/^    size_t& usage() const { return cachedCoinsUsage; }$/;"	f	class:__anon60::CCoinsViewCacheTest
usage_	./leveldb/util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon4::LRUCache	file:
usage_error	./secp256k1/build-aux/test-driver	/^usage_error ()$/;"	f
usage_error	./univalue/build-aux/test-driver	/^usage_error ()$/;"	f
useAvailableBalance	./qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)$/;"	f	class:SendCoinsDialog
useAvailableBalanceClicked	./qt/sendcoinsentry.cpp	/^void SendCoinsEntry::useAvailableBalanceClicked()$/;"	f	class:SendCoinsEntry
useExtraSpacing	./qt/platformstyle.cpp	/^    const bool useExtraSpacing;$/;"	m	struct:__anon66	file:
useExtraSpacing	./qt/platformstyle.h	/^    bool useExtraSpacing;$/;"	m	class:PlatformStyle
use_bnb	./wallet/wallet.h	/^    bool use_bnb = true;$/;"	m	struct:CoinSelectionParams
use_count	./memusage.h	/^    size_t use_count;$/;"	m	struct:memusage::stl_shared_counter
use_max_sig	./wallet/wallet.h	/^    bool use_max_sig;$/;"	m	class:COutput
used	./support/lockedpool.h	/^        size_t used;$/;"	m	struct:Arena::Stats
used	./support/lockedpool.h	/^        size_t used;$/;"	m	struct:LockedPool::Stats
usedReceivingAddresses	./qt/walletframe.cpp	/^void WalletFrame::usedReceivingAddresses()$/;"	f	class:WalletFrame
usedReceivingAddresses	./qt/walletview.cpp	/^void WalletView::usedReceivingAddresses()$/;"	f	class:WalletView
usedReceivingAddressesAction	./qt/bitcoingui.h	/^    QAction* usedReceivingAddressesAction = nullptr;$/;"	m	class:BitcoinGUI
usedReceivingAddressesPage	./qt/walletview.h	/^    AddressBookPage *usedReceivingAddressesPage;$/;"	m	class:WalletView
usedSendingAddresses	./qt/walletframe.cpp	/^void WalletFrame::usedSendingAddresses()$/;"	f	class:WalletFrame
usedSendingAddresses	./qt/walletview.cpp	/^void WalletView::usedSendingAddresses()$/;"	f	class:WalletView
usedSendingAddressesAction	./qt/bitcoingui.h	/^    QAction* usedSendingAddressesAction = nullptr;$/;"	m	class:BitcoinGUI
usedSendingAddressesPage	./qt/walletview.h	/^    AddressBookPage *usedSendingAddressesPage;$/;"	m	class:WalletView
used_keys	./wallet/rpcdump.cpp	/^    std::map<CKeyID, bool> used_keys; \/\/!< Import these private keys if available (the value indicates whether if the key is required for solvability)$/;"	m	struct:ImportData	file:
userClosed	./qt/modaloverlay.h	/^    bool userClosed;$/;"	m	class:ModalOverlay
user_comparator	./leveldb/db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	./leveldb/db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	./leveldb/db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon29::DBIter	file:
user_comparator_	./leveldb/db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	./leveldb/util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon8::__anon9::StartThreadState	file:
user_key	./leveldb/db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	./leveldb/db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	./leveldb/db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	./leveldb/db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon26::Saver	file:
user_policy_	./leveldb/db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
username	./netbase.cpp	/^    std::string username;$/;"	m	struct:ProxyCredentials	file:
util	./util/system.cpp	/^namespace util {$/;"	n	file:
util	./util/system.h	/^namespace util {$/;"	n
util	./util/threadnames.h	/^namespace util {$/;"	n
utxoData	./test/coins_tests.cpp	/^UtxoData utxoData;$/;"	v
utxoupdatepsbt	./rpc/rawtransaction.cpp	/^UniValue utxoupdatepsbt(const JSONRPCRequest& request)$/;"	f
uvTypeName	./univalue/lib/univalue.cpp	/^const char *uvTypeName(UniValue::VType t)$/;"	f
v	./crypto/siphash.h	/^    uint64_t v[4];$/;"	m	class:CSipHasher
v	./secp256k1/src/hash.h	/^    unsigned char v[32];$/;"	m	struct:__anon113
vAddrToSend	./net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vBinds	./net.h	/^        std::vector<CService> vBinds, vWhiteBinds;$/;"	m	struct:CConnman::Options
vBits	./merkleblock.h	/^    std::vector<bool> vBits;$/;"	m	class:CPartialMerkleTree
vBlocksInFlight	./net_processing.cpp	/^    std::list<QueuedBlock> vBlocksInFlight;$/;"	m	struct:__anon89::CNodeState	file:
vChain	./chain.h	/^    std::vector<CBlockIndex*> vChain;$/;"	m	class:CChain
vCoins	./wallet/test/coinselector_tests.cpp	/^static std::vector<COutput> vCoins;$/;"	v	file:
vData	./bloom.h	/^    std::vector<unsigned char> vData;$/;"	m	class:CBloomFilter
vDeployments	./consensus/params.h	/^    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:Consensus::Params
vDerive	./test/bip32_tests.cpp	/^    std::vector<TestDerivation> vDerive;$/;"	m	struct:TestVector	file:
vFixedSeeds	./chainparams.h	/^    std::vector<SeedSpec6> vFixedSeeds;$/;"	m	class:CChainParams
vHash	./merkleblock.h	/^    std::vector<uint256> vHash;$/;"	m	class:CPartialMerkleTree
vHave	./primitives/block.h	/^    std::vector<uint256> vHave;$/;"	m	struct:CBlockLocator
vHeightInFlight	./net_processing.h	/^    std::vector<int> vHeightInFlight;$/;"	m	struct:CNodeStateStats
vMatchedTxn	./merkleblock.h	/^    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;$/;"	m	class:CMerkleBlock
vNodesDisconnected	./net.h	/^    std::list<CNode*> vNodesDisconnected;$/;"	m	class:CConnman
vOrderForm	./wallet/wallet.h	/^    std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vQueueNotifications	./qt/transactiontablemodel.cpp	/^static std::vector< TransactionNotification > vQueueNotifications;$/;"	v	file:
vRPCCommands	./qt/test/rpcnestedtests.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRPCCommands	./rpc/server.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRPCConvertParams	./rpc/client.cpp	/^static const CRPCConvertParam vRPCConvertParams[] =$/;"	v	file:
vRecv	./net.h	/^    CDataStream vRecv;              \/\/ received message data$/;"	m	class:CNetMessage
vRecvGetData	./net.h	/^    std::deque<CInv> vRecvGetData;$/;"	m	class:CNode
vRecvMsg	./net.h	/^    std::list<CNetMessage> vRecvMsg;  \/\/ Used only by SocketHandler thread$/;"	m	class:CNode
vSamplesIn	./qt/trafficgraphwidget.h	/^    QQueue<float> vSamplesIn;$/;"	m	class:TrafficGraphWidget
vSamplesOut	./qt/trafficgraphwidget.h	/^    QQueue<float> vSamplesOut;$/;"	m	class:TrafficGraphWidget
vSeedNodes	./net.h	/^        std::vector<std::string> vSeedNodes;$/;"	m	struct:CConnman::Options
vSeeds	./chainparams.h	/^    std::vector<std::string> vSeeds;$/;"	m	class:CChainParams
vSorted	./timedata.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vTxFees	./miner.h	/^    std::vector<CAmount> vTxFees;$/;"	m	struct:CBlockTemplate
vTxHashesIdx	./txmempool.h	/^    mutable size_t vTxHashesIdx; \/\/!< Index in mempool's vTxHashes$/;"	m	class:CTxMemPoolEntry
vTxSigOpsCost	./miner.h	/^    std::vector<int64_t> vTxSigOpsCost;$/;"	m	struct:CBlockTemplate
vValues	./timedata.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
vWalletUpgrade	./wallet/walletdb.cpp	/^    std::vector<uint256> vWalletUpgrade;$/;"	m	class:CWalletScanState	file:
vWhiteBinds	./net.h	/^        std::vector<CService> vBinds, vWhiteBinds;$/;"	m	struct:CConnman::Options
vWhitelistedRange	./net.h	/^        std::vector<CSubNet> vWhitelistedRange;$/;"	m	struct:CConnman::Options
vWhitelistedRange	./net.h	/^    std::vector<CSubNet> vWhitelistedRange;$/;"	m	class:CConnman
va_copy	./leveldb/util/env_win.cc	/^#define va_copy(/;"	d	file:
val	./leveldb/util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State	file:
val	./univalue/include/univalue.h	/^    std::string val;                       \/\/ numbers are stored as C++ strings$/;"	m	class:UniValue
valid	./netaddress.h	/^        bool valid;$/;"	m	class:CSubNet
valid	./qt/bitcoinunits.cpp	/^bool BitcoinUnits::valid(int unit)$/;"	f	class:BitcoinUnits
valid	./qt/qvalidatedlineedit.h	/^    bool valid;$/;"	m	class:QValidatedLineEdit
valid	./qt/walletmodel.h	/^        bool valid;$/;"	m	class:WalletModel::UnlockContext
validNumStr	./univalue/lib/univalue.cpp	/^static bool validNumStr(const std::string& s)$/;"	f	file:
valid_	./leveldb/db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon29::DBIter	file:
valid_	./leveldb/table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
validate	./qt/bitcoinaddressvalidator.cpp	/^QValidator::State BitcoinAddressCheckValidator::validate(QString &input, int &pos) const$/;"	f	class:BitcoinAddressCheckValidator
validate	./qt/bitcoinaddressvalidator.cpp	/^QValidator::State BitcoinAddressEntryValidator::validate(QString &input, int &pos) const$/;"	f	class:BitcoinAddressEntryValidator
validate	./qt/bitcoinamountfield.cpp	/^    QValidator::State validate(QString &text, int &pos) const$/;"	f	class:AmountSpinBox
validate	./qt/bitcoinamountfield.cpp	/^bool BitcoinAmountField::validate()$/;"	f	class:BitcoinAmountField
validate	./qt/optionsdialog.cpp	/^QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) const$/;"	f	class:ProxyAddressValidator
validate	./qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::validate(interfaces::Node& node)$/;"	f	class:SendCoinsEntry
validateAddress	./qt/walletmodel.cpp	/^bool WalletModel::validateAddress(const QString &address)$/;"	f	class:WalletModel
validateaddress	./rpc/misc.cpp	/^static UniValue validateaddress(const JSONRPCRequest& request)$/;"	f	file:
valtype	./script/interpreter.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	./script/ismine.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	./script/sign.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	./script/standard.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	./test/transaction_tests.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
value	./leveldb/db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon29::DBIter
value	./leveldb/db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	./leveldb/db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	./leveldb/db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	./leveldb/db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon26::Saver	file:
value	./leveldb/table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	./leveldb/table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon12::EmptyIterator
value	./leveldb/table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	./leveldb/table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon11::MergingIterator
value	./leveldb/table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	./leveldb/table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
value	./leveldb/util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon4::LRUHandle	file:
value	./qt/bitcoinamountfield.cpp	/^    CAmount value(bool *valid_out=nullptr) const$/;"	f	class:AmountSpinBox
value	./qt/bitcoinamountfield.cpp	/^CAmount BitcoinAmountField::value(bool *valid_out) const$/;"	f	class:BitcoinAmountField
value	./qt/qvaluecombobox.cpp	/^QVariant QValueComboBox::value() const$/;"	f	class:QValueComboBox
value	./sync.h	/^    int value;$/;"	m	class:CSemaphore
value	./tinyformat.h	/^        static const bool value =$/;"	m	struct:tinyformat::detail::is_convertible
value	./wallet/db.h	/^    u_int8_t value[DB_FILE_ID_LEN];$/;"	m	struct:WalletDatabaseFileId
value_	./leveldb/table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	./leveldb/db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_map	./interfaces/wallet.h	/^    std::map<std::string, std::string> value_map;$/;"	m	struct:interfaces::WalletTx
value_size_	./leveldb/db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
value_type	./indirectmap.h	/^    typedef typename base::value_type value_type;$/;"	t	class:indirectmap
value_type	./limitedmap.h	/^    typedef std::pair<const key_type, mapped_type> value_type;$/;"	t	class:limitedmap
value_type	./prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::iterator
value_type	./prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::reverse_iterator
value_type	./prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_iterator
value_type	./prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_reverse_iterator
value_type	./prevector.h	/^    typedef T value_type;$/;"	t	class:prevector
value_type	./streams.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
value_type	./support/allocators/secure.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	./support/allocators/zeroafterfree.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:zero_after_free_allocator
values	./test/scriptnum_tests.cpp	/^static const int64_t values[] = { 0, 1, -2, 127, 128, -255, 256, (1LL << 15) - 1, -(1LL << 16), (1LL << 24) - 1, (1LL << 31), 1 - (1LL << 32), 1LL << 40 };$/;"	v	file:
values	./univalue/include/univalue.h	/^    std::vector<UniValue> values;$/;"	m	class:UniValue
vch	./pubkey.h	/^    unsigned char vch[PUBLIC_KEY_SIZE];$/;"	m	class:CPubKey
vch	./streams.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchBuf	./streams.h	/^    std::vector<char> vchBuf; \/\/!< the buffer$/;"	m	class:CBufferedFile
vchCoinbaseCommitment	./miner.h	/^    std::vector<unsigned char> vchCoinbaseCommitment;$/;"	m	struct:CBlockTemplate
vchCryptedKey	./wallet/crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	./streams.h	/^    std::vector<unsigned char>& vchData;$/;"	m	class:CVectorWriter
vchFingerprint	./key.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtKey
vchFingerprint	./pubkey.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtPubKey
vchIV	./wallet/crypter.h	/^    std::vector<unsigned char, secure_allocator<unsigned char>> vchIV;$/;"	m	class:CCrypter
vchKey	./wallet/crypter.h	/^    std::vector<unsigned char, secure_allocator<unsigned char>> vchKey;$/;"	m	class:CCrypter
vchKey0	./test/script_tests.cpp	/^const unsigned char vchKey0[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};$/;"	m	namespace:__anon58	file:
vchKey1	./test/script_tests.cpp	/^const unsigned char vchKey1[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};$/;"	m	namespace:__anon58	file:
vchKey2	./test/script_tests.cpp	/^const unsigned char vchKey2[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};$/;"	m	namespace:__anon58	file:
vchOtherDerivationParameters	./wallet/crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	./wallet/wallet.h	/^    CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPubKey	./wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CKeyPool
vchPubKey	./wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CReserveKey
vchSalt	./wallet/crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vector_type	./streams.h	/^    typedef CSerializeData vector_type;$/;"	t	class:CDataStream
verify	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static boolean verify(byte[] data, byte[] signature, byte[] pub) throws AssertFailException{$/;"	m	class:NativeSecp256k1
verify	./test/scriptnum_tests.cpp	/^static bool verify(const CScriptNum10& bignum, const CScriptNum& scriptnum)$/;"	f	file:
verifyAmount	./qt/paymentserver.cpp	/^bool PaymentServer::verifyAmount(const CAmount& requestAmount)$/;"	f	class:PaymentServer
verifyExpired	./qt/paymentserver.cpp	/^bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails)$/;"	f	class:PaymentServer
verifyMessageAction	./qt/bitcoingui.h	/^    QAction* verifyMessageAction = nullptr;$/;"	m	class:BitcoinGUI
verifyNetwork	./qt/paymentserver.cpp	/^bool PaymentServer::verifyNetwork(interfaces::Node& node, const payments::PaymentDetails& requestDetails)$/;"	f	class:PaymentServer
verifySize	./qt/paymentserver.cpp	/^bool PaymentServer::verifySize(qint64 requestSize)$/;"	f	class:PaymentServer
verify_checksums	./leveldb/include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
verify_flags	./script/bitcoinconsensus.cpp	/^static bool verify_flags(unsigned int flags)$/;"	f	file:
verify_script	./script/bitcoinconsensus.cpp	/^static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,$/;"	f	file:
verifychain	./rpc/blockchain.cpp	/^static UniValue verifychain(const JSONRPCRequest& request)$/;"	f	file:
verifymessage	./rpc/misc.cpp	/^static UniValue verifymessage(const JSONRPCRequest& request)$/;"	f	file:
verifytxoutproof	./rpc/rawtransaction.cpp	/^static UniValue verifytxoutproof(const JSONRPCRequest& request)$/;"	f	file:
version	./leveldb/db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon18::IterState	file:
version	./script/standard.h	/^    unsigned int version;$/;"	m	struct:WitnessUnknown
versions_	./leveldb/db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vformat	./tinyformat.h	/^inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)$/;"	f	namespace:tinyformat
vhListenSocket	./net.h	/^    std::vector<ListenSocket> vhListenSocket;$/;"	m	class:CConnman
viewItemChanged	./qt/coincontroldialog.cpp	/^void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)$/;"	f	class:CoinControlDialog
vin	./primitives/transaction.h	/^    const std::vector<CTxIn> vin;$/;"	m	class:CTransaction
vin	./primitives/transaction.h	/^    std::vector<CTxIn> vin;$/;"	m	struct:CMutableTransaction
vinfoBlockFile	./validation.cpp	/^    std::vector<CBlockFileInfo> vinfoBlockFile;$/;"	m	namespace:__anon50	file:
vout	./primitives/transaction.h	/^    const std::vector<CTxOut> vout;$/;"	m	class:CTransaction
vout	./primitives/transaction.h	/^    std::vector<CTxOut> vout;$/;"	m	struct:CMutableTransaction
vout	./txdb.cpp	/^    std::vector<CTxOut> vout;$/;"	m	class:__anon122::CCoins	file:
vout	./wallet/wallet.h	/^    int vout;$/;"	m	struct:COutputEntry
vpblock	./test/versionbits_tests.cpp	/^    std::vector<CBlockIndex*> vpblock;$/;"	m	class:VersionBitsTester	file:
vprevout	./undo.h	/^    std::vector<Coin> vprevout;$/;"	m	class:CTxUndo
vset_	./leveldb/db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	./leveldb/db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
vtx	./primitives/block.h	/^    std::vector<CTransactionRef> vtx;$/;"	m	class:CBlock
vtxundo	./undo.h	/^    std::vector<CTxUndo> vtxundo; \/\/ for all but the coinbase$/;"	m	class:CBlockUndo
w	./secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static final Lock w = rwl.writeLock();$/;"	f	class:NativeSecp256k1	file:
wait	./sync.h	/^    void wait()$/;"	f	class:CSemaphore
wait_mtx_	./leveldb/port/port_win.h	/^  Mutex wait_mtx_;$/;"	m	class:leveldb::port::CondVar
waitforblock	./rpc/blockchain.cpp	/^static UniValue waitforblock(const JSONRPCRequest& request)$/;"	f	file:
waitforblockheight	./rpc/blockchain.cpp	/^static UniValue waitforblockheight(const JSONRPCRequest& request)$/;"	f	file:
waitfornewblock	./rpc/blockchain.cpp	/^static UniValue waitfornewblock(const JSONRPCRequest& request)$/;"	f	file:
waiting_	./leveldb/port/port_win.h	/^  long waiting_;$/;"	m	class:leveldb::port::CondVar
walk	./support/lockedpool.cpp	/^void Arena::walk() const$/;"	f	class:Arena
wallet	./qt/walletmodel.h	/^        WalletModel *wallet;$/;"	m	class:WalletModel::UnlockContext
wallet	./qt/walletmodel.h	/^    interfaces::Wallet& wallet() const { return *m_wallet; }$/;"	f	class:WalletModel
wallet	./wallet/test/wallet_tests.cpp	/^    std::unique_ptr<CWallet> wallet;$/;"	m	class:ListCoinsTestingSetup	file:
walletFrame	./qt/bitcoingui.h	/^    WalletFrame* walletFrame = nullptr;$/;"	m	class:BitcoinGUI
walletModel	./qt/addresstablemodel.h	/^    WalletModel* const walletModel;$/;"	m	class:AddressTableModel
walletModel	./qt/overviewpage.h	/^    WalletModel *walletModel;$/;"	m	class:OverviewPage
walletModel	./qt/recentrequeststablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:RecentRequestsTableModel
walletModel	./qt/transactiontablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:TransactionTableModel
walletModel	./qt/walletview.h	/^    WalletModel *walletModel;$/;"	m	class:WalletView
walletStack	./qt/walletframe.h	/^    QStackedWidget *walletStack;$/;"	m	class:WalletFrame
walletTests	./qt/test/wallettests.cpp	/^void WalletTests::walletTests()$/;"	f	class:WalletTests
wallet_crypto_tests	./wallet/crypter.h	/^namespace wallet_crypto_tests$/;"	n
walletcreatefundedpsbt	./wallet/rpcwallet.cpp	/^UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)$/;"	f
walletlock	./wallet/rpcwallet.cpp	/^static UniValue walletlock(const JSONRPCRequest& request)$/;"	f	file:
walletpassphrase	./wallet/rpcwallet.cpp	/^static UniValue walletpassphrase(const JSONRPCRequest& request)$/;"	f	file:
walletpassphrasechange	./wallet/rpcwallet.cpp	/^static UniValue walletpassphrasechange(const JSONRPCRequest& request)$/;"	f	file:
walletprocesspsbt	./wallet/rpcwallet.cpp	/^UniValue walletprocesspsbt(const JSONRPCRequest& request)$/;"	f
watchOnlyFilter	./qt/transactionfilterproxy.h	/^    WatchOnlyFilter watchOnlyFilter;$/;"	m	class:TransactionFilterProxy
watchOnlyWidget	./qt/transactionview.h	/^    QComboBox *watchOnlyWidget;$/;"	m	class:TransactionView
watch_only_balance	./interfaces/wallet.h	/^    CAmount watch_only_balance = 0;$/;"	m	struct:interfaces::WalletBalances
weak_count	./memusage.h	/^    size_t weak_count;$/;"	m	struct:memusage::stl_shared_counter
whitelisted	./net.h	/^        bool whitelisted;$/;"	m	struct:CConnman::ListenSocket
width	./qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
window	./qt/bitcoin.h	/^    BitcoinGUI *window;$/;"	m	class:BitcoinApplication
withinTarget	./policy/fees.h	/^    double withinTarget = 0;$/;"	m	struct:FeeEstimateHorizon::EstimatorBucket
witness	./script/sign.cpp	/^    std::vector<valtype> witness;$/;"	m	struct:__anon82::Stacks	file:
witness	./script/sign.h	/^    bool witness = false; \/\/\/< Stores whether the input this SigData corresponds to is a witness input$/;"	m	struct:SignatureData
witness_script	./psbt.h	/^    CScript witness_script;$/;"	m	struct:PSBTInput
witness_script	./psbt.h	/^    CScript witness_script;$/;"	m	struct:PSBTOutput
witness_script	./script/sign.h	/^    CScript witness_script; \/\/\/< The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs.$/;"	m	struct:SignatureData
witness_utxo	./psbt.h	/^    CTxOut witness_utxo;$/;"	m	struct:PSBTInput
witnessscript	./wallet/rpcdump.cpp	/^    std::unique_ptr<CScript> witnessscript; \/\/!< Provided witnessScript; will be moved to `import_scripts` if relevant.$/;"	m	struct:ImportData	file:
witscript	./test/script_tests.cpp	/^    CScript witscript;$/;"	m	class:__anon58::TestBuilder	file:
wnaf	./secp256k1/src/bench_internal.c	/^    int wnaf[256];$/;"	m	struct:__anon109	file:
workQueue	./httpserver.cpp	/^static WorkQueue<HTTPClosure>* workQueue = nullptr;$/;"	v	file:
writable_file_error_	./leveldb/util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
writable_file_opened_	./leveldb/db/fault_injection_test.cc	/^  bool writable_file_opened_;$/;"	m	class:leveldb::TestWritableFile	file:
write	./hash.h	/^    void write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
write	./qt/csvmodelwriter.cpp	/^bool CSVModelWriter::write()$/;"	f	class:CSVModelWriter
write	./serialize.h	/^    void write(const char *psz, size_t _nSize)$/;"	f	class:CSizeComputer
write	./streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	./streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CDataStream
write	./streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CVectorWriter
write	./streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:OverrideStream
write	./univalue/lib/univalue_write.cpp	/^std::string UniValue::write(unsigned int prettyIndent,$/;"	f	class:UniValue
writeArray	./univalue/lib/univalue_write.cpp	/^void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const$/;"	f	class:UniValue
writeNewline	./qt/csvmodelwriter.cpp	/^static void writeNewline(QTextStream &f)$/;"	f	file:
writeObject	./univalue/lib/univalue_write.cpp	/^void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const$/;"	f	class:UniValue
writeSep	./qt/csvmodelwriter.cpp	/^static void writeSep(QTextStream &f)$/;"	f	file:
writeValue	./qt/csvmodelwriter.cpp	/^static void writeValue(QTextStream &f, const QString &value)$/;"	f	file:
write_buffer_size	./leveldb/include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_options_	./leveldb/db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
writeoptions	./dbwrapper.h	/^    leveldb::WriteOptions writeoptions;$/;"	m	class:CDBWrapper
writer_	./leveldb/db/log_test.cc	/^  Writer* writer_;$/;"	m	class:leveldb::log::LogTest	file:
writers_	./leveldb/db/db_impl.h	/^  std::deque<Writer*> writers_;$/;"	m	class:leveldb::DBImpl
wtx	./qt/walletmodeltransaction.h	/^    std::unique_ptr<interfaces::PendingWalletTx> wtx;$/;"	m	class:WalletModelTransaction
wtxOrdered	./wallet/wallet.h	/^    TxItems wtxOrdered;$/;"	m	class:final
wtxn	./bench/coin_selection.cpp	/^std::vector<std::unique_ptr<CWalletTx>> wtxn;$/;"	v
wtxn	./wallet/test/coinselector_tests.cpp	/^std::vector<std::unique_ptr<CWalletTx>> wtxn;$/;"	v
x	./bench/prevector.cpp	/^    int x;$/;"	m	struct:nontrivial_t	file:
x	./memusage.h	/^    X x;$/;"	m	struct:memusage::stl_tree_node
x	./secp256k1/src/group.h	/^    secp256k1_fe x; \/* actual X: x\/z^2 *\/$/;"	m	struct:__anon104
x	./secp256k1/src/group.h	/^    secp256k1_fe x;$/;"	m	struct:__anon103
x	./secp256k1/src/group.h	/^    secp256k1_fe_storage x;$/;"	m	struct:__anon105
y	./secp256k1/src/group.h	/^    secp256k1_fe y; \/* actual Y: y\/z^3 *\/$/;"	m	struct:__anon104
y	./secp256k1/src/group.h	/^    secp256k1_fe y;$/;"	m	struct:__anon103
y	./secp256k1/src/group.h	/^    secp256k1_fe_storage y;$/;"	m	struct:__anon105
yesButton	./qt/sendcoinsdialog.h	/^    QAbstractButton *yesButton;$/;"	m	class:SendConfirmationDialog
z	./secp256k1/src/group.h	/^    secp256k1_fe z;$/;"	m	struct:__anon104
zero_after_free_allocator	./support/allocators/zeroafterfree.h	/^struct zero_after_free_allocator : public std::allocator<T> {$/;"	s
zmqError	./zmq/zmqnotificationinterface.cpp	/^void zmqError(const char *str)$/;"	f
zmq_send_multipart	./zmq/zmqpublishnotifier.cpp	/^static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)$/;"	f	file:
~AES256CBCDecrypt	./crypto/aes.cpp	/^AES256CBCDecrypt::~AES256CBCDecrypt()$/;"	f	class:AES256CBCDecrypt
~AES256CBCEncrypt	./crypto/aes.cpp	/^AES256CBCEncrypt::~AES256CBCEncrypt()$/;"	f	class:AES256CBCEncrypt
~AES256Decrypt	./crypto/aes.cpp	/^AES256Decrypt::~AES256Decrypt()$/;"	f	class:AES256Decrypt
~AES256Encrypt	./crypto/aes.cpp	/^AES256Encrypt::~AES256Encrypt()$/;"	f	class:AES256Encrypt
~AddressBookPage	./qt/addressbookpage.cpp	/^AddressBookPage::~AddressBookPage()$/;"	f	class:AddressBookPage
~AddressTableModel	./qt/addresstablemodel.cpp	/^AddressTableModel::~AddressTableModel()$/;"	f	class:AddressTableModel
~AnnotatedMixin	./sync.h	/^    ~AnnotatedMixin() {$/;"	f	class:AnnotatedMixin
~Arena	./leveldb/util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~Arena	./support/lockedpool.cpp	/^Arena::~Arena()$/;"	f	class:Arena
~AskPassphraseDialog	./qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::~AskPassphraseDialog()$/;"	f	class:AskPassphraseDialog
~AutoCompactTest	./leveldb/db/autocompact_test.cc	/^  ~AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
~BanMan	./banman.cpp	/^BanMan::~BanMan()$/;"	f	class:BanMan
~BanTableModel	./qt/bantablemodel.cpp	/^BanTableModel::~BanTableModel()$/;"	f	class:BanTableModel
~BaseIndex	./index/base.cpp	/^BaseIndex::~BaseIndex()$/;"	f	class:BaseIndex
~BaseRequestHandler	./bitcoin-cli.cpp	/^    virtual ~BaseRequestHandler() {}$/;"	f	class:BaseRequestHandler
~BaseSignatureChecker	./script/interpreter.h	/^    virtual ~BaseSignatureChecker() {}$/;"	f	class:BaseSignatureChecker
~BaseSignatureCreator	./script/sign.h	/^    virtual ~BaseSignatureCreator() {}$/;"	f	class:BaseSignatureCreator
~BasicTestingSetup	./test/setup_common.cpp	/^BasicTestingSetup::~BasicTestingSetup()$/;"	f	class:BasicTestingSetup
~Benchmark	./leveldb/db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	./leveldb/doc/bench/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	./leveldb/doc/bench/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~BerkeleyBatch	./wallet/db.h	/^    ~BerkeleyBatch() { Close(); }$/;"	f	class:BerkeleyBatch
~BerkeleyDatabase	./wallet/db.h	/^    ~BerkeleyDatabase() {$/;"	f	class:BerkeleyDatabase
~BerkeleyEnvironment	./wallet/db.cpp	/^BerkeleyEnvironment::~BerkeleyEnvironment()$/;"	f	class:BerkeleyEnvironment
~BitStreamWriter	./streams.h	/^    ~BitStreamWriter()$/;"	f	class:BitStreamWriter
~BitcoinApplication	./qt/bitcoin.cpp	/^BitcoinApplication::~BitcoinApplication()$/;"	f	class:BitcoinApplication
~BitcoinGUI	./qt/bitcoingui.cpp	/^BitcoinGUI::~BitcoinGUI()$/;"	f	class:BitcoinGUI
~Block	./leveldb/table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BlockConstructor	./leveldb/table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~BloomTest	./leveldb/util/bloom_test.cc	/^  ~BloomTest() {$/;"	f	class:leveldb::BloomTest
~Builder	./leveldb/db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~CAddrMan	./addrman.h	/^    ~CAddrMan()$/;"	f	class:CAddrMan
~CAutoFile	./streams.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBlockPolicyEstimator	./policy/fees.cpp	/^CBlockPolicyEstimator::~CBlockPolicyEstimator()$/;"	f	class:CBlockPolicyEstimator
~CBufferedFile	./streams.h	/^    ~CBufferedFile()$/;"	f	class:CBufferedFile
~CCheckQueue	./checkqueue.h	/^    ~CCheckQueue()$/;"	f	class:CCheckQueue
~CCheckQueueControl	./checkqueue.h	/^    ~CCheckQueueControl()$/;"	f	class:CCheckQueueControl
~CCoinsView	./coins.h	/^    virtual ~CCoinsView() {}$/;"	f	class:CCoinsView
~CCoinsViewCursor	./coins.h	/^    virtual ~CCoinsViewCursor() {}$/;"	f	class:CCoinsViewCursor
~CCoinsViewDBCursor	./txdb.h	/^    ~CCoinsViewDBCursor() {}$/;"	f	class:CCoinsViewDBCursor
~CConnman	./net.cpp	/^CConnman::~CConnman()$/;"	f	class:CConnman
~CCrypter	./wallet/crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDBIterator	./dbwrapper.cpp	/^CDBIterator::~CDBIterator() { delete piter; }$/;"	f	class:CDBIterator
~CDBWrapper	./dbwrapper.cpp	/^CDBWrapper::~CDBWrapper()$/;"	f	class:CDBWrapper
~CImportingNow	./init.cpp	/^    ~CImportingNow() {$/;"	f	struct:CImportingNow
~CMainCleanup	./validation.cpp	/^    ~CMainCleanup() {$/;"	f	class:CMainCleanup
~CNetCleanup	./net.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNetProcessingCleanup	./net_processing.cpp	/^    ~CNetProcessingCleanup() {$/;"	f	class:CNetProcessingCleanup
~CNode	./net.cpp	/^CNode::~CNode()$/;"	f	class:CNode
~CReserveKey	./wallet/wallet.h	/^    ~CReserveKey()$/;"	f	class:CReserveKey
~CScheduler	./scheduler.cpp	/^CScheduler::~CScheduler()$/;"	f	class:CScheduler
~CSemaphoreGrant	./sync.h	/^    ~CSemaphoreGrant()$/;"	f	class:CSemaphoreGrant
~CVerifyDB	./validation.cpp	/^CVerifyDB::~CVerifyDB()$/;"	f	class:CVerifyDB
~CWallet	./wallet/wallet.h	/^    ~CWallet()$/;"	f	class:final
~CZMQAbstractNotifier	./zmq/zmqabstractnotifier.cpp	/^CZMQAbstractNotifier::~CZMQAbstractNotifier()$/;"	f	class:CZMQAbstractNotifier
~CZMQNotificationInterface	./zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface::~CZMQNotificationInterface()$/;"	f	class:CZMQNotificationInterface
~Cache	./leveldb/util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheTest	./leveldb/util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~Chain	./interfaces/chain.h	/^    virtual ~Chain() {}$/;"	f	class:interfaces::Chain
~ChainClient	./interfaces/chain.h	/^    virtual ~ChainClient() {}$/;"	f	class:interfaces::ChainClient
~ClientModel	./qt/clientmodel.cpp	/^ClientModel::~ClientModel()$/;"	f	class:ClientModel
~CoinControlDialog	./qt/coincontroldialog.cpp	/^CoinControlDialog::~CoinControlDialog()$/;"	f	class:CoinControlDialog
~CoinsViewScanReserver	./rpc/blockchain.cpp	/^    ~CoinsViewScanReserver() {$/;"	f	class:CoinsViewScanReserver
~Compaction	./leveldb/db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	./leveldb/util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	./leveldb/port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~CondVar	./leveldb/port/port_win.cc	/^CondVar::~CondVar() {$/;"	f	class:leveldb::port::CondVar
~Constructor	./leveldb/table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	./leveldb/db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~DB	./leveldb/db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	./leveldb/table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	./leveldb/db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	./leveldb/db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon29::DBIter
~DBTest	./leveldb/db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~DisconnectedBlockTransactions	./txmempool.h	/^    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }$/;"	f	struct:DisconnectedBlockTransactions
~ECCVerifyHandle	./pubkey.cpp	/^ECCVerifyHandle::~ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
~EditAddressDialog	./qt/editaddressdialog.cpp	/^EditAddressDialog::~EditAddressDialog()$/;"	f	class:EditAddressDialog
~Env	./leveldb/util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	./leveldb/util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FaultInjectionTest	./leveldb/db/fault_injection_test.cc	/^  ~FaultInjectionTest() {$/;"	f	class:leveldb::FaultInjectionTest
~FaultInjectionTestEnv	./leveldb/db/fault_injection_test.cc	/^  virtual ~FaultInjectionTestEnv() { }$/;"	f	class:leveldb::FaultInjectionTestEnv
~FileLock	./fs.cpp	/^FileLock::~FileLock()$/;"	f	class:fsbridge::FileLock
~FileLock	./leveldb/util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	./leveldb/helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon35::FileState	file:
~FilterPolicy	./leveldb/util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	./leveldb/db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~FrozenCleanupCheck	./test/checkqueue_tests.cpp	/^    ~FrozenCleanupCheck()$/;"	f	struct:FrozenCleanupCheck
~HTTPClosure	./httpserver.h	/^    virtual ~HTTPClosure() {}$/;"	f	class:HTTPClosure
~HTTPEvent	./httpserver.cpp	/^HTTPEvent::~HTTPEvent()$/;"	f	class:HTTPEvent
~HTTPRequest	./httpserver.cpp	/^HTTPRequest::~HTTPRequest()$/;"	f	class:HTTPRequest
~HandleCallback	./qt/test/apptests.cpp	/^AppTests::HandleCallback::~HandleCallback()$/;"	f	class:AppTests::HandleCallback
~HandleTable	./leveldb/util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon4::HandleTable
~Handler	./interfaces/handler.h	/^    virtual ~Handler() {}$/;"	f	class:interfaces::Handler
~Handler	./leveldb/db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Harness	./leveldb/table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~HelpMessageDialog	./qt/utilitydialog.cpp	/^HelpMessageDialog::~HelpMessageDialog()$/;"	f	class:HelpMessageDialog
~Histogram	./leveldb/util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~InMemoryEnv	./leveldb/helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon35::InMemoryEnv
~InitWalletDirTestingSetup	./wallet/test/init_test_fixture.cpp	/^InitWalletDirTestingSetup::~InitWalletDirTestingSetup()$/;"	f	class:InitWalletDirTestingSetup
~Intro	./qt/intro.cpp	/^Intro::~Intro()$/;"	f	class:Intro
~Iterator	./leveldb/table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	./leveldb/table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	./leveldb/table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	./leveldb/util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon4::LRUCache
~ListCoinsTestingSetup	./wallet/test/wallet_tests.cpp	/^    ~ListCoinsTestingSetup()$/;"	f	class:ListCoinsTestingSetup
~Lock	./interfaces/chain.h	/^        virtual ~Lock() {}$/;"	f	class:interfaces::Chain::Lock
~LockData	./sync.cpp	/^    ~LockData() { available = false; }$/;"	f	struct:LockData
~LockedPageAllocator	./support/lockedpool.h	/^    virtual ~LockedPageAllocator() {}$/;"	f	class:LockedPageAllocator
~LockedPageArena	./support/lockedpool.cpp	/^LockedPool::LockedPageArena::~LockedPageArena()$/;"	f	class:LockedPool::LockedPageArena
~LockedPool	./support/lockedpool.cpp	/^LockedPool::~LockedPool()$/;"	f	class:LockedPool
~LogTest	./leveldb/db/log_test.cc	/^  ~LogTest() {$/;"	f	class:leveldb::log::LogTest
~Logger	./leveldb/util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	./leveldb/db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemEnvTest	./leveldb/helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() {$/;"	f	class:leveldb::MemEnvTest
~MemTable	./leveldb/db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	./leveldb/table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MemoryCheck	./test/checkqueue_tests.cpp	/^    ~MemoryCheck()$/;"	f	struct:MemoryCheck
~MergingIterator	./leveldb/table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon11::MergingIterator
~ModalOverlay	./qt/modaloverlay.cpp	/^ModalOverlay::~ModalOverlay()$/;"	f	class:ModalOverlay
~ModelDB	./leveldb/db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	./leveldb/db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	./leveldb/port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~Mutex	./leveldb/port/port_win.cc	/^Mutex::~Mutex() {$/;"	f	class:leveldb::port::Mutex
~Node	./interfaces/node.h	/^    virtual ~Node() {}$/;"	f	class:interfaces::Node
~Notifications	./interfaces/chain.h	/^        virtual ~Notifications() {}$/;"	f	class:interfaces::Chain::Notifications
~Notificator	./qt/notificator.cpp	/^Notificator::~Notificator()$/;"	f	class:Notificator
~OpenURIDialog	./qt/openuridialog.cpp	/^OpenURIDialog::~OpenURIDialog()$/;"	f	class:OpenURIDialog
~OptionsDialog	./qt/optionsdialog.cpp	/^OptionsDialog::~OptionsDialog()$/;"	f	class:OptionsDialog
~OverviewPage	./qt/overviewpage.cpp	/^OverviewPage::~OverviewPage()$/;"	f	class:OverviewPage
~PaymentServer	./qt/paymentserver.cpp	/^PaymentServer::~PaymentServer()$/;"	f	class:PaymentServer
~PeerTableModel	./qt/peertablemodel.cpp	/^PeerTableModel::~PeerTableModel()$/;"	f	class:PeerTableModel
~PendingWalletTx	./interfaces/wallet.h	/^    virtual ~PendingWalletTx() {}$/;"	f	class:interfaces::PendingWalletTx
~PosixEnv	./leveldb/util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon8::PosixEnv
~PosixLogger	./leveldb/util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapReadableFile	./leveldb/util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() {$/;"	f	class:leveldb::__anon8::PosixMmapReadableFile
~PosixRandomAccessFile	./leveldb/util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() {$/;"	f	class:leveldb::__anon8::PosixRandomAccessFile
~PosixSequentialFile	./leveldb/util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon8::PosixSequentialFile
~PosixWritableFile	./leveldb/util/env_posix.cc	/^  ~PosixWritableFile() {$/;"	f	class:leveldb::__anon8::PosixWritableFile
~Printer	./bench/bench.h	/^    virtual ~Printer() {}$/;"	f	class:benchmark::Printer
~QtRPCTimerBase	./qt/rpcconsole.cpp	/^    ~QtRPCTimerBase() {}$/;"	f	class:QtRPCTimerBase
~QtRPCTimerInterface	./qt/rpcconsole.cpp	/^    ~QtRPCTimerInterface() {}$/;"	f	class:QtRPCTimerInterface
~RNGState	./random.cpp	/^    ~RNGState()$/;"	f	class:__anon61::RNGState
~RPCCommandExecution	./rpc/server.cpp	/^    ~RPCCommandExecution()$/;"	f	struct:RPCCommandExecution
~RPCConsole	./qt/rpcconsole.cpp	/^RPCConsole::~RPCConsole()$/;"	f	class:RPCConsole
~RPCTimerBase	./rpc/server.h	/^    virtual ~RPCTimerBase() {}$/;"	f	class:RPCTimerBase
~RPCTimerInterface	./rpc/server.h	/^    virtual ~RPCTimerInterface() {}$/;"	f	class:RPCTimerInterface
~RandomAccessFile	./leveldb/util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	./leveldb/helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon35::RandomAccessFileImpl
~Reader	./leveldb/db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~ReceiveCoinsDialog	./qt/receivecoinsdialog.cpp	/^ReceiveCoinsDialog::~ReceiveCoinsDialog()$/;"	f	class:ReceiveCoinsDialog
~ReceiveRequestDialog	./qt/receiverequestdialog.cpp	/^ReceiveRequestDialog::~ReceiveRequestDialog()$/;"	f	class:ReceiveRequestDialog
~RecentRequestsTableModel	./qt/recentrequeststablemodel.cpp	/^RecentRequestsTableModel::~RecentRequestsTableModel()$/;"	f	class:RecentRequestsTableModel
~RecoveryTest	./leveldb/db/recovery_test.cc	/^  ~RecoveryTest() {$/;"	f	class:leveldb::RecoveryTest
~Rep	./leveldb/table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	./leveldb/db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon30::Repairer
~Reporter	./leveldb/db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~SafeDbt	./wallet/db.cpp	/^BerkeleyBatch::SafeDbt::~SafeDbt()$/;"	f	class:BerkeleyBatch::SafeDbt
~Secp256k1Init	./bitcoin-tx.cpp	/^    ~Secp256k1Init() {$/;"	f	class:Secp256k1Init
~SendCoinsDialog	./qt/sendcoinsdialog.cpp	/^SendCoinsDialog::~SendCoinsDialog()$/;"	f	class:SendCoinsDialog
~SendCoinsEntry	./qt/sendcoinsentry.cpp	/^SendCoinsEntry::~SendCoinsEntry()$/;"	f	class:SendCoinsEntry
~SequentialFile	./leveldb/util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	./leveldb/helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon35::SequentialFileImpl
~ShardedLRUCache	./leveldb/util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon4::ShardedLRUCache
~SignVerifyMessageDialog	./qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::~SignVerifyMessageDialog()$/;"	f	class:SignVerifyMessageDialog
~SigningProvider	./script/sign.h	/^    virtual ~SigningProvider() {}$/;"	f	class:SigningProvider
~Snapshot	./leveldb/db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~SplashScreen	./qt/splashscreen.cpp	/^SplashScreen::~SplashScreen()$/;"	f	class:SplashScreen
~Status	./leveldb/include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~StringSink	./leveldb/table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	./leveldb/table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Table	./leveldb/table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	./leveldb/table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	./leveldb/db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	./leveldb/table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~TestChain100Setup	./test/setup_common.cpp	/^TestChain100Setup::~TestChain100Setup()$/;"	f	class:TestChain100Setup
~TestWritableFile	./leveldb/db/fault_injection_test.cc	/^TestWritableFile::~TestWritableFile() {$/;"	f	class:leveldb::TestWritableFile
~Tester	./leveldb/util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~TestingSetup	./test/setup_common.cpp	/^TestingSetup::~TestingSetup()$/;"	f	class:TestingSetup
~TorControlConnection	./torcontrol.cpp	/^TorControlConnection::~TorControlConnection()$/;"	f	class:TorControlConnection
~TorController	./torcontrol.cpp	/^TorController::~TorController()$/;"	f	class:TorController
~TransactionDescDialog	./qt/transactiondescdialog.cpp	/^TransactionDescDialog::~TransactionDescDialog()$/;"	f	class:TransactionDescDialog
~TransactionTableModel	./qt/transactiontablemodel.cpp	/^TransactionTableModel::~TransactionTableModel()$/;"	f	class:TransactionTableModel
~TwoLevelIterator	./leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon17::TwoLevelIterator
~TxIndex	./index/txindex.cpp	/^TxIndex::~TxIndex() {}$/;"	f	class:TxIndex
~UniValue	./univalue/include/univalue.h	/^    ~UniValue() {}$/;"	f	class:UniValue
~UnlockContext	./qt/walletmodel.cpp	/^WalletModel::UnlockContext::~UnlockContext()$/;"	f	class:WalletModel::UnlockContext
~Version	./leveldb/db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionBitsTester	./test/versionbits_tests.cpp	/^    ~VersionBitsTester() {$/;"	f	class:VersionBitsTester
~VersionEdit	./leveldb/db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	./leveldb/db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~Wallet	./interfaces/wallet.h	/^    virtual ~Wallet() {}$/;"	f	class:interfaces::Wallet
~WalletController	./qt/walletcontroller.cpp	/^WalletController::~WalletController()$/;"	f	class:WalletController
~WalletFrame	./qt/walletframe.cpp	/^WalletFrame::~WalletFrame()$/;"	f	class:WalletFrame
~WalletInitInterface	./walletinitinterface.h	/^    virtual ~WalletInitInterface() {}$/;"	f	class:WalletInitInterface
~WalletModel	./qt/walletmodel.cpp	/^WalletModel::~WalletModel()$/;"	f	class:WalletModel
~WalletRescanReserver	./wallet/wallet.h	/^    ~WalletRescanReserver()$/;"	f	class:WalletRescanReserver
~WalletView	./qt/walletview.cpp	/^WalletView::~WalletView()$/;"	f	class:WalletView
~Win32Env	./leveldb/util/env_win.cc	/^Win32Env::~Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
~Win32FileLock	./leveldb/util/env_win.cc	/^Win32FileLock::~Win32FileLock()$/;"	f	class:leveldb::Win32::Win32FileLock
~Win32Logger	./leveldb/util/env_win.cc	/^Win32Logger::~Win32Logger()$/;"	f	class:leveldb::Win32::Win32Logger
~Win32RandomAccessFile	./leveldb/util/env_win.cc	/^Win32RandomAccessFile::~Win32RandomAccessFile()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
~Win32SequentialFile	./leveldb/util/env_win.cc	/^Win32SequentialFile::~Win32SequentialFile()$/;"	f	class:leveldb::Win32::Win32SequentialFile
~Win32WritableFile	./leveldb/util/env_win.cc	/^Win32WritableFile::~Win32WritableFile()$/;"	f	class:leveldb::Win32::Win32WritableFile
~WinCmdLineArgs	./util/system.cpp	/^WinCmdLineArgs::~WinCmdLineArgs()$/;"	f	class:util::WinCmdLineArgs
~WorkQueue	./httpserver.cpp	/^    ~WorkQueue()$/;"	f	class:WorkQueue
~WritableFile	./leveldb/util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	./leveldb/helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon35::WritableFileImpl
~WriteBatch	./leveldb/db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	./leveldb/db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~ifstream	./fs.h	/^        ~ifstream() { close(); }$/;"	f	class:fsbridge::ifstream
~leveldb_comparator_t	./leveldb/db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	./leveldb/db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
~ofstream	./fs.h	/^        ~ofstream() { close(); }$/;"	f	class:fsbridge::ofstream
~prevector	./prevector.h	/^    ~prevector() {$/;"	f	class:prevector
~prevector_tester	./test/prevector_tests.cpp	/^    ~prevector_tester() {$/;"	f	class:prevector_tester
~reverse_lock	./reverselock.h	/^    ~reverse_lock() {$/;"	f	class:reverse_lock
